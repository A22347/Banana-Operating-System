
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 80 02 00       	call   c00280a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 52 8c 02 c0       	mov    ebx,0xc0028c52
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 60 8c 02 c0    	cmp    ebx,0xc0028c60
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 d2 02 c0       	mov    eax,0xc002d298
c0000049:	3d 98 d2 02 c0       	cmp    eax,0xc002d298
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 d2 02 c0       	push   0xc002d298
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 d2 02 c0       	mov    eax,0xc002d298
c0000075:	2d 98 d2 02 c0       	sub    eax,0xc002d298
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 d2 02 c0       	push   0xc002d298
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 68 8c 02 c0       	mov    ebx,0xc0028c68
c00000bb:	81 eb 64 8c 02 c0    	sub    ebx,0xc0028c64
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 64 8c 02 c0       	mov    esi,0xc0028c64
c00000ca:	a1 cc d8 02 c0       	mov    eax,ds:0xc002d8cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc d8 02 c0       	mov    ds:0xc002d8cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc d8 02 c0       	mov    eax,ds:0xc002d8cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 d2 02 c0       	push   0xc002d298
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d8c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 d8 02 c0       	push   0xc002d8d0
c000012c:	68 98 d2 02 c0       	push   0xc002d298
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 59 d0 01 00       	call   c001d3f4 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 3a 25 01 00       	call   c00128ed <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 37 d0 01 00       	call   c001d3f4 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 85 d4 01 00       	call   c001d861 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 33 da 01 00       	call   c001de18 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 10 dd 02 c0 	lgdtd  ds:0xc002dd10
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 18 42 01 00       	call   c00147f1 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 e8 d8 02 c0       	mov    ds:0xc002d8e8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 e8 d8 02 c0    	mov    DWORD PTR ds:0xc002d8e8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d e8 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8e8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 80 8c 02 c0 02 	test   BYTE PTR [edx-0x3ffd7380],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 80 8c 02 c0 01 	test   BYTE PTR [edx-0x3ffd7380],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 80 8c 02 c0 08 	test   BYTE PTR [edx-0x3ffd7380],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 80 8c 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7380],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 80 8c 02 c0 01 	test   BYTE PTR [edx-0x3ffd7380],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 00 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d900
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 00 d9 02 c0    	mov    DWORD PTR ds:0xc002d900,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 04 d9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd26fc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 04 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd26fc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 00 d9 02 c0    	mov    DWORD PTR ds:0xc002d900,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 2c d9 02 c0    	cmp    DWORD PTR ds:0xc002d92c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 3c d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d93c
c0000e60:	c7 42 0c 34 d9 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d934
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 3c d9 02 c0    	mov    DWORD PTR ds:0xc002d93c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 2c d9 02 c0    	mov    DWORD PTR ds:0xc002d92c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 00 d9 02 c0 02 	test   BYTE PTR ds:0xc002d900,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 00 d9 02 c0    	mov    edi,DWORD PTR ds:0xc002d900
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 04 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd26fc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 04 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd26fc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 34 d9 02 c0 	lea    edx,[eax*8-0x3ffd26cc]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 40 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d940
c00011e2:	81 fb 34 d9 02 c0    	cmp    ebx,0xc002d934
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 34 d9 02 c0       	cmp    eax,0xc002d934
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 30 d9 02 c0    	cmp    DWORD PTR ds:0xc002d930,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 3c d9 02 c0       	mov    ds:0xc002d93c,eax
c000121e:	a3 40 d9 02 c0       	mov    ds:0xc002d940,eax
c0001223:	a3 30 d9 02 c0       	mov    ds:0xc002d930,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 34 d9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d934
c0001231:	c7 40 0c 34 d9 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d934
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 40 d9 02 c0       	mov    ds:0xc002d940,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 34 d9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d934
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 f8 d8 02 c0 	lea    ebp,[edx*4-0x3ffd2708]
c0001282:	8b 14 95 00 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2700]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 00 d9 02 c0 	lea    ecx,[edx*4-0x3ffd2700]
c000129d:	8b 14 95 00 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2700]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 34 dc 02 c0 	or     DWORD PTR [edi*4-0x3ffd23cc],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 34 d9 02 c0 	lea    eax,[eax*8-0x3ffd26cc]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 3c d9 02 c0    	mov    DWORD PTR ds:0xc002d93c,ecx
c0001357:	89 0d 40 d9 02 c0    	mov    DWORD PTR ds:0xc002d940,ecx
c000135d:	c7 41 08 34 d9 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d934
c0001364:	c7 41 0c 34 d9 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d934
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 2c d9 02 c0 	lea    edx,[ecx*8-0x3ffd26d4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 34 dc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd23cc]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 34 dc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd23cc]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 2c d9 02 c0 	lea    edx,[eax*4-0x3ffd26d4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 34 dc 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd23cc],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 3c d9 02 c0    	mov    DWORD PTR ds:0xc002d93c,edi
c000142a:	89 3d 40 d9 02 c0    	mov    DWORD PTR ds:0xc002d940,edi
c0001430:	c7 47 08 34 d9 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d934
c0001437:	c7 47 0c 34 d9 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d934
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 30 d9 02 c0    	mov    DWORD PTR ds:0xc002d930,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 2c d9 02 c0       	mov    eax,ds:0xc002d92c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 2c d9 02 c0    	mov    DWORD PTR ds:0xc002d92c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 00 d9 02 c0       	mov    edx,0xc002d900
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 00 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d900,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 54 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc54
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 54 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc54,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 54 dc 02 c0    	mov    DWORD PTR ds:0xc002dc54,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 2c d9 02 c0    	cmp    DWORD PTR ds:0xc002d92c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 2c d9 02 c0    	mov    DWORD PTR ds:0xc002d92c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 00 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d900,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 5c dc 02 c0    	push   DWORD PTR ds:0xc002dc5c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 00 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d900,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 5c dc 02 c0       	mov    eax,ds:0xc002dc5c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 2c d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d92c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 2c d9 02 c0       	mov    eax,ds:0xc002d92c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 04 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd26fc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 34 d9 02 c0       	mov    eax,0xc002d934
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 2c dc 02 c0       	cmp    eax,0xc002dc2c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 68 dc 02 c0       	mov    eax,ds:0xc002dc68
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 50 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dc50
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 64 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dc64
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 74 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dc74
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 84 8d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd727c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 00 d9 02 c0       	mov    eax,ds:0xc002d900
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 00 d9 02 c0       	mov    ds:0xc002d900,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 44 dc 02 c0    	mov    DWORD PTR ds:0xc002dc44,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 48 dc 02 c0    	mov    DWORD PTR ds:0xc002dc48,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 4c dc 02 c0    	mov    DWORD PTR ds:0xc002dc4c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 54 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc54,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 e0 13 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcec20]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 e4 eb 01 00       	jmp    c0020810 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 e0 13 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcec20]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 15 ec 01 00       	jmp    c0020857 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 e0 13 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcec20]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 3d ec 01 00       	jmp    c002089e <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 c8 44 02 00       	call   c002640c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 a0 8e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7160]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 a0 8e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7160]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba a0 8d 02 c0       	mov    edx,0xc0028da0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba c0 8e 02 c0       	mov    edx,0xc0028ec0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 20 c1 02 c0       	mov    edx,0xc002c120
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba cc 8e 02 c0       	mov    edx,0xc0028ecc
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba b0 8e 02 c0       	mov    edx,0xc0028eb0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 a0 dc 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2360]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 80 dc 02 c0    	mov    ax,ds:0xc002dc80
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 80 dc 02 c0    	mov    ds:0xc002dc80,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 c5 32 02 00       	call   c002640c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 d2 8e 02 c0       	mov    eax,0xc0028ed2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 20 8e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd71e0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 db 8e 02 c0       	mov    eax,0xc0028edb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 a0 8e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7160]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 90 1c 02 00       	call   c002640c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba b0 8e 02 c0       	mov    edx,0xc0028eb0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba a0 8d 02 c0       	mov    edx,0xc0028da0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba b0 8d 02 c0       	mov    edx,0xc0028db0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 a0 dc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2360]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 a0 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2360],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 57 06 02 00       	call   c002640c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 3d 06 02 00       	call   c002640c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 f7 8d 02 c0       	mov    eax,0xc0028df7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 f0 8d 02 c0       	mov    eax,0xc0028df0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 a0 dc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2360]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be e0 8d 02 c0       	mov    esi,0xc0028de0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 80 ed 01 00       	call   c002640c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba c0 8e 02 c0       	mov    edx,0xc0028ec0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba c0 8d 02 c0       	mov    edx,0xc0028dc0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba d0 8d 02 c0       	mov    edx,0xc0028dd0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba e2 8e 02 c0       	mov    edx,0xc0028ee2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ee 8e 02 c0       	mov    edx,0xc0028eee
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 02 8f 02 c0       	mov    edx,0xc0028f02
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 20 92 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029220
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 20 92 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029220
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 20 90 02 c0       	mov    eax,0xc0029020
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 60 8f 02 c0       	mov    eax,0xc0028f60
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 20 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd70e0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 d4 f6 01 00       	call   c0027edf <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 97 f6 01 00       	call   c0027ec1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 6b f6 01 00       	call   c0027edf <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 1e ed 01 00       	call   c00275e4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 98 f7 01 00       	call   c0028070 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 e5 f5 01 00       	call   c0027edf <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 27 f5 01 00       	call   c0027edf <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 f4 f4 01 00       	call   c0027ec1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 e1 f3 01 00       	call   c0027edf <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 a9 f3 01 00       	call   c0027ec1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 20 93 02 c0       	mov    eax,0xc0029320
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 b5 f1 01 00       	call   c0027edf <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 7a f1 01 00       	call   c0027ec1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 80 97 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6880]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 8a ee 01 00       	call   c0027c73 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 08 e8 01 00       	call   c0027610 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 c4 f0 01 00       	call   c0027ee3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 b2 f1 01 00       	call   c0028007 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 9c e7 01 00       	call   c0027610 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 47 f0 01 00       	call   c0027edd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 28 f0 01 00       	call   c0027ee1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 b6 f1 01 00       	call   c0028090 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 68 ed 01 00       	call   c0027c73 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 e6 e6 01 00       	call   c0027610 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 a2 ef 01 00       	call   c0027ee3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 90 f0 01 00       	call   c0028007 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 7a e6 01 00       	call   c0027610 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 25 ef 01 00       	call   c0027edd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 05 ef 01 00       	call   c0027ee1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 92 f0 01 00       	call   c0028090 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 40 ee 01 00       	call   c0027edf <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 fe ed 01 00       	call   c0027ec1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 e6 ed 01 00       	call   c0027edf <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 58 eb 01 00       	call   c0027c73 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 5a de 01 00       	call   c0026f93 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 bd e4 01 00       	call   c0027610 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 0f eb 01 00       	call   c0027c73 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 15 de 01 00       	call   c0026f93 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 e4 ea 01 00       	call   c0027c73 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 34 ed 01 00       	call   c0027edd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 11 e4 01 00       	call   c00275e4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 8b ee 01 00       	call   c0028070 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 ba ec 01 00       	call   c0027ec1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 b5 e3 01 00       	call   c00275e4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 33 ea 01 00       	call   c0027c73 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 b6 e3 01 00       	call   c0027610 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 08 ea 01 00       	call   c0027c73 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 6f e6 01 00       	call   c00278f4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 ee dc 01 00       	call   c0026f93 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 4e d6 01 00       	call   c0026928 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 25 ed 01 00       	call   c0028007 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 0e e3 01 00       	call   c0027610 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 f5 ec 01 00       	call   c0028007 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 67 dc 01 00       	call   c0026f93 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 a0 eb 01 00       	call   c0027ee3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 88 e5 01 00       	call   c00278f4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 0e dc 01 00       	call   c0026f93 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 f4 ec 01 00       	call   c0028090 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 ce e8 01 00       	call   c0027c73 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 25 e2 01 00       	call   c00275e4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 04 eb 01 00       	call   c0027edf <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 9d db 01 00       	call   c0026f93 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 c9 e1 01 00       	call   c00275e4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 63 ec 01 00       	call   c0028090 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 1c e8 01 00       	call   c0027c73 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 99 e1 01 00       	call   c0027610 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 ec e7 01 00       	call   c0027c73 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 f2 da 01 00       	call   c0026f93 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 c2 e7 01 00       	call   c0027c73 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 14 ea 01 00       	call   c0027edf <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 eb e0 01 00       	call   c00275e4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 65 eb 01 00       	call   c0028070 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 94 e9 01 00       	call   c0027ec1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 8e e0 01 00       	call   c00275e4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 0c e7 01 00       	call   c0027c73 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 8f e0 01 00       	call   c0027610 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 e1 e6 01 00       	call   c0027c73 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 48 e3 01 00       	call   c00278f4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 c7 d9 01 00       	call   c0026f93 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 17 d3 01 00       	call   c0026928 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 ee e9 01 00       	call   c0028007 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 d7 df 01 00       	call   c0027610 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 be e9 01 00       	call   c0028007 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 30 d9 01 00       	call   c0026f93 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 69 e8 01 00       	call   c0027ee3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 50 e2 01 00       	call   c00278f4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 cf d8 01 00       	call   c0026f93 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 b5 e9 01 00       	call   c0028090 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 8f e5 01 00       	call   c0027c73 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 e6 de 01 00       	call   c00275e4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 c5 e7 01 00       	call   c0027edf <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 5e d8 01 00       	call   c0026f93 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 8a de 01 00       	call   c00275e4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 ff e4 01 00       	call   c0027c73 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 05 d8 01 00       	call   c0026f93 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 f4 97 02 c0       	mov    eax,0xc00297f4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 7a e3 01 00       	call   c0027c73 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 f8 dc 01 00       	call   c0027610 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 8a cf 01 00       	call   c0026928 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 61 e6 01 00       	call   c0028007 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 4a dc 01 00       	call   c0027610 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 2d e6 01 00       	call   c0028007 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 9f d5 01 00       	call   c0026f93 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 ff e5 01 00       	call   c0028007 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 ee db 01 00       	call   c0027610 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 57 d5 01 00       	call   c0026f93 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 78 ce 01 00       	call   c0026928 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 4f e5 01 00       	call   c0028007 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 38 db 01 00       	call   c0027610 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 1b e5 01 00       	call   c0028007 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 8d d4 01 00       	call   c0026f93 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 ed e4 01 00       	call   c0028007 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 dc da 01 00       	call   c0027610 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 45 d4 01 00       	call   c0026f93 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 23 d4 01 00       	call   c0026f93 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 ff cc 01 00       	call   c0026928 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 d6 e3 01 00       	call   c0028007 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 bf d9 01 00       	call   c0027610 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 a2 e3 01 00       	call   c0028007 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 14 d3 01 00       	call   c0026f93 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 74 e3 01 00       	call   c0028007 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 5d d9 01 00       	call   c0027610 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 c6 d2 01 00       	call   c0026f93 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 26 e3 01 00       	call   c0028007 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 0f d9 01 00       	call   c0027610 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 78 d2 01 00       	call   c0026f93 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 8d cb 01 00       	call   c0026928 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 64 e2 01 00       	call   c0028007 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 4d d8 01 00       	call   c0027610 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 34 e2 01 00       	call   c0028007 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 a6 d1 01 00       	call   c0026f93 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 06 e2 01 00       	call   c0028007 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 ef d7 01 00       	call   c0027610 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 58 d1 01 00       	call   c0026f93 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 b8 e1 01 00       	call   c0028007 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 a1 d7 01 00       	call   c0027610 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 0a d1 01 00       	call   c0026f93 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 de d0 01 00       	call   c0026f93 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 3b d7 01 00       	call   c0027610 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 f7 df 01 00       	call   c0027ee3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 86 d0 01 00       	call   c0026f93 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 e3 d6 01 00       	call   c0027610 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 9f df 01 00       	call   c0027ee3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 19 c9 01 00       	call   c0026928 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 f0 df 01 00       	call   c0028007 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 d9 d5 01 00       	call   c0027610 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 bc df 01 00       	call   c0028007 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 2e cf 01 00       	call   c0026f93 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 8e df 01 00       	call   c0028007 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 77 d5 01 00       	call   c0027610 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 e0 ce 01 00       	call   c0026f93 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 40 df 01 00       	call   c0028007 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 29 d5 01 00       	call   c0027610 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 92 ce 01 00       	call   c0026f93 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 f2 de 01 00       	call   c0028007 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 db d4 01 00       	call   c0027610 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 44 ce 01 00       	call   c0026f93 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 a4 de 01 00       	call   c0028007 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 8d d4 01 00       	call   c0027610 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 f6 cd 01 00       	call   c0026f93 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 f8 c6 01 00       	call   c0026928 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 cf dd 01 00       	call   c0028007 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 b8 d3 01 00       	call   c0027610 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 9f dd 01 00       	call   c0028007 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 11 cd 01 00       	call   c0026f93 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 71 dd 01 00       	call   c0028007 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 5a d3 01 00       	call   c0027610 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 c3 cc 01 00       	call   c0026f93 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 23 dd 01 00       	call   c0028007 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 0c d3 01 00       	call   c0027610 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 75 cc 01 00       	call   c0026f93 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 d5 dc 01 00       	call   c0028007 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 be d2 01 00       	call   c0027610 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 27 cc 01 00       	call   c0026f93 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 87 dc 01 00       	call   c0028007 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 70 d2 01 00       	call   c0027610 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 d9 cb 01 00       	call   c0026f93 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 ad cb 01 00       	call   c0026f93 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 0a d2 01 00       	call   c0027610 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 c6 da 01 00       	call   c0027ee3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 55 cb 01 00       	call   c0026f93 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 b2 d1 01 00       	call   c0027610 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 6e da 01 00       	call   c0027ee3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 fc ca 01 00       	call   c0026f93 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 59 d1 01 00       	call   c0027610 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 15 da 01 00       	call   c0027ee3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 a3 ca 01 00       	call   c0026f93 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 00 d1 01 00       	call   c0027610 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 bc d9 01 00       	call   c0027ee3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 1a c3 01 00       	call   c0026928 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 f1 d9 01 00       	call   c0028007 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 da cf 01 00       	call   c0027610 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 bd d9 01 00       	call   c0028007 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 2f c9 01 00       	call   c0026f93 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 8f d9 01 00       	call   c0028007 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 78 cf 01 00       	call   c0027610 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 e1 c8 01 00       	call   c0026f93 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 41 d9 01 00       	call   c0028007 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 2a cf 01 00       	call   c0027610 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 93 c8 01 00       	call   c0026f93 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 f3 d8 01 00       	call   c0028007 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 dc ce 01 00       	call   c0027610 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 45 c8 01 00       	call   c0026f93 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 a5 d8 01 00       	call   c0028007 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 8e ce 01 00       	call   c0027610 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 f7 c7 01 00       	call   c0026f93 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 57 d8 01 00       	call   c0028007 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 40 ce 01 00       	call   c0027610 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 a6 c7 01 00       	call   c0026f93 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 06 d8 01 00       	call   c0028007 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 ef cd 01 00       	call   c0027610 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 58 c7 01 00       	call   c0026f93 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 52 c0 01 00       	call   c0026928 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 29 d7 01 00       	call   c0028007 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 12 cd 01 00       	call   c0027610 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 f2 d6 01 00       	call   c0028007 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 64 c6 01 00       	call   c0026f93 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 c4 d6 01 00       	call   c0028007 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 ad cc 01 00       	call   c0027610 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 16 c6 01 00       	call   c0026f93 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 76 d6 01 00       	call   c0028007 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 5f cc 01 00       	call   c0027610 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 c8 c5 01 00       	call   c0026f93 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 28 d6 01 00       	call   c0028007 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 11 cc 01 00       	call   c0027610 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 7a c5 01 00       	call   c0026f93 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 da d5 01 00       	call   c0028007 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 c3 cb 01 00       	call   c0027610 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 2c c5 01 00       	call   c0026f93 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 8c d5 01 00       	call   c0028007 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 75 cb 01 00       	call   c0027610 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 db c4 01 00       	call   c0026f93 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 3b d5 01 00       	call   c0028007 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 24 cb 01 00       	call   c0027610 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 93 c4 01 00       	call   c0026f93 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 6c c4 01 00       	call   c0026f93 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 ca ca 01 00       	call   c0027610 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 86 d3 01 00       	call   c0027ee3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 15 c4 01 00       	call   c0026f93 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 73 ca 01 00       	call   c0027610 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 2f d3 01 00       	call   c0027ee3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 bd c3 01 00       	call   c0026f93 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 1b ca 01 00       	call   c0027610 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 d7 d2 01 00       	call   c0027ee3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 65 c3 01 00       	call   c0026f93 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 c3 c9 01 00       	call   c0027610 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 7f d2 01 00       	call   c0027ee3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 0d c3 01 00       	call   c0026f93 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 6b c9 01 00       	call   c0027610 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 27 d2 01 00       	call   c0027ee3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 bb c2 01 00       	call   c0026f93 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 19 c9 01 00       	call   c0027610 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 d5 d1 01 00       	call   c0027ee3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 e9 ba 01 00       	call   c0026928 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 c0 d1 01 00       	call   c0028007 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 a9 c7 01 00       	call   c0027610 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 90 d1 01 00       	call   c0028007 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 02 c1 01 00       	call   c0026f93 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 24 98 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd67dc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 36 d1 01 00       	call   c0028007 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 1f c7 01 00       	call   c0027610 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 8a c0 01 00       	call   c0026f93 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 d7 d0 01 00       	call   c0028007 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 c0 c6 01 00       	call   c0027610 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 2b c0 01 00       	call   c0026f93 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 78 d0 01 00       	call   c0028007 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 61 c6 01 00       	call   c0027610 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 cc bf 01 00       	call   c0026f93 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 19 d0 01 00       	call   c0028007 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 02 c6 01 00       	call   c0027610 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 6d bf 01 00       	call   c0026f93 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 ba cf 01 00       	call   c0028007 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 a3 c5 01 00       	call   c0027610 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 0e bf 01 00       	call   c0026f93 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 5b cf 01 00       	call   c0028007 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 44 c5 01 00       	call   c0027610 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 af be 01 00       	call   c0026f93 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 fc ce 01 00       	call   c0028007 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 e5 c4 01 00       	call   c0027610 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 50 be 01 00       	call   c0026f93 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 9d ce 01 00       	call   c0028007 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 86 c4 01 00       	call   c0027610 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 f1 bd 01 00       	call   c0026f93 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 fb b6 01 00       	call   c0026928 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 d2 cd 01 00       	call   c0028007 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 bb c3 01 00       	call   c0027610 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 a2 cd 01 00       	call   c0028007 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 14 bd 01 00       	call   c0026f93 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 40 98 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd67c0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 47 cd 01 00       	call   c0028007 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 30 c3 01 00       	call   c0027610 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 9b bc 01 00       	call   c0026f93 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 e7 cc 01 00       	call   c0028007 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 d0 c2 01 00       	call   c0027610 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 3b bc 01 00       	call   c0026f93 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 87 cc 01 00       	call   c0028007 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 70 c2 01 00       	call   c0027610 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 db bb 01 00       	call   c0026f93 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 27 cc 01 00       	call   c0028007 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 10 c2 01 00       	call   c0027610 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 7b bb 01 00       	call   c0026f93 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 c7 cb 01 00       	call   c0028007 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 b0 c1 01 00       	call   c0027610 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 1b bb 01 00       	call   c0026f93 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 67 cb 01 00       	call   c0028007 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 50 c1 01 00       	call   c0027610 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 bb ba 01 00       	call   c0026f93 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 07 cb 01 00       	call   c0028007 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 f0 c0 01 00       	call   c0027610 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 5b ba 01 00       	call   c0026f93 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 a7 ca 01 00       	call   c0028007 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 90 c0 01 00       	call   c0027610 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 fb b9 01 00       	call   c0026f93 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 5c 98 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd67a4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 a0 b9 01 00       	call   c0026f93 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 fd bf 01 00       	call   c0027610 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 b9 c8 01 00       	call   c0027ee3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 43 b9 01 00       	call   c0026f93 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 a0 bf 01 00       	call   c0027610 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 5c c8 01 00       	call   c0027ee3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 e6 b8 01 00       	call   c0026f93 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 43 bf 01 00       	call   c0027610 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 ff c7 01 00       	call   c0027ee3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 89 b8 01 00       	call   c0026f93 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 e6 be 01 00       	call   c0027610 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 a2 c7 01 00       	call   c0027ee3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 2c b8 01 00       	call   c0026f93 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 89 be 01 00       	call   c0027610 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 45 c7 01 00       	call   c0027ee3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 cf b7 01 00       	call   c0026f93 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 2c be 01 00       	call   c0027610 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 e8 c6 01 00       	call   c0027ee3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 72 b7 01 00       	call   c0026f93 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 cf bd 01 00       	call   c0027610 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 8b c6 01 00       	call   c0027ee3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 15 b7 01 00       	call   c0026f93 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 72 bd 01 00       	call   c0027610 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 2e c6 01 00       	call   c0027ee3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 2a bd 01 00       	call   c0027610 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 9a c7 01 00       	jmp    c0028090 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 0c c4 01 00       	call   c0027edf <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 ca c3 01 00       	call   c0027ec1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 61 c1 01 00       	call   c0027c73 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 62 b4 01 00       	call   c0026f93 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 31 c1 01 00       	call   c0027c73 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 98 bd 01 00       	call   c00278f4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 37 c3 01 00       	call   c0027ec1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 3a c3 01 00       	call   c0027edf <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 0d c3 01 00       	call   c0027edf <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 06 bd 01 00       	call   c00278f4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 88 c4 01 00       	call   c0028090 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 63 c4 01 00       	call   c0028090 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 3d c0 01 00       	call   c0027c73 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 94 b9 01 00       	call   c00275e4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 73 c2 01 00       	call   c0027edf <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 0c b3 01 00       	call   c0026f93 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 30 b9 01 00       	call   c00275e4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 ca c3 01 00       	call   c0028090 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 0a bc 01 00       	call   c00278f4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 87 b2 01 00       	call   c0026f93 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 b3 be 01 00       	call   c0027c73 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 b3 b1 01 00       	call   c0026f93 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 93 b1 01 00       	call   c0026f93 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 63 be 01 00       	call   c0027c73 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 b3 c0 01 00       	call   c0027edd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 92 b7 01 00       	call   c00275e4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 0c c2 01 00       	call   c0028070 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 3b c0 01 00       	call   c0027ec1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 39 b7 01 00       	call   c00275e4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 b7 bd 01 00       	call   c0027c73 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 3a b7 01 00       	call   c0027610 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 8c bd 01 00       	call   c0027c73 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 f3 b9 01 00       	call   c00278f4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 72 b0 01 00       	call   c0026f93 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 3c bd 01 00       	call   c0027c73 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 88 bf 01 00       	call   c0027edf <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 7d b6 01 00       	call   c0027610 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 4f b6 01 00       	call   c0027610 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 88 bc 01 00       	call   c0027c73 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 ec b8 01 00       	call   c00278f4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 b4 b8 01 00       	call   c00278f4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 33 af 01 00       	call   c0026f93 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 18 c0 01 00       	call   c0028090 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 f2 bb 01 00       	call   c0027c73 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 49 b5 01 00       	call   c00275e4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 28 be 01 00       	call   c0027edf <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 c0 ae 01 00       	call   c0026f93 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 e4 b4 01 00       	call   c00275e4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 7e bf 01 00       	call   c0028090 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 47 bd 01 00       	call   c0027edf <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 05 bd 01 00       	call   c0027ec1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 9c ba 01 00       	call   c0027c73 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 9d ad 01 00       	call   c0026f93 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 6c ba 01 00       	call   c0027c73 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 d3 b6 01 00       	call   c00278f4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 72 bc 01 00       	call   c0027ec1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 75 bc 01 00       	call   c0027edf <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 48 bc 01 00       	call   c0027edf <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 41 b6 01 00       	call   c00278f4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 c3 bd 01 00       	call   c0028090 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 9e bd 01 00       	call   c0028090 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 78 b9 01 00       	call   c0027c73 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 cf b2 01 00       	call   c00275e4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 ae bb 01 00       	call   c0027edf <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 47 ac 01 00       	call   c0026f93 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 6b b2 01 00       	call   c00275e4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 05 bd 01 00       	call   c0028090 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 45 b5 01 00       	call   c00278f4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 c2 ab 01 00       	call   c0026f93 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 ed b7 01 00       	call   c0027c73 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 ed aa 01 00       	call   c0026f93 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 cd aa 01 00       	call   c0026f93 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 9d b7 01 00       	call   c0027c73 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 ed b9 01 00       	call   c0027edd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 cb b0 01 00       	call   c00275e4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 45 bb 01 00       	call   c0028070 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 74 b9 01 00       	call   c0027ec1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 71 b0 01 00       	call   c00275e4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 ef b6 01 00       	call   c0027c73 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 72 b0 01 00       	call   c0027610 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 c4 b6 01 00       	call   c0027c73 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 2b b3 01 00       	call   c00278f4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 aa a9 01 00       	call   c0026f93 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 74 b6 01 00       	call   c0027c73 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 c0 b8 01 00       	call   c0027edf <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 b5 af 01 00       	call   c0027610 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 87 af 01 00       	call   c0027610 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 be b5 01 00       	call   c0027c73 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 22 b2 01 00       	call   c00278f4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 ef b1 01 00       	call   c00278f4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 6e a8 01 00       	call   c0026f93 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 53 b9 01 00       	call   c0028090 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 2d b5 01 00       	call   c0027c73 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 84 ae 01 00       	call   c00275e4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 63 b7 01 00       	call   c0027edf <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 fb a7 01 00       	call   c0026f93 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 1f ae 01 00       	call   c00275e4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 b9 b8 01 00       	call   c0028090 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 82 b6 01 00       	call   c0027edf <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 40 b6 01 00       	call   c0027ec1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 d7 b3 01 00       	call   c0027c73 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 d8 a6 01 00       	call   c0026f93 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 a7 b3 01 00       	call   c0027c73 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 0e b0 01 00       	call   c00278f4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 ad b5 01 00       	call   c0027ec1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 b0 b5 01 00       	call   c0027edf <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 83 b5 01 00       	call   c0027edf <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 7c af 01 00       	call   c00278f4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 fe b6 01 00       	call   c0028090 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 d9 b6 01 00       	call   c0028090 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 b3 b2 01 00       	call   c0027c73 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 0a ac 01 00       	call   c00275e4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 e9 b4 01 00       	call   c0027edf <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 82 a5 01 00       	call   c0026f93 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 a6 ab 01 00       	call   c00275e4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 40 b6 01 00       	call   c0028090 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 80 ae 01 00       	call   c00278f4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 fd a4 01 00       	call   c0026f93 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 28 b1 01 00       	call   c0027c73 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 28 a4 01 00       	call   c0026f93 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 08 a4 01 00       	call   c0026f93 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 d8 b0 01 00       	call   c0027c73 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 28 b3 01 00       	call   c0027edd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 06 aa 01 00       	call   c00275e4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 80 b4 01 00       	call   c0028070 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 af b2 01 00       	call   c0027ec1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 ac a9 01 00       	call   c00275e4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 2a b0 01 00       	call   c0027c73 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 ad a9 01 00       	call   c0027610 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 ff af 01 00       	call   c0027c73 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 66 ac 01 00       	call   c00278f4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 e5 a2 01 00       	call   c0026f93 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 af af 01 00       	call   c0027c73 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 fb b1 01 00       	call   c0027edf <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 f0 a8 01 00       	call   c0027610 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 c2 a8 01 00       	call   c0027610 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 f9 ae 01 00       	call   c0027c73 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 5d ab 01 00       	call   c00278f4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 2a ab 01 00       	call   c00278f4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 a9 a1 01 00       	call   c0026f93 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 8e b2 01 00       	call   c0028090 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 68 ae 01 00       	call   c0027c73 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 bf a7 01 00       	call   c00275e4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 9e b0 01 00       	call   c0027edf <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 36 a1 01 00       	call   c0026f93 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 5a a7 01 00       	call   c00275e4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 f4 b1 01 00       	call   c0028090 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 bd af 01 00       	call   c0027edf <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 7b af 01 00       	call   c0027ec1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 12 ad 01 00       	call   c0027c73 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 13 a0 01 00       	call   c0026f93 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 e2 ac 01 00       	call   c0027c73 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 49 a9 01 00       	call   c00278f4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 e8 ae 01 00       	call   c0027ec1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 eb ae 01 00       	call   c0027edf <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 be ae 01 00       	call   c0027edf <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 b7 a8 01 00       	call   c00278f4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 39 b0 01 00       	call   c0028090 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 14 b0 01 00       	call   c0028090 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 ee ab 01 00       	call   c0027c73 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 45 a5 01 00       	call   c00275e4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 24 ae 01 00       	call   c0027edf <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 bd 9e 01 00       	call   c0026f93 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 e1 a4 01 00       	call   c00275e4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 7b af 01 00       	call   c0028090 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 bb a7 01 00       	call   c00278f4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 38 9e 01 00       	call   c0026f93 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 63 aa 01 00       	call   c0027c73 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 63 9d 01 00       	call   c0026f93 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 43 9d 01 00       	call   c0026f93 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 13 aa 01 00       	call   c0027c73 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 63 ac 01 00       	call   c0027edd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 41 a3 01 00       	call   c00275e4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 bb ad 01 00       	call   c0028070 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 ea ab 01 00       	call   c0027ec1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 e7 a2 01 00       	call   c00275e4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 65 a9 01 00       	call   c0027c73 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 e8 a2 01 00       	call   c0027610 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 3a a9 01 00       	call   c0027c73 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 a1 a5 01 00       	call   c00278f4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 20 9c 01 00       	call   c0026f93 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 ea a8 01 00       	call   c0027c73 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 36 ab 01 00       	call   c0027edf <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 2b a2 01 00       	call   c0027610 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 fd a1 01 00       	call   c0027610 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 34 a8 01 00       	call   c0027c73 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 98 a4 01 00       	call   c00278f4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 65 a4 01 00       	call   c00278f4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 e4 9a 01 00       	call   c0026f93 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 c9 ab 01 00       	call   c0028090 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 a3 a7 01 00       	call   c0027c73 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 fa a0 01 00       	call   c00275e4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 d9 a9 01 00       	call   c0027edf <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 71 9a 01 00       	call   c0026f93 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 95 a0 01 00       	call   c00275e4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 2f ab 01 00       	call   c0028090 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 f5 a8 01 00       	call   c0027edf <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 b3 a8 01 00       	call   c0027ec1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 4a a6 01 00       	call   c0027c73 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 4b 99 01 00       	call   c0026f93 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 1a a6 01 00       	call   c0027c73 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 81 a2 01 00       	call   c00278f4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 20 a8 01 00       	call   c0027ec1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 23 a8 01 00       	call   c0027edf <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 f6 a7 01 00       	call   c0027edf <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 ef a1 01 00       	call   c00278f4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 71 a9 01 00       	call   c0028090 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 48 a9 01 00       	call   c0028090 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 22 a5 01 00       	call   c0027c73 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 79 9e 01 00       	call   c00275e4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 58 a7 01 00       	call   c0027edf <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 f1 97 01 00       	call   c0026f93 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 19 9e 01 00       	call   c00275e4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 b3 a8 01 00       	call   c0028090 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 f4 a0 01 00       	call   c00278f4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 71 97 01 00       	call   c0026f93 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 9d a3 01 00       	call   c0027c73 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 9d 96 01 00       	call   c0026f93 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 7d 96 01 00       	call   c0026f93 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 4d a3 01 00       	call   c0027c73 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 81 a5 01 00       	call   c0027ec1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 78 9c 01 00       	call   c00275e4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 f2 a6 01 00       	call   c0028070 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 21 a5 01 00       	call   c0027ec1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 1b 9c 01 00       	call   c00275e4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 99 a2 01 00       	call   c0027c73 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 1c 9c 01 00       	call   c0027610 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 6e a2 01 00       	call   c0027c73 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 d5 9e 01 00       	call   c00278f4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 54 95 01 00       	call   c0026f93 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 1e a2 01 00       	call   c0027c73 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 6a a4 01 00       	call   c0027edf <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 5f 9b 01 00       	call   c0027610 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 31 9b 01 00       	call   c0027610 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 75 a1 01 00       	call   c0027c73 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 dc 9d 01 00       	call   c00278f4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 c5 9a 01 00       	call   c0027610 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 81 a3 01 00       	call   c0027ee3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 74 9d 01 00       	call   c00278f4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 f3 93 01 00       	call   c0026f93 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 d8 a4 01 00       	call   c0028090 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 b2 a0 01 00       	call   c0027c73 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 09 9a 01 00       	call   c00275e4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 e8 a2 01 00       	call   c0027edf <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 80 93 01 00       	call   c0026f93 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 a8 99 01 00       	call   c00275e4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 42 a4 01 00       	call   c0028090 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 84 98 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd677c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 78 98 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6788]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 fd a0 01 00       	call   c0027edf <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 bb a0 01 00       	call   c0027ec1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 a7 a0 01 00       	call   c0027edf <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 19 9e 01 00       	call   c0027c73 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 97 97 01 00       	call   c0027610 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 e9 9d 01 00       	call   c0027c73 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 ef 90 01 00       	call   c0026f93 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 be 9d 01 00       	call   c0027c73 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 0e a0 01 00       	call   c0027edd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 ef 96 01 00       	call   c00275e4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 69 a1 01 00       	call   c0028070 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 98 9f 01 00       	call   c0027ec1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 97 96 01 00       	call   c00275e4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 15 9d 01 00       	call   c0027c73 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 98 96 01 00       	call   c0027610 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 ea 9c 01 00       	call   c0027c73 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 51 99 01 00       	call   c00278f4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 d0 8f 01 00       	call   c0026f93 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 f8 98 01 00       	call   c00278f4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 7e 8f 01 00       	call   c0026f93 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 64 a0 01 00       	call   c0028090 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 3e 9c 01 00       	call   c0027c73 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 95 95 01 00       	call   c00275e4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 74 9e 01 00       	call   c0027edf <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 0d 8f 01 00       	call   c0026f93 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 39 95 01 00       	call   c00275e4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 d3 9f 01 00       	call   c0028090 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 88 9b 01 00       	call   c0027c73 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 05 95 01 00       	call   c0027610 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 56 9b 01 00       	call   c0027c73 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 5c 8e 01 00       	call   c0026f93 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 2c 9b 01 00       	call   c0027c73 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 80 9d 01 00       	call   c0027ee1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 59 94 01 00       	call   c00275e4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 d3 9e 01 00       	call   c0028070 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 02 9d 01 00       	call   c0027ec1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 00 94 01 00       	call   c00275e4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 7e 9a 01 00       	call   c0027c73 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 01 94 01 00       	call   c0027610 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 53 9a 01 00       	call   c0027c73 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 ba 96 01 00       	call   c00278f4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 39 8d 01 00       	call   c0026f93 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 55 96 01 00       	call   c00278f4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 d4 8c 01 00       	call   c0026f93 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 ba 9d 01 00       	call   c0028090 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 94 99 01 00       	call   c0027c73 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 eb 92 01 00       	call   c00275e4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 ca 9b 01 00       	call   c0027edf <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 63 8c 01 00       	call   c0026f93 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 8f 92 01 00       	call   c00275e4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 00 99 01 00       	call   c0027c73 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 06 8c 01 00       	call   c0026f93 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 9e 99 02 c0       	mov    eax,0xc002999e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 af 99 02 c0       	mov    eax,0xc00299af
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 e6 99 02 c0       	push   0xc00299e6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 08 dd 02 c0       	mov    eax,0xc002dd08
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 ef 99 02 c0       	push   0xc00299ef
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 0c 64 02 c0       	mov    eax,0xc002640c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 f9 99 02 c0       	push   0xc00299f9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 40 61 02 c0       	mov    eax,0xc0026140
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 02 9a 02 c0       	push   0xc0029a02
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 0c 65 02 c0       	mov    eax,0xc002650c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 0c 9a 02 c0       	push   0xc0029a0c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 8c 62 02 c0       	mov    eax,0xc002628c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 15 9a 02 c0       	push   0xc0029a15
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 0c dd 02 c0       	mov    eax,0xc002dd0c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 22 9a 02 c0       	push   0xc0029a22
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 0d dd 02 c0       	mov    eax,0xc002dd0d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 89 5a 00 00       	call   c00140ac <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c000e668:	68 2f 9a 02 c0       	push   0xc0029a2f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 ed ef 00 00       	call   c001d662 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 d6 f2 00 00       	call   c001d960 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 be e1 01 c0       	push   0xc001e1be
c000e693:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c000e699:	e8 c2 f2 00 00       	call   c001d960 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 28 12 03 c0       	mov    ds:0xc0031228,eax
c000e6a6:	c6 05 0d dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd0d,0x1
c000e6ad:	e8 8d fe 00 00       	call   c001e53f <Vm::initialise8086()>
c000e6b2:	e8 dd 47 00 00       	call   c0012e94 <Fs::initVFS()>
c000e6b7:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 49 d9 00 00       	call   c001c01c <Sys::loadSyscalls()>
c000e6d3:	e8 8e b9 00 00       	call   c001a066 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 3c 9a 02 c0       	push   0xc0029a3c
c000e6e2:	68 45 9a 02 c0       	push   0xc0029a45
c000e6e7:	e8 a0 c6 00 00       	call   c001ad8c <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 88 52 00 00       	call   c001397c <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 7b 59 00 00       	call   c0014080 <Device::loadDriversForAll()>
c000e705:	e8 4e b4 00 00       	call   c0019b58 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 08 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd08
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 4d 9a 02 c0       	push   0xc0029a4d
c000e719:	e8 69 ea 00 00       	call   c001d187 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 94 ec 00 00       	call   c001d3bb <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 90 f5 00 00       	call   c001dcc4 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 69 9a 02 c0       	push   0xc0029a69
c000e749:	50                   	push   eax
c000e74a:	e8 d7 59 00 00       	call   c0014126 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 08 9c 02 c0       	mov    edx,0xc0029c08
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 21 dd 02 c0 04 	test   BYTE PTR ds:0xc002dd21,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 f3 77 01 00       	call   c00260d6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 5e 9f 00 00       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 37 9f 00 00       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 15 9f 00 00       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 f3 9e 00 00       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 20 dd 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dd20,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 01 9e 00 00       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 dc 9d 00 00       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 5d 76 01 00       	call   c0026090 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 1a 76 01 00       	call   c0026070 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 f8 9d 00 00       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 79 9a 02 c0       	push   0xc0029a79
c000eaaf:	e8 5b 40 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 8c 9a 02 c0       	push   0xc0029a8c
c000ead2:	e8 38 40 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 9d 9a 02 c0       	push   0xc0029a9d
c000eaf5:	e8 15 40 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ae 9a 02 c0       	push   0xc0029aae
c000eb18:	e8 f2 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 bf 9a 02 c0       	push   0xc0029abf
c000eb3b:	e8 cf 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 d0 9a 02 c0       	push   0xc0029ad0
c000eb5e:	e8 ac 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 e1 9a 02 c0       	push   0xc0029ae1
c000eb81:	e8 89 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 f2 9a 02 c0       	push   0xc0029af2
c000eba4:	e8 66 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 03 9b 02 c0       	push   0xc0029b03
c000ebc7:	e8 43 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 14 9b 02 c0       	push   0xc0029b14
c000ebea:	e8 20 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 25 9b 02 c0       	push   0xc0029b25
c000ec0d:	e8 fd 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 36 9b 02 c0       	push   0xc0029b36
c000ec30:	e8 da 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 47 9b 02 c0       	push   0xc0029b47
c000ec53:	e8 b7 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 58 9b 02 c0       	push   0xc0029b58
c000ec76:	e8 94 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 69 9b 02 c0       	push   0xc0029b69
c000ec99:	e8 71 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 7a 9b 02 c0       	push   0xc0029b7a
c000ecbc:	e8 4e 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 8b 9b 02 c0       	push   0xc0029b8b
c000ecdf:	e8 2b 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 9c 9b 02 c0       	push   0xc0029b9c
c000ed02:	e8 08 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 ad 9b 02 c0       	push   0xc0029bad
c000ed21:	e8 e9 3d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 b9 b4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b4b9
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 d8 3d 00 00       	jmp    c0012b0f <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 be 9b 02 c0       	push   0xc0029bbe
c000ee0a:	e8 90 b3 00 00       	call   c001a19f <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 c4 9b 02 c0       	push   0xc0029bc4
c000ee42:	e8 58 b3 00 00       	call   c001a19f <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 20 dd 02 c0 04 	test   BYTE PTR ds:0xc002dd20,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 44 cc 02 c0 	sete   BYTE PTR ds:0xc002cc44
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 97 8e 00 00       	call   c0017d4c <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 72 50 00 00       	call   c0013f36 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 40 9a 00 00       	call   c0018934 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 33 50 00 00       	call   c0013f36 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 9d 55 00 00       	call   c00144bc <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 03 50 00 00       	call   c0013f36 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 0b eb 00 00       	call   c001da60 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 ca 9b 02 c0       	push   0xc0029bca
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 6c 3b 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 db 9b 02 c0       	push   0xc0029bdb
c000efc0:	e8 da b1 00 00       	call   c001a19f <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 e8 9b 02 c0       	push   0xc0029be8
c000efd5:	e8 c5 b1 00 00       	call   c001a19f <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 f2 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029bf2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 ae b1 00 00       	jmp    c001a19f <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 2c 9c 02 c0       	push   0xc0029c2c
c000f086:	e8 84 3a 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 12 dd 02 c0       	mov    ds:0xc002dd12,eax
c000f0c7:	66 89 15 10 dd 02 c0 	mov    WORD PTR ds:0xc002dd10,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 52 e6 00 00       	call   c001d830 <unlockScheduler()>
c000f1de:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 08 dd 02 c0    	push   DWORD PTR ds:0xc002dd08
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 e4 8e 01 00       	call   c0028110 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 db 8e 01 00       	call   c0028110 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 18 dd 02 c0 ff 07 	mov    WORD PTR ds:0xc002dd18,0x7ff
c000f323:	a3 1a dd 02 c0       	mov    ds:0xc002dd1a,eax
c000f328:	0f 01 1d 18 dd 02 c0 	lidtd  ds:0xc002dd18
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 9a 26 00 00       	call   c0011caf <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 ca 2c 00 00       	call   c00122ea <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 12 1e 00 00       	call   c0011450 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 43 1e 00 00       	call   c0011490 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 08 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd08
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 34 cc 02 c0    	mov    ecx,DWORD PTR ds:0xc002cc34
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 34 cc 02 c0       	mov    eax,ds:0xc002cc34
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 48 9c 02 c0       	push   0xc0029c48
c000f6f4:	e8 16 34 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 34 cc 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002cc34,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 90 25 00 00       	call   c0011caf <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 34 cc 02 c0    	mov    ebp,DWORD PTR ds:0xc002cc34
c000f727:	e8 b1 07 00 00       	call   c000fedd <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 b1 2a 00 00       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 34 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002cc34
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 78 9c 02 c0       	push   0xc0029c78
c000f7ad:	e8 ed a9 00 00       	call   c001a19f <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 7d 9c 02 c0       	push   0xc0029c7d
c000f7c3:	e8 d7 a9 00 00       	call   c001a19f <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 55 e0 00 00       	call   c001d82e <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 46 e0 00 00       	call   c001d830 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 b4 24 00 00       	call   c0011caf <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 e0 2a 00 00       	call   c00122ea <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 99 24 00 00       	call   c0011caf <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 83 27 00 00       	call   c0011fa6 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 40 cc 02 c0       	mov    eax,ds:0xc002cc40
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d a0 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dda0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 40 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cc40
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d a0 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dda0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d a0 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dda0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d a0 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dda0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d a0 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dda0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 40 cc 02 c0       	mov    eax,ds:0xc002cc40
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 32 0c 00 00       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d a0 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dda0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 f4 0b 00 00       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 8b 0c 00 00       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 40 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cc40
c000fb46:	80 3d a0 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dda0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 40 cc 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002cc40,0x8000
c000fba0:	c6 05 a0 dd 02 c0 01 	mov    BYTE PTR ds:0xc002dda0,0x1
c000fba7:	c7 05 d8 dd 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002ddd8,0xc000fa13
c000fbb1:	c7 05 c4 dd 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002ddc4,0xc000f89a
c000fbbb:	c7 05 c0 dd 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002ddc0,0xc000f8e5
c000fbc5:	c7 05 cc dd 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002ddcc,0xc000fa59
c000fbcf:	c7 05 d4 dd 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002ddd4,0xc000f963
c000fbd9:	c7 05 c8 dd 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002ddc8,0xc000f9c1
c000fbe3:	c7 05 d0 dd 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002ddd0,0xc000f9c2
c000fbed:	c7 05 dc dd 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002dddc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 72 09 00 00       	call   c001057c <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 84 9c 02 c0       	push   0xc0029c84
c000fc4a:	e8 c0 2e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 d1 03 00 00       	call   c0010037 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 c5 1f 00 00       	call   c0011c30 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 ba b4 02 c0       	push   0xc002b4ba
c000fc92:	e8 08 a5 00 00       	call   c001a19f <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 20 dd 02 c0    	mov    DWORD PTR ds:0xc002dd20,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 37 21 00 00       	call   c0011de4 <VAS::VAS()>
c000fcad:	89 1d 84 de 02 c0    	mov    DWORD PTR ds:0xc002de84,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 9b 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c9b
c000fcbf:	e8 4b 2e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000fcc4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccb:	e8 70 fb ff ff       	call   c000f840 <malloc>
c000fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd3:	89 c6                	mov    esi,eax
c000fcd5:	e8 60 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcda:	58                   	pop    eax
c000fcdb:	89 35 08 dd 02 c0    	mov    DWORD PTR ds:0xc002dd08,esi
c000fce1:	5a                   	pop    edx
c000fce2:	56                   	push   esi
c000fce3:	68 b8 9c 02 c0       	push   0xc0029cb8
c000fce8:	e8 22 2e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000fced:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c000fcf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	50                   	push   eax
c000fcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcfe:	83 c4 14             	add    esp,0x14
c000fd01:	53                   	push   ebx
c000fd02:	e8 77 23 00 00       	call   c001207e <VAS::~VAS()>
c000fd07:	c7 04 24 cb 9c 02 c0 	mov    DWORD PTR [esp],0xc0029ccb
c000fd0e:	e8 8c a4 00 00       	call   c001a19f <Krnl::panic(char const*)>
c000fd13:	83 c4 20             	add    esp,0x20
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	c3                   	ret    

c000fd1a <Phys::allocateDMA(unsigned long)>:
c000fd1a:	55                   	push   ebp
c000fd1b:	31 d2                	xor    edx,edx
c000fd1d:	57                   	push   edi
c000fd1e:	31 ed                	xor    ebp,ebp
c000fd20:	56                   	push   esi
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	53                   	push   ebx
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	c1 ee 0c             	shr    esi,0xc
c000fd33:	eb 17                	jmp    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd35:	85 c9                	test   ecx,ecx
c000fd37:	75 04                	jne    c000fd3d <Phys::allocateDMA(unsigned long)+0x23>
c000fd39:	89 d5                	mov    ebp,edx
c000fd3b:	89 d0                	mov    eax,edx
c000fd3d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd40:	39 de                	cmp    esi,ebx
c000fd42:	74 20                	je     c000fd64 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd44:	42                   	inc    edx
c000fd45:	89 d9                	mov    ecx,ebx
c000fd47:	83 fa 2f             	cmp    edx,0x2f
c000fd4a:	7f 11                	jg     c000fd5d <Phys::allocateDMA(unsigned long)+0x43>
c000fd4c:	80 ba 60 dd 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd22a0],0x0
c000fd53:	74 e0                	je     c000fd35 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	42                   	inc    edx
c000fd58:	83 fa 2f             	cmp    edx,0x2f
c000fd5b:	7e ef                	jle    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd5d:	5b                   	pop    ebx
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5e                   	pop    esi
c000fd61:	5f                   	pop    edi
c000fd62:	5d                   	pop    ebp
c000fd63:	c3                   	ret    
c000fd64:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd67:	89 d7                	mov    edi,edx
c000fd69:	4f                   	dec    edi
c000fd6a:	79 03                	jns    c000fd6f <Phys::allocateDMA(unsigned long)+0x55>
c000fd6c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd6f:	c1 ff 04             	sar    edi,0x4
c000fd72:	89 c2                	mov    edx,eax
c000fd74:	c1 fa 04             	sar    edx,0x4
c000fd77:	39 fa                	cmp    edx,edi
c000fd79:	75 2f                	jne    c000fdaa <Phys::allocateDMA(unsigned long)+0x90>
c000fd7b:	85 db                	test   ebx,ebx
c000fd7d:	74 1a                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd7f:	be 60 dd 02 c0       	mov    esi,0xc002dd60
c000fd84:	8d 90 60 dd 02 c0    	lea    edx,[eax-0x3ffd22a0]
c000fd8a:	f7 d6                	not    esi
c000fd8c:	29 c6                	sub    esi,eax
c000fd8e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd91:	42                   	inc    edx
c000fd92:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd95:	39 d9                	cmp    ecx,ebx
c000fd97:	7f f5                	jg     c000fd8e <Phys::allocateDMA(unsigned long)+0x74>
c000fd99:	85 ff                	test   edi,edi
c000fd9b:	74 13                	je     c000fdb0 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9d:	5b                   	pop    ebx
c000fd9e:	05 50 20 0c 00       	add    eax,0xc2050
c000fda3:	5e                   	pop    esi
c000fda4:	c1 e0 0c             	shl    eax,0xc
c000fda7:	5f                   	pop    edi
c000fda8:	5d                   	pop    ebp
c000fda9:	c3                   	ret    
c000fdaa:	89 ea                	mov    edx,ebp
c000fdac:	31 c9                	xor    ecx,ecx
c000fdae:	eb a7                	jmp    c000fd57 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb0:	5b                   	pop    ebx
c000fdb1:	c1 e0 0c             	shl    eax,0xc
c000fdb4:	5e                   	pop    esi
c000fdb5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdba:	5f                   	pop    edi
c000fdbb:	5d                   	pop    ebp
c000fdbc:	c3                   	ret    

c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcb:	c1 e9 0c             	shr    ecx,0xc
c000fdce:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd3:	76 25                	jbe    c000fdfa <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdda:	c1 e8 0c             	shr    eax,0xc
c000fddd:	8d 50 10             	lea    edx,[eax+0x10]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 15                	je     c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde4:	8d 82 60 dd 02 c0    	lea    eax,[edx-0x3ffd22a0]
c000fdea:	8d 94 11 60 dd 02 c0 	lea    edx,[ecx+edx*1-0x3ffd22a0]
c000fdf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf4:	40                   	inc    eax
c000fdf5:	39 d0                	cmp    eax,edx
c000fdf7:	75 f8                	jne    c000fdf1 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf9:	c3                   	ret    
c000fdfa:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe00:	c1 ea 0c             	shr    edx,0xc
c000fe03:	eb db                	jmp    c000fde0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe05 <Phys::setPageState(unsigned long, bool)>:
c000fe05:	56                   	push   esi
c000fe06:	ba 01 00 00 00       	mov    edx,0x1
c000fe0b:	53                   	push   ebx
c000fe0c:	8b 35 38 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cc38
c000fe12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1a:	89 c8                	mov    eax,ecx
c000fe1c:	83 e1 07             	and    ecx,0x7
c000fe1f:	c1 e8 03             	shr    eax,0x3
c000fe22:	d3 e3                	shl    ebx,cl
c000fe24:	01 c6                	add    esi,eax
c000fe26:	d3 e2                	shl    edx,cl
c000fe28:	f7 d2                	not    edx
c000fe2a:	20 16                	and    BYTE PTR [esi],dl
c000fe2c:	03 05 38 cc 02 c0    	add    eax,DWORD PTR ds:0xc002cc38
c000fe32:	08 18                	or     BYTE PTR [eax],bl
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Phys::getPageState(unsigned long)>:
c000fe37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3b:	8b 15 38 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cc38
c000fe41:	89 c8                	mov    eax,ecx
c000fe43:	83 e1 07             	and    ecx,0x7
c000fe46:	c1 e8 03             	shr    eax,0x3
c000fe49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4d:	d3 f8                	sar    eax,cl
c000fe4f:	83 e0 01             	and    eax,0x1
c000fe52:	c3                   	ret    

c000fe53 <Phys::freePage(unsigned long)>:
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe61:	76 57                	jbe    c000feba <Phys::freePage(unsigned long)+0x67>
c000fe63:	c1 eb 0c             	shr    ebx,0xc
c000fe66:	53                   	push   ebx
c000fe67:	e8 cb ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fe6c:	5a                   	pop    edx
c000fe6d:	84 c0                	test   al,al
c000fe6f:	74 5b                	je     c000fecc <Phys::freePage(unsigned long)+0x79>
c000fe71:	a1 4c dd 02 c0       	mov    eax,ds:0xc002dd4c
c000fe76:	48                   	dec    eax
c000fe77:	a3 4c dd 02 c0       	mov    ds:0xc002dd4c,eax
c000fe7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	c1 e0 02             	shl    eax,0x2
c000fe85:	99                   	cdq    
c000fe86:	f7 3d 50 dd 02 c0    	idiv   DWORD PTR ds:0xc002dd50
c000fe8c:	39 05 48 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd48,eax
c000fe92:	75 13                	jne    c000fea7 <Phys::freePage(unsigned long)+0x54>
c000fe94:	83 ec 08             	sub    esp,0x8
c000fe97:	6a 00                	push   0x0
c000fe99:	53                   	push   ebx
c000fe9a:	e8 66 ff ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	83 c4 08             	add    esp,0x8
c000fea5:	5b                   	pop    ebx
c000fea6:	c3                   	ret    
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	a3 48 dd 02 c0       	mov    ds:0xc002dd48,eax
c000feaf:	50                   	push   eax
c000feb0:	e8 5b 0a 00 00       	call   c0010910 <VgaText::updateRAMUsageDisplay(int)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	eb da                	jmp    c000fe94 <Phys::freePage(unsigned long)+0x41>
c000feba:	68 00 10 00 00       	push   0x1000
c000febf:	53                   	push   ebx
c000fec0:	e8 f8 fe ff ff       	call   c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>
c000fec5:	59                   	pop    ecx
c000fec6:	5b                   	pop    ebx
c000fec7:	83 c4 08             	add    esp,0x8
c000feca:	5b                   	pop    ebx
c000fecb:	c3                   	ret    
c000fecc:	c7 44 24 10 e6 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ce6
c000fed4:	83 c4 08             	add    esp,0x8
c000fed7:	5b                   	pop    ebx
c000fed8:	e9 c2 a2 00 00       	jmp    c001a19f <Krnl::panic(char const*)>

c000fedd <Phys::allocatePage()>:
c000fedd:	56                   	push   esi
c000fede:	53                   	push   ebx
c000fedf:	51                   	push   ecx
c000fee0:	8b 35 40 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd40
c000fee6:	89 f3                	mov    ebx,esi
c000fee8:	eb 0a                	jmp    c000fef4 <Phys::allocatePage()+0x17>
c000feea:	89 1d 40 dd 02 c0    	mov    DWORD PTR ds:0xc002dd40,ebx
c000fef0:	39 de                	cmp    esi,ebx
c000fef2:	74 24                	je     c000ff18 <Phys::allocatePage()+0x3b>
c000fef4:	53                   	push   ebx
c000fef5:	e8 3d ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fefa:	5a                   	pop    edx
c000fefb:	84 c0                	test   al,al
c000fefd:	74 5a                	je     c000ff59 <Phys::allocatePage()+0x7c>
c000feff:	43                   	inc    ebx
c000ff00:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff06:	75 e2                	jne    c000feea <Phys::allocatePage()+0xd>
c000ff08:	31 db                	xor    ebx,ebx
c000ff0a:	c7 05 40 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd40,0x0
c000ff14:	39 de                	cmp    esi,ebx
c000ff16:	75 dc                	jne    c000fef4 <Phys::allocatePage()+0x17>
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	68 fc 9c 02 c0       	push   0xc0029cfc
c000ff20:	e8 ea 2b 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ff25:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff2c:	e8 e9 fd ff ff       	call   c000fd1a <Phys::allocateDMA(unsigned long)>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	85 c0                	test   eax,eax
c000ff36:	75 56                	jne    c000ff8e <Phys::allocatePage()+0xb1>
c000ff38:	83 ec 0c             	sub    esp,0xc
c000ff3b:	68 0d 9d 02 c0       	push   0xc0029d0d
c000ff40:	e8 5a a2 00 00       	call   c001a19f <Krnl::panic(char const*)>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	8b 1d 40 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd40
c000ff4e:	53                   	push   ebx
c000ff4f:	e8 e3 fe ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000ff54:	5a                   	pop    edx
c000ff55:	84 c0                	test   al,al
c000ff57:	75 a6                	jne    c000feff <Phys::allocatePage()+0x22>
c000ff59:	6a 01                	push   0x1
c000ff5b:	53                   	push   ebx
c000ff5c:	e8 a4 fe ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000ff61:	a1 4c dd 02 c0       	mov    eax,ds:0xc002dd4c
c000ff66:	59                   	pop    ecx
c000ff67:	40                   	inc    eax
c000ff68:	5b                   	pop    ebx
c000ff69:	a3 4c dd 02 c0       	mov    ds:0xc002dd4c,eax
c000ff6e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff71:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff74:	c1 e0 02             	shl    eax,0x2
c000ff77:	99                   	cdq    
c000ff78:	f7 3d 50 dd 02 c0    	idiv   DWORD PTR ds:0xc002dd50
c000ff7e:	39 05 48 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd48,eax
c000ff84:	75 0c                	jne    c000ff92 <Phys::allocatePage()+0xb5>
c000ff86:	a1 40 dd 02 c0       	mov    eax,ds:0xc002dd40
c000ff8b:	c1 e0 0c             	shl    eax,0xc
c000ff8e:	5a                   	pop    edx
c000ff8f:	5b                   	pop    ebx
c000ff90:	5e                   	pop    esi
c000ff91:	c3                   	ret    
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	a3 48 dd 02 c0       	mov    ds:0xc002dd48,eax
c000ff9a:	50                   	push   eax
c000ff9b:	e8 70 09 00 00       	call   c0010910 <VgaText::updateRAMUsageDisplay(int)>
c000ffa0:	83 c4 10             	add    esp,0x10
c000ffa3:	eb e1                	jmp    c000ff86 <Phys::allocatePage()+0xa9>

c000ffa5 <Phys::allocateContiguousPages(int)>:
c000ffa5:	57                   	push   edi
c000ffa6:	56                   	push   esi
c000ffa7:	53                   	push   ebx
c000ffa8:	31 db                	xor    ebx,ebx
c000ffaa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffae:	e8 7b d8 00 00       	call   c001d82e <lockScheduler()>
c000ffb3:	85 db                	test   ebx,ebx
c000ffb5:	75 11                	jne    c000ffc8 <Phys::allocateContiguousPages(int)+0x23>
c000ffb7:	e8 21 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffbc:	83 ff 01             	cmp    edi,0x1
c000ffbf:	89 c6                	mov    esi,eax
c000ffc1:	74 21                	je     c000ffe4 <Phys::allocateContiguousPages(int)+0x3f>
c000ffc3:	bb 01 00 00 00       	mov    ebx,0x1
c000ffc8:	e8 10 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffcd:	89 da                	mov    edx,ebx
c000ffcf:	c1 e2 0c             	shl    edx,0xc
c000ffd2:	01 f2                	add    edx,esi
c000ffd4:	39 c2                	cmp    edx,eax
c000ffd6:	74 17                	je     c000ffef <Phys::allocateContiguousPages(int)+0x4a>
c000ffd8:	bb 01 00 00 00       	mov    ebx,0x1
c000ffdd:	89 c6                	mov    esi,eax
c000ffdf:	83 ff 01             	cmp    edi,0x1
c000ffe2:	75 e4                	jne    c000ffc8 <Phys::allocateContiguousPages(int)+0x23>
c000ffe4:	e8 47 d8 00 00       	call   c001d830 <unlockScheduler()>
c000ffe9:	89 f0                	mov    eax,esi
c000ffeb:	5b                   	pop    ebx
c000ffec:	5e                   	pop    esi
c000ffed:	5f                   	pop    edi
c000ffee:	c3                   	ret    
c000ffef:	43                   	inc    ebx
c000fff0:	39 fb                	cmp    ebx,edi
c000fff2:	75 bf                	jne    c000ffb3 <Phys::allocateContiguousPages(int)+0xe>
c000fff4:	e8 37 d8 00 00       	call   c001d830 <unlockScheduler()>
c000fff9:	89 f0                	mov    eax,esi
c000fffb:	5b                   	pop    ebx
c000fffc:	5e                   	pop    esi
c000fffd:	5f                   	pop    edi
c000fffe:	c3                   	ret    

c000ffff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ffff:	56                   	push   esi
c0010000:	53                   	push   ebx
c0010001:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010005:	39 1d 44 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd44,ebx
c001000b:	73 06                	jae    c0010013 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001000d:	89 1d 44 dd 02 c0    	mov    DWORD PTR ds:0xc002dd44,ebx
c0010013:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010017:	c1 eb 0c             	shr    ebx,0xc
c001001a:	c1 e8 0c             	shr    eax,0xc
c001001d:	39 d8                	cmp    eax,ebx
c001001f:	73 13                	jae    c0010034 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010021:	6a 00                	push   0x0
c0010023:	8d 70 01             	lea    esi,[eax+0x1]
c0010026:	50                   	push   eax
c0010027:	e8 d9 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c001002c:	5a                   	pop    edx
c001002d:	89 f0                	mov    eax,esi
c001002f:	59                   	pop    ecx
c0010030:	39 f3                	cmp    ebx,esi
c0010032:	75 ed                	jne    c0010021 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010034:	5b                   	pop    ebx
c0010035:	5e                   	pop    esi
c0010036:	c3                   	ret    

c0010037 <Phys::physicalMemorySetup(unsigned int)>:
c0010037:	55                   	push   ebp
c0010038:	57                   	push   edi
c0010039:	56                   	push   esi
c001003a:	53                   	push   ebx
c001003b:	31 db                	xor    ebx,ebx
c001003d:	83 ec 40             	sub    esp,0x40
c0010040:	6a 30                	push   0x30
c0010042:	6a 00                	push   0x0
c0010044:	68 60 dd 02 c0       	push   0xc002dd60
c0010049:	e8 2a 07 ff ff       	call   c0000778 <memset>
c001004e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010052:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010057:	05 00 10 00 00       	add    eax,0x1000
c001005c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	83 ec 08             	sub    esp,0x8
c0010066:	6a 01                	push   0x1
c0010068:	53                   	push   ebx
c0010069:	43                   	inc    ebx
c001006a:	e8 96 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c001006f:	83 c4 10             	add    esp,0x10
c0010072:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010078:	75 e9                	jne    c0010063 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001007a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010081:	66 85 c0             	test   ax,ax
c0010084:	0f 84 8e 01 00 00    	je     c0010218 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001008a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001008e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010096:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001009a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001009f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100a3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100ab:	eb 15                	jmp    c00100c2 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100ad:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100b1:	83 c3 18             	add    ebx,0x18
c00100b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100b8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100bc:	0f 84 66 01 00 00    	je     c0010228 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100c2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100d3:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100d5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100d8:	01 f0                	add    eax,esi
c00100da:	55                   	push   ebp
c00100db:	11 fa                	adc    edx,edi
c00100dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100e1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100e9:	56                   	push   esi
c00100ea:	68 48 9d 02 c0       	push   0xc0029d48
c00100ef:	e8 1b 2a 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00100f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100f8:	83 c4 10             	add    esp,0x10
c00100fb:	09 f8                	or     eax,edi
c00100fd:	0f 85 25 01 00 00    	jne    c0010228 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010103:	4d                   	dec    ebp
c0010104:	75 a7                	jne    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010106:	ba 00 00 08 00       	mov    edx,0x80000
c001010b:	89 c1                	mov    ecx,eax
c001010d:	39 f2                	cmp    edx,esi
c001010f:	19 f9                	sbb    ecx,edi
c0010111:	0f 82 a7 00 00 00    	jb     c00101be <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010117:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001011b:	89 c1                	mov    ecx,eax
c001011d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010121:	0f 83 97 00 00 00    	jae    c00101be <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010127:	ba 00 00 0a 00       	mov    edx,0xa0000
c001012c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010130:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010134:	39 fa                	cmp    edx,edi
c0010136:	19 e8                	sbb    eax,ebp
c0010138:	0f 82 14 01 00 00    	jb     c0010252 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001013e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010142:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010146:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001014c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010151:	83 d5 ff             	adc    ebp,0xffffffff
c0010154:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010158:	31 c0                	xor    eax,eax
c001015a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001015e:	39 fa                	cmp    edx,edi
c0010160:	89 c1                	mov    ecx,eax
c0010162:	19 e9                	sbb    ecx,ebp
c0010164:	0f 83 43 ff ff ff    	jae    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c001016a:	be 00 00 08 00       	mov    esi,0x80000
c001016f:	50                   	push   eax
c0010170:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010174:	57                   	push   edi
c0010175:	56                   	push   esi
c0010176:	68 6c 9d 02 c0       	push   0xc0029d6c
c001017b:	e8 8f 29 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0010180:	5a                   	pop    edx
c0010181:	59                   	pop    ecx
c0010182:	57                   	push   edi
c0010183:	56                   	push   esi
c0010184:	e8 76 fe ff ff       	call   c000ffff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010189:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001018d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010191:	83 c4 0c             	add    esp,0xc
c0010194:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010198:	03 05 50 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd50
c001019e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101a5:	a3 50 dd 02 c0       	mov    ds:0xc002dd50,eax
c00101aa:	52                   	push   edx
c00101ab:	50                   	push   eax
c00101ac:	68 29 9d 02 c0       	push   0xc0029d29
c00101b1:	e8 59 29 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00101b6:	83 c4 10             	add    esp,0x10
c00101b9:	e9 ef fe ff ff       	jmp    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101be:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101ca:	39 ea                	cmp    edx,ebp
c00101cc:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101d0:	0f 82 d7 fe ff ff    	jb     c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101db:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101df:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101e3:	0f 83 c4 fe ff ff    	jae    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e9:	39 ee                	cmp    esi,ebp
c00101eb:	89 f8                	mov    eax,edi
c00101ed:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101f1:	0f 83 78 ff ff ff    	jae    c001016f <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101ff:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010203:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010207:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001020b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001020f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010213:	e9 57 ff ff ff       	jmp    c001016f <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010218:	83 ec 0c             	sub    esp,0xc
c001021b:	68 1b 9d 02 c0       	push   0xc0029d1b
c0010220:	e8 7a 9f 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0010225:	83 c4 10             	add    esp,0x10
c0010228:	bb 40 01 00 00       	mov    ebx,0x140
c001022d:	83 ec 08             	sub    esp,0x8
c0010230:	6a 00                	push   0x0
c0010232:	53                   	push   ebx
c0010233:	43                   	inc    ebx
c0010234:	e8 cc fb ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010239:	ff 05 50 dd 02 c0    	inc    DWORD PTR ds:0xc002dd50
c001023f:	83 c4 10             	add    esp,0x10
c0010242:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010248:	75 e3                	jne    c001022d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001024a:	83 c4 3c             	add    esp,0x3c
c001024d:	5b                   	pop    ebx
c001024e:	5e                   	pop    esi
c001024f:	5f                   	pop    edi
c0010250:	5d                   	pop    ebp
c0010251:	c3                   	ret    
c0010252:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001025a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010262:	e9 d7 fe ff ff       	jmp    c001013e <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010267:	90                   	nop

c0010268 <Pipe::isAtty()>:
c0010268:	31 c0                	xor    eax,eax
c001026a:	c3                   	ret    
c001026b:	90                   	nop

c001026c <Pipe::~Pipe()>:
c001026c:	83 ec 0c             	sub    esp,0xc
c001026f:	ba d8 9d 02 c0       	mov    edx,0xc0029dd8
c0010274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010278:	89 10                	mov    DWORD PTR [eax],edx
c001027a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027e:	83 ec 0c             	sub    esp,0xc
c0010281:	50                   	push   eax
c0010282:	e8 37 16 00 00       	call   c00118be <UnixFile::~UnixFile()>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	90                   	nop
c001028b:	83 c4 0c             	add    esp,0xc
c001028e:	c3                   	ret    
c001028f:	90                   	nop

c0010290 <Pipe::~Pipe()>:
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	83 ec 0c             	sub    esp,0xc
c0010296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029a:	e8 cd ff ff ff       	call   c001026c <Pipe::~Pipe()>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	83 ec 08             	sub    esp,0x8
c00102a5:	6a 20                	push   0x20
c00102a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ab:	e8 7f 27 00 00       	call   c0012a2f <operator delete(void*, unsigned long)>
c00102b0:	83 c4 10             	add    esp,0x10
c00102b3:	83 c4 0c             	add    esp,0xc
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <Pipe::read(unsigned long long, void*, int*)>:
c00102b8:	55                   	push   ebp
c00102b9:	57                   	push   edi
c00102ba:	56                   	push   esi
c00102bb:	53                   	push   ebx
c00102bc:	83 ec 1c             	sub    esp,0x1c
c00102bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102ce:	89 c8                	mov    eax,ecx
c00102d0:	99                   	cdq    
c00102d1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102d5:	74 19                	je     c00102f0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d7:	39 f9                	cmp    ecx,edi
c00102d9:	89 d1                	mov    ecx,edx
c00102db:	19 f1                	sbb    ecx,esi
c00102dd:	73 11                	jae    c00102f0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102df:	e8 4a d5 00 00       	call   c001d82e <lockScheduler()>
c00102e4:	e8 81 d8 00 00       	call   c001db6a <schedule()>
c00102e9:	e8 42 d5 00 00       	call   c001d830 <unlockScheduler()>
c00102ee:	eb db                	jmp    c00102cb <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102f0:	39 f8                	cmp    eax,edi
c00102f2:	89 d1                	mov    ecx,edx
c00102f4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102f8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102fc:	19 f1                	sbb    ecx,esi
c00102fe:	73 08                	jae    c0010308 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010300:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010304:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010308:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001030b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001030e:	29 c6                	sub    esi,eax
c0010310:	89 f1                	mov    ecx,esi
c0010312:	c1 f9 1f             	sar    ecx,0x1f
c0010315:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010319:	89 ca                	mov    edx,ecx
c001031b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001031f:	19 d1                	sbb    ecx,edx
c0010321:	73 04                	jae    c0010327 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010323:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010327:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001032b:	89 fd                	mov    ebp,edi
c001032d:	29 f5                	sub    ebp,esi
c001032f:	85 f6                	test   esi,esi
c0010331:	74 12                	je     c0010345 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010333:	52                   	push   edx
c0010334:	56                   	push   esi
c0010335:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010338:	50                   	push   eax
c0010339:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001033d:	e8 02 04 ff ff       	call   c0000744 <memcpy>
c0010342:	83 c4 10             	add    esp,0x10
c0010345:	85 ed                	test   ebp,ebp
c0010347:	74 12                	je     c001035b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010349:	50                   	push   eax
c001034a:	55                   	push   ebp
c001034b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001034e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010352:	56                   	push   esi
c0010353:	e8 ec 03 ff ff       	call   c0000744 <memcpy>
c0010358:	83 c4 10             	add    esp,0x10
c001035b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001035e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010361:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010364:	99                   	cdq    
c0010365:	89 f7                	mov    edi,esi
c0010367:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001036b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001036f:	c1 ff 1f             	sar    edi,0x1f
c0010372:	57                   	push   edi
c0010373:	56                   	push   esi
c0010374:	52                   	push   edx
c0010375:	50                   	push   eax
c0010376:	e8 91 61 01 00       	call   c002650c <__umoddi3>
c001037b:	83 c4 10             	add    esp,0x10
c001037e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010381:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010386:	75 10                	jne    c0010398 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010388:	83 ec 0c             	sub    esp,0xc
c001038b:	68 95 9d 02 c0       	push   0xc0029d95
c0010390:	e8 0a 9e 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0010395:	83 c4 10             	add    esp,0x10
c0010398:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001039c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a0:	89 10                	mov    DWORD PTR [eax],edx
c00103a2:	83 c4 1c             	add    esp,0x1c
c00103a5:	31 c0                	xor    eax,eax
c00103a7:	5b                   	pop    ebx
c00103a8:	5e                   	pop    esi
c00103a9:	5f                   	pop    edi
c00103aa:	5d                   	pop    ebp
c00103ab:	c3                   	ret    

c00103ac <Pipe::write(unsigned long long, void*, int*)>:
c00103ac:	55                   	push   ebp
c00103ad:	57                   	push   edi
c00103ae:	56                   	push   esi
c00103af:	53                   	push   ebx
c00103b0:	83 ec 1c             	sub    esp,0x1c
c00103b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00103c2:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103c5:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103cc:	89 de                	mov    esi,ebx
c00103ce:	89 df                	mov    edi,ebx
c00103d0:	c1 ff 1f             	sar    edi,0x1f
c00103d3:	01 c6                	add    esi,eax
c00103d5:	89 c8                	mov    eax,ecx
c00103d7:	11 d7                	adc    edi,edx
c00103d9:	99                   	cdq    
c00103da:	39 f1                	cmp    ecx,esi
c00103dc:	89 d0                	mov    eax,edx
c00103de:	19 f8                	sbb    eax,edi
c00103e0:	b8 01 00 00 00       	mov    eax,0x1
c00103e5:	0f 82 80 00 00 00    	jb     c001046b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103ee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103f1:	01 d8                	add    eax,ebx
c00103f3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103f7:	99                   	cdq    
c00103f8:	f7 f9                	idiv   ecx
c00103fa:	29 d1                	sub    ecx,edx
c00103fc:	89 d7                	mov    edi,edx
c00103fe:	89 c8                	mov    eax,ecx
c0010400:	99                   	cdq    
c0010401:	39 ce                	cmp    esi,ecx
c0010403:	19 d3                	sbb    ebx,edx
c0010405:	bb 00 00 00 00       	mov    ebx,0x0
c001040a:	72 04                	jb     c0010410 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001040c:	89 f3                	mov    ebx,esi
c001040e:	29 cb                	sub    ebx,ecx
c0010410:	89 f1                	mov    ecx,esi
c0010412:	29 d9                	sub    ecx,ebx
c0010414:	74 1a                	je     c0010430 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010416:	52                   	push   edx
c0010417:	51                   	push   ecx
c0010418:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001041c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010420:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010423:	57                   	push   edi
c0010424:	e8 1b 03 ff ff       	call   c0000744 <memcpy>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010430:	85 db                	test   ebx,ebx
c0010432:	74 12                	je     c0010446 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010434:	50                   	push   eax
c0010435:	53                   	push   ebx
c0010436:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001043a:	51                   	push   ecx
c001043b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001043e:	e8 01 03 ff ff       	call   c0000744 <memcpy>
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010449:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001044e:	75 10                	jne    c0010460 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010450:	83 ec 0c             	sub    esp,0xc
c0010453:	68 b1 9d 02 c0       	push   0xc0029db1
c0010458:	e8 42 9d 00 00       	call   c001a19f <Krnl::panic(char const*)>
c001045d:	83 c4 10             	add    esp,0x10
c0010460:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010464:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010467:	89 38                	mov    DWORD PTR [eax],edi
c0010469:	31 c0                	xor    eax,eax
c001046b:	83 c4 1c             	add    esp,0x1c
c001046e:	5b                   	pop    ebx
c001046f:	5e                   	pop    esi
c0010470:	5f                   	pop    edi
c0010471:	5d                   	pop    ebp
c0010472:	c3                   	ret    
c0010473:	90                   	nop

c0010474 <Pipe::Pipe(int)>:
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047b:	83 ec 08             	sub    esp,0x8
c001047e:	6a 00                	push   0x0
c0010480:	50                   	push   eax
c0010481:	e8 56 12 00 00       	call   c00116dc <UnixFile::UnixFile(int)>
c0010486:	83 c4 10             	add    esp,0x10
c0010489:	ba d8 9d 02 c0       	mov    edx,0xc0029dd8
c001048e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010492:	89 10                	mov    DWORD PTR [eax],edx
c0010494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010498:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001049c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001049f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ae:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104b9:	83 ec 0c             	sub    esp,0xc
c00104bc:	50                   	push   eax
c00104bd:	e8 7e f3 ff ff       	call   c000f840 <malloc>
c00104c2:	83 c4 10             	add    esp,0x10
c00104c5:	89 c2                	mov    edx,eax
c00104c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104d6:	90                   	nop
c00104d7:	83 c4 0c             	add    esp,0xc
c00104da:	c3                   	ret    
c00104db:	90                   	nop

c00104dc <VgaText::isAtty()>:
c00104dc:	b0 01                	mov    al,0x1
c00104de:	c3                   	ret    
c00104df:	90                   	nop

c00104e0 <VgaText::~VgaText()>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	ba 94 9e 02 c0       	mov    edx,0xc0029e94
c00104e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ec:	89 10                	mov    DWORD PTR [eax],edx
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	83 ec 0c             	sub    esp,0xc
c00104f5:	50                   	push   eax
c00104f6:	e8 c3 13 00 00       	call   c00118be <UnixFile::~UnixFile()>
c00104fb:	83 c4 10             	add    esp,0x10
c00104fe:	90                   	nop
c00104ff:	83 c4 0c             	add    esp,0xc
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <VgaText::~VgaText()>:
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	83 ec 0c             	sub    esp,0xc
c001050a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050e:	e8 cd ff ff ff       	call   c00104e0 <VgaText::~VgaText()>
c0010513:	83 c4 10             	add    esp,0x10
c0010516:	83 ec 08             	sub    esp,0x8
c0010519:	68 60 12 00 00       	push   0x1260
c001051e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010522:	e8 08 25 00 00       	call   c0012a2f <operator delete(void*, unsigned long)>
c0010527:	83 c4 10             	add    esp,0x10
c001052a:	83 c4 0c             	add    esp,0xc
c001052d:	c3                   	ret    

c001052e <VgaText::read(unsigned long long, void*, int*)>:
c001052e:	83 ec 10             	sub    esp,0x10
c0010531:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010535:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053d:	e8 1d 59 00 00       	call   c0015e5f <readKeyboard(VgaText*, char*, unsigned long)>
c0010542:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010546:	89 02                	mov    DWORD PTR [edx],eax
c0010548:	31 c0                	xor    eax,eax
c001054a:	83 c4 1c             	add    esp,0x1c
c001054d:	c3                   	ret    

c001054e <setTerminalScrollLock(bool)>:
c001054e:	c3                   	ret    

c001054f <addToTerminalCycle(VgaText*)>:
c001054f:	8b 15 e0 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dde0
c0010555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010559:	85 d2                	test   edx,edx
c001055b:	75 0c                	jne    c0010569 <addToTerminalCycle(VgaText*)+0x1a>
c001055d:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010563:	a3 e0 dd 02 c0       	mov    ds:0xc002dde0,eax
c0010568:	c3                   	ret    
c0010569:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001056f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010575:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001057b:	c3                   	ret    

c001057c <installVgaTextImplementation()>:
c001057c:	83 ec 10             	sub    esp,0x10
c001057f:	6a 20                	push   0x20
c0010581:	6a 00                	push   0x0
c0010583:	68 c0 dd 02 c0       	push   0xc002ddc0
c0010588:	e8 eb 01 ff ff       	call   c0000778 <memset>
c001058d:	83 c4 1c             	add    esp,0x1c
c0010590:	c3                   	ret    

c0010591 <scrollTerminalScrollLock(int)>:
c0010591:	c3                   	ret    

c0010592 <VgaText::load()>:
c0010592:	53                   	push   ebx
c0010593:	31 c0                	xor    eax,eax
c0010595:	83 ec 58             	sub    esp,0x58
c0010598:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001059c:	89 e2                	mov    edx,esp
c001059e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105a2:	40                   	inc    eax
c00105a3:	83 f8 50             	cmp    eax,0x50
c00105a6:	75 f6                	jne    c001059e <VgaText::load()+0xc>
c00105a8:	31 c0                	xor    eax,eax
c00105aa:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105b1:	84 c9                	test   cl,cl
c00105b3:	74 06                	je     c00105bb <VgaText::load()+0x29>
c00105b5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105b8:	40                   	inc    eax
c00105b9:	eb ef                	jmp    c00105aa <VgaText::load()+0x18>
c00105bb:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105c1:	85 c0                	test   eax,eax
c00105c3:	74 09                	je     c00105ce <VgaText::load()+0x3c>
c00105c5:	51                   	push   ecx
c00105c6:	51                   	push   ecx
c00105c7:	52                   	push   edx
c00105c8:	53                   	push   ebx
c00105c9:	ff d0                	call   eax
c00105cb:	83 c4 10             	add    esp,0x10
c00105ce:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105d4:	85 c0                	test   eax,eax
c00105d6:	74 09                	je     c00105e1 <VgaText::load()+0x4f>
c00105d8:	83 ec 0c             	sub    esp,0xc
c00105db:	53                   	push   ebx
c00105dc:	ff d0                	call   eax
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 c4 58             	add    esp,0x58
c00105e4:	5b                   	pop    ebx
c00105e5:	c3                   	ret    

c00105e6 <VgaText::updateCursor()>:
c00105e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ea:	39 05 e4 dd 02 c0    	cmp    DWORD PTR ds:0xc002dde4,eax
c00105f0:	75 0c                	jne    c00105fe <VgaText::updateCursor()+0x18>
c00105f2:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00105f8:	85 c0                	test   eax,eax
c00105fa:	74 02                	je     c00105fe <VgaText::updateCursor()+0x18>
c00105fc:	ff e0                	jmp    eax
c00105fe:	c3                   	ret    
c00105ff:	90                   	nop

c0010600 <VgaText::showCursor(bool)>:
c0010600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010604:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010608:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001060e:	c3                   	ret    
c001060f:	90                   	nop

c0010610 <VgaText::disableBlink(bool)>:
c0010610:	56                   	push   esi
c0010611:	53                   	push   ebx
c0010612:	51                   	push   ecx
c0010613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010617:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001061b:	39 1d e4 dd 02 c0    	cmp    DWORD PTR ds:0xc002dde4,ebx
c0010621:	75 18                	jne    c001063b <VgaText::disableBlink(bool)+0x2b>
c0010623:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010629:	85 c0                	test   eax,eax
c001062b:	74 0e                	je     c001063b <VgaText::disableBlink(bool)+0x2b>
c001062d:	89 f1                	mov    ecx,esi
c001062f:	52                   	push   edx
c0010630:	52                   	push   edx
c0010631:	0f b6 d1             	movzx  edx,cl
c0010634:	52                   	push   edx
c0010635:	53                   	push   ebx
c0010636:	ff d0                	call   eax
c0010638:	83 c4 10             	add    esp,0x10
c001063b:	89 f0                	mov    eax,esi
c001063d:	83 f0 01             	xor    eax,0x1
c0010640:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010646:	58                   	pop    eax
c0010647:	5b                   	pop    ebx
c0010648:	5e                   	pop    esi
c0010649:	c3                   	ret    

c001064a <VgaText::doANSI_SGR(int)>:
c001064a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001064e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010652:	85 d2                	test   edx,edx
c0010654:	75 14                	jne    c001066a <VgaText::doANSI_SGR(int)+0x20>
c0010656:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001065c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010662:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010668:	eb 65                	jmp    c00106cf <VgaText::doANSI_SGR(int)+0x85>
c001066a:	83 fa 07             	cmp    edx,0x7
c001066d:	75 14                	jne    c0010683 <VgaText::doANSI_SGR(int)+0x39>
c001066f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010675:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001067b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010681:	eb 4c                	jmp    c00106cf <VgaText::doANSI_SGR(int)+0x85>
c0010683:	83 fa 1b             	cmp    edx,0x1b
c0010686:	74 ce                	je     c0010656 <VgaText::doANSI_SGR(int)+0xc>
c0010688:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001068b:	83 f9 07             	cmp    ecx,0x7
c001068e:	77 09                	ja     c0010699 <VgaText::doANSI_SGR(int)+0x4f>
c0010690:	8b 14 8d 60 cc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd33a0]
c0010697:	eb 20                	jmp    c00106b9 <VgaText::doANSI_SGR(int)+0x6f>
c0010699:	8d 4a d8             	lea    ecx,[edx-0x28]
c001069c:	83 f9 07             	cmp    ecx,0x7
c001069f:	77 09                	ja     c00106aa <VgaText::doANSI_SGR(int)+0x60>
c00106a1:	8b 14 8d 60 cc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd33a0]
c00106a8:	eb 25                	jmp    c00106cf <VgaText::doANSI_SGR(int)+0x85>
c00106aa:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106ad:	83 f9 07             	cmp    ecx,0x7
c00106b0:	77 0e                	ja     c00106c0 <VgaText::doANSI_SGR(int)+0x76>
c00106b2:	8b 14 95 18 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd34e8]
c00106b9:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106bf:	c3                   	ret    
c00106c0:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c3:	83 f9 07             	cmp    ecx,0x7
c00106c6:	77 0d                	ja     c00106d5 <VgaText::doANSI_SGR(int)+0x8b>
c00106c8:	8b 14 95 f0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3510]
c00106cf:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106d5:	c3                   	ret    

c00106d6 <VgaText::setDefaultBgColour(VgaColour)>:
c00106d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106de:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00106e4:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106ea:	c3                   	ret    
c00106eb:	90                   	nop

c00106ec <VgaText::setDefaultFgColour(VgaColour)>:
c00106ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f4:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00106fa:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010700:	c3                   	ret    
c0010701:	90                   	nop

c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010702:	53                   	push   ebx
c0010703:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010707:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001070b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001070f:	51                   	push   ecx
c0010710:	e8 c1 ff ff ff       	call   c00106d6 <VgaText::setDefaultBgColour(VgaColour)>
c0010715:	58                   	pop    eax
c0010716:	5a                   	pop    edx
c0010717:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001071b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001071f:	5b                   	pop    ebx
c0010720:	eb ca                	jmp    c00106ec <VgaText::setDefaultFgColour(VgaColour)>

c0010722 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010722:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010726:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001072b:	83 e0 0f             	and    eax,0xf
c001072e:	c1 e2 04             	shl    edx,0x4
c0010731:	09 d0                	or     eax,edx
c0010733:	c3                   	ret    

c0010734 <VgaText::scrollScreen()>:
c0010734:	57                   	push   edi
c0010735:	56                   	push   esi
c0010736:	be 01 00 00 00       	mov    esi,0x1
c001073b:	53                   	push   ebx
c001073c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010740:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010746:	31 ff                	xor    edi,edi
c0010748:	01 d9                	add    ecx,ebx
c001074a:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001074d:	83 fe 17             	cmp    esi,0x17
c0010750:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010756:	75 28                	jne    c0010780 <VgaText::scrollScreen()+0x4c>
c0010758:	f7 c7 01 00 00 00    	test   edi,0x1
c001075e:	74 1c                	je     c001077c <VgaText::scrollScreen()+0x48>
c0010760:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010767:	50                   	push   eax
c0010768:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001076f:	50                   	push   eax
c0010770:	e8 ad ff ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010775:	5a                   	pop    edx
c0010776:	5a                   	pop    edx
c0010777:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001077a:	eb 04                	jmp    c0010780 <VgaText::scrollScreen()+0x4c>
c001077c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010780:	47                   	inc    edi
c0010781:	41                   	inc    ecx
c0010782:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010788:	75 c0                	jne    c001074a <VgaText::scrollScreen()+0x16>
c001078a:	46                   	inc    esi
c001078b:	83 fe 18             	cmp    esi,0x18
c001078e:	75 b0                	jne    c0010740 <VgaText::scrollScreen()+0xc>
c0010790:	39 1d e4 dd 02 c0    	cmp    DWORD PTR ds:0xc002dde4,ebx
c0010796:	75 24                	jne    c00107bc <VgaText::scrollScreen()+0x88>
c0010798:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001079f:	74 08                	je     c00107a9 <VgaText::scrollScreen()+0x75>
c00107a1:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107a7:	eb 13                	jmp    c00107bc <VgaText::scrollScreen()+0x88>
c00107a9:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107af:	85 c0                	test   eax,eax
c00107b1:	74 09                	je     c00107bc <VgaText::scrollScreen()+0x88>
c00107b3:	83 ec 0c             	sub    esp,0xc
c00107b6:	53                   	push   ebx
c00107b7:	ff d0                	call   eax
c00107b9:	83 c4 10             	add    esp,0x10
c00107bc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107c0:	5b                   	pop    ebx
c00107c1:	5e                   	pop    esi
c00107c2:	5f                   	pop    edi
c00107c3:	e9 1e fe ff ff       	jmp    c00105e6 <VgaText::updateCursor()>

c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107cd:	c1 e0 08             	shl    eax,0x8
c00107d0:	89 c2                	mov    edx,eax
c00107d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107d7:	09 d0                	or     eax,edx
c00107d9:	c3                   	ret    

c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107da:	53                   	push   ebx
c00107db:	83 ec 08             	sub    esp,0x8
c00107de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e7:	50                   	push   eax
c00107e8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ed:	50                   	push   eax
c00107ee:	e8 2f ff ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f3:	5a                   	pop    edx
c00107f4:	0f b6 c0             	movzx  eax,al
c00107f7:	5b                   	pop    ebx
c00107f8:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107fd:	50                   	push   eax
c00107fe:	53                   	push   ebx
c00107ff:	e8 c4 ff ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010804:	5a                   	pop    edx
c0010805:	5a                   	pop    edx
c0010806:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001080c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010810:	0f b7 d2             	movzx  edx,dx
c0010813:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010818:	39 0d e4 dd 02 c0    	cmp    DWORD PTR ds:0xc002dde4,ecx
c001081e:	75 14                	jne    c0010834 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010820:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010826:	85 c0                	test   eax,eax
c0010828:	74 0a                	je     c0010834 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001082a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001082e:	83 c4 08             	add    esp,0x8
c0010831:	5b                   	pop    ebx
c0010832:	ff e0                	jmp    eax
c0010834:	83 c4 08             	add    esp,0x8
c0010837:	5b                   	pop    ebx
c0010838:	c3                   	ret    
c0010839:	90                   	nop

c001083a <VgaText::getCursorX()>:
c001083a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010844:	c3                   	ret    
c0010845:	90                   	nop

c0010846 <VgaText::getCursorY()>:
c0010846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084a:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010850:	c3                   	ret    
c0010851:	90                   	nop

c0010852 <VgaText::setCursor(int, int)>:
c0010852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010856:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001085a:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010860:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010864:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001086a:	e9 77 fd ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c001086f:	90                   	nop

c0010870 <VgaText::setCursorX(int)>:
c0010870:	83 ec 10             	sub    esp,0x10
c0010873:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010877:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001087d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010881:	50                   	push   eax
c0010882:	e8 cb ff ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0010887:	83 c4 1c             	add    esp,0x1c
c001088a:	c3                   	ret    
c001088b:	90                   	nop

c001088c <VgaText::setCursorY(int)>:
c001088c:	83 ec 10             	sub    esp,0x10
c001088f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010893:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010897:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001089d:	50                   	push   eax
c001089e:	e8 af ff ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c00108a3:	83 c4 1c             	add    esp,0x1c
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <VgaText::incrementCursor(bool)>:
c00108a8:	56                   	push   esi
c00108a9:	53                   	push   ebx
c00108aa:	51                   	push   ecx
c00108ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108b3:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108b9:	40                   	inc    eax
c00108ba:	83 f8 50             	cmp    eax,0x50
c00108bd:	74 08                	je     c00108c7 <VgaText::incrementCursor(bool)+0x1f>
c00108bf:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108c5:	eb 33                	jmp    c00108fa <VgaText::incrementCursor(bool)+0x52>
c00108c7:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108cd:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108d7:	8d 50 01             	lea    edx,[eax+0x1]
c00108da:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108e0:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108e6:	75 12                	jne    c00108fa <VgaText::incrementCursor(bool)+0x52>
c00108e8:	83 ec 0c             	sub    esp,0xc
c00108eb:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00108f1:	53                   	push   ebx
c00108f2:	e8 3d fe ff ff       	call   c0010734 <VgaText::scrollScreen()>
c00108f7:	83 c4 10             	add    esp,0x10
c00108fa:	89 f0                	mov    eax,esi
c00108fc:	84 c0                	test   al,al
c00108fe:	74 0c                	je     c001090c <VgaText::incrementCursor(bool)+0x64>
c0010900:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010904:	5a                   	pop    edx
c0010905:	5b                   	pop    ebx
c0010906:	5e                   	pop    esi
c0010907:	e9 da fc ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c001090c:	58                   	pop    eax
c001090d:	5b                   	pop    ebx
c001090e:	5e                   	pop    esi
c001090f:	c3                   	ret    

c0010910 <VgaText::updateRAMUsageDisplay(int)>:
c0010910:	56                   	push   esi
c0010911:	8b 35 40 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cc40
c0010917:	53                   	push   ebx
c0010918:	bb 0a 00 00 00       	mov    ebx,0xa
c001091d:	6a 0f                	push   0xf
c001091f:	6a 00                	push   0x0
c0010921:	e8 fc fd ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010926:	5a                   	pop    edx
c0010927:	59                   	pop    ecx
c0010928:	0f b6 c8             	movzx  ecx,al
c001092b:	51                   	push   ecx
c001092c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010930:	99                   	cdq    
c0010931:	f7 fb                	idiv   ebx
c0010933:	89 d3                	mov    ebx,edx
c0010935:	83 c0 30             	add    eax,0x30
c0010938:	83 c3 30             	add    ebx,0x30
c001093b:	0f be c0             	movsx  eax,al
c001093e:	0f b6 db             	movzx  ebx,bl
c0010941:	50                   	push   eax
c0010942:	e8 81 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010947:	5a                   	pop    edx
c0010948:	5a                   	pop    edx
c0010949:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010950:	51                   	push   ecx
c0010951:	53                   	push   ebx
c0010952:	e8 71 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010957:	5b                   	pop    ebx
c0010958:	5a                   	pop    edx
c0010959:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010960:	51                   	push   ecx
c0010961:	6a 25                	push   0x25
c0010963:	e8 60 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010968:	59                   	pop    ecx
c0010969:	5b                   	pop    ebx
c001096a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	c3                   	ret    

c0010974 <VgaText::updateDiskUsage()>:
c0010974:	55                   	push   ebp
c0010975:	bd 10 27 00 00       	mov    ebp,0x2710
c001097a:	57                   	push   edi
c001097b:	8b 3d 40 cc 02 c0    	mov    edi,DWORD PTR ds:0xc002cc40
c0010981:	56                   	push   esi
c0010982:	53                   	push   ebx
c0010983:	6a 0f                	push   0xf
c0010985:	6a 00                	push   0x0
c0010987:	e8 96 fd ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c001098c:	5a                   	pop    edx
c001098d:	0f b6 d8             	movzx  ebx,al
c0010990:	59                   	pop    ecx
c0010991:	8b 35 68 20 03 c0    	mov    esi,DWORD PTR ds:0xc0032068
c0010997:	53                   	push   ebx
c0010998:	b9 0a 00 00 00       	mov    ecx,0xa
c001099d:	89 f0                	mov    eax,esi
c001099f:	99                   	cdq    
c00109a0:	f7 fd                	idiv   ebp
c00109a2:	99                   	cdq    
c00109a3:	f7 f9                	idiv   ecx
c00109a5:	8d 42 30             	lea    eax,[edx+0x30]
c00109a8:	0f b6 c0             	movzx  eax,al
c00109ab:	50                   	push   eax
c00109ac:	e8 17 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b1:	5d                   	pop    ebp
c00109b2:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109b7:	5a                   	pop    edx
c00109b8:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109bc:	53                   	push   ebx
c00109bd:	89 f0                	mov    eax,esi
c00109bf:	99                   	cdq    
c00109c0:	f7 fd                	idiv   ebp
c00109c2:	99                   	cdq    
c00109c3:	f7 f9                	idiv   ecx
c00109c5:	8d 42 30             	lea    eax,[edx+0x30]
c00109c8:	0f b6 c0             	movzx  eax,al
c00109cb:	50                   	push   eax
c00109cc:	e8 f7 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d1:	5d                   	pop    ebp
c00109d2:	bd 64 00 00 00       	mov    ebp,0x64
c00109d7:	5a                   	pop    edx
c00109d8:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109df:	53                   	push   ebx
c00109e0:	89 f0                	mov    eax,esi
c00109e2:	99                   	cdq    
c00109e3:	f7 fd                	idiv   ebp
c00109e5:	99                   	cdq    
c00109e6:	f7 f9                	idiv   ecx
c00109e8:	8d 42 30             	lea    eax,[edx+0x30]
c00109eb:	0f b6 c0             	movzx  eax,al
c00109ee:	50                   	push   eax
c00109ef:	e8 d4 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109f4:	5d                   	pop    ebp
c00109f5:	5a                   	pop    edx
c00109f6:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109fd:	53                   	push   ebx
c00109fe:	89 f0                	mov    eax,esi
c0010a00:	99                   	cdq    
c0010a01:	f7 f9                	idiv   ecx
c0010a03:	89 d6                	mov    esi,edx
c0010a05:	99                   	cdq    
c0010a06:	f7 f9                	idiv   ecx
c0010a08:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0b:	0f b6 c0             	movzx  eax,al
c0010a0e:	50                   	push   eax
c0010a0f:	e8 b4 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a14:	5d                   	pop    ebp
c0010a15:	5a                   	pop    edx
c0010a16:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a1d:	53                   	push   ebx
c0010a1e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a21:	0f b6 f0             	movzx  esi,al
c0010a24:	56                   	push   esi
c0010a25:	e8 9e fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2a:	5e                   	pop    esi
c0010a2b:	8b 35 64 20 03 c0    	mov    esi,DWORD PTR ds:0xc0032064
c0010a31:	5d                   	pop    ebp
c0010a32:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a39:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a3e:	53                   	push   ebx
c0010a3f:	89 f0                	mov    eax,esi
c0010a41:	99                   	cdq    
c0010a42:	f7 fd                	idiv   ebp
c0010a44:	99                   	cdq    
c0010a45:	f7 f9                	idiv   ecx
c0010a47:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4a:	0f b6 c0             	movzx  eax,al
c0010a4d:	50                   	push   eax
c0010a4e:	e8 75 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a53:	5a                   	pop    edx
c0010a54:	5d                   	pop    ebp
c0010a55:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a5c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a61:	53                   	push   ebx
c0010a62:	89 f0                	mov    eax,esi
c0010a64:	99                   	cdq    
c0010a65:	f7 fd                	idiv   ebp
c0010a67:	99                   	cdq    
c0010a68:	f7 f9                	idiv   ecx
c0010a6a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6d:	0f b6 c0             	movzx  eax,al
c0010a70:	50                   	push   eax
c0010a71:	e8 52 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a76:	5a                   	pop    edx
c0010a77:	5d                   	pop    ebp
c0010a78:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a7f:	bd 64 00 00 00       	mov    ebp,0x64
c0010a84:	53                   	push   ebx
c0010a85:	89 f0                	mov    eax,esi
c0010a87:	99                   	cdq    
c0010a88:	f7 fd                	idiv   ebp
c0010a8a:	99                   	cdq    
c0010a8b:	f7 f9                	idiv   ecx
c0010a8d:	83 c2 30             	add    edx,0x30
c0010a90:	0f b6 d2             	movzx  edx,dl
c0010a93:	52                   	push   edx
c0010a94:	e8 2f fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a99:	5a                   	pop    edx
c0010a9a:	5d                   	pop    ebp
c0010a9b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010aa2:	53                   	push   ebx
c0010aa3:	89 f0                	mov    eax,esi
c0010aa5:	99                   	cdq    
c0010aa6:	f7 f9                	idiv   ecx
c0010aa8:	89 d6                	mov    esi,edx
c0010aaa:	99                   	cdq    
c0010aab:	f7 f9                	idiv   ecx
c0010aad:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab0:	0f b6 c0             	movzx  eax,al
c0010ab3:	50                   	push   eax
c0010ab4:	e8 0f fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab9:	5a                   	pop    edx
c0010aba:	59                   	pop    ecx
c0010abb:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ac2:	53                   	push   ebx
c0010ac3:	8d 46 30             	lea    eax,[esi+0x30]
c0010ac6:	0f b6 f0             	movzx  esi,al
c0010ac9:	56                   	push   esi
c0010aca:	e8 f9 fc ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010acf:	5b                   	pop    ebx
c0010ad0:	5e                   	pop    esi
c0010ad1:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ad8:	5b                   	pop    ebx
c0010ad9:	5e                   	pop    esi
c0010ada:	5f                   	pop    edi
c0010adb:	5d                   	pop    ebp
c0010adc:	c3                   	ret    
c0010add:	90                   	nop

c0010ade <VgaText::updateTitle()>:
c0010ade:	53                   	push   ebx
c0010adf:	31 c0                	xor    eax,eax
c0010ae1:	83 ec 58             	sub    esp,0x58
c0010ae4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ae8:	89 e1                	mov    ecx,esp
c0010aea:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010aee:	40                   	inc    eax
c0010aef:	83 f8 50             	cmp    eax,0x50
c0010af2:	75 f6                	jne    c0010aea <VgaText::updateTitle()+0xc>
c0010af4:	31 c0                	xor    eax,eax
c0010af6:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010afd:	84 db                	test   bl,bl
c0010aff:	74 06                	je     c0010b07 <VgaText::updateTitle()+0x29>
c0010b01:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b04:	40                   	inc    eax
c0010b05:	eb ef                	jmp    c0010af6 <VgaText::updateTitle()+0x18>
c0010b07:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b0d:	85 c0                	test   eax,eax
c0010b0f:	74 09                	je     c0010b1a <VgaText::updateTitle()+0x3c>
c0010b11:	53                   	push   ebx
c0010b12:	53                   	push   ebx
c0010b13:	51                   	push   ecx
c0010b14:	52                   	push   edx
c0010b15:	ff d0                	call   eax
c0010b17:	83 c4 10             	add    esp,0x10
c0010b1a:	e8 55 fe ff ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0010b1f:	83 c4 58             	add    esp,0x58
c0010b22:	5b                   	pop    ebx
c0010b23:	c3                   	ret    

c0010b24 <VgaText::setTitleTextColour(VgaColour)>:
c0010b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b2c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b32:	eb aa                	jmp    c0010ade <VgaText::updateTitle()>

c0010b34 <VgaText::setTitleColour(VgaColour)>:
c0010b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b3c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b42:	eb 9a                	jmp    c0010ade <VgaText::updateTitle()>

c0010b44 <VgaText::setTitle(char*)>:
c0010b44:	53                   	push   ebx
c0010b45:	83 ec 10             	sub    esp,0x10
c0010b48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b50:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b56:	50                   	push   eax
c0010b57:	e8 d8 fc fe ff       	call   c0000834 <strcpy>
c0010b5c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b60:	83 c4 18             	add    esp,0x18
c0010b63:	5b                   	pop    ebx
c0010b64:	e9 75 ff ff ff       	jmp    c0010ade <VgaText::updateTitle()>
c0010b69:	90                   	nop

c0010b6a <VgaText::decrementCursor(bool)>:
c0010b6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b72:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	74 07                	je     c0010b83 <VgaText::decrementCursor(bool)+0x19>
c0010b7c:	48                   	dec    eax
c0010b7d:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b83:	84 c9                	test   cl,cl
c0010b85:	74 09                	je     c0010b90 <VgaText::decrementCursor(bool)+0x26>
c0010b87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b8b:	e9 56 fa ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c0010b90:	c3                   	ret    
c0010b91:	90                   	nop

c0010b92 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b92:	53                   	push   ebx
c0010b93:	83 ec 08             	sub    esp,0x8
c0010b96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010ba6:	3c 07                	cmp    al,0x7
c0010ba8:	75 2a                	jne    c0010bd4 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010baa:	a1 8c de 02 c0       	mov    eax,ds:0xc002de8c
c0010baf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bb7:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bbf:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bcb:	83 c4 08             	add    esp,0x8
c0010bce:	5b                   	pop    ebx
c0010bcf:	e9 3a 2d 00 00       	jmp    c001390e <Buzzer::beep(int, int, bool)>
c0010bd4:	3c 0d                	cmp    al,0xd
c0010bd6:	75 0c                	jne    c0010be4 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bd8:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010be2:	eb 3b                	jmp    c0010c1f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010be4:	3c 0a                	cmp    al,0xa
c0010be6:	75 40                	jne    c0010c28 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010be8:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010bee:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bf8:	8d 50 01             	lea    edx,[eax+0x1]
c0010bfb:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c01:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c07:	75 12                	jne    c0010c1b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c09:	83 ec 0c             	sub    esp,0xc
c0010c0c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c12:	53                   	push   ebx
c0010c13:	e8 1c fb ff ff       	call   c0010734 <VgaText::scrollScreen()>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c1f:	83 c4 08             	add    esp,0x8
c0010c22:	5b                   	pop    ebx
c0010c23:	e9 be f9 ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c0010c28:	3c 08                	cmp    al,0x8
c0010c2a:	75 31                	jne    c0010c5d <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c2c:	50                   	push   eax
c0010c2d:	50                   	push   eax
c0010c2e:	6a 01                	push   0x1
c0010c30:	53                   	push   ebx
c0010c31:	e8 34 ff ff ff       	call   c0010b6a <VgaText::decrementCursor(bool)>
c0010c36:	5a                   	pop    edx
c0010c37:	59                   	pop    ecx
c0010c38:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c3e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c44:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c4a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c50:	6a 20                	push   0x20
c0010c52:	53                   	push   ebx
c0010c53:	e8 82 fb ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c58:	83 c4 28             	add    esp,0x28
c0010c5b:	5b                   	pop    ebx
c0010c5c:	c3                   	ret    
c0010c5d:	83 ec 08             	sub    esp,0x8
c0010c60:	0f be c0             	movsx  eax,al
c0010c63:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c69:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c6f:	51                   	push   ecx
c0010c70:	52                   	push   edx
c0010c71:	50                   	push   eax
c0010c72:	53                   	push   ebx
c0010c73:	e8 62 fb ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c78:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c7c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c84:	83 c4 28             	add    esp,0x28
c0010c87:	5b                   	pop    ebx
c0010c88:	e9 1b fc ff ff       	jmp    c00108a8 <VgaText::incrementCursor(bool)>
c0010c8d:	90                   	nop

c0010c8e <VgaText::isShowingCursor()>:
c0010c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c92:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010c98:	c3                   	ret    
c0010c99:	90                   	nop

c0010c9a <VgaText::isBlinkDisabled()>:
c0010c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c9e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010ca4:	83 f0 01             	xor    eax,0x1
c0010ca7:	c3                   	ret    

c0010ca8 <VgaText::setCursorHeight(int)>:
c0010ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cb0:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cb6:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cc1:	e9 3a f9 ff ff       	jmp    c0010600 <VgaText::showCursor(bool)>

c0010cc6 <VgaText::getCursorHeight()>:
c0010cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cca:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cd0:	c3                   	ret    

c0010cd1 <setActiveTerminal(VgaText*)>:
c0010cd1:	53                   	push   ebx
c0010cd2:	83 ec 08             	sub    esp,0x8
c0010cd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd9:	85 db                	test   ebx,ebx
c0010cdb:	75 11                	jne    c0010cee <setActiveTerminal(VgaText*)+0x1d>
c0010cdd:	c7 44 24 10 ec 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029dec
c0010ce5:	83 c4 08             	add    esp,0x8
c0010ce8:	5b                   	pop    ebx
c0010ce9:	e9 b1 94 00 00       	jmp    c001a19f <Krnl::panic(char const*)>
c0010cee:	50                   	push   eax
c0010cef:	50                   	push   eax
c0010cf0:	53                   	push   ebx
c0010cf1:	68 fa 9d 02 c0       	push   0xc0029dfa
c0010cf6:	e8 14 1e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0010cfb:	a1 e4 dd 02 c0       	mov    eax,ds:0xc002dde4
c0010d00:	83 c4 10             	add    esp,0x10
c0010d03:	85 c0                	test   eax,eax
c0010d05:	74 0c                	je     c0010d13 <setActiveTerminal(VgaText*)+0x42>
c0010d07:	83 ec 0c             	sub    esp,0xc
c0010d0a:	50                   	push   eax
c0010d0b:	e8 d6 f8 ff ff       	call   c00105e6 <VgaText::updateCursor()>
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	89 1d e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,ebx
c0010d19:	51                   	push   ecx
c0010d1a:	51                   	push   ecx
c0010d1b:	53                   	push   ebx
c0010d1c:	68 12 9e 02 c0       	push   0xc0029e12
c0010d21:	e8 e9 1d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0010d26:	83 c4 0c             	add    esp,0xc
c0010d29:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d2f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d35:	53                   	push   ebx
c0010d36:	e8 17 fb ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0010d3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d3e:	e8 57 ff ff ff       	call   c0010c9a <VgaText::isBlinkDisabled()>
c0010d43:	5a                   	pop    edx
c0010d44:	0f b6 c0             	movzx  eax,al
c0010d47:	59                   	pop    ecx
c0010d48:	50                   	push   eax
c0010d49:	53                   	push   ebx
c0010d4a:	e8 c1 f8 ff ff       	call   c0010610 <VgaText::disableBlink(bool)>
c0010d4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d52:	e8 6f ff ff ff       	call   c0010cc6 <VgaText::getCursorHeight()>
c0010d57:	5a                   	pop    edx
c0010d58:	59                   	pop    ecx
c0010d59:	50                   	push   eax
c0010d5a:	53                   	push   ebx
c0010d5b:	e8 48 ff ff ff       	call   c0010ca8 <VgaText::setCursorHeight(int)>
c0010d60:	83 c4 10             	add    esp,0x10
c0010d63:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d6a:	75 0a                	jne    c0010d76 <setActiveTerminal(VgaText*)+0xa5>
c0010d6c:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d7a:	83 c4 08             	add    esp,0x8
c0010d7d:	5b                   	pop    ebx
c0010d7e:	e9 0f f8 ff ff       	jmp    c0010592 <VgaText::load()>

c0010d83 <doTerminalCycle()>:
c0010d83:	83 ec 18             	sub    esp,0x18
c0010d86:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c0010d8b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010d91:	50                   	push   eax
c0010d92:	a3 e0 dd 02 c0       	mov    ds:0xc002dde0,eax
c0010d97:	e8 35 ff ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c0010d9c:	83 c4 1c             	add    esp,0x1c
c0010d9f:	c3                   	ret    

c0010da0 <VgaText::doUpdate()>:
c0010da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da4:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010daa:	85 c0                	test   eax,eax
c0010dac:	74 02                	je     c0010db0 <VgaText::doUpdate()+0x10>
c0010dae:	ff e0                	jmp    eax
c0010db0:	c3                   	ret    
c0010db1:	90                   	nop

c0010db2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010db2:	55                   	push   ebp
c0010db3:	57                   	push   edi
c0010db4:	56                   	push   esi
c0010db5:	53                   	push   ebx
c0010db6:	83 ec 1c             	sub    esp,0x1c
c0010db9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dbd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dc2:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010dc9:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dcc:	50                   	push   eax
c0010dcd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dd2:	50                   	push   eax
c0010dd3:	e8 4a f9 ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dd8:	59                   	pop    ecx
c0010dd9:	0f b6 c0             	movzx  eax,al
c0010ddc:	5b                   	pop    ebx
c0010ddd:	31 c9                	xor    ecx,ecx
c0010ddf:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010de7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010deb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010df1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010df5:	0f b7 db             	movzx  ebx,bx
c0010df8:	01 db                	add    ebx,ebx
c0010dfa:	01 fb                	add    ebx,edi
c0010dfc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010dff:	84 c0                	test   al,al
c0010e01:	0f 84 38 01 00 00    	je     c0010f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e07:	3c 0d                	cmp    al,0xd
c0010e09:	75 0f                	jne    c0010e1a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e0b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e15:	e9 1f 01 00 00       	jmp    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e1a:	3c 0a                	cmp    al,0xa
c0010e1c:	75 5b                	jne    c0010e79 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e1e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e24:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e2e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e31:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e37:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e3d:	75 12                	jne    c0010e51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e48:	55                   	push   ebp
c0010e49:	e8 e6 f8 ff ff       	call   c0010734 <VgaText::scrollScreen()>
c0010e4e:	83 c4 10             	add    esp,0x10
c0010e51:	83 ec 0c             	sub    esp,0xc
c0010e54:	55                   	push   ebp
c0010e55:	e8 8c f7 ff ff       	call   c00105e6 <VgaText::updateCursor()>
c0010e5a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e6b:	31 c9                	xor    ecx,ecx
c0010e6d:	0f b7 db             	movzx  ebx,bx
c0010e70:	01 db                	add    ebx,ebx
c0010e72:	01 fb                	add    ebx,edi
c0010e74:	e9 c0 00 00 00       	jmp    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e79:	3c 08                	cmp    al,0x8
c0010e7b:	75 4e                	jne    c0010ecb <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e7d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e81:	53                   	push   ebx
c0010e82:	53                   	push   ebx
c0010e83:	6a 01                	push   0x1
c0010e85:	55                   	push   ebp
c0010e86:	e8 df fc ff ff       	call   c0010b6a <VgaText::decrementCursor(bool)>
c0010e8b:	58                   	pop    eax
c0010e8c:	5a                   	pop    edx
c0010e8d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010e93:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010e99:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010e9f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ea5:	6a 20                	push   0x20
c0010ea7:	55                   	push   ebp
c0010ea8:	e8 2d f9 ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ead:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eb5:	83 c4 20             	add    esp,0x20
c0010eb8:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ebe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ec2:	0f b7 db             	movzx  ebx,bx
c0010ec5:	01 db                	add    ebx,ebx
c0010ec7:	01 fb                	add    ebx,edi
c0010ec9:	eb 6e                	jmp    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ecb:	51                   	push   ecx
c0010ecc:	51                   	push   ecx
c0010ecd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ed1:	50                   	push   eax
c0010ed2:	e8 f1 f8 ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ed7:	83 c4 10             	add    esp,0x10
c0010eda:	66 89 03             	mov    WORD PTR [ebx],ax
c0010edd:	39 2d e4 dd 02 c0    	cmp    DWORD PTR ds:0xc002dde4,ebp
c0010ee3:	75 2a                	jne    c0010f0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ee5:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010eeb:	85 c0                	test   eax,eax
c0010eed:	74 20                	je     c0010f0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010eef:	52                   	push   edx
c0010ef0:	52                   	push   edx
c0010ef1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ef7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010efd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f01:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f05:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f08:	51                   	push   ecx
c0010f09:	55                   	push   ebp
c0010f0a:	ff d0                	call   eax
c0010f0c:	83 c4 20             	add    esp,0x20
c0010f0f:	83 c3 02             	add    ebx,0x2
c0010f12:	50                   	push   eax
c0010f13:	50                   	push   eax
c0010f14:	6a 00                	push   0x0
c0010f16:	55                   	push   ebp
c0010f17:	e8 8c f9 ff ff       	call   c00108a8 <VgaText::incrementCursor(bool)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f26:	75 0f                	jne    c0010f37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f28:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f30:	0f b7 db             	movzx  ebx,bx
c0010f33:	01 db                	add    ebx,ebx
c0010f35:	01 fb                	add    ebx,edi
c0010f37:	b1 01                	mov    cl,0x1
c0010f39:	46                   	inc    esi
c0010f3a:	e9 bd fe ff ff       	jmp    c0010dfc <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f3f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f43:	83 ec 0c             	sub    esp,0xc
c0010f46:	55                   	push   ebp
c0010f47:	e8 9a f6 ff ff       	call   c00105e6 <VgaText::updateCursor()>
c0010f4c:	83 c4 10             	add    esp,0x10
c0010f4f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f53:	84 c9                	test   cl,cl
c0010f55:	74 0c                	je     c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f57:	83 ec 0c             	sub    esp,0xc
c0010f5a:	55                   	push   ebp
c0010f5b:	e8 40 fe ff ff       	call   c0010da0 <VgaText::doUpdate()>
c0010f60:	83 c4 10             	add    esp,0x10
c0010f63:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f6a:	83 c4 1c             	add    esp,0x1c
c0010f6d:	5b                   	pop    ebx
c0010f6e:	5e                   	pop    esi
c0010f6f:	5f                   	pop    edi
c0010f70:	5d                   	pop    ebp
c0010f71:	c3                   	ret    

c0010f72 <VgaText::clearScreen()>:
c0010f72:	57                   	push   edi
c0010f73:	56                   	push   esi
c0010f74:	31 f6                	xor    esi,esi
c0010f76:	53                   	push   ebx
c0010f77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f7b:	52                   	push   edx
c0010f7c:	6a 00                	push   0x0
c0010f7e:	6a 00                	push   0x0
c0010f80:	53                   	push   ebx
c0010f81:	e8 cc f8 ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0010f86:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010f96:	7e 26                	jle    c0010fbe <VgaText::clearScreen()+0x4c>
c0010f98:	31 ff                	xor    edi,edi
c0010f9a:	50                   	push   eax
c0010f9b:	50                   	push   eax
c0010f9c:	56                   	push   esi
c0010f9d:	57                   	push   edi
c0010f9e:	47                   	inc    edi
c0010f9f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fa5:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fab:	6a 20                	push   0x20
c0010fad:	53                   	push   ebx
c0010fae:	e8 27 f8 ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fb3:	83 c4 20             	add    esp,0x20
c0010fb6:	83 ff 50             	cmp    edi,0x50
c0010fb9:	75 df                	jne    c0010f9a <VgaText::clearScreen()+0x28>
c0010fbb:	46                   	inc    esi
c0010fbc:	eb d2                	jmp    c0010f90 <VgaText::clearScreen()+0x1e>
c0010fbe:	83 ec 0c             	sub    esp,0xc
c0010fc1:	53                   	push   ebx
c0010fc2:	e8 d9 fd ff ff       	call   c0010da0 <VgaText::doUpdate()>
c0010fc7:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	5b                   	pop    ebx
c0010fd2:	5e                   	pop    esi
c0010fd3:	5f                   	pop    edi
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop

c0010fd6 <VgaText::putchar(char)>:
c0010fd6:	56                   	push   esi
c0010fd7:	53                   	push   ebx
c0010fd8:	83 ec 14             	sub    esp,0x14
c0010fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fdf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fe3:	3c 5b                	cmp    al,0x5b
c0010fe5:	75 21                	jne    c0011008 <VgaText::putchar(char)+0x32>
c0010fe7:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010fee:	74 28                	je     c0011018 <VgaText::putchar(char)+0x42>
c0010ff0:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ff9:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011003:	e9 e2 00 00 00       	jmp    c00110ea <VgaText::putchar(char)+0x114>
c0011008:	3c 1b                	cmp    al,0x1b
c001100a:	75 0c                	jne    c0011018 <VgaText::putchar(char)+0x42>
c001100c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011013:	e9 d2 00 00 00       	jmp    c00110ea <VgaText::putchar(char)+0x114>
c0011018:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001101e:	84 c9                	test   cl,cl
c0011020:	0f 84 ab 00 00 00    	je     c00110d1 <VgaText::putchar(char)+0xfb>
c0011026:	8d 50 c0             	lea    edx,[eax-0x40]
c0011029:	80 fa 3e             	cmp    dl,0x3e
c001102c:	0f 87 82 00 00 00    	ja     c00110b4 <VgaText::putchar(char)+0xde>
c0011032:	3c 6d                	cmp    al,0x6d
c0011034:	75 4d                	jne    c0011083 <VgaText::putchar(char)+0xad>
c0011036:	31 f6                	xor    esi,esi
c0011038:	31 d2                	xor    edx,edx
c001103a:	31 c0                	xor    eax,eax
c001103c:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011042:	7e 30                	jle    c0011074 <VgaText::putchar(char)+0x9e>
c0011044:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001104c:	80 fa 3b             	cmp    dl,0x3b
c001104f:	75 17                	jne    c0011068 <VgaText::putchar(char)+0x92>
c0011051:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011055:	50                   	push   eax
c0011056:	53                   	push   ebx
c0011057:	e8 ee f5 ff ff       	call   c001064a <VgaText::doANSI_SGR(int)>
c001105c:	59                   	pop    ecx
c001105d:	31 d2                	xor    edx,edx
c001105f:	58                   	pop    eax
c0011060:	31 c0                	xor    eax,eax
c0011062:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011066:	eb 09                	jmp    c0011071 <VgaText::putchar(char)+0x9b>
c0011068:	6b c0 0a             	imul   eax,eax,0xa
c001106b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001106f:	88 ca                	mov    dl,cl
c0011071:	46                   	inc    esi
c0011072:	eb c8                	jmp    c001103c <VgaText::putchar(char)+0x66>
c0011074:	84 d2                	test   dl,dl
c0011076:	74 31                	je     c00110a9 <VgaText::putchar(char)+0xd3>
c0011078:	50                   	push   eax
c0011079:	53                   	push   ebx
c001107a:	e8 cb f5 ff ff       	call   c001064a <VgaText::doANSI_SGR(int)>
c001107f:	58                   	pop    eax
c0011080:	5a                   	pop    edx
c0011081:	eb 26                	jmp    c00110a9 <VgaText::putchar(char)+0xd3>
c0011083:	3c 4a                	cmp    al,0x4a
c0011085:	75 22                	jne    c00110a9 <VgaText::putchar(char)+0xd3>
c0011087:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001108e:	75 19                	jne    c00110a9 <VgaText::putchar(char)+0xd3>
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	53                   	push   ebx
c0011094:	e8 d9 fe ff ff       	call   c0010f72 <VgaText::clearScreen()>
c0011099:	83 c4 0c             	add    esp,0xc
c001109c:	6a 00                	push   0x0
c001109e:	6a 00                	push   0x0
c00110a0:	53                   	push   ebx
c00110a1:	e8 ac f7 ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110b2:	eb 36                	jmp    c00110ea <VgaText::putchar(char)+0x114>
c00110b4:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110ba:	83 fa 0e             	cmp    edx,0xe
c00110bd:	7f 2b                	jg     c00110ea <VgaText::putchar(char)+0x114>
c00110bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110c2:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110c8:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110cf:	eb 19                	jmp    c00110ea <VgaText::putchar(char)+0x114>
c00110d1:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110d7:	0f be c0             	movsx  eax,al
c00110da:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110e0:	50                   	push   eax
c00110e1:	53                   	push   ebx
c00110e2:	e8 ab fa ff ff       	call   c0010b92 <VgaText::putchar(char, VgaColour, VgaColour)>
c00110e7:	83 c4 10             	add    esp,0x10
c00110ea:	83 c4 14             	add    esp,0x14
c00110ed:	5b                   	pop    ebx
c00110ee:	5e                   	pop    esi
c00110ef:	c3                   	ret    

c00110f0 <VgaText::puts(char const*)>:
c00110f0:	53                   	push   ebx
c00110f1:	83 ec 08             	sub    esp,0x8
c00110f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110f8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00110fb:	84 c0                	test   al,al
c00110fd:	74 12                	je     c0011111 <VgaText::puts(char const*)+0x21>
c00110ff:	43                   	inc    ebx
c0011100:	51                   	push   ecx
c0011101:	51                   	push   ecx
c0011102:	50                   	push   eax
c0011103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011107:	e8 ca fe ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c001110c:	83 c4 10             	add    esp,0x10
c001110f:	eb e7                	jmp    c00110f8 <VgaText::puts(char const*)+0x8>
c0011111:	83 c4 08             	add    esp,0x8
c0011114:	5b                   	pop    ebx
c0011115:	c3                   	ret    

c0011116 <VgaText::putx(unsigned int)>:
c0011116:	57                   	push   edi
c0011117:	b9 11 00 00 00       	mov    ecx,0x11
c001111c:	56                   	push   esi
c001111d:	be 2e 9e 02 c0       	mov    esi,0xc0029e2e
c0011122:	53                   	push   ebx
c0011123:	83 ec 20             	sub    esp,0x20
c0011126:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001112a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001112e:	fc                   	cld    
c001112f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011131:	be 08 00 00 00       	mov    esi,0x8
c0011136:	50                   	push   eax
c0011137:	50                   	push   eax
c0011138:	89 d8                	mov    eax,ebx
c001113a:	c1 e3 04             	shl    ebx,0x4
c001113d:	c1 e8 1c             	shr    eax,0x1c
c0011140:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011145:	50                   	push   eax
c0011146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001114a:	e8 87 fe ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c001114f:	83 c4 10             	add    esp,0x10
c0011152:	4e                   	dec    esi
c0011153:	75 e1                	jne    c0011136 <VgaText::putx(unsigned int)+0x20>
c0011155:	83 c4 20             	add    esp,0x20
c0011158:	5b                   	pop    ebx
c0011159:	5e                   	pop    esi
c001115a:	5f                   	pop    edi
c001115b:	c3                   	ret    

c001115c <VgaText::VgaText(char const*)>:
c001115c:	57                   	push   edi
c001115d:	56                   	push   esi
c001115e:	53                   	push   ebx
c001115f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011163:	83 ec 08             	sub    esp,0x8
c0011166:	6a 00                	push   0x0
c0011168:	50                   	push   eax
c0011169:	e8 6e 05 00 00       	call   c00116dc <UnixFile::UnixFile(int)>
c001116e:	83 c4 10             	add    esp,0x10
c0011171:	ba 94 9e 02 c0       	mov    edx,0xc0029e94
c0011176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117a:	89 10                	mov    DWORD PTR [eax],edx
c001117c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011180:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001118a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a7:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b2:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c0:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ce:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d9:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e4:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00111ea:	bb c0 dd 02 c0       	mov    ebx,0xc002ddc0
c00111ef:	b8 08 00 00 00       	mov    eax,0x8
c00111f4:	fc                   	cld    
c00111f5:	89 d7                	mov    edi,edx
c00111f7:	89 de                	mov    esi,ebx
c00111f9:	89 c1                	mov    ecx,eax
c00111fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011201:	05 1e 10 00 00       	add    eax,0x101e
c0011206:	83 ec 08             	sub    esp,0x8
c0011209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120d:	50                   	push   eax
c001120e:	e8 21 f6 fe ff       	call   c0000834 <strcpy>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011228:	83 c0 0c             	add    eax,0xc
c001122b:	83 ec 04             	sub    esp,0x4
c001122e:	68 00 0f 00 00       	push   0xf00
c0011233:	6a 00                	push   0x0
c0011235:	50                   	push   eax
c0011236:	e8 3d f5 fe ff       	call   c0000778 <memset>
c001123b:	83 c4 10             	add    esp,0x10
c001123e:	83 ec 04             	sub    esp,0x4
c0011241:	6a 00                	push   0x0
c0011243:	6a 07                	push   0x7
c0011245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011249:	e8 b4 f4 ff ff       	call   c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	83 ec 08             	sub    esp,0x8
c0011254:	6a 02                	push   0x2
c0011256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001125a:	e8 49 fa ff ff       	call   c0010ca8 <VgaText::setCursorHeight(int)>
c001125f:	83 c4 10             	add    esp,0x10
c0011262:	83 ec 04             	sub    esp,0x4
c0011265:	6a 00                	push   0x0
c0011267:	6a 00                	push   0x0
c0011269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126d:	e8 e0 f5 ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	83 ec 08             	sub    esp,0x8
c0011278:	6a 01                	push   0x1
c001127a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001127e:	e8 7d f3 ff ff       	call   c0010600 <VgaText::showCursor(bool)>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	6a 01                	push   0x1
c001128b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128f:	e8 7c f3 ff ff       	call   c0010610 <VgaText::disableBlink(bool)>
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	83 ec 0c             	sub    esp,0xc
c001129a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129e:	e8 cf fc ff ff       	call   c0010f72 <VgaText::clearScreen()>
c00112a3:	83 c4 10             	add    esp,0x10
c00112a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112aa:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b5:	05 9e 10 00 00       	add    eax,0x109e
c00112ba:	83 ec 04             	sub    esp,0x4
c00112bd:	68 96 00 00 00       	push   0x96
c00112c2:	6a 00                	push   0x0
c00112c4:	50                   	push   eax
c00112c5:	e8 ae f4 fe ff       	call   c0000778 <memset>
c00112ca:	83 c4 10             	add    esp,0x10
c00112cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d1:	05 34 11 00 00       	add    eax,0x1134
c00112d6:	83 ec 04             	sub    esp,0x4
c00112d9:	68 2c 01 00 00       	push   0x12c
c00112de:	6a 00                	push   0x0
c00112e0:	50                   	push   eax
c00112e1:	e8 92 f4 fe ff       	call   c0000778 <memset>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	90                   	nop
c00112ea:	5b                   	pop    ebx
c00112eb:	5e                   	pop    esi
c00112ec:	5f                   	pop    edi
c00112ed:	c3                   	ret    

c00112ee <VgaText::receiveKey(unsigned char)>:
c00112ee:	55                   	push   ebp
c00112ef:	57                   	push   edi
c00112f0:	56                   	push   esi
c00112f1:	53                   	push   ebx
c00112f2:	83 ec 1c             	sub    esp,0x1c
c00112f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112fd:	84 db                	test   bl,bl
c00112ff:	0f 84 c9 00 00 00    	je     c00113ce <VgaText::receiveKey(unsigned char)+0xe0>
c0011305:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001130b:	80 fb 08             	cmp    bl,0x8
c001130e:	75 2c                	jne    c001133c <VgaText::receiveKey(unsigned char)+0x4e>
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	57                   	push   edi
c0011314:	e8 7b f4 fe ff       	call   c0000794 <strlen>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	85 c0                	test   eax,eax
c001131e:	74 41                	je     c0011361 <VgaText::receiveKey(unsigned char)+0x73>
c0011320:	50                   	push   eax
c0011321:	50                   	push   eax
c0011322:	6a 08                	push   0x8
c0011324:	56                   	push   esi
c0011325:	e8 ac fc ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c001132a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001132d:	e8 62 f4 fe ff       	call   c0000794 <strlen>
c0011332:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001133a:	eb 22                	jmp    c001135e <VgaText::receiveKey(unsigned char)+0x70>
c001133c:	0f be c3             	movsx  eax,bl
c001133f:	52                   	push   edx
c0011340:	52                   	push   edx
c0011341:	50                   	push   eax
c0011342:	56                   	push   esi
c0011343:	e8 8e fc ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c0011348:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001134c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011351:	59                   	pop    ecx
c0011352:	5d                   	pop    ebp
c0011353:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011357:	50                   	push   eax
c0011358:	57                   	push   edi
c0011359:	e8 16 f6 fe ff       	call   c0000974 <strcat>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011368:	75 05                	jne    c001136f <VgaText::receiveKey(unsigned char)+0x81>
c001136a:	80 fb 0a             	cmp    bl,0xa
c001136d:	75 53                	jne    c00113c2 <VgaText::receiveKey(unsigned char)+0xd4>
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011378:	53                   	push   ebx
c0011379:	e8 16 f4 fe ff       	call   c0000794 <strlen>
c001137e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011381:	89 c5                	mov    ebp,eax
c0011383:	e8 0c f4 fe ff       	call   c0000794 <strlen>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001138f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011394:	76 10                	jbe    c00113a6 <VgaText::receiveKey(unsigned char)+0xb8>
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	68 3f 9e 02 c0       	push   0xc0029e3f
c001139e:	e8 fc 8d 00 00       	call   c001a19f <Krnl::panic(char const*)>
c00113a3:	83 c4 10             	add    esp,0x10
c00113a6:	50                   	push   eax
c00113a7:	50                   	push   eax
c00113a8:	57                   	push   edi
c00113a9:	53                   	push   ebx
c00113aa:	e8 c5 f5 fe ff       	call   c0000974 <strcat>
c00113af:	83 c4 0c             	add    esp,0xc
c00113b2:	68 96 00 00 00       	push   0x96
c00113b7:	6a 00                	push   0x0
c00113b9:	57                   	push   edi
c00113ba:	e8 b9 f3 fe ff       	call   c0000778 <memset>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	56                   	push   esi
c00113c6:	e8 d5 f9 ff ff       	call   c0010da0 <VgaText::doUpdate()>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	83 c4 1c             	add    esp,0x1c
c00113d1:	5b                   	pop    ebx
c00113d2:	5e                   	pop    esi
c00113d3:	5f                   	pop    edi
c00113d4:	5d                   	pop    ebp
c00113d5:	c3                   	ret    

c00113d6 <VgaText::write(unsigned long long, void*, int*)>:
c00113d6:	55                   	push   ebp
c00113d7:	57                   	push   edi
c00113d8:	56                   	push   esi
c00113d9:	53                   	push   ebx
c00113da:	83 ec 0c             	sub    esp,0xc
c00113dd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113e1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113e9:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00113f0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113f3:	39 eb                	cmp    ebx,ebp
c00113f5:	74 13                	je     c001140a <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113f7:	43                   	inc    ebx
c00113f8:	50                   	push   eax
c00113f9:	50                   	push   eax
c00113fa:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113fe:	50                   	push   eax
c00113ff:	56                   	push   esi
c0011400:	e8 d1 fb ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	eb e9                	jmp    c00113f3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011414:	56                   	push   esi
c0011415:	e8 86 f9 ff ff       	call   c0010da0 <VgaText::doUpdate()>
c001141a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001141e:	89 38                	mov    DWORD PTR [eax],edi
c0011420:	83 c4 1c             	add    esp,0x1c
c0011423:	31 c0                	xor    eax,eax
c0011425:	5b                   	pop    ebx
c0011426:	5e                   	pop    esi
c0011427:	5f                   	pop    edi
c0011428:	5d                   	pop    ebp
c0011429:	c3                   	ret    

c001142a <newTerminal(char*)>:
c001142a:	83 ec 28             	sub    esp,0x28
c001142d:	68 60 12 00 00       	push   0x1260
c0011432:	e8 09 e4 ff ff       	call   c000f840 <malloc>
c0011437:	5a                   	pop    edx
c0011438:	59                   	pop    ecx
c0011439:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001143d:	50                   	push   eax
c001143e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011442:	e8 15 fd ff ff       	call   c001115c <VgaText::VgaText(char const*)>
c0011447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144b:	83 c4 2c             	add    esp,0x2c
c001144e:	c3                   	ret    
c001144f:	90                   	nop

c0011450 <TSS::TSS()>:
c0011450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001145b:	90                   	nop
c001145c:	c3                   	ret    
c001145d:	90                   	nop

c001145e <TSS::setESP(unsigned long)>:
c001145e:	55                   	push   ebp
c001145f:	89 e5                	mov    ebp,esp
c0011461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011464:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011467:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001146a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001146d:	90                   	nop
c001146e:	5d                   	pop    ebp
c001146f:	c3                   	ret    

c0011470 <TSS::flush()>:
c0011470:	55                   	push   ebp
c0011471:	89 e5                	mov    ebp,esp
c0011473:	83 ec 10             	sub    esp,0x10
c0011476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011479:	8b 00                	mov    eax,DWORD PTR [eax]
c001147b:	83 c8 03             	or     eax,0x3
c001147e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011482:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011486:	66 89 d0             	mov    ax,dx
c0011489:	0f 00 d8             	ltr    ax
c001148c:	90                   	nop
c001148d:	c9                   	leave  
c001148e:	c3                   	ret    
c001148f:	90                   	nop

c0011490 <TSS::setup(unsigned long, unsigned long)>:
c0011490:	55                   	push   ebp
c0011491:	89 e5                	mov    ebp,esp
c0011493:	83 ec 18             	sub    esp,0x18
c0011496:	83 ec 0c             	sub    esp,0xc
c0011499:	6a 68                	push   0x68
c001149b:	e8 a0 e3 ff ff       	call   c000f840 <malloc>
c00114a0:	83 c4 10             	add    esp,0x10
c00114a3:	89 c2                	mov    edx,eax
c00114a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b1:	83 ec 04             	sub    esp,0x4
c00114b4:	6a 68                	push   0x68
c00114b6:	6a 00                	push   0x0
c00114b8:	50                   	push   eax
c00114b9:	e8 ba f2 fe ff       	call   c0000778 <memset>
c00114be:	83 c4 10             	add    esp,0x10
c00114c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114eb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011503:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011527:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011536:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011542:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011555:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011558:	0f 20 da             	mov    edx,cr3
c001155b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001155e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011561:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156a:	83 ec 08             	sub    esp,0x8
c001156d:	50                   	push   eax
c001156e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011571:	50                   	push   eax
c0011572:	e8 a7 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011577:	83 c4 10             	add    esp,0x10
c001157a:	83 ec 08             	sub    esp,0x8
c001157d:	6a 68                	push   0x68
c001157f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011582:	50                   	push   eax
c0011583:	e8 b2 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011588:	83 c4 10             	add    esp,0x10
c001158b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001158f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011592:	83 e0 0f             	and    eax,0xf
c0011595:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011598:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001159b:	83 c8 40             	or     eax,0x40
c001159e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115a1:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00115a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115ac:	05 78 01 00 00       	add    eax,0x178
c00115b1:	83 ec 04             	sub    esp,0x4
c00115b4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115b7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115ba:	50                   	push   eax
c00115bb:	e8 ae da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115c0:	83 c4 10             	add    esp,0x10
c00115c3:	89 c2                	mov    edx,eax
c00115c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c8:	89 10                	mov    DWORD PTR [eax],edx
c00115ca:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00115cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d5:	05 78 01 00 00       	add    eax,0x178
c00115da:	83 ec 0c             	sub    esp,0xc
c00115dd:	50                   	push   eax
c00115de:	e8 cf da ff ff       	call   c000f0b2 <GDT::flush()>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00115eb:	83 ec 08             	sub    esp,0x8
c00115ee:	50                   	push   eax
c00115ef:	68 a8 9e 02 c0       	push   0xc0029ea8
c00115f4:	e8 16 15 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00115f9:	83 c4 10             	add    esp,0x10
c00115fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011601:	c9                   	leave  
c0011602:	c3                   	ret    
c0011603:	90                   	nop

c0011604 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001160c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001160f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011614:	75 08                	jne    c001161e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011616:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001161c:	eb 38                	jmp    c0011656 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001161e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011623:	75 17                	jne    c001163c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011625:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001162a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001162d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011633:	8b 10                	mov    edx,DWORD PTR [eax]
c0011635:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011639:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001163c:	89 c1                	mov    ecx,eax
c001163e:	83 e1 fd             	and    ecx,0xfffffffd
c0011641:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011647:	74 cd                	je     c0011616 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011649:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001164e:	83 e0 ef             	and    eax,0xffffffef
c0011651:	83 f8 08             	cmp    eax,0x8
c0011654:	76 c0                	jbe    c0011616 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011656:	31 c0                	xor    eax,eax
c0011658:	c3                   	ret    
c0011659:	90                   	nop

c001165a <ReservedFilename::isAtty()>:
c001165a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001165e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011661:	31 c0                	xor    eax,eax
c0011663:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011669:	74 09                	je     c0011674 <ReservedFilename::isAtty()+0x1a>
c001166b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011671:	0f 94 c0             	sete   al
c0011674:	c3                   	ret    
c0011675:	90                   	nop

c0011676 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001167e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011681:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011685:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001168a:	75 08                	jne    c0011694 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001168c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011692:	eb 3d                	jmp    c00116d1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011694:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011699:	75 17                	jne    c00116b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001169b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116a3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116af:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116b2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116b7:	75 04                	jne    c00116bd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116b9:	89 0a                	mov    DWORD PTR [edx],ecx
c00116bb:	eb 14                	jmp    c00116d1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116bd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116c2:	74 c8                	je     c001168c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116c4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116c9:	83 e0 ef             	and    eax,0xffffffef
c00116cc:	83 f8 08             	cmp    eax,0x8
c00116cf:	76 bb                	jbe    c001168c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116d1:	31 c0                	xor    eax,eax
c00116d3:	c3                   	ret    

c00116d4 <UnixFile::getFileDescriptor()>:
c00116d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116db:	c3                   	ret    

c00116dc <UnixFile::UnixFile(int)>:
c00116dc:	53                   	push   ebx
c00116dd:	83 ec 28             	sub    esp,0x28
c00116e0:	ba 94 9f 02 c0       	mov    edx,0xc0029f94
c00116e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e9:	89 10                	mov    DWORD PTR [eax],edx
c00116eb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116f3:	0f 8f 8c 01 00 00    	jg     c0011885 <UnixFile::UnixFile(int)+0x1a9>
c00116f9:	a1 a0 cc 02 c0       	mov    eax,ds:0xc002cca0
c00116fe:	8d 50 01             	lea    edx,[eax+0x1]
c0011701:	89 15 a0 cc 02 c0    	mov    DWORD PTR ds:0xc002cca0,edx
c0011707:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001170b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001170e:	83 ec 08             	sub    esp,0x8
c0011711:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011715:	68 78 de 02 c0       	push   0xc002de78
c001171a:	e8 61 6a 01 00       	call   c0028180 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	a0 74 de 02 c0       	mov    al,ds:0xc002de74
c0011727:	83 f0 01             	xor    eax,0x1
c001172a:	84 c0                	test   al,al
c001172c:	0f 84 54 01 00 00    	je     c0011886 <UnixFile::UnixFile(int)+0x1aa>
c0011732:	c6 05 74 de 02 c0 01 	mov    BYTE PTR ds:0xc002de74,0x1
c0011739:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011741:	83 ec 0c             	sub    esp,0xc
c0011744:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011748:	e8 f3 e0 ff ff       	call   c000f840 <malloc>
c001174d:	83 c4 10             	add    esp,0x10
c0011750:	89 c3                	mov    ebx,eax
c0011752:	83 ec 08             	sub    esp,0x8
c0011755:	68 03 ff ff 0f       	push   0xfffff03
c001175a:	53                   	push   ebx
c001175b:	e8 2c 01 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c0011760:	83 c4 10             	add    esp,0x10
c0011763:	89 1d 6c de 02 c0    	mov    DWORD PTR ds:0xc002de6c,ebx
c0011769:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011771:	83 ec 0c             	sub    esp,0xc
c0011774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011778:	e8 c3 e0 ff ff       	call   c000f840 <malloc>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	89 c3                	mov    ebx,eax
c0011782:	83 ec 08             	sub    esp,0x8
c0011785:	68 01 ff ff 0f       	push   0xfffff01
c001178a:	53                   	push   ebx
c001178b:	e8 fc 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c0011790:	83 c4 10             	add    esp,0x10
c0011793:	89 1d 70 de 02 c0    	mov    DWORD PTR ds:0xc002de70,ebx
c0011799:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117a1:	83 ec 0c             	sub    esp,0xc
c00117a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117a8:	e8 93 e0 ff ff       	call   c000f840 <malloc>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	89 c3                	mov    ebx,eax
c00117b2:	83 ec 08             	sub    esp,0x8
c00117b5:	68 00 ff ff 0f       	push   0xfffff00
c00117ba:	53                   	push   ebx
c00117bb:	e8 cc 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	89 1d 64 de 02 c0    	mov    DWORD PTR ds:0xc002de64,ebx
c00117c9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117d1:	83 ec 0c             	sub    esp,0xc
c00117d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117d8:	e8 63 e0 ff ff       	call   c000f840 <malloc>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	89 c3                	mov    ebx,eax
c00117e2:	83 ec 08             	sub    esp,0x8
c00117e5:	68 02 ff ff 0f       	push   0xfffff02
c00117ea:	53                   	push   ebx
c00117eb:	e8 9c 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c00117f0:	83 c4 10             	add    esp,0x10
c00117f3:	89 1d 68 de 02 c0    	mov    DWORD PTR ds:0xc002de68,ebx
c00117f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011801:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011806:	7f 7e                	jg     c0011886 <UnixFile::UnixFile(int)+0x1aa>
c0011808:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011810:	83 ec 0c             	sub    esp,0xc
c0011813:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011817:	e8 24 e0 ff ff       	call   c000f840 <malloc>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 c3                	mov    ebx,eax
c0011821:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011825:	05 10 ff ff 0f       	add    eax,0xfffff10
c001182a:	83 ec 08             	sub    esp,0x8
c001182d:	50                   	push   eax
c001182e:	53                   	push   ebx
c001182f:	e8 58 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c0011834:	83 c4 10             	add    esp,0x10
c0011837:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001183b:	89 1c 85 40 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21c0],ebx
c0011842:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001184a:	83 ec 0c             	sub    esp,0xc
c001184d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011851:	e8 ea df ff ff       	call   c000f840 <malloc>
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	89 c3                	mov    ebx,eax
c001185b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001185f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011864:	83 ec 08             	sub    esp,0x8
c0011867:	50                   	push   eax
c0011868:	53                   	push   ebx
c0011869:	e8 1e 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011875:	89 1c 85 00 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2200],ebx
c001187c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011880:	e9 7c ff ff ff       	jmp    c0011801 <UnixFile::UnixFile(int)+0x125>
c0011885:	90                   	nop
c0011886:	83 c4 28             	add    esp,0x28
c0011889:	5b                   	pop    ebx
c001188a:	c3                   	ret    
c001188b:	90                   	nop

c001188c <ReservedFilename::ReservedFilename(int)>:
c001188c:	83 ec 0c             	sub    esp,0xc
c001188f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011893:	83 ec 08             	sub    esp,0x8
c0011896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001189a:	50                   	push   eax
c001189b:	e8 3c fe ff ff       	call   c00116dc <UnixFile::UnixFile(int)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	ba b0 9f 02 c0       	mov    edx,0xc0029fb0
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	89 10                	mov    DWORD PTR [eax],edx
c00118ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118b6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118b9:	90                   	nop
c00118ba:	83 c4 0c             	add    esp,0xc
c00118bd:	c3                   	ret    

c00118be <UnixFile::~UnixFile()>:
c00118be:	83 ec 1c             	sub    esp,0x1c
c00118c1:	ba 94 9f 02 c0       	mov    edx,0xc0029f94
c00118c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ca:	89 10                	mov    DWORD PTR [eax],edx
c00118cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118d8:	7f 73                	jg     c001194d <UnixFile::~UnixFile()+0x8f>
c00118da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118e2:	83 ec 0c             	sub    esp,0xc
c00118e5:	68 78 de 02 c0       	push   0xc002de78
c00118ea:	e8 65 69 01 00       	call   c0028254 <LinkedList<UnixFile>::getFirstElement()>
c00118ef:	83 c4 10             	add    esp,0x10
c00118f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118f6:	83 ec 0c             	sub    esp,0xc
c00118f9:	68 78 de 02 c0       	push   0xc002de78
c00118fe:	e8 59 69 01 00       	call   c002825c <LinkedList<UnixFile>::removeFirst()>
c0011903:	83 c4 10             	add    esp,0x10
c0011906:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001190a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001190e:	74 40                	je     c0011950 <UnixFile::~UnixFile()+0x92>
c0011910:	83 ec 08             	sub    esp,0x8
c0011913:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011917:	68 78 de 02 c0       	push   0xc002de78
c001191c:	e8 5f 68 01 00       	call   c0028180 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011928:	8d 50 01             	lea    edx,[eax+0x1]
c001192b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001192f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011934:	0f 94 c0             	sete   al
c0011937:	84 c0                	test   al,al
c0011939:	74 a7                	je     c00118e2 <UnixFile::~UnixFile()+0x24>
c001193b:	83 ec 0c             	sub    esp,0xc
c001193e:	68 6c 9f 02 c0       	push   0xc0029f6c
c0011943:	e8 57 88 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0011948:	83 c4 10             	add    esp,0x10
c001194b:	eb 95                	jmp    c00118e2 <UnixFile::~UnixFile()+0x24>
c001194d:	90                   	nop
c001194e:	eb 01                	jmp    c0011951 <UnixFile::~UnixFile()+0x93>
c0011950:	90                   	nop
c0011951:	90                   	nop
c0011952:	83 c4 1c             	add    esp,0x1c
c0011955:	c3                   	ret    

c0011956 <UnixFile::~UnixFile()>:
c0011956:	83 ec 0c             	sub    esp,0xc
c0011959:	83 ec 0c             	sub    esp,0xc
c001195c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011960:	e8 59 ff ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	6a 0c                	push   0xc
c001196d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011971:	e8 b9 10 00 00       	call   c0012a2f <operator delete(void*, unsigned long)>
c0011976:	83 c4 10             	add    esp,0x10
c0011979:	83 c4 0c             	add    esp,0xc
c001197c:	c3                   	ret    
c001197d:	90                   	nop

c001197e <ReservedFilename::~ReservedFilename()>:
c001197e:	83 ec 0c             	sub    esp,0xc
c0011981:	ba b0 9f 02 c0       	mov    edx,0xc0029fb0
c0011986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001198a:	89 10                	mov    DWORD PTR [eax],edx
c001198c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	50                   	push   eax
c0011994:	e8 25 ff ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	90                   	nop
c001199d:	83 c4 0c             	add    esp,0xc
c00119a0:	c3                   	ret    
c00119a1:	90                   	nop

c00119a2 <ReservedFilename::~ReservedFilename()>:
c00119a2:	83 ec 0c             	sub    esp,0xc
c00119a5:	83 ec 0c             	sub    esp,0xc
c00119a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ac:	e8 cd ff ff ff       	call   c001197e <ReservedFilename::~ReservedFilename()>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	83 ec 08             	sub    esp,0x8
c00119b7:	6a 0c                	push   0xc
c00119b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119bd:	e8 6d 10 00 00       	call   c0012a2f <operator delete(void*, unsigned long)>
c00119c2:	83 c4 10             	add    esp,0x10
c00119c5:	83 c4 0c             	add    esp,0xc
c00119c8:	c3                   	ret    

c00119c9 <getFromFileDescriptor(int)>:
c00119c9:	53                   	push   ebx
c00119ca:	83 ec 08             	sub    esp,0x8
c00119cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119dd:	7f 2c                	jg     c0011a0b <getFromFileDescriptor(int)+0x42>
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	68 78 de 02 c0       	push   0xc002de78
c00119e7:	e8 68 68 01 00       	call   c0028254 <LinkedList<UnixFile>::getFirstElement()>
c00119ec:	83 c4 10             	add    esp,0x10
c00119ef:	85 c0                	test   eax,eax
c00119f1:	75 04                	jne    c00119f7 <getFromFileDescriptor(int)+0x2e>
c00119f3:	31 c0                	xor    eax,eax
c00119f5:	eb 6e                	jmp    c0011a65 <getFromFileDescriptor(int)+0x9c>
c00119f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119fa:	74 69                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c00119fc:	52                   	push   edx
c00119fd:	52                   	push   edx
c00119fe:	50                   	push   eax
c00119ff:	68 78 de 02 c0       	push   0xc002de78
c0011a04:	e8 f5 68 01 00       	call   c00282fe <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a09:	eb e1                	jmp    c00119ec <getFromFileDescriptor(int)+0x23>
c0011a0b:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c0011a10:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a16:	74 4d                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a18:	a1 70 de 02 c0       	mov    eax,ds:0xc002de70
c0011a1d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a23:	74 40                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a25:	a1 68 de 02 c0       	mov    eax,ds:0xc002de68
c0011a2a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a30:	74 33                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a32:	a1 64 de 02 c0       	mov    eax,ds:0xc002de64
c0011a37:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a3d:	74 26                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a3f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a45:	83 f8 08             	cmp    eax,0x8
c0011a48:	77 09                	ja     c0011a53 <getFromFileDescriptor(int)+0x8a>
c0011a4a:	8b 04 85 40 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd21c0]
c0011a51:	eb 12                	jmp    c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a53:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a59:	83 fb 08             	cmp    ebx,0x8
c0011a5c:	77 95                	ja     c00119f3 <getFromFileDescriptor(int)+0x2a>
c0011a5e:	8b 04 9d 00 de 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2200]
c0011a65:	83 c4 08             	add    esp,0x8
c0011a68:	5b                   	pop    ebx
c0011a69:	c3                   	ret    

c0011a6a <__static_initialization_and_destruction_0(int, int)>:
c0011a6a:	83 ec 0c             	sub    esp,0xc
c0011a6d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a72:	75 34                	jne    c0011aa8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a74:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a7c:	75 2a                	jne    c0011aa8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	68 78 de 02 c0       	push   0xc002de78
c0011a86:	e8 9d 66 01 00       	call   c0028128 <LinkedList<UnixFile>::LinkedList()>
c0011a8b:	83 c4 10             	add    esp,0x10
c0011a8e:	83 ec 04             	sub    esp,0x4
c0011a91:	68 30 cc 02 c0       	push   0xc002cc30
c0011a96:	68 78 de 02 c0       	push   0xc002de78
c0011a9b:	68 26 81 02 c0       	push   0xc0028126
c0011aa0:	e8 04 0f 00 00       	call   c00129a9 <__cxa_atexit>
c0011aa5:	83 c4 10             	add    esp,0x10
c0011aa8:	90                   	nop
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	c3                   	ret    

c0011aad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011aad:	83 ec 0c             	sub    esp,0xc
c0011ab0:	83 ec 08             	sub    esp,0x8
c0011ab3:	68 ff ff 00 00       	push   0xffff
c0011ab8:	6a 01                	push   0x1
c0011aba:	e8 ab ff ff ff       	call   c0011a6a <__static_initialization_and_destruction_0(int, int)>
c0011abf:	83 c4 10             	add    esp,0x10
c0011ac2:	83 c4 0c             	add    esp,0xc
c0011ac5:	c3                   	ret    

c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ac6:	53                   	push   ebx
c0011ac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011acb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011acf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011ad5:	89 c8                	mov    eax,ecx
c0011ad7:	d1 e8                	shr    eax,1
c0011ad9:	03 05 a8 cc 02 c0    	add    eax,DWORD PTR ds:0xc002cca8
c0011adf:	83 e1 01             	and    ecx,0x1
c0011ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0011ae4:	75 09                	jne    c0011aef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011ae6:	83 e2 f0             	and    edx,0xfffffff0
c0011ae9:	09 da                	or     edx,ebx
c0011aeb:	88 10                	mov    BYTE PTR [eax],dl
c0011aed:	5b                   	pop    ebx
c0011aee:	c3                   	ret    
c0011aef:	c1 e3 04             	shl    ebx,0x4
c0011af2:	83 e2 0f             	and    edx,0xf
c0011af5:	09 da                	or     edx,ebx
c0011af7:	88 10                	mov    BYTE PTR [eax],dl
c0011af9:	5b                   	pop    ebx
c0011afa:	c3                   	ret    

c0011afb <Virt::getPageState(unsigned long)>:
c0011afb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aff:	8b 0d a8 cc 02 c0    	mov    ecx,DWORD PTR ds:0xc002cca8
c0011b05:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b0b:	89 d0                	mov    eax,edx
c0011b0d:	d1 e8                	shr    eax,1
c0011b0f:	83 e2 01             	and    edx,0x1
c0011b12:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b15:	75 04                	jne    c0011b1b <Virt::getPageState(unsigned long)+0x20>
c0011b17:	83 e0 0f             	and    eax,0xf
c0011b1a:	c3                   	ret    
c0011b1b:	c0 e8 04             	shr    al,0x4
c0011b1e:	c3                   	ret    

c0011b1f <Virt::allocateKernelVirtualPages(int)>:
c0011b1f:	55                   	push   ebp
c0011b20:	31 ed                	xor    ebp,ebp
c0011b22:	57                   	push   edi
c0011b23:	56                   	push   esi
c0011b24:	53                   	push   ebx
c0011b25:	31 db                	xor    ebx,ebx
c0011b27:	83 ec 1c             	sub    esp,0x1c
c0011b2a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b2e:	8b 3d a4 cc 02 c0    	mov    edi,DWORD PTR ds:0xc002cca4
c0011b34:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b39:	57                   	push   edi
c0011b3a:	e8 bc ff ff ff       	call   c0011afb <Virt::getPageState(unsigned long)>
c0011b3f:	5a                   	pop    edx
c0011b40:	84 c0                	test   al,al
c0011b42:	75 3a                	jne    c0011b7e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b44:	85 db                	test   ebx,ebx
c0011b46:	75 02                	jne    c0011b4a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b48:	89 fd                	mov    ebp,edi
c0011b4a:	43                   	inc    ebx
c0011b4b:	39 f3                	cmp    ebx,esi
c0011b4d:	74 5a                	je     c0011ba9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b4f:	47                   	inc    edi
c0011b50:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b56:	76 31                	jbe    c0011b89 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b58:	c7 05 a4 cc 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002cca4,0xc8000
c0011b62:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b67:	75 28                	jne    c0011b91 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b69:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b6e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b73:	57                   	push   edi
c0011b74:	e8 82 ff ff ff       	call   c0011afb <Virt::getPageState(unsigned long)>
c0011b79:	5a                   	pop    edx
c0011b7a:	84 c0                	test   al,al
c0011b7c:	74 c6                	je     c0011b44 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b7e:	31 db                	xor    ebx,ebx
c0011b80:	47                   	inc    edi
c0011b81:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b87:	77 cf                	ja     c0011b58 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b89:	89 3d a4 cc 02 c0    	mov    DWORD PTR ds:0xc002cca4,edi
c0011b8f:	eb a8                	jmp    c0011b39 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b91:	83 ec 0c             	sub    esp,0xc
c0011b94:	68 c4 9f 02 c0       	push   0xc0029fc4
c0011b99:	e8 01 86 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0011b9e:	8b 3d a4 cc 02 c0    	mov    edi,DWORD PTR ds:0xc002cca4
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	eb 90                	jmp    c0011b39 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ba9:	89 2d a4 cc 02 c0    	mov    DWORD PTR ds:0xc002cca4,ebp
c0011baf:	4b                   	dec    ebx
c0011bb0:	74 5f                	je     c0011c11 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bb2:	85 f6                	test   esi,esi
c0011bb4:	74 3d                	je     c0011bf3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bb6:	89 e8                	mov    eax,ebp
c0011bb8:	31 db                	xor    ebx,ebx
c0011bba:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bbd:	eb 14                	jmp    c0011bd3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bbf:	6a 01                	push   0x1
c0011bc1:	43                   	inc    ebx
c0011bc2:	50                   	push   eax
c0011bc3:	e8 fe fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc8:	58                   	pop    eax
c0011bc9:	39 f3                	cmp    ebx,esi
c0011bcb:	5a                   	pop    edx
c0011bcc:	74 25                	je     c0011bf3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bce:	a1 a4 cc 02 c0       	mov    eax,ds:0xc002cca4
c0011bd3:	8d 50 01             	lea    edx,[eax+0x1]
c0011bd6:	85 db                	test   ebx,ebx
c0011bd8:	89 15 a4 cc 02 c0    	mov    DWORD PTR ds:0xc002cca4,edx
c0011bde:	74 20                	je     c0011c00 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011be0:	39 df                	cmp    edi,ebx
c0011be2:	75 db                	jne    c0011bbf <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011be4:	6a 03                	push   0x3
c0011be6:	43                   	inc    ebx
c0011be7:	50                   	push   eax
c0011be8:	e8 d9 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bed:	59                   	pop    ecx
c0011bee:	39 f3                	cmp    ebx,esi
c0011bf0:	58                   	pop    eax
c0011bf1:	75 db                	jne    c0011bce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bf3:	83 c4 1c             	add    esp,0x1c
c0011bf6:	89 e8                	mov    eax,ebp
c0011bf8:	5b                   	pop    ebx
c0011bf9:	c1 e0 0c             	shl    eax,0xc
c0011bfc:	5e                   	pop    esi
c0011bfd:	5f                   	pop    edi
c0011bfe:	5d                   	pop    ebp
c0011bff:	c3                   	ret    
c0011c00:	6a 02                	push   0x2
c0011c02:	bb 01 00 00 00       	mov    ebx,0x1
c0011c07:	50                   	push   eax
c0011c08:	e8 b9 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0d:	58                   	pop    eax
c0011c0e:	5a                   	pop    edx
c0011c0f:	eb bd                	jmp    c0011bce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c11:	6a 04                	push   0x4
c0011c13:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c16:	55                   	push   ebp
c0011c17:	a3 a4 cc 02 c0       	mov    ds:0xc002cca4,eax
c0011c1c:	e8 a5 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c21:	59                   	pop    ecx
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	5b                   	pop    ebx
c0011c25:	c1 e0 0c             	shl    eax,0xc
c0011c28:	83 c4 1c             	add    esp,0x1c
c0011c2b:	5b                   	pop    ebx
c0011c2c:	5e                   	pop    esi
c0011c2d:	5f                   	pop    edi
c0011c2e:	5d                   	pop    ebp
c0011c2f:	c3                   	ret    

c0011c30 <Virt::virtualMemorySetup()>:
c0011c30:	53                   	push   ebx
c0011c31:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c36:	83 ec 08             	sub    esp,0x8
c0011c39:	6a 0f                	push   0xf
c0011c3b:	53                   	push   ebx
c0011c3c:	43                   	inc    ebx
c0011c3d:	e8 84 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c42:	59                   	pop    ecx
c0011c43:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c49:	58                   	pop    eax
c0011c4a:	75 ed                	jne    c0011c39 <Virt::virtualMemorySetup()+0x9>
c0011c4c:	83 ec 08             	sub    esp,0x8
c0011c4f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c54:	68 00 00 00 c8       	push   0xc8000000
c0011c59:	68 4b a1 02 c0       	push   0xc002a14b
c0011c5e:	e8 ac 0e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011c63:	58                   	pop    eax
c0011c64:	5a                   	pop    edx
c0011c65:	68 00 f0 ff ef       	push   0xeffff000
c0011c6a:	68 5f a1 02 c0       	push   0xc002a15f
c0011c6f:	e8 9b 0e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	83 ec 08             	sub    esp,0x8
c0011c7a:	6a 00                	push   0x0
c0011c7c:	53                   	push   ebx
c0011c7d:	43                   	inc    ebx
c0011c7e:	e8 43 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c83:	83 c4 10             	add    esp,0x10
c0011c86:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c8c:	75 e9                	jne    c0011c77 <Virt::virtualMemorySetup()+0x47>
c0011c8e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c93:	83 ec 08             	sub    esp,0x8
c0011c96:	6a 0f                	push   0xf
c0011c98:	53                   	push   ebx
c0011c99:	43                   	inc    ebx
c0011c9a:	e8 27 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c9f:	83 c4 10             	add    esp,0x10
c0011ca2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011ca8:	75 e9                	jne    c0011c93 <Virt::virtualMemorySetup()+0x63>
c0011caa:	83 c4 08             	add    esp,0x8
c0011cad:	5b                   	pop    ebx
c0011cae:	c3                   	ret    

c0011caf <Virt::getAKernelVAS()>:
c0011caf:	a1 84 de 02 c0       	mov    eax,ds:0xc002de84
c0011cb4:	c3                   	ret    

c0011cb5 <Virt::setupPageSwapping(int)>:
c0011cb5:	57                   	push   edi
c0011cb6:	56                   	push   esi
c0011cb7:	53                   	push   ebx
c0011cb8:	83 ec 1c             	sub    esp,0x1c
c0011cbb:	68 14 01 00 00       	push   0x114
c0011cc0:	e8 7b db ff ff       	call   c000f840 <malloc>
c0011cc5:	83 c4 0c             	add    esp,0xc
c0011cc8:	89 c6                	mov    esi,eax
c0011cca:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c0011cd0:	68 73 a1 02 c0       	push   0xc002a173
c0011cd5:	50                   	push   eax
c0011cd6:	e8 8d 13 00 00       	call   c0013068 <File::File(char const*, Process*)>
c0011cdb:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cde:	e8 61 15 00 00       	call   c0013244 <File::unlink()>
c0011ce3:	58                   	pop    eax
c0011ce4:	5a                   	pop    edx
c0011ce5:	6a 12                	push   0x12
c0011ce7:	56                   	push   esi
c0011ce8:	e8 df 13 00 00       	call   c00130cc <File::open(FileOpenMode)>
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	85 c0                	test   eax,eax
c0011cf2:	0f 85 ca 00 00 00    	jne    c0011dc2 <Virt::setupPageSwapping(int)+0x10d>
c0011cf8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cfc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d04:	c1 e3 08             	shl    ebx,0x8
c0011d07:	83 ec 0c             	sub    esp,0xc
c0011d0a:	68 00 00 01 00       	push   0x10000
c0011d0f:	e8 2c db ff ff       	call   c000f840 <malloc>
c0011d14:	83 c4 0c             	add    esp,0xc
c0011d17:	89 c7                	mov    edi,eax
c0011d19:	68 00 00 01 00       	push   0x10000
c0011d1e:	6a 00                	push   0x0
c0011d20:	50                   	push   eax
c0011d21:	e8 52 ea fe ff       	call   c0000778 <memset>
c0011d26:	83 c4 10             	add    esp,0x10
c0011d29:	85 db                	test   ebx,ebx
c0011d2b:	79 03                	jns    c0011d30 <Virt::setupPageSwapping(int)+0x7b>
c0011d2d:	83 c3 0f             	add    ebx,0xf
c0011d30:	c1 fb 04             	sar    ebx,0x4
c0011d33:	4b                   	dec    ebx
c0011d34:	83 fb ff             	cmp    ebx,0xffffffff
c0011d37:	74 4b                	je     c0011d84 <Virt::setupPageSwapping(int)+0xcf>
c0011d39:	83 ec 0c             	sub    esp,0xc
c0011d3c:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d3e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d42:	52                   	push   edx
c0011d43:	57                   	push   edi
c0011d44:	6a 00                	push   0x0
c0011d46:	68 00 00 01 00       	push   0x10000
c0011d4b:	56                   	push   esi
c0011d4c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d4f:	83 c4 20             	add    esp,0x20
c0011d52:	85 c0                	test   eax,eax
c0011d54:	75 59                	jne    c0011daf <Virt::setupPageSwapping(int)+0xfa>
c0011d56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d5a:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d5f:	74 d2                	je     c0011d33 <Virt::setupPageSwapping(int)+0x7e>
c0011d61:	83 ec 08             	sub    esp,0x8
c0011d64:	4b                   	dec    ebx
c0011d65:	50                   	push   eax
c0011d66:	68 c6 a1 02 c0       	push   0xc002a1c6
c0011d6b:	e8 9f 0d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011d70:	c7 04 24 cf a1 02 c0 	mov    DWORD PTR [esp],0xc002a1cf
c0011d77:	e8 23 84 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0011d7c:	83 c4 10             	add    esp,0x10
c0011d7f:	83 fb ff             	cmp    ebx,0xffffffff
c0011d82:	75 b5                	jne    c0011d39 <Virt::setupPageSwapping(int)+0x84>
c0011d84:	83 ec 0c             	sub    esp,0xc
c0011d87:	56                   	push   esi
c0011d88:	e8 9d 13 00 00       	call   c001312a <File::close()>
c0011d8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d90:	e8 cb da ff ff       	call   c000f860 <rfree>
c0011d95:	83 c4 10             	add    esp,0x10
c0011d98:	85 f6                	test   esi,esi
c0011d9a:	74 0c                	je     c0011da8 <Virt::setupPageSwapping(int)+0xf3>
c0011d9c:	83 ec 0c             	sub    esp,0xc
c0011d9f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da1:	56                   	push   esi
c0011da2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011da5:	83 c4 10             	add    esp,0x10
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	5b                   	pop    ebx
c0011dac:	5e                   	pop    esi
c0011dad:	5f                   	pop    edi
c0011dae:	c3                   	ret    
c0011daf:	83 ec 08             	sub    esp,0x8
c0011db2:	50                   	push   eax
c0011db3:	68 ae a1 02 c0       	push   0xc002a1ae
c0011db8:	e8 52 0d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011dbd:	83 c4 10             	add    esp,0x10
c0011dc0:	eb 94                	jmp    c0011d56 <Virt::setupPageSwapping(int)+0xa1>
c0011dc2:	83 ec 08             	sub    esp,0x8
c0011dc5:	50                   	push   eax
c0011dc6:	68 8a a1 02 c0       	push   0xc002a18a
c0011dcb:	e8 3f 0d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011dd0:	c7 04 24 93 a1 02 c0 	mov    DWORD PTR [esp],0xc002a193
c0011dd7:	e8 c3 83 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0011ddc:	83 c4 10             	add    esp,0x10
c0011ddf:	e9 14 ff ff ff       	jmp    c0011cf8 <Virt::setupPageSwapping(int)+0x43>

c0011de4 <VAS::VAS()>:
c0011de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011de8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011def:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df3:	a3 84 de 02 c0       	mov    ds:0xc002de84,eax
c0011df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfc:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e04:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e12:	90                   	nop
c0011e13:	c3                   	ret    

c0011e14 <VAS::VAS(VAS*)>:
c0011e14:	83 ec 0c             	sub    esp,0xc
c0011e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e22:	83 ec 0c             	sub    esp,0xc
c0011e25:	68 e4 9f 02 c0       	push   0xc0029fe4
c0011e2a:	e8 70 83 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0011e2f:	83 c4 10             	add    esp,0x10
c0011e32:	90                   	nop
c0011e33:	83 c4 0c             	add    esp,0xc
c0011e36:	c3                   	ret    
c0011e37:	90                   	nop

c0011e38 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e3c:	89 c2                	mov    edx,eax
c0011e3e:	c1 e8 0a             	shr    eax,0xa
c0011e41:	c1 ea 16             	shr    edx,0x16
c0011e44:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e49:	19 c9                	sbb    ecx,ecx
c0011e4b:	c1 e2 0c             	shl    edx,0xc
c0011e4e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e54:	25 fc 0f 00 00       	and    eax,0xffc
c0011e59:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e60:	01 d0                	add    eax,edx
c0011e62:	c3                   	ret    
c0011e63:	90                   	nop

c0011e64 <VAS::getPageTableEntry(unsigned long)>:
c0011e64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e68:	89 ca                	mov    edx,ecx
c0011e6a:	c1 e9 0a             	shr    ecx,0xa
c0011e6d:	c1 ea 16             	shr    edx,0x16
c0011e70:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e76:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e7c:	c1 e0 0c             	shl    eax,0xc
c0011e7f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e82:	c3                   	ret    

c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e83:	57                   	push   edi
c0011e84:	56                   	push   esi
c0011e85:	be 01 00 00 00       	mov    esi,0x1
c0011e8a:	53                   	push   ebx
c0011e8b:	83 ec 10             	sub    esp,0x10
c0011e8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e92:	c1 eb 0c             	shr    ebx,0xc
c0011e95:	eb 3f                	jmp    c0011ed6 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011e97:	e8 13 fe ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c0011e9c:	83 ec 08             	sub    esp,0x8
c0011e9f:	57                   	push   edi
c0011ea0:	50                   	push   eax
c0011ea1:	e8 be ff ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c0011ea6:	83 c4 10             	add    esp,0x10
c0011ea9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eab:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011eaf:	f6 c4 04             	test   ah,0x4
c0011eb2:	75 5f                	jne    c0011f13 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011eb4:	80 fa 04             	cmp    dl,0x4
c0011eb7:	74 78                	je     c0011f31 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011eb9:	80 fa 02             	cmp    dl,0x2
c0011ebc:	0f 84 88 00 00 00    	je     c0011f4a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ec2:	80 fa 03             	cmp    dl,0x3
c0011ec5:	0f 84 ad 00 00 00    	je     c0011f78 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ecb:	fe ca                	dec    dl
c0011ecd:	0f 84 92 00 00 00    	je     c0011f65 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ed3:	43                   	inc    ebx
c0011ed4:	31 f6                	xor    esi,esi
c0011ed6:	53                   	push   ebx
c0011ed7:	e8 1f fc ff ff       	call   c0011afb <Virt::getPageState(unsigned long)>
c0011edc:	5f                   	pop    edi
c0011edd:	89 df                	mov    edi,ebx
c0011edf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ee3:	c1 e7 0c             	shl    edi,0xc
c0011ee6:	84 c0                	test   al,al
c0011ee8:	75 ad                	jne    c0011e97 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011eea:	83 ec 0c             	sub    esp,0xc
c0011eed:	68 d5 a1 02 c0       	push   0xc002a1d5
c0011ef2:	e8 a8 82 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0011ef7:	e8 b3 fd ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c0011efc:	5a                   	pop    edx
c0011efd:	59                   	pop    ecx
c0011efe:	57                   	push   edi
c0011eff:	50                   	push   eax
c0011f00:	e8 5f ff ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f0a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f0e:	f6 c4 04             	test   ah,0x4
c0011f11:	74 c0                	je     c0011ed3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f13:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f17:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f1c:	83 ec 0c             	sub    esp,0xc
c0011f1f:	50                   	push   eax
c0011f20:	e8 2e df ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0011f25:	83 c4 10             	add    esp,0x10
c0011f28:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f2c:	80 fa 04             	cmp    dl,0x4
c0011f2f:	75 88                	jne    c0011eb9 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f31:	89 f0                	mov    eax,esi
c0011f33:	84 c0                	test   al,al
c0011f35:	75 47                	jne    c0011f7e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f37:	c7 44 24 20 08 a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a008
c0011f3f:	83 c4 10             	add    esp,0x10
c0011f42:	5b                   	pop    ebx
c0011f43:	5e                   	pop    esi
c0011f44:	5f                   	pop    edi
c0011f45:	e9 55 82 00 00       	jmp    c001a19f <Krnl::panic(char const*)>
c0011f4a:	89 f0                	mov    eax,esi
c0011f4c:	84 c0                	test   al,al
c0011f4e:	75 15                	jne    c0011f65 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f50:	83 ec 0c             	sub    esp,0xc
c0011f53:	68 f1 a1 02 c0       	push   0xc002a1f1
c0011f58:	e8 42 82 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0011f5d:	83 c4 10             	add    esp,0x10
c0011f60:	e9 6e ff ff ff       	jmp    c0011ed3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f65:	83 ec 08             	sub    esp,0x8
c0011f68:	6a 00                	push   0x0
c0011f6a:	53                   	push   ebx
c0011f6b:	e8 56 fb ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f70:	83 c4 10             	add    esp,0x10
c0011f73:	e9 5b ff ff ff       	jmp    c0011ed3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f78:	89 f0                	mov    eax,esi
c0011f7a:	84 c0                	test   al,al
c0011f7c:	75 15                	jne    c0011f93 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f7e:	83 ec 08             	sub    esp,0x8
c0011f81:	6a 00                	push   0x0
c0011f83:	53                   	push   ebx
c0011f84:	e8 3d fb ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f89:	83 c4 10             	add    esp,0x10
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	5b                   	pop    ebx
c0011f90:	5e                   	pop    esi
c0011f91:	5f                   	pop    edi
c0011f92:	c3                   	ret    
c0011f93:	c7 44 24 20 0d a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a20d
c0011f9b:	83 c4 10             	add    esp,0x10
c0011f9e:	5b                   	pop    ebx
c0011f9f:	5e                   	pop    esi
c0011fa0:	5f                   	pop    edi
c0011fa1:	e9 f9 81 00 00       	jmp    c001a19f <Krnl::panic(char const*)>

c0011fa6 <VAS::freeAllocatedPages(unsigned long)>:
c0011fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011faa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fae:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fb2:	74 09                	je     c0011fbd <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fb8:	e9 c6 fe ff ff       	jmp    c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fbd:	c7 44 24 04 2c a0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a02c
c0011fc5:	e9 45 0b 00 00       	jmp    c0012b0f <Dbg::kprintf(char const*, ...)>

c0011fca <VAS::virtualToPhysical(unsigned long)>:
c0011fca:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fce:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd2:	e8 8d fe ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c0011fd7:	5a                   	pop    edx
c0011fd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fda:	59                   	pop    ecx
c0011fdb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe0:	c3                   	ret    
c0011fe1:	90                   	nop

c0011fe2 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011fe2:	55                   	push   ebp
c0011fe3:	57                   	push   edi
c0011fe4:	56                   	push   esi
c0011fe5:	53                   	push   ebx
c0011fe6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011fea:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011fee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011ff2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011ff6:	85 db                	test   ebx,ebx
c0011ff8:	7e 22                	jle    c001201c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011ffa:	c1 e3 0c             	shl    ebx,0xc
c0011ffd:	01 f3                	add    ebx,esi
c0011fff:	56                   	push   esi
c0012000:	81 c6 00 10 00 00    	add    esi,0x1000
c0012006:	55                   	push   ebp
c0012007:	e8 58 fe ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c001200c:	5a                   	pop    edx
c001200d:	59                   	pop    ecx
c001200e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012010:	21 f9                	and    ecx,edi
c0012012:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012016:	39 f3                	cmp    ebx,esi
c0012018:	89 08                	mov    DWORD PTR [eax],ecx
c001201a:	75 e3                	jne    c0011fff <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001201c:	5b                   	pop    ebx
c001201d:	5e                   	pop    esi
c001201e:	5f                   	pop    edi
c001201f:	5d                   	pop    ebp
c0012020:	c3                   	ret    
c0012021:	90                   	nop

c0012022 <VAS::setToWriteCombining(unsigned long, int)>:
c0012022:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0012027:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001202d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012034:	75 01                	jne    c0012037 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012036:	c3                   	ret    
c0012037:	68 80 00 00 00       	push   0x80
c001203c:	6a ff                	push   0xffffffff
c001203e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012042:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012046:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001204a:	e8 93 ff ff ff       	call   c0011fe2 <VAS::reflagRange(unsigned long, int, int, int)>
c001204f:	83 c4 14             	add    esp,0x14
c0012052:	c3                   	ret    
c0012053:	90                   	nop

c0012054 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012054:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012059:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001205d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012064:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012067:	19 c0                	sbb    eax,eax
c0012069:	83 ca 03             	or     edx,0x3
c001206c:	83 e0 fc             	and    eax,0xfffffffc
c001206f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012076:	0f 20 d8             	mov    eax,cr3
c0012079:	0f 22 d8             	mov    cr3,eax
c001207c:	c3                   	ret    
c001207d:	90                   	nop

c001207e <VAS::~VAS()>:
c001207e:	83 ec 2c             	sub    esp,0x2c
c0012081:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012089:	e8 a0 b7 00 00       	call   c001d82e <lockScheduler()>
c001208e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012093:	8b 00                	mov    eax,DWORD PTR [eax]
c0012095:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012098:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001209e:	83 ec 04             	sub    esp,0x4
c00120a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120a5:	6a 01                	push   0x1
c00120a7:	50                   	push   eax
c00120a8:	e8 a7 ff ff ff       	call   c0012054 <VAS::mapOtherVASIn(bool, VAS*)>
c00120ad:	83 c4 10             	add    esp,0x10
c00120b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120b8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120c0:	0f 8f d7 00 00 00    	jg     c001219d <VAS::~VAS()+0x11f>
c00120c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120d1:	c1 e2 02             	shl    edx,0x2
c00120d4:	01 d0                	add    eax,edx
c00120d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e0:	83 e0 01             	and    eax,0x1
c00120e3:	0f 84 ab 00 00 00    	je     c0012194 <VAS::~VAS()+0x116>
c00120e9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120f1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00120f9:	7f 75                	jg     c0012170 <VAS::~VAS()+0xf2>
c00120fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120ff:	c1 e0 0a             	shl    eax,0xa
c0012102:	89 c2                	mov    edx,eax
c0012104:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012108:	01 d0                	add    eax,edx
c001210a:	c1 e0 0c             	shl    eax,0xc
c001210d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012111:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012116:	8b 00                	mov    eax,DWORD PTR [eax]
c0012118:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001211b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012121:	83 ec 04             	sub    esp,0x4
c0012124:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012128:	6a 01                	push   0x1
c001212a:	50                   	push   eax
c001212b:	e8 08 fd ff ff       	call   c0011e38 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012130:	83 c4 10             	add    esp,0x10
c0012133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012137:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001213b:	8b 00                	mov    eax,DWORD PTR [eax]
c001213d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012145:	25 01 04 00 00       	and    eax,0x401
c001214a:	3d 01 04 00 00       	cmp    eax,0x401
c001214f:	75 19                	jne    c001216a <VAS::~VAS()+0xec>
c0012151:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012155:	25 00 f0 ff ff       	and    eax,0xfffff000
c001215a:	83 ec 0c             	sub    esp,0xc
c001215d:	50                   	push   eax
c001215e:	e8 f0 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0012163:	83 c4 10             	add    esp,0x10
c0012166:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001216a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001216e:	eb 81                	jmp    c00120f1 <VAS::~VAS()+0x73>
c0012170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012174:	25 00 04 00 00       	and    eax,0x400
c0012179:	74 19                	je     c0012194 <VAS::~VAS()+0x116>
c001217b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001217f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012184:	83 ec 0c             	sub    esp,0xc
c0012187:	50                   	push   eax
c0012188:	e8 c6 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001218d:	83 c4 10             	add    esp,0x10
c0012190:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012194:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012198:	e9 1b ff ff ff       	jmp    c00120b8 <VAS::~VAS()+0x3a>
c001219d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121a4:	83 ec 0c             	sub    esp,0xc
c00121a7:	50                   	push   eax
c00121a8:	e8 d6 fc ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c00121ad:	83 c4 10             	add    esp,0x10
c00121b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121b7:	83 ec 0c             	sub    esp,0xc
c00121ba:	50                   	push   eax
c00121bb:	e8 93 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121c0:	83 c4 10             	add    esp,0x10
c00121c3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121cb:	c1 e0 02             	shl    eax,0x2
c00121ce:	83 ec 08             	sub    esp,0x8
c00121d1:	50                   	push   eax
c00121d2:	68 50 a0 02 c0       	push   0xc002a050
c00121d7:	e8 33 09 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00121dc:	83 c4 10             	add    esp,0x10
c00121df:	e8 4c b6 00 00       	call   c001d830 <unlockScheduler()>
c00121e4:	90                   	nop
c00121e5:	83 c4 2c             	add    esp,0x2c
c00121e8:	c3                   	ret    
c00121e9:	90                   	nop

c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>:
c00121ea:	55                   	push   ebp
c00121eb:	57                   	push   edi
c00121ec:	56                   	push   esi
c00121ed:	53                   	push   ebx
c00121ee:	83 ec 1c             	sub    esp,0x1c
c00121f1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00121f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121f9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00121ff:	77 08                	ja     c0012209 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012201:	0f 20 d8             	mov    eax,cr3
c0012204:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012207:	75 47                	jne    c0012250 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012209:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001220d:	09 d8                	or     eax,ebx
c001220f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012214:	75 57                	jne    c001226d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012216:	89 de                	mov    esi,ebx
c0012218:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001221b:	c1 ee 16             	shr    esi,0x16
c001221e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012225:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012229:	74 54                	je     c001227f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001222b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001222f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012235:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012239:	c1 e6 0c             	shl    esi,0xc
c001223c:	c1 eb 0a             	shr    ebx,0xa
c001223f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012245:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012248:	83 c4 1c             	add    esp,0x1c
c001224b:	5b                   	pop    ebx
c001224c:	5e                   	pop    esi
c001224d:	5f                   	pop    edi
c001224e:	5d                   	pop    ebp
c001224f:	c3                   	ret    
c0012250:	83 ec 0c             	sub    esp,0xc
c0012253:	68 70 a0 02 c0       	push   0xc002a070
c0012258:	e8 b2 08 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012264:	09 d8                	or     eax,ebx
c0012266:	a9 ff 0f 00 00       	test   eax,0xfff
c001226b:	74 a9                	je     c0012216 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001226d:	83 ec 0c             	sub    esp,0xc
c0012270:	68 d8 a0 02 c0       	push   0xc002a0d8
c0012275:	e8 25 7f 00 00       	call   c001a19f <Krnl::panic(char const*)>
c001227a:	83 c4 10             	add    esp,0x10
c001227d:	eb 97                	jmp    c0012216 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001227f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012283:	e8 55 dc ff ff       	call   c000fedd <Phys::allocatePage()>
c0012288:	89 c5                	mov    ebp,eax
c001228a:	e8 20 fa ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c001228f:	83 ec 0c             	sub    esp,0xc
c0012292:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012296:	6a 01                	push   0x1
c0012298:	e8 82 f8 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c001229d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122a4:	6a 01                	push   0x1
c00122a6:	50                   	push   eax
c00122a7:	55                   	push   ebp
c00122a8:	81 cd 07 04 00 00    	or     ebp,0x407
c00122ae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122b2:	51                   	push   ecx
c00122b3:	e8 26 02 00 00       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122b8:	83 c4 1c             	add    esp,0x1c
c00122bb:	68 00 10 00 00       	push   0x1000
c00122c0:	6a 00                	push   0x0
c00122c2:	50                   	push   eax
c00122c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122c7:	e8 ac e4 fe ff       	call   c0000778 <memset>
c00122cc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122d0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122d3:	e8 ab fb ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c00122d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122df:	83 c4 10             	add    esp,0x10
c00122e2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122e5:	e9 41 ff ff ff       	jmp    c001222b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00122ea <VAS::allocatePages(int, int)>:
c00122ea:	55                   	push   ebp
c00122eb:	57                   	push   edi
c00122ec:	56                   	push   esi
c00122ed:	53                   	push   ebx
c00122ee:	83 ec 1c             	sub    esp,0x1c
c00122f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122f5:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00122fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012300:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012306:	83 e0 01             	and    eax,0x1
c0012309:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001230d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012311:	0f 85 cc 00 00 00    	jne    c00123e3 <VAS::allocatePages(int, int)+0xf9>
c0012317:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001231a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001231e:	85 c0                	test   eax,eax
c0012320:	0f 84 a1 00 00 00    	je     c00123c7 <VAS::allocatePages(int, int)+0xdd>
c0012326:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001232a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001232e:	c1 e6 0c             	shl    esi,0xc
c0012331:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012335:	85 c0                	test   eax,eax
c0012337:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001233a:	7e 33                	jle    c001236f <VAS::allocatePages(int, int)+0x85>
c001233c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012340:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012344:	81 cd 00 04 00 00    	or     ebp,0x400
c001234a:	e8 8e db ff ff       	call   c000fedd <Phys::allocatePage()>
c001234f:	55                   	push   ebp
c0012350:	53                   	push   ebx
c0012351:	50                   	push   eax
c0012352:	57                   	push   edi
c0012353:	e8 92 fe ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0012358:	83 c4 10             	add    esp,0x10
c001235b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012360:	74 03                	je     c0012365 <VAS::allocatePages(int, int)+0x7b>
c0012362:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012365:	81 c3 00 10 00 00    	add    ebx,0x1000
c001236b:	39 de                	cmp    esi,ebx
c001236d:	75 db                	jne    c001234a <VAS::allocatePages(int, int)+0x60>
c001236f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012374:	75 12                	jne    c0012388 <VAS::allocatePages(int, int)+0x9e>
c0012376:	0f 20 d8             	mov    eax,cr3
c0012379:	0f 22 d8             	mov    cr3,eax
c001237c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012380:	83 c4 1c             	add    esp,0x1c
c0012383:	5b                   	pop    ebx
c0012384:	5e                   	pop    esi
c0012385:	5f                   	pop    edi
c0012386:	5d                   	pop    ebp
c0012387:	c3                   	ret    
c0012388:	c1 ee 0a             	shr    esi,0xa
c001238b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001238f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012395:	c1 eb 0a             	shr    ebx,0xa
c0012398:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001239e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123a4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123aa:	39 c3                	cmp    ebx,eax
c00123ac:	77 ce                	ja     c001237c <VAS::allocatePages(int, int)+0x92>
c00123ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123b7:	39 d8                	cmp    eax,ebx
c00123b9:	73 f3                	jae    c00123ae <VAS::allocatePages(int, int)+0xc4>
c00123bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123bf:	83 c4 1c             	add    esp,0x1c
c00123c2:	5b                   	pop    ebx
c00123c3:	5e                   	pop    esi
c00123c4:	5f                   	pop    edi
c00123c5:	5d                   	pop    ebp
c00123c6:	c3                   	ret    
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	68 fc a0 02 c0       	push   0xc002a0fc
c00123cf:	e8 cb 7d 00 00       	call   c001a19f <Krnl::panic(char const*)>
c00123d4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123db:	83 c4 10             	add    esp,0x10
c00123de:	e9 43 ff ff ff       	jmp    c0012326 <VAS::allocatePages(int, int)+0x3c>
c00123e3:	83 ec 0c             	sub    esp,0xc
c00123e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123ea:	e8 30 f7 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00123ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00123fb:	0f 87 9b 00 00 00    	ja     c001249c <VAS::allocatePages(int, int)+0x1b2>
c0012401:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012405:	85 d2                	test   edx,edx
c0012407:	7e 3c                	jle    c0012445 <VAS::allocatePages(int, int)+0x15b>
c0012409:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001240d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012411:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012415:	c1 e5 0c             	shl    ebp,0xc
c0012418:	81 ce 00 04 00 00    	or     esi,0x400
c001241e:	01 dd                	add    ebp,ebx
c0012420:	e8 b8 da ff ff       	call   c000fedd <Phys::allocatePage()>
c0012425:	56                   	push   esi
c0012426:	53                   	push   ebx
c0012427:	50                   	push   eax
c0012428:	57                   	push   edi
c0012429:	e8 bc fd ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c001242e:	83 c4 10             	add    esp,0x10
c0012431:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012436:	74 03                	je     c001243b <VAS::allocatePages(int, int)+0x151>
c0012438:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001243b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012441:	39 dd                	cmp    ebp,ebx
c0012443:	75 db                	jne    c0012420 <VAS::allocatePages(int, int)+0x136>
c0012445:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001244a:	0f 84 26 ff ff ff    	je     c0012376 <VAS::allocatePages(int, int)+0x8c>
c0012450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012454:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012458:	89 d3                	mov    ebx,edx
c001245a:	c1 e0 0c             	shl    eax,0xc
c001245d:	c1 eb 0a             	shr    ebx,0xa
c0012460:	01 d0                	add    eax,edx
c0012462:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012468:	c1 e8 0a             	shr    eax,0xa
c001246b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012471:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012476:	2d 00 00 40 00       	sub    eax,0x400000
c001247b:	39 c3                	cmp    ebx,eax
c001247d:	0f 87 f9 fe ff ff    	ja     c001237c <VAS::allocatePages(int, int)+0x92>
c0012483:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012486:	81 c3 00 10 00 00    	add    ebx,0x1000
c001248c:	39 d8                	cmp    eax,ebx
c001248e:	73 f3                	jae    c0012483 <VAS::allocatePages(int, int)+0x199>
c0012490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012494:	83 c4 1c             	add    esp,0x1c
c0012497:	5b                   	pop    ebx
c0012498:	5e                   	pop    esi
c0012499:	5f                   	pop    edi
c001249a:	5d                   	pop    ebp
c001249b:	c3                   	ret    
c001249c:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00124a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124a7:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124ae:	0f 84 4d ff ff ff    	je     c0012401 <VAS::allocatePages(int, int)+0x117>
c00124b4:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124bc:	e9 40 ff ff ff       	jmp    c0012401 <VAS::allocatePages(int, int)+0x117>
c00124c1:	90                   	nop

c00124c2 <VAS::setCPUSpecific(unsigned long)>:
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	6a 05                	push   0x5
c00124c7:	68 00 00 40 c2       	push   0xc2400000
c00124cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d4:	e8 11 fd ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d9:	83 c4 1c             	add    esp,0x1c
c00124dc:	c3                   	ret    
c00124dd:	90                   	nop

c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124de:	55                   	push   ebp
c00124df:	57                   	push   edi
c00124e0:	56                   	push   esi
c00124e1:	53                   	push   ebx
c00124e2:	83 ec 1c             	sub    esp,0x1c
c00124e5:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00124ea:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124f4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124f8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00124fe:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012502:	83 e0 01             	and    eax,0x1
c0012505:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012509:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001250d:	85 c0                	test   eax,eax
c001250f:	7e 39                	jle    c001254a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012511:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012515:	89 f3                	mov    ebx,esi
c0012517:	c1 e0 0c             	shl    eax,0xc
c001251a:	01 f0                	add    eax,esi
c001251c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012520:	55                   	push   ebp
c0012521:	53                   	push   ebx
c0012522:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012526:	29 f0                	sub    eax,esi
c0012528:	01 d8                	add    eax,ebx
c001252a:	50                   	push   eax
c001252b:	57                   	push   edi
c001252c:	e8 b9 fc ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0012531:	83 c4 10             	add    esp,0x10
c0012534:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012539:	74 03                	je     c001253e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001253b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001253e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012544:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012548:	75 d6                	jne    c0012520 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001254a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001254f:	75 10                	jne    c0012561 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012551:	0f 20 d8             	mov    eax,cr3
c0012554:	0f 22 d8             	mov    cr3,eax
c0012557:	83 c4 1c             	add    esp,0x1c
c001255a:	89 f0                	mov    eax,esi
c001255c:	5b                   	pop    ebx
c001255d:	5e                   	pop    esi
c001255e:	5f                   	pop    edi
c001255f:	5d                   	pop    ebp
c0012560:	c3                   	ret    
c0012561:	89 f3                	mov    ebx,esi
c0012563:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012567:	c1 eb 0a             	shr    ebx,0xa
c001256a:	c1 e0 0c             	shl    eax,0xc
c001256d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012573:	01 f0                	add    eax,esi
c0012575:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001257b:	c1 e8 0a             	shr    eax,0xa
c001257e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012583:	2d 00 00 40 00       	sub    eax,0x400000
c0012588:	39 c3                	cmp    ebx,eax
c001258a:	77 cb                	ja     c0012557 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001258c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001258f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012595:	39 d8                	cmp    eax,ebx
c0012597:	73 f3                	jae    c001258c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012599:	83 c4 1c             	add    esp,0x1c
c001259c:	89 f0                	mov    eax,esi
c001259e:	5b                   	pop    ebx
c001259f:	5e                   	pop    esi
c00125a0:	5f                   	pop    edi
c00125a1:	5d                   	pop    ebp
c00125a2:	c3                   	ret    
c00125a3:	90                   	nop

c00125a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125a4:	55                   	push   ebp
c00125a5:	57                   	push   edi
c00125a6:	56                   	push   esi
c00125a7:	53                   	push   ebx
c00125a8:	83 ec 1c             	sub    esp,0x1c
c00125ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125af:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125b3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125b7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125bb:	a9 ff 0f 00 00       	test   eax,0xfff
c00125c0:	75 4a                	jne    c001260c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125c6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125c9:	c1 eb 16             	shr    ebx,0x16
c00125cc:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125d3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125d7:	74 4d                	je     c0012626 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125dd:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125e1:	c1 e8 0a             	shr    eax,0xa
c00125e4:	80 fa 01             	cmp    dl,0x1
c00125e7:	19 d2                	sbb    edx,edx
c00125e9:	c1 e3 0c             	shl    ebx,0xc
c00125ec:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00125f0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00125f6:	25 fc 0f 00 00       	and    eax,0xffc
c00125fb:	01 d8                	add    eax,ebx
c00125fd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012604:	83 c4 1c             	add    esp,0x1c
c0012607:	5b                   	pop    ebx
c0012608:	5e                   	pop    esi
c0012609:	5f                   	pop    edi
c001260a:	5d                   	pop    ebp
c001260b:	c3                   	ret    
c001260c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012610:	83 ec 0c             	sub    esp,0xc
c0012613:	68 28 a1 02 c0       	push   0xc002a128
c0012618:	e8 82 7b 00 00       	call   c001a19f <Krnl::panic(char const*)>
c001261d:	83 c4 10             	add    esp,0x10
c0012620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012624:	eb 9c                	jmp    c00125c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001262a:	e8 ae d8 ff ff       	call   c000fedd <Phys::allocatePage()>
c001262f:	89 c5                	mov    ebp,eax
c0012631:	e8 79 f6 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c0012636:	83 ec 0c             	sub    esp,0xc
c0012639:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001263d:	6a 01                	push   0x1
c001263f:	e8 db f4 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0012644:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001264b:	6a 01                	push   0x1
c001264d:	50                   	push   eax
c001264e:	55                   	push   ebp
c001264f:	81 cd 07 04 00 00    	or     ebp,0x407
c0012655:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012659:	51                   	push   ecx
c001265a:	e8 7f fe ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001265f:	83 c4 1c             	add    esp,0x1c
c0012662:	68 00 10 00 00       	push   0x1000
c0012667:	6a 00                	push   0x0
c0012669:	50                   	push   eax
c001266a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001266e:	e8 05 e1 fe ff       	call   c0000778 <memset>
c0012673:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012677:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001267a:	e8 04 f8 ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c001267f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012682:	83 c4 10             	add    esp,0x10
c0012685:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012688:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001268c:	e9 48 ff ff ff       	jmp    c00125d9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012691:	90                   	nop

c0012692 <VAS::VAS(bool)>:
c0012692:	53                   	push   ebx
c0012693:	83 ec 28             	sub    esp,0x28
c0012696:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001269a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001269e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ad:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126b1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126b4:	e8 24 d8 ff ff       	call   c000fedd <Phys::allocatePage()>
c00126b9:	89 c2                	mov    edx,eax
c00126bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126c2:	e8 e8 f5 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c00126c7:	89 c3                	mov    ebx,eax
c00126c9:	83 ec 0c             	sub    esp,0xc
c00126cc:	6a 01                	push   0x1
c00126ce:	e8 4c f4 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00126d3:	83 c4 10             	add    esp,0x10
c00126d6:	89 c2                	mov    edx,eax
c00126d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126df:	83 ec 0c             	sub    esp,0xc
c00126e2:	6a 03                	push   0x3
c00126e4:	6a 01                	push   0x1
c00126e6:	52                   	push   edx
c00126e7:	50                   	push   eax
c00126e8:	53                   	push   ebx
c00126e9:	e8 f0 fd ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126ee:	83 c4 20             	add    esp,0x20
c00126f1:	89 c2                	mov    edx,eax
c00126f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00126fa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012702:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001270a:	7f 1c                	jg     c0012728 <VAS::VAS(bool)+0x96>
c001270c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012713:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012717:	c1 e2 02             	shl    edx,0x2
c001271a:	01 d0                	add    eax,edx
c001271c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012722:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012726:	eb da                	jmp    c0012702 <VAS::VAS(bool)+0x70>
c0012728:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012730:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012738:	7f 7a                	jg     c00127b4 <VAS::VAS(bool)+0x122>
c001273a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001273e:	2d 00 02 00 00       	sub    eax,0x200
c0012743:	c1 e0 0c             	shl    eax,0xc
c0012746:	83 c8 03             	or     eax,0x3
c0012749:	89 c2                	mov    edx,eax
c001274b:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0012750:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012756:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001275c:	83 e0 10             	and    eax,0x10
c001275f:	84 c0                	test   al,al
c0012761:	74 07                	je     c001276a <VAS::VAS(bool)+0xd8>
c0012763:	b8 00 01 00 00       	mov    eax,0x100
c0012768:	eb 05                	jmp    c001276f <VAS::VAS(bool)+0xdd>
c001276a:	b8 00 00 00 00       	mov    eax,0x0
c001276f:	09 d0                	or     eax,edx
c0012771:	89 c1                	mov    ecx,eax
c0012773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012777:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001277a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001277e:	c1 e2 02             	shl    edx,0x2
c0012781:	01 d0                	add    eax,edx
c0012783:	89 ca                	mov    edx,ecx
c0012785:	89 10                	mov    DWORD PTR [eax],edx
c0012787:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001278b:	2d 40 03 00 00       	sub    eax,0x340
c0012790:	83 f8 7f             	cmp    eax,0x7f
c0012793:	77 16                	ja     c00127ab <VAS::VAS(bool)+0x119>
c0012795:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012799:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001279c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a0:	c1 e2 02             	shl    edx,0x2
c00127a3:	01 d0                	add    eax,edx
c00127a5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127ab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127af:	e9 7c ff ff ff       	jmp    c0012730 <VAS::VAS(bool)+0x9e>
c00127b4:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00127b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127bf:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127c5:	83 e0 10             	and    eax,0x10
c00127c8:	84 c0                	test   al,al
c00127ca:	74 07                	je     c00127d3 <VAS::VAS(bool)+0x141>
c00127cc:	b8 03 41 00 00       	mov    eax,0x4103
c00127d1:	eb 05                	jmp    c00127d8 <VAS::VAS(bool)+0x146>
c00127d3:	b8 03 40 00 00       	mov    eax,0x4003
c00127d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127dc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00127df:	81 c2 20 0c 00 00    	add    edx,0xc20
c00127e5:	89 02                	mov    DWORD PTR [edx],eax
c00127e7:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00127ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127f2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00127f8:	83 ec 08             	sub    esp,0x8
c00127fb:	50                   	push   eax
c00127fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012800:	e8 bd fc ff ff       	call   c00124c2 <VAS::setCPUSpecific(unsigned long)>
c0012805:	83 c4 10             	add    esp,0x10
c0012808:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001280c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001280f:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0012814:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001281a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012820:	83 e0 10             	and    eax,0x10
c0012823:	84 c0                	test   al,al
c0012825:	74 07                	je     c001282e <VAS::VAS(bool)+0x19c>
c0012827:	b8 00 01 00 00       	mov    eax,0x100
c001282c:	eb 05                	jmp    c0012833 <VAS::VAS(bool)+0x1a1>
c001282e:	b8 00 00 00 00       	mov    eax,0x0
c0012833:	09 c2                	or     edx,eax
c0012835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012839:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001283c:	05 fc 0f 00 00       	add    eax,0xffc
c0012841:	83 ca 03             	or     edx,0x3
c0012844:	89 10                	mov    DWORD PTR [eax],edx
c0012846:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001284b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012851:	83 ec 0c             	sub    esp,0xc
c0012854:	50                   	push   eax
c0012855:	e8 c8 19 00 00       	call   c0014222 <Device::getName()>
c001285a:	83 c4 10             	add    esp,0x10
c001285d:	83 ec 08             	sub    esp,0x8
c0012860:	68 27 a2 02 c0       	push   0xc002a227
c0012865:	50                   	push   eax
c0012866:	e8 55 e0 fe ff       	call   c00008c0 <strcmp>
c001286b:	83 c4 10             	add    esp,0x10
c001286e:	85 c0                	test   eax,eax
c0012870:	0f 94 c0             	sete   al
c0012873:	84 c0                	test   al,al
c0012875:	74 70                	je     c00128e7 <VAS::VAS(bool)+0x255>
c0012877:	e8 95 af 00 00       	call   c001d811 <disableIRQs()>
c001287c:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0012881:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012887:	05 7c 09 00 00       	add    eax,0x97c
c001288c:	83 ec 0c             	sub    esp,0xc
c001288f:	50                   	push   eax
c0012890:	e8 27 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012895:	83 c4 10             	add    esp,0x10
c0012898:	25 00 f0 ff ff       	and    eax,0xfffff000
c001289d:	89 c3                	mov    ebx,eax
c001289f:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00128a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128aa:	05 7c 09 00 00       	add    eax,0x97c
c00128af:	83 ec 0c             	sub    esp,0xc
c00128b2:	50                   	push   eax
c00128b3:	e8 04 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128b8:	83 c4 10             	add    esp,0x10
c00128bb:	83 ec 08             	sub    esp,0x8
c00128be:	50                   	push   eax
c00128bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128c3:	e8 9c f5 ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c00128c8:	83 c4 10             	add    esp,0x10
c00128cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00128cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128d2:	6a 11                	push   0x11
c00128d4:	53                   	push   ebx
c00128d5:	50                   	push   eax
c00128d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128da:	e8 0b f9 ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c00128df:	83 c4 10             	add    esp,0x10
c00128e2:	e8 38 af 00 00       	call   c001d81f <enableIRQs()>
c00128e7:	90                   	nop
c00128e8:	83 c4 28             	add    esp,0x28
c00128eb:	5b                   	pop    ebx
c00128ec:	c3                   	ret    

c00128ed <mapVASFirstTime>:
c00128ed:	55                   	push   ebp
c00128ee:	57                   	push   edi
c00128ef:	56                   	push   esi
c00128f0:	53                   	push   ebx
c00128f1:	83 ec 0c             	sub    esp,0xc
c00128f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128f9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00128fc:	4a                   	dec    edx
c00128fd:	0f 84 8e 00 00 00    	je     c0012991 <mapVASFirstTime+0xa4>
c0012903:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012906:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012909:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001290e:	c1 e5 15             	shl    ebp,0x15
c0012911:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012916:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001291c:	29 eb                	sub    ebx,ebp
c001291e:	29 ee                	sub    esi,ebp
c0012920:	e8 b8 d5 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012925:	83 ec 0c             	sub    esp,0xc
c0012928:	68 03 04 00 00       	push   0x403
c001292d:	6a 01                	push   0x1
c001292f:	53                   	push   ebx
c0012930:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012936:	50                   	push   eax
c0012937:	57                   	push   edi
c0012938:	e8 a1 fb ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001293d:	83 c4 20             	add    esp,0x20
c0012940:	39 f3                	cmp    ebx,esi
c0012942:	75 dc                	jne    c0012920 <mapVASFirstTime+0x33>
c0012944:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012949:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001294e:	29 ee                	sub    esi,ebp
c0012950:	29 e8                	sub    eax,ebp
c0012952:	89 c5                	mov    ebp,eax
c0012954:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012958:	19 db                	sbb    ebx,ebx
c001295a:	e8 7e d5 ff ff       	call   c000fedd <Phys::allocatePage()>
c001295f:	83 e3 04             	and    ebx,0x4
c0012962:	83 ec 0c             	sub    esp,0xc
c0012965:	81 c3 03 04 00 00    	add    ebx,0x403
c001296b:	53                   	push   ebx
c001296c:	6a 01                	push   0x1
c001296e:	56                   	push   esi
c001296f:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012975:	50                   	push   eax
c0012976:	57                   	push   edi
c0012977:	e8 62 fb ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001297c:	83 c4 20             	add    esp,0x20
c001297f:	39 f5                	cmp    ebp,esi
c0012981:	75 d1                	jne    c0012954 <mapVASFirstTime+0x67>
c0012983:	0f 20 d8             	mov    eax,cr3
c0012986:	0f 22 d8             	mov    cr3,eax
c0012989:	83 c4 0c             	add    esp,0xc
c001298c:	5b                   	pop    ebx
c001298d:	5e                   	pop    esi
c001298e:	5f                   	pop    edi
c001298f:	5d                   	pop    ebp
c0012990:	c3                   	ret    
c0012991:	83 ec 0c             	sub    esp,0xc
c0012994:	68 35 a2 02 c0       	push   0xc002a235
c0012999:	e8 71 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001299e:	83 c4 10             	add    esp,0x10
c00129a1:	83 c4 0c             	add    esp,0xc
c00129a4:	5b                   	pop    ebx
c00129a5:	5e                   	pop    esi
c00129a6:	5f                   	pop    edi
c00129a7:	5d                   	pop    ebp
c00129a8:	c3                   	ret    

c00129a9 <__cxa_atexit>:
c00129a9:	31 c0                	xor    eax,eax
c00129ab:	c3                   	ret    

c00129ac <__cxa_finalize>:
c00129ac:	c3                   	ret    

c00129ad <__stack_chk_fail>:
c00129ad:	55                   	push   ebp
c00129ae:	89 e5                	mov    ebp,esp
c00129b0:	83 ec 14             	sub    esp,0x14
c00129b3:	68 4e a2 02 c0       	push   0xc002a24e
c00129b8:	e8 52 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00129bd:	58                   	pop    eax
c00129be:	5a                   	pop    edx
c00129bf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00129c2:	68 9e a2 02 c0       	push   0xc002a29e
c00129c7:	e8 43 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00129cc:	59                   	pop    ecx
c00129cd:	58                   	pop    eax
c00129ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129d4:	68 9e a2 02 c0       	push   0xc002a29e
c00129d9:	e8 31 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00129de:	5a                   	pop    edx
c00129df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129e2:	59                   	pop    ecx
c00129e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00129e5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129e8:	68 9e a2 02 c0       	push   0xc002a29e
c00129ed:	e8 1d 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00129f2:	5a                   	pop    edx
c00129f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129f6:	59                   	pop    ecx
c00129f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00129f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00129fb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129fe:	68 9e a2 02 c0       	push   0xc002a29e
c0012a03:	e8 07 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0012a08:	c7 04 24 a6 a2 02 c0 	mov    DWORD PTR [esp],0xc002a2a6
c0012a0f:	e8 8b 77 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0012a14:	83 c4 10             	add    esp,0x10
c0012a17:	c9                   	leave  
c0012a18:	c3                   	ret    

c0012a19 <__cxa_pure_virtual>:
c0012a19:	83 ec 18             	sub    esp,0x18
c0012a1c:	68 be a2 02 c0       	push   0xc002a2be
c0012a21:	e8 79 77 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0012a26:	83 c4 1c             	add    esp,0x1c
c0012a29:	c3                   	ret    

c0012a2a <operator new[](unsigned long)>:
c0012a2a:	e9 11 ce ff ff       	jmp    c000f840 <malloc>

c0012a2f <operator delete(void*, unsigned long)>:
c0012a2f:	e9 2c ce ff ff       	jmp    c000f860 <rfree>

c0012a34 <operator delete[](void*)>:
c0012a34:	e9 27 ce ff ff       	jmp    c000f860 <rfree>

c0012a39 <operator delete[](void*, unsigned long)>:
c0012a39:	e9 22 ce ff ff       	jmp    c000f860 <rfree>

c0012a3e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012a3e:	57                   	push   edi
c0012a3f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012a44:	56                   	push   esi
c0012a45:	be d4 a2 02 c0       	mov    esi,0xc002a2d4
c0012a4a:	53                   	push   ebx
c0012a4b:	83 ec 40             	sub    esp,0x40
c0012a4e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a52:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012a56:	fc                   	cld    
c0012a57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a59:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012a5d:	83 f9 3e             	cmp    ecx,0x3e
c0012a60:	7e 05                	jle    c0012a67 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012a62:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012a67:	89 df                	mov    edi,ebx
c0012a69:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a6d:	eb 02                	jmp    c0012a71 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012a6f:	89 c7                	mov    edi,eax
c0012a71:	31 d2                	xor    edx,edx
c0012a73:	46                   	inc    esi
c0012a74:	89 f8                	mov    eax,edi
c0012a76:	f7 f1                	div    ecx
c0012a78:	39 cf                	cmp    edi,ecx
c0012a7a:	73 f3                	jae    c0012a6f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012a7c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a7f:	eb 02                	jmp    c0012a83 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012a81:	89 c3                	mov    ebx,eax
c0012a83:	31 d2                	xor    edx,edx
c0012a85:	4e                   	dec    esi
c0012a86:	89 d8                	mov    eax,ebx
c0012a88:	f7 f1                	div    ecx
c0012a8a:	39 cb                	cmp    ebx,ecx
c0012a8c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012a90:	88 16                	mov    BYTE PTR [esi],dl
c0012a92:	73 ed                	jae    c0012a81 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012a94:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012a98:	83 c4 40             	add    esp,0x40
c0012a9b:	5b                   	pop    ebx
c0012a9c:	5e                   	pop    esi
c0012a9d:	5f                   	pop    edi
c0012a9e:	c3                   	ret    

c0012a9f <Dbg::logc(char)>:
c0012a9f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012aa3:	ba fd 03 00 00       	mov    edx,0x3fd
c0012aa8:	ec                   	in     al,dx
c0012aa9:	a8 20                	test   al,0x20
c0012aab:	74 fb                	je     c0012aa8 <Dbg::logc(char)+0x9>
c0012aad:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ab2:	88 c8                	mov    al,cl
c0012ab4:	ee                   	out    dx,al
c0012ab5:	c3                   	ret    

c0012ab6 <Dbg::logs(char*)>:
c0012ab6:	53                   	push   ebx
c0012ab7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012abb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012abe:	84 c0                	test   al,al
c0012ac0:	74 0f                	je     c0012ad1 <Dbg::logs(char*)+0x1b>
c0012ac2:	50                   	push   eax
c0012ac3:	43                   	inc    ebx
c0012ac4:	e8 d6 ff ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012ac9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012acc:	5a                   	pop    edx
c0012acd:	84 c0                	test   al,al
c0012acf:	75 f1                	jne    c0012ac2 <Dbg::logs(char*)+0xc>
c0012ad1:	5b                   	pop    ebx
c0012ad2:	c3                   	ret    

c0012ad3 <Dbg::logWriteInt(unsigned int)>:
c0012ad3:	83 ec 10             	sub    esp,0x10
c0012ad6:	6a 0a                	push   0xa
c0012ad8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012adc:	50                   	push   eax
c0012add:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae1:	e8 58 ff ff ff       	call   c0012a3e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ae6:	50                   	push   eax
c0012ae7:	e8 ca ff ff ff       	call   c0012ab6 <Dbg::logs(char*)>
c0012aec:	83 c4 20             	add    esp,0x20
c0012aef:	c3                   	ret    

c0012af0 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012af0:	83 ec 10             	sub    esp,0x10
c0012af3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012af7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012afb:	50                   	push   eax
c0012afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b00:	e8 39 ff ff ff       	call   c0012a3e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b05:	50                   	push   eax
c0012b06:	e8 ab ff ff ff       	call   c0012ab6 <Dbg::logs(char*)>
c0012b0b:	83 c4 20             	add    esp,0x20
c0012b0e:	c3                   	ret    

c0012b0f <Dbg::kprintf(char const*, ...)>:
c0012b0f:	55                   	push   ebp
c0012b10:	57                   	push   edi
c0012b11:	56                   	push   esi
c0012b12:	53                   	push   ebx
c0012b13:	83 ec 0c             	sub    esp,0xc
c0012b16:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b1a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b22:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b25:	84 c0                	test   al,al
c0012b27:	74 4a                	je     c0012b73 <Dbg::kprintf(char const*, ...)+0x64>
c0012b29:	31 db                	xor    ebx,ebx
c0012b2b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b2e:	3c 25                	cmp    al,0x25
c0012b30:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012b33:	0f 85 e4 00 00 00    	jne    c0012c1d <Dbg::kprintf(char const*, ...)+0x10e>
c0012b39:	83 c3 02             	add    ebx,0x2
c0012b3c:	8a 07                	mov    al,BYTE PTR [edi]
c0012b3e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012b41:	83 e8 25             	sub    eax,0x25
c0012b44:	3c 53                	cmp    al,0x53
c0012b46:	0f 87 ba 00 00 00    	ja     c0012c06 <Dbg::kprintf(char const*, ...)+0xf7>
c0012b4c:	0f b6 c0             	movzx  eax,al
c0012b4f:	ff 24 85 14 a3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5cec]
c0012b56:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b5a:	89 c8                	mov    eax,ecx
c0012b5c:	83 c1 04             	add    ecx,0x4
c0012b5f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012b63:	ff 30                	push   DWORD PTR [eax]
c0012b65:	e8 4c ff ff ff       	call   c0012ab6 <Dbg::logs(char*)>
c0012b6a:	58                   	pop    eax
c0012b6b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012b6f:	84 c0                	test   al,al
c0012b71:	75 b8                	jne    c0012b2b <Dbg::kprintf(char const*, ...)+0x1c>
c0012b73:	83 c4 0c             	add    esp,0xc
c0012b76:	5b                   	pop    ebx
c0012b77:	5e                   	pop    esi
c0012b78:	5f                   	pop    edi
c0012b79:	5d                   	pop    ebp
c0012b7a:	c3                   	ret    
c0012b7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b7f:	89 d0                	mov    eax,edx
c0012b81:	83 c2 04             	add    edx,0x4
c0012b84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b88:	ff 30                	push   DWORD PTR [eax]
c0012b8a:	e8 44 ff ff ff       	call   c0012ad3 <Dbg::logWriteInt(unsigned int)>
c0012b8f:	58                   	pop    eax
c0012b90:	eb d9                	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012b92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b96:	89 d0                	mov    eax,edx
c0012b98:	83 c2 04             	add    edx,0x4
c0012b9b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012b9e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ba2:	50                   	push   eax
c0012ba3:	e8 f7 fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012ba8:	58                   	pop    eax
c0012ba9:	eb c0                	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012bab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012baf:	89 c8                	mov    eax,ecx
c0012bb1:	83 c1 04             	add    ecx,0x4
c0012bb4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bb8:	ff 30                	push   DWORD PTR [eax]
c0012bba:	e8 14 ff ff ff       	call   c0012ad3 <Dbg::logWriteInt(unsigned int)>
c0012bbf:	5f                   	pop    edi
c0012bc0:	eb a9                	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012bc2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bc6:	89 c8                	mov    eax,ecx
c0012bc8:	83 c1 04             	add    ecx,0x4
c0012bcb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bcf:	6a 10                	push   0x10
c0012bd1:	ff 30                	push   DWORD PTR [eax]
c0012bd3:	e8 18 ff ff ff       	call   c0012af0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bd8:	59                   	pop    ecx
c0012bd9:	5f                   	pop    edi
c0012bda:	eb 8f                	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012bdc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012be0:	89 d0                	mov    eax,edx
c0012be2:	83 c2 08             	add    edx,0x8
c0012be5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012be9:	6a 10                	push   0x10
c0012beb:	ff 30                	push   DWORD PTR [eax]
c0012bed:	e8 fe fe ff ff       	call   c0012af0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bf2:	58                   	pop    eax
c0012bf3:	5a                   	pop    edx
c0012bf4:	e9 72 ff ff ff       	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012bf9:	6a 25                	push   0x25
c0012bfb:	e8 9f fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012c00:	58                   	pop    eax
c0012c01:	e9 65 ff ff ff       	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012c06:	6a 25                	push   0x25
c0012c08:	e8 92 fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012c0d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012c10:	50                   	push   eax
c0012c11:	e8 89 fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012c16:	5a                   	pop    edx
c0012c17:	59                   	pop    ecx
c0012c18:	e9 4e ff ff ff       	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012c1d:	50                   	push   eax
c0012c1e:	89 eb                	mov    ebx,ebp
c0012c20:	e8 7a fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012c25:	89 fd                	mov    ebp,edi
c0012c27:	58                   	pop    eax
c0012c28:	e9 3e ff ff ff       	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012c2d:	90                   	nop

c0012c2e <File::read(unsigned long long, void*, int*)>:
c0012c2e:	53                   	push   ebx
c0012c2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c33:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c37:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c3e:	3c 19                	cmp    al,0x19
c0012c40:	77 35                	ja     c0012c77 <File::read(unsigned long long, void*, int*)+0x49>
c0012c42:	8b 04 85 20 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ce0]
c0012c49:	85 c0                	test   eax,eax
c0012c4b:	74 2a                	je     c0012c77 <File::read(unsigned long long, void*, int*)+0x49>
c0012c4d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c53:	85 c0                	test   eax,eax
c0012c55:	74 20                	je     c0012c77 <File::read(unsigned long long, void*, int*)+0x49>
c0012c57:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c5b:	74 21                	je     c0012c7e <File::read(unsigned long long, void*, int*)+0x50>
c0012c5d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c5f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c63:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c71:	5b                   	pop    ebx
c0012c72:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012c75:	ff e0                	jmp    eax
c0012c77:	b8 0b 00 00 00       	mov    eax,0xb
c0012c7c:	eb 05                	jmp    c0012c83 <File::read(unsigned long long, void*, int*)+0x55>
c0012c7e:	b8 05 00 00 00       	mov    eax,0x5
c0012c83:	5b                   	pop    ebx
c0012c84:	c3                   	ret    
c0012c85:	90                   	nop

c0012c86 <File::write(unsigned long long, void*, int*)>:
c0012c86:	53                   	push   ebx
c0012c87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c8b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c8f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c96:	3c 19                	cmp    al,0x19
c0012c98:	77 35                	ja     c0012ccf <File::write(unsigned long long, void*, int*)+0x49>
c0012c9a:	8b 04 85 20 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ce0]
c0012ca1:	85 c0                	test   eax,eax
c0012ca3:	74 2a                	je     c0012ccf <File::write(unsigned long long, void*, int*)+0x49>
c0012ca5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cab:	85 c0                	test   eax,eax
c0012cad:	74 20                	je     c0012ccf <File::write(unsigned long long, void*, int*)+0x49>
c0012caf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cb3:	74 21                	je     c0012cd6 <File::write(unsigned long long, void*, int*)+0x50>
c0012cb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012cb7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012cbb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012cc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012cc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012cc9:	5b                   	pop    ebx
c0012cca:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ccd:	ff e0                	jmp    eax
c0012ccf:	b8 0b 00 00 00       	mov    eax,0xb
c0012cd4:	eb 05                	jmp    c0012cdb <File::write(unsigned long long, void*, int*)+0x55>
c0012cd6:	b8 05 00 00 00       	mov    eax,0x5
c0012cdb:	5b                   	pop    ebx
c0012cdc:	c3                   	ret    
c0012cdd:	90                   	nop

c0012cde <Directory::read(unsigned long long, void*, int*)>:
c0012cde:	53                   	push   ebx
c0012cdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ce3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ce7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012cee:	3c 19                	cmp    al,0x19
c0012cf0:	77 35                	ja     c0012d27 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cf2:	8b 04 85 20 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ce0]
c0012cf9:	85 c0                	test   eax,eax
c0012cfb:	74 2a                	je     c0012d27 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cfd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d03:	85 c0                	test   eax,eax
c0012d05:	74 20                	je     c0012d27 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d0b:	74 21                	je     c0012d2e <Directory::read(unsigned long long, void*, int*)+0x50>
c0012d0d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d13:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d21:	5b                   	pop    ebx
c0012d22:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012d25:	ff e0                	jmp    eax
c0012d27:	b8 0b 00 00 00       	mov    eax,0xb
c0012d2c:	eb 05                	jmp    c0012d33 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012d2e:	b8 05 00 00 00       	mov    eax,0x5
c0012d33:	5b                   	pop    ebx
c0012d34:	c3                   	ret    
c0012d35:	90                   	nop

c0012d36 <Directory::write(unsigned long long, void*, int*)>:
c0012d36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d3a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012d41:	b8 0b 00 00 00       	mov    eax,0xb
c0012d46:	80 fa 19             	cmp    dl,0x19
c0012d49:	77 18                	ja     c0012d63 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d4b:	8b 14 95 20 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ce0]
c0012d52:	85 d2                	test   edx,edx
c0012d54:	74 0d                	je     c0012d63 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d56:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012d5d:	19 c0                	sbb    eax,eax
c0012d5f:	83 e0 0a             	and    eax,0xa
c0012d62:	40                   	inc    eax
c0012d63:	c3                   	ret    

c0012d64 <File::isAtty()>:
c0012d64:	31 c0                	xor    eax,eax
c0012d66:	c3                   	ret    
c0012d67:	90                   	nop

c0012d68 <Directory::isAtty()>:
c0012d68:	31 c0                	xor    eax,eax
c0012d6a:	c3                   	ret    
c0012d6b:	90                   	nop

c0012d6c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012d6c:	b8 0a 00 00 00       	mov    eax,0xa
c0012d71:	c3                   	ret    

c0012d72 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012d72:	b8 0a 00 00 00       	mov    eax,0xa
c0012d77:	c3                   	ret    

c0012d78 <File::~File()>:
c0012d78:	83 ec 0c             	sub    esp,0xc
c0012d7b:	ba d0 a4 02 c0       	mov    edx,0xc002a4d0
c0012d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d84:	89 10                	mov    DWORD PTR [eax],edx
c0012d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8a:	83 ec 0c             	sub    esp,0xc
c0012d8d:	50                   	push   eax
c0012d8e:	e8 2b eb ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0012d93:	83 c4 10             	add    esp,0x10
c0012d96:	90                   	nop
c0012d97:	83 c4 0c             	add    esp,0xc
c0012d9a:	c3                   	ret    
c0012d9b:	90                   	nop

c0012d9c <File::~File()>:
c0012d9c:	83 ec 0c             	sub    esp,0xc
c0012d9f:	83 ec 0c             	sub    esp,0xc
c0012da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da6:	e8 cd ff ff ff       	call   c0012d78 <File::~File()>
c0012dab:	83 c4 10             	add    esp,0x10
c0012dae:	83 ec 08             	sub    esp,0x8
c0012db1:	68 14 01 00 00       	push   0x114
c0012db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dba:	e8 70 fc ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0012dbf:	83 c4 10             	add    esp,0x10
c0012dc2:	83 c4 0c             	add    esp,0xc
c0012dc5:	c3                   	ret    

c0012dc6 <Directory::~Directory()>:
c0012dc6:	83 ec 0c             	sub    esp,0xc
c0012dc9:	ba ec a4 02 c0       	mov    edx,0xc002a4ec
c0012dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd2:	89 10                	mov    DWORD PTR [eax],edx
c0012dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd8:	83 ec 0c             	sub    esp,0xc
c0012ddb:	50                   	push   eax
c0012ddc:	e8 dd ea ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0012de1:	83 c4 10             	add    esp,0x10
c0012de4:	90                   	nop
c0012de5:	83 c4 0c             	add    esp,0xc
c0012de8:	c3                   	ret    
c0012de9:	90                   	nop

c0012dea <Directory::~Directory()>:
c0012dea:	83 ec 0c             	sub    esp,0xc
c0012ded:	83 ec 0c             	sub    esp,0xc
c0012df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012df4:	e8 cd ff ff ff       	call   c0012dc6 <Directory::~Directory()>
c0012df9:	83 c4 10             	add    esp,0x10
c0012dfc:	83 ec 08             	sub    esp,0x8
c0012dff:	68 14 01 00 00       	push   0x114
c0012e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e08:	e8 22 fc ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0012e0d:	83 c4 10             	add    esp,0x10
c0012e10:	83 c4 0c             	add    esp,0xc
c0012e13:	c3                   	ret    

c0012e14 <Filesystem::Filesystem()>:
c0012e14:	ba 6c a4 02 c0       	mov    edx,0xc002a46c
c0012e19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e1d:	89 10                	mov    DWORD PTR [eax],edx
c0012e1f:	8b 15 88 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de88
c0012e25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e30:	a3 88 de 02 c0       	mov    ds:0xc002de88,eax
c0012e35:	90                   	nop
c0012e36:	c3                   	ret    
c0012e37:	90                   	nop

c0012e38 <Filesystem::~Filesystem()>:
c0012e38:	ba 6c a4 02 c0       	mov    edx,0xc002a46c
c0012e3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e41:	89 10                	mov    DWORD PTR [eax],edx
c0012e43:	90                   	nop
c0012e44:	c3                   	ret    
c0012e45:	90                   	nop

c0012e46 <Filesystem::~Filesystem()>:
c0012e46:	83 ec 0c             	sub    esp,0xc
c0012e49:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e4d:	e8 e6 ff ff ff       	call   c0012e38 <Filesystem::~Filesystem()>
c0012e52:	83 c4 04             	add    esp,0x4
c0012e55:	83 ec 08             	sub    esp,0x8
c0012e58:	6a 08                	push   0x8
c0012e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e5e:	e8 cc fb ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0012e63:	83 c4 10             	add    esp,0x10
c0012e66:	83 c4 0c             	add    esp,0xc
c0012e69:	c3                   	ret    

c0012e6a <Fs::getcwd(Process*, char*, int)>:
c0012e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e6e:	31 c0                	xor    eax,eax
c0012e70:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e73:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012e77:	7d 15                	jge    c0012e8e <Fs::getcwd(Process*, char*, int)+0x24>
c0012e79:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e7d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012e84:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012e87:	84 c9                	test   cl,cl
c0012e89:	74 06                	je     c0012e91 <Fs::getcwd(Process*, char*, int)+0x27>
c0012e8b:	40                   	inc    eax
c0012e8c:	eb e2                	jmp    c0012e70 <Fs::getcwd(Process*, char*, int)+0x6>
c0012e8e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012e91:	31 c0                	xor    eax,eax
c0012e93:	c3                   	ret    

c0012e94 <Fs::initVFS()>:
c0012e94:	83 ec 18             	sub    esp,0x18
c0012e97:	6a 08                	push   0x8
c0012e99:	e8 a2 c9 ff ff       	call   c000f840 <malloc>
c0012e9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ea1:	e8 fc da 00 00       	call   c00209a2 <FAT::FAT()>
c0012ea6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ead:	e8 8e c9 ff ff       	call   c000f840 <malloc>
c0012eb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eb5:	e8 40 ed 00 00       	call   c0021bfa <ISO9660::ISO9660()>
c0012eba:	83 c4 1c             	add    esp,0x1c
c0012ebd:	c3                   	ret    

c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ebe:	55                   	push   ebp
c0012ebf:	57                   	push   edi
c0012ec0:	56                   	push   esi
c0012ec1:	53                   	push   ebx
c0012ec2:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ec8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ecf:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012ed6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012edd:	68 00 04 00 00       	push   0x400
c0012ee2:	6a 00                	push   0x0
c0012ee4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ee8:	56                   	push   esi
c0012ee9:	e8 8a d8 fe ff       	call   c0000778 <memset>
c0012eee:	83 c4 10             	add    esp,0x10
c0012ef1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ef5:	75 0b                	jne    c0012f02 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ef7:	50                   	push   eax
c0012ef8:	50                   	push   eax
c0012ef9:	57                   	push   edi
c0012efa:	56                   	push   esi
c0012efb:	e8 34 d9 fe ff       	call   c0000834 <strcpy>
c0012f00:	eb 41                	jmp    c0012f43 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012f02:	8a 07                	mov    al,BYTE PTR [edi]
c0012f04:	3c 5c                	cmp    al,0x5c
c0012f06:	74 04                	je     c0012f0c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012f08:	3c 2f                	cmp    al,0x2f
c0012f0a:	75 18                	jne    c0012f24 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012f0c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012f0f:	3c 60                	cmp    al,0x60
c0012f11:	7e 03                	jle    c0012f16 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012f13:	83 e8 20             	sub    eax,0x20
c0012f16:	88 04 24             	mov    BYTE PTR [esp],al
c0012f19:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f20:	50                   	push   eax
c0012f21:	50                   	push   eax
c0012f22:	eb 18                	jmp    c0012f3c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012f24:	50                   	push   eax
c0012f25:	50                   	push   eax
c0012f26:	55                   	push   ebp
c0012f27:	56                   	push   esi
c0012f28:	e8 07 d9 fe ff       	call   c0000834 <strcpy>
c0012f2d:	5a                   	pop    edx
c0012f2e:	59                   	pop    ecx
c0012f2f:	68 f7 ba 02 c0       	push   0xc002baf7
c0012f34:	56                   	push   esi
c0012f35:	e8 3a da fe ff       	call   c0000974 <strcat>
c0012f3a:	5d                   	pop    ebp
c0012f3b:	58                   	pop    eax
c0012f3c:	57                   	push   edi
c0012f3d:	56                   	push   esi
c0012f3e:	e8 31 da fe ff       	call   c0000974 <strcat>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012f49:	3c 60                	cmp    al,0x60
c0012f4b:	7e 03                	jle    c0012f50 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012f4d:	83 e8 20             	sub    eax,0x20
c0012f50:	88 04 24             	mov    BYTE PTR [esp],al
c0012f53:	88 03                	mov    BYTE PTR [ebx],al
c0012f55:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f5c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012f62:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012f66:	bf 03 00 00 00       	mov    edi,0x3
c0012f6b:	b8 03 00 00 00       	mov    eax,0x3
c0012f70:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012f73:	84 d2                	test   dl,dl
c0012f75:	0f 84 91 00 00 00    	je     c001300c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012f7b:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012f7e:	80 fa 5c             	cmp    dl,0x5c
c0012f81:	74 05                	je     c0012f88 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012f83:	80 fa 2f             	cmp    dl,0x2f
c0012f86:	75 12                	jne    c0012f9a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f88:	89 c5                	mov    ebp,eax
c0012f8a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f8f:	74 09                	je     c0012f9a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f91:	40                   	inc    eax
c0012f92:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012f96:	89 cf                	mov    edi,ecx
c0012f98:	eb d6                	jmp    c0012f70 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012f9a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012f9f:	75 5b                	jne    c0012ffc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fa1:	80 fa 2e             	cmp    dl,0x2e
c0012fa4:	75 56                	jne    c0012ffc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fa6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012faa:	74 19                	je     c0012fc5 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012fac:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fb1:	74 53                	je     c0013006 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fb3:	89 f9                	mov    ecx,edi
c0012fb5:	41                   	inc    ecx
c0012fb6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fb9:	80 fa 2f             	cmp    dl,0x2f
c0012fbc:	74 f7                	je     c0012fb5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fbe:	80 fa 5c             	cmp    dl,0x5c
c0012fc1:	74 f2                	je     c0012fb5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fc3:	eb d1                	jmp    c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fc5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fca:	74 3a                	je     c0013006 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fcc:	83 f8 03             	cmp    eax,0x3
c0012fcf:	74 c5                	je     c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fd1:	41                   	inc    ecx
c0012fd2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fd5:	80 fa 2f             	cmp    dl,0x2f
c0012fd8:	74 f7                	je     c0012fd1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fda:	80 fa 5c             	cmp    dl,0x5c
c0012fdd:	74 f2                	je     c0012fd1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fdf:	48                   	dec    eax
c0012fe0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012fe4:	75 06                	jne    c0012fec <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012fe6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012fea:	eb f3                	jmp    c0012fdf <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012fec:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ff0:	74 07                	je     c0012ff9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ff2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ff6:	48                   	dec    eax
c0012ff7:	eb f3                	jmp    c0012fec <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ff9:	40                   	inc    eax
c0012ffa:	eb 9a                	jmp    c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ffc:	80 fa 2f             	cmp    dl,0x2f
c0012fff:	74 95                	je     c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013001:	80 fa 5c             	cmp    dl,0x5c
c0013004:	74 90                	je     c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013006:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013009:	40                   	inc    eax
c001300a:	eb 8a                	jmp    c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001300c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013010:	83 ec 0c             	sub    esp,0xc
c0013013:	53                   	push   ebx
c0013014:	e8 7b d7 fe ff       	call   c0000794 <strlen>
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013021:	75 26                	jne    c0013049 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013023:	83 ec 0c             	sub    esp,0xc
c0013026:	53                   	push   ebx
c0013027:	e8 68 d7 fe ff       	call   c0000794 <strlen>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013034:	74 26                	je     c001305c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013036:	83 ec 0c             	sub    esp,0xc
c0013039:	53                   	push   ebx
c001303a:	e8 55 d7 fe ff       	call   c0000794 <strlen>
c001303f:	83 c4 10             	add    esp,0x10
c0013042:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013047:	eb c7                	jmp    c0013010 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013049:	83 ec 0c             	sub    esp,0xc
c001304c:	53                   	push   ebx
c001304d:	e8 42 d7 fe ff       	call   c0000794 <strlen>
c0013052:	83 c4 10             	add    esp,0x10
c0013055:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001305a:	74 c7                	je     c0013023 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001305c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013062:	5b                   	pop    ebx
c0013063:	5e                   	pop    esi
c0013064:	5f                   	pop    edi
c0013065:	5d                   	pop    ebp
c0013066:	c3                   	ret    
c0013067:	90                   	nop

c0013068 <File::File(char const*, Process*)>:
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306f:	83 ec 08             	sub    esp,0x8
c0013072:	6a 00                	push   0x0
c0013074:	50                   	push   eax
c0013075:	e8 62 e6 ff ff       	call   c00116dc <UnixFile::UnixFile(int)>
c001307a:	83 c4 10             	add    esp,0x10
c001307d:	ba d0 a4 02 c0       	mov    edx,0xc002a4d0
c0013082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013086:	89 10                	mov    DWORD PTR [eax],edx
c0013088:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001308c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013096:	83 c0 0d             	add    eax,0xd
c0013099:	83 ec 04             	sub    esp,0x4
c001309c:	52                   	push   edx
c001309d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a1:	50                   	push   eax
c00130a2:	e8 17 fe ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c00130a7:	83 c4 10             	add    esp,0x10
c00130aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ae:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130b1:	8d 50 bf             	lea    edx,[eax-0x41]
c00130b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130c6:	90                   	nop
c00130c7:	83 c4 0c             	add    esp,0xc
c00130ca:	c3                   	ret    
c00130cb:	90                   	nop

c00130cc <File::open(FileOpenMode)>:
c00130cc:	53                   	push   ebx
c00130cd:	b8 0b 00 00 00       	mov    eax,0xb
c00130d2:	83 ec 08             	sub    esp,0x8
c00130d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130d9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130e0:	80 fa 19             	cmp    dl,0x19
c00130e3:	77 40                	ja     c0013125 <File::open(FileOpenMode)+0x59>
c00130e5:	8b 14 95 20 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ce0]
c00130ec:	85 d2                	test   edx,edx
c00130ee:	74 35                	je     c0013125 <File::open(FileOpenMode)+0x59>
c00130f0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130f6:	85 d2                	test   edx,edx
c00130f8:	74 2b                	je     c0013125 <File::open(FileOpenMode)+0x59>
c00130fa:	b8 06 00 00 00       	mov    eax,0x6
c00130ff:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013103:	75 20                	jne    c0013125 <File::open(FileOpenMode)+0x59>
c0013105:	8b 02                	mov    eax,DWORD PTR [edx]
c0013107:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001310d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013111:	51                   	push   ecx
c0013112:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013115:	51                   	push   ecx
c0013116:	52                   	push   edx
c0013117:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001311a:	83 c4 10             	add    esp,0x10
c001311d:	85 c0                	test   eax,eax
c001311f:	75 04                	jne    c0013125 <File::open(FileOpenMode)+0x59>
c0013121:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013125:	83 c4 08             	add    esp,0x8
c0013128:	5b                   	pop    ebx
c0013129:	c3                   	ret    

c001312a <File::close()>:
c001312a:	53                   	push   ebx
c001312b:	b8 0b 00 00 00       	mov    eax,0xb
c0013130:	83 ec 08             	sub    esp,0x8
c0013133:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013137:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001313e:	80 fa 19             	cmp    dl,0x19
c0013141:	77 41                	ja     c0013184 <File::close()+0x5a>
c0013143:	8b 1c 95 20 e3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1ce0]
c001314a:	85 db                	test   ebx,ebx
c001314c:	74 36                	je     c0013184 <File::close()+0x5a>
c001314e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013155:	74 2d                	je     c0013184 <File::close()+0x5a>
c0013157:	b8 05 00 00 00       	mov    eax,0x5
c001315c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013160:	74 22                	je     c0013184 <File::close()+0x5a>
c0013162:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013166:	8b 04 95 20 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ce0]
c001316d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013173:	53                   	push   ebx
c0013174:	53                   	push   ebx
c0013175:	8b 10                	mov    edx,DWORD PTR [eax]
c0013177:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001317d:	50                   	push   eax
c001317e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013181:	83 c4 10             	add    esp,0x10
c0013184:	83 c4 08             	add    esp,0x8
c0013187:	5b                   	pop    ebx
c0013188:	c3                   	ret    
c0013189:	90                   	nop

c001318a <File::seek(unsigned long long)>:
c001318a:	56                   	push   esi
c001318b:	53                   	push   ebx
c001318c:	b8 0b 00 00 00       	mov    eax,0xb
c0013191:	51                   	push   ecx
c0013192:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013196:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001319a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00131a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131a5:	80 fa 19             	cmp    dl,0x19
c00131a8:	77 31                	ja     c00131db <File::seek(unsigned long long)+0x51>
c00131aa:	8b 14 95 20 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ce0]
c00131b1:	85 d2                	test   edx,edx
c00131b3:	74 26                	je     c00131db <File::seek(unsigned long long)+0x51>
c00131b5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131bb:	85 d2                	test   edx,edx
c00131bd:	74 1c                	je     c00131db <File::seek(unsigned long long)+0x51>
c00131bf:	b8 05 00 00 00       	mov    eax,0x5
c00131c4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00131c8:	74 11                	je     c00131db <File::seek(unsigned long long)+0x51>
c00131ca:	8b 02                	mov    eax,DWORD PTR [edx]
c00131cc:	53                   	push   ebx
c00131cd:	51                   	push   ecx
c00131ce:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00131d4:	52                   	push   edx
c00131d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00131d8:	83 c4 10             	add    esp,0x10
c00131db:	5a                   	pop    edx
c00131dc:	5b                   	pop    ebx
c00131dd:	5e                   	pop    esi
c00131de:	c3                   	ret    
c00131df:	90                   	nop

c00131e0 <File::tell(unsigned long long*)>:
c00131e0:	83 ec 0c             	sub    esp,0xc
c00131e3:	b8 0b 00 00 00       	mov    eax,0xb
c00131e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131ec:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131f3:	80 fa 19             	cmp    dl,0x19
c00131f6:	77 34                	ja     c001322c <File::tell(unsigned long long*)+0x4c>
c00131f8:	8b 14 95 20 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ce0]
c00131ff:	85 d2                	test   edx,edx
c0013201:	74 29                	je     c001322c <File::tell(unsigned long long*)+0x4c>
c0013203:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013209:	85 d2                	test   edx,edx
c001320b:	74 1f                	je     c001322c <File::tell(unsigned long long*)+0x4c>
c001320d:	b8 05 00 00 00       	mov    eax,0x5
c0013212:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013216:	74 14                	je     c001322c <File::tell(unsigned long long*)+0x4c>
c0013218:	50                   	push   eax
c0013219:	8b 02                	mov    eax,DWORD PTR [edx]
c001321b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001321f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013225:	52                   	push   edx
c0013226:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	83 c4 0c             	add    esp,0xc
c001322f:	c3                   	ret    

c0013230 <File::rewind()>:
c0013230:	83 ec 10             	sub    esp,0x10
c0013233:	6a 00                	push   0x0
c0013235:	6a 00                	push   0x0
c0013237:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323b:	e8 4a ff ff ff       	call   c001318a <File::seek(unsigned long long)>
c0013240:	83 c4 1c             	add    esp,0x1c
c0013243:	c3                   	ret    

c0013244 <File::unlink()>:
c0013244:	83 ec 0c             	sub    esp,0xc
c0013247:	b8 0b 00 00 00       	mov    eax,0xb
c001324c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013250:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013257:	80 f9 19             	cmp    cl,0x19
c001325a:	77 2f                	ja     c001328b <File::unlink()+0x47>
c001325c:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c0013263:	85 c9                	test   ecx,ecx
c0013265:	74 24                	je     c001328b <File::unlink()+0x47>
c0013267:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001326d:	85 c9                	test   ecx,ecx
c001326f:	74 1a                	je     c001328b <File::unlink()+0x47>
c0013271:	b8 06 00 00 00       	mov    eax,0x6
c0013276:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001327a:	75 0f                	jne    c001328b <File::unlink()+0x47>
c001327c:	83 c2 0d             	add    edx,0xd
c001327f:	50                   	push   eax
c0013280:	50                   	push   eax
c0013281:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013283:	52                   	push   edx
c0013284:	51                   	push   ecx
c0013285:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013288:	83 c4 10             	add    esp,0x10
c001328b:	83 c4 0c             	add    esp,0xc
c001328e:	c3                   	ret    
c001328f:	90                   	nop

c0013290 <File::rename(char const*)>:
c0013290:	83 ec 0c             	sub    esp,0xc
c0013293:	b8 0b 00 00 00       	mov    eax,0xb
c0013298:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001329c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a3:	80 f9 19             	cmp    cl,0x19
c00132a6:	77 32                	ja     c00132da <File::rename(char const*)+0x4a>
c00132a8:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c00132af:	85 c9                	test   ecx,ecx
c00132b1:	74 27                	je     c00132da <File::rename(char const*)+0x4a>
c00132b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b9:	85 c9                	test   ecx,ecx
c00132bb:	74 1d                	je     c00132da <File::rename(char const*)+0x4a>
c00132bd:	b8 06 00 00 00       	mov    eax,0x6
c00132c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132c6:	75 12                	jne    c00132da <File::rename(char const*)+0x4a>
c00132c8:	83 c2 0d             	add    edx,0xd
c00132cb:	50                   	push   eax
c00132cc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132d2:	52                   	push   edx
c00132d3:	51                   	push   ecx
c00132d4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132d7:	83 c4 10             	add    esp,0x10
c00132da:	83 c4 0c             	add    esp,0xc
c00132dd:	c3                   	ret    

c00132de <File::chfatattr(unsigned char, unsigned char)>:
c00132de:	57                   	push   edi
c00132df:	b8 0b 00 00 00       	mov    eax,0xb
c00132e4:	56                   	push   esi
c00132e5:	53                   	push   ebx
c00132e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00132f9:	80 f9 19             	cmp    cl,0x19
c00132fc:	77 37                	ja     c0013335 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00132fe:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c0013305:	85 c9                	test   ecx,ecx
c0013307:	74 2c                	je     c0013335 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013309:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001330f:	85 c9                	test   ecx,ecx
c0013311:	74 22                	je     c0013335 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013313:	b8 06 00 00 00       	mov    eax,0x6
c0013318:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001331c:	75 17                	jne    c0013335 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001331e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013320:	89 f0                	mov    eax,esi
c0013322:	83 c2 0d             	add    edx,0xd
c0013325:	0f b6 f0             	movzx  esi,al
c0013328:	0f b6 db             	movzx  ebx,bl
c001332b:	56                   	push   esi
c001332c:	53                   	push   ebx
c001332d:	52                   	push   edx
c001332e:	51                   	push   ecx
c001332f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013332:	83 c4 10             	add    esp,0x10
c0013335:	5b                   	pop    ebx
c0013336:	5e                   	pop    esi
c0013337:	5f                   	pop    edi
c0013338:	c3                   	ret    
c0013339:	90                   	nop

c001333a <File::exists()>:
c001333a:	83 ec 0c             	sub    esp,0xc
c001333d:	31 c0                	xor    eax,eax
c001333f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013343:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001334a:	80 f9 19             	cmp    cl,0x19
c001334d:	77 24                	ja     c0013373 <File::exists()+0x39>
c001334f:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c0013356:	85 c9                	test   ecx,ecx
c0013358:	74 19                	je     c0013373 <File::exists()+0x39>
c001335a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013360:	85 c9                	test   ecx,ecx
c0013362:	74 0f                	je     c0013373 <File::exists()+0x39>
c0013364:	83 c2 0d             	add    edx,0xd
c0013367:	50                   	push   eax
c0013368:	50                   	push   eax
c0013369:	8b 01                	mov    eax,DWORD PTR [ecx]
c001336b:	52                   	push   edx
c001336c:	51                   	push   ecx
c001336d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013370:	83 c4 10             	add    esp,0x10
c0013373:	83 c4 0c             	add    esp,0xc
c0013376:	c3                   	ret    
c0013377:	90                   	nop

c0013378 <File::stat(unsigned long long*, bool*)>:
c0013378:	56                   	push   esi
c0013379:	53                   	push   ebx
c001337a:	50                   	push   eax
c001337b:	b8 0b 00 00 00       	mov    eax,0xb
c0013380:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013384:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013388:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001338f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013393:	80 f9 19             	cmp    cl,0x19
c0013396:	77 3d                	ja     c00133d5 <File::stat(unsigned long long*, bool*)+0x5d>
c0013398:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c001339f:	85 c9                	test   ecx,ecx
c00133a1:	74 32                	je     c00133d5 <File::stat(unsigned long long*, bool*)+0x5d>
c00133a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133a9:	85 c9                	test   ecx,ecx
c00133ab:	74 28                	je     c00133d5 <File::stat(unsigned long long*, bool*)+0x5d>
c00133ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133af:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133b3:	74 13                	je     c00133c8 <File::stat(unsigned long long*, bool*)+0x50>
c00133b5:	83 ec 04             	sub    esp,0x4
c00133b8:	56                   	push   esi
c00133b9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00133bf:	51                   	push   ecx
c00133c0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00133c3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133c6:	eb 0a                	jmp    c00133d2 <File::stat(unsigned long long*, bool*)+0x5a>
c00133c8:	53                   	push   ebx
c00133c9:	83 c2 0d             	add    edx,0xd
c00133cc:	56                   	push   esi
c00133cd:	52                   	push   edx
c00133ce:	51                   	push   ecx
c00133cf:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00133d2:	83 c4 10             	add    esp,0x10
c00133d5:	5a                   	pop    edx
c00133d6:	5b                   	pop    ebx
c00133d7:	5e                   	pop    esi
c00133d8:	c3                   	ret    

c00133d9 <Fs::setcwd(Process*, char*)>:
c00133d9:	55                   	push   ebp
c00133da:	57                   	push   edi
c00133db:	56                   	push   esi
c00133dc:	53                   	push   ebx
c00133dd:	81 ec 20 02 00 00    	sub    esp,0x220
c00133e3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00133ea:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00133f0:	57                   	push   edi
c00133f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00133f8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00133fc:	56                   	push   esi
c00133fd:	e8 bc fa ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c0013402:	89 34 24             	mov    DWORD PTR [esp],esi
c0013405:	e8 8a d3 fe ff       	call   c0000794 <strlen>
c001340a:	83 c4 10             	add    esp,0x10
c001340d:	83 f8 02             	cmp    eax,0x2
c0013410:	77 17                	ja     c0013429 <Fs::setcwd(Process*, char*)+0x50>
c0013412:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013417:	83 e8 41             	sub    eax,0x41
c001341a:	83 f8 19             	cmp    eax,0x19
c001341d:	76 24                	jbe    c0013443 <Fs::setcwd(Process*, char*)+0x6a>
c001341f:	b8 03 00 00 00       	mov    eax,0x3
c0013424:	e9 e0 00 00 00       	jmp    c0013509 <Fs::setcwd(Process*, char*)+0x130>
c0013429:	83 ec 0c             	sub    esp,0xc
c001342c:	56                   	push   esi
c001342d:	e8 62 d3 fe ff       	call   c0000794 <strlen>
c0013432:	83 c4 10             	add    esp,0x10
c0013435:	83 f8 03             	cmp    eax,0x3
c0013438:	75 34                	jne    c001346e <Fs::setcwd(Process*, char*)+0x95>
c001343a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001343f:	75 2d                	jne    c001346e <Fs::setcwd(Process*, char*)+0x95>
c0013441:	eb cf                	jmp    c0013412 <Fs::setcwd(Process*, char*)+0x39>
c0013443:	8b 14 85 20 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ce0]
c001344a:	b8 05 00 00 00       	mov    eax,0x5
c001344f:	85 d2                	test   edx,edx
c0013451:	0f 84 b2 00 00 00    	je     c0013509 <Fs::setcwd(Process*, char*)+0x130>
c0013457:	b8 06 00 00 00       	mov    eax,0x6
c001345c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013463:	0f 85 92 00 00 00    	jne    c00134fb <Fs::setcwd(Process*, char*)+0x122>
c0013469:	e9 9b 00 00 00       	jmp    c0013509 <Fs::setcwd(Process*, char*)+0x130>
c001346e:	83 ec 0c             	sub    esp,0xc
c0013471:	68 14 01 00 00       	push   0x114
c0013476:	e8 c5 c3 ff ff       	call   c000f840 <malloc>
c001347b:	83 c4 0c             	add    esp,0xc
c001347e:	89 c3                	mov    ebx,eax
c0013480:	55                   	push   ebp
c0013481:	56                   	push   esi
c0013482:	50                   	push   eax
c0013483:	e8 e0 fb ff ff       	call   c0013068 <File::File(char const*, Process*)>
c0013488:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001348d:	83 c4 0c             	add    esp,0xc
c0013490:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013494:	50                   	push   eax
c0013495:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013499:	50                   	push   eax
c001349a:	53                   	push   ebx
c001349b:	e8 d8 fe ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	83 f8 02             	cmp    eax,0x2
c00134a6:	74 04                	je     c00134ac <Fs::setcwd(Process*, char*)+0xd3>
c00134a8:	85 c0                	test   eax,eax
c00134aa:	74 1c                	je     c00134c8 <Fs::setcwd(Process*, char*)+0xef>
c00134ac:	b8 01 00 00 00       	mov    eax,0x1
c00134b1:	85 db                	test   ebx,ebx
c00134b3:	74 54                	je     c0013509 <Fs::setcwd(Process*, char*)+0x130>
c00134b5:	83 ec 0c             	sub    esp,0xc
c00134b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134ba:	53                   	push   ebx
c00134bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134be:	83 c4 10             	add    esp,0x10
c00134c1:	b8 01 00 00 00       	mov    eax,0x1
c00134c6:	eb 41                	jmp    c0013509 <Fs::setcwd(Process*, char*)+0x130>
c00134c8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00134cd:	75 1c                	jne    c00134eb <Fs::setcwd(Process*, char*)+0x112>
c00134cf:	b8 02 00 00 00       	mov    eax,0x2
c00134d4:	85 db                	test   ebx,ebx
c00134d6:	74 31                	je     c0013509 <Fs::setcwd(Process*, char*)+0x130>
c00134d8:	83 ec 0c             	sub    esp,0xc
c00134db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134dd:	53                   	push   ebx
c00134de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134e1:	83 c4 10             	add    esp,0x10
c00134e4:	b8 02 00 00 00       	mov    eax,0x2
c00134e9:	eb 1e                	jmp    c0013509 <Fs::setcwd(Process*, char*)+0x130>
c00134eb:	85 db                	test   ebx,ebx
c00134ed:	74 0c                	je     c00134fb <Fs::setcwd(Process*, char*)+0x122>
c00134ef:	83 ec 0c             	sub    esp,0xc
c00134f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134f4:	53                   	push   ebx
c00134f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134f8:	83 c4 10             	add    esp,0x10
c00134fb:	50                   	push   eax
c00134fc:	50                   	push   eax
c00134fd:	56                   	push   esi
c00134fe:	57                   	push   edi
c00134ff:	e8 30 d3 fe ff       	call   c0000834 <strcpy>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	31 c0                	xor    eax,eax
c0013509:	81 c4 1c 02 00 00    	add    esp,0x21c
c001350f:	5b                   	pop    ebx
c0013510:	5e                   	pop    esi
c0013511:	5f                   	pop    edi
c0013512:	5d                   	pop    ebp
c0013513:	c3                   	ret    

c0013514 <Directory::Directory(char const*, Process*)>:
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001351b:	83 ec 08             	sub    esp,0x8
c001351e:	6a 00                	push   0x0
c0013520:	50                   	push   eax
c0013521:	e8 b6 e1 ff ff       	call   c00116dc <UnixFile::UnixFile(int)>
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	ba ec a4 02 c0       	mov    edx,0xc002a4ec
c001352e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013532:	89 10                	mov    DWORD PTR [eax],edx
c0013534:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013538:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001353e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013542:	83 c0 0d             	add    eax,0xd
c0013545:	83 ec 04             	sub    esp,0x4
c0013548:	52                   	push   edx
c0013549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001354d:	50                   	push   eax
c001354e:	e8 6b f9 ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001355d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013564:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001356a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013572:	90                   	nop
c0013573:	83 c4 0c             	add    esp,0xc
c0013576:	c3                   	ret    
c0013577:	90                   	nop

c0013578 <Directory::open()>:
c0013578:	53                   	push   ebx
c0013579:	b8 0b 00 00 00       	mov    eax,0xb
c001357e:	83 ec 08             	sub    esp,0x8
c0013581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013585:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001358c:	80 fa 19             	cmp    dl,0x19
c001358f:	77 3d                	ja     c00135ce <Directory::open()+0x56>
c0013591:	8b 14 95 20 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ce0]
c0013598:	85 d2                	test   edx,edx
c001359a:	74 32                	je     c00135ce <Directory::open()+0x56>
c001359c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135a2:	85 d2                	test   edx,edx
c00135a4:	74 28                	je     c00135ce <Directory::open()+0x56>
c00135a6:	b8 06 00 00 00       	mov    eax,0x6
c00135ab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135af:	75 1d                	jne    c00135ce <Directory::open()+0x56>
c00135b1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135b7:	50                   	push   eax
c00135b8:	8b 02                	mov    eax,DWORD PTR [edx]
c00135ba:	51                   	push   ecx
c00135bb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135be:	51                   	push   ecx
c00135bf:	52                   	push   edx
c00135c0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	85 c0                	test   eax,eax
c00135c8:	75 04                	jne    c00135ce <Directory::open()+0x56>
c00135ca:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135ce:	83 c4 08             	add    esp,0x8
c00135d1:	5b                   	pop    ebx
c00135d2:	c3                   	ret    
c00135d3:	90                   	nop

c00135d4 <Directory::close()>:
c00135d4:	53                   	push   ebx
c00135d5:	b8 0b 00 00 00       	mov    eax,0xb
c00135da:	83 ec 08             	sub    esp,0x8
c00135dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135e1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135e8:	80 fa 19             	cmp    dl,0x19
c00135eb:	77 41                	ja     c001362e <Directory::close()+0x5a>
c00135ed:	8b 1c 95 20 e3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1ce0]
c00135f4:	85 db                	test   ebx,ebx
c00135f6:	74 36                	je     c001362e <Directory::close()+0x5a>
c00135f8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135ff:	74 2d                	je     c001362e <Directory::close()+0x5a>
c0013601:	b8 05 00 00 00       	mov    eax,0x5
c0013606:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001360a:	74 22                	je     c001362e <Directory::close()+0x5a>
c001360c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013610:	8b 04 95 20 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ce0]
c0013617:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001361d:	53                   	push   ebx
c001361e:	53                   	push   ebx
c001361f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013621:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013627:	50                   	push   eax
c0013628:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	83 c4 08             	add    esp,0x8
c0013631:	5b                   	pop    ebx
c0013632:	c3                   	ret    
c0013633:	90                   	nop

c0013634 <Directory::unlink()>:
c0013634:	83 ec 0c             	sub    esp,0xc
c0013637:	b8 0b 00 00 00       	mov    eax,0xb
c001363c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013640:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013647:	80 f9 19             	cmp    cl,0x19
c001364a:	77 2f                	ja     c001367b <Directory::unlink()+0x47>
c001364c:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c0013653:	85 c9                	test   ecx,ecx
c0013655:	74 24                	je     c001367b <Directory::unlink()+0x47>
c0013657:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001365d:	85 c9                	test   ecx,ecx
c001365f:	74 1a                	je     c001367b <Directory::unlink()+0x47>
c0013661:	b8 06 00 00 00       	mov    eax,0x6
c0013666:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001366a:	75 0f                	jne    c001367b <Directory::unlink()+0x47>
c001366c:	83 c2 0d             	add    edx,0xd
c001366f:	50                   	push   eax
c0013670:	50                   	push   eax
c0013671:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013673:	52                   	push   edx
c0013674:	51                   	push   ecx
c0013675:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013678:	83 c4 10             	add    esp,0x10
c001367b:	83 c4 0c             	add    esp,0xc
c001367e:	c3                   	ret    
c001367f:	90                   	nop

c0013680 <Directory::rename(char const*)>:
c0013680:	83 ec 0c             	sub    esp,0xc
c0013683:	b8 0b 00 00 00       	mov    eax,0xb
c0013688:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001368c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013693:	80 f9 19             	cmp    cl,0x19
c0013696:	77 32                	ja     c00136ca <Directory::rename(char const*)+0x4a>
c0013698:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c001369f:	85 c9                	test   ecx,ecx
c00136a1:	74 27                	je     c00136ca <Directory::rename(char const*)+0x4a>
c00136a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a9:	85 c9                	test   ecx,ecx
c00136ab:	74 1d                	je     c00136ca <Directory::rename(char const*)+0x4a>
c00136ad:	b8 06 00 00 00       	mov    eax,0x6
c00136b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136b6:	75 12                	jne    c00136ca <Directory::rename(char const*)+0x4a>
c00136b8:	83 c2 0d             	add    edx,0xd
c00136bb:	50                   	push   eax
c00136bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136c2:	52                   	push   edx
c00136c3:	51                   	push   ecx
c00136c4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136c7:	83 c4 10             	add    esp,0x10
c00136ca:	83 c4 0c             	add    esp,0xc
c00136cd:	c3                   	ret    

c00136ce <Directory::exists()>:
c00136ce:	83 ec 0c             	sub    esp,0xc
c00136d1:	31 c0                	xor    eax,eax
c00136d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136de:	80 f9 19             	cmp    cl,0x19
c00136e1:	77 24                	ja     c0013707 <Directory::exists()+0x39>
c00136e3:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c00136ea:	85 c9                	test   ecx,ecx
c00136ec:	74 19                	je     c0013707 <Directory::exists()+0x39>
c00136ee:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f4:	85 c9                	test   ecx,ecx
c00136f6:	74 0f                	je     c0013707 <Directory::exists()+0x39>
c00136f8:	83 c2 0d             	add    edx,0xd
c00136fb:	50                   	push   eax
c00136fc:	50                   	push   eax
c00136fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136ff:	52                   	push   edx
c0013700:	51                   	push   ecx
c0013701:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013704:	83 c4 10             	add    esp,0x10
c0013707:	83 c4 0c             	add    esp,0xc
c001370a:	c3                   	ret    
c001370b:	90                   	nop

c001370c <Directory::read(dirent*)>:
c001370c:	83 ec 1c             	sub    esp,0x1c
c001370f:	b8 0b 00 00 00       	mov    eax,0xb
c0013714:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013718:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001371f:	80 fa 19             	cmp    dl,0x19
c0013722:	77 30                	ja     c0013754 <Directory::read(dirent*)+0x48>
c0013724:	8b 14 95 20 e3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ce0]
c001372b:	85 d2                	test   edx,edx
c001372d:	74 25                	je     c0013754 <Directory::read(dirent*)+0x48>
c001372f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013736:	74 1c                	je     c0013754 <Directory::read(dirent*)+0x48>
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001373d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013741:	52                   	push   edx
c0013742:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013746:	6a 00                	push   0x0
c0013748:	68 10 01 00 00       	push   0x110
c001374d:	51                   	push   ecx
c001374e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013751:	83 c4 20             	add    esp,0x20
c0013754:	83 c4 1c             	add    esp,0x1c
c0013757:	c3                   	ret    

c0013758 <Directory::create()>:
c0013758:	83 ec 0c             	sub    esp,0xc
c001375b:	b8 0b 00 00 00       	mov    eax,0xb
c0013760:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013764:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001376b:	80 f9 19             	cmp    cl,0x19
c001376e:	77 2f                	ja     c001379f <Directory::create()+0x47>
c0013770:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c0013777:	85 c9                	test   ecx,ecx
c0013779:	74 24                	je     c001379f <Directory::create()+0x47>
c001377b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013781:	85 c9                	test   ecx,ecx
c0013783:	74 1a                	je     c001379f <Directory::create()+0x47>
c0013785:	b8 06 00 00 00       	mov    eax,0x6
c001378a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001378e:	75 0f                	jne    c001379f <Directory::create()+0x47>
c0013790:	83 c2 0d             	add    edx,0xd
c0013793:	50                   	push   eax
c0013794:	50                   	push   eax
c0013795:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013797:	52                   	push   edx
c0013798:	51                   	push   ecx
c0013799:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001379c:	83 c4 10             	add    esp,0x10
c001379f:	83 c4 0c             	add    esp,0xc
c00137a2:	c3                   	ret    
c00137a3:	90                   	nop

c00137a4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00137a4:	b8 0a 00 00 00       	mov    eax,0xa
c00137a9:	c3                   	ret    

c00137aa <Bus::Bus(char const*)>:
c00137aa:	83 ec 0c             	sub    esp,0xc
c00137ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b1:	83 ec 08             	sub    esp,0x8
c00137b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b8:	50                   	push   eax
c00137b9:	e8 68 09 00 00       	call   c0014126 <Device::Device(char const*)>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	ba 08 a5 02 c0       	mov    edx,0xc002a508
c00137c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ca:	89 10                	mov    DWORD PTR [eax],edx
c00137cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00137da:	90                   	nop
c00137db:	83 c4 0c             	add    esp,0xc
c00137de:	c3                   	ret    
c00137df:	90                   	nop

c00137e0 <Bus::~Bus()>:
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	ba 08 a5 02 c0       	mov    edx,0xc002a508
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	89 10                	mov    DWORD PTR [eax],edx
c00137ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f2:	83 ec 0c             	sub    esp,0xc
c00137f5:	50                   	push   eax
c00137f6:	e8 0d 06 00 00       	call   c0013e08 <Device::~Device()>
c00137fb:	83 c4 10             	add    esp,0x10
c00137fe:	90                   	nop
c00137ff:	83 c4 0c             	add    esp,0xc
c0013802:	c3                   	ret    
c0013803:	90                   	nop

c0013804 <Bus::~Bus()>:
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	83 ec 0c             	sub    esp,0xc
c001380a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001380e:	e8 cd ff ff ff       	call   c00137e0 <Bus::~Bus()>
c0013813:	83 c4 10             	add    esp,0x10
c0013816:	83 ec 08             	sub    esp,0x8
c0013819:	68 58 01 00 00       	push   0x158
c001381e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013822:	e8 08 f2 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0013827:	83 c4 10             	add    esp,0x10
c001382a:	83 c4 0c             	add    esp,0xc
c001382d:	c3                   	ret    

c001382e <Buzzer::Buzzer(char const*)>:
c001382e:	83 ec 0c             	sub    esp,0xc
c0013831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013835:	83 ec 08             	sub    esp,0x8
c0013838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001383c:	50                   	push   eax
c001383d:	e8 e4 08 00 00       	call   c0014126 <Device::Device(char const*)>
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c001384a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384e:	89 10                	mov    DWORD PTR [eax],edx
c0013850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013854:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001385e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013862:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001386c:	90                   	nop
c001386d:	83 c4 0c             	add    esp,0xc
c0013870:	c3                   	ret    
c0013871:	90                   	nop

c0013872 <Buzzer::~Buzzer()>:
c0013872:	83 ec 0c             	sub    esp,0xc
c0013875:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c001387a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387e:	89 10                	mov    DWORD PTR [eax],edx
c0013880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013884:	83 ec 0c             	sub    esp,0xc
c0013887:	50                   	push   eax
c0013888:	e8 7b 05 00 00       	call   c0013e08 <Device::~Device()>
c001388d:	83 c4 10             	add    esp,0x10
c0013890:	90                   	nop
c0013891:	83 c4 0c             	add    esp,0xc
c0013894:	c3                   	ret    
c0013895:	90                   	nop

c0013896 <Buzzer::~Buzzer()>:
c0013896:	83 ec 0c             	sub    esp,0xc
c0013899:	83 ec 0c             	sub    esp,0xc
c001389c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138a0:	e8 cd ff ff ff       	call   c0013872 <Buzzer::~Buzzer()>
c00138a5:	83 c4 10             	add    esp,0x10
c00138a8:	83 ec 08             	sub    esp,0x8
c00138ab:	68 5c 01 00 00       	push   0x15c
c00138b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138b4:	e8 76 f1 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00138b9:	83 c4 10             	add    esp,0x10
c00138bc:	83 c4 0c             	add    esp,0xc
c00138bf:	c3                   	ret    

c00138c0 <Buzzer::stop()>:
c00138c0:	83 ec 14             	sub    esp,0x14
c00138c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00138c9:	6a 00                	push   0x0
c00138cb:	50                   	push   eax
c00138cc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00138cf:	83 c4 1c             	add    esp,0x1c
c00138d2:	c3                   	ret    

c00138d3 <beepThread(void*)>:
c00138d3:	53                   	push   ebx
c00138d4:	83 ec 08             	sub    esp,0x8
c00138d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138db:	e8 50 9f 00 00       	call   c001d830 <unlockScheduler()>
c00138e0:	b8 40 42 0f 00       	mov    eax,0xf4240
c00138e5:	52                   	push   edx
c00138e6:	52                   	push   edx
c00138e7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00138ed:	52                   	push   edx
c00138ee:	50                   	push   eax
c00138ef:	e8 8a a4 00 00       	call   c001dd7e <nanoSleep(unsigned long long)>
c00138f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138f7:	e8 c4 ff ff ff       	call   c00138c0 <Buzzer::stop()>
c00138fc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013904:	83 c4 18             	add    esp,0x18
c0013907:	5b                   	pop    ebx
c0013908:	e9 b7 a3 00 00       	jmp    c001dcc4 <blockTask(TaskState)>
c001390d:	90                   	nop

c001390e <Buzzer::beep(int, int, bool)>:
c001390e:	57                   	push   edi
c001390f:	56                   	push   esi
c0013910:	53                   	push   ebx
c0013911:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013915:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013919:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001391d:	52                   	push   edx
c001391e:	52                   	push   edx
c001391f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013925:	56                   	push   esi
c0013926:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013929:	83 c4 10             	add    esp,0x10
c001392c:	89 f8                	mov    eax,edi
c001392e:	84 c0                	test   al,al
c0013930:	74 1f                	je     c0013951 <Buzzer::beep(int, int, bool)+0x43>
c0013932:	50                   	push   eax
c0013933:	50                   	push   eax
c0013934:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001393a:	99                   	cdq    
c001393b:	52                   	push   edx
c001393c:	50                   	push   eax
c001393d:	e8 3c a4 00 00       	call   c001dd7e <nanoSleep(unsigned long long)>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013949:	5b                   	pop    ebx
c001394a:	5e                   	pop    esi
c001394b:	5f                   	pop    edi
c001394c:	e9 6f ff ff ff       	jmp    c00138c0 <Buzzer::stop()>
c0013951:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013957:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001395c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013964:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013968:	c7 44 24 14 d3 38 01 c0 	mov    DWORD PTR [esp+0x14],0xc00138d3
c0013970:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013974:	5b                   	pop    ebx
c0013975:	5e                   	pop    esi
c0013976:	5f                   	pop    edi
c0013977:	e9 e4 9f 00 00       	jmp    c001d960 <Process::createThread(void (*)(void*), void*, int)>

c001397c <User::loadClockSettings(int)>:
c001397c:	53                   	push   ebx
c001397d:	83 ec 14             	sub    esp,0x14
c0013980:	68 14 01 00 00       	push   0x114
c0013985:	e8 b6 be ff ff       	call   c000f840 <malloc>
c001398a:	83 c4 0c             	add    esp,0xc
c001398d:	89 c3                	mov    ebx,eax
c001398f:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c0013995:	68 5c a5 02 c0       	push   0xc002a55c
c001399a:	50                   	push   eax
c001399b:	e8 c8 f6 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c00139a0:	58                   	pop    eax
c00139a1:	5a                   	pop    edx
c00139a2:	6a 01                	push   0x1
c00139a4:	53                   	push   ebx
c00139a5:	e8 22 f7 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c00139aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139ad:	e8 78 f7 ff ff       	call   c001312a <File::close()>
c00139b2:	83 c4 10             	add    esp,0x10
c00139b5:	85 db                	test   ebx,ebx
c00139b7:	74 0f                	je     c00139c8 <User::loadClockSettings(int)+0x4c>
c00139b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00139bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139c2:	83 c4 08             	add    esp,0x8
c00139c5:	5b                   	pop    ebx
c00139c6:	ff e0                	jmp    eax
c00139c8:	83 c4 08             	add    esp,0x8
c00139cb:	5b                   	pop    ebx
c00139cc:	c3                   	ret    
c00139cd:	90                   	nop

c00139ce <Clock::Clock(char const*)>:
c00139ce:	83 ec 0c             	sub    esp,0xc
c00139d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d5:	83 ec 08             	sub    esp,0x8
c00139d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139dc:	50                   	push   eax
c00139dd:	e8 44 07 00 00       	call   c0014126 <Device::Device(char const*)>
c00139e2:	83 c4 10             	add    esp,0x10
c00139e5:	ba 84 a5 02 c0       	mov    edx,0xc002a584
c00139ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ee:	89 10                	mov    DWORD PTR [eax],edx
c00139f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00139fe:	90                   	nop
c00139ff:	83 c4 0c             	add    esp,0xc
c0013a02:	c3                   	ret    
c0013a03:	90                   	nop

c0013a04 <Clock::~Clock()>:
c0013a04:	83 ec 0c             	sub    esp,0xc
c0013a07:	ba 84 a5 02 c0       	mov    edx,0xc002a584
c0013a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a10:	89 10                	mov    DWORD PTR [eax],edx
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	50                   	push   eax
c0013a1a:	e8 e9 03 00 00       	call   c0013e08 <Device::~Device()>
c0013a1f:	83 c4 10             	add    esp,0x10
c0013a22:	90                   	nop
c0013a23:	83 c4 0c             	add    esp,0xc
c0013a26:	c3                   	ret    
c0013a27:	90                   	nop

c0013a28 <Clock::~Clock()>:
c0013a28:	83 ec 0c             	sub    esp,0xc
c0013a2b:	83 ec 0c             	sub    esp,0xc
c0013a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a32:	e8 cd ff ff ff       	call   c0013a04 <Clock::~Clock()>
c0013a37:	83 c4 10             	add    esp,0x10
c0013a3a:	83 ec 08             	sub    esp,0x8
c0013a3d:	68 58 01 00 00       	push   0x158
c0013a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a46:	e8 e4 ef ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0013a4b:	83 c4 10             	add    esp,0x10
c0013a4e:	83 c4 0c             	add    esp,0xc
c0013a51:	c3                   	ret    

c0013a52 <Clock::timeInSecondsLocal()>:
c0013a52:	53                   	push   ebx
c0013a53:	83 ec 14             	sub    esp,0x14
c0013a56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a5c:	50                   	push   eax
c0013a5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013a60:	0f b6 0d 90 de 02 c0 	movzx  ecx,BYTE PTR ds:0xc002de90
c0013a67:	03 0d 94 de 02 c0    	add    ecx,DWORD PTR ds:0xc002de94
c0013a6d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a73:	89 cb                	mov    ebx,ecx
c0013a75:	c1 fb 1f             	sar    ebx,0x1f
c0013a78:	01 c8                	add    eax,ecx
c0013a7a:	11 da                	adc    edx,ebx
c0013a7c:	83 c4 10             	add    esp,0x10
c0013a7f:	31 c9                	xor    ecx,ecx
c0013a81:	80 3d 91 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de91,0x0
c0013a88:	74 05                	je     c0013a8f <Clock::timeInSecondsLocal()+0x3d>
c0013a8a:	b9 08 07 00 00       	mov    ecx,0x708
c0013a8f:	31 db                	xor    ebx,ebx
c0013a91:	01 c8                	add    eax,ecx
c0013a93:	11 da                	adc    edx,ebx
c0013a95:	83 c4 08             	add    esp,0x8
c0013a98:	5b                   	pop    ebx
c0013a99:	c3                   	ret    

c0013a9a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013a9a:	57                   	push   edi
c0013a9b:	56                   	push   esi
c0013a9c:	53                   	push   ebx
c0013a9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013aa1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013aa5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aa7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013aab:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013aae:	0f b6 05 90 de 02 c0 	movzx  eax,BYTE PTR ds:0xc002de90
c0013ab5:	03 05 94 de 02 c0    	add    eax,DWORD PTR ds:0xc002de94
c0013abb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ac1:	99                   	cdq    
c0013ac2:	29 c6                	sub    esi,eax
c0013ac4:	19 d7                	sbb    edi,edx
c0013ac6:	89 f0                	mov    eax,esi
c0013ac8:	89 fa                	mov    edx,edi
c0013aca:	31 f6                	xor    esi,esi
c0013acc:	80 3d 91 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de91,0x0
c0013ad3:	74 05                	je     c0013ada <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ad5:	be 08 07 00 00       	mov    esi,0x708
c0013ada:	31 ff                	xor    edi,edi
c0013adc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ae0:	29 f0                	sub    eax,esi
c0013ae2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ae6:	19 fa                	sbb    edx,edi
c0013ae8:	89 d8                	mov    eax,ebx
c0013aea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013aee:	5b                   	pop    ebx
c0013aef:	5e                   	pop    esi
c0013af0:	5f                   	pop    edi
c0013af1:	ff e0                	jmp    eax

c0013af3 <datetimeToSeconds(datetime_t)>:
c0013af3:	55                   	push   ebp
c0013af4:	57                   	push   edi
c0013af5:	56                   	push   esi
c0013af6:	53                   	push   ebx
c0013af7:	83 ec 14             	sub    esp,0x14
c0013afa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013afe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013b02:	89 d3                	mov    ebx,edx
c0013b04:	0f b6 c6             	movzx  eax,dh
c0013b07:	c1 eb 10             	shr    ebx,0x10
c0013b0a:	48                   	dec    eax
c0013b0b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013b10:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013b14:	0f b6 f5             	movzx  esi,ch
c0013b17:	89 cf                	mov    edi,ecx
c0013b19:	6b f6 3c             	imul   esi,esi,0x3c
c0013b1c:	c1 ef 10             	shr    edi,0x10
c0013b1f:	0f b6 c9             	movzx  ecx,cl
c0013b22:	89 f8                	mov    eax,edi
c0013b24:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b2a:	0f b6 f8             	movzx  edi,al
c0013b2d:	0f b6 d2             	movzx  edx,dl
c0013b30:	01 fe                	add    esi,edi
c0013b32:	01 f1                	add    ecx,esi
c0013b34:	0f b7 f3             	movzx  esi,bx
c0013b37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013b3b:	c1 f9 1f             	sar    ecx,0x1f
c0013b3e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013b43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b47:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013b4c:	8b 0c 8d c0 a5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5a40]
c0013b53:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013b57:	76 29                	jbe    c0013b82 <datetimeToSeconds(datetime_t)+0x8f>
c0013b59:	f6 c3 03             	test   bl,0x3
c0013b5c:	75 24                	jne    c0013b82 <datetimeToSeconds(datetime_t)+0x8f>
c0013b5e:	31 d2                	xor    edx,edx
c0013b60:	bf 64 00 00 00       	mov    edi,0x64
c0013b65:	89 d8                	mov    eax,ebx
c0013b67:	66 f7 f7             	div    di
c0013b6a:	66 85 d2             	test   dx,dx
c0013b6d:	75 12                	jne    c0013b81 <datetimeToSeconds(datetime_t)+0x8e>
c0013b6f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013b75:	bf 90 01 00 00       	mov    edi,0x190
c0013b7a:	99                   	cdq    
c0013b7b:	f7 ff                	idiv   edi
c0013b7d:	85 d2                	test   edx,edx
c0013b7f:	75 01                	jne    c0013b82 <datetimeToSeconds(datetime_t)+0x8f>
c0013b81:	41                   	inc    ecx
c0013b82:	66 83 fb 46          	cmp    bx,0x46
c0013b86:	76 45                	jbe    c0013bcd <datetimeToSeconds(datetime_t)+0xda>
c0013b88:	bb 46 00 00 00       	mov    ebx,0x46
c0013b8d:	bf 64 00 00 00       	mov    edi,0x64
c0013b92:	bd 90 01 00 00       	mov    ebp,0x190
c0013b97:	b8 6d 01 00 00       	mov    eax,0x16d
c0013b9c:	f6 c3 03             	test   bl,0x3
c0013b9f:	75 23                	jne    c0013bc4 <datetimeToSeconds(datetime_t)+0xd1>
c0013ba1:	89 d8                	mov    eax,ebx
c0013ba3:	99                   	cdq    
c0013ba4:	f7 ff                	idiv   edi
c0013ba6:	b8 6e 01 00 00       	mov    eax,0x16e
c0013bab:	85 d2                	test   edx,edx
c0013bad:	75 15                	jne    c0013bc4 <datetimeToSeconds(datetime_t)+0xd1>
c0013baf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013bb5:	99                   	cdq    
c0013bb6:	f7 fd                	idiv   ebp
c0013bb8:	83 fa 01             	cmp    edx,0x1
c0013bbb:	19 c0                	sbb    eax,eax
c0013bbd:	f7 d0                	not    eax
c0013bbf:	05 6e 01 00 00       	add    eax,0x16e
c0013bc4:	01 c1                	add    ecx,eax
c0013bc6:	43                   	inc    ebx
c0013bc7:	39 f3                	cmp    ebx,esi
c0013bc9:	7c cc                	jl     c0013b97 <datetimeToSeconds(datetime_t)+0xa4>
c0013bcb:	eb 35                	jmp    c0013c02 <datetimeToSeconds(datetime_t)+0x10f>
c0013bcd:	74 33                	je     c0013c02 <datetimeToSeconds(datetime_t)+0x10f>
c0013bcf:	b8 45 00 00 00       	mov    eax,0x45
c0013bd4:	89 c2                	mov    edx,eax
c0013bd6:	83 e2 03             	and    edx,0x3
c0013bd9:	39 f0                	cmp    eax,esi
c0013bdb:	7e 0f                	jle    c0013bec <datetimeToSeconds(datetime_t)+0xf9>
c0013bdd:	83 fa 01             	cmp    edx,0x1
c0013be0:	19 d2                	sbb    edx,edx
c0013be2:	48                   	dec    eax
c0013be3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013bea:	eb e8                	jmp    c0013bd4 <datetimeToSeconds(datetime_t)+0xe1>
c0013bec:	b8 6d 01 00 00       	mov    eax,0x16d
c0013bf1:	85 d2                	test   edx,edx
c0013bf3:	75 0b                	jne    c0013c00 <datetimeToSeconds(datetime_t)+0x10d>
c0013bf5:	66 83 fb 01          	cmp    bx,0x1
c0013bf9:	19 c0                	sbb    eax,eax
c0013bfb:	05 6e 01 00 00       	add    eax,0x16e
c0013c00:	29 c1                	sub    ecx,eax
c0013c02:	b8 80 51 01 00       	mov    eax,0x15180
c0013c07:	f7 e9                	imul   ecx
c0013c09:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013c0d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013c11:	83 c4 14             	add    esp,0x14
c0013c14:	5b                   	pop    ebx
c0013c15:	5e                   	pop    esi
c0013c16:	5f                   	pop    edi
c0013c17:	5d                   	pop    ebp
c0013c18:	c3                   	ret    
c0013c19:	90                   	nop

c0013c1a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013c1a:	57                   	push   edi
c0013c1b:	56                   	push   esi
c0013c1c:	53                   	push   ebx
c0013c1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c21:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c23:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013c26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c2e:	e8 c0 fe ff ff       	call   c0013af3 <datetimeToSeconds(datetime_t)>
c0013c33:	59                   	pop    ecx
c0013c34:	0f b6 0d 90 de 02 c0 	movzx  ecx,BYTE PTR ds:0xc002de90
c0013c3b:	5b                   	pop    ebx
c0013c3c:	03 0d 94 de 02 c0    	add    ecx,DWORD PTR ds:0xc002de94
c0013c42:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013c48:	89 cb                	mov    ebx,ecx
c0013c4a:	c1 fb 1f             	sar    ebx,0x1f
c0013c4d:	29 c8                	sub    eax,ecx
c0013c4f:	19 da                	sbb    edx,ebx
c0013c51:	31 c9                	xor    ecx,ecx
c0013c53:	80 3d 91 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de91,0x0
c0013c5a:	74 05                	je     c0013c61 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013c5c:	b9 08 07 00 00       	mov    ecx,0x708
c0013c61:	31 db                	xor    ebx,ebx
c0013c63:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c67:	29 c8                	sub    eax,ecx
c0013c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c6d:	19 da                	sbb    edx,ebx
c0013c6f:	89 f8                	mov    eax,edi
c0013c71:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013c75:	5b                   	pop    ebx
c0013c76:	5e                   	pop    esi
c0013c77:	5f                   	pop    edi
c0013c78:	ff e0                	jmp    eax

c0013c7a <secondsToDatetime(unsigned long long)>:
c0013c7a:	55                   	push   ebp
c0013c7b:	57                   	push   edi
c0013c7c:	56                   	push   esi
c0013c7d:	53                   	push   ebx
c0013c7e:	83 ec 1c             	sub    esp,0x1c
c0013c81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013c85:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013c89:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013c8d:	6a 00                	push   0x0
c0013c8f:	68 80 51 01 00       	push   0x15180
c0013c94:	55                   	push   ebp
c0013c95:	57                   	push   edi
c0013c96:	e8 71 27 01 00       	call   c002640c <__udivdi3>
c0013c9b:	83 c4 10             	add    esp,0x10
c0013c9e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013ca4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ca8:	6a 00                	push   0x0
c0013caa:	68 80 51 01 00       	push   0x15180
c0013caf:	55                   	push   ebp
c0013cb0:	57                   	push   edi
c0013cb1:	bf 10 0e 00 00       	mov    edi,0xe10
c0013cb6:	e8 51 28 01 00       	call   c002650c <__umoddi3>
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	99                   	cdq    
c0013cbf:	f7 ff                	idiv   edi
c0013cc1:	bf 3c 00 00 00       	mov    edi,0x3c
c0013cc6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013cc9:	89 d0                	mov    eax,edx
c0013ccb:	99                   	cdq    
c0013ccc:	f7 ff                	idiv   edi
c0013cce:	85 db                	test   ebx,ebx
c0013cd0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013cd3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013cd6:	79 11                	jns    c0013ce9 <secondsToDatetime(unsigned long long)+0x6f>
c0013cd8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013cdc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ce2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ce7:	eb 07                	jmp    c0013cf0 <secondsToDatetime(unsigned long long)+0x76>
c0013ce9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013cee:	89 d8                	mov    eax,ebx
c0013cf0:	bf b4 05 00 00       	mov    edi,0x5b4
c0013cf5:	99                   	cdq    
c0013cf6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013cfb:	f7 f9                	idiv   ecx
c0013cfd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013d02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d06:	31 d2                	xor    edx,edx
c0013d08:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013d10:	01 c3                	add    ebx,eax
c0013d12:	89 d8                	mov    eax,ebx
c0013d14:	f7 f1                	div    ecx
c0013d16:	31 d2                	xor    edx,edx
c0013d18:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013d1b:	89 d8                	mov    eax,ebx
c0013d1d:	f7 f7                	div    edi
c0013d1f:	31 d2                	xor    edx,edx
c0013d21:	29 c1                	sub    ecx,eax
c0013d23:	89 d8                	mov    eax,ebx
c0013d25:	f7 f5                	div    ebp
c0013d27:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013d2c:	29 c1                	sub    ecx,eax
c0013d2e:	31 d2                	xor    edx,edx
c0013d30:	89 c8                	mov    eax,ecx
c0013d32:	f7 f5                	div    ebp
c0013d34:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013d39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d3d:	31 d2                	xor    edx,edx
c0013d3f:	89 c8                	mov    eax,ecx
c0013d41:	f7 f5                	div    ebp
c0013d43:	31 d2                	xor    edx,edx
c0013d45:	01 c3                	add    ebx,eax
c0013d47:	89 c8                	mov    eax,ecx
c0013d49:	f7 f7                	div    edi
c0013d4b:	bf 99 00 00 00       	mov    edi,0x99
c0013d50:	29 c3                	sub    ebx,eax
c0013d52:	31 d2                	xor    edx,edx
c0013d54:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013d5c:	29 c3                	sub    ebx,eax
c0013d5e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013d61:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013d64:	bb 05 00 00 00       	mov    ebx,0x5
c0013d69:	83 c1 02             	add    ecx,0x2
c0013d6c:	89 c8                	mov    eax,ecx
c0013d6e:	f7 f7                	div    edi
c0013d70:	31 d2                	xor    edx,edx
c0013d72:	89 c7                	mov    edi,eax
c0013d74:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013d7a:	83 c0 02             	add    eax,0x2
c0013d7d:	f7 f3                	div    ebx
c0013d7f:	89 eb                	mov    ebx,ebp
c0013d81:	29 c3                	sub    ebx,eax
c0013d83:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013d89:	88 1e                	mov    BYTE PTR [esi],bl
c0013d8b:	19 c0                	sbb    eax,eax
c0013d8d:	31 d2                	xor    edx,edx
c0013d8f:	83 e0 0c             	and    eax,0xc
c0013d92:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013d96:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013d9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013da2:	83 f9 01             	cmp    ecx,0x1
c0013da5:	0f 96 c2             	setbe  dl
c0013da8:	41                   	inc    ecx
c0013da9:	01 d0                	add    eax,edx
c0013dab:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013dae:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013db2:	83 c4 1c             	add    esp,0x1c
c0013db5:	89 f0                	mov    eax,esi
c0013db7:	5b                   	pop    ebx
c0013db8:	5e                   	pop    esi
c0013db9:	5f                   	pop    edi
c0013dba:	5d                   	pop    ebp
c0013dbb:	c2 04 00             	ret    0x4

c0013dbe <Clock::timeInDatetimeLocal()>:
c0013dbe:	53                   	push   ebx
c0013dbf:	83 ec 14             	sub    esp,0x14
c0013dc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dca:	e8 83 fc ff ff       	call   c0013a52 <Clock::timeInSecondsLocal()>
c0013dcf:	83 c4 0c             	add    esp,0xc
c0013dd2:	52                   	push   edx
c0013dd3:	50                   	push   eax
c0013dd4:	53                   	push   ebx
c0013dd5:	e8 a0 fe ff ff       	call   c0013c7a <secondsToDatetime(unsigned long long)>
c0013dda:	89 d8                	mov    eax,ebx
c0013ddc:	83 c4 14             	add    esp,0x14
c0013ddf:	5b                   	pop    ebx
c0013de0:	c2 04 00             	ret    0x4
c0013de3:	90                   	nop

c0013de4 <Device::hibernate()>:
c0013de4:	c3                   	ret    
c0013de5:	90                   	nop

c0013de6 <Device::wake()>:
c0013de6:	c3                   	ret    
c0013de7:	90                   	nop

c0013de8 <Device::detect()>:
c0013de8:	c3                   	ret    
c0013de9:	90                   	nop

c0013dea <Device::disableLegacy()>:
c0013dea:	c3                   	ret    
c0013deb:	90                   	nop

c0013dec <Device::powerSaving(PowerSavingLevel)>:
c0013dec:	c3                   	ret    
c0013ded:	90                   	nop

c0013dee <DriverlessDevice::close(int, int, void*)>:
c0013dee:	31 c0                	xor    eax,eax
c0013df0:	c3                   	ret    
c0013df1:	90                   	nop

c0013df2 <DriverlessDevice::detect()>:
c0013df2:	c3                   	ret    
c0013df3:	90                   	nop

c0013df4 <DriverlessDevice::open(int, int, void*)>:
c0013df4:	83 ec 18             	sub    esp,0x18
c0013df7:	68 f0 a5 02 c0       	push   0xc002a5f0
c0013dfc:	e8 9e 63 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0013e01:	83 c8 ff             	or     eax,0xffffffff
c0013e04:	83 c4 1c             	add    esp,0x1c
c0013e07:	c3                   	ret    

c0013e08 <Device::~Device()>:
c0013e08:	ba 18 a6 02 c0       	mov    edx,0xc002a618
c0013e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e11:	89 10                	mov    DWORD PTR [eax],edx
c0013e13:	90                   	nop
c0013e14:	c3                   	ret    
c0013e15:	90                   	nop

c0013e16 <Device::~Device()>:
c0013e16:	83 ec 0c             	sub    esp,0xc
c0013e19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e1d:	e8 e6 ff ff ff       	call   c0013e08 <Device::~Device()>
c0013e22:	83 c4 04             	add    esp,0x4
c0013e25:	83 ec 08             	sub    esp,0x8
c0013e28:	68 58 01 00 00       	push   0x158
c0013e2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e31:	e8 f9 eb ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0013e36:	83 c4 10             	add    esp,0x10
c0013e39:	83 c4 0c             	add    esp,0xc
c0013e3c:	c3                   	ret    
c0013e3d:	90                   	nop

c0013e3e <Device::findAndLoadDriver()>:
c0013e3e:	c3                   	ret    
c0013e3f:	90                   	nop

c0013e40 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013e40:	57                   	push   edi
c0013e41:	b9 09 00 00 00       	mov    ecx,0x9
c0013e46:	56                   	push   esi
c0013e47:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013e4b:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013e4f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013e59:	81 c7 18 01 00 00    	add    edi,0x118
c0013e5f:	fc                   	cld    
c0013e60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013e62:	5e                   	pop    esi
c0013e63:	5f                   	pop    edi
c0013e64:	c3                   	ret    
c0013e65:	90                   	nop

c0013e66 <Device::preOpenACPI(void*, char*, char*)>:
c0013e66:	56                   	push   esi
c0013e67:	53                   	push   ebx
c0013e68:	83 ec 08             	sub    esp,0x8
c0013e6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e6f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013e73:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013e7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e81:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013e87:	6a 1e                	push   0x1e
c0013e89:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013e8f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e93:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013e99:	50                   	push   eax
c0013e9a:	e8 a5 c8 fe ff       	call   c0000744 <memcpy>
c0013e9f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013ea3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ea7:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013eaf:	83 c4 14             	add    esp,0x14
c0013eb2:	5b                   	pop    ebx
c0013eb3:	5e                   	pop    esi
c0013eb4:	e9 8b c8 fe ff       	jmp    c0000744 <memcpy>
c0013eb9:	90                   	nop

c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013eba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ebe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ec3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013eca:	75 0b                	jne    c0013ed7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ece:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ed2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013ed5:	eb 1e                	jmp    c0013ef5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ed7:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0013edc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ee2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ee8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013eea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013eee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ef2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ef5:	ff e0                	jmp    eax
c0013ef7:	90                   	nop

c0013ef8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013ef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013efc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f01:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f08:	75 0b                	jne    c0013f15 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f10:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013f13:	eb 1e                	jmp    c0013f33 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013f15:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0013f1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f20:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f26:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f30:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013f33:	ff e0                	jmp    eax
c0013f35:	90                   	nop

c0013f36 <Device::addChild(Device*)>:
c0013f36:	53                   	push   ebx
c0013f37:	83 ec 08             	sub    esp,0x8
c0013f3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f42:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013f48:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013f4e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013f50:	85 d2                	test   edx,edx
c0013f52:	74 04                	je     c0013f58 <Device::addChild(Device*)+0x22>
c0013f54:	89 d3                	mov    ebx,edx
c0013f56:	eb f6                	jmp    c0013f4e <Device::addChild(Device*)+0x18>
c0013f58:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013f5b:	83 ec 0c             	sub    esp,0xc
c0013f5e:	6a 08                	push   0x8
c0013f60:	e8 db b8 ff ff       	call   c000f840 <malloc>
c0013f65:	89 03                	mov    DWORD PTR [ebx],eax
c0013f67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f74:	83 c4 18             	add    esp,0x18
c0013f77:	5b                   	pop    ebx
c0013f78:	c3                   	ret    
c0013f79:	90                   	nop

c0013f7a <Device::removeAllChildren()>:
c0013f7a:	56                   	push   esi
c0013f7b:	53                   	push   ebx
c0013f7c:	52                   	push   edx
c0013f7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f81:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013f87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f8a:	74 17                	je     c0013fa3 <Device::removeAllChildren()+0x29>
c0013f8c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f8f:	85 c0                	test   eax,eax
c0013f91:	74 0c                	je     c0013f9f <Device::removeAllChildren()+0x25>
c0013f93:	83 ec 0c             	sub    esp,0xc
c0013f96:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f98:	50                   	push   eax
c0013f99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013f9c:	83 c4 10             	add    esp,0x10
c0013f9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fa1:	eb e4                	jmp    c0013f87 <Device::removeAllChildren()+0xd>
c0013fa3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fa9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013faf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fb5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fbc:	58                   	pop    eax
c0013fbd:	5b                   	pop    ebx
c0013fbe:	5e                   	pop    esi
c0013fbf:	c3                   	ret    

c0013fc0 <Device::hibernateAll()>:
c0013fc0:	53                   	push   ebx
c0013fc1:	83 ec 14             	sub    esp,0x14
c0013fc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fca:	53                   	push   ebx
c0013fcb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013fce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fd4:	83 c4 10             	add    esp,0x10
c0013fd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fda:	74 0f                	je     c0013feb <Device::hibernateAll()+0x2b>
c0013fdc:	83 ec 0c             	sub    esp,0xc
c0013fdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fe2:	e8 d9 ff ff ff       	call   c0013fc0 <Device::hibernateAll()>
c0013fe7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fe9:	eb e9                	jmp    c0013fd4 <Device::hibernateAll()+0x14>
c0013feb:	83 c4 08             	add    esp,0x8
c0013fee:	5b                   	pop    ebx
c0013fef:	c3                   	ret    

c0013ff0 <Device::wakeAll()>:
c0013ff0:	53                   	push   ebx
c0013ff1:	83 ec 14             	sub    esp,0x14
c0013ff4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ff8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ffa:	53                   	push   ebx
c0013ffb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ffe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014004:	83 c4 10             	add    esp,0x10
c0014007:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001400a:	74 0f                	je     c001401b <Device::wakeAll()+0x2b>
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014012:	e8 d9 ff ff ff       	call   c0013ff0 <Device::wakeAll()>
c0014017:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014019:	eb e9                	jmp    c0014004 <Device::wakeAll()+0x14>
c001401b:	83 c4 08             	add    esp,0x8
c001401e:	5b                   	pop    ebx
c001401f:	c3                   	ret    

c0014020 <Device::detectAll()>:
c0014020:	53                   	push   ebx
c0014021:	83 ec 14             	sub    esp,0x14
c0014024:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014028:	8b 03                	mov    eax,DWORD PTR [ebx]
c001402a:	53                   	push   ebx
c001402b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001402e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014034:	83 c4 10             	add    esp,0x10
c0014037:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001403a:	74 0f                	je     c001404b <Device::detectAll()+0x2b>
c001403c:	83 ec 0c             	sub    esp,0xc
c001403f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014042:	e8 d9 ff ff ff       	call   c0014020 <Device::detectAll()>
c0014047:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014049:	eb e9                	jmp    c0014034 <Device::detectAll()+0x14>
c001404b:	83 c4 08             	add    esp,0x8
c001404e:	5b                   	pop    ebx
c001404f:	c3                   	ret    

c0014050 <Device::disableLegacyAll()>:
c0014050:	53                   	push   ebx
c0014051:	83 ec 14             	sub    esp,0x14
c0014054:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014058:	8b 03                	mov    eax,DWORD PTR [ebx]
c001405a:	53                   	push   ebx
c001405b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001405e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001406a:	74 0f                	je     c001407b <Device::disableLegacyAll()+0x2b>
c001406c:	83 ec 0c             	sub    esp,0xc
c001406f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014072:	e8 d9 ff ff ff       	call   c0014050 <Device::disableLegacyAll()>
c0014077:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014079:	eb e9                	jmp    c0014064 <Device::disableLegacyAll()+0x14>
c001407b:	83 c4 08             	add    esp,0x8
c001407e:	5b                   	pop    ebx
c001407f:	c3                   	ret    

c0014080 <Device::loadDriversForAll()>:
c0014080:	53                   	push   ebx
c0014081:	83 ec 08             	sub    esp,0x8
c0014084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014088:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001408e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014090:	85 db                	test   ebx,ebx
c0014092:	74 12                	je     c00140a6 <Device::loadDriversForAll()+0x26>
c0014094:	83 ec 0c             	sub    esp,0xc
c0014097:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001409a:	e8 e1 ff ff ff       	call   c0014080 <Device::loadDriversForAll()>
c001409f:	83 c4 10             	add    esp,0x10
c00140a2:	89 d8                	mov    eax,ebx
c00140a4:	eb e8                	jmp    c001408e <Device::loadDriversForAll()+0xe>
c00140a6:	83 c4 08             	add    esp,0x8
c00140a9:	5b                   	pop    ebx
c00140aa:	c3                   	ret    
c00140ab:	90                   	nop

c00140ac <Device::closeAll()>:
c00140ac:	53                   	push   ebx
c00140ad:	83 ec 08             	sub    esp,0x8
c00140b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140b6:	6a 00                	push   0x0
c00140b8:	6a 00                	push   0x0
c00140ba:	6a 00                	push   0x0
c00140bc:	53                   	push   ebx
c00140bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140c6:	83 c4 10             	add    esp,0x10
c00140c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140cc:	74 0f                	je     c00140dd <Device::closeAll()+0x31>
c00140ce:	83 ec 0c             	sub    esp,0xc
c00140d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140d4:	e8 d3 ff ff ff       	call   c00140ac <Device::closeAll()>
c00140d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140db:	eb e9                	jmp    c00140c6 <Device::closeAll()+0x1a>
c00140dd:	83 c4 08             	add    esp,0x8
c00140e0:	5b                   	pop    ebx
c00140e1:	c3                   	ret    

c00140e2 <Device::powerSavingAll(PowerSavingLevel)>:
c00140e2:	56                   	push   esi
c00140e3:	53                   	push   ebx
c00140e4:	83 ec 0c             	sub    esp,0xc
c00140e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00140eb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00140ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140f1:	56                   	push   esi
c00140f2:	53                   	push   ebx
c00140f3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00140f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140fc:	83 c4 10             	add    esp,0x10
c00140ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014102:	74 0f                	je     c0014113 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014104:	52                   	push   edx
c0014105:	52                   	push   edx
c0014106:	56                   	push   esi
c0014107:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001410a:	e8 d3 ff ff ff       	call   c00140e2 <Device::powerSavingAll(PowerSavingLevel)>
c001410f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014111:	eb e9                	jmp    c00140fc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014113:	58                   	pop    eax
c0014114:	5b                   	pop    ebx
c0014115:	5e                   	pop    esi
c0014116:	c3                   	ret    
c0014117:	90                   	nop

c0014118 <Device::setName(char const*)>:
c0014118:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014120:	e9 0f c7 fe ff       	jmp    c0000834 <strcpy>
c0014125:	90                   	nop

c0014126 <Device::Device(char const*)>:
c0014126:	83 ec 1c             	sub    esp,0x1c
c0014129:	ba 18 a6 02 c0       	mov    edx,0xc002a618
c001412e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014132:	89 10                	mov    DWORD PTR [eax],edx
c0014134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014138:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014146:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014154:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001415e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014162:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001416c:	83 ec 08             	sub    esp,0x8
c001416f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014177:	e8 9c ff ff ff       	call   c0014118 <Device::setName(char const*)>
c001417c:	83 c4 10             	add    esp,0x10
c001417f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014187:	83 ec 0c             	sub    esp,0xc
c001418a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001418e:	e8 ad b6 ff ff       	call   c000f840 <malloc>
c0014193:	83 c4 10             	add    esp,0x10
c0014196:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001419c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141a7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00141ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141b1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00141d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141dd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00141e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00141f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014204:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001420e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014212:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001421c:	90                   	nop
c001421d:	83 c4 1c             	add    esp,0x1c
c0014220:	c3                   	ret    
c0014221:	90                   	nop

c0014222 <Device::getName()>:
c0014222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014226:	05 d0 00 00 00       	add    eax,0xd0
c001422b:	c3                   	ret    

c001422c <DriverlessDevice::DriverlessDevice(char const*)>:
c001422c:	83 ec 0c             	sub    esp,0xc
c001422f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014233:	83 ec 08             	sub    esp,0x8
c0014236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001423a:	50                   	push   eax
c001423b:	e8 e6 fe ff ff       	call   c0014126 <Device::Device(char const*)>
c0014240:	83 c4 10             	add    esp,0x10
c0014243:	ba 44 a6 02 c0       	mov    edx,0xc002a644
c0014248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001424c:	89 10                	mov    DWORD PTR [eax],edx
c001424e:	90                   	nop
c001424f:	83 c4 0c             	add    esp,0xc
c0014252:	c3                   	ret    
c0014253:	90                   	nop

c0014254 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014254:	57                   	push   edi
c0014255:	56                   	push   esi
c0014256:	53                   	push   ebx
c0014257:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001425b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001425f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014263:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014269:	75 0c                	jne    c0014277 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001426b:	52                   	push   edx
c001426c:	52                   	push   edx
c001426d:	53                   	push   ebx
c001426e:	56                   	push   esi
c001426f:	e8 d6 40 01 00       	call   c002834a <LinkedList<Device>::addElement(Device*)>
c0014274:	83 c4 10             	add    esp,0x10
c0014277:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001427d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014280:	74 12                	je     c0014294 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014282:	50                   	push   eax
c0014283:	57                   	push   edi
c0014284:	56                   	push   esi
c0014285:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014288:	e8 c7 ff ff ff       	call   c0014254 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001428d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001428f:	83 c4 10             	add    esp,0x10
c0014292:	eb e9                	jmp    c001427d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014294:	5b                   	pop    ebx
c0014295:	5e                   	pop    esi
c0014296:	5f                   	pop    edi
c0014297:	c3                   	ret    

c0014298 <getDevicesOfType(DeviceType)>:
c0014298:	53                   	push   ebx
c0014299:	83 ec 14             	sub    esp,0x14
c001429c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142a0:	53                   	push   ebx
c00142a1:	e8 80 41 01 00       	call   c0028426 <LinkedList<Device>::LinkedList()>
c00142a6:	83 c4 0c             	add    esp,0xc
c00142a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142ad:	53                   	push   ebx
c00142ae:	ff 35 08 dd 02 c0    	push   DWORD PTR ds:0xc002dd08
c00142b4:	e8 9b ff ff ff       	call   c0014254 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00142b9:	89 d8                	mov    eax,ebx
c00142bb:	83 c4 18             	add    esp,0x18
c00142be:	5b                   	pop    ebx
c00142bf:	c2 04 00             	ret    0x4

c00142c2 <HardDiskController::HardDiskController(char const*)>:
c00142c2:	83 ec 0c             	sub    esp,0xc
c00142c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c9:	83 ec 08             	sub    esp,0x8
c00142cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142d0:	50                   	push   eax
c00142d1:	e8 50 fe ff ff       	call   c0014126 <Device::Device(char const*)>
c00142d6:	83 c4 10             	add    esp,0x10
c00142d9:	ba 70 a6 02 c0       	mov    edx,0xc002a670
c00142de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142e2:	89 10                	mov    DWORD PTR [eax],edx
c00142e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142e8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00142f2:	90                   	nop
c00142f3:	83 c4 0c             	add    esp,0xc
c00142f6:	c3                   	ret    
c00142f7:	90                   	nop

c00142f8 <HardDiskController::~HardDiskController()>:
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	ba 70 a6 02 c0       	mov    edx,0xc002a670
c0014300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014304:	89 10                	mov    DWORD PTR [eax],edx
c0014306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001430a:	83 ec 0c             	sub    esp,0xc
c001430d:	50                   	push   eax
c001430e:	e8 f5 fa ff ff       	call   c0013e08 <Device::~Device()>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	90                   	nop
c0014317:	83 c4 0c             	add    esp,0xc
c001431a:	c3                   	ret    
c001431b:	90                   	nop

c001431c <HardDiskController::~HardDiskController()>:
c001431c:	83 ec 0c             	sub    esp,0xc
c001431f:	83 ec 0c             	sub    esp,0xc
c0014322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014326:	e8 cd ff ff ff       	call   c00142f8 <HardDiskController::~HardDiskController()>
c001432b:	83 c4 10             	add    esp,0x10
c001432e:	83 ec 08             	sub    esp,0x8
c0014331:	68 58 01 00 00       	push   0x158
c0014336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001433a:	e8 f0 e6 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c001433f:	83 c4 10             	add    esp,0x10
c0014342:	83 c4 0c             	add    esp,0xc
c0014345:	c3                   	ret    

c0014346 <PhysicalDisk::eject()>:
c0014346:	83 ec 18             	sub    esp,0x18
c0014349:	68 94 a6 02 c0       	push   0xc002a694
c001434e:	e8 bc e7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014353:	83 c8 ff             	or     eax,0xffffffff
c0014356:	83 c4 1c             	add    esp,0x1c
c0014359:	c3                   	ret    

c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001435a:	83 ec 0c             	sub    esp,0xc
c001435d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014361:	83 ec 08             	sub    esp,0x8
c0014364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014368:	50                   	push   eax
c0014369:	e8 b8 fd ff ff       	call   c0014126 <Device::Device(char const*)>
c001436e:	83 c4 10             	add    esp,0x10
c0014371:	ba c4 a6 02 c0       	mov    edx,0xc002a6c4
c0014376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001437a:	89 10                	mov    DWORD PTR [eax],edx
c001437c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014380:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014396:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00143a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143a8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00143ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143bc:	90                   	nop
c00143bd:	83 c4 0c             	add    esp,0xc
c00143c0:	c3                   	ret    
c00143c1:	90                   	nop

c00143c2 <PhysicalDisk::startCache()>:
c00143c2:	56                   	push   esi
c00143c3:	53                   	push   ebx
c00143c4:	83 ec 10             	sub    esp,0x10
c00143c7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143cb:	6a 44                	push   0x44
c00143cd:	e8 6e b4 ff ff       	call   c000f840 <malloc>
c00143d2:	89 c6                	mov    esi,eax
c00143d4:	58                   	pop    eax
c00143d5:	5a                   	pop    edx
c00143d6:	53                   	push   ebx
c00143d7:	56                   	push   esi
c00143d8:	e8 d5 26 00 00       	call   c0016ab2 <VCache::VCache(PhysicalDisk*)>
c00143dd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00143e3:	83 c4 14             	add    esp,0x14
c00143e6:	5b                   	pop    ebx
c00143e7:	5e                   	pop    esi
c00143e8:	c3                   	ret    
c00143e9:	90                   	nop

c00143ea <PhysicalDisk::~PhysicalDisk()>:
c00143ea:	83 ec 0c             	sub    esp,0xc
c00143ed:	ba c4 a6 02 c0       	mov    edx,0xc002a6c4
c00143f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143f6:	89 10                	mov    DWORD PTR [eax],edx
c00143f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	50                   	push   eax
c0014400:	e8 03 fa ff ff       	call   c0013e08 <Device::~Device()>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	90                   	nop
c0014409:	83 c4 0c             	add    esp,0xc
c001440c:	c3                   	ret    
c001440d:	90                   	nop

c001440e <PhysicalDisk::~PhysicalDisk()>:
c001440e:	83 ec 0c             	sub    esp,0xc
c0014411:	83 ec 0c             	sub    esp,0xc
c0014414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014418:	e8 cd ff ff ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c001441d:	83 c4 10             	add    esp,0x10
c0014420:	83 ec 08             	sub    esp,0x8
c0014423:	68 6c 01 00 00       	push   0x16c
c0014428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001442c:	e8 fe e5 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	83 c4 0c             	add    esp,0xc
c0014437:	c3                   	ret    

c0014438 <FPU::FPU(char const*)>:
c0014438:	83 ec 0c             	sub    esp,0xc
c001443b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001443f:	83 ec 08             	sub    esp,0x8
c0014442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014446:	50                   	push   eax
c0014447:	e8 da fc ff ff       	call   c0014126 <Device::Device(char const*)>
c001444c:	83 c4 10             	add    esp,0x10
c001444f:	ba 08 a7 02 c0       	mov    edx,0xc002a708
c0014454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014458:	89 10                	mov    DWORD PTR [eax],edx
c001445a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001445e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014468:	90                   	nop
c0014469:	83 c4 0c             	add    esp,0xc
c001446c:	c3                   	ret    
c001446d:	90                   	nop

c001446e <FPU::~FPU()>:
c001446e:	83 ec 0c             	sub    esp,0xc
c0014471:	ba 08 a7 02 c0       	mov    edx,0xc002a708
c0014476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001447a:	89 10                	mov    DWORD PTR [eax],edx
c001447c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014480:	83 ec 0c             	sub    esp,0xc
c0014483:	50                   	push   eax
c0014484:	e8 7f f9 ff ff       	call   c0013e08 <Device::~Device()>
c0014489:	83 c4 10             	add    esp,0x10
c001448c:	90                   	nop
c001448d:	83 c4 0c             	add    esp,0xc
c0014490:	c3                   	ret    
c0014491:	90                   	nop

c0014492 <FPU::~FPU()>:
c0014492:	83 ec 0c             	sub    esp,0xc
c0014495:	83 ec 0c             	sub    esp,0xc
c0014498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001449c:	e8 cd ff ff ff       	call   c001446e <FPU::~FPU()>
c00144a1:	83 c4 10             	add    esp,0x10
c00144a4:	83 ec 08             	sub    esp,0x8
c00144a7:	68 58 01 00 00       	push   0x158
c00144ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144b0:	e8 7a e5 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00144b5:	83 c4 10             	add    esp,0x10
c00144b8:	83 c4 0c             	add    esp,0xc
c00144bb:	c3                   	ret    

c00144bc <setupFPU()>:
c00144bc:	53                   	push   ebx
c00144bd:	83 ec 08             	sub    esp,0x8
c00144c0:	8b 15 08 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd08
c00144c6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00144cd:	74 19                	je     c00144e8 <setupFPU()+0x2c>
c00144cf:	83 ec 0c             	sub    esp,0xc
c00144d2:	68 58 01 00 00       	push   0x158
c00144d7:	e8 64 b3 ff ff       	call   c000f840 <malloc>
c00144dc:	89 c3                	mov    ebx,eax
c00144de:	89 04 24             	mov    DWORD PTR [esp],eax
c00144e1:	e8 ae 0a 01 00       	call   c0024f94 <AVX::AVX()>
c00144e6:	eb 5b                	jmp    c0014543 <setupFPU()+0x87>
c00144e8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00144ee:	84 c0                	test   al,al
c00144f0:	79 19                	jns    c001450b <setupFPU()+0x4f>
c00144f2:	83 ec 0c             	sub    esp,0xc
c00144f5:	68 58 01 00 00       	push   0x158
c00144fa:	e8 41 b3 ff ff       	call   c000f840 <malloc>
c00144ff:	89 c3                	mov    ebx,eax
c0014501:	89 04 24             	mov    DWORD PTR [esp],eax
c0014504:	e8 b1 0b 01 00       	call   c00250ba <SSE::SSE()>
c0014509:	eb 38                	jmp    c0014543 <setupFPU()+0x87>
c001450b:	a8 20                	test   al,0x20
c001450d:	74 19                	je     c0014528 <setupFPU()+0x6c>
c001450f:	83 ec 0c             	sub    esp,0xc
c0014512:	68 58 01 00 00       	push   0x158
c0014517:	e8 24 b3 ff ff       	call   c000f840 <malloc>
c001451c:	89 c3                	mov    ebx,eax
c001451e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014521:	e8 fe 0a 01 00       	call   c0025024 <MMX::MMX()>
c0014526:	eb 1b                	jmp    c0014543 <setupFPU()+0x87>
c0014528:	a8 10                	test   al,0x10
c001452a:	74 1c                	je     c0014548 <setupFPU()+0x8c>
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	68 58 01 00 00       	push   0x158
c0014534:	e8 07 b3 ff ff       	call   c000f840 <malloc>
c0014539:	89 c3                	mov    ebx,eax
c001453b:	89 04 24             	mov    DWORD PTR [esp],eax
c001453e:	e8 05 0c 01 00       	call   c0025148 <x87::x87()>
c0014543:	83 c4 10             	add    esp,0x10
c0014546:	eb 24                	jmp    c001456c <setupFPU()+0xb0>
c0014548:	83 e0 ef             	and    eax,0xffffffef
c001454b:	83 ec 0c             	sub    esp,0xc
c001454e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014554:	68 f4 a6 02 c0       	push   0xc002a6f4
c0014559:	e8 b1 e5 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001455e:	0f 20 c0             	mov    eax,cr0
c0014561:	83 c8 04             	or     eax,0x4
c0014564:	0f 22 c0             	mov    cr0,eax
c0014567:	31 db                	xor    ebx,ebx
c0014569:	83 c4 10             	add    esp,0x10
c001456c:	89 d8                	mov    eax,ebx
c001456e:	83 c4 08             	add    esp,0x8
c0014571:	5b                   	pop    ebx
c0014572:	c3                   	ret    
c0014573:	90                   	nop

c0014574 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014578:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001457c:	c1 e0 04             	shl    eax,0x4
c001457f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014583:	8d 50 10             	lea    edx,[eax+0x10]
c0014586:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001458c:	74 08                	je     c0014596 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001458e:	83 c0 04             	add    eax,0x4
c0014591:	39 d0                	cmp    eax,edx
c0014593:	75 f1                	jne    c0014586 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014595:	c3                   	ret    
c0014596:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145a0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145aa:	eb e2                	jmp    c001458e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00145ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00145ac:	57                   	push   edi
c00145ad:	31 c0                	xor    eax,eax
c00145af:	56                   	push   esi
c00145b0:	53                   	push   ebx
c00145b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00145b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00145bd:	89 da                	mov    edx,ebx
c00145bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00145c3:	c1 e2 04             	shl    edx,0x4
c00145c6:	01 ca                	add    edx,ecx
c00145c8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00145d0:	74 16                	je     c00145e8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00145d2:	40                   	inc    eax
c00145d3:	83 f8 04             	cmp    eax,0x4
c00145d6:	75 f0                	jne    c00145c8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00145d8:	c7 44 24 10 38 a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a738
c00145e0:	5b                   	pop    ebx
c00145e1:	5e                   	pop    esi
c00145e2:	5f                   	pop    edi
c00145e3:	e9 b7 5b 00 00       	jmp    c001a19f <Krnl::panic(char const*)>
c00145e8:	8d 04 98             	lea    eax,[eax+ebx*4]
c00145eb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00145ee:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00145f4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00145fa:	5b                   	pop    ebx
c00145fb:	5e                   	pop    esi
c00145fc:	5f                   	pop    edi
c00145fd:	c3                   	ret    

c00145fe <doubleFault(regs*, void*)>:
c00145fe:	55                   	push   ebp
c00145ff:	89 e5                	mov    ebp,esp
c0014601:	83 ec 08             	sub    esp,0x8
c0014604:	83 ec 0c             	sub    esp,0xc
c0014607:	68 73 a7 02 c0       	push   0xc002a773
c001460c:	e8 8e 5b 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0014611:	83 c4 10             	add    esp,0x10
c0014614:	90                   	nop
c0014615:	c9                   	leave  
c0014616:	c3                   	ret    
c0014617:	90                   	nop

c0014618 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014618:	56                   	push   esi
c0014619:	53                   	push   ebx
c001461a:	50                   	push   eax
c001461b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001461f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014623:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014628:	75 35                	jne    c001465f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001462a:	8d 43 20             	lea    eax,[ebx+0x20]
c001462d:	31 d2                	xor    edx,edx
c001462f:	89 c1                	mov    ecx,eax
c0014631:	c1 e1 04             	shl    ecx,0x4
c0014634:	01 f1                	add    ecx,esi
c0014636:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001463e:	74 3e                	je     c001467e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014640:	42                   	inc    edx
c0014641:	83 fa 04             	cmp    edx,0x4
c0014644:	75 f0                	jne    c0014636 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014646:	83 ec 0c             	sub    esp,0xc
c0014649:	68 b8 a7 02 c0       	push   0xc002a7b8
c001464e:	e8 4c 5b 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0014653:	83 c4 10             	add    esp,0x10
c0014656:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001465b:	5a                   	pop    edx
c001465c:	5b                   	pop    ebx
c001465d:	5e                   	pop    esi
c001465e:	c3                   	ret    
c001465f:	83 ec 0c             	sub    esp,0xc
c0014662:	56                   	push   esi
c0014663:	e8 ba fb ff ff       	call   c0014222 <Device::getName()>
c0014668:	83 c4 10             	add    esp,0x10
c001466b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001466e:	75 ba                	jne    c001462a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014670:	83 fb 0f             	cmp    ebx,0xf
c0014673:	7f 29                	jg     c001469e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014675:	0f b6 9b 60 cf 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd30a0]
c001467c:	eb ac                	jmp    c001462a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001467e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014681:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014685:	8d 04 86             	lea    eax,[esi+eax*4]
c0014688:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001468e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014692:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014698:	89 d8                	mov    eax,ebx
c001469a:	5a                   	pop    edx
c001469b:	5b                   	pop    ebx
c001469c:	5e                   	pop    esi
c001469d:	c3                   	ret    
c001469e:	83 ec 0c             	sub    esp,0xc
c00146a1:	68 80 a7 02 c0       	push   0xc002a780
c00146a6:	e8 f4 5a 00 00       	call   c001a19f <Krnl::panic(char const*)>
c00146ab:	83 c4 10             	add    esp,0x10
c00146ae:	e9 77 ff ff ff       	jmp    c001462a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146b3:	90                   	nop

c00146b4 <InterruptController::clearAllHandlers(int, bool)>:
c00146b4:	56                   	push   esi
c00146b5:	53                   	push   ebx
c00146b6:	52                   	push   edx
c00146b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146bf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00146c4:	75 61                	jne    c0014727 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00146c6:	8d 46 20             	lea    eax,[esi+0x20]
c00146c9:	c1 e6 04             	shl    esi,0x4
c00146cc:	c1 e0 04             	shl    eax,0x4
c00146cf:	01 de                	add    esi,ebx
c00146d1:	01 d8                	add    eax,ebx
c00146d3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00146dd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00146e7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00146f1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00146fb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014705:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001470f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014719:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014723:	58                   	pop    eax
c0014724:	5b                   	pop    ebx
c0014725:	5e                   	pop    esi
c0014726:	c3                   	ret    
c0014727:	83 ec 0c             	sub    esp,0xc
c001472a:	53                   	push   ebx
c001472b:	e8 f2 fa ff ff       	call   c0014222 <Device::getName()>
c0014730:	83 c4 10             	add    esp,0x10
c0014733:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014736:	75 8e                	jne    c00146c6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014738:	83 fe 0f             	cmp    esi,0xf
c001473b:	7f 09                	jg     c0014746 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001473d:	0f b6 b6 60 cf 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd30a0]
c0014744:	eb 80                	jmp    c00146c6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014746:	83 ec 0c             	sub    esp,0xc
c0014749:	68 f4 a7 02 c0       	push   0xc002a7f4
c001474e:	e8 4c 5a 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0014753:	83 c4 10             	add    esp,0x10
c0014756:	e9 6b ff ff ff       	jmp    c00146c6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001475b:	90                   	nop

c001475c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001475c:	56                   	push   esi
c001475d:	53                   	push   ebx
c001475e:	52                   	push   edx
c001475f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014763:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014767:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001476c:	75 3a                	jne    c00147a8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001476e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014772:	8d 50 20             	lea    edx,[eax+0x20]
c0014775:	c1 e2 04             	shl    edx,0x4
c0014778:	8d 04 16             	lea    eax,[esi+edx*1]
c001477b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001477f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014785:	74 0b                	je     c0014792 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014787:	83 c0 04             	add    eax,0x4
c001478a:	39 d0                	cmp    eax,edx
c001478c:	75 f1                	jne    c001477f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001478e:	58                   	pop    eax
c001478f:	5b                   	pop    ebx
c0014790:	5e                   	pop    esi
c0014791:	c3                   	ret    
c0014792:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001479c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00147a6:	eb df                	jmp    c0014787 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00147a8:	83 ec 0c             	sub    esp,0xc
c00147ab:	56                   	push   esi
c00147ac:	e8 71 fa ff ff       	call   c0014222 <Device::getName()>
c00147b1:	83 c4 10             	add    esp,0x10
c00147b4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00147b7:	75 b5                	jne    c001476e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147b9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00147be:	7f 11                	jg     c00147d1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00147c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147c4:	0f b6 80 60 cf 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd30a0]
c00147cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147cf:	eb 9d                	jmp    c001476e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147d1:	83 ec 0c             	sub    esp,0xc
c00147d4:	68 f4 a7 02 c0       	push   0xc002a7f4
c00147d9:	e8 c1 59 00 00       	call   c001a19f <Krnl::panic(char const*)>
c00147de:	83 c4 10             	add    esp,0x10
c00147e1:	eb 8b                	jmp    c001476e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00147e3 <nmiHandler(regs*, void*)>:
c00147e3:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00147e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147ec:	e9 9b a7 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c00147f1 <int_handler>:
c00147f1:	55                   	push   ebp
c00147f2:	57                   	push   edi
c00147f3:	56                   	push   esi
c00147f4:	53                   	push   ebx
c00147f5:	83 ec 0c             	sub    esp,0xc
c00147f8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00147fc:	80 3d 64 08 03 c0 00 	cmp    BYTE PTR ds:0xc0030864,0x0
c0014803:	74 0b                	je     c0014810 <int_handler+0x1f>
c0014805:	fa                   	cli    
c0014806:	f4                   	hlt    
c0014807:	80 3d 64 08 03 c0 00 	cmp    BYTE PTR ds:0xc0030864,0x0
c001480e:	75 f5                	jne    c0014805 <int_handler+0x14>
c0014810:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0014815:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014818:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001481e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014824:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014827:	83 f8 17             	cmp    eax,0x17
c001482a:	77 13                	ja     c001483f <int_handler+0x4e>
c001482c:	83 ec 08             	sub    esp,0x8
c001482f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014831:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014834:	0f b6 c0             	movzx  eax,al
c0014837:	50                   	push   eax
c0014838:	57                   	push   edi
c0014839:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001483c:	83 c4 10             	add    esp,0x10
c001483f:	83 c3 15             	add    ebx,0x15
c0014842:	c1 e3 04             	shl    ebx,0x4
c0014845:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014849:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014850:	31 db                	xor    ebx,ebx
c0014852:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014856:	85 c0                	test   eax,eax
c0014858:	74 13                	je     c001486d <int_handler+0x7c>
c001485a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001485d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014861:	74 1c                	je     c001487f <int_handler+0x8e>
c0014863:	83 ec 08             	sub    esp,0x8
c0014866:	52                   	push   edx
c0014867:	56                   	push   esi
c0014868:	ff d0                	call   eax
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	43                   	inc    ebx
c001486e:	83 fb 04             	cmp    ebx,0x4
c0014871:	75 df                	jne    c0014852 <int_handler+0x61>
c0014873:	83 c4 0c             	add    esp,0xc
c0014876:	31 c0                	xor    eax,eax
c0014878:	5b                   	pop    ebx
c0014879:	31 d2                	xor    edx,edx
c001487b:	5e                   	pop    esi
c001487c:	5f                   	pop    edi
c001487d:	5d                   	pop    ebp
c001487e:	c3                   	ret    
c001487f:	83 ec 08             	sub    esp,0x8
c0014882:	52                   	push   edx
c0014883:	56                   	push   esi
c0014884:	ff d0                	call   eax
c0014886:	83 c4 10             	add    esp,0x10
c0014889:	83 c4 0c             	add    esp,0xc
c001488c:	5b                   	pop    ebx
c001488d:	5e                   	pop    esi
c001488e:	5f                   	pop    edi
c001488f:	5d                   	pop    ebp
c0014890:	c3                   	ret    
c0014891:	90                   	nop

c0014892 <InterruptController::InterruptController(char const*)>:
c0014892:	83 ec 1c             	sub    esp,0x1c
c0014895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014899:	83 ec 08             	sub    esp,0x8
c001489c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00148a0:	50                   	push   eax
c00148a1:	e8 80 f8 ff ff       	call   c0014126 <Device::Device(char const*)>
c00148a6:	83 c4 10             	add    esp,0x10
c00148a9:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c00148ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148b2:	89 10                	mov    DWORD PTR [eax],edx
c00148b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148b8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00148c2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148ca:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00148d2:	7f 5e                	jg     c0014932 <InterruptController::InterruptController(char const*)+0xa0>
c00148d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148dc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00148e1:	7f 49                	jg     c001492c <InterruptController::InterruptController(char const*)+0x9a>
c00148e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00148eb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00148f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148f6:	01 ca                	add    edx,ecx
c00148f8:	83 c2 54             	add    edx,0x54
c00148fb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014907:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001490b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014912:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014916:	01 ca                	add    edx,ecx
c0014918:	81 c2 54 04 00 00    	add    edx,0x454
c001491e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014926:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001492a:	eb b0                	jmp    c00148dc <InterruptController::InterruptController(char const*)+0x4a>
c001492c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014930:	eb 98                	jmp    c00148ca <InterruptController::InterruptController(char const*)+0x38>
c0014932:	90                   	nop
c0014933:	83 c4 1c             	add    esp,0x1c
c0014936:	c3                   	ret    
c0014937:	90                   	nop

c0014938 <InterruptController::~InterruptController()>:
c0014938:	83 ec 0c             	sub    esp,0xc
c001493b:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c0014940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014944:	89 10                	mov    DWORD PTR [eax],edx
c0014946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001494a:	83 ec 0c             	sub    esp,0xc
c001494d:	50                   	push   eax
c001494e:	e8 b5 f4 ff ff       	call   c0013e08 <Device::~Device()>
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	90                   	nop
c0014957:	83 c4 0c             	add    esp,0xc
c001495a:	c3                   	ret    
c001495b:	90                   	nop

c001495c <InterruptController::~InterruptController()>:
c001495c:	83 ec 0c             	sub    esp,0xc
c001495f:	83 ec 0c             	sub    esp,0xc
c0014962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014966:	e8 cd ff ff ff       	call   c0014938 <InterruptController::~InterruptController()>
c001496b:	83 c4 10             	add    esp,0x10
c001496e:	83 ec 08             	sub    esp,0x8
c0014971:	68 58 21 00 00       	push   0x2158
c0014976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001497a:	e8 b0 e0 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c001497f:	83 c4 10             	add    esp,0x10
c0014982:	83 c4 0c             	add    esp,0xc
c0014985:	c3                   	ret    

c0014986 <displayDebugInfo(regs*)>:
c0014986:	55                   	push   ebp
c0014987:	57                   	push   edi
c0014988:	56                   	push   esi
c0014989:	53                   	push   ebx
c001498a:	83 ec 24             	sub    esp,0x24
c001498d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014991:	0f 20 c2             	mov    edx,cr0
c0014994:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014998:	0f 20 d7             	mov    edi,cr2
c001499b:	0f 20 de             	mov    esi,cr3
c001499e:	0f 20 e5             	mov    ebp,cr4
c00149a1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00149a4:	68 2e a8 02 c0       	push   0xc002a82e
c00149a9:	e8 61 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149ae:	59                   	pop    ecx
c00149af:	58                   	pop    eax
c00149b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149b3:	68 39 a8 02 c0       	push   0xc002a839
c00149b8:	e8 52 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149bd:	58                   	pop    eax
c00149be:	5a                   	pop    edx
c00149bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00149c2:	68 44 a8 02 c0       	push   0xc002a844
c00149c7:	e8 43 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149cc:	59                   	pop    ecx
c00149cd:	58                   	pop    eax
c00149ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149d1:	68 4f a8 02 c0       	push   0xc002a84f
c00149d6:	e8 34 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149db:	58                   	pop    eax
c00149dc:	5a                   	pop    edx
c00149dd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00149e0:	68 5a a8 02 c0       	push   0xc002a85a
c00149e5:	e8 25 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149ea:	59                   	pop    ecx
c00149eb:	58                   	pop    eax
c00149ec:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00149ef:	68 65 a8 02 c0       	push   0xc002a865
c00149f4:	e8 16 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149f9:	58                   	pop    eax
c00149fa:	5a                   	pop    edx
c00149fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00149fe:	68 70 a8 02 c0       	push   0xc002a870
c0014a03:	e8 07 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a08:	59                   	pop    ecx
c0014a09:	58                   	pop    eax
c0014a0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014a0d:	68 7b a8 02 c0       	push   0xc002a87b
c0014a12:	e8 f8 e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a17:	58                   	pop    eax
c0014a18:	5a                   	pop    edx
c0014a19:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a1c:	68 86 a8 02 c0       	push   0xc002a886
c0014a21:	e8 e9 e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a26:	59                   	pop    ecx
c0014a27:	58                   	pop    eax
c0014a28:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a2b:	68 95 a8 02 c0       	push   0xc002a895
c0014a30:	e8 da e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a35:	58                   	pop    eax
c0014a36:	5a                   	pop    edx
c0014a37:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a3a:	68 a0 a8 02 c0       	push   0xc002a8a0
c0014a3f:	e8 cb e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a44:	59                   	pop    ecx
c0014a45:	58                   	pop    eax
c0014a46:	57                   	push   edi
c0014a47:	68 ab a8 02 c0       	push   0xc002a8ab
c0014a4c:	e8 be e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a51:	58                   	pop    eax
c0014a52:	5a                   	pop    edx
c0014a53:	56                   	push   esi
c0014a54:	68 b6 a8 02 c0       	push   0xc002a8b6
c0014a59:	e8 b1 e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a5e:	59                   	pop    ecx
c0014a5f:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014a64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6a:	e8 62 c2 ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c0014a6f:	58                   	pop    eax
c0014a70:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a73:	5a                   	pop    edx
c0014a74:	c1 e0 05             	shl    eax,0x5
c0014a77:	05 c0 cc 02 c0       	add    eax,0xc002ccc0
c0014a7c:	50                   	push   eax
c0014a7d:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014a82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a88:	e8 63 c6 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014a8d:	59                   	pop    ecx
c0014a8e:	58                   	pop    eax
c0014a8f:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014a94:	68 c1 a8 02 c0       	push   0xc002a8c1
c0014a99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a9f:	e8 4c c6 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014aa4:	58                   	pop    eax
c0014aa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aaa:	5a                   	pop    edx
c0014aab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aae:	83 c0 0c             	add    eax,0xc
c0014ab1:	50                   	push   eax
c0014ab2:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014ab7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abd:	e8 2e c6 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014ac2:	59                   	pop    ecx
c0014ac3:	58                   	pop    eax
c0014ac4:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014ac9:	68 ca a8 02 c0       	push   0xc002a8ca
c0014ace:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad4:	e8 17 c6 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014ad9:	58                   	pop    eax
c0014ada:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014adf:	5a                   	pop    edx
c0014ae0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ae3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae9:	e8 28 c6 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014aee:	59                   	pop    ecx
c0014aef:	58                   	pop    eax
c0014af0:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014af5:	68 d2 a8 02 c0       	push   0xc002a8d2
c0014afa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b00:	e8 eb c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014b05:	58                   	pop    eax
c0014b06:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014b0b:	5a                   	pop    edx
c0014b0c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014b0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b15:	e8 fc c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014b1a:	59                   	pop    ecx
c0014b1b:	58                   	pop    eax
c0014b1c:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014b21:	68 da a8 02 c0       	push   0xc002a8da
c0014b26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2c:	e8 bf c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014b31:	58                   	pop    eax
c0014b32:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014b37:	5a                   	pop    edx
c0014b38:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014b3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b41:	e8 d0 c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014b46:	59                   	pop    ecx
c0014b47:	58                   	pop    eax
c0014b48:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014b4d:	68 e2 a8 02 c0       	push   0xc002a8e2
c0014b52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b58:	e8 93 c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014b5d:	58                   	pop    eax
c0014b5e:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014b63:	5a                   	pop    edx
c0014b64:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014b67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b6d:	e8 a4 c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014b72:	59                   	pop    ecx
c0014b73:	58                   	pop    eax
c0014b74:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014b79:	68 ea a8 02 c0       	push   0xc002a8ea
c0014b7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b84:	e8 67 c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014b89:	58                   	pop    eax
c0014b8a:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014b8f:	5a                   	pop    edx
c0014b90:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014b93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b99:	e8 78 c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014b9e:	59                   	pop    ecx
c0014b9f:	58                   	pop    eax
c0014ba0:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014ba5:	68 f2 a8 02 c0       	push   0xc002a8f2
c0014baa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb0:	e8 3b c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014bb5:	58                   	pop    eax
c0014bb6:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014bbb:	5a                   	pop    edx
c0014bbc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014bbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc5:	e8 4c c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014bca:	59                   	pop    ecx
c0014bcb:	58                   	pop    eax
c0014bcc:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014bd1:	68 fa a8 02 c0       	push   0xc002a8fa
c0014bd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bdc:	e8 0f c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014be1:	58                   	pop    eax
c0014be2:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014be7:	5a                   	pop    edx
c0014be8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014bec:	52                   	push   edx
c0014bed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bf3:	e8 1e c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014bf8:	59                   	pop    ecx
c0014bf9:	58                   	pop    eax
c0014bfa:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014bff:	68 03 a9 02 c0       	push   0xc002a903
c0014c04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c0a:	e8 e1 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014c0f:	58                   	pop    eax
c0014c10:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014c15:	5a                   	pop    edx
c0014c16:	57                   	push   edi
c0014c17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c1d:	e8 f4 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014c22:	59                   	pop    ecx
c0014c23:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014c28:	5f                   	pop    edi
c0014c29:	68 0b a9 02 c0       	push   0xc002a90b
c0014c2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c34:	e8 b7 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014c39:	58                   	pop    eax
c0014c3a:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014c3f:	5a                   	pop    edx
c0014c40:	56                   	push   esi
c0014c41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c47:	e8 ca c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014c4c:	59                   	pop    ecx
c0014c4d:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014c52:	5e                   	pop    esi
c0014c53:	68 13 a9 02 c0       	push   0xc002a913
c0014c58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c5e:	e8 8d c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014c63:	5f                   	pop    edi
c0014c64:	58                   	pop    eax
c0014c65:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014c6a:	55                   	push   ebp
c0014c6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c71:	e8 a0 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014c76:	58                   	pop    eax
c0014c77:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014c7c:	5a                   	pop    edx
c0014c7d:	68 1b a9 02 c0       	push   0xc002a91b
c0014c82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c88:	e8 63 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014c8d:	0f 21 c0             	mov    eax,db0
c0014c90:	59                   	pop    ecx
c0014c91:	5e                   	pop    esi
c0014c92:	50                   	push   eax
c0014c93:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014c98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c9e:	e8 73 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014ca3:	5f                   	pop    edi
c0014ca4:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014ca9:	5d                   	pop    ebp
c0014caa:	68 24 a9 02 c0       	push   0xc002a924
c0014caf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cb5:	e8 36 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014cba:	0f 21 c8             	mov    eax,db1
c0014cbd:	5a                   	pop    edx
c0014cbe:	59                   	pop    ecx
c0014cbf:	50                   	push   eax
c0014cc0:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014cc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ccb:	e8 46 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014cd0:	5e                   	pop    esi
c0014cd1:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014cd6:	5f                   	pop    edi
c0014cd7:	68 2c a9 02 c0       	push   0xc002a92c
c0014cdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce2:	e8 09 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014ce7:	0f 21 d0             	mov    eax,db2
c0014cea:	5d                   	pop    ebp
c0014ceb:	5a                   	pop    edx
c0014cec:	50                   	push   eax
c0014ced:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014cf2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cf8:	e8 19 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014cfd:	59                   	pop    ecx
c0014cfe:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014d03:	5e                   	pop    esi
c0014d04:	68 34 a9 02 c0       	push   0xc002a934
c0014d09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d0f:	e8 dc c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014d14:	0f 21 d8             	mov    eax,db3
c0014d17:	5f                   	pop    edi
c0014d18:	5d                   	pop    ebp
c0014d19:	50                   	push   eax
c0014d1a:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014d1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d25:	e8 ec c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014d2a:	58                   	pop    eax
c0014d2b:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014d30:	5a                   	pop    edx
c0014d31:	68 3c a9 02 c0       	push   0xc002a93c
c0014d36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d3c:	e8 af c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014d41:	0f 21 f0             	mov    eax,db6
c0014d44:	59                   	pop    ecx
c0014d45:	5e                   	pop    esi
c0014d46:	50                   	push   eax
c0014d47:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014d4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d52:	e8 bf c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014d57:	5f                   	pop    edi
c0014d58:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014d5d:	5d                   	pop    ebp
c0014d5e:	68 44 a9 02 c0       	push   0xc002a944
c0014d63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d69:	e8 82 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014d6e:	0f 21 f8             	mov    eax,db7
c0014d71:	5a                   	pop    edx
c0014d72:	59                   	pop    ecx
c0014d73:	50                   	push   eax
c0014d74:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014d79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d7f:	e8 92 c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014d84:	5e                   	pop    esi
c0014d85:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d88:	e8 a9 83 00 00       	call   c001d136 <Thr::getDriverNameFromAddress(unsigned long)>
c0014d8d:	83 c4 10             	add    esp,0x10
c0014d90:	85 c0                	test   eax,eax
c0014d92:	74 7d                	je     c0014e11 <displayDebugInfo(regs*)+0x48b>
c0014d94:	89 c6                	mov    esi,eax
c0014d96:	50                   	push   eax
c0014d97:	50                   	push   eax
c0014d98:	56                   	push   esi
c0014d99:	68 4c a9 02 c0       	push   0xc002a94c
c0014d9e:	e8 6c dd ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014da3:	5a                   	pop    edx
c0014da4:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014da9:	59                   	pop    ecx
c0014daa:	68 5a a9 02 c0       	push   0xc002a95a
c0014daf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014db5:	e8 36 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014dba:	5f                   	pop    edi
c0014dbb:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014dc0:	5d                   	pop    ebp
c0014dc1:	56                   	push   esi
c0014dc2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc8:	e8 23 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014dcd:	58                   	pop    eax
c0014dce:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014dd3:	5a                   	pop    edx
c0014dd4:	68 66 a9 02 c0       	push   0xc002a966
c0014dd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ddf:	e8 0c c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014de4:	59                   	pop    ecx
c0014de5:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0014dea:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014df0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014df3:	e8 75 83 00 00       	call   c001d16d <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014df8:	5b                   	pop    ebx
c0014df9:	5d                   	pop    ebp
c0014dfa:	50                   	push   eax
c0014dfb:	57                   	push   edi
c0014dfc:	e8 15 c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014e01:	58                   	pop    eax
c0014e02:	5a                   	pop    edx
c0014e03:	56                   	push   esi
c0014e04:	68 72 a9 02 c0       	push   0xc002a972
c0014e09:	e8 01 dd ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014e0e:	83 c4 10             	add    esp,0x10
c0014e11:	fa                   	cli    
c0014e12:	f4                   	hlt    
c0014e13:	eb fe                	jmp    c0014e13 <displayDebugInfo(regs*)+0x48d>

c0014e15 <x87EmulHandler(regs*, void*)>:
c0014e15:	53                   	push   ebx
c0014e16:	83 ec 14             	sub    esp,0x14
c0014e19:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e1d:	53                   	push   ebx
c0014e1e:	e8 9f a6 00 00       	call   c001f4c2 <Vm::x87Handler(regs*)>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	84 c0                	test   al,al
c0014e28:	74 05                	je     c0014e2f <x87EmulHandler(regs*, void*)+0x1a>
c0014e2a:	83 c4 08             	add    esp,0x8
c0014e2d:	5b                   	pop    ebx
c0014e2e:	c3                   	ret    
c0014e2f:	83 ec 0c             	sub    esp,0xc
c0014e32:	68 82 a9 02 c0       	push   0xc002a982
c0014e37:	e8 d3 dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014e3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e3f:	e8 42 fb ff ff       	call   c0014986 <displayDebugInfo(regs*)>

c0014e44 <gpFault(regs*, void*)>:
c0014e44:	53                   	push   ebx
c0014e45:	83 ec 14             	sub    esp,0x14
c0014e48:	c7 05 b0 de 02 c0 3f e8 01 c0 	mov    DWORD PTR ds:0xc002deb0,0xc001e83f
c0014e52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e56:	53                   	push   ebx
c0014e57:	e8 e3 99 00 00       	call   c001e83f <Vm::faultHandler(regs*)>
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	84 c0                	test   al,al
c0014e61:	74 05                	je     c0014e68 <gpFault(regs*, void*)+0x24>
c0014e63:	83 c4 08             	add    esp,0x8
c0014e66:	5b                   	pop    ebx
c0014e67:	c3                   	ret    
c0014e68:	83 ec 0c             	sub    esp,0xc
c0014e6b:	68 98 a9 02 c0       	push   0xc002a998
c0014e70:	e8 9a dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014e75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e78:	e8 09 fb ff ff       	call   c0014986 <displayDebugInfo(regs*)>

c0014e7d <pgFault(regs*, void*)>:
c0014e7d:	83 ec 18             	sub    esp,0x18
c0014e80:	68 b3 a9 02 c0       	push   0xc002a9b3
c0014e85:	e8 85 dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014e8a:	58                   	pop    eax
c0014e8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e8f:	e8 f2 fa ff ff       	call   c0014986 <displayDebugInfo(regs*)>

c0014e94 <otherISRHandler(regs*, void*)>:
c0014e94:	53                   	push   ebx
c0014e95:	83 ec 0c             	sub    esp,0xc
c0014e98:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e9c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e9f:	50                   	push   eax
c0014ea0:	50                   	push   eax
c0014ea1:	68 c0 a9 02 c0       	push   0xc002a9c0
c0014ea6:	e8 64 dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014eab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eae:	e8 d3 fa ff ff       	call   c0014986 <displayDebugInfo(regs*)>

c0014eb3 <opcodeFault(regs*, void*)>:
c0014eb3:	55                   	push   ebp
c0014eb4:	89 e5                	mov    ebp,esp
c0014eb6:	56                   	push   esi
c0014eb7:	53                   	push   ebx
c0014eb8:	83 ec 40             	sub    esp,0x40
c0014ebb:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0014ec0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ec6:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014ecc:	84 c0                	test   al,al
c0014ece:	74 24                	je     c0014ef4 <opcodeFault(regs*, void*)+0x41>
c0014ed0:	83 ec 0c             	sub    esp,0xc
c0014ed3:	68 e0 a9 02 c0       	push   0xc002a9e0
c0014ed8:	e8 32 dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014edd:	83 c4 10             	add    esp,0x10
c0014ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ee6:	8d 50 19             	lea    edx,[eax+0x19]
c0014ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eef:	e9 be 05 00 00       	jmp    c00154b2 <opcodeFault(regs*, void*)+0x5ff>
c0014ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014efa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014efd:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014f01:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f0b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014f0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f11:	8a 00                	mov    al,BYTE PTR [eax]
c0014f13:	3c f0                	cmp    al,0xf0
c0014f15:	75 17                	jne    c0014f2e <opcodeFault(regs*, void*)+0x7b>
c0014f17:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f20:	8d 50 01             	lea    edx,[eax+0x1]
c0014f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f26:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f29:	e9 da 00 00 00       	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014f2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f31:	8a 00                	mov    al,BYTE PTR [eax]
c0014f33:	3c f2                	cmp    al,0xf2
c0014f35:	74 09                	je     c0014f40 <opcodeFault(regs*, void*)+0x8d>
c0014f37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f3c:	3c f3                	cmp    al,0xf3
c0014f3e:	75 1b                	jne    c0014f5b <opcodeFault(regs*, void*)+0xa8>
c0014f40:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f44:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f4d:	8d 50 01             	lea    edx,[eax+0x1]
c0014f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f53:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f56:	e9 ad 00 00 00       	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014f5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f5e:	8a 00                	mov    al,BYTE PTR [eax]
c0014f60:	3c 66                	cmp    al,0x66
c0014f62:	75 1f                	jne    c0014f83 <opcodeFault(regs*, void*)+0xd0>
c0014f64:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f68:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014f6c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f75:	8d 50 01             	lea    edx,[eax+0x1]
c0014f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f7e:	e9 85 00 00 00       	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014f83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f86:	8a 00                	mov    al,BYTE PTR [eax]
c0014f88:	3c 67                	cmp    al,0x67
c0014f8a:	75 18                	jne    c0014fa4 <opcodeFault(regs*, void*)+0xf1>
c0014f8c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f90:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f96:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f99:	8d 50 01             	lea    edx,[eax+0x1]
c0014f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa2:	eb 64                	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014fa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa9:	3c 2e                	cmp    al,0x2e
c0014fab:	74 09                	je     c0014fb6 <opcodeFault(regs*, void*)+0x103>
c0014fad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb0:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb2:	3c 3e                	cmp    al,0x3e
c0014fb4:	75 18                	jne    c0014fce <opcodeFault(regs*, void*)+0x11b>
c0014fb6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fc3:	8d 50 01             	lea    edx,[eax+0x1]
c0014fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fcc:	eb 3a                	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014fce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd3:	3c 36                	cmp    al,0x36
c0014fd5:	74 1b                	je     c0014ff2 <opcodeFault(regs*, void*)+0x13f>
c0014fd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fda:	8a 00                	mov    al,BYTE PTR [eax]
c0014fdc:	3c 26                	cmp    al,0x26
c0014fde:	74 12                	je     c0014ff2 <opcodeFault(regs*, void*)+0x13f>
c0014fe0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe3:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe5:	3c 64                	cmp    al,0x64
c0014fe7:	74 09                	je     c0014ff2 <opcodeFault(regs*, void*)+0x13f>
c0014fe9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fec:	8a 00                	mov    al,BYTE PTR [eax]
c0014fee:	3c 65                	cmp    al,0x65
c0014ff0:	75 16                	jne    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014ff2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ff6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fff:	8d 50 01             	lea    edx,[eax+0x1]
c0015002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015005:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015008:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001500b:	8a 00                	mov    al,BYTE PTR [eax]
c001500d:	3c 0f                	cmp    al,0xf
c001500f:	0f 85 ad 00 00 00    	jne    c00150c2 <opcodeFault(regs*, void*)+0x20f>
c0015015:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015018:	40                   	inc    eax
c0015019:	8a 00                	mov    al,BYTE PTR [eax]
c001501b:	3c c2                	cmp    al,0xc2
c001501d:	74 0e                	je     c001502d <opcodeFault(regs*, void*)+0x17a>
c001501f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015022:	40                   	inc    eax
c0015023:	8a 00                	mov    al,BYTE PTR [eax]
c0015025:	3c c3                	cmp    al,0xc3
c0015027:	0f 85 95 00 00 00    	jne    c00150c2 <opcodeFault(regs*, void*)+0x20f>
c001502d:	83 ec 0c             	sub    esp,0xc
c0015030:	68 03 aa 02 c0       	push   0xc002aa03
c0015035:	e8 d5 da ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001503a:	83 c4 10             	add    esp,0x10
c001503d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015040:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015043:	8d 50 01             	lea    edx,[eax+0x1]
c0015046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015049:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001504c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001504f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015052:	8a 00                	mov    al,BYTE PTR [eax]
c0015054:	8d 50 fe             	lea    edx,[eax-0x2]
c0015057:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001505a:	88 10                	mov    BYTE PTR [eax],dl
c001505c:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001505f:	50                   	push   eax
c0015060:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015063:	50                   	push   eax
c0015064:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015067:	50                   	push   eax
c0015068:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001506b:	e8 b4 47 00 00       	call   c0019824 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015070:	83 c4 10             	add    esp,0x10
c0015073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015076:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015079:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001507c:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001507f:	01 d0                	add    eax,edx
c0015081:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015087:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001508a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001508d:	48                   	dec    eax
c001508e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015094:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015097:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001509a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509d:	83 ec 04             	sub    esp,0x4
c00150a0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00150a3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150a6:	50                   	push   eax
c00150a7:	e8 08 b1 fe ff       	call   c00001b4 <voodooXADD>
c00150ac:	83 c4 10             	add    esp,0x10
c00150af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00150b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00150b5:	01 c2                	add    edx,eax
c00150b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150bd:	e9 f0 03 00 00       	jmp    c00154b2 <opcodeFault(regs*, void*)+0x5ff>
c00150c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c5:	8a 00                	mov    al,BYTE PTR [eax]
c00150c7:	3c 0f                	cmp    al,0xf
c00150c9:	0f 85 8b 01 00 00    	jne    c001525a <opcodeFault(regs*, void*)+0x3a7>
c00150cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d2:	40                   	inc    eax
c00150d3:	8a 00                	mov    al,BYTE PTR [eax]
c00150d5:	3c c7                	cmp    al,0xc7
c00150d7:	0f 86 7d 01 00 00    	jbe    c001525a <opcodeFault(regs*, void*)+0x3a7>
c00150dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e0:	40                   	inc    eax
c00150e1:	8a 00                	mov    al,BYTE PTR [eax]
c00150e3:	3c cf                	cmp    al,0xcf
c00150e5:	0f 87 6f 01 00 00    	ja     c001525a <opcodeFault(regs*, void*)+0x3a7>
c00150eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ee:	40                   	inc    eax
c00150ef:	8a 00                	mov    al,BYTE PTR [eax]
c00150f1:	83 c0 38             	add    eax,0x38
c00150f4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00150f7:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00150fb:	75 0b                	jne    c0015108 <opcodeFault(regs*, void*)+0x255>
c00150fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015100:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015103:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015106:	eb 75                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c0015108:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001510c:	75 0b                	jne    c0015119 <opcodeFault(regs*, void*)+0x266>
c001510e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015111:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015114:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015117:	eb 64                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c0015119:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001511d:	75 0b                	jne    c001512a <opcodeFault(regs*, void*)+0x277>
c001511f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015122:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015125:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015128:	eb 53                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001512a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001512e:	75 0b                	jne    c001513b <opcodeFault(regs*, void*)+0x288>
c0015130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015133:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015136:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015139:	eb 42                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001513b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001513f:	75 0b                	jne    c001514c <opcodeFault(regs*, void*)+0x299>
c0015141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015144:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015147:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001514a:	eb 31                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001514c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015150:	75 0b                	jne    c001515d <opcodeFault(regs*, void*)+0x2aa>
c0015152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015155:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015158:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001515b:	eb 20                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001515d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015161:	75 0b                	jne    c001516e <opcodeFault(regs*, void*)+0x2bb>
c0015163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015166:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015169:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001516c:	eb 0f                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001516e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015172:	75 09                	jne    c001517d <opcodeFault(regs*, void*)+0x2ca>
c0015174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015177:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001517a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001517d:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015181:	74 10                	je     c0015193 <opcodeFault(regs*, void*)+0x2e0>
c0015183:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001518a:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015191:	eb 2d                	jmp    c00151c0 <opcodeFault(regs*, void*)+0x30d>
c0015193:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015196:	c1 e0 18             	shl    eax,0x18
c0015199:	89 c2                	mov    edx,eax
c001519b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001519e:	c1 e0 08             	shl    eax,0x8
c00151a1:	25 00 00 ff 00       	and    eax,0xff0000
c00151a6:	09 c2                	or     edx,eax
c00151a8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151ab:	c1 e8 08             	shr    eax,0x8
c00151ae:	25 00 ff 00 00       	and    eax,0xff00
c00151b3:	09 c2                	or     edx,eax
c00151b5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151b8:	c1 e8 18             	shr    eax,0x18
c00151bb:	09 d0                	or     eax,edx
c00151bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151c0:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00151c4:	75 0b                	jne    c00151d1 <opcodeFault(regs*, void*)+0x31e>
c00151c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151cc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151cf:	eb 75                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c00151d1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151d5:	75 0b                	jne    c00151e2 <opcodeFault(regs*, void*)+0x32f>
c00151d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151dd:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00151e0:	eb 64                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c00151e2:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151e6:	75 0b                	jne    c00151f3 <opcodeFault(regs*, void*)+0x340>
c00151e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151ee:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151f1:	eb 53                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c00151f3:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151f7:	75 0b                	jne    c0015204 <opcodeFault(regs*, void*)+0x351>
c00151f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151ff:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015202:	eb 42                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c0015204:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015208:	75 0b                	jne    c0015215 <opcodeFault(regs*, void*)+0x362>
c001520a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015210:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015213:	eb 31                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c0015215:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015219:	75 0b                	jne    c0015226 <opcodeFault(regs*, void*)+0x373>
c001521b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015221:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015224:	eb 20                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c0015226:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001522a:	75 0b                	jne    c0015237 <opcodeFault(regs*, void*)+0x384>
c001522c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015232:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015235:	eb 0f                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c0015237:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001523b:	75 09                	jne    c0015246 <opcodeFault(regs*, void*)+0x393>
c001523d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015240:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015243:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015249:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001524c:	8d 50 02             	lea    edx,[eax+0x2]
c001524f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015252:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015255:	e9 58 02 00 00       	jmp    c00154b2 <opcodeFault(regs*, void*)+0x5ff>
c001525a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525d:	8a 00                	mov    al,BYTE PTR [eax]
c001525f:	3c 0f                	cmp    al,0xf
c0015261:	0f 85 76 01 00 00    	jne    c00153dd <opcodeFault(regs*, void*)+0x52a>
c0015267:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526a:	40                   	inc    eax
c001526b:	8a 00                	mov    al,BYTE PTR [eax]
c001526d:	3c c7                	cmp    al,0xc7
c001526f:	0f 85 68 01 00 00    	jne    c00153dd <opcodeFault(regs*, void*)+0x52a>
c0015275:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001527e:	8d 50 01             	lea    edx,[eax+0x1]
c0015281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015284:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015287:	8d 45 ba             	lea    eax,[ebp-0x46]
c001528a:	50                   	push   eax
c001528b:	8d 45 bb             	lea    eax,[ebp-0x45]
c001528e:	50                   	push   eax
c001528f:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015292:	50                   	push   eax
c0015293:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015296:	e8 89 45 00 00       	call   c0019824 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00152a1:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00152a4:	83 f0 01             	xor    eax,0x1
c00152a7:	84 c0                	test   al,al
c00152a9:	0f 84 2e 01 00 00    	je     c00153dd <opcodeFault(regs*, void*)+0x52a>
c00152af:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00152b2:	3c 01                	cmp    al,0x1
c00152b4:	0f 85 23 01 00 00    	jne    c00153dd <opcodeFault(regs*, void*)+0x52a>
c00152ba:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00152bd:	83 f0 01             	xor    eax,0x1
c00152c0:	84 c0                	test   al,al
c00152c2:	0f 84 15 01 00 00    	je     c00153dd <opcodeFault(regs*, void*)+0x52a>
c00152c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00152ce:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152d1:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00152d8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152db:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152de:	89 c2                	mov    edx,eax
c00152e0:	b8 00 00 00 00       	mov    eax,0x0
c00152e5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152e8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ee:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00152f1:	ba 00 00 00 00       	mov    edx,0x0
c00152f6:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00152f9:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00152fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ff:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015302:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015305:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001530c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001530f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015312:	89 c2                	mov    edx,eax
c0015314:	b8 00 00 00 00       	mov    eax,0x0
c0015319:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001531c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001531f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015322:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015325:	ba 00 00 00 00       	mov    edx,0x0
c001532a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001532d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015330:	e8 f9 84 00 00       	call   c001d82e <lockScheduler()>
c0015335:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015338:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001533b:	8b 00                	mov    eax,DWORD PTR [eax]
c001533d:	89 c1                	mov    ecx,eax
c001533f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015342:	89 cb                	mov    ebx,ecx
c0015344:	89 d0                	mov    eax,edx
c0015346:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015349:	89 c6                	mov    esi,eax
c001534b:	89 f0                	mov    eax,esi
c001534d:	09 d8                	or     eax,ebx
c001534f:	85 c0                	test   eax,eax
c0015351:	75 21                	jne    c0015374 <opcodeFault(regs*, void*)+0x4c1>
c0015353:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015356:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015359:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001535c:	89 01                	mov    DWORD PTR [ecx],eax
c001535e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015364:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015367:	83 c8 40             	or     eax,0x40
c001536a:	89 c2                	mov    edx,eax
c001536c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015372:	eb 3e                	jmp    c00153b2 <opcodeFault(regs*, void*)+0x4ff>
c0015374:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015377:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001537a:	8b 00                	mov    eax,DWORD PTR [eax]
c001537c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001537f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015382:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015388:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001538b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001538e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015391:	89 d0                	mov    eax,edx
c0015393:	31 d2                	xor    edx,edx
c0015395:	89 c3                	mov    ebx,eax
c0015397:	89 d6                	mov    esi,edx
c0015399:	89 da                	mov    edx,ebx
c001539b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00153a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153a7:	83 e0 bf             	and    eax,0xffffffbf
c00153aa:	89 c2                	mov    edx,eax
c00153ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153af:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00153b2:	e8 79 84 00 00       	call   c001d830 <unlockScheduler()>
c00153b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153bd:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00153c0:	01 c2                	add    edx,eax
c00153c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c8:	83 ec 0c             	sub    esp,0xc
c00153cb:	68 12 aa 02 c0       	push   0xc002aa12
c00153d0:	e8 3a d7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	e9 d5 00 00 00       	jmp    c00154b2 <opcodeFault(regs*, void*)+0x5ff>
c00153dd:	83 ec 0c             	sub    esp,0xc
c00153e0:	68 25 aa 02 c0       	push   0xc002aa25
c00153e5:	e8 25 d7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00153ea:	83 c4 10             	add    esp,0x10
c00153ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153f9:	c1 e0 04             	shl    eax,0x4
c00153fc:	01 d0                	add    eax,edx
c00153fe:	83 c0 03             	add    eax,0x3
c0015401:	8a 00                	mov    al,BYTE PTR [eax]
c0015403:	0f b6 d8             	movzx  ebx,al
c0015406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015409:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001540c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015412:	c1 e0 04             	shl    eax,0x4
c0015415:	01 d0                	add    eax,edx
c0015417:	83 c0 02             	add    eax,0x2
c001541a:	8a 00                	mov    al,BYTE PTR [eax]
c001541c:	0f b6 c8             	movzx  ecx,al
c001541f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015422:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015428:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001542b:	c1 e0 04             	shl    eax,0x4
c001542e:	01 d0                	add    eax,edx
c0015430:	40                   	inc    eax
c0015431:	8a 00                	mov    al,BYTE PTR [eax]
c0015433:	0f b6 d0             	movzx  edx,al
c0015436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015439:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001543c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015442:	c1 e0 04             	shl    eax,0x4
c0015445:	01 f0                	add    eax,esi
c0015447:	8a 00                	mov    al,BYTE PTR [eax]
c0015449:	0f b6 c0             	movzx  eax,al
c001544c:	83 ec 0c             	sub    esp,0xc
c001544f:	53                   	push   ebx
c0015450:	51                   	push   ecx
c0015451:	52                   	push   edx
c0015452:	50                   	push   eax
c0015453:	68 38 aa 02 c0       	push   0xc002aa38
c0015458:	e8 b2 d6 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001545d:	83 c4 20             	add    esp,0x20
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015466:	83 c0 03             	add    eax,0x3
c0015469:	8a 00                	mov    al,BYTE PTR [eax]
c001546b:	0f b6 d8             	movzx  ebx,al
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015474:	83 c0 02             	add    eax,0x2
c0015477:	8a 00                	mov    al,BYTE PTR [eax]
c0015479:	0f b6 c8             	movzx  ecx,al
c001547c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015482:	40                   	inc    eax
c0015483:	8a 00                	mov    al,BYTE PTR [eax]
c0015485:	0f b6 d0             	movzx  edx,al
c0015488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001548e:	8a 00                	mov    al,BYTE PTR [eax]
c0015490:	0f b6 c0             	movzx  eax,al
c0015493:	83 ec 0c             	sub    esp,0xc
c0015496:	53                   	push   ebx
c0015497:	51                   	push   ecx
c0015498:	52                   	push   edx
c0015499:	50                   	push   eax
c001549a:	68 60 aa 02 c0       	push   0xc002aa60
c001549f:	e8 6b d6 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00154a4:	83 c4 20             	add    esp,0x20
c00154a7:	83 ec 0c             	sub    esp,0xc
c00154aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154ad:	e8 d4 f4 ff ff       	call   c0014986 <displayDebugInfo(regs*)>
c00154b2:	8d 65 f8             	lea    esp,[ebp-0x8]
c00154b5:	5b                   	pop    ebx
c00154b6:	5e                   	pop    esi
c00154b7:	5d                   	pop    ebp
c00154b8:	c3                   	ret    

c00154b9 <displayProgramFault(char const*)>:
c00154b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154c1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154c7:	85 c0                	test   eax,eax
c00154c9:	74 15                	je     c00154e0 <displayProgramFault(char const*)+0x27>
c00154cb:	83 ec 0c             	sub    esp,0xc
c00154ce:	6a 04                	push   0x4
c00154d0:	6a 0f                	push   0xf
c00154d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154d6:	50                   	push   eax
c00154d7:	e8 d6 b8 ff ff       	call   c0010db2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154dc:	83 c4 1c             	add    esp,0x1c
c00154df:	c3                   	ret    
c00154e0:	c3                   	ret    

c00154e1 <setupInterruptController()>:
c00154e1:	55                   	push   ebp
c00154e2:	89 e5                	mov    ebp,esp
c00154e4:	53                   	push   ebx
c00154e5:	83 ec 24             	sub    esp,0x24
c00154e8:	b8 00 00 00 00       	mov    eax,0x0
c00154ed:	85 c0                	test   eax,eax
c00154ef:	0f 95 c0             	setne  al
c00154f2:	84 c0                	test   al,al
c00154f4:	74 5b                	je     c0015551 <setupInterruptController()+0x70>
c00154f6:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00154fd:	83 ec 0c             	sub    esp,0xc
c0015500:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015503:	e8 38 a3 ff ff       	call   c000f840 <malloc>
c0015508:	83 c4 10             	add    esp,0x10
c001550b:	89 c3                	mov    ebx,eax
c001550d:	83 ec 0c             	sub    esp,0xc
c0015510:	53                   	push   ebx
c0015511:	e8 70 fe 00 00       	call   c0025386 <APIC::APIC()>
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001551c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001551f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	83 c0 08             	add    eax,0x8
c0015527:	8b 00                	mov    eax,DWORD PTR [eax]
c0015529:	6a 00                	push   0x0
c001552b:	6a 00                	push   0x0
c001552d:	6a 00                	push   0x0
c001552f:	52                   	push   edx
c0015530:	ff d0                	call   eax
c0015532:	83 c4 10             	add    esp,0x10
c0015535:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001553a:	83 ec 08             	sub    esp,0x8
c001553d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015540:	50                   	push   eax
c0015541:	e8 f0 e9 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0015546:	83 c4 10             	add    esp,0x10
c0015549:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001554c:	e9 52 03 00 00       	jmp    c00158a3 <setupInterruptController()+0x3c2>
c0015551:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0015556:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001555c:	83 e0 01             	and    eax,0x1
c001555f:	84 c0                	test   al,al
c0015561:	0f 95 c0             	setne  al
c0015564:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015567:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015574:	e8 c7 a2 ff ff       	call   c000f840 <malloc>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	89 c3                	mov    ebx,eax
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	53                   	push   ebx
c0015582:	e8 57 03 01 00       	call   c00258de <PIC::PIC()>
c0015587:	83 c4 10             	add    esp,0x10
c001558a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001558d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015590:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015593:	8b 00                	mov    eax,DWORD PTR [eax]
c0015595:	83 c0 08             	add    eax,0x8
c0015598:	8b 00                	mov    eax,DWORD PTR [eax]
c001559a:	6a 00                	push   0x0
c001559c:	6a 00                	push   0x0
c001559e:	6a 00                	push   0x0
c00155a0:	52                   	push   edx
c00155a1:	ff d0                	call   eax
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00155aa:	74 73                	je     c001561f <setupInterruptController()+0x13e>
c00155ac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b4:	83 c0 0c             	add    eax,0xc
c00155b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b9:	6a 00                	push   0x0
c00155bb:	6a 00                	push   0x0
c00155bd:	6a 00                	push   0x0
c00155bf:	52                   	push   edx
c00155c0:	ff d0                	call   eax
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155c9:	74 15                	je     c00155e0 <setupInterruptController()+0xff>
c00155cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d0:	83 c0 04             	add    eax,0x4
c00155d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d5:	83 ec 0c             	sub    esp,0xc
c00155d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155db:	ff d0                	call   eax
c00155dd:	83 c4 10             	add    esp,0x10
c00155e0:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00155e7:	83 ec 0c             	sub    esp,0xc
c00155ea:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155ed:	e8 4e a2 ff ff       	call   c000f840 <malloc>
c00155f2:	83 c4 10             	add    esp,0x10
c00155f5:	89 c3                	mov    ebx,eax
c00155f7:	83 ec 0c             	sub    esp,0xc
c00155fa:	53                   	push   ebx
c00155fb:	e8 86 fd 00 00       	call   c0025386 <APIC::APIC()>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015606:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015609:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560c:	8b 00                	mov    eax,DWORD PTR [eax]
c001560e:	83 c0 08             	add    eax,0x8
c0015611:	8b 00                	mov    eax,DWORD PTR [eax]
c0015613:	6a 00                	push   0x0
c0015615:	6a 00                	push   0x0
c0015617:	6a 00                	push   0x0
c0015619:	52                   	push   edx
c001561a:	ff d0                	call   eax
c001561c:	83 c4 10             	add    esp,0x10
c001561f:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0015624:	83 ec 08             	sub    esp,0x8
c0015627:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562a:	50                   	push   eax
c001562b:	e8 06 e9 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015636:	8b 00                	mov    eax,DWORD PTR [eax]
c0015638:	83 c0 24             	add    eax,0x24
c001563b:	8b 00                	mov    eax,DWORD PTR [eax]
c001563d:	6a 00                	push   0x0
c001563f:	68 94 4e 01 c0       	push   0xc0014e94
c0015644:	6a 00                	push   0x0
c0015646:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015649:	ff d0                	call   eax
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015651:	8b 00                	mov    eax,DWORD PTR [eax]
c0015653:	83 c0 24             	add    eax,0x24
c0015656:	8b 00                	mov    eax,DWORD PTR [eax]
c0015658:	6a 00                	push   0x0
c001565a:	68 94 4e 01 c0       	push   0xc0014e94
c001565f:	6a 01                	push   0x1
c0015661:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015664:	ff d0                	call   eax
c0015666:	83 c4 10             	add    esp,0x10
c0015669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566c:	8b 00                	mov    eax,DWORD PTR [eax]
c001566e:	83 c0 24             	add    eax,0x24
c0015671:	8b 00                	mov    eax,DWORD PTR [eax]
c0015673:	6a 00                	push   0x0
c0015675:	68 e3 47 01 c0       	push   0xc00147e3
c001567a:	6a 02                	push   0x2
c001567c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001567f:	ff d0                	call   eax
c0015681:	83 c4 10             	add    esp,0x10
c0015684:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015687:	8b 00                	mov    eax,DWORD PTR [eax]
c0015689:	83 c0 24             	add    eax,0x24
c001568c:	8b 00                	mov    eax,DWORD PTR [eax]
c001568e:	6a 00                	push   0x0
c0015690:	68 94 4e 01 c0       	push   0xc0014e94
c0015695:	6a 03                	push   0x3
c0015697:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001569a:	ff d0                	call   eax
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a4:	83 c0 24             	add    eax,0x24
c00156a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a9:	6a 00                	push   0x0
c00156ab:	68 94 4e 01 c0       	push   0xc0014e94
c00156b0:	6a 04                	push   0x4
c00156b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b5:	ff d0                	call   eax
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156bf:	83 c0 24             	add    eax,0x24
c00156c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c4:	6a 00                	push   0x0
c00156c6:	68 94 4e 01 c0       	push   0xc0014e94
c00156cb:	6a 05                	push   0x5
c00156cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d0:	ff d0                	call   eax
c00156d2:	83 c4 10             	add    esp,0x10
c00156d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156da:	83 c0 24             	add    eax,0x24
c00156dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156df:	6a 00                	push   0x0
c00156e1:	68 b3 4e 01 c0       	push   0xc0014eb3
c00156e6:	6a 06                	push   0x6
c00156e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156eb:	ff d0                	call   eax
c00156ed:	83 c4 10             	add    esp,0x10
c00156f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f5:	83 c0 24             	add    eax,0x24
c00156f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fa:	6a 00                	push   0x0
c00156fc:	68 15 4e 01 c0       	push   0xc0014e15
c0015701:	6a 07                	push   0x7
c0015703:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015706:	ff d0                	call   eax
c0015708:	83 c4 10             	add    esp,0x10
c001570b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001570e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015710:	83 c0 24             	add    eax,0x24
c0015713:	8b 00                	mov    eax,DWORD PTR [eax]
c0015715:	6a 00                	push   0x0
c0015717:	68 fe 45 01 c0       	push   0xc00145fe
c001571c:	6a 08                	push   0x8
c001571e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015721:	ff d0                	call   eax
c0015723:	83 c4 10             	add    esp,0x10
c0015726:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015729:	8b 00                	mov    eax,DWORD PTR [eax]
c001572b:	83 c0 24             	add    eax,0x24
c001572e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015730:	6a 00                	push   0x0
c0015732:	68 94 4e 01 c0       	push   0xc0014e94
c0015737:	6a 09                	push   0x9
c0015739:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001573c:	ff d0                	call   eax
c001573e:	83 c4 10             	add    esp,0x10
c0015741:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015744:	8b 00                	mov    eax,DWORD PTR [eax]
c0015746:	83 c0 24             	add    eax,0x24
c0015749:	8b 00                	mov    eax,DWORD PTR [eax]
c001574b:	6a 00                	push   0x0
c001574d:	68 94 4e 01 c0       	push   0xc0014e94
c0015752:	6a 0a                	push   0xa
c0015754:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015757:	ff d0                	call   eax
c0015759:	83 c4 10             	add    esp,0x10
c001575c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001575f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015761:	83 c0 24             	add    eax,0x24
c0015764:	8b 00                	mov    eax,DWORD PTR [eax]
c0015766:	6a 00                	push   0x0
c0015768:	68 94 4e 01 c0       	push   0xc0014e94
c001576d:	6a 0b                	push   0xb
c001576f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015772:	ff d0                	call   eax
c0015774:	83 c4 10             	add    esp,0x10
c0015777:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001577a:	8b 00                	mov    eax,DWORD PTR [eax]
c001577c:	83 c0 24             	add    eax,0x24
c001577f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015781:	6a 00                	push   0x0
c0015783:	68 94 4e 01 c0       	push   0xc0014e94
c0015788:	6a 0c                	push   0xc
c001578a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001578d:	ff d0                	call   eax
c001578f:	83 c4 10             	add    esp,0x10
c0015792:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015795:	8b 00                	mov    eax,DWORD PTR [eax]
c0015797:	83 c0 24             	add    eax,0x24
c001579a:	8b 00                	mov    eax,DWORD PTR [eax]
c001579c:	6a 00                	push   0x0
c001579e:	68 44 4e 01 c0       	push   0xc0014e44
c00157a3:	6a 0d                	push   0xd
c00157a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157a8:	ff d0                	call   eax
c00157aa:	83 c4 10             	add    esp,0x10
c00157ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b2:	83 c0 24             	add    eax,0x24
c00157b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b7:	6a 00                	push   0x0
c00157b9:	68 7d 4e 01 c0       	push   0xc0014e7d
c00157be:	6a 0e                	push   0xe
c00157c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157c3:	ff d0                	call   eax
c00157c5:	83 c4 10             	add    esp,0x10
c00157c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157cd:	83 c0 24             	add    eax,0x24
c00157d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d2:	6a 00                	push   0x0
c00157d4:	68 94 4e 01 c0       	push   0xc0014e94
c00157d9:	6a 0f                	push   0xf
c00157db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157de:	ff d0                	call   eax
c00157e0:	83 c4 10             	add    esp,0x10
c00157e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e8:	83 c0 24             	add    eax,0x24
c00157eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ed:	6a 00                	push   0x0
c00157ef:	68 94 4e 01 c0       	push   0xc0014e94
c00157f4:	6a 10                	push   0x10
c00157f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157f9:	ff d0                	call   eax
c00157fb:	83 c4 10             	add    esp,0x10
c00157fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015801:	8b 00                	mov    eax,DWORD PTR [eax]
c0015803:	83 c0 24             	add    eax,0x24
c0015806:	8b 00                	mov    eax,DWORD PTR [eax]
c0015808:	6a 00                	push   0x0
c001580a:	68 94 4e 01 c0       	push   0xc0014e94
c001580f:	6a 11                	push   0x11
c0015811:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015814:	ff d0                	call   eax
c0015816:	83 c4 10             	add    esp,0x10
c0015819:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001581c:	8b 00                	mov    eax,DWORD PTR [eax]
c001581e:	83 c0 24             	add    eax,0x24
c0015821:	8b 00                	mov    eax,DWORD PTR [eax]
c0015823:	6a 00                	push   0x0
c0015825:	68 94 4e 01 c0       	push   0xc0014e94
c001582a:	6a 12                	push   0x12
c001582c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001582f:	ff d0                	call   eax
c0015831:	83 c4 10             	add    esp,0x10
c0015834:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015837:	8b 00                	mov    eax,DWORD PTR [eax]
c0015839:	83 c0 24             	add    eax,0x24
c001583c:	8b 00                	mov    eax,DWORD PTR [eax]
c001583e:	6a 00                	push   0x0
c0015840:	68 94 4e 01 c0       	push   0xc0014e94
c0015845:	6a 13                	push   0x13
c0015847:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001584a:	ff d0                	call   eax
c001584c:	83 c4 10             	add    esp,0x10
c001584f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015852:	8b 00                	mov    eax,DWORD PTR [eax]
c0015854:	83 c0 24             	add    eax,0x24
c0015857:	8b 00                	mov    eax,DWORD PTR [eax]
c0015859:	6a 00                	push   0x0
c001585b:	68 94 4e 01 c0       	push   0xc0014e94
c0015860:	6a 14                	push   0x14
c0015862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015865:	ff d0                	call   eax
c0015867:	83 c4 10             	add    esp,0x10
c001586a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001586d:	8b 00                	mov    eax,DWORD PTR [eax]
c001586f:	83 c0 24             	add    eax,0x24
c0015872:	8b 00                	mov    eax,DWORD PTR [eax]
c0015874:	6a 00                	push   0x0
c0015876:	68 94 4e 01 c0       	push   0xc0014e94
c001587b:	6a 1e                	push   0x1e
c001587d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015880:	ff d0                	call   eax
c0015882:	83 c4 10             	add    esp,0x10
c0015885:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015888:	8b 00                	mov    eax,DWORD PTR [eax]
c001588a:	83 c0 24             	add    eax,0x24
c001588d:	8b 00                	mov    eax,DWORD PTR [eax]
c001588f:	6a 00                	push   0x0
c0015891:	68 f3 c1 01 c0       	push   0xc001c1f3
c0015896:	6a 60                	push   0x60
c0015898:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001589b:	ff d0                	call   eax
c001589d:	83 c4 10             	add    esp,0x10
c00158a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158a6:	c9                   	leave  
c00158a7:	c3                   	ret    

c00158a8 <InterruptController::convertLegacyIRQNumber(int)>:
c00158a8:	55                   	push   ebp
c00158a9:	89 e5                	mov    ebp,esp
c00158ab:	83 ec 08             	sub    esp,0x8
c00158ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b1:	83 ec 0c             	sub    esp,0xc
c00158b4:	50                   	push   eax
c00158b5:	e8 68 e9 ff ff       	call   c0014222 <Device::getName()>
c00158ba:	83 c4 10             	add    esp,0x10
c00158bd:	8a 00                	mov    al,BYTE PTR [eax]
c00158bf:	3c 41                	cmp    al,0x41
c00158c1:	0f 94 c0             	sete   al
c00158c4:	84 c0                	test   al,al
c00158c6:	74 28                	je     c00158f0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158c8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00158cc:	7f 12                	jg     c00158e0 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00158ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158d1:	05 60 cf 02 c0       	add    eax,0xc002cf60
c00158d6:	8a 00                	mov    al,BYTE PTR [eax]
c00158d8:	0f b6 c0             	movzx  eax,al
c00158db:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00158de:	eb 10                	jmp    c00158f0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158e0:	83 ec 0c             	sub    esp,0xc
c00158e3:	68 80 a7 02 c0       	push   0xc002a780
c00158e8:	e8 b2 48 00 00       	call   c001a19f <Krnl::panic(char const*)>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158f3:	c9                   	leave  
c00158f4:	c3                   	ret    
c00158f5:	90                   	nop

c00158f6 <startGUI(void*)>:
c00158f6:	55                   	push   ebp
c00158f7:	89 e5                	mov    ebp,esp
c00158f9:	53                   	push   ebx
c00158fa:	83 ec 04             	sub    esp,0x4
c00158fd:	e8 2e 7f 00 00       	call   c001d830 <unlockScheduler()>
c0015902:	8b 1d 08 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd08
c0015908:	83 ec 08             	sub    esp,0x8
c001590b:	6a 01                	push   0x1
c001590d:	68 d0 aa 02 c0       	push   0xc002aad0
c0015912:	e8 70 78 00 00       	call   c001d187 <Thr::loadDLL(char const*, bool)>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	83 ec 08             	sub    esp,0x8
c001591d:	53                   	push   ebx
c001591e:	50                   	push   eax
c001591f:	e8 97 7a 00 00       	call   c001d3bb <Thr::executeDLL(unsigned long, void*)>
c0015924:	83 c4 10             	add    esp,0x10
c0015927:	8b 1d 08 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd08
c001592d:	83 ec 08             	sub    esp,0x8
c0015930:	6a 01                	push   0x1
c0015932:	68 ea aa 02 c0       	push   0xc002aaea
c0015937:	e8 4b 78 00 00       	call   c001d187 <Thr::loadDLL(char const*, bool)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	83 ec 08             	sub    esp,0x8
c0015942:	53                   	push   ebx
c0015943:	50                   	push   eax
c0015944:	e8 72 7a 00 00       	call   c001d3bb <Thr::executeDLL(unsigned long, void*)>
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	90                   	nop
c001594d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015950:	c9                   	leave  
c0015951:	c3                   	ret    

c0015952 <startGUIVESA(void*)>:
c0015952:	55                   	push   ebp
c0015953:	89 e5                	mov    ebp,esp
c0015955:	53                   	push   ebx
c0015956:	83 ec 04             	sub    esp,0x4
c0015959:	e8 d2 7e 00 00       	call   c001d830 <unlockScheduler()>
c001595e:	8b 1d 08 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd08
c0015964:	83 ec 08             	sub    esp,0x8
c0015967:	6a 01                	push   0x1
c0015969:	68 04 ab 02 c0       	push   0xc002ab04
c001596e:	e8 14 78 00 00       	call   c001d187 <Thr::loadDLL(char const*, bool)>
c0015973:	83 c4 10             	add    esp,0x10
c0015976:	83 ec 08             	sub    esp,0x8
c0015979:	53                   	push   ebx
c001597a:	50                   	push   eax
c001597b:	e8 3b 7a 00 00       	call   c001d3bb <Thr::executeDLL(unsigned long, void*)>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	8b 1d 08 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd08
c0015989:	83 ec 08             	sub    esp,0x8
c001598c:	6a 01                	push   0x1
c001598e:	68 ea aa 02 c0       	push   0xc002aaea
c0015993:	e8 ef 77 00 00       	call   c001d187 <Thr::loadDLL(char const*, bool)>
c0015998:	83 c4 10             	add    esp,0x10
c001599b:	83 ec 08             	sub    esp,0x8
c001599e:	53                   	push   ebx
c001599f:	50                   	push   eax
c00159a0:	e8 16 7a 00 00       	call   c001d3bb <Thr::executeDLL(unsigned long, void*)>
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	90                   	nop
c00159a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159ac:	c9                   	leave  
c00159ad:	c3                   	ret    

c00159ae <sendKeyToTerminal(unsigned char)>:
c00159ae:	55                   	push   ebp
c00159af:	89 e5                	mov    ebp,esp
c00159b1:	83 ec 28             	sub    esp,0x28
c00159b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00159ba:	a1 e4 dd 02 c0       	mov    eax,ds:0xc002dde4
c00159bf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00159c3:	83 ec 08             	sub    esp,0x8
c00159c6:	52                   	push   edx
c00159c7:	50                   	push   eax
c00159c8:	e8 21 b9 ff ff       	call   c00112ee <VgaText::receiveKey(unsigned char)>
c00159cd:	83 c4 10             	add    esp,0x10
c00159d0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00159d4:	75 41                	jne    c0015a17 <sendKeyToTerminal(unsigned char)+0x69>
c00159d6:	e8 7a 7e 00 00       	call   c001d855 <lockStuff()>
c00159db:	a1 c0 de 02 c0       	mov    eax,ds:0xc002dec0
c00159e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159e3:	c7 05 c0 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dec0,0x0
c00159ed:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159f1:	74 1f                	je     c0015a12 <sendKeyToTerminal(unsigned char)+0x64>
c00159f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00159f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159fc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00159ff:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a02:	83 ec 0c             	sub    esp,0xc
c0015a05:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a08:	e8 39 84 00 00       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c0015a0d:	83 c4 10             	add    esp,0x10
c0015a10:	eb db                	jmp    c00159ed <sendKeyToTerminal(unsigned char)+0x3f>
c0015a12:	e8 d8 81 00 00       	call   c001dbef <unlockStuff()>
c0015a17:	90                   	nop
c0015a18:	c9                   	leave  
c0015a19:	c3                   	ret    

c0015a1a <sendKeyboardToken(KeyboardToken)>:
c0015a1a:	55                   	push   ebp
c0015a1b:	89 e5                	mov    ebp,esp
c0015a1d:	83 ec 18             	sub    esp,0x18
c0015a20:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a26:	0f b7 c0             	movzx  eax,ax
c0015a29:	83 f2 01             	xor    edx,0x1
c0015a2c:	88 90 e0 de 02 c0    	mov    BYTE PTR [eax-0x3ffd2120],dl
c0015a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a35:	66 3d 03 02          	cmp    ax,0x203
c0015a39:	75 07                	jne    c0015a42 <sendKeyboardToken(KeyboardToken)+0x28>
c0015a3b:	a0 e0 df 02 c0       	mov    al,ds:0xc002dfe0
c0015a40:	84 c0                	test   al,al
c0015a42:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015a46:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015a49:	a0 e8 e2 02 c0       	mov    al,ds:0xc002e2e8
c0015a4e:	38 c2                	cmp    dl,al
c0015a50:	74 1c                	je     c0015a6e <sendKeyboardToken(KeyboardToken)+0x54>
c0015a52:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015a55:	a2 e8 e2 02 c0       	mov    ds:0xc002e2e8,al
c0015a5a:	a0 e8 e2 02 c0       	mov    al,ds:0xc002e2e8
c0015a5f:	0f b6 c0             	movzx  eax,al
c0015a62:	83 ec 0c             	sub    esp,0xc
c0015a65:	50                   	push   eax
c0015a66:	e8 e3 aa ff ff       	call   c001054e <setTerminalScrollLock(bool)>
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015a71:	84 c0                	test   al,al
c0015a73:	0f 84 ae 00 00 00    	je     c0015b27 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7c:	66 3d 10 03          	cmp    ax,0x310
c0015a80:	75 06                	jne    c0015a88 <sendKeyboardToken(KeyboardToken)+0x6e>
c0015a82:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a8b:	66 3d 11 03          	cmp    ax,0x311
c0015a8f:	75 06                	jne    c0015a97 <sendKeyboardToken(KeyboardToken)+0x7d>
c0015a91:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9a:	66 3d 12 03          	cmp    ax,0x312
c0015a9e:	75 06                	jne    c0015aa6 <sendKeyboardToken(KeyboardToken)+0x8c>
c0015aa0:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa9:	66 3d 13 03          	cmp    ax,0x313
c0015aad:	75 06                	jne    c0015ab5 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015aaf:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab8:	66 3d 14 03          	cmp    ax,0x314
c0015abc:	75 06                	jne    c0015ac4 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015abe:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac7:	66 3d 15 03          	cmp    ax,0x315
c0015acb:	75 06                	jne    c0015ad3 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015acd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad6:	66 3d 16 03          	cmp    ax,0x316
c0015ada:	75 06                	jne    c0015ae2 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015adc:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae5:	66 3d 17 03          	cmp    ax,0x317
c0015ae9:	75 06                	jne    c0015af1 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015aeb:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af4:	66 3d 18 03          	cmp    ax,0x318
c0015af8:	75 06                	jne    c0015b00 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015afa:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b03:	66 3d 19 03          	cmp    ax,0x319
c0015b07:	75 06                	jne    c0015b0f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b09:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b12:	66 3d 1a 03          	cmp    ax,0x31a
c0015b16:	0f 85 c9 00 00 00    	jne    c0015be5 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015b1c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b22:	e9 be 00 00 00       	jmp    c0015be5 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b2a:	66 3d 10 03          	cmp    ax,0x310
c0015b2e:	75 0a                	jne    c0015b3a <sendKeyboardToken(KeyboardToken)+0x120>
c0015b30:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015b36:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3d:	66 3d 11 03          	cmp    ax,0x311
c0015b41:	75 0a                	jne    c0015b4d <sendKeyboardToken(KeyboardToken)+0x133>
c0015b43:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015b49:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b50:	66 3d 12 03          	cmp    ax,0x312
c0015b54:	75 0a                	jne    c0015b60 <sendKeyboardToken(KeyboardToken)+0x146>
c0015b56:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015b5c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b63:	66 3d 13 03          	cmp    ax,0x313
c0015b67:	75 0a                	jne    c0015b73 <sendKeyboardToken(KeyboardToken)+0x159>
c0015b69:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015b6f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b76:	66 3d 14 03          	cmp    ax,0x314
c0015b7a:	75 0a                	jne    c0015b86 <sendKeyboardToken(KeyboardToken)+0x16c>
c0015b7c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015b82:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b89:	66 3d 15 03          	cmp    ax,0x315
c0015b8d:	75 0a                	jne    c0015b99 <sendKeyboardToken(KeyboardToken)+0x17f>
c0015b8f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b95:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9c:	66 3d 16 03          	cmp    ax,0x316
c0015ba0:	75 0a                	jne    c0015bac <sendKeyboardToken(KeyboardToken)+0x192>
c0015ba2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ba8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015baf:	66 3d 17 03          	cmp    ax,0x317
c0015bb3:	75 0a                	jne    c0015bbf <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015bb5:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015bbb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc2:	66 3d 18 03          	cmp    ax,0x318
c0015bc6:	75 0a                	jne    c0015bd2 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015bc8:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015bce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd5:	66 3d 19 03          	cmp    ax,0x319
c0015bd9:	75 0a                	jne    c0015be5 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015bdb:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015be1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be8:	66 3d 00 02          	cmp    ax,0x200
c0015bec:	75 2c                	jne    c0015c1a <sendKeyboardToken(KeyboardToken)+0x200>
c0015bee:	a0 e0 e2 02 c0       	mov    al,ds:0xc002e2e0
c0015bf3:	83 f0 01             	xor    eax,0x1
c0015bf6:	84 c0                	test   al,al
c0015bf8:	74 20                	je     c0015c1a <sendKeyboardToken(KeyboardToken)+0x200>
c0015bfa:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0015bff:	6a 01                	push   0x1
c0015c01:	6a 00                	push   0x0
c0015c03:	68 f6 58 01 c0       	push   0xc00158f6
c0015c08:	50                   	push   eax
c0015c09:	e8 52 7d 00 00       	call   c001d960 <Process::createThread(void (*)(void*), void*, int)>
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	c6 05 e0 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2e0,0x1
c0015c18:	eb 33                	jmp    c0015c4d <sendKeyboardToken(KeyboardToken)+0x233>
c0015c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1d:	66 3d 01 02          	cmp    ax,0x201
c0015c21:	75 2a                	jne    c0015c4d <sendKeyboardToken(KeyboardToken)+0x233>
c0015c23:	a0 e0 e2 02 c0       	mov    al,ds:0xc002e2e0
c0015c28:	83 f0 01             	xor    eax,0x1
c0015c2b:	84 c0                	test   al,al
c0015c2d:	74 1e                	je     c0015c4d <sendKeyboardToken(KeyboardToken)+0x233>
c0015c2f:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0015c34:	6a 01                	push   0x1
c0015c36:	6a 00                	push   0x0
c0015c38:	68 52 59 01 c0       	push   0xc0015952
c0015c3d:	50                   	push   eax
c0015c3e:	e8 1d 7d 00 00       	call   c001d960 <Process::createThread(void (*)(void*), void*, int)>
c0015c43:	83 c4 10             	add    esp,0x10
c0015c46:	c6 05 e0 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2e0,0x1
c0015c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c50:	66 3d 1d 03          	cmp    ax,0x31d
c0015c54:	75 06                	jne    c0015c5c <sendKeyboardToken(KeyboardToken)+0x242>
c0015c56:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015c5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c5f:	66 3d 1c 03          	cmp    ax,0x31c
c0015c63:	75 06                	jne    c0015c6b <sendKeyboardToken(KeyboardToken)+0x251>
c0015c65:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015c6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c6e:	66 3d 1b 03          	cmp    ax,0x31b
c0015c72:	75 06                	jne    c0015c7a <sendKeyboardToken(KeyboardToken)+0x260>
c0015c74:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7d:	66 3d 1e 03          	cmp    ax,0x31e
c0015c81:	75 06                	jne    c0015c89 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015c83:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8c:	66 3d 1f 03          	cmp    ax,0x31f
c0015c90:	75 06                	jne    c0015c98 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015c92:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9b:	66 3d 1a 03          	cmp    ax,0x31a
c0015c9f:	75 06                	jne    c0015ca7 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015ca1:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015ca7:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015cab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cae:	83 f0 01             	xor    eax,0x1
c0015cb1:	84 c0                	test   al,al
c0015cb3:	74 77                	je     c0015d2c <sendKeyboardToken(KeyboardToken)+0x312>
c0015cb5:	a0 e1 df 02 c0       	mov    al,ds:0xc002dfe1
c0015cba:	84 c0                	test   al,al
c0015cbc:	74 41                	je     c0015cff <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015cbe:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015cc2:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015cc6:	74 2b                	je     c0015cf3 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015cc8:	8b 15 e4 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e4
c0015cce:	89 d0                	mov    eax,edx
c0015cd0:	c1 e0 02             	shl    eax,0x2
c0015cd3:	01 d0                	add    eax,edx
c0015cd5:	01 c0                	add    eax,eax
c0015cd7:	a3 e4 e2 02 c0       	mov    ds:0xc002e2e4,eax
c0015cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cdf:	0f b7 c0             	movzx  eax,ax
c0015ce2:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ce5:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c0015cea:	01 d0                	add    eax,edx
c0015cec:	a3 e4 e2 02 c0       	mov    ds:0xc002e2e4,eax
c0015cf1:	eb 6d                	jmp    c0015d60 <sendKeyboardToken(KeyboardToken)+0x346>
c0015cf3:	c7 05 e4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2e4,0x0
c0015cfd:	eb 61                	jmp    c0015d60 <sendKeyboardToken(KeyboardToken)+0x346>
c0015cff:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c0015d04:	85 c0                	test   eax,eax
c0015d06:	74 18                	je     c0015d20 <sendKeyboardToken(KeyboardToken)+0x306>
c0015d08:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c0015d0d:	0f b6 c0             	movzx  eax,al
c0015d10:	83 ec 0c             	sub    esp,0xc
c0015d13:	50                   	push   eax
c0015d14:	e8 95 fc ff ff       	call   c00159ae <sendKeyToTerminal(unsigned char)>
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d20:	c7 05 e4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2e4,0x0
c0015d2a:	eb 34                	jmp    c0015d60 <sendKeyboardToken(KeyboardToken)+0x346>
c0015d2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d2f:	66 3d 01 01          	cmp    ax,0x101
c0015d33:	75 2b                	jne    c0015d60 <sendKeyboardToken(KeyboardToken)+0x346>
c0015d35:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c0015d3a:	85 c0                	test   eax,eax
c0015d3c:	74 18                	je     c0015d56 <sendKeyboardToken(KeyboardToken)+0x33c>
c0015d3e:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c0015d43:	0f b6 c0             	movzx  eax,al
c0015d46:	83 ec 0c             	sub    esp,0xc
c0015d49:	50                   	push   eax
c0015d4a:	e8 5f fc ff ff       	call   c00159ae <sendKeyToTerminal(unsigned char)>
c0015d4f:	83 c4 10             	add    esp,0x10
c0015d52:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d56:	c7 05 e4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2e4,0x0
c0015d60:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d63:	83 f0 01             	xor    eax,0x1
c0015d66:	84 c0                	test   al,al
c0015d68:	74 4c                	je     c0015db6 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d6a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d6d:	83 f0 01             	xor    eax,0x1
c0015d70:	84 c0                	test   al,al
c0015d72:	74 42                	je     c0015db6 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d74:	a0 e0 df 02 c0       	mov    al,ds:0xc002dfe0
c0015d79:	83 f0 01             	xor    eax,0x1
c0015d7c:	84 c0                	test   al,al
c0015d7e:	74 36                	je     c0015db6 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d83:	66 83 f8 1f          	cmp    ax,0x1f
c0015d87:	76 09                	jbe    c0015d92 <sendKeyboardToken(KeyboardToken)+0x378>
c0015d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8c:	66 83 f8 7e          	cmp    ax,0x7e
c0015d90:	76 12                	jbe    c0015da4 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d95:	66 83 f8 0a          	cmp    ax,0xa
c0015d99:	74 09                	je     c0015da4 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d9e:	66 83 f8 08          	cmp    ax,0x8
c0015da2:	75 12                	jne    c0015db6 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da7:	0f b6 c0             	movzx  eax,al
c0015daa:	83 ec 0c             	sub    esp,0xc
c0015dad:	50                   	push   eax
c0015dae:	e8 fb fb ff ff       	call   c00159ae <sendKeyToTerminal(unsigned char)>
c0015db3:	83 c4 10             	add    esp,0x10
c0015db6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015db9:	83 f0 01             	xor    eax,0x1
c0015dbc:	84 c0                	test   al,al
c0015dbe:	74 4f                	je     c0015e0f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dc0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015dc3:	83 f0 01             	xor    eax,0x1
c0015dc6:	84 c0                	test   al,al
c0015dc8:	74 45                	je     c0015e0f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dca:	a0 e0 df 02 c0       	mov    al,ds:0xc002dfe0
c0015dcf:	84 c0                	test   al,al
c0015dd1:	74 3c                	je     c0015e0f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd6:	66 83 f8 3f          	cmp    ax,0x3f
c0015dda:	76 33                	jbe    c0015e0f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ddf:	66 83 f8 7f          	cmp    ax,0x7f
c0015de3:	77 2a                	ja     c0015e0f <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015de5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de8:	88 c2                	mov    dl,al
c0015dea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ded:	66 83 f8 5f          	cmp    ax,0x5f
c0015df1:	76 04                	jbe    c0015df7 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015df3:	b0 20                	mov    al,0x20
c0015df5:	eb 02                	jmp    c0015df9 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015df7:	b0 00                	mov    al,0x0
c0015df9:	29 c2                	sub    edx,eax
c0015dfb:	88 d0                	mov    al,dl
c0015dfd:	83 e8 40             	sub    eax,0x40
c0015e00:	0f b6 c0             	movzx  eax,al
c0015e03:	83 ec 0c             	sub    esp,0xc
c0015e06:	50                   	push   eax
c0015e07:	e8 a2 fb ff ff       	call   c00159ae <sendKeyToTerminal(unsigned char)>
c0015e0c:	83 c4 10             	add    esp,0x10
c0015e0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e12:	66 3d 00 03          	cmp    ax,0x300
c0015e16:	75 0f                	jne    c0015e27 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015e18:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e1b:	83 f0 01             	xor    eax,0x1
c0015e1e:	84 c0                	test   al,al
c0015e20:	74 05                	je     c0015e27 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015e22:	e8 5c af ff ff       	call   c0010d83 <doTerminalCycle()>
c0015e27:	90                   	nop
c0015e28:	c9                   	leave  
c0015e29:	c3                   	ret    

c0015e2a <clearInternalKeybuffer(VgaText*)>:
c0015e2a:	55                   	push   ebp
c0015e2b:	89 e5                	mov    ebp,esp
c0015e2d:	83 ec 08             	sub    esp,0x8
c0015e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e33:	05 34 11 00 00       	add    eax,0x1134
c0015e38:	83 ec 0c             	sub    esp,0xc
c0015e3b:	50                   	push   eax
c0015e3c:	e8 53 a9 fe ff       	call   c0000794 <strlen>
c0015e41:	83 c4 10             	add    esp,0x10
c0015e44:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e47:	81 c2 34 11 00 00    	add    edx,0x1134
c0015e4d:	83 ec 04             	sub    esp,0x4
c0015e50:	50                   	push   eax
c0015e51:	6a 00                	push   0x0
c0015e53:	52                   	push   edx
c0015e54:	e8 1f a9 fe ff       	call   c0000778 <memset>
c0015e59:	83 c4 10             	add    esp,0x10
c0015e5c:	90                   	nop
c0015e5d:	c9                   	leave  
c0015e5e:	c3                   	ret    

c0015e5f <readKeyboard(VgaText*, char*, unsigned long)>:
c0015e5f:	55                   	push   ebp
c0015e60:	89 e5                	mov    ebp,esp
c0015e62:	83 ec 18             	sub    esp,0x18
c0015e65:	fb                   	sti    
c0015e66:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015e6d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015e71:	0f 84 8a 00 00 00    	je     c0015f01 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7a:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015e80:	84 c0                	test   al,al
c0015e82:	75 11                	jne    c0015e95 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015e84:	e8 a5 79 00 00       	call   c001d82e <lockScheduler()>
c0015e89:	e8 dc 7c 00 00       	call   c001db6a <schedule()>
c0015e8e:	e8 9d 79 00 00       	call   c001d830 <unlockScheduler()>
c0015e93:	eb e2                	jmp    c0015e77 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015e95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e98:	8d 50 01             	lea    edx,[eax+0x1]
c0015e9b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015e9e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ea1:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015ea7:	88 10                	mov    BYTE PTR [eax],dl
c0015ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eac:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015eb2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb8:	05 34 11 00 00       	add    eax,0x1134
c0015ebd:	83 ec 0c             	sub    esp,0xc
c0015ec0:	50                   	push   eax
c0015ec1:	e8 ce a8 fe ff       	call   c0000794 <strlen>
c0015ec6:	83 c4 10             	add    esp,0x10
c0015ec9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ecc:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ed2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ed5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ed8:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ede:	83 ec 04             	sub    esp,0x4
c0015ee1:	50                   	push   eax
c0015ee2:	51                   	push   ecx
c0015ee3:	52                   	push   edx
c0015ee4:	e8 93 a7 fe ff       	call   c000067c <memmove>
c0015ee9:	83 c4 10             	add    esp,0x10
c0015eec:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015eef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015ef2:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015ef6:	0f 85 71 ff ff ff    	jne    c0015e6d <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015efc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015eff:	eb 03                	jmp    c0015f04 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015f01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f04:	c9                   	leave  
c0015f05:	c3                   	ret    

c0015f06 <Keyboard::Keyboard(char const*)>:
c0015f06:	83 ec 0c             	sub    esp,0xc
c0015f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f0d:	83 ec 08             	sub    esp,0x8
c0015f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f14:	50                   	push   eax
c0015f15:	e8 0c e2 ff ff       	call   c0014126 <Device::Device(char const*)>
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c0015f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f26:	89 10                	mov    DWORD PTR [eax],edx
c0015f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f2c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015f36:	c6 05 c4 de 02 c0 01 	mov    BYTE PTR ds:0xc002dec4,0x1
c0015f3d:	90                   	nop
c0015f3e:	83 c4 0c             	add    esp,0xc
c0015f41:	c3                   	ret    

c0015f42 <Keyboard::~Keyboard()>:
c0015f42:	83 ec 0c             	sub    esp,0xc
c0015f45:	ba 28 ab 02 c0       	mov    edx,0xc002ab28
c0015f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f4e:	89 10                	mov    DWORD PTR [eax],edx
c0015f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f54:	83 ec 0c             	sub    esp,0xc
c0015f57:	50                   	push   eax
c0015f58:	e8 ab de ff ff       	call   c0013e08 <Device::~Device()>
c0015f5d:	83 c4 10             	add    esp,0x10
c0015f60:	90                   	nop
c0015f61:	83 c4 0c             	add    esp,0xc
c0015f64:	c3                   	ret    
c0015f65:	90                   	nop

c0015f66 <Keyboard::~Keyboard()>:
c0015f66:	83 ec 0c             	sub    esp,0xc
c0015f69:	83 ec 0c             	sub    esp,0xc
c0015f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f70:	e8 cd ff ff ff       	call   c0015f42 <Keyboard::~Keyboard()>
c0015f75:	83 c4 10             	add    esp,0x10
c0015f78:	83 ec 08             	sub    esp,0x8
c0015f7b:	68 5c 01 00 00       	push   0x15c
c0015f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f84:	e8 a6 ca ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0015f89:	83 c4 10             	add    esp,0x10
c0015f8c:	83 c4 0c             	add    esp,0xc
c0015f8f:	c3                   	ret    

c0015f90 <LogicalDisk::close(int, int, void*)>:
c0015f90:	83 c8 ff             	or     eax,0xffffffff
c0015f93:	c3                   	ret    

c0015f94 <LogicalDisk::~LogicalDisk()>:
c0015f94:	83 ec 0c             	sub    esp,0xc
c0015f97:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0015f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa0:	89 10                	mov    DWORD PTR [eax],edx
c0015fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa6:	83 ec 0c             	sub    esp,0xc
c0015fa9:	50                   	push   eax
c0015faa:	e8 59 de ff ff       	call   c0013e08 <Device::~Device()>
c0015faf:	83 c4 10             	add    esp,0x10
c0015fb2:	90                   	nop
c0015fb3:	83 c4 0c             	add    esp,0xc
c0015fb6:	c3                   	ret    
c0015fb7:	90                   	nop

c0015fb8 <LogicalDisk::~LogicalDisk()>:
c0015fb8:	83 ec 0c             	sub    esp,0xc
c0015fbb:	83 ec 0c             	sub    esp,0xc
c0015fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fc2:	e8 cd ff ff ff       	call   c0015f94 <LogicalDisk::~LogicalDisk()>
c0015fc7:	83 c4 10             	add    esp,0x10
c0015fca:	83 ec 08             	sub    esp,0x8
c0015fcd:	68 74 01 00 00       	push   0x174
c0015fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fd6:	e8 54 ca ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0015fdb:	83 c4 10             	add    esp,0x10
c0015fde:	83 c4 0c             	add    esp,0xc
c0015fe1:	c3                   	ret    

c0015fe2 <LogicalDisk::open(int, int, void*)>:
c0015fe2:	83 ec 18             	sub    esp,0x18
c0015fe5:	68 54 ab 02 c0       	push   0xc002ab54
c0015fea:	e8 b0 41 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0015fef:	83 c8 ff             	or     eax,0xffffffff
c0015ff2:	83 c4 1c             	add    esp,0x1c
c0015ff5:	c3                   	ret    

c0015ff6 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015ff6:	53                   	push   ebx
c0015ff7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016003:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016009:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001600f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016015:	77 10                	ja     c0016027 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016017:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001601d:	89 d3                	mov    ebx,edx
c001601f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016025:	72 05                	jb     c001602c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016027:	83 c8 ff             	or     eax,0xffffffff
c001602a:	89 c2                	mov    edx,eax
c001602c:	5b                   	pop    ebx
c001602d:	c3                   	ret    

c001602e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001602e:	56                   	push   esi
c001602f:	83 c8 ff             	or     eax,0xffffffff
c0016032:	53                   	push   ebx
c0016033:	89 c2                	mov    edx,eax
c0016035:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016039:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001603d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016041:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016047:	77 27                	ja     c0016070 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016049:	89 d8                	mov    eax,ebx
c001604b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016051:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016057:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001605c:	89 c2                	mov    edx,eax
c001605e:	73 10                	jae    c0016070 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016060:	89 c8                	mov    eax,ecx
c0016062:	89 da                	mov    edx,ebx
c0016064:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001606a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016070:	5b                   	pop    ebx
c0016071:	5e                   	pop    esi
c0016072:	c3                   	ret    
c0016073:	90                   	nop

c0016074 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016074:	83 ec 1c             	sub    esp,0x1c
c0016077:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001607b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001607f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016083:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016087:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001608b:	89 04 24             	mov    DWORD PTR [esp],eax
c001608e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016092:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001609a:	83 ec 08             	sub    esp,0x8
c001609d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160a1:	50                   	push   eax
c00160a2:	e8 7f e0 ff ff       	call   c0014126 <Device::Device(char const*)>
c00160a7:	83 c4 10             	add    esp,0x10
c00160aa:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00160af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b3:	89 10                	mov    DWORD PTR [eax],edx
c00160b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160c4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160cf:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00160d9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160e5:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00160eb:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00160f1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00160f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160fc:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016102:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001610c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016110:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001611a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016124:	90                   	nop
c0016125:	83 c4 1c             	add    esp,0x1c
c0016128:	c3                   	ret    
c0016129:	90                   	nop

c001612a <LogicalDisk::assignDriveLetter()>:
c001612a:	55                   	push   ebp
c001612b:	57                   	push   edi
c001612c:	56                   	push   esi
c001612d:	53                   	push   ebx
c001612e:	83 ec 14             	sub    esp,0x14
c0016131:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016135:	8b 3d 00 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e300
c001613b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016141:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016145:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001614b:	8b 3d 04 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e304
c0016151:	3c 01                	cmp    al,0x1
c0016153:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016157:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001615b:	19 c0                	sbb    eax,eax
c001615d:	83 e0 02             	and    eax,0x2
c0016160:	83 c0 41             	add    eax,0x41
c0016163:	0f be e8             	movsx  ebp,al
c0016166:	3c 43                	cmp    al,0x43
c0016168:	75 10                	jne    c001617a <LogicalDisk::assignDriveLetter()+0x50>
c001616a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016171:	75 5d                	jne    c00161d0 <LogicalDisk::assignDriveLetter()+0xa6>
c0016173:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016178:	75 56                	jne    c00161d0 <LogicalDisk::assignDriveLetter()+0xa6>
c001617a:	8d 75 bf             	lea    esi,[ebp-0x41]
c001617d:	ba 01 00 00 00       	mov    edx,0x1
c0016182:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016186:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001618a:	d3 e2                	shl    edx,cl
c001618c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016190:	89 d7                	mov    edi,edx
c0016192:	89 d6                	mov    esi,edx
c0016194:	c1 ff 1f             	sar    edi,0x1f
c0016197:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001619b:	21 f9                	and    ecx,edi
c001619d:	09 d1                	or     ecx,edx
c001619f:	75 2f                	jne    c00161d0 <LogicalDisk::assignDriveLetter()+0xa6>
c00161a1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00161a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00161a9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00161af:	09 f2                	or     edx,esi
c00161b1:	89 15 00 e3 02 c0    	mov    DWORD PTR ds:0xc002e300,edx
c00161b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161bb:	09 fa                	or     edx,edi
c00161bd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00161c1:	89 15 04 e3 02 c0    	mov    DWORD PTR ds:0xc002e304,edx
c00161c7:	89 1c bd 20 e3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1ce0],ebx
c00161ce:	eb 08                	jmp    c00161d8 <LogicalDisk::assignDriveLetter()+0xae>
c00161d0:	45                   	inc    ebp
c00161d1:	40                   	inc    eax
c00161d2:	3c 5b                	cmp    al,0x5b
c00161d4:	75 90                	jne    c0016166 <LogicalDisk::assignDriveLetter()+0x3c>
c00161d6:	31 c0                	xor    eax,eax
c00161d8:	83 c4 14             	add    esp,0x14
c00161db:	5b                   	pop    ebx
c00161dc:	5e                   	pop    esi
c00161dd:	5f                   	pop    edi
c00161de:	5d                   	pop    ebp
c00161df:	c3                   	ret    

c00161e0 <LogicalDisk::mount()>:
c00161e0:	56                   	push   esi
c00161e1:	53                   	push   ebx
c00161e2:	51                   	push   ecx
c00161e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161e7:	8b 1d 88 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de88
c00161ed:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00161f7:	85 db                	test   ebx,ebx
c00161f9:	74 50                	je     c001624b <LogicalDisk::mount()+0x6b>
c00161fb:	e8 19 76 00 00       	call   c001d819 <getIRQNestingLevel()>
c0016200:	52                   	push   edx
c0016201:	52                   	push   edx
c0016202:	50                   	push   eax
c0016203:	68 78 ab 02 c0       	push   0xc002ab78
c0016208:	e8 02 c9 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001620d:	83 c4 0c             	add    esp,0xc
c0016210:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016217:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016219:	83 e8 41             	sub    eax,0x41
c001621c:	50                   	push   eax
c001621d:	56                   	push   esi
c001621e:	53                   	push   ebx
c001621f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016222:	83 c4 10             	add    esp,0x10
c0016225:	84 c0                	test   al,al
c0016227:	74 08                	je     c0016231 <LogicalDisk::mount()+0x51>
c0016229:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001622f:	eb 1c                	jmp    c001624d <LogicalDisk::mount()+0x6d>
c0016231:	e8 e3 75 00 00       	call   c001d819 <getIRQNestingLevel()>
c0016236:	51                   	push   ecx
c0016237:	51                   	push   ecx
c0016238:	50                   	push   eax
c0016239:	68 93 ab 02 c0       	push   0xc002ab93
c001623e:	e8 cc c8 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0016243:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016246:	83 c4 10             	add    esp,0x10
c0016249:	eb ac                	jmp    c00161f7 <LogicalDisk::mount()+0x17>
c001624b:	31 c0                	xor    eax,eax
c001624d:	5a                   	pop    edx
c001624e:	5b                   	pop    ebx
c001624f:	5e                   	pop    esi
c0016250:	c3                   	ret    
c0016251:	90                   	nop

c0016252 <LogicalDisk::unmount()>:
c0016252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016256:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016260:	c3                   	ret    
c0016261:	90                   	nop

c0016262 <LogicalDisk::eject()>:
c0016262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016266:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001626c:	8b 10                	mov    edx,DWORD PTR [eax]
c001626e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016272:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016275:	90                   	nop

c0016276 <LogicalDisk::unassignDriveLetter()>:
c0016276:	57                   	push   edi
c0016277:	56                   	push   esi
c0016278:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001627c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016283:	84 c9                	test   cl,cl
c0016285:	75 0f                	jne    c0016296 <LogicalDisk::unassignDriveLetter()+0x20>
c0016287:	c7 44 24 0c ae ab 02 c0 	mov    DWORD PTR [esp+0xc],0xc002abae
c001628f:	5e                   	pop    esi
c0016290:	5f                   	pop    edi
c0016291:	e9 09 3f 00 00       	jmp    c001a19f <Krnl::panic(char const*)>
c0016296:	83 e9 41             	sub    ecx,0x41
c0016299:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00162a0:	b8 01 00 00 00       	mov    eax,0x1
c00162a5:	c7 04 8d 20 e3 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1ce0],0x0
c00162b0:	d3 e0                	shl    eax,cl
c00162b2:	89 c7                	mov    edi,eax
c00162b4:	f7 d0                	not    eax
c00162b6:	c1 ff 1f             	sar    edi,0x1f
c00162b9:	21 05 00 e3 02 c0    	and    DWORD PTR ds:0xc002e300,eax
c00162bf:	89 fe                	mov    esi,edi
c00162c1:	f7 d6                	not    esi
c00162c3:	21 35 04 e3 02 c0    	and    DWORD PTR ds:0xc002e304,esi
c00162c9:	5e                   	pop    esi
c00162ca:	5f                   	pop    edi
c00162cb:	c3                   	ret    

c00162cc <LogicalDisk::read(unsigned long long, int, void*)>:
c00162cc:	57                   	push   edi
c00162cd:	56                   	push   esi
c00162ce:	53                   	push   ebx
c00162cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162e5:	77 41                	ja     c0016328 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00162e7:	99                   	cdq    
c00162e8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00162ee:	01 c8                	add    eax,ecx
c00162f0:	11 da                	adc    edx,ebx
c00162f2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162f8:	19 d7                	sbb    edi,edx
c00162fa:	72 33                	jb     c001632f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00162fc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016302:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016308:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001630c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016310:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016316:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001631c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016320:	5b                   	pop    ebx
c0016321:	5e                   	pop    esi
c0016322:	5f                   	pop    edi
c0016323:	e9 b0 0a 00 00       	jmp    c0016dd8 <VCache::read(unsigned long long, int, void*)>
c0016328:	b8 05 00 00 00       	mov    eax,0x5
c001632d:	eb 05                	jmp    c0016334 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001632f:	b8 07 00 00 00       	mov    eax,0x7
c0016334:	5b                   	pop    ebx
c0016335:	5e                   	pop    esi
c0016336:	5f                   	pop    edi
c0016337:	c3                   	ret    

c0016338 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016338:	57                   	push   edi
c0016339:	56                   	push   esi
c001633a:	53                   	push   ebx
c001633b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001633f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016343:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016347:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001634b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016351:	77 41                	ja     c0016394 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016353:	99                   	cdq    
c0016354:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001635a:	01 c8                	add    eax,ecx
c001635c:	11 da                	adc    edx,ebx
c001635e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016364:	19 d7                	sbb    edi,edx
c0016366:	72 33                	jb     c001639b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016368:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001636e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016374:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016378:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001637c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016382:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016388:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001638c:	5b                   	pop    ebx
c001638d:	5e                   	pop    esi
c001638e:	5f                   	pop    edi
c001638f:	e9 4e 09 00 00       	jmp    c0016ce2 <VCache::write(unsigned long long, int, void*)>
c0016394:	b8 05 00 00 00       	mov    eax,0x5
c0016399:	eb 05                	jmp    c00163a0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001639b:	b8 07 00 00 00       	mov    eax,0x7
c00163a0:	5b                   	pop    ebx
c00163a1:	5e                   	pop    esi
c00163a2:	5f                   	pop    edi
c00163a3:	c3                   	ret    

c00163a4 <Mouse::Mouse(char const*)>:
c00163a4:	83 ec 0c             	sub    esp,0xc
c00163a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ab:	83 ec 08             	sub    esp,0x8
c00163ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b2:	50                   	push   eax
c00163b3:	e8 6e dd ff ff       	call   c0014126 <Device::Device(char const*)>
c00163b8:	83 c4 10             	add    esp,0x10
c00163bb:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c00163c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c4:	89 10                	mov    DWORD PTR [eax],edx
c00163c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ca:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00163d4:	90                   	nop
c00163d5:	83 c4 0c             	add    esp,0xc
c00163d8:	c3                   	ret    
c00163d9:	90                   	nop

c00163da <Mouse::~Mouse()>:
c00163da:	83 ec 0c             	sub    esp,0xc
c00163dd:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c00163e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e6:	89 10                	mov    DWORD PTR [eax],edx
c00163e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ec:	83 ec 0c             	sub    esp,0xc
c00163ef:	50                   	push   eax
c00163f0:	e8 13 da ff ff       	call   c0013e08 <Device::~Device()>
c00163f5:	83 c4 10             	add    esp,0x10
c00163f8:	90                   	nop
c00163f9:	83 c4 0c             	add    esp,0xc
c00163fc:	c3                   	ret    
c00163fd:	90                   	nop

c00163fe <Mouse::~Mouse()>:
c00163fe:	83 ec 0c             	sub    esp,0xc
c0016401:	83 ec 0c             	sub    esp,0xc
c0016404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016408:	e8 cd ff ff ff       	call   c00163da <Mouse::~Mouse()>
c001640d:	83 c4 10             	add    esp,0x10
c0016410:	83 ec 08             	sub    esp,0x8
c0016413:	68 58 01 00 00       	push   0x158
c0016418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001641c:	e8 0e c6 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0016421:	83 c4 10             	add    esp,0x10
c0016424:	83 c4 0c             	add    esp,0xc
c0016427:	c3                   	ret    

c0016428 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016428:	55                   	push   ebp
c0016429:	57                   	push   edi
c001642a:	56                   	push   esi
c001642b:	53                   	push   ebx
c001642c:	81 ec 28 01 00 00    	sub    esp,0x128
c0016432:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016439:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016440:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016447:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001644e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016452:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016456:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001645d:	e8 c0 dd ff ff       	call   c0014222 <Device::getName()>
c0016462:	5a                   	pop    edx
c0016463:	59                   	pop    ecx
c0016464:	50                   	push   eax
c0016465:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016469:	55                   	push   ebp
c001646a:	e8 c5 a3 fe ff       	call   c0000834 <strcpy>
c001646f:	5b                   	pop    ebx
c0016470:	58                   	pop    eax
c0016471:	68 28 ac 02 c0       	push   0xc002ac28
c0016476:	55                   	push   ebp
c0016477:	e8 f8 a4 fe ff       	call   c0000974 <strcat>
c001647c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016483:	e8 b8 93 ff ff       	call   c000f840 <malloc>
c0016488:	83 c4 0c             	add    esp,0xc
c001648b:	89 c3                	mov    ebx,eax
c001648d:	57                   	push   edi
c001648e:	56                   	push   esi
c001648f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016493:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016497:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001649e:	55                   	push   ebp
c001649f:	50                   	push   eax
c00164a0:	e8 cf fb ff ff       	call   c0016074 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00164a5:	83 c4 14             	add    esp,0x14
c00164a8:	53                   	push   ebx
c00164a9:	e8 7c fc ff ff       	call   c001612a <LogicalDisk::assignDriveLetter()>
c00164ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164b1:	89 c6                	mov    esi,eax
c00164b3:	e8 28 fd ff ff       	call   c00161e0 <LogicalDisk::mount()>
c00164b8:	58                   	pop    eax
c00164b9:	5a                   	pop    edx
c00164ba:	53                   	push   ebx
c00164bb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164c2:	e8 6f da ff ff       	call   c0013f36 <Device::addChild(Device*)>
c00164c7:	59                   	pop    ecx
c00164c8:	89 f0                	mov    eax,esi
c00164ca:	5b                   	pop    ebx
c00164cb:	0f be f0             	movsx  esi,al
c00164ce:	56                   	push   esi
c00164cf:	68 33 ac 02 c0       	push   0xc002ac33
c00164d4:	e8 36 c6 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00164d9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00164df:	5b                   	pop    ebx
c00164e0:	5e                   	pop    esi
c00164e1:	5f                   	pop    edi
c00164e2:	5d                   	pop    ebp
c00164e3:	c3                   	ret    

c00164e4 <createPartitionsForDisk(PhysicalDisk*)>:
c00164e4:	55                   	push   ebp
c00164e5:	57                   	push   edi
c00164e6:	56                   	push   esi
c00164e7:	53                   	push   ebx
c00164e8:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00164ee:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00164f5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00164fb:	3d 00 02 00 00       	cmp    eax,0x200
c0016500:	74 27                	je     c0016529 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016502:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016508:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001650e:	83 ec 10             	sub    esp,0x10
c0016511:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016515:	99                   	cdq    
c0016516:	c1 e6 0a             	shl    esi,0xa
c0016519:	52                   	push   edx
c001651a:	89 fd                	mov    ebp,edi
c001651c:	50                   	push   eax
c001651d:	55                   	push   ebp
c001651e:	56                   	push   esi
c001651f:	e8 e8 fe 00 00       	call   c002640c <__udivdi3>
c0016524:	e9 b1 00 00 00       	jmp    c00165da <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016529:	83 ec 0c             	sub    esp,0xc
c001652c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001652e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016532:	56                   	push   esi
c0016533:	6a 01                	push   0x1
c0016535:	6a 00                	push   0x0
c0016537:	6a 00                	push   0x0
c0016539:	53                   	push   ebx
c001653a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001653d:	83 c4 20             	add    esp,0x20
c0016540:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016548:	75 0a                	jne    c0016554 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001654a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016552:	74 2c                	je     c0016580 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016554:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001655a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016560:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016566:	83 ec 10             	sub    esp,0x10
c0016569:	0f a4 c2 0a          	shld   edx,eax,0xa
c001656d:	89 f7                	mov    edi,esi
c001656f:	c1 e0 0a             	shl    eax,0xa
c0016572:	c1 ff 1f             	sar    edi,0x1f
c0016575:	57                   	push   edi
c0016576:	56                   	push   esi
c0016577:	52                   	push   edx
c0016578:	50                   	push   eax
c0016579:	e8 8e fe 00 00       	call   c002640c <__udivdi3>
c001657e:	eb 5a                	jmp    c00165da <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016580:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016587:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001658e:	83 e1 7f             	and    ecx,0x7f
c0016591:	83 e0 7f             	and    eax,0x7f
c0016594:	01 c1                	add    ecx,eax
c0016596:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001659d:	83 e0 7f             	and    eax,0x7f
c00165a0:	01 c1                	add    ecx,eax
c00165a2:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00165a9:	83 e0 7f             	and    eax,0x7f
c00165ac:	00 c1                	add    cl,al
c00165ae:	74 41                	je     c00165f1 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00165b0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165b6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165bc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165c2:	83 ec 10             	sub    esp,0x10
c00165c5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165c9:	89 f7                	mov    edi,esi
c00165cb:	c1 e0 0a             	shl    eax,0xa
c00165ce:	c1 ff 1f             	sar    edi,0x1f
c00165d1:	57                   	push   edi
c00165d2:	56                   	push   esi
c00165d3:	52                   	push   edx
c00165d4:	50                   	push   eax
c00165d5:	e8 32 fe 00 00       	call   c002640c <__udivdi3>
c00165da:	83 c4 14             	add    esp,0x14
c00165dd:	52                   	push   edx
c00165de:	50                   	push   eax
c00165df:	6a 00                	push   0x0
c00165e1:	6a 00                	push   0x0
c00165e3:	53                   	push   ebx
c00165e4:	e8 3f fe ff ff       	call   c0016428 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00165e9:	83 c4 20             	add    esp,0x20
c00165ec:	e9 79 01 00 00       	jmp    c001676a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00165f1:	89 f0                	mov    eax,esi
c00165f3:	31 f6                	xor    esi,esi
c00165f5:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00165fc:	75 02                	jne    c0016600 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00165fe:	89 f1                	mov    ecx,esi
c0016600:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016607:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001660e:	c1 e2 08             	shl    edx,0x8
c0016611:	c1 e7 10             	shl    edi,0x10
c0016614:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001661c:	09 fa                	or     edx,edi
c001661e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016626:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001662d:	83 c0 10             	add    eax,0x10
c0016630:	09 fa                	or     edx,edi
c0016632:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016639:	c1 e7 18             	shl    edi,0x18
c001663c:	09 fa                	or     edx,edi
c001663e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016645:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016649:	c1 e7 10             	shl    edi,0x10
c001664c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016653:	c1 e2 08             	shl    edx,0x8
c0016656:	09 fa                	or     edx,edi
c0016658:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001665f:	09 fa                	or     edx,edi
c0016661:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016668:	c1 e7 18             	shl    edi,0x18
c001666b:	09 fa                	or     edx,edi
c001666d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016671:	46                   	inc    esi
c0016672:	83 fe 04             	cmp    esi,0x4
c0016675:	0f 85 7a ff ff ff    	jne    c00165f5 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001667b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001667f:	83 f0 01             	xor    eax,0x1
c0016682:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016686:	75 57                	jne    c00166df <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016688:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001668c:	83 f0 01             	xor    eax,0x1
c001668f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016693:	75 4a                	jne    c00166df <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016695:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016699:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00166a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166a9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00166af:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00166b5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00166bb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166bf:	89 f7                	mov    edi,esi
c00166c1:	c1 e0 0a             	shl    eax,0xa
c00166c4:	c1 ff 1f             	sar    edi,0x1f
c00166c7:	57                   	push   edi
c00166c8:	56                   	push   esi
c00166c9:	52                   	push   edx
c00166ca:	50                   	push   eax
c00166cb:	e8 3c fd 00 00       	call   c002640c <__udivdi3>
c00166d0:	83 c4 10             	add    esp,0x10
c00166d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166d7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166db:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00166df:	84 c9                	test   cl,cl
c00166e1:	74 53                	je     c0016736 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00166e3:	0f b6 c9             	movzx  ecx,cl
c00166e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166ee:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166f2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00166f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00166fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00166fe:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016702:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016706:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001670a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001670e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016712:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016716:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001671a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001671e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016722:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016726:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001672a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001672e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016732:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016736:	31 ed                	xor    ebp,ebp
c0016738:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001673c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016740:	89 f8                	mov    eax,edi
c0016742:	09 f0                	or     eax,esi
c0016744:	74 1e                	je     c0016764 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016746:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001674a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001674e:	89 d1                	mov    ecx,edx
c0016750:	09 c1                	or     ecx,eax
c0016752:	74 10                	je     c0016764 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016754:	83 ec 0c             	sub    esp,0xc
c0016757:	57                   	push   edi
c0016758:	56                   	push   esi
c0016759:	52                   	push   edx
c001675a:	50                   	push   eax
c001675b:	53                   	push   ebx
c001675c:	e8 c7 fc ff ff       	call   c0016428 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016761:	83 c4 20             	add    esp,0x20
c0016764:	45                   	inc    ebp
c0016765:	83 fd 04             	cmp    ebp,0x4
c0016768:	75 ce                	jne    c0016738 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001676a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016770:	5b                   	pop    ebx
c0016771:	5e                   	pop    esi
c0016772:	5f                   	pop    edi
c0016773:	5d                   	pop    ebp
c0016774:	c3                   	ret    
c0016775:	90                   	nop

c0016776 <Serial::Serial(char const*)>:
c0016776:	83 ec 0c             	sub    esp,0xc
c0016779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001677d:	83 ec 08             	sub    esp,0x8
c0016780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016784:	50                   	push   eax
c0016785:	e8 9c d9 ff ff       	call   c0014126 <Device::Device(char const*)>
c001678a:	83 c4 10             	add    esp,0x10
c001678d:	ba 60 ac 02 c0       	mov    edx,0xc002ac60
c0016792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016796:	89 10                	mov    DWORD PTR [eax],edx
c0016798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679c:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00167a6:	90                   	nop
c00167a7:	83 c4 0c             	add    esp,0xc
c00167aa:	c3                   	ret    
c00167ab:	90                   	nop

c00167ac <Serial::~Serial()>:
c00167ac:	83 ec 0c             	sub    esp,0xc
c00167af:	ba 60 ac 02 c0       	mov    edx,0xc002ac60
c00167b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b8:	89 10                	mov    DWORD PTR [eax],edx
c00167ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167be:	83 ec 0c             	sub    esp,0xc
c00167c1:	50                   	push   eax
c00167c2:	e8 41 d6 ff ff       	call   c0013e08 <Device::~Device()>
c00167c7:	83 c4 10             	add    esp,0x10
c00167ca:	90                   	nop
c00167cb:	83 c4 0c             	add    esp,0xc
c00167ce:	c3                   	ret    
c00167cf:	90                   	nop

c00167d0 <Serial::~Serial()>:
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	83 ec 0c             	sub    esp,0xc
c00167d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167da:	e8 cd ff ff ff       	call   c00167ac <Serial::~Serial()>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	83 ec 08             	sub    esp,0x8
c00167e5:	68 58 01 00 00       	push   0x158
c00167ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ee:	e8 3c c2 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	83 c4 0c             	add    esp,0xc
c00167f9:	c3                   	ret    

c00167fa <Timer::Timer(char const*)>:
c00167fa:	83 ec 0c             	sub    esp,0xc
c00167fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016801:	83 ec 08             	sub    esp,0x8
c0016804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016808:	50                   	push   eax
c0016809:	e8 18 d9 ff ff       	call   c0014126 <Device::Device(char const*)>
c001680e:	83 c4 10             	add    esp,0x10
c0016811:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c0016816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001681a:	89 10                	mov    DWORD PTR [eax],edx
c001681c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016820:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001682a:	90                   	nop
c001682b:	83 c4 0c             	add    esp,0xc
c001682e:	c3                   	ret    
c001682f:	90                   	nop

c0016830 <Timer::~Timer()>:
c0016830:	83 ec 0c             	sub    esp,0xc
c0016833:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c0016838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683c:	89 10                	mov    DWORD PTR [eax],edx
c001683e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	50                   	push   eax
c0016846:	e8 bd d5 ff ff       	call   c0013e08 <Device::~Device()>
c001684b:	83 c4 10             	add    esp,0x10
c001684e:	90                   	nop
c001684f:	83 c4 0c             	add    esp,0xc
c0016852:	c3                   	ret    
c0016853:	90                   	nop

c0016854 <Timer::~Timer()>:
c0016854:	83 ec 0c             	sub    esp,0xc
c0016857:	83 ec 0c             	sub    esp,0xc
c001685a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001685e:	e8 cd ff ff ff       	call   c0016830 <Timer::~Timer()>
c0016863:	83 c4 10             	add    esp,0x10
c0016866:	83 ec 08             	sub    esp,0x8
c0016869:	68 5c 01 00 00       	push   0x15c
c001686e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016872:	e8 b8 c1 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0016877:	83 c4 10             	add    esp,0x10
c001687a:	83 c4 0c             	add    esp,0xc
c001687d:	c3                   	ret    

c001687e <Timer::read()>:
c001687e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016882:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016888:	c3                   	ret    

c0016889 <timerHandler(unsigned long long)>:
c0016889:	55                   	push   ebp
c001688a:	57                   	push   edi
c001688b:	56                   	push   esi
c001688c:	53                   	push   ebx
c001688d:	83 ec 0c             	sub    esp,0xc
c0016890:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016894:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016898:	01 35 90 e3 02 c0    	add    DWORD PTR ds:0xc002e390,esi
c001689e:	11 3d 94 e3 02 c0    	adc    DWORD PTR ds:0xc002e394,edi
c00168a4:	80 3d 0d dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd0d,0x0
c00168ab:	0f 84 07 01 00 00    	je     c00169b8 <timerHandler(unsigned long long)+0x12f>
c00168b1:	e8 9f 6f 00 00       	call   c001d855 <lockStuff()>
c00168b6:	83 ec 0c             	sub    esp,0xc
c00168b9:	68 5c 12 03 c0       	push   0xc003125c
c00168be:	e8 bb 1b 01 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c3:	c7 04 24 5c 12 03 c0 	mov    DWORD PTR [esp],0xc003125c
c00168ca:	89 c3                	mov    ebx,eax
c00168cc:	e8 b5 1b 01 00       	call   c0028486 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	84 c0                	test   al,al
c00168d6:	74 60                	je     c0016938 <timerHandler(unsigned long long)+0xaf>
c00168d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168de:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00168e1:	85 c0                	test   eax,eax
c00168e3:	0f 85 91 00 00 00    	jne    c001697a <timerHandler(unsigned long long)+0xf1>
c00168e9:	e9 be 00 00 00       	jmp    c00169ac <timerHandler(unsigned long long)+0x123>
c00168ee:	83 ec 0c             	sub    esp,0xc
c00168f1:	55                   	push   ebp
c00168f2:	e8 4f 75 00 00       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c00168f7:	83 c4 10             	add    esp,0x10
c00168fa:	39 eb                	cmp    ebx,ebp
c00168fc:	75 12                	jne    c0016910 <timerHandler(unsigned long long)+0x87>
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	68 5c 12 03 c0       	push   0xc003125c
c0016906:	e8 73 1b 01 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001690b:	89 c3                	mov    ebx,eax
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	68 5c 12 03 c0       	push   0xc003125c
c0016918:	e8 69 1b 01 00       	call   c0028486 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	84 c0                	test   al,al
c0016922:	75 b4                	jne    c00168d8 <timerHandler(unsigned long long)+0x4f>
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	68 5c 12 03 c0       	push   0xc003125c
c001692c:	e8 4d 1b 01 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	39 d8                	cmp    eax,ebx
c0016936:	74 a0                	je     c00168d8 <timerHandler(unsigned long long)+0x4f>
c0016938:	83 ec 0c             	sub    esp,0xc
c001693b:	68 5c 12 03 c0       	push   0xc003125c
c0016940:	e8 39 1b 01 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016945:	c7 04 24 5c 12 03 c0 	mov    DWORD PTR [esp],0xc003125c
c001694c:	89 c5                	mov    ebp,eax
c001694e:	e8 4f 1b 01 00       	call   c00284a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016953:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016956:	83 c4 10             	add    esp,0x10
c0016959:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001695c:	39 15 90 e3 02 c0    	cmp    DWORD PTR ds:0xc002e390,edx
c0016962:	a1 94 e3 02 c0       	mov    eax,ds:0xc002e394
c0016967:	19 c8                	sbb    eax,ecx
c0016969:	73 83                	jae    c00168ee <timerHandler(unsigned long long)+0x65>
c001696b:	50                   	push   eax
c001696c:	50                   	push   eax
c001696d:	55                   	push   ebp
c001696e:	68 5c 12 03 c0       	push   0xc003125c
c0016973:	e8 d8 1b 01 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016978:	eb 93                	jmp    c001690d <timerHandler(unsigned long long)+0x84>
c001697a:	80 3d 0c dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd0c,0x0
c0016981:	74 29                	je     c00169ac <timerHandler(unsigned long long)+0x123>
c0016983:	39 c6                	cmp    esi,eax
c0016985:	bb 00 00 00 00       	mov    ebx,0x0
c001698a:	19 df                	sbb    edi,ebx
c001698c:	72 19                	jb     c00169a7 <timerHandler(unsigned long long)+0x11e>
c001698e:	e8 9b 6e 00 00       	call   c001d82e <lockScheduler()>
c0016993:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016998:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001699b:	e8 ca 71 00 00       	call   c001db6a <schedule()>
c00169a0:	e8 8b 6e 00 00       	call   c001d830 <unlockScheduler()>
c00169a5:	eb 05                	jmp    c00169ac <timerHandler(unsigned long long)+0x123>
c00169a7:	29 f0                	sub    eax,esi
c00169a9:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00169ac:	83 c4 0c             	add    esp,0xc
c00169af:	5b                   	pop    ebx
c00169b0:	5e                   	pop    esi
c00169b1:	5f                   	pop    edi
c00169b2:	5d                   	pop    ebp
c00169b3:	e9 37 72 00 00       	jmp    c001dbef <unlockStuff()>
c00169b8:	83 c4 0c             	add    esp,0xc
c00169bb:	5b                   	pop    ebx
c00169bc:	5e                   	pop    esi
c00169bd:	5f                   	pop    edi
c00169be:	5d                   	pop    ebp
c00169bf:	c3                   	ret    

c00169c0 <setupTimer(int)>:
c00169c0:	57                   	push   edi
c00169c1:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00169c6:	56                   	push   esi
c00169c7:	53                   	push   ebx
c00169c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169d2:	83 ec 0c             	sub    esp,0xc
c00169d5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169db:	e8 42 d8 ff ff       	call   c0014222 <Device::getName()>
c00169e0:	83 c4 10             	add    esp,0x10
c00169e3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169e6:	0f 85 8d 00 00 00    	jne    c0016a79 <setupTimer(int)+0xb9>
c00169ec:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00169f1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169f8:	74 7f                	je     c0016a79 <setupTimer(int)+0xb9>
c00169fa:	83 ec 0c             	sub    esp,0xc
c00169fd:	68 5c 01 00 00       	push   0x15c
c0016a02:	e8 39 8e ff ff       	call   c000f840 <malloc>
c0016a07:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a0a:	89 c3                	mov    ebx,eax
c0016a0c:	e8 d7 f5 00 00       	call   c0025fe8 <PIT::PIT()>
c0016a11:	59                   	pop    ecx
c0016a12:	5f                   	pop    edi
c0016a13:	53                   	push   ebx
c0016a14:	ff 35 08 dd 02 c0    	push   DWORD PTR ds:0xc002dd08
c0016a1a:	e8 17 d5 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0016a1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a21:	6a 00                	push   0x0
c0016a23:	6a 00                	push   0x0
c0016a25:	56                   	push   esi
c0016a26:	53                   	push   ebx
c0016a27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a2a:	83 c4 14             	add    esp,0x14
c0016a2d:	68 60 01 00 00       	push   0x160
c0016a32:	e8 09 8e ff ff       	call   c000f840 <malloc>
c0016a37:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a3a:	89 c7                	mov    edi,eax
c0016a3c:	e8 57 f4 00 00       	call   c0025e98 <APICTimer::APICTimer()>
c0016a41:	6a 00                	push   0x0
c0016a43:	6a 00                	push   0x0
c0016a45:	56                   	push   esi
c0016a46:	57                   	push   edi
c0016a47:	e8 4e f3 00 00       	call   c0025d9a <APICTimer::open(int, int, void*)>
c0016a4c:	83 c4 20             	add    esp,0x20
c0016a4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a51:	6a 00                	push   0x0
c0016a53:	6a 00                	push   0x0
c0016a55:	6a 00                	push   0x0
c0016a57:	53                   	push   ebx
c0016a58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a5b:	58                   	pop    eax
c0016a5c:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0016a61:	5a                   	pop    edx
c0016a62:	57                   	push   edi
c0016a63:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a69:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a6f:	e8 c2 d4 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0016a74:	83 c4 10             	add    esp,0x10
c0016a77:	eb 33                	jmp    c0016aac <setupTimer(int)+0xec>
c0016a79:	83 ec 0c             	sub    esp,0xc
c0016a7c:	68 5c 01 00 00       	push   0x15c
c0016a81:	e8 ba 8d ff ff       	call   c000f840 <malloc>
c0016a86:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a89:	89 c3                	mov    ebx,eax
c0016a8b:	e8 58 f5 00 00       	call   c0025fe8 <PIT::PIT()>
c0016a90:	58                   	pop    eax
c0016a91:	5a                   	pop    edx
c0016a92:	53                   	push   ebx
c0016a93:	ff 35 08 dd 02 c0    	push   DWORD PTR ds:0xc002dd08
c0016a99:	e8 98 d4 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0016a9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aa0:	6a 00                	push   0x0
c0016aa2:	6a 00                	push   0x0
c0016aa4:	56                   	push   esi
c0016aa5:	53                   	push   ebx
c0016aa6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aa9:	83 c4 20             	add    esp,0x20
c0016aac:	89 d8                	mov    eax,ebx
c0016aae:	5b                   	pop    ebx
c0016aaf:	5e                   	pop    esi
c0016ab0:	5f                   	pop    edi
c0016ab1:	c3                   	ret    

c0016ab2 <VCache::VCache(PhysicalDisk*)>:
c0016ab2:	53                   	push   ebx
c0016ab3:	83 ec 18             	sub    esp,0x18
c0016ab6:	ba d4 ac 02 c0       	mov    edx,0xc002acd4
c0016abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016abf:	89 10                	mov    DWORD PTR [eax],edx
c0016ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac5:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad0:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016adb:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ae2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aed:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016af4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016afb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aff:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016b06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b0a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b12:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b19:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b24:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b34:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3c:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b43:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b4b:	83 ec 0c             	sub    esp,0xc
c0016b4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b52:	e8 e9 8c ff ff       	call   c000f840 <malloc>
c0016b57:	83 c4 10             	add    esp,0x10
c0016b5a:	89 c3                	mov    ebx,eax
c0016b5c:	83 ec 0c             	sub    esp,0xc
c0016b5f:	53                   	push   ebx
c0016b60:	e8 e9 6d 00 00       	call   c001d94e <Mutex::Mutex()>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b73:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b77:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b7e:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b89:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b93:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b9a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016ba0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ba6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016baa:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016bad:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016bb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bbc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bc2:	05 00 01 00 00       	add    eax,0x100
c0016bc7:	c1 e0 04             	shl    eax,0x4
c0016bca:	83 ec 0c             	sub    esp,0xc
c0016bcd:	50                   	push   eax
c0016bce:	e8 6d 8c ff ff       	call   c000f840 <malloc>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	89 c2                	mov    edx,eax
c0016bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bdc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be3:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bee:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bf6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bfc:	c1 e0 07             	shl    eax,0x7
c0016bff:	83 ec 0c             	sub    esp,0xc
c0016c02:	50                   	push   eax
c0016c03:	e8 38 8c ff ff       	call   c000f840 <malloc>
c0016c08:	83 c4 10             	add    esp,0x10
c0016c0b:	89 c2                	mov    edx,eax
c0016c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c11:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c14:	90                   	nop
c0016c15:	83 c4 18             	add    esp,0x18
c0016c18:	5b                   	pop    ebx
c0016c19:	c3                   	ret    

c0016c1a <VCache::invalidateReadBuffer()>:
c0016c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c1e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c24:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c28:	c3                   	ret    
c0016c29:	90                   	nop

c0016c2a <VCache::writeWriteBuffer()>:
c0016c2a:	53                   	push   ebx
c0016c2b:	83 ec 14             	sub    esp,0x14
c0016c2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c32:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c35:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c37:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c3a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c3d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c40:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c43:	50                   	push   eax
c0016c44:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c4e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c55:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c59:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c60:	83 c4 28             	add    esp,0x28
c0016c63:	5b                   	pop    ebx
c0016c64:	c3                   	ret    
c0016c65:	90                   	nop

c0016c66 <VCache::~VCache()>:
c0016c66:	83 ec 0c             	sub    esp,0xc
c0016c69:	ba d4 ac 02 c0       	mov    edx,0xc002acd4
c0016c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c72:	89 10                	mov    DWORD PTR [eax],edx
c0016c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c78:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c7b:	84 c0                	test   al,al
c0016c7d:	74 0f                	je     c0016c8e <VCache::~VCache()+0x28>
c0016c7f:	83 ec 0c             	sub    esp,0xc
c0016c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c86:	e8 9f ff ff ff       	call   c0016c2a <VCache::writeWriteBuffer()>
c0016c8b:	83 c4 10             	add    esp,0x10
c0016c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c92:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c95:	83 ec 0c             	sub    esp,0xc
c0016c98:	50                   	push   eax
c0016c99:	e8 b2 8b ff ff       	call   c000f850 <free>
c0016c9e:	83 c4 10             	add    esp,0x10
c0016ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ca8:	83 ec 0c             	sub    esp,0xc
c0016cab:	50                   	push   eax
c0016cac:	e8 9f 8b ff ff       	call   c000f850 <free>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	90                   	nop
c0016cb5:	83 c4 0c             	add    esp,0xc
c0016cb8:	c3                   	ret    
c0016cb9:	90                   	nop

c0016cba <VCache::~VCache()>:
c0016cba:	83 ec 0c             	sub    esp,0xc
c0016cbd:	83 ec 0c             	sub    esp,0xc
c0016cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc4:	e8 9d ff ff ff       	call   c0016c66 <VCache::~VCache()>
c0016cc9:	83 c4 10             	add    esp,0x10
c0016ccc:	83 ec 08             	sub    esp,0x8
c0016ccf:	6a 44                	push   0x44
c0016cd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd5:	e8 55 bd ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0016cda:	83 c4 10             	add    esp,0x10
c0016cdd:	83 c4 0c             	add    esp,0xc
c0016ce0:	c3                   	ret    
c0016ce1:	90                   	nop

c0016ce2 <VCache::write(unsigned long long, int, void*)>:
c0016ce2:	55                   	push   ebp
c0016ce3:	57                   	push   edi
c0016ce4:	56                   	push   esi
c0016ce5:	53                   	push   ebx
c0016ce6:	83 ec 28             	sub    esp,0x28
c0016ce9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ced:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016cf1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016cf5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016cf9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cfc:	e8 af 70 00 00       	call   c001ddb0 <Semaphore::acquire()>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d08:	74 0c                	je     c0016d16 <VCache::write(unsigned long long, int, void*)+0x34>
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	53                   	push   ebx
c0016d0e:	e8 07 ff ff ff       	call   c0016c1a <VCache::invalidateReadBuffer()>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d1a:	74 66                	je     c0016d82 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016d1c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d1f:	99                   	cdq    
c0016d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d24:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016d27:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016d2a:	89 c1                	mov    ecx,eax
c0016d2c:	89 d0                	mov    eax,edx
c0016d2e:	31 f1                	xor    ecx,esi
c0016d30:	31 f8                	xor    eax,edi
c0016d32:	89 ca                	mov    edx,ecx
c0016d34:	09 c2                	or     edx,eax
c0016d36:	75 3e                	jne    c0016d76 <VCache::write(unsigned long long, int, void*)+0x94>
c0016d38:	83 fd 01             	cmp    ebp,0x1
c0016d3b:	75 39                	jne    c0016d76 <VCache::write(unsigned long long, int, void*)+0x94>
c0016d3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d40:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d46:	51                   	push   ecx
c0016d47:	50                   	push   eax
c0016d48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d4c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016d50:	0f af c8             	imul   ecx,eax
c0016d53:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016d56:	51                   	push   ecx
c0016d57:	e8 e8 99 fe ff       	call   c0000744 <memcpy>
c0016d5c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d5f:	83 c4 10             	add    esp,0x10
c0016d62:	40                   	inc    eax
c0016d63:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d66:	83 c0 80             	add    eax,0xffffff80
c0016d69:	75 57                	jne    c0016dc2 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016d6b:	83 ec 0c             	sub    esp,0xc
c0016d6e:	53                   	push   ebx
c0016d6f:	e8 b6 fe ff ff       	call   c0016c2a <VCache::writeWriteBuffer()>
c0016d74:	eb 34                	jmp    c0016daa <VCache::write(unsigned long long, int, void*)+0xc8>
c0016d76:	83 ec 0c             	sub    esp,0xc
c0016d79:	53                   	push   ebx
c0016d7a:	e8 ab fe ff ff       	call   c0016c2a <VCache::writeWriteBuffer()>
c0016d7f:	83 c4 10             	add    esp,0x10
c0016d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d85:	83 fd 7f             	cmp    ebp,0x7f
c0016d88:	7f 25                	jg     c0016daf <VCache::write(unsigned long long, int, void*)+0xcd>
c0016d8a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d8d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d90:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016d93:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d97:	52                   	push   edx
c0016d98:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016d9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016da2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016da5:	e8 9a 99 fe ff       	call   c0000744 <memcpy>
c0016daa:	83 c4 10             	add    esp,0x10
c0016dad:	eb 13                	jmp    c0016dc2 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016daf:	83 ec 0c             	sub    esp,0xc
c0016db2:	8b 10                	mov    edx,DWORD PTR [eax]
c0016db4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016db8:	55                   	push   ebp
c0016db9:	57                   	push   edi
c0016dba:	56                   	push   esi
c0016dbb:	50                   	push   eax
c0016dbc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016dbf:	83 c4 20             	add    esp,0x20
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dc8:	e8 91 75 00 00       	call   c001e35e <Semaphore::release()>
c0016dcd:	83 c4 2c             	add    esp,0x2c
c0016dd0:	31 c0                	xor    eax,eax
c0016dd2:	5b                   	pop    ebx
c0016dd3:	5e                   	pop    esi
c0016dd4:	5f                   	pop    edi
c0016dd5:	5d                   	pop    ebp
c0016dd6:	c3                   	ret    
c0016dd7:	90                   	nop

c0016dd8 <VCache::read(unsigned long long, int, void*)>:
c0016dd8:	55                   	push   ebp
c0016dd9:	57                   	push   edi
c0016dda:	56                   	push   esi
c0016ddb:	53                   	push   ebx
c0016ddc:	83 ec 28             	sub    esp,0x28
c0016ddf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016de3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016de7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016deb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016def:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016df3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016df7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016dfb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dfe:	e8 ad 6f 00 00       	call   c001ddb0 <Semaphore::acquire()>
c0016e03:	83 c4 10             	add    esp,0x10
c0016e06:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016e0a:	74 0c                	je     c0016e18 <VCache::read(unsigned long long, int, void*)+0x40>
c0016e0c:	83 ec 0c             	sub    esp,0xc
c0016e0f:	53                   	push   ebx
c0016e10:	e8 15 fe ff ff       	call   c0016c2a <VCache::writeWriteBuffer()>
c0016e15:	83 c4 10             	add    esp,0x10
c0016e18:	83 fe 01             	cmp    esi,0x1
c0016e1b:	0f 85 80 00 00 00    	jne    c0016ea1 <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e21:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e24:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016e2b:	75 74                	jne    c0016ea1 <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e2d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e30:	89 d1                	mov    ecx,edx
c0016e32:	f7 d9                	neg    ecx
c0016e34:	89 cf                	mov    edi,ecx
c0016e36:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e3a:	c1 ff 1f             	sar    edi,0x1f
c0016e3d:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016e40:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016e44:	89 ce                	mov    esi,ecx
c0016e46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e4a:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016e4e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e52:	89 cf                	mov    edi,ecx
c0016e54:	74 0a                	je     c0016e60 <VCache::read(unsigned long long, int, void*)+0x88>
c0016e56:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e59:	75 05                	jne    c0016e60 <VCache::read(unsigned long long, int, void*)+0x88>
c0016e5b:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016e5e:	74 1c                	je     c0016e7c <VCache::read(unsigned long long, int, void*)+0xa4>
c0016e60:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e64:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016e67:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016e6a:	83 ec 0c             	sub    esp,0xc
c0016e6d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e6f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e72:	52                   	push   edx
c0016e73:	57                   	push   edi
c0016e74:	56                   	push   esi
c0016e75:	50                   	push   eax
c0016e76:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e79:	83 c4 20             	add    esp,0x20
c0016e7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e7f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016e85:	50                   	push   eax
c0016e86:	52                   	push   edx
c0016e87:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e8a:	48                   	dec    eax
c0016e8b:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016e8f:	0f af c2             	imul   eax,edx
c0016e92:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016e95:	50                   	push   eax
c0016e96:	55                   	push   ebp
c0016e97:	e8 a8 98 fe ff       	call   c0000744 <memcpy>
c0016e9c:	83 c4 10             	add    esp,0x10
c0016e9f:	eb 21                	jmp    c0016ec2 <VCache::read(unsigned long long, int, void*)+0xea>
c0016ea1:	83 ec 0c             	sub    esp,0xc
c0016ea4:	53                   	push   ebx
c0016ea5:	e8 70 fd ff ff       	call   c0016c1a <VCache::invalidateReadBuffer()>
c0016eaa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ead:	8b 10                	mov    edx,DWORD PTR [eax]
c0016eaf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016eb2:	56                   	push   esi
c0016eb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ebb:	50                   	push   eax
c0016ebc:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016ebf:	83 c4 20             	add    esp,0x20
c0016ec2:	83 ec 0c             	sub    esp,0xc
c0016ec5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ec8:	e8 91 74 00 00       	call   c001e35e <Semaphore::release()>
c0016ecd:	83 c4 2c             	add    esp,0x2c
c0016ed0:	31 c0                	xor    eax,eax
c0016ed2:	5b                   	pop    ebx
c0016ed3:	5e                   	pop    esi
c0016ed4:	5f                   	pop    edi
c0016ed5:	5d                   	pop    ebp
c0016ed6:	c3                   	ret    
c0016ed7:	90                   	nop

c0016ed8 <Video::putrect(int, int, int, int, unsigned int)>:
c0016ed8:	55                   	push   ebp
c0016ed9:	57                   	push   edi
c0016eda:	56                   	push   esi
c0016edb:	53                   	push   ebx
c0016edc:	83 ec 1c             	sub    esp,0x1c
c0016edf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ee3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ee7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016eeb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016eef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ef3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ef7:	01 df                	add    edi,ebx
c0016ef9:	39 fb                	cmp    ebx,edi
c0016efb:	7d 1f                	jge    c0016f1c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016efd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016f05:	7d 12                	jge    c0016f19 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016f07:	8b 16                	mov    edx,DWORD PTR [esi]
c0016f09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016f0d:	53                   	push   ebx
c0016f0e:	55                   	push   ebp
c0016f0f:	45                   	inc    ebp
c0016f10:	56                   	push   esi
c0016f11:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016f14:	83 c4 10             	add    esp,0x10
c0016f17:	eb e8                	jmp    c0016f01 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016f19:	43                   	inc    ebx
c0016f1a:	eb dd                	jmp    c0016ef9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016f1c:	83 c4 1c             	add    esp,0x1c
c0016f1f:	5b                   	pop    ebx
c0016f20:	5e                   	pop    esi
c0016f21:	5f                   	pop    edi
c0016f22:	5d                   	pop    ebp
c0016f23:	c3                   	ret    

c0016f24 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016f24:	55                   	push   ebp
c0016f25:	57                   	push   edi
c0016f26:	31 ff                	xor    edi,edi
c0016f28:	56                   	push   esi
c0016f29:	53                   	push   ebx
c0016f2a:	83 ec 1c             	sub    esp,0x1c
c0016f2d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016f31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f35:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f3c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f45:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f49:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f4d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f50:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f54:	01 f9                	add    ecx,edi
c0016f56:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f5a:	7d 2f                	jge    c0016f8b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f5c:	31 f6                	xor    esi,esi
c0016f5e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f62:	01 f2                	add    edx,esi
c0016f64:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f68:	7d 1a                	jge    c0016f84 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f6d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f70:	46                   	inc    esi
c0016f71:	51                   	push   ecx
c0016f72:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f76:	52                   	push   edx
c0016f77:	55                   	push   ebp
c0016f78:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f7b:	83 c4 10             	add    esp,0x10
c0016f7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f82:	eb da                	jmp    c0016f5e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f84:	47                   	inc    edi
c0016f85:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f89:	eb c5                	jmp    c0016f50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f8b:	83 c4 1c             	add    esp,0x1c
c0016f8e:	5b                   	pop    ebx
c0016f8f:	5e                   	pop    esi
c0016f90:	5f                   	pop    edi
c0016f91:	5d                   	pop    ebp
c0016f92:	c3                   	ret    
c0016f93:	90                   	nop

c0016f94 <Video::blit(unsigned int*, int, int, int, int)>:
c0016f94:	55                   	push   ebp
c0016f95:	57                   	push   edi
c0016f96:	56                   	push   esi
c0016f97:	53                   	push   ebx
c0016f98:	83 ec 1c             	sub    esp,0x1c
c0016f9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fa3:	85 c0                	test   eax,eax
c0016fa5:	79 02                	jns    c0016fa9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016fa7:	31 c0                	xor    eax,eax
c0016fa9:	c1 e0 02             	shl    eax,0x2
c0016fac:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fb8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016fbc:	39 d8                	cmp    eax,ebx
c0016fbe:	7e 49                	jle    c0017009 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fc0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fc6:	7c 41                	jl     c0017009 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fc8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016fcc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fd0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016fd4:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016fd8:	39 f9                	cmp    ecx,edi
c0016fda:	7e 22                	jle    c0016ffe <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016fdc:	83 c5 04             	add    ebp,0x4
c0016fdf:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fe5:	7c 14                	jl     c0016ffb <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016fe7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016fe9:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016fec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ff0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ff4:	56                   	push   esi
c0016ff5:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016ff8:	83 c4 10             	add    esp,0x10
c0016ffb:	47                   	inc    edi
c0016ffc:	eb d2                	jmp    c0016fd0 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017002:	43                   	inc    ebx
c0017003:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017007:	eb ab                	jmp    c0016fb4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017009:	83 c4 1c             	add    esp,0x1c
c001700c:	5b                   	pop    ebx
c001700d:	5e                   	pop    esi
c001700e:	5f                   	pop    edi
c001700f:	5d                   	pop    ebp
c0017010:	c3                   	ret    
c0017011:	90                   	nop

c0017012 <Video::clearScreen(unsigned int)>:
c0017012:	57                   	push   edi
c0017013:	56                   	push   esi
c0017014:	53                   	push   ebx
c0017015:	31 db                	xor    ebx,ebx
c0017017:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001701b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017021:	7e 1f                	jle    c0017042 <Video::clearScreen(unsigned int)+0x30>
c0017023:	31 ff                	xor    edi,edi
c0017025:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001702b:	7e 12                	jle    c001703f <Video::clearScreen(unsigned int)+0x2d>
c001702d:	8b 06                	mov    eax,DWORD PTR [esi]
c001702f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017033:	53                   	push   ebx
c0017034:	57                   	push   edi
c0017035:	47                   	inc    edi
c0017036:	56                   	push   esi
c0017037:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001703a:	83 c4 10             	add    esp,0x10
c001703d:	eb e6                	jmp    c0017025 <Video::clearScreen(unsigned int)+0x13>
c001703f:	43                   	inc    ebx
c0017040:	eb d9                	jmp    c001701b <Video::clearScreen(unsigned int)+0x9>
c0017042:	5b                   	pop    ebx
c0017043:	5e                   	pop    esi
c0017044:	5f                   	pop    edi
c0017045:	c3                   	ret    

c0017046 <Video::putpixel(int, int, unsigned int)>:
c0017046:	c7 44 24 04 dc ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002acdc
c001704e:	e9 4c 31 00 00       	jmp    c001a19f <Krnl::panic(char const*)>
c0017053:	90                   	nop

c0017054 <Video::Video(char const*)>:
c0017054:	83 ec 0c             	sub    esp,0xc
c0017057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001705b:	83 ec 08             	sub    esp,0x8
c001705e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017062:	50                   	push   eax
c0017063:	e8 be d0 ff ff       	call   c0014126 <Device::Device(char const*)>
c0017068:	83 c4 10             	add    esp,0x10
c001706b:	ba 60 ad 02 c0       	mov    edx,0xc002ad60
c0017070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017074:	89 10                	mov    DWORD PTR [eax],edx
c0017076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001707a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017084:	90                   	nop
c0017085:	83 c4 0c             	add    esp,0xc
c0017088:	c3                   	ret    
c0017089:	90                   	nop

c001708a <Video::~Video()>:
c001708a:	83 ec 0c             	sub    esp,0xc
c001708d:	ba 60 ad 02 c0       	mov    edx,0xc002ad60
c0017092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017096:	89 10                	mov    DWORD PTR [eax],edx
c0017098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001709c:	83 ec 0c             	sub    esp,0xc
c001709f:	50                   	push   eax
c00170a0:	e8 63 cd ff ff       	call   c0013e08 <Device::~Device()>
c00170a5:	83 c4 10             	add    esp,0x10
c00170a8:	90                   	nop
c00170a9:	83 c4 0c             	add    esp,0xc
c00170ac:	c3                   	ret    
c00170ad:	90                   	nop

c00170ae <Video::~Video()>:
c00170ae:	83 ec 0c             	sub    esp,0xc
c00170b1:	83 ec 0c             	sub    esp,0xc
c00170b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170b8:	e8 cd ff ff ff       	call   c001708a <Video::~Video()>
c00170bd:	83 c4 10             	add    esp,0x10
c00170c0:	83 ec 08             	sub    esp,0x8
c00170c3:	68 64 01 00 00       	push   0x164
c00170c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170cc:	e8 5e b9 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00170d1:	83 c4 10             	add    esp,0x10
c00170d4:	83 c4 0c             	add    esp,0xc
c00170d7:	c3                   	ret    

c00170d8 <Video::isMonochrome()>:
c00170d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170dc:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00170e2:	c3                   	ret    
c00170e3:	90                   	nop

c00170e4 <Video::getWidth()>:
c00170e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00170ee:	c3                   	ret    
c00170ef:	90                   	nop

c00170f0 <Video::getHeight()>:
c00170f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170f4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170fa:	c3                   	ret    
c00170fb:	90                   	nop

c00170fc <Video::drawCursor(int, int, unsigned char*, int)>:
c00170fc:	55                   	push   ebp
c00170fd:	57                   	push   edi
c00170fe:	56                   	push   esi
c00170ff:	53                   	push   ebx
c0017100:	83 ec 2c             	sub    esp,0x2c
c0017103:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017107:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001710b:	83 f8 01             	cmp    eax,0x1
c001710e:	19 c9                	sbb    ecx,ecx
c0017110:	31 db                	xor    ebx,ebx
c0017112:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017116:	89 cd                	mov    ebp,ecx
c0017118:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017120:	f7 d5                	not    ebp
c0017122:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017128:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001712c:	01 d8                	add    eax,ebx
c001712e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017132:	56                   	push   esi
c0017133:	e8 b8 ff ff ff       	call   c00170f0 <Video::getHeight()>
c0017138:	59                   	pop    ecx
c0017139:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001713d:	7e 70                	jle    c00171af <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001713f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017143:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017147:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001714a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001714e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017152:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017159:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001715d:	89 f8                	mov    eax,edi
c001715f:	83 c0 20             	add    eax,0x20
c0017162:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017166:	56                   	push   esi
c0017167:	e8 78 ff ff ff       	call   c00170e4 <Video::getWidth()>
c001716c:	5a                   	pop    edx
c001716d:	39 c7                	cmp    edi,eax
c001716f:	7d 34                	jge    c00171a5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017171:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017176:	74 05                	je     c001717d <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017178:	8b 06                	mov    eax,DWORD PTR [esi]
c001717a:	55                   	push   ebp
c001717b:	eb 0d                	jmp    c001718a <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001717d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017182:	74 12                	je     c0017196 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017184:	8b 06                	mov    eax,DWORD PTR [esi]
c0017186:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001718a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001718e:	57                   	push   edi
c001718f:	56                   	push   esi
c0017190:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017193:	83 c4 10             	add    esp,0x10
c0017196:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001719a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001719e:	47                   	inc    edi
c001719f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00171a3:	75 c1                	jne    c0017166 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00171a5:	43                   	inc    ebx
c00171a6:	83 fb 20             	cmp    ebx,0x20
c00171a9:	0f 85 79 ff ff ff    	jne    c0017128 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00171af:	83 c4 2c             	add    esp,0x2c
c00171b2:	5b                   	pop    ebx
c00171b3:	5e                   	pop    esi
c00171b4:	5f                   	pop    edi
c00171b5:	5d                   	pop    ebp
c00171b6:	c3                   	ret    
c00171b7:	90                   	nop

c00171b8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00171b8:	55                   	push   ebp
c00171b9:	57                   	push   edi
c00171ba:	56                   	push   esi
c00171bb:	53                   	push   ebx
c00171bc:	83 ec 28             	sub    esp,0x28
c00171bf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171c3:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00171c7:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00171cb:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00171cf:	c1 e7 08             	shl    edi,0x8
c00171d2:	01 c7                	add    edi,eax
c00171d4:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00171d8:	c1 e0 08             	shl    eax,0x8
c00171db:	01 d0                	add    eax,edx
c00171dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171e5:	0f af c7             	imul   eax,edi
c00171e8:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00171ef:	50                   	push   eax
c00171f0:	e8 4b 86 ff ff       	call   c000f840 <malloc>
c00171f5:	83 c4 10             	add    esp,0x10
c00171f8:	89 c5                	mov    ebp,eax
c00171fa:	85 c0                	test   eax,eax
c00171fc:	75 15                	jne    c0017213 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00171fe:	83 ec 0c             	sub    esp,0xc
c0017201:	68 fd ac 02 c0       	push   0xc002acfd
c0017206:	e8 04 b9 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001720b:	83 c4 10             	add    esp,0x10
c001720e:	e9 1c 01 00 00       	jmp    c001732f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017213:	be 12 00 00 00       	mov    esi,0x12
c0017218:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001721c:	74 11                	je     c001722f <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001721e:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017222:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017226:	c1 fe 03             	sar    esi,0x3
c0017229:	0f af f0             	imul   esi,eax
c001722c:	83 c6 12             	add    esi,0x12
c001722f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017233:	74 04                	je     c0017239 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017235:	85 ff                	test   edi,edi
c0017237:	75 12                	jne    c001724b <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017239:	83 ec 0c             	sub    esp,0xc
c001723c:	68 14 ad 02 c0       	push   0xc002ad14
c0017241:	e8 c9 b8 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0017246:	e9 ce 00 00 00       	jmp    c0017319 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001724b:	52                   	push   edx
c001724c:	52                   	push   edx
c001724d:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017251:	50                   	push   eax
c0017252:	68 29 ad 02 c0       	push   0xc002ad29
c0017257:	e8 b3 b8 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001725c:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017260:	83 c4 10             	add    esp,0x10
c0017263:	80 fa 02             	cmp    dl,0x2
c0017266:	0f 85 98 00 00 00    	jne    c0017304 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001726c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017271:	75 10                	jne    c0017283 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017273:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017277:	75 0a                	jne    c0017283 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017279:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001727c:	83 e8 18             	sub    eax,0x18
c001727f:	a8 f7                	test   al,0xf7
c0017281:	74 0a                	je     c001728d <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017283:	83 ec 0c             	sub    esp,0xc
c0017286:	68 36 ad 02 c0       	push   0xc002ad36
c001728b:	eb 7f                	jmp    c001730c <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001728d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017295:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001729d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00172a1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00172a9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00172ad:	75 0c                	jne    c00172bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00172af:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00172b4:	c1 e0 18             	shl    eax,0x18
c00172b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172bb:	41                   	inc    ecx
c00172bc:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00172c1:	c1 e2 10             	shl    edx,0x10
c00172c4:	89 d0                	mov    eax,edx
c00172c6:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00172cb:	c1 e2 08             	shl    edx,0x8
c00172ce:	09 c2                	or     edx,eax
c00172d0:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00172d4:	09 c2                	or     edx,eax
c00172d6:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00172da:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00172de:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00172e2:	c1 f8 03             	sar    eax,0x3
c00172e5:	01 c6                	add    esi,eax
c00172e7:	89 c8                	mov    eax,ecx
c00172e9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00172ed:	39 c7                	cmp    edi,eax
c00172ef:	7f b0                	jg     c00172a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00172f1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172f9:	39 14 24             	cmp    DWORD PTR [esp],edx
c00172fc:	7e 22                	jle    c0017320 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00172fe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017302:	eb 99                	jmp    c001729d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017304:	50                   	push   eax
c0017305:	50                   	push   eax
c0017306:	52                   	push   edx
c0017307:	68 44 ad 02 c0       	push   0xc002ad44
c001730c:	e8 fe b7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0017311:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017314:	e8 37 85 ff ff       	call   c000f850 <free>
c0017319:	83 c4 10             	add    esp,0x10
c001731c:	31 ed                	xor    ebp,ebp
c001731e:	eb 0f                	jmp    c001732f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017320:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017324:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017327:	89 38                	mov    DWORD PTR [eax],edi
c0017329:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001732d:	89 08                	mov    DWORD PTR [eax],ecx
c001732f:	83 c4 1c             	add    esp,0x1c
c0017332:	89 e8                	mov    eax,ebp
c0017334:	5b                   	pop    ebx
c0017335:	5e                   	pop    esi
c0017336:	5f                   	pop    edi
c0017337:	5d                   	pop    ebp
c0017338:	c3                   	ret    
c0017339:	90                   	nop

c001733a <Video::putTGA(int, int, unsigned char*, int)>:
c001733a:	55                   	push   ebp
c001733b:	57                   	push   edi
c001733c:	56                   	push   esi
c001733d:	53                   	push   ebx
c001733e:	83 ec 28             	sub    esp,0x28
c0017341:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017345:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017349:	50                   	push   eax
c001734a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001734e:	50                   	push   eax
c001734f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017353:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017357:	56                   	push   esi
c0017358:	e8 5b fe ff ff       	call   c00171b8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001735d:	83 c4 20             	add    esp,0x20
c0017360:	85 c0                	test   eax,eax
c0017362:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017366:	74 35                	je     c001739d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017368:	89 c7                	mov    edi,eax
c001736a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001736e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017372:	39 d8                	cmp    eax,ebx
c0017374:	7e 27                	jle    c001739d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017376:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001737a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001737e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017382:	39 e8                	cmp    eax,ebp
c0017384:	7e 14                	jle    c001739a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017386:	8b 06                	mov    eax,DWORD PTR [esi]
c0017388:	83 c7 04             	add    edi,0x4
c001738b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001738e:	53                   	push   ebx
c001738f:	55                   	push   ebp
c0017390:	45                   	inc    ebp
c0017391:	56                   	push   esi
c0017392:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017395:	83 c4 10             	add    esp,0x10
c0017398:	eb e0                	jmp    c001737a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001739a:	43                   	inc    ebx
c001739b:	eb cd                	jmp    c001736a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001739d:	83 c4 1c             	add    esp,0x1c
c00173a0:	5b                   	pop    ebx
c00173a1:	5e                   	pop    esi
c00173a2:	5f                   	pop    edi
c00173a3:	5d                   	pop    ebp
c00173a4:	c3                   	ret    
c00173a5:	90                   	nop

c00173a6 <ACPI::close(int, int, void*)>:
c00173a6:	83 ec 1c             	sub    esp,0x1c
c00173a9:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00173b1:	74 0a                	je     c00173bd <ACPI::close(int, int, void*)+0x17>
c00173b3:	b8 00 00 00 00       	mov    eax,0x0
c00173b8:	e9 9a 00 00 00       	jmp    c0017457 <ACPI::close(int, int, void*)+0xb1>
c00173bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00173c2:	75 37                	jne    c00173fb <ACPI::close(int, int, void*)+0x55>
c00173c4:	83 ec 0c             	sub    esp,0xc
c00173c7:	68 a0 ad 02 c0       	push   0xc002ada0
c00173cc:	e8 3e b7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00173d1:	83 c4 10             	add    esp,0x10
c00173d4:	a1 c8 03 03 c0       	mov    eax,ds:0xc00303c8
c00173d9:	85 c0                	test   eax,eax
c00173db:	74 07                	je     c00173e4 <ACPI::close(int, int, void*)+0x3e>
c00173dd:	a1 c8 03 03 c0       	mov    eax,ds:0xc00303c8
c00173e2:	ff d0                	call   eax
c00173e4:	83 ec 0c             	sub    esp,0xc
c00173e7:	68 c4 ae 02 c0       	push   0xc002aec4
c00173ec:	e8 ae 2d 00 00       	call   c001a19f <Krnl::panic(char const*)>
c00173f1:	83 c4 10             	add    esp,0x10
c00173f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173f9:	eb 5c                	jmp    c0017457 <ACPI::close(int, int, void*)+0xb1>
c00173fb:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017400:	75 50                	jne    c0017452 <ACPI::close(int, int, void*)+0xac>
c0017402:	a1 c4 03 03 c0       	mov    eax,ds:0xc00303c4
c0017407:	85 c0                	test   eax,eax
c0017409:	74 07                	je     c0017412 <ACPI::close(int, int, void*)+0x6c>
c001740b:	a1 c4 03 03 c0       	mov    eax,ds:0xc00303c4
c0017410:	ff d0                	call   eax
c0017412:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017417:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001741c:	83 e0 02             	and    eax,0x2
c001741f:	74 1c                	je     c001743d <ACPI::close(int, int, void*)+0x97>
c0017421:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001742c:	89 c2                	mov    edx,eax
c001742e:	ec                   	in     al,dx
c001742f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017433:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017437:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001743b:	eb da                	jmp    c0017417 <ACPI::close(int, int, void*)+0x71>
c001743d:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017444:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017449:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001744d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017451:	ee                   	out    dx,al
c0017452:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017457:	83 c4 1c             	add    esp,0x1c
c001745a:	c3                   	ret    

c001745b <findRSDP()>:
c001745b:	83 ec 1c             	sub    esp,0x1c
c001745e:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0017463:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017469:	83 e0 04             	and    eax,0x4
c001746c:	84 c0                	test   al,al
c001746e:	75 07                	jne    c0017477 <findRSDP()+0x1c>
c0017470:	b8 00 00 00 00       	mov    eax,0x0
c0017475:	eb 6a                	jmp    c00174e1 <findRSDP()+0x86>
c0017477:	a1 50 dd 02 c0       	mov    eax,ds:0xc002dd50
c001747c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017481:	7f 1b                	jg     c001749e <findRSDP()+0x43>
c0017483:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0017488:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001748e:	83 e2 fb             	and    edx,0xfffffffb
c0017491:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017497:	b8 00 00 00 00       	mov    eax,0x0
c001749c:	eb 43                	jmp    c00174e1 <findRSDP()+0x86>
c001749e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00174a6:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00174ae:	77 2c                	ja     c00174dc <findRSDP()+0x81>
c00174b0:	83 ec 04             	sub    esp,0x4
c00174b3:	6a 08                	push   0x8
c00174b5:	68 ad ad 02 c0       	push   0xc002adad
c00174ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174be:	e8 7d 91 fe ff       	call   c0000640 <memcmp>
c00174c3:	83 c4 10             	add    esp,0x10
c00174c6:	85 c0                	test   eax,eax
c00174c8:	0f 94 c0             	sete   al
c00174cb:	84 c0                	test   al,al
c00174cd:	74 06                	je     c00174d5 <findRSDP()+0x7a>
c00174cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174d3:	eb 0c                	jmp    c00174e1 <findRSDP()+0x86>
c00174d5:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00174da:	eb ca                	jmp    c00174a6 <findRSDP()+0x4b>
c00174dc:	b8 00 00 00 00       	mov    eax,0x0
c00174e1:	83 c4 1c             	add    esp,0x1c
c00174e4:	c3                   	ret    

c00174e5 <loadACPITables(unsigned char*)>:
c00174e5:	56                   	push   esi
c00174e6:	53                   	push   ebx
c00174e7:	83 ec 44             	sub    esp,0x44
c00174ea:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00174ef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174f5:	83 e0 04             	and    eax,0x4
c00174f8:	84 c0                	test   al,al
c00174fa:	0f 84 05 02 00 00    	je     c0017705 <loadACPITables(unsigned char*)+0x220>
c0017500:	a0 e0 05 03 c0       	mov    al,ds:0xc00305e0
c0017505:	84 c0                	test   al,al
c0017507:	74 75                	je     c001757e <loadACPITables(unsigned char*)+0x99>
c0017509:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001750d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017515:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017518:	83 e8 24             	sub    eax,0x24
c001751b:	c1 e8 03             	shr    eax,0x3
c001751e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017522:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001752a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001752e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017532:	0f 8d b2 00 00 00    	jge    c00175ea <loadACPITables(unsigned char*)+0x105>
c0017538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001753c:	83 c0 24             	add    eax,0x24
c001753f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017543:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017547:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001754b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001754f:	c1 e0 03             	shl    eax,0x3
c0017552:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017556:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001755a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001755d:	8b 00                	mov    eax,DWORD PTR [eax]
c001755f:	89 c1                	mov    ecx,eax
c0017561:	a1 cc 03 03 c0       	mov    eax,ds:0xc00303cc
c0017566:	8d 50 01             	lea    edx,[eax+0x1]
c0017569:	89 15 cc 03 03 c0    	mov    DWORD PTR ds:0xc00303cc,edx
c001756f:	89 ca                	mov    edx,ecx
c0017571:	89 14 c5 e4 03 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfc1c],edx
c0017578:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001757c:	eb ac                	jmp    c001752a <loadACPITables(unsigned char*)+0x45>
c001757e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001758a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001758d:	83 e8 24             	sub    eax,0x24
c0017590:	c1 e8 02             	shr    eax,0x2
c0017593:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017597:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001759f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175a3:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00175a7:	7d 41                	jge    c00175ea <loadACPITables(unsigned char*)+0x105>
c00175a9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175ad:	83 c0 24             	add    eax,0x24
c00175b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00175b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175c0:	c1 e0 02             	shl    eax,0x2
c00175c3:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00175c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00175cd:	a1 cc 03 03 c0       	mov    eax,ds:0xc00303cc
c00175d2:	8d 50 01             	lea    edx,[eax+0x1]
c00175d5:	89 15 cc 03 03 c0    	mov    DWORD PTR ds:0xc00303cc,edx
c00175db:	89 ca                	mov    edx,ecx
c00175dd:	89 14 c5 e4 03 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfc1c],edx
c00175e4:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00175e8:	eb b5                	jmp    c001759f <loadACPITables(unsigned char*)+0xba>
c00175ea:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00175f2:	a1 cc 03 03 c0       	mov    eax,ds:0xc00303cc
c00175f7:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00175fb:	0f 8d 05 01 00 00    	jge    c0017706 <loadACPITables(unsigned char*)+0x221>
c0017601:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017605:	8b 04 c5 e4 03 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfc1c]
c001760c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017614:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761c:	25 ff 0f 00 00       	and    eax,0xfff
c0017621:	89 c6                	mov    esi,eax
c0017623:	e8 87 a6 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c0017628:	89 c3                	mov    ebx,eax
c001762a:	83 ec 0c             	sub    esp,0xc
c001762d:	6a 01                	push   0x1
c001762f:	e8 eb a4 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0017634:	83 c4 10             	add    esp,0x10
c0017637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001763b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017641:	83 ec 0c             	sub    esp,0xc
c0017644:	6a 01                	push   0x1
c0017646:	6a 01                	push   0x1
c0017648:	50                   	push   eax
c0017649:	52                   	push   edx
c001764a:	53                   	push   ebx
c001764b:	e8 8e ae ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017650:	83 c4 20             	add    esp,0x20
c0017653:	09 f0                	or     eax,esi
c0017655:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017659:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001765d:	c1 e0 03             	shl    eax,0x3
c0017660:	05 e0 03 03 c0       	add    eax,0xc00303e0
c0017665:	83 ec 04             	sub    esp,0x4
c0017668:	6a 04                	push   0x4
c001766a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001766e:	50                   	push   eax
c001766f:	e8 d0 90 fe ff       	call   c0000744 <memcpy>
c0017674:	83 c4 10             	add    esp,0x10
c0017677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001767b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001767e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017686:	05 00 10 00 00       	add    eax,0x1000
c001768b:	c1 e8 0c             	shr    eax,0xc
c001768e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017696:	89 04 24             	mov    DWORD PTR [esp],eax
c0017699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769d:	25 ff 0f 00 00       	and    eax,0xfff
c00176a2:	89 c6                	mov    esi,eax
c00176a4:	e8 06 a6 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c00176a9:	89 c3                	mov    ebx,eax
c00176ab:	83 ec 0c             	sub    esp,0xc
c00176ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176b2:	e8 68 a4 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00176b7:	83 c4 10             	add    esp,0x10
c00176ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176be:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176c4:	83 ec 0c             	sub    esp,0xc
c00176c7:	6a 01                	push   0x1
c00176c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176cd:	50                   	push   eax
c00176ce:	52                   	push   edx
c00176cf:	53                   	push   ebx
c00176d0:	e8 09 ae ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176d5:	83 c4 20             	add    esp,0x20
c00176d8:	09 f0                	or     eax,esi
c00176da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176de:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00176e1:	83 ec 0c             	sub    esp,0xc
c00176e4:	50                   	push   eax
c00176e5:	e8 99 a7 ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c00176ea:	83 c4 10             	add    esp,0x10
c00176ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176f5:	89 14 c5 e4 03 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfc1c],edx
c00176fc:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017700:	e9 ed fe ff ff       	jmp    c00175f2 <loadACPITables(unsigned char*)+0x10d>
c0017705:	90                   	nop
c0017706:	83 c4 44             	add    esp,0x44
c0017709:	5b                   	pop    ebx
c001770a:	5e                   	pop    esi
c001770b:	c3                   	ret    

c001770c <findRSDT(unsigned char*)>:
c001770c:	56                   	push   esi
c001770d:	53                   	push   ebx
c001770e:	83 ec 44             	sub    esp,0x44
c0017711:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0017716:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001771c:	83 e0 04             	and    eax,0x4
c001771f:	84 c0                	test   al,al
c0017721:	75 0a                	jne    c001772d <findRSDT(unsigned char*)+0x21>
c0017723:	b8 00 00 00 00       	mov    eax,0x0
c0017728:	e9 f7 00 00 00       	jmp    c0017824 <findRSDT(unsigned char*)+0x118>
c001772d:	83 ec 04             	sub    esp,0x4
c0017730:	6a 24                	push   0x24
c0017732:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017736:	8d 44 24 18          	lea    eax,[esp+0x18]
c001773a:	50                   	push   eax
c001773b:	e8 04 90 fe ff       	call   c0000744 <memcpy>
c0017740:	83 c4 10             	add    esp,0x10
c0017743:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017747:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001774b:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017753:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017757:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001775b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001775f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017763:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017767:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001776b:	25 ff 0f 00 00       	and    eax,0xfff
c0017770:	89 c6                	mov    esi,eax
c0017772:	e8 38 a5 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c0017777:	89 c3                	mov    ebx,eax
c0017779:	83 ec 0c             	sub    esp,0xc
c001777c:	6a 02                	push   0x2
c001777e:	e8 9c a3 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0017783:	83 c4 10             	add    esp,0x10
c0017786:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001778a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017790:	83 ec 0c             	sub    esp,0xc
c0017793:	6a 01                	push   0x1
c0017795:	6a 02                	push   0x2
c0017797:	50                   	push   eax
c0017798:	52                   	push   edx
c0017799:	53                   	push   ebx
c001779a:	e8 3f ad ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001779f:	83 c4 20             	add    esp,0x20
c00177a2:	09 f0                	or     eax,esi
c00177a4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177ac:	25 ff 0f 00 00       	and    eax,0xfff
c00177b1:	89 c6                	mov    esi,eax
c00177b3:	e8 f7 a4 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c00177b8:	89 c3                	mov    ebx,eax
c00177ba:	83 ec 0c             	sub    esp,0xc
c00177bd:	6a 02                	push   0x2
c00177bf:	e8 5b a3 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00177c4:	83 c4 10             	add    esp,0x10
c00177c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177cb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177d1:	83 ec 0c             	sub    esp,0xc
c00177d4:	6a 01                	push   0x1
c00177d6:	6a 02                	push   0x2
c00177d8:	50                   	push   eax
c00177d9:	52                   	push   edx
c00177da:	53                   	push   ebx
c00177db:	e8 fe ac ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177e0:	83 c4 20             	add    esp,0x20
c00177e3:	09 f0                	or     eax,esi
c00177e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177e9:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00177ee:	75 11                	jne    c0017801 <findRSDT(unsigned char*)+0xf5>
c00177f0:	c6 05 e0 05 03 c0 00 	mov    BYTE PTR ds:0xc00305e0,0x0
c00177f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177fb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00177ff:	eb 1f                	jmp    c0017820 <findRSDT(unsigned char*)+0x114>
c0017801:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017806:	75 11                	jne    c0017819 <findRSDT(unsigned char*)+0x10d>
c0017808:	c6 05 e0 05 03 c0 01 	mov    BYTE PTR ds:0xc00305e0,0x1
c001780f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017813:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017817:	eb 07                	jmp    c0017820 <findRSDT(unsigned char*)+0x114>
c0017819:	b8 00 00 00 00       	mov    eax,0x0
c001781e:	eb 04                	jmp    c0017824 <findRSDT(unsigned char*)+0x118>
c0017820:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017824:	83 c4 44             	add    esp,0x44
c0017827:	5b                   	pop    ebx
c0017828:	5e                   	pop    esi
c0017829:	c3                   	ret    

c001782a <findDataTable(unsigned char*, char*)>:
c001782a:	83 ec 1c             	sub    esp,0x1c
c001782d:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0017832:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017838:	83 e0 04             	and    eax,0x4
c001783b:	84 c0                	test   al,al
c001783d:	75 07                	jne    c0017846 <findDataTable(unsigned char*, char*)+0x1c>
c001783f:	b8 00 00 00 00       	mov    eax,0x0
c0017844:	eb 7c                	jmp    c00178c2 <findDataTable(unsigned char*, char*)+0x98>
c0017846:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001784e:	a1 cc 03 03 c0       	mov    eax,ds:0xc00303cc
c0017853:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017857:	7d 3a                	jge    c0017893 <findDataTable(unsigned char*, char*)+0x69>
c0017859:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001785d:	c1 e0 03             	shl    eax,0x3
c0017860:	05 e0 03 03 c0       	add    eax,0xc00303e0
c0017865:	83 ec 04             	sub    esp,0x4
c0017868:	6a 04                	push   0x4
c001786a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001786e:	50                   	push   eax
c001786f:	e8 cc 8d fe ff       	call   c0000640 <memcmp>
c0017874:	83 c4 10             	add    esp,0x10
c0017877:	85 c0                	test   eax,eax
c0017879:	0f 94 c0             	sete   al
c001787c:	84 c0                	test   al,al
c001787e:	74 0d                	je     c001788d <findDataTable(unsigned char*, char*)+0x63>
c0017880:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017884:	8b 04 c5 e4 03 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfc1c]
c001788b:	eb 35                	jmp    c00178c2 <findDataTable(unsigned char*, char*)+0x98>
c001788d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017891:	eb bb                	jmp    c001784e <findDataTable(unsigned char*, char*)+0x24>
c0017893:	a0 e0 05 03 c0       	mov    al,ds:0xc00305e0
c0017898:	84 c0                	test   al,al
c001789a:	74 07                	je     c00178a3 <findDataTable(unsigned char*, char*)+0x79>
c001789c:	b8 58 00 00 00       	mov    eax,0x58
c00178a1:	eb 05                	jmp    c00178a8 <findDataTable(unsigned char*, char*)+0x7e>
c00178a3:	b8 52 00 00 00       	mov    eax,0x52
c00178a8:	83 ec 04             	sub    esp,0x4
c00178ab:	50                   	push   eax
c00178ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178b0:	68 e8 ae 02 c0       	push   0xc002aee8
c00178b5:	e8 55 b2 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00178ba:	83 c4 10             	add    esp,0x10
c00178bd:	b8 00 00 00 00       	mov    eax,0x0
c00178c2:	83 c4 1c             	add    esp,0x1c
c00178c5:	c3                   	ret    

c00178c6 <scanMADT()>:
c00178c6:	53                   	push   ebx
c00178c7:	83 ec 38             	sub    esp,0x38
c00178ca:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00178cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178d5:	83 e0 04             	and    eax,0x4
c00178d8:	84 c0                	test   al,al
c00178da:	0f 84 63 04 00 00    	je     c0017d43 <scanMADT()+0x47d>
c00178e0:	e8 76 fb ff ff       	call   c001745b <findRSDP()>
c00178e5:	a3 ec 05 03 c0       	mov    ds:0xc00305ec,eax
c00178ea:	a1 ec 05 03 c0       	mov    eax,ds:0xc00305ec
c00178ef:	85 c0                	test   eax,eax
c00178f1:	75 19                	jne    c001790c <scanMADT()+0x46>
c00178f3:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00178f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178fe:	83 e2 fb             	and    edx,0xfffffffb
c0017901:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017907:	e9 3b 04 00 00       	jmp    c0017d47 <scanMADT()+0x481>
c001790c:	a1 ec 05 03 c0       	mov    eax,ds:0xc00305ec
c0017911:	83 ec 0c             	sub    esp,0xc
c0017914:	50                   	push   eax
c0017915:	e8 f2 fd ff ff       	call   c001770c <findRSDT(unsigned char*)>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	a3 e8 05 03 c0       	mov    ds:0xc00305e8,eax
c0017922:	a1 e8 05 03 c0       	mov    eax,ds:0xc00305e8
c0017927:	85 c0                	test   eax,eax
c0017929:	75 19                	jne    c0017944 <scanMADT()+0x7e>
c001792b:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0017930:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017936:	83 e2 fb             	and    edx,0xfffffffb
c0017939:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001793f:	e9 03 04 00 00       	jmp    c0017d47 <scanMADT()+0x481>
c0017944:	a1 e8 05 03 c0       	mov    eax,ds:0xc00305e8
c0017949:	83 ec 0c             	sub    esp,0xc
c001794c:	50                   	push   eax
c001794d:	e8 93 fb ff ff       	call   c00174e5 <loadACPITables(unsigned char*)>
c0017952:	83 c4 10             	add    esp,0x10
c0017955:	a1 e8 05 03 c0       	mov    eax,ds:0xc00305e8
c001795a:	83 ec 08             	sub    esp,0x8
c001795d:	68 b6 ad 02 c0       	push   0xc002adb6
c0017962:	50                   	push   eax
c0017963:	e8 c2 fe ff ff       	call   c001782a <findDataTable(unsigned char*, char*)>
c0017968:	83 c4 10             	add    esp,0x10
c001796b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001796f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017974:	75 19                	jne    c001798f <scanMADT()+0xc9>
c0017976:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001797b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017981:	83 e2 fe             	and    edx,0xfffffffe
c0017984:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001798a:	e9 b8 03 00 00       	jmp    c0017d47 <scanMADT()+0x481>
c001798f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017997:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001799b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001799e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179a2:	0f 87 9f 03 00 00    	ja     c0017d47 <scanMADT()+0x481>
c00179a8:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179b0:	0f 87 91 03 00 00    	ja     c0017d47 <scanMADT()+0x481>
c00179b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c2:	8d 50 01             	lea    edx,[eax+0x1]
c00179c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179d1:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00179d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179d9:	8d 50 01             	lea    edx,[eax+0x1]
c00179dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179e4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179e8:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00179ec:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00179f1:	0f 86 4f 03 00 00    	jbe    c0017d46 <scanMADT()+0x480>
c00179f7:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00179fc:	75 57                	jne    c0017a55 <scanMADT()+0x18f>
c00179fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a02:	8d 50 01             	lea    edx,[eax+0x1]
c0017a05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a09:	8a 15 e0 07 03 c0    	mov    dl,BYTE PTR ds:0xc00307e0
c0017a0f:	0f b6 d2             	movzx  edx,dl
c0017a12:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a16:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a1a:	88 82 20 08 03 c0    	mov    BYTE PTR [edx-0x3ffcf7e0],al
c0017a20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a24:	8d 50 01             	lea    edx,[eax+0x1]
c0017a27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a2b:	8a 15 e0 07 03 c0    	mov    dl,BYTE PTR ds:0xc00307e0
c0017a31:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a34:	88 0d e0 07 03 c0    	mov    BYTE PTR ds:0xc00307e0,cl
c0017a3a:	0f b6 d2             	movzx  edx,dl
c0017a3d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a41:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a45:	88 82 00 08 03 c0    	mov    BYTE PTR [edx-0x3ffcf800],al
c0017a4b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a50:	e9 da 02 00 00       	jmp    c0017d2f <scanMADT()+0x469>
c0017a55:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a5a:	0f 85 14 01 00 00    	jne    c0017b74 <scanMADT()+0x2ae>
c0017a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a64:	8d 50 01             	lea    edx,[eax+0x1]
c0017a67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a6b:	8a 15 a0 06 03 c0    	mov    dl,BYTE PTR ds:0xc00306a0
c0017a71:	0f b6 d2             	movzx  edx,dl
c0017a74:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a78:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a7c:	88 82 c0 06 03 c0    	mov    BYTE PTR [edx-0x3ffcf940],al
c0017a82:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017a86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a8e:	01 d0                	add    eax,edx
c0017a90:	83 c0 2c             	add    eax,0x2c
c0017a93:	8a 00                	mov    al,BYTE PTR [eax]
c0017a95:	0f b6 d0             	movzx  edx,al
c0017a98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a9c:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aa3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017aa7:	0f b6 c0             	movzx  eax,al
c0017aaa:	c1 e0 08             	shl    eax,0x8
c0017aad:	89 d1                	mov    ecx,edx
c0017aaf:	09 c1                	or     ecx,eax
c0017ab1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ab5:	8d 50 02             	lea    edx,[eax+0x2]
c0017ab8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017abc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ac0:	0f b6 c0             	movzx  eax,al
c0017ac3:	c1 e0 10             	shl    eax,0x10
c0017ac6:	09 c1                	or     ecx,eax
c0017ac8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017acc:	8d 50 03             	lea    edx,[eax+0x3]
c0017acf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ad7:	0f b6 c0             	movzx  eax,al
c0017ada:	c1 e0 18             	shl    eax,0x18
c0017add:	09 c1                	or     ecx,eax
c0017adf:	89 ca                	mov    edx,ecx
c0017ae1:	a0 a0 06 03 c0       	mov    al,ds:0xc00306a0
c0017ae6:	0f b6 c0             	movzx  eax,al
c0017ae9:	89 14 85 e0 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf920],edx
c0017af0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017af5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017af9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017afd:	01 d0                	add    eax,edx
c0017aff:	83 c0 2c             	add    eax,0x2c
c0017b02:	8a 00                	mov    al,BYTE PTR [eax]
c0017b04:	0f b6 d0             	movzx  edx,al
c0017b07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b0b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b12:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b16:	0f b6 c0             	movzx  eax,al
c0017b19:	c1 e0 08             	shl    eax,0x8
c0017b1c:	89 d1                	mov    ecx,edx
c0017b1e:	09 c1                	or     ecx,eax
c0017b20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b24:	8d 50 02             	lea    edx,[eax+0x2]
c0017b27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b2b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b2f:	0f b6 c0             	movzx  eax,al
c0017b32:	c1 e0 10             	shl    eax,0x10
c0017b35:	09 c1                	or     ecx,eax
c0017b37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b3b:	8d 50 03             	lea    edx,[eax+0x3]
c0017b3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b42:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b46:	0f b6 c0             	movzx  eax,al
c0017b49:	c1 e0 18             	shl    eax,0x18
c0017b4c:	09 c1                	or     ecx,eax
c0017b4e:	89 ca                	mov    edx,ecx
c0017b50:	a0 a0 06 03 c0       	mov    al,ds:0xc00306a0
c0017b55:	0f b6 c0             	movzx  eax,al
c0017b58:	89 14 85 60 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf8a0],edx
c0017b5f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b64:	a0 a0 06 03 c0       	mov    al,ds:0xc00306a0
c0017b69:	40                   	inc    eax
c0017b6a:	a2 a0 06 03 c0       	mov    ds:0xc00306a0,al
c0017b6f:	e9 bb 01 00 00       	jmp    c0017d2f <scanMADT()+0x469>
c0017b74:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017b79:	0f 85 e9 00 00 00    	jne    c0017c68 <scanMADT()+0x3a2>
c0017b7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b83:	8d 50 01             	lea    edx,[eax+0x1]
c0017b86:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b8e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b92:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017b96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b9a:	8d 50 01             	lea    edx,[eax+0x1]
c0017b9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ba1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ba5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ba9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb5:	01 d0                	add    eax,edx
c0017bb7:	83 c0 2c             	add    eax,0x2c
c0017bba:	8a 00                	mov    al,BYTE PTR [eax]
c0017bbc:	0f b6 d0             	movzx  edx,al
c0017bbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bc3:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bca:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bce:	0f b6 c0             	movzx  eax,al
c0017bd1:	c1 e0 08             	shl    eax,0x8
c0017bd4:	89 d1                	mov    ecx,edx
c0017bd6:	09 c1                	or     ecx,eax
c0017bd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bdc:	8d 50 02             	lea    edx,[eax+0x2]
c0017bdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017be3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017be7:	0f b6 c0             	movzx  eax,al
c0017bea:	c1 e0 10             	shl    eax,0x10
c0017bed:	09 c1                	or     ecx,eax
c0017bef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf3:	8d 50 03             	lea    edx,[eax+0x3]
c0017bf6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bfa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bfe:	0f b6 c0             	movzx  eax,al
c0017c01:	c1 e0 18             	shl    eax,0x18
c0017c04:	09 c8                	or     eax,ecx
c0017c06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c0a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c17:	01 d0                	add    eax,edx
c0017c19:	83 c0 2c             	add    eax,0x2c
c0017c1c:	8a 00                	mov    al,BYTE PTR [eax]
c0017c1e:	0f b6 c0             	movzx  eax,al
c0017c21:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c25:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c28:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c2c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c30:	0f b6 d2             	movzx  edx,dl
c0017c33:	c1 e2 08             	shl    edx,0x8
c0017c36:	09 d0                	or     eax,edx
c0017c38:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c3d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c42:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c4b:	88 90 60 cf 02 c0    	mov    BYTE PTR [eax-0x3ffd30a0],dl
c0017c51:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c56:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c5b:	66 89 84 12 80 06 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf980],ax
c0017c63:	e9 c7 00 00 00       	jmp    c0017d2f <scanMADT()+0x469>
c0017c68:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c6d:	0f 85 b0 00 00 00    	jne    c0017d23 <scanMADT()+0x45d>
c0017c73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c77:	8d 50 01             	lea    edx,[eax+0x1]
c0017c7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c82:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c86:	0f b6 c0             	movzx  eax,al
c0017c89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c95:	01 d0                	add    eax,edx
c0017c97:	83 c0 2c             	add    eax,0x2c
c0017c9a:	8a 00                	mov    al,BYTE PTR [eax]
c0017c9c:	0f b6 d0             	movzx  edx,al
c0017c9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca3:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ca6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017caa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cae:	0f b6 c0             	movzx  eax,al
c0017cb1:	c1 e0 08             	shl    eax,0x8
c0017cb4:	09 d0                	or     eax,edx
c0017cb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cba:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cc3:	8d 50 01             	lea    edx,[eax+0x1]
c0017cc6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cd2:	0f b6 c0             	movzx  eax,al
c0017cd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cdd:	c1 e0 08             	shl    eax,0x8
c0017ce0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017ce4:	89 c1                	mov    ecx,eax
c0017ce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cea:	c1 e0 18             	shl    eax,0x18
c0017ced:	89 c3                	mov    ebx,eax
c0017cef:	a1 f0 05 03 c0       	mov    eax,ds:0xc00305f0
c0017cf4:	8d 50 01             	lea    edx,[eax+0x1]
c0017cf7:	89 15 f0 05 03 c0    	mov    DWORD PTR ds:0xc00305f0,edx
c0017cfd:	09 d9                	or     ecx,ebx
c0017cff:	89 ca                	mov    edx,ecx
c0017d01:	89 14 85 00 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfa00],edx
c0017d08:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d14:	68 18 af 02 c0       	push   0xc002af18
c0017d19:	e8 f1 ad ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0017d1e:	83 c4 10             	add    esp,0x10
c0017d21:	eb 0c                	jmp    c0017d2f <scanMADT()+0x469>
c0017d23:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d28:	75 05                	jne    c0017d2f <scanMADT()+0x469>
c0017d2a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d2f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d38:	01 d0                	add    eax,edx
c0017d3a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d3e:	e9 54 fc ff ff       	jmp    c0017997 <scanMADT()+0xd1>
c0017d43:	90                   	nop
c0017d44:	eb 01                	jmp    c0017d47 <scanMADT()+0x481>
c0017d46:	90                   	nop
c0017d47:	83 c4 38             	add    esp,0x38
c0017d4a:	5b                   	pop    ebx
c0017d4b:	c3                   	ret    

c0017d4c <ACPI::ACPI()>:
c0017d4c:	83 ec 0c             	sub    esp,0xc
c0017d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d53:	83 ec 08             	sub    esp,0x8
c0017d56:	68 bb ad 02 c0       	push   0xc002adbb
c0017d5b:	50                   	push   eax
c0017d5c:	e8 c5 c3 ff ff       	call   c0014126 <Device::Device(char const*)>
c0017d61:	83 c4 10             	add    esp,0x10
c0017d64:	ba 8c af 02 c0       	mov    edx,0xc002af8c
c0017d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6d:	89 10                	mov    DWORD PTR [eax],edx
c0017d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d73:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d7e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d8c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d9a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017dac:	e8 15 fb ff ff       	call   c00178c6 <scanMADT()>
c0017db1:	90                   	nop
c0017db2:	83 c4 0c             	add    esp,0xc
c0017db5:	c3                   	ret    

c0017db6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017db6:	83 ec 2c             	sub    esp,0x2c
c0017db9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017dbd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017dc1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dc5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017dc9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dce:	88 d0                	mov    al,dl
c0017dd0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017dd4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017dd9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017de1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017de5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017deb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017def:	0f 8d 97 00 00 00    	jge    c0017e8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017df5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017df9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dfd:	83 c2 2a             	add    edx,0x2a
c0017e00:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e04:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e09:	75 78                	jne    c0017e83 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e13:	83 c2 2a             	add    edx,0x2a
c0017e16:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e1a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e1e:	75 63                	jne    c0017e83 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e20:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e25:	74 3a                	je     c0017e61 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e2f:	83 c2 2a             	add    edx,0x2a
c0017e32:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e3d:	39 c2                	cmp    edx,eax
c0017e3f:	74 10                	je     c0017e51 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e41:	83 ec 0c             	sub    esp,0xc
c0017e44:	68 54 af 02 c0       	push   0xc002af54
c0017e49:	e8 51 23 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0017e4e:	83 c4 10             	add    esp,0x10
c0017e51:	83 ec 0c             	sub    esp,0xc
c0017e54:	68 c0 ad 02 c0       	push   0xc002adc0
c0017e59:	e8 41 23 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0017e5e:	83 c4 10             	add    esp,0x10
c0017e61:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e6d:	83 c2 2a             	add    edx,0x2a
c0017e70:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e74:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e76:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e79:	89 01                	mov    DWORD PTR [ecx],eax
c0017e7b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e7e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e83:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017e87:	e9 55 ff ff ff       	jmp    c0017de1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017e8c:	90                   	nop
c0017e8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e91:	83 c4 2c             	add    esp,0x2c
c0017e94:	c2 04 00             	ret    0x4
c0017e97:	90                   	nop

c0017e98 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017e98:	83 ec 1c             	sub    esp,0x1c
c0017e9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e9f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ea3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ea7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017eac:	88 c8                	mov    al,cl
c0017eae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017eb2:	88 d0                	mov    al,dl
c0017eb4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ec9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ecd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017edb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017edf:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ee2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ee6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eef:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ef5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017ef9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f00:	83 c2 2a             	add    edx,0x2a
c0017f03:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f15:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f1c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f24:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f2a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f31:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f41:	3d 00 02 00 00       	cmp    eax,0x200
c0017f46:	75 10                	jne    c0017f58 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f48:	83 ec 0c             	sub    esp,0xc
c0017f4b:	68 cf ad 02 c0       	push   0xc002adcf
c0017f50:	e8 4a 22 00 00       	call   c001a19f <Krnl::panic(char const*)>
c0017f55:	83 c4 10             	add    esp,0x10
c0017f58:	90                   	nop
c0017f59:	83 c4 1c             	add    esp,0x1c
c0017f5c:	c3                   	ret    
c0017f5d:	90                   	nop

c0017f5e <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f5e:	b8 00 00 00 00       	mov    eax,0x0
c0017f63:	c3                   	ret    

c0017f64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017f64:	83 ec 1c             	sub    esp,0x1c
c0017f67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017f6e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f72:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0017f77:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f7c:	83 ec 08             	sub    esp,0x8
c0017f7f:	52                   	push   edx
c0017f80:	50                   	push   eax
c0017f81:	e8 d2 6e ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0017f86:	83 c4 10             	add    esp,0x10
c0017f89:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f8d:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0017f92:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f97:	83 ec 04             	sub    esp,0x4
c0017f9a:	6a 01                	push   0x1
c0017f9c:	52                   	push   edx
c0017f9d:	50                   	push   eax
c0017f9e:	e8 cb 6f ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fa3:	83 c4 10             	add    esp,0x10
c0017fa6:	90                   	nop
c0017fa7:	83 c4 1c             	add    esp,0x1c
c0017faa:	c3                   	ret    
c0017fab:	90                   	nop

c0017fac <ACPI::open(int, int, void*)>:
c0017fac:	53                   	push   ebx
c0017fad:	83 ec 28             	sub    esp,0x28
c0017fb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fb4:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017fbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fbf:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017fc6:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0017fcb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fd1:	83 e0 04             	and    eax,0x4
c0017fd4:	84 c0                	test   al,al
c0017fd6:	74 47                	je     c001801f <ACPI::open(int, int, void*)+0x73>
c0017fd8:	a1 e8 05 03 c0       	mov    eax,ds:0xc00305e8
c0017fdd:	83 ec 08             	sub    esp,0x8
c0017fe0:	68 ec ad 02 c0       	push   0xc002adec
c0017fe5:	50                   	push   eax
c0017fe6:	e8 3f f8 ff ff       	call   c001782a <findDataTable(unsigned char*, char*)>
c0017feb:	83 c4 10             	add    esp,0x10
c0017fee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ff2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017ff7:	74 26                	je     c001801f <ACPI::open(int, int, void*)+0x73>
c0017ff9:	83 ec 0c             	sub    esp,0xc
c0017ffc:	68 f1 ad 02 c0       	push   0xc002adf1
c0018001:	e8 09 ab ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018006:	83 c4 10             	add    esp,0x10
c0018009:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001800d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018014:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018018:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001801f:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001802b:	8a 00                	mov    al,BYTE PTR [eax]
c001802d:	3c 01                	cmp    al,0x1
c001802f:	75 28                	jne    c0018059 <ACPI::open(int, int, void*)+0xad>
c0018031:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018035:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001803c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018040:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018047:	83 ec 0c             	sub    esp,0xc
c001804a:	68 02 ae 02 c0       	push   0xc002ae02
c001804f:	e8 bb aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018054:	83 c4 10             	add    esp,0x10
c0018057:	eb 25                	jmp    c001807e <ACPI::open(int, int, void*)+0xd2>
c0018059:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001805d:	8a 00                	mov    al,BYTE PTR [eax]
c001805f:	3c 02                	cmp    al,0x2
c0018061:	75 1b                	jne    c001807e <ACPI::open(int, int, void*)+0xd2>
c0018063:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018067:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001806e:	83 ec 0c             	sub    esp,0xc
c0018071:	68 0a ae 02 c0       	push   0xc002ae0a
c0018076:	e8 94 aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001807b:	83 c4 10             	add    esp,0x10
c001807e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018082:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018088:	83 f0 01             	xor    eax,0x1
c001808b:	84 c0                	test   al,al
c001808d:	74 6a                	je     c00180f9 <ACPI::open(int, int, void*)+0x14d>
c001808f:	83 ec 0c             	sub    esp,0xc
c0018092:	68 12 ae 02 c0       	push   0xc002ae12
c0018097:	e8 73 aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001809c:	83 c4 10             	add    esp,0x10
c001809f:	e8 ac 80 fe ff       	call   c0000150 <manualPCIProbe>
c00180a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180a8:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00180ad:	75 28                	jne    c00180d7 <ACPI::open(int, int, void*)+0x12b>
c00180af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180be:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00180c5:	83 ec 0c             	sub    esp,0xc
c00180c8:	68 20 ae 02 c0       	push   0xc002ae20
c00180cd:	e8 3d aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00180d2:	83 c4 10             	add    esp,0x10
c00180d5:	eb 22                	jmp    c00180f9 <ACPI::open(int, int, void*)+0x14d>
c00180d7:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00180dc:	75 1b                	jne    c00180f9 <ACPI::open(int, int, void*)+0x14d>
c00180de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e2:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180e9:	83 ec 0c             	sub    esp,0xc
c00180ec:	68 2a ae 02 c0       	push   0xc002ae2a
c00180f1:	e8 19 aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00180f6:	83 c4 10             	add    esp,0x10
c00180f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180fd:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018103:	84 c0                	test   al,al
c0018105:	74 13                	je     c001811a <ACPI::open(int, int, void*)+0x16e>
c0018107:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001810b:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018111:	83 f0 01             	xor    eax,0x1
c0018114:	0f b6 c0             	movzx  eax,al
c0018117:	40                   	inc    eax
c0018118:	eb 05                	jmp    c001811f <ACPI::open(int, int, void*)+0x173>
c001811a:	b8 00 00 00 00       	mov    eax,0x0
c001811f:	83 ec 08             	sub    esp,0x8
c0018122:	50                   	push   eax
c0018123:	68 34 ae 02 c0       	push   0xc002ae34
c0018128:	e8 e2 a9 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001812d:	83 c4 10             	add    esp,0x10
c0018130:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018134:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001813a:	84 c0                	test   al,al
c001813c:	74 67                	je     c00181a5 <ACPI::open(int, int, void*)+0x1f9>
c001813e:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018146:	83 ec 0c             	sub    esp,0xc
c0018149:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001814d:	e8 ee 76 ff ff       	call   c000f840 <malloc>
c0018152:	83 c4 10             	add    esp,0x10
c0018155:	89 c3                	mov    ebx,eax
c0018157:	83 ec 0c             	sub    esp,0xc
c001815a:	53                   	push   ebx
c001815b:	e8 d2 a1 00 00       	call   c0022332 <PCI::PCI()>
c0018160:	83 c4 10             	add    esp,0x10
c0018163:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018167:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001816b:	83 ec 08             	sub    esp,0x8
c001816e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018172:	50                   	push   eax
c0018173:	e8 be bd ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0018178:	83 c4 10             	add    esp,0x10
c001817b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018181:	83 c0 08             	add    eax,0x8
c0018184:	8b 00                	mov    eax,DWORD PTR [eax]
c0018186:	6a 00                	push   0x0
c0018188:	6a 00                	push   0x0
c001818a:	6a 00                	push   0x0
c001818c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018190:	ff d0                	call   eax
c0018192:	83 c4 10             	add    esp,0x10
c0018195:	83 ec 0c             	sub    esp,0xc
c0018198:	68 3d ae 02 c0       	push   0xc002ae3d
c001819d:	e8 6d a9 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00181a2:	83 c4 10             	add    esp,0x10
c00181a5:	83 ec 0c             	sub    esp,0xc
c00181a8:	68 48 ae 02 c0       	push   0xc002ae48
c00181ad:	e8 78 45 00 00       	call   c001c72a <Thr::loadKernelSymbolTable(char const*)>
c00181b2:	83 c4 10             	add    esp,0x10
c00181b5:	8b 1d 08 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd08
c00181bb:	83 ec 08             	sub    esp,0x8
c00181be:	6a 01                	push   0x1
c00181c0:	68 66 ae 02 c0       	push   0xc002ae66
c00181c5:	e8 bd 4f 00 00       	call   c001d187 <Thr::loadDLL(char const*, bool)>
c00181ca:	83 c4 10             	add    esp,0x10
c00181cd:	83 ec 08             	sub    esp,0x8
c00181d0:	53                   	push   ebx
c00181d1:	50                   	push   eax
c00181d2:	e8 e4 51 00 00       	call   c001d3bb <Thr::executeDLL(unsigned long, void*)>
c00181d7:	83 c4 10             	add    esp,0x10
c00181da:	8b 1d 08 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd08
c00181e0:	83 ec 08             	sub    esp,0x8
c00181e3:	6a 01                	push   0x1
c00181e5:	68 83 ae 02 c0       	push   0xc002ae83
c00181ea:	e8 98 4f 00 00       	call   c001d187 <Thr::loadDLL(char const*, bool)>
c00181ef:	83 c4 10             	add    esp,0x10
c00181f2:	83 ec 08             	sub    esp,0x8
c00181f5:	53                   	push   ebx
c00181f6:	50                   	push   eax
c00181f7:	e8 bf 51 00 00       	call   c001d3bb <Thr::executeDLL(unsigned long, void*)>
c00181fc:	83 c4 10             	add    esp,0x10
c00181ff:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0018204:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001820a:	83 e0 04             	and    eax,0x4
c001820d:	84 c0                	test   al,al
c001820f:	0f 84 d2 00 00 00    	je     c00182e7 <ACPI::open(int, int, void*)+0x33b>
c0018215:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001821c:	83 ec 0c             	sub    esp,0xc
c001821f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018223:	e8 18 76 ff ff       	call   c000f840 <malloc>
c0018228:	83 c4 10             	add    esp,0x10
c001822b:	89 c3                	mov    ebx,eax
c001822d:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c0018232:	83 ec 04             	sub    esp,0x4
c0018235:	50                   	push   eax
c0018236:	68 a0 ae 02 c0       	push   0xc002aea0
c001823b:	53                   	push   ebx
c001823c:	e8 27 ae ff ff       	call   c0013068 <File::File(char const*, Process*)>
c0018241:	83 c4 10             	add    esp,0x10
c0018244:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018248:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001824d:	74 17                	je     c0018266 <ACPI::open(int, int, void*)+0x2ba>
c001824f:	83 ec 0c             	sub    esp,0xc
c0018252:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018256:	e8 df b0 ff ff       	call   c001333a <File::exists()>
c001825b:	83 c4 10             	add    esp,0x10
c001825e:	84 c0                	test   al,al
c0018260:	74 04                	je     c0018266 <ACPI::open(int, int, void*)+0x2ba>
c0018262:	b0 01                	mov    al,0x1
c0018264:	eb 02                	jmp    c0018268 <ACPI::open(int, int, void*)+0x2bc>
c0018266:	b0 00                	mov    al,0x0
c0018268:	84 c0                	test   al,al
c001826a:	74 22                	je     c001828e <ACPI::open(int, int, void*)+0x2e2>
c001826c:	83 ec 08             	sub    esp,0x8
c001826f:	6a 01                	push   0x1
c0018271:	68 a0 ae 02 c0       	push   0xc002aea0
c0018276:	e8 0c 4f 00 00       	call   c001d187 <Thr::loadDLL(char const*, bool)>
c001827b:	83 c4 10             	add    esp,0x10
c001827e:	83 ec 08             	sub    esp,0x8
c0018281:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018285:	50                   	push   eax
c0018286:	e8 30 51 00 00       	call   c001d3bb <Thr::executeDLL(unsigned long, void*)>
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018293:	74 1e                	je     c00182b3 <ACPI::open(int, int, void*)+0x307>
c0018295:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001829a:	74 17                	je     c00182b3 <ACPI::open(int, int, void*)+0x307>
c001829c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00182a2:	83 c0 08             	add    eax,0x8
c00182a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00182a7:	83 ec 0c             	sub    esp,0xc
c00182aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182ae:	ff d0                	call   eax
c00182b0:	83 c4 10             	add    esp,0x10
c00182b3:	a1 e8 05 03 c0       	mov    eax,ds:0xc00305e8
c00182b8:	83 ec 08             	sub    esp,0x8
c00182bb:	68 bd ae 02 c0       	push   0xc002aebd
c00182c0:	50                   	push   eax
c00182c1:	e8 64 f5 ff ff       	call   c001782a <findDataTable(unsigned char*, char*)>
c00182c6:	83 c4 10             	add    esp,0x10
c00182c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182cd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00182d2:	74 13                	je     c00182e7 <ACPI::open(int, int, void*)+0x33b>
c00182d4:	83 ec 08             	sub    esp,0x8
c00182d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00182db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182df:	e8 80 fc ff ff       	call   c0017f64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182e4:	83 c4 10             	add    esp,0x10
c00182e7:	b8 00 00 00 00       	mov    eax,0x0
c00182ec:	83 c4 28             	add    esp,0x28
c00182ef:	5b                   	pop    ebx
c00182f0:	c3                   	ret    
c00182f1:	90                   	nop

c00182f2 <ACPI::sleep()>:
c00182f2:	83 ec 0c             	sub    esp,0xc
c00182f5:	a1 c0 03 03 c0       	mov    eax,ds:0xc00303c0
c00182fa:	85 c0                	test   eax,eax
c00182fc:	74 07                	je     c0018305 <ACPI::sleep()+0x13>
c00182fe:	a1 c0 03 03 c0       	mov    eax,ds:0xc00303c0
c0018303:	ff d0                	call   eax
c0018305:	90                   	nop
c0018306:	83 c4 0c             	add    esp,0xc
c0018309:	c3                   	ret    

c001830a <CPU::close(int, int, void*)>:
c001830a:	31 c0                	xor    eax,eax
c001830c:	c3                   	ret    
c001830d:	90                   	nop

c001830e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001830e:	55                   	push   ebp
c001830f:	57                   	push   edi
c0018310:	56                   	push   esi
c0018311:	53                   	push   ebx
c0018312:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018316:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001831a:	89 ce                	mov    esi,ecx
c001831c:	89 d5                	mov    ebp,edx
c001831e:	80 f9 04             	cmp    cl,0x4
c0018321:	75 28                	jne    c001834b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018323:	8d 42 f9             	lea    eax,[edx-0x7]
c0018326:	3c 03                	cmp    al,0x3
c0018328:	0f 86 63 01 00 00    	jbe    c0018491 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001832e:	80 fa 03             	cmp    dl,0x3
c0018331:	0f 84 5a 01 00 00    	je     c0018491 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018337:	8d 7a f2             	lea    edi,[edx-0xe]
c001833a:	b8 30 d1 02 c0       	mov    eax,0xc002d130
c001833f:	89 fb                	mov    ebx,edi
c0018341:	80 fb 01             	cmp    bl,0x1
c0018344:	77 4e                	ja     c0018394 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018346:	e9 52 01 00 00       	jmp    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001834b:	80 f9 05             	cmp    cl,0x5
c001834e:	75 4d                	jne    c001839d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018350:	b8 40 d1 02 c0       	mov    eax,0xc002d140
c0018355:	80 fa 03             	cmp    dl,0x3
c0018358:	0f 86 3f 01 00 00    	jbe    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001835e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018361:	b8 50 d1 02 c0       	mov    eax,0xc002d150
c0018366:	89 fb                	mov    ebx,edi
c0018368:	80 fb 01             	cmp    bl,0x1
c001836b:	0f 86 2c 01 00 00    	jbe    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018371:	b8 60 d1 02 c0       	mov    eax,0xc002d160
c0018376:	80 fa 08             	cmp    dl,0x8
c0018379:	0f 84 1e 01 00 00    	je     c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001837f:	89 d7                	mov    edi,edx
c0018381:	b8 70 d1 02 c0       	mov    eax,0xc002d170
c0018386:	83 e7 fb             	and    edi,0xfffffffb
c0018389:	89 fb                	mov    ebx,edi
c001838b:	80 fb 09             	cmp    bl,0x9
c001838e:	0f 84 09 01 00 00    	je     c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018394:	31 c0                	xor    eax,eax
c0018396:	89 eb                	mov    ebx,ebp
c0018398:	0f b6 fb             	movzx  edi,bl
c001839b:	eb 30                	jmp    c00183cd <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001839d:	31 c0                	xor    eax,eax
c001839f:	80 f9 06             	cmp    cl,0x6
c00183a2:	75 f2                	jne    c0018396 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183a4:	80 fa 0a             	cmp    dl,0xa
c00183a7:	77 ed                	ja     c0018396 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183a9:	bf de 05 00 00       	mov    edi,0x5de
c00183ae:	0f a3 d7             	bt     edi,edx
c00183b1:	73 e3                	jae    c0018396 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183b3:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c00183b8:	e9 e0 00 00 00       	jmp    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183bd:	39 c7                	cmp    edi,eax
c00183bf:	0f 84 d3 00 00 00    	je     c0018498 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183c5:	40                   	inc    eax
c00183c6:	3d d0 00 00 00       	cmp    eax,0xd0
c00183cb:	74 09                	je     c00183d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00183cd:	89 f3                	mov    ebx,esi
c00183cf:	80 fb 0f             	cmp    bl,0xf
c00183d2:	75 f1                	jne    c00183c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00183d4:	eb e7                	jmp    c00183bd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00183d6:	80 f9 10             	cmp    cl,0x10
c00183d9:	75 14                	jne    c00183ef <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00183db:	8d 42 fc             	lea    eax,[edx-0x4]
c00183de:	83 e0 fb             	and    eax,0xfffffffb
c00183e1:	3c 02                	cmp    al,0x2
c00183e3:	76 34                	jbe    c0018419 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00183e5:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c00183ea:	80 fa 02             	cmp    dl,0x2
c00183ed:	eb 24                	jmp    c0018413 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00183ef:	80 f9 11             	cmp    cl,0x11
c00183f2:	75 13                	jne    c0018407 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183f4:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c00183f9:	80 fa 03             	cmp    dl,0x3
c00183fc:	0f 85 9b 00 00 00    	jne    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018402:	e9 91 00 00 00       	jmp    c0018498 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018407:	80 f9 12             	cmp    cl,0x12
c001840a:	75 14                	jne    c0018420 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001840c:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c0018411:	fe ca                	dec    dl
c0018413:	0f 85 84 00 00 00    	jne    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018419:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c001841e:	eb 7d                	jmp    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018420:	80 f9 14             	cmp    cl,0x14
c0018423:	75 12                	jne    c0018437 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018425:	4a                   	dec    edx
c0018426:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c001842b:	80 fa 01             	cmp    dl,0x1
c001842e:	77 6d                	ja     c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018430:	b8 b0 d1 02 c0       	mov    eax,0xc002d1b0
c0018435:	eb 66                	jmp    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018437:	80 f9 15             	cmp    cl,0x15
c001843a:	75 31                	jne    c001846d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001843c:	b8 c0 d1 02 c0       	mov    eax,0xc002d1c0
c0018441:	80 fa 01             	cmp    dl,0x1
c0018444:	74 57                	je     c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018446:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c001844b:	80 fa 13             	cmp    dl,0x13
c001844e:	76 0c                	jbe    c001845c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018450:	80 fa 30             	cmp    dl,0x30
c0018453:	75 48                	jne    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018455:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c001845a:	eb 41                	jmp    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001845c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018461:	0f a3 d1             	bt     ecx,edx
c0018464:	73 37                	jae    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018466:	b8 d0 d1 02 c0       	mov    eax,0xc002d1d0
c001846b:	eb 30                	jmp    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001846d:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c0018472:	80 f9 16             	cmp    cl,0x16
c0018475:	75 26                	jne    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018477:	b8 f0 d1 02 c0       	mov    eax,0xc002d1f0
c001847c:	84 d2                	test   dl,dl
c001847e:	74 1d                	je     c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018480:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c0018485:	80 fa 30             	cmp    dl,0x30
c0018488:	75 13                	jne    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001848a:	b8 00 d2 02 c0       	mov    eax,0xc002d200
c001848f:	eb 0c                	jmp    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018491:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c0018496:	eb 05                	jmp    c001849d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018498:	b8 90 d1 02 c0       	mov    eax,0xc002d190
c001849d:	5b                   	pop    ebx
c001849e:	5e                   	pop    esi
c001849f:	5f                   	pop    edi
c00184a0:	5d                   	pop    ebp
c00184a1:	c3                   	ret    

c00184a2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00184a2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00184a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184aa:	80 f9 04             	cmp    cl,0x4
c00184ad:	75 6b                	jne    c001851a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00184af:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c00184b4:	80 fa 01             	cmp    dl,0x1
c00184b7:	0f 86 92 02 00 00    	jbe    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184bd:	b8 90 cf 02 c0       	mov    eax,0xc002cf90
c00184c2:	80 fa 02             	cmp    dl,0x2
c00184c5:	0f 84 84 02 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184cb:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c00184d0:	80 fa 03             	cmp    dl,0x3
c00184d3:	0f 84 76 02 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d9:	b8 b0 cf 02 c0       	mov    eax,0xc002cfb0
c00184de:	80 fa 04             	cmp    dl,0x4
c00184e1:	0f 84 68 02 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e7:	b8 c0 cf 02 c0       	mov    eax,0xc002cfc0
c00184ec:	80 fa 05             	cmp    dl,0x5
c00184ef:	0f 84 5a 02 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f5:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c00184fa:	80 fa 07             	cmp    dl,0x7
c00184fd:	0f 84 4c 02 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018503:	83 ea 08             	sub    edx,0x8
c0018506:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c001850b:	80 fa 01             	cmp    dl,0x1
c001850e:	0f 87 3b 02 00 00    	ja     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018514:	b8 d0 cf 02 c0       	mov    eax,0xc002cfd0
c0018519:	c3                   	ret    
c001851a:	80 f9 05             	cmp    cl,0x5
c001851d:	75 45                	jne    c0018564 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001851f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018522:	b8 e0 cf 02 c0       	mov    eax,0xc002cfe0
c0018527:	80 f9 02             	cmp    cl,0x2
c001852a:	0f 86 1f 02 00 00    	jbe    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018530:	80 fa 04             	cmp    dl,0x4
c0018533:	0f 84 f3 01 00 00    	je     c001872c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018539:	80 fa 07             	cmp    dl,0x7
c001853c:	0f 84 0d 02 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018542:	b8 f0 cf 02 c0       	mov    eax,0xc002cff0
c0018547:	80 fa 08             	cmp    dl,0x8
c001854a:	0f 84 ff 01 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018550:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c0018555:	80 fa 09             	cmp    dl,0x9
c0018558:	0f 85 f1 01 00 00    	jne    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855e:	b8 00 d0 02 c0       	mov    eax,0xc002d000
c0018563:	c3                   	ret    
c0018564:	80 f9 06             	cmp    cl,0x6
c0018567:	0f 85 85 01 00 00    	jne    c00186f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001856d:	b8 10 d0 02 c0       	mov    eax,0xc002d010
c0018572:	80 fa 01             	cmp    dl,0x1
c0018575:	0f 84 d4 01 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001857b:	8d 42 fb             	lea    eax,[edx-0x5]
c001857e:	3c 01                	cmp    al,0x1
c0018580:	0f 86 ac 01 00 00    	jbe    c0018732 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018586:	80 fa 03             	cmp    dl,0x3
c0018589:	0f 84 a3 01 00 00    	je     c0018732 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001858f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018592:	b8 30 d0 02 c0       	mov    eax,0xc002d030
c0018597:	80 f9 01             	cmp    cl,0x1
c001859a:	0f 86 af 01 00 00    	jbe    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a0:	80 fa 09             	cmp    dl,0x9
c00185a3:	0f 84 8f 01 00 00    	je     c0018738 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00185a9:	8d 4a f6             	lea    ecx,[edx-0xa]
c00185ac:	80 f9 01             	cmp    cl,0x1
c00185af:	0f 86 9a 01 00 00    	jbe    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b5:	b8 40 d0 02 c0       	mov    eax,0xc002d040
c00185ba:	80 fa 0d             	cmp    dl,0xd
c00185bd:	0f 84 8c 01 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c3:	b8 50 d0 02 c0       	mov    eax,0xc002d050
c00185c8:	80 fa 0e             	cmp    dl,0xe
c00185cb:	0f 84 7e 01 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d1:	b8 60 d0 02 c0       	mov    eax,0xc002d060
c00185d6:	80 fa 0f             	cmp    dl,0xf
c00185d9:	0f 84 70 01 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185df:	b8 40 d0 02 c0       	mov    eax,0xc002d040
c00185e4:	80 fa 15             	cmp    dl,0x15
c00185e7:	0f 84 62 01 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ed:	8d 4a ea             	lea    ecx,[edx-0x16]
c00185f0:	b8 60 d0 02 c0       	mov    eax,0xc002d060
c00185f5:	80 f9 01             	cmp    cl,0x1
c00185f8:	0f 86 51 01 00 00    	jbe    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185fe:	80 fa 1a             	cmp    dl,0x1a
c0018601:	0f 84 37 01 00 00    	je     c001873e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018607:	80 fa 1c             	cmp    dl,0x1c
c001860a:	0f 84 34 01 00 00    	je     c0018744 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018610:	80 fa 1d             	cmp    dl,0x1d
c0018613:	0f 84 36 01 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018619:	b8 90 d0 02 c0       	mov    eax,0xc002d090
c001861e:	80 fa 25             	cmp    dl,0x25
c0018621:	0f 84 28 01 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018627:	8d 4a da             	lea    ecx,[edx-0x26]
c001862a:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c001862f:	80 f9 01             	cmp    cl,0x1
c0018632:	0f 86 17 01 00 00    	jbe    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018638:	b8 a0 d0 02 c0       	mov    eax,0xc002d0a0
c001863d:	80 fa 2a             	cmp    dl,0x2a
c0018640:	0f 84 09 01 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018646:	b8 90 d0 02 c0       	mov    eax,0xc002d090
c001864b:	80 fa 2c             	cmp    dl,0x2c
c001864e:	0f 84 fb 00 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018654:	b8 a0 d0 02 c0       	mov    eax,0xc002d0a0
c0018659:	80 fa 2d             	cmp    dl,0x2d
c001865c:	0f 84 ed 00 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018662:	b8 70 d0 02 c0       	mov    eax,0xc002d070
c0018667:	80 fa 2e             	cmp    dl,0x2e
c001866a:	0f 84 df 00 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018670:	b8 90 d0 02 c0       	mov    eax,0xc002d090
c0018675:	80 fa 2f             	cmp    dl,0x2f
c0018678:	0f 84 d1 00 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001867e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018681:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c0018686:	80 f9 01             	cmp    cl,0x1
c0018689:	0f 86 c0 00 00 00    	jbe    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868f:	b8 b0 d0 02 c0       	mov    eax,0xc002d0b0
c0018694:	80 fa 37             	cmp    dl,0x37
c0018697:	0f 84 b2 00 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869d:	b8 c0 d0 02 c0       	mov    eax,0xc002d0c0
c00186a2:	80 fa 3a             	cmp    dl,0x3a
c00186a5:	0f 84 a4 00 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ab:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c00186b0:	80 fa 3c             	cmp    dl,0x3c
c00186b3:	0f 84 96 00 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b9:	b8 e0 d0 02 c0       	mov    eax,0xc002d0e0
c00186be:	80 fa 3d             	cmp    dl,0x3d
c00186c1:	0f 84 88 00 00 00    	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c7:	b8 c0 d0 02 c0       	mov    eax,0xc002d0c0
c00186cc:	80 fa 3e             	cmp    dl,0x3e
c00186cf:	74 7e                	je     c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d1:	8d 42 bb             	lea    eax,[edx-0x45]
c00186d4:	3c 01                	cmp    al,0x1
c00186d6:	76 72                	jbe    c001874a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186d8:	80 fa 3f             	cmp    dl,0x3f
c00186db:	74 6d                	je     c001874a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186dd:	80 fa 4a             	cmp    dl,0x4a
c00186e0:	74 0a                	je     c00186ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00186e2:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c00186e7:	80 fa 4d             	cmp    dl,0x4d
c00186ea:	75 63                	jne    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ec:	b8 b0 d0 02 c0       	mov    eax,0xc002d0b0
c00186f1:	c3                   	ret    
c00186f2:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c00186f7:	80 f9 0b             	cmp    cl,0xb
c00186fa:	75 0a                	jne    c0018706 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00186fc:	fe ca                	dec    dl
c00186fe:	75 4f                	jne    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018700:	b8 f0 d0 02 c0       	mov    eax,0xc002d0f0
c0018705:	c3                   	ret    
c0018706:	80 f9 0f             	cmp    cl,0xf
c0018709:	75 44                	jne    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870b:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0018710:	80 fa 02             	cmp    dl,0x2
c0018713:	76 3a                	jbe    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018715:	8d 42 fd             	lea    eax,[edx-0x3]
c0018718:	3c 01                	cmp    al,0x1
c001871a:	76 0a                	jbe    c0018726 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001871c:	b8 a2 b2 02 c0       	mov    eax,0xc002b2a2
c0018721:	80 fa 06             	cmp    dl,0x6
c0018724:	75 29                	jne    c001874f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018726:	b8 10 d1 02 c0       	mov    eax,0xc002d110
c001872b:	c3                   	ret    
c001872c:	b8 f0 cf 02 c0       	mov    eax,0xc002cff0
c0018731:	c3                   	ret    
c0018732:	b8 20 d0 02 c0       	mov    eax,0xc002d020
c0018737:	c3                   	ret    
c0018738:	b8 40 d0 02 c0       	mov    eax,0xc002d040
c001873d:	c3                   	ret    
c001873e:	b8 70 d0 02 c0       	mov    eax,0xc002d070
c0018743:	c3                   	ret    
c0018744:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c0018749:	c3                   	ret    
c001874a:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c001874f:	c3                   	ret    

c0018750 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018750:	60                   	pusha  
c0018751:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018755:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018759:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001875d:	9c                   	pushf  
c001875e:	fa                   	cli    
c001875f:	0f 09                	wbinvd 
c0018761:	0f 30                	wrmsr  
c0018763:	9d                   	popf   
c0018764:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018768:	89 02                	mov    DWORD PTR [edx],eax
c001876a:	61                   	popa   
c001876b:	c3                   	ret    

c001876c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001876c:	60                   	pusha  
c001876d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018771:	9c                   	pushf  
c0018772:	fa                   	cli    
c0018773:	0f 09                	wbinvd 
c0018775:	31 c0                	xor    eax,eax
c0018777:	31 d2                	xor    edx,edx
c0018779:	0f 32                	rdmsr  
c001877b:	9d                   	popf   
c001877c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018780:	89 02                	mov    DWORD PTR [edx],eax
c0018782:	61                   	popa   
c0018783:	c3                   	ret    

c0018784 <CPU::AMD_K6_writeback(int, int, int)>:
c0018784:	56                   	push   esi
c0018785:	53                   	push   ebx
c0018786:	83 ec 10             	sub    esp,0x10
c0018789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001878d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018792:	75 5d                	jne    c00187f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018794:	83 f8 08             	cmp    eax,0x8
c0018797:	75 09                	jne    c00187a2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018799:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001879e:	7e 13                	jle    c00187b3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187a0:	eb 30                	jmp    c00187d2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187a2:	83 f8 06             	cmp    eax,0x6
c00187a5:	7c 4a                	jl     c00187f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187a7:	83 f8 07             	cmp    eax,0x7
c00187aa:	7e 07                	jle    c00187b3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187ac:	83 f8 09             	cmp    eax,0x9
c00187af:	74 21                	je     c00187d2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187b1:	eb 3e                	jmp    c00187f1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187b3:	89 e6                	mov    esi,esp
c00187b5:	8b 1d 44 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd44
c00187bb:	56                   	push   esi
c00187bc:	c1 eb 15             	shr    ebx,0x15
c00187bf:	68 82 00 00 c0       	push   0xc0000082
c00187c4:	83 e3 7e             	and    ebx,0x7e
c00187c7:	e8 a0 ff ff ff       	call   c001876c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187cc:	56                   	push   esi
c00187cd:	6a 00                	push   0x0
c00187cf:	53                   	push   ebx
c00187d0:	eb 12                	jmp    c00187e4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00187d2:	89 e3                	mov    ebx,esp
c00187d4:	53                   	push   ebx
c00187d5:	68 82 00 00 c0       	push   0xc0000082
c00187da:	e8 8d ff ff ff       	call   c001876c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187df:	53                   	push   ebx
c00187e0:	6a 00                	push   0x0
c00187e2:	6a 00                	push   0x0
c00187e4:	68 82 00 00 c0       	push   0xc0000082
c00187e9:	e8 62 ff ff ff       	call   c0018750 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00187ee:	83 c4 18             	add    esp,0x18
c00187f1:	83 c4 10             	add    esp,0x10
c00187f4:	5b                   	pop    ebx
c00187f5:	5e                   	pop    esi
c00187f6:	c3                   	ret    
c00187f7:	90                   	nop

c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187f8:	55                   	push   ebp
c00187f9:	57                   	push   edi
c00187fa:	56                   	push   esi
c00187fb:	53                   	push   ebx
c00187fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018800:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018804:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018808:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001880c:	39 05 20 d2 02 c0    	cmp    DWORD PTR ds:0xc002d220,eax
c0018812:	75 23                	jne    c0018837 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018814:	a1 4c 08 03 c0       	mov    eax,ds:0xc003084c
c0018819:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001881d:	89 06                	mov    DWORD PTR [esi],eax
c001881f:	a1 48 08 03 c0       	mov    eax,ds:0xc0030848
c0018824:	89 07                	mov    DWORD PTR [edi],eax
c0018826:	a1 44 08 03 c0       	mov    eax,ds:0xc0030844
c001882b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001882e:	a1 40 08 03 c0       	mov    eax,ds:0xc0030840
c0018833:	89 02                	mov    DWORD PTR [edx],eax
c0018835:	eb 3f                	jmp    c0018876 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018837:	31 c9                	xor    ecx,ecx
c0018839:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001883d:	0f a2                	cpuid  
c001883f:	89 06                	mov    DWORD PTR [esi],eax
c0018841:	89 1f                	mov    DWORD PTR [edi],ebx
c0018843:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018847:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001884a:	89 10                	mov    DWORD PTR [eax],edx
c001884c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018850:	a3 20 d2 02 c0       	mov    ds:0xc002d220,eax
c0018855:	8b 06                	mov    eax,DWORD PTR [esi]
c0018857:	a3 4c 08 03 c0       	mov    ds:0xc003084c,eax
c001885c:	8b 07                	mov    eax,DWORD PTR [edi]
c001885e:	a3 48 08 03 c0       	mov    ds:0xc0030848,eax
c0018863:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018866:	a3 44 08 03 c0       	mov    ds:0xc0030844,eax
c001886b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001886f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018871:	a3 40 08 03 c0       	mov    ds:0xc0030840,eax
c0018876:	5b                   	pop    ebx
c0018877:	5e                   	pop    esi
c0018878:	5f                   	pop    edi
c0018879:	5d                   	pop    ebp
c001887a:	c3                   	ret    
c001887b:	90                   	nop

c001887c <CPU::cpuidCheckEDX(unsigned int)>:
c001887c:	83 ec 10             	sub    esp,0x10
c001887f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018883:	50                   	push   eax
c0018884:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018888:	50                   	push   eax
c0018889:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888d:	50                   	push   eax
c001888e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018892:	50                   	push   eax
c0018893:	6a 01                	push   0x1
c0018895:	e8 5e ff ff ff       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001889a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001889e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00188a2:	0f 95 c0             	setne  al
c00188a5:	83 c4 24             	add    esp,0x24
c00188a8:	c3                   	ret    
c00188a9:	90                   	nop

c00188aa <CPU::cpuidCheckECX(unsigned int)>:
c00188aa:	83 ec 10             	sub    esp,0x10
c00188ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b1:	50                   	push   eax
c00188b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b6:	50                   	push   eax
c00188b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bb:	50                   	push   eax
c00188bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c0:	50                   	push   eax
c00188c1:	6a 01                	push   0x1
c00188c3:	e8 30 ff ff ff       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188cc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188d0:	0f 95 c0             	setne  al
c00188d3:	83 c4 24             	add    esp,0x24
c00188d6:	c3                   	ret    
c00188d7:	90                   	nop

c00188d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00188d8:	83 ec 10             	sub    esp,0x10
c00188db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188df:	50                   	push   eax
c00188e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e4:	50                   	push   eax
c00188e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e9:	50                   	push   eax
c00188ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ee:	50                   	push   eax
c00188ef:	6a 07                	push   0x7
c00188f1:	e8 02 ff ff ff       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188fa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00188fe:	0f 95 c0             	setne  al
c0018901:	83 c4 24             	add    esp,0x24
c0018904:	c3                   	ret    
c0018905:	90                   	nop

c0018906 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018906:	83 ec 10             	sub    esp,0x10
c0018909:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001890d:	50                   	push   eax
c001890e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018912:	50                   	push   eax
c0018913:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018917:	50                   	push   eax
c0018918:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001891c:	50                   	push   eax
c001891d:	6a 07                	push   0x7
c001891f:	e8 d4 fe ff ff       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018924:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018928:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001892c:	0f 95 c0             	setne  al
c001892f:	83 c4 24             	add    esp,0x24
c0018932:	c3                   	ret    
c0018933:	90                   	nop

c0018934 <CPU::CPU()>:
c0018934:	83 ec 0c             	sub    esp,0xc
c0018937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001893b:	83 ec 08             	sub    esp,0x8
c001893e:	68 a2 b2 02 c0       	push   0xc002b2a2
c0018943:	50                   	push   eax
c0018944:	e8 dd b7 ff ff       	call   c0014126 <Device::Device(char const*)>
c0018949:	83 c4 10             	add    esp,0x10
c001894c:	ba 7c b3 02 c0       	mov    edx,0xc002b37c
c0018951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018955:	89 10                	mov    DWORD PTR [eax],edx
c0018957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001895b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018969:	05 78 01 00 00       	add    eax,0x178
c001896e:	83 ec 0c             	sub    esp,0xc
c0018971:	50                   	push   eax
c0018972:	e8 e1 66 ff ff       	call   c000f058 <GDT::GDT()>
c0018977:	83 c4 10             	add    esp,0x10
c001897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001897e:	05 7c 09 00 00       	add    eax,0x97c
c0018983:	83 ec 0c             	sub    esp,0xc
c0018986:	50                   	push   eax
c0018987:	e8 2e 69 ff ff       	call   c000f2ba <IDT::IDT()>
c001898c:	83 c4 10             	add    esp,0x10
c001898f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018993:	05 7c 11 00 00       	add    eax,0x117c
c0018998:	83 ec 0c             	sub    esp,0xc
c001899b:	50                   	push   eax
c001899c:	e8 af 8a ff ff       	call   c0011450 <TSS::TSS()>
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189a8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00189af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189b3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00189bd:	90                   	nop
c00189be:	83 c4 0c             	add    esp,0xc
c00189c1:	c3                   	ret    

c00189c2 <CPU::displayFeatures()>:
c00189c2:	53                   	push   ebx
c00189c3:	83 ec 10             	sub    esp,0x10
c00189c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189ca:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00189d0:	68 b0 af 02 c0       	push   0xc002afb0
c00189d5:	e8 35 a1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00189da:	59                   	pop    ecx
c00189db:	58                   	pop    eax
c00189dc:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00189e2:	50                   	push   eax
c00189e3:	68 c1 af 02 c0       	push   0xc002afc1
c00189e8:	e8 22 a1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00189ed:	58                   	pop    eax
c00189ee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189f4:	5a                   	pop    edx
c00189f5:	c1 e8 0e             	shr    eax,0xe
c00189f8:	0f b6 c0             	movzx  eax,al
c00189fb:	50                   	push   eax
c00189fc:	68 d2 af 02 c0       	push   0xc002afd2
c0018a01:	e8 09 a1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a06:	59                   	pop    ecx
c0018a07:	58                   	pop    eax
c0018a08:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a0e:	66 c1 e8 06          	shr    ax,0x6
c0018a12:	0f b6 c0             	movzx  eax,al
c0018a15:	50                   	push   eax
c0018a16:	68 e3 af 02 c0       	push   0xc002afe3
c0018a1b:	e8 ef a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a20:	c7 04 24 b9 b4 02 c0 	mov    DWORD PTR [esp],0xc002b4b9
c0018a27:	e8 e3 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a2c:	83 c4 10             	add    esp,0x10
c0018a2f:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018a34:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018a3b:	74 05                	je     c0018a42 <CPU::displayFeatures()+0x80>
c0018a3d:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018a42:	52                   	push   edx
c0018a43:	52                   	push   edx
c0018a44:	50                   	push   eax
c0018a45:	68 f4 af 02 c0       	push   0xc002aff4
c0018a4a:	e8 c0 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a4f:	83 c4 10             	add    esp,0x10
c0018a52:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018a57:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018a5e:	78 05                	js     c0018a65 <CPU::displayFeatures()+0xa3>
c0018a60:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018a65:	51                   	push   ecx
c0018a66:	51                   	push   ecx
c0018a67:	50                   	push   eax
c0018a68:	68 0b b0 02 c0       	push   0xc002b00b
c0018a6d:	e8 9d a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a72:	83 c4 10             	add    esp,0x10
c0018a75:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018a7a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018a81:	75 05                	jne    c0018a88 <CPU::displayFeatures()+0xc6>
c0018a83:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018a88:	52                   	push   edx
c0018a89:	52                   	push   edx
c0018a8a:	50                   	push   eax
c0018a8b:	68 22 b0 02 c0       	push   0xc002b022
c0018a90:	e8 7a a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a95:	83 c4 10             	add    esp,0x10
c0018a98:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018a9d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018aa4:	75 05                	jne    c0018aab <CPU::displayFeatures()+0xe9>
c0018aa6:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018aab:	51                   	push   ecx
c0018aac:	51                   	push   ecx
c0018aad:	50                   	push   eax
c0018aae:	68 39 b0 02 c0       	push   0xc002b039
c0018ab3:	e8 57 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018ab8:	83 c4 10             	add    esp,0x10
c0018abb:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018ac0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ac7:	75 05                	jne    c0018ace <CPU::displayFeatures()+0x10c>
c0018ac9:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018ace:	52                   	push   edx
c0018acf:	52                   	push   edx
c0018ad0:	50                   	push   eax
c0018ad1:	68 50 b0 02 c0       	push   0xc002b050
c0018ad6:	e8 34 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018adb:	83 c4 10             	add    esp,0x10
c0018ade:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018ae3:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018aea:	75 05                	jne    c0018af1 <CPU::displayFeatures()+0x12f>
c0018aec:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018af1:	51                   	push   ecx
c0018af2:	51                   	push   ecx
c0018af3:	50                   	push   eax
c0018af4:	68 67 b0 02 c0       	push   0xc002b067
c0018af9:	e8 11 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018afe:	83 c4 10             	add    esp,0x10
c0018b01:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018b06:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018b0d:	75 05                	jne    c0018b14 <CPU::displayFeatures()+0x152>
c0018b0f:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018b14:	52                   	push   edx
c0018b15:	52                   	push   edx
c0018b16:	50                   	push   eax
c0018b17:	68 7e b0 02 c0       	push   0xc002b07e
c0018b1c:	e8 ee 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018b21:	83 c4 10             	add    esp,0x10
c0018b24:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018b29:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018b30:	75 05                	jne    c0018b37 <CPU::displayFeatures()+0x175>
c0018b32:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018b37:	51                   	push   ecx
c0018b38:	51                   	push   ecx
c0018b39:	50                   	push   eax
c0018b3a:	68 95 b0 02 c0       	push   0xc002b095
c0018b3f:	e8 cb 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018b44:	83 c4 10             	add    esp,0x10
c0018b47:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018b4c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018b53:	75 05                	jne    c0018b5a <CPU::displayFeatures()+0x198>
c0018b55:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018b5a:	52                   	push   edx
c0018b5b:	52                   	push   edx
c0018b5c:	50                   	push   eax
c0018b5d:	68 ac b0 02 c0       	push   0xc002b0ac
c0018b62:	e8 a8 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018b67:	83 c4 10             	add    esp,0x10
c0018b6a:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018b6f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018b76:	75 05                	jne    c0018b7d <CPU::displayFeatures()+0x1bb>
c0018b78:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018b7d:	51                   	push   ecx
c0018b7e:	51                   	push   ecx
c0018b7f:	50                   	push   eax
c0018b80:	68 c3 b0 02 c0       	push   0xc002b0c3
c0018b85:	e8 85 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018b8a:	83 c4 10             	add    esp,0x10
c0018b8d:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018b92:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018b99:	75 05                	jne    c0018ba0 <CPU::displayFeatures()+0x1de>
c0018b9b:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018ba0:	52                   	push   edx
c0018ba1:	52                   	push   edx
c0018ba2:	50                   	push   eax
c0018ba3:	68 da b0 02 c0       	push   0xc002b0da
c0018ba8:	e8 62 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018bad:	83 c4 10             	add    esp,0x10
c0018bb0:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018bb5:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018bbc:	75 05                	jne    c0018bc3 <CPU::displayFeatures()+0x201>
c0018bbe:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018bc3:	51                   	push   ecx
c0018bc4:	51                   	push   ecx
c0018bc5:	50                   	push   eax
c0018bc6:	68 f1 b0 02 c0       	push   0xc002b0f1
c0018bcb:	e8 3f 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018bd0:	83 c4 10             	add    esp,0x10
c0018bd3:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018bd8:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018bdf:	75 05                	jne    c0018be6 <CPU::displayFeatures()+0x224>
c0018be1:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018be6:	52                   	push   edx
c0018be7:	52                   	push   edx
c0018be8:	50                   	push   eax
c0018be9:	68 08 b1 02 c0       	push   0xc002b108
c0018bee:	e8 1c 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018bf3:	83 c4 10             	add    esp,0x10
c0018bf6:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018bfb:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018c02:	78 05                	js     c0018c09 <CPU::displayFeatures()+0x247>
c0018c04:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018c09:	51                   	push   ecx
c0018c0a:	51                   	push   ecx
c0018c0b:	50                   	push   eax
c0018c0c:	68 1f b1 02 c0       	push   0xc002b11f
c0018c11:	e8 f9 9e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018c16:	83 c4 10             	add    esp,0x10
c0018c19:	b8 72 9a 02 c0       	mov    eax,0xc0029a72
c0018c1e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018c25:	75 05                	jne    c0018c2c <CPU::displayFeatures()+0x26a>
c0018c27:	b8 76 9a 02 c0       	mov    eax,0xc0029a76
c0018c2c:	52                   	push   edx
c0018c2d:	52                   	push   edx
c0018c2e:	50                   	push   eax
c0018c2f:	68 36 b1 02 c0       	push   0xc002b136
c0018c34:	e8 d6 9e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018c39:	83 c4 18             	add    esp,0x18
c0018c3c:	5b                   	pop    ebx
c0018c3d:	c3                   	ret    

c0018c3e <CPU::detectFeatures()>:
c0018c3e:	55                   	push   ebp
c0018c3f:	57                   	push   edi
c0018c40:	56                   	push   esi
c0018c41:	53                   	push   ebx
c0018c42:	83 ec 50             	sub    esp,0x50
c0018c45:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018c49:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018c53:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018c5a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018c60:	6a 0d                	push   0xd
c0018c62:	6a 00                	push   0x0
c0018c64:	57                   	push   edi
c0018c65:	e8 0e 7b fe ff       	call   c0000778 <memset>
c0018c6a:	83 c4 10             	add    esp,0x10
c0018c6d:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0018c72:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018c79:	0f 84 20 09 00 00    	je     c001959f <CPU::detectFeatures()+0x961>
c0018c7f:	83 ec 0c             	sub    esp,0xc
c0018c82:	6a 10                	push   0x10
c0018c84:	e8 f3 fb ff ff       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c0018c89:	83 e0 01             	and    eax,0x1
c0018c8c:	8d 14 00             	lea    edx,[eax+eax*1]
c0018c8f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c95:	83 e0 fd             	and    eax,0xfffffffd
c0018c98:	09 d0                	or     eax,edx
c0018c9a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ca0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018ca7:	e8 d0 fb ff ff       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c0018cac:	83 e0 01             	and    eax,0x1
c0018caf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018cb6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cbc:	83 e0 fb             	and    eax,0xfffffffb
c0018cbf:	09 d0                	or     eax,edx
c0018cc1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cc7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018cce:	e8 a9 fb ff ff       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c0018cd3:	83 e0 01             	and    eax,0x1
c0018cd6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018cdd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ce3:	83 e0 f7             	and    eax,0xfffffff7
c0018ce6:	09 d0                	or     eax,edx
c0018ce8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cee:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018cf5:	e8 82 fb ff ff       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c0018cfa:	83 e0 01             	and    eax,0x1
c0018cfd:	c1 e0 04             	shl    eax,0x4
c0018d00:	88 c2                	mov    dl,al
c0018d02:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d08:	83 e0 ef             	and    eax,0xffffffef
c0018d0b:	09 d0                	or     eax,edx
c0018d0d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d13:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018d1a:	e8 5d fb ff ff       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c0018d1f:	83 e0 01             	and    eax,0x1
c0018d22:	c1 e0 05             	shl    eax,0x5
c0018d25:	88 c2                	mov    dl,al
c0018d27:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d2d:	83 e0 df             	and    eax,0xffffffdf
c0018d30:	09 d0                	or     eax,edx
c0018d32:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d38:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018d3f:	e8 38 fb ff ff       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c0018d44:	83 e0 01             	and    eax,0x1
c0018d47:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d4a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d50:	83 e0 fd             	and    eax,0xfffffffd
c0018d53:	09 d0                	or     eax,edx
c0018d55:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d5b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018d62:	e8 15 fb ff ff       	call   c001887c <CPU::cpuidCheckEDX(unsigned int)>
c0018d67:	83 e0 01             	and    eax,0x1
c0018d6a:	c1 e0 06             	shl    eax,0x6
c0018d6d:	88 c2                	mov    dl,al
c0018d6f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d75:	83 e0 bf             	and    eax,0xffffffbf
c0018d78:	09 d0                	or     eax,edx
c0018d7a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d80:	58                   	pop    eax
c0018d81:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018d85:	56                   	push   esi
c0018d86:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018d8a:	55                   	push   ebp
c0018d8b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d8f:	50                   	push   eax
c0018d90:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018d94:	52                   	push   edx
c0018d95:	6a 00                	push   0x0
c0018d97:	e8 5c fa ff ff       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d9c:	83 c4 1c             	add    esp,0x1c
c0018d9f:	6a 04                	push   0x4
c0018da1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018da5:	50                   	push   eax
c0018da6:	57                   	push   edi
c0018da7:	e8 98 79 fe ff       	call   c0000744 <memcpy>
c0018dac:	83 c4 0c             	add    esp,0xc
c0018daf:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018db5:	6a 04                	push   0x4
c0018db7:	56                   	push   esi
c0018db8:	50                   	push   eax
c0018db9:	e8 86 79 fe ff       	call   c0000744 <memcpy>
c0018dbe:	83 c4 0c             	add    esp,0xc
c0018dc1:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018dc7:	6a 04                	push   0x4
c0018dc9:	55                   	push   ebp
c0018dca:	50                   	push   eax
c0018dcb:	e8 74 79 fe ff       	call   c0000744 <memcpy>
c0018dd0:	58                   	pop    eax
c0018dd1:	5a                   	pop    edx
c0018dd2:	68 4d b1 02 c0       	push   0xc002b14d
c0018dd7:	57                   	push   edi
c0018dd8:	e8 e3 7a fe ff       	call   c00008c0 <strcmp>
c0018ddd:	83 c4 10             	add    esp,0x10
c0018de0:	85 c0                	test   eax,eax
c0018de2:	75 0f                	jne    c0018df3 <CPU::detectFeatures()+0x1b5>
c0018de4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018dee:	e9 22 02 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018df3:	50                   	push   eax
c0018df4:	50                   	push   eax
c0018df5:	68 5a b1 02 c0       	push   0xc002b15a
c0018dfa:	57                   	push   edi
c0018dfb:	e8 c0 7a fe ff       	call   c00008c0 <strcmp>
c0018e00:	83 c4 10             	add    esp,0x10
c0018e03:	85 c0                	test   eax,eax
c0018e05:	74 dd                	je     c0018de4 <CPU::detectFeatures()+0x1a6>
c0018e07:	51                   	push   ecx
c0018e08:	51                   	push   ecx
c0018e09:	68 67 b1 02 c0       	push   0xc002b167
c0018e0e:	57                   	push   edi
c0018e0f:	e8 ac 7a fe ff       	call   c00008c0 <strcmp>
c0018e14:	83 c4 10             	add    esp,0x10
c0018e17:	85 c0                	test   eax,eax
c0018e19:	74 2a                	je     c0018e45 <CPU::detectFeatures()+0x207>
c0018e1b:	52                   	push   edx
c0018e1c:	52                   	push   edx
c0018e1d:	68 74 b1 02 c0       	push   0xc002b174
c0018e22:	57                   	push   edi
c0018e23:	e8 98 7a fe ff       	call   c00008c0 <strcmp>
c0018e28:	83 c4 10             	add    esp,0x10
c0018e2b:	85 c0                	test   eax,eax
c0018e2d:	74 16                	je     c0018e45 <CPU::detectFeatures()+0x207>
c0018e2f:	50                   	push   eax
c0018e30:	50                   	push   eax
c0018e31:	68 81 b1 02 c0       	push   0xc002b181
c0018e36:	57                   	push   edi
c0018e37:	e8 84 7a fe ff       	call   c00008c0 <strcmp>
c0018e3c:	83 c4 10             	add    esp,0x10
c0018e3f:	85 c0                	test   eax,eax
c0018e41:	74 48                	je     c0018e8b <CPU::detectFeatures()+0x24d>
c0018e43:	eb 0f                	jmp    c0018e54 <CPU::detectFeatures()+0x216>
c0018e45:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018e4f:	e9 c1 01 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018e54:	50                   	push   eax
c0018e55:	50                   	push   eax
c0018e56:	68 8e b1 02 c0       	push   0xc002b18e
c0018e5b:	57                   	push   edi
c0018e5c:	e8 5f 7a fe ff       	call   c00008c0 <strcmp>
c0018e61:	83 c4 10             	add    esp,0x10
c0018e64:	85 c0                	test   eax,eax
c0018e66:	74 23                	je     c0018e8b <CPU::detectFeatures()+0x24d>
c0018e68:	50                   	push   eax
c0018e69:	50                   	push   eax
c0018e6a:	68 9b b1 02 c0       	push   0xc002b19b
c0018e6f:	57                   	push   edi
c0018e70:	e8 4b 7a fe ff       	call   c00008c0 <strcmp>
c0018e75:	83 c4 10             	add    esp,0x10
c0018e78:	85 c0                	test   eax,eax
c0018e7a:	75 1e                	jne    c0018e9a <CPU::detectFeatures()+0x25c>
c0018e7c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e86:	e9 8a 01 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018e8b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018e95:	e9 7b 01 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018e9a:	50                   	push   eax
c0018e9b:	50                   	push   eax
c0018e9c:	68 a8 b1 02 c0       	push   0xc002b1a8
c0018ea1:	57                   	push   edi
c0018ea2:	e8 19 7a fe ff       	call   c00008c0 <strcmp>
c0018ea7:	83 c4 10             	add    esp,0x10
c0018eaa:	85 c0                	test   eax,eax
c0018eac:	75 0f                	jne    c0018ebd <CPU::detectFeatures()+0x27f>
c0018eae:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018eb8:	e9 58 01 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018ebd:	50                   	push   eax
c0018ebe:	50                   	push   eax
c0018ebf:	68 67 b1 02 c0       	push   0xc002b167
c0018ec4:	57                   	push   edi
c0018ec5:	e8 f6 79 fe ff       	call   c00008c0 <strcmp>
c0018eca:	83 c4 10             	add    esp,0x10
c0018ecd:	85 c0                	test   eax,eax
c0018ecf:	75 0f                	jne    c0018ee0 <CPU::detectFeatures()+0x2a2>
c0018ed1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018edb:	e9 35 01 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018ee0:	50                   	push   eax
c0018ee1:	50                   	push   eax
c0018ee2:	68 b5 b1 02 c0       	push   0xc002b1b5
c0018ee7:	57                   	push   edi
c0018ee8:	e8 d3 79 fe ff       	call   c00008c0 <strcmp>
c0018eed:	83 c4 10             	add    esp,0x10
c0018ef0:	85 c0                	test   eax,eax
c0018ef2:	75 0f                	jne    c0018f03 <CPU::detectFeatures()+0x2c5>
c0018ef4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018efe:	e9 12 01 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018f03:	51                   	push   ecx
c0018f04:	51                   	push   ecx
c0018f05:	68 c2 b1 02 c0       	push   0xc002b1c2
c0018f0a:	57                   	push   edi
c0018f0b:	e8 b0 79 fe ff       	call   c00008c0 <strcmp>
c0018f10:	83 c4 10             	add    esp,0x10
c0018f13:	85 c0                	test   eax,eax
c0018f15:	75 0f                	jne    c0018f26 <CPU::detectFeatures()+0x2e8>
c0018f17:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018f21:	e9 ef 00 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018f26:	52                   	push   edx
c0018f27:	52                   	push   edx
c0018f28:	68 cf b1 02 c0       	push   0xc002b1cf
c0018f2d:	57                   	push   edi
c0018f2e:	e8 8d 79 fe ff       	call   c00008c0 <strcmp>
c0018f33:	83 c4 10             	add    esp,0x10
c0018f36:	85 c0                	test   eax,eax
c0018f38:	75 0f                	jne    c0018f49 <CPU::detectFeatures()+0x30b>
c0018f3a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018f44:	e9 cc 00 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018f49:	50                   	push   eax
c0018f4a:	50                   	push   eax
c0018f4b:	68 dc b1 02 c0       	push   0xc002b1dc
c0018f50:	57                   	push   edi
c0018f51:	e8 6a 79 fe ff       	call   c00008c0 <strcmp>
c0018f56:	83 c4 10             	add    esp,0x10
c0018f59:	85 c0                	test   eax,eax
c0018f5b:	75 0f                	jne    c0018f6c <CPU::detectFeatures()+0x32e>
c0018f5d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018f67:	e9 a9 00 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018f6c:	50                   	push   eax
c0018f6d:	50                   	push   eax
c0018f6e:	68 e9 b1 02 c0       	push   0xc002b1e9
c0018f73:	57                   	push   edi
c0018f74:	e8 47 79 fe ff       	call   c00008c0 <strcmp>
c0018f79:	83 c4 10             	add    esp,0x10
c0018f7c:	85 c0                	test   eax,eax
c0018f7e:	75 0f                	jne    c0018f8f <CPU::detectFeatures()+0x351>
c0018f80:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018f8a:	e9 86 00 00 00       	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018f8f:	50                   	push   eax
c0018f90:	50                   	push   eax
c0018f91:	68 f6 b1 02 c0       	push   0xc002b1f6
c0018f96:	57                   	push   edi
c0018f97:	e8 24 79 fe ff       	call   c00008c0 <strcmp>
c0018f9c:	83 c4 10             	add    esp,0x10
c0018f9f:	85 c0                	test   eax,eax
c0018fa1:	75 0c                	jne    c0018faf <CPU::detectFeatures()+0x371>
c0018fa3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018fad:	eb 66                	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018faf:	50                   	push   eax
c0018fb0:	50                   	push   eax
c0018fb1:	68 03 b2 02 c0       	push   0xc002b203
c0018fb6:	57                   	push   edi
c0018fb7:	e8 04 79 fe ff       	call   c00008c0 <strcmp>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	85 c0                	test   eax,eax
c0018fc1:	75 0c                	jne    c0018fcf <CPU::detectFeatures()+0x391>
c0018fc3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018fcd:	eb 46                	jmp    c0019015 <CPU::detectFeatures()+0x3d7>
c0018fcf:	50                   	push   eax
c0018fd0:	50                   	push   eax
c0018fd1:	68 10 b2 02 c0       	push   0xc002b210
c0018fd6:	57                   	push   edi
c0018fd7:	e8 e4 78 fe ff       	call   c00008c0 <strcmp>
c0018fdc:	83 c4 10             	add    esp,0x10
c0018fdf:	85 c0                	test   eax,eax
c0018fe1:	74 e0                	je     c0018fc3 <CPU::detectFeatures()+0x385>
c0018fe3:	50                   	push   eax
c0018fe4:	50                   	push   eax
c0018fe5:	68 1d b2 02 c0       	push   0xc002b21d
c0018fea:	57                   	push   edi
c0018feb:	e8 d0 78 fe ff       	call   c00008c0 <strcmp>
c0018ff0:	83 c4 10             	add    esp,0x10
c0018ff3:	85 c0                	test   eax,eax
c0018ff5:	74 cc                	je     c0018fc3 <CPU::detectFeatures()+0x385>
c0018ff7:	51                   	push   ecx
c0018ff8:	51                   	push   ecx
c0018ff9:	68 2a b2 02 c0       	push   0xc002b22a
c0018ffe:	57                   	push   edi
c0018fff:	e8 bc 78 fe ff       	call   c00008c0 <strcmp>
c0019004:	83 c4 10             	add    esp,0x10
c0019007:	85 c0                	test   eax,eax
c0019009:	74 b8                	je     c0018fc3 <CPU::detectFeatures()+0x385>
c001900b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019015:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001901a:	0f 86 be 00 00 00    	jbe    c00190de <CPU::detectFeatures()+0x4a0>
c0019020:	83 ec 0c             	sub    esp,0xc
c0019023:	68 80 00 00 00       	push   0x80
c0019028:	e8 ab f8 ff ff       	call   c00188d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001902d:	83 e0 01             	and    eax,0x1
c0019030:	c1 e0 06             	shl    eax,0x6
c0019033:	88 c2                	mov    dl,al
c0019035:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001903b:	83 e0 bf             	and    eax,0xffffffbf
c001903e:	09 d0                	or     eax,edx
c0019040:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019046:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001904d:	e8 86 f8 ff ff       	call   c00188d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019052:	83 e0 01             	and    eax,0x1
c0019055:	c1 e0 04             	shl    eax,0x4
c0019058:	88 c2                	mov    dl,al
c001905a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019060:	83 e0 ef             	and    eax,0xffffffef
c0019063:	09 d0                	or     eax,edx
c0019065:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001906b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019072:	e8 61 f8 ff ff       	call   c00188d8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019077:	c1 e0 07             	shl    eax,0x7
c001907a:	88 c2                	mov    dl,al
c001907c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019082:	83 e0 7f             	and    eax,0x7f
c0019085:	09 d0                	or     eax,edx
c0019087:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001908d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019094:	e8 6d f8 ff ff       	call   c0018906 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019099:	83 e0 01             	and    eax,0x1
c001909c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190a3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190a9:	83 e0 f7             	and    eax,0xfffffff7
c00190ac:	09 d0                	or     eax,edx
c00190ae:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190b4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00190bb:	e8 46 f8 ff ff       	call   c0018906 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00190c0:	83 c4 10             	add    esp,0x10
c00190c3:	83 e0 01             	and    eax,0x1
c00190c6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190cd:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00190d3:	83 e0 fb             	and    eax,0xfffffffb
c00190d6:	09 d0                	or     eax,edx
c00190d8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00190de:	83 ec 0c             	sub    esp,0xc
c00190e1:	56                   	push   esi
c00190e2:	55                   	push   ebp
c00190e3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00190e7:	57                   	push   edi
c00190e8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190ec:	50                   	push   eax
c00190ed:	6a 01                	push   0x1
c00190ef:	e8 04 f7 ff ff       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00190f8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00190fe:	88 ca                	mov    dl,cl
c0019100:	83 e0 f0             	and    eax,0xfffffff0
c0019103:	83 e2 0f             	and    edx,0xf
c0019106:	09 d0                	or     eax,edx
c0019108:	88 ca                	mov    dl,cl
c001910a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019110:	c0 ea 04             	shr    dl,0x4
c0019113:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019117:	0f b6 c2             	movzx  eax,dl
c001911a:	83 c4 20             	add    esp,0x20
c001911d:	c1 e0 06             	shl    eax,0x6
c0019120:	89 c5                	mov    ebp,eax
c0019122:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019128:	66 25 3f c0          	and    ax,0xc03f
c001912c:	09 e8                	or     eax,ebp
c001912e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019135:	89 c8                	mov    eax,ecx
c0019137:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001913d:	c1 e8 08             	shr    eax,0x8
c0019140:	83 e2 3f             	and    edx,0x3f
c0019143:	83 e0 0f             	and    eax,0xf
c0019146:	89 c5                	mov    ebp,eax
c0019148:	c1 e5 06             	shl    ebp,0x6
c001914b:	09 d5                	or     ebp,edx
c001914d:	89 ea                	mov    edx,ebp
c001914f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019155:	88 c2                	mov    dl,al
c0019157:	c0 ea 02             	shr    dl,0x2
c001915a:	89 d5                	mov    ebp,edx
c001915c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019162:	83 e2 c0             	and    edx,0xffffffc0
c0019165:	09 d5                	or     ebp,edx
c0019167:	89 ea                	mov    edx,ebp
c0019169:	89 cd                	mov    ebp,ecx
c001916b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019171:	c1 ed 0c             	shr    ebp,0xc
c0019174:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001917a:	83 e5 03             	and    ebp,0x3
c001917d:	83 e2 cf             	and    edx,0xffffffcf
c0019180:	c1 e5 04             	shl    ebp,0x4
c0019183:	09 d5                	or     ebp,edx
c0019185:	3c 06                	cmp    al,0x6
c0019187:	89 ea                	mov    edx,ebp
c0019189:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001918f:	74 04                	je     c0019195 <CPU::detectFeatures()+0x557>
c0019191:	3c 0f                	cmp    al,0xf
c0019193:	75 5c                	jne    c00191f1 <CPU::detectFeatures()+0x5b3>
c0019195:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019199:	89 cd                	mov    ebp,ecx
c001919b:	c1 ed 10             	shr    ebp,0x10
c001919e:	c1 e5 04             	shl    ebp,0x4
c00191a1:	09 ea                	or     edx,ebp
c00191a3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00191a9:	0f b6 d2             	movzx  edx,dl
c00191ac:	66 81 e5 3f c0       	and    bp,0xc03f
c00191b1:	c1 e2 06             	shl    edx,0x6
c00191b4:	09 ea                	or     edx,ebp
c00191b6:	3c 0f                	cmp    al,0xf
c00191b8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00191bf:	75 30                	jne    c00191f1 <CPU::detectFeatures()+0x5b3>
c00191c1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00191c7:	c1 e9 14             	shr    ecx,0x14
c00191ca:	83 e0 3f             	and    eax,0x3f
c00191cd:	83 c1 0f             	add    ecx,0xf
c00191d0:	88 ca                	mov    dl,cl
c00191d2:	c0 e9 02             	shr    cl,0x2
c00191d5:	c1 e2 06             	shl    edx,0x6
c00191d8:	09 d0                	or     eax,edx
c00191da:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00191e0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00191e6:	83 e0 c0             	and    eax,0xffffffc0
c00191e9:	09 c1                	or     ecx,eax
c00191eb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00191f1:	83 ec 0c             	sub    esp,0xc
c00191f4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00191fb:	56                   	push   esi
c00191fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019200:	50                   	push   eax
c0019201:	57                   	push   edi
c0019202:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019206:	55                   	push   ebp
c0019207:	68 00 00 00 80       	push   0x80000000
c001920c:	e8 e7 f5 ff ff       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019211:	83 c4 20             	add    esp,0x20
c0019214:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001921c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019220:	76 1e                	jbe    c0019240 <CPU::detectFeatures()+0x602>
c0019222:	83 ec 0c             	sub    esp,0xc
c0019225:	56                   	push   esi
c0019226:	50                   	push   eax
c0019227:	57                   	push   edi
c0019228:	55                   	push   ebp
c0019229:	68 01 00 00 80       	push   0x80000001
c001922e:	e8 c5 f5 ff ff       	call   c00187f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019233:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001923d:	83 c4 20             	add    esp,0x20
c0019240:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019246:	83 f8 01             	cmp    eax,0x1
c0019249:	75 6f                	jne    c00192ba <CPU::detectFeatures()+0x67c>
c001924b:	51                   	push   ecx
c001924c:	51                   	push   ecx
c001924d:	68 36 b2 02 c0       	push   0xc002b236
c0019252:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019256:	56                   	push   esi
c0019257:	e8 d8 75 fe ff       	call   c0000834 <strcpy>
c001925c:	5f                   	pop    edi
c001925d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019263:	5d                   	pop    ebp
c0019264:	66 c1 e8 06          	shr    ax,0x6
c0019268:	0f b6 c0             	movzx  eax,al
c001926b:	50                   	push   eax
c001926c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019272:	c1 e8 0e             	shr    eax,0xe
c0019275:	0f b6 c0             	movzx  eax,al
c0019278:	50                   	push   eax
c0019279:	e8 24 f2 ff ff       	call   c00184a2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001927e:	5a                   	pop    edx
c001927f:	59                   	pop    ecx
c0019280:	50                   	push   eax
c0019281:	56                   	push   esi
c0019282:	e8 ed 76 fe ff       	call   c0000974 <strcat>
c0019287:	5f                   	pop    edi
c0019288:	5d                   	pop    ebp
c0019289:	56                   	push   esi
c001928a:	53                   	push   ebx
c001928b:	e8 88 ae ff ff       	call   c0014118 <Device::setName(char const*)>
c0019290:	58                   	pop    eax
c0019291:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019297:	5a                   	pop    edx
c0019298:	68 3d b2 02 c0       	push   0xc002b23d
c001929d:	50                   	push   eax
c001929e:	e8 1d 76 fe ff       	call   c00008c0 <strcmp>
c00192a3:	83 c4 10             	add    esp,0x10
c00192a6:	85 c0                	test   eax,eax
c00192a8:	0f 85 71 03 00 00    	jne    c001961f <CPU::detectFeatures()+0x9e1>
c00192ae:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00192b5:	e9 65 03 00 00       	jmp    c001961f <CPU::detectFeatures()+0x9e1>
c00192ba:	83 f8 02             	cmp    eax,0x2
c00192bd:	0f 85 b5 00 00 00    	jne    c0019378 <CPU::detectFeatures()+0x73a>
c00192c3:	57                   	push   edi
c00192c4:	57                   	push   edi
c00192c5:	68 4f b2 02 c0       	push   0xc002b24f
c00192ca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192ce:	56                   	push   esi
c00192cf:	e8 60 75 fe ff       	call   c0000834 <strcpy>
c00192d4:	5d                   	pop    ebp
c00192d5:	58                   	pop    eax
c00192d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192dc:	66 c1 e8 06          	shr    ax,0x6
c00192e0:	0f b6 c0             	movzx  eax,al
c00192e3:	50                   	push   eax
c00192e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192ea:	c1 e8 0e             	shr    eax,0xe
c00192ed:	0f b6 c0             	movzx  eax,al
c00192f0:	50                   	push   eax
c00192f1:	e8 18 f0 ff ff       	call   c001830e <CPU::lookupAMDName(unsigned char, unsigned char)>
c00192f6:	5a                   	pop    edx
c00192f7:	59                   	pop    ecx
c00192f8:	50                   	push   eax
c00192f9:	56                   	push   esi
c00192fa:	e8 75 76 fe ff       	call   c0000974 <strcat>
c00192ff:	5f                   	pop    edi
c0019300:	5d                   	pop    ebp
c0019301:	56                   	push   esi
c0019302:	53                   	push   ebx
c0019303:	e8 10 ae ff ff       	call   c0014118 <Device::setName(char const*)>
c0019308:	58                   	pop    eax
c0019309:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001930f:	5a                   	pop    edx
c0019310:	68 54 b2 02 c0       	push   0xc002b254
c0019315:	50                   	push   eax
c0019316:	e8 a5 75 fe ff       	call   c00008c0 <strcmp>
c001931b:	83 c4 10             	add    esp,0x10
c001931e:	85 c0                	test   eax,eax
c0019320:	75 20                	jne    c0019342 <CPU::detectFeatures()+0x704>
c0019322:	8b 15 08 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd08
c0019328:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001932e:	a8 01                	test   al,0x1
c0019330:	74 10                	je     c0019342 <CPU::detectFeatures()+0x704>
c0019332:	83 e0 fe             	and    eax,0xfffffffe
c0019335:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001933b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019342:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019348:	c1 e8 0e             	shr    eax,0xe
c001934b:	3c 05                	cmp    al,0x5
c001934d:	0f 85 cc 02 00 00    	jne    c001961f <CPU::detectFeatures()+0x9e1>
c0019353:	56                   	push   esi
c0019354:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001935a:	83 e0 0f             	and    eax,0xf
c001935d:	50                   	push   eax
c001935e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019364:	66 c1 e8 06          	shr    ax,0x6
c0019368:	0f b6 c0             	movzx  eax,al
c001936b:	50                   	push   eax
c001936c:	6a 05                	push   0x5
c001936e:	e8 11 f4 ff ff       	call   c0018784 <CPU::AMD_K6_writeback(int, int, int)>
c0019373:	e9 1f 02 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x959>
c0019378:	8d 50 fd             	lea    edx,[eax-0x3]
c001937b:	83 fa 01             	cmp    edx,0x1
c001937e:	76 09                	jbe    c0019389 <CPU::detectFeatures()+0x74b>
c0019380:	83 f8 06             	cmp    eax,0x6
c0019383:	0f 85 91 01 00 00    	jne    c001951a <CPU::detectFeatures()+0x8dc>
c0019389:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001938f:	c1 ea 0e             	shr    edx,0xe
c0019392:	80 fa 05             	cmp    dl,0x5
c0019395:	75 7b                	jne    c0019412 <CPU::detectFeatures()+0x7d4>
c0019397:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001939d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00193a2:	66 81 fa 00 01       	cmp    dx,0x100
c00193a7:	75 0c                	jne    c00193b5 <CPU::detectFeatures()+0x777>
c00193a9:	51                   	push   ecx
c00193aa:	51                   	push   ecx
c00193ab:	68 5b b2 02 c0       	push   0xc002b25b
c00193b0:	e9 dc 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c00193b5:	66 81 fa 00 02       	cmp    dx,0x200
c00193ba:	75 0c                	jne    c00193c8 <CPU::detectFeatures()+0x78a>
c00193bc:	52                   	push   edx
c00193bd:	52                   	push   edx
c00193be:	68 6e b2 02 c0       	push   0xc002b26e
c00193c3:	e9 c9 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c00193c8:	66 81 fa 40 02       	cmp    dx,0x240
c00193cd:	75 0c                	jne    c00193db <CPU::detectFeatures()+0x79d>
c00193cf:	50                   	push   eax
c00193d0:	50                   	push   eax
c00193d1:	68 80 b2 02 c0       	push   0xc002b280
c00193d6:	e9 b6 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c00193db:	83 f8 06             	cmp    eax,0x6
c00193de:	75 0c                	jne    c00193ec <CPU::detectFeatures()+0x7ae>
c00193e0:	50                   	push   eax
c00193e1:	50                   	push   eax
c00193e2:	68 92 b2 02 c0       	push   0xc002b292
c00193e7:	e9 a5 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c00193ec:	83 f8 04             	cmp    eax,0x4
c00193ef:	75 0c                	jne    c00193fd <CPU::detectFeatures()+0x7bf>
c00193f1:	50                   	push   eax
c00193f2:	50                   	push   eax
c00193f3:	68 9e b2 02 c0       	push   0xc002b29e
c00193f8:	e9 94 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c00193fd:	83 f8 03             	cmp    eax,0x3
c0019400:	0f 85 19 02 00 00    	jne    c001961f <CPU::detectFeatures()+0x9e1>
c0019406:	50                   	push   eax
c0019407:	50                   	push   eax
c0019408:	68 a6 b2 02 c0       	push   0xc002b2a6
c001940d:	e9 7f 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019412:	80 fa 06             	cmp    dl,0x6
c0019415:	0f 85 db 00 00 00    	jne    c00194f6 <CPU::detectFeatures()+0x8b8>
c001941b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019421:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019426:	66 81 fa 80 01       	cmp    dx,0x180
c001942b:	75 0c                	jne    c0019439 <CPU::detectFeatures()+0x7fb>
c001942d:	50                   	push   eax
c001942e:	50                   	push   eax
c001942f:	68 b1 b2 02 c0       	push   0xc002b2b1
c0019434:	e9 58 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019439:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001943f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019444:	75 0c                	jne    c0019452 <CPU::detectFeatures()+0x814>
c0019446:	50                   	push   eax
c0019447:	50                   	push   eax
c0019448:	68 c1 b2 02 c0       	push   0xc002b2c1
c001944d:	e9 3f 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019452:	66 81 fa 40 02       	cmp    dx,0x240
c0019457:	75 0c                	jne    c0019465 <CPU::detectFeatures()+0x827>
c0019459:	55                   	push   ebp
c001945a:	55                   	push   ebp
c001945b:	68 c8 b2 02 c0       	push   0xc002b2c8
c0019460:	e9 2c 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019465:	66 81 fa 80 02       	cmp    dx,0x280
c001946a:	75 0c                	jne    c0019478 <CPU::detectFeatures()+0x83a>
c001946c:	57                   	push   edi
c001946d:	57                   	push   edi
c001946e:	68 d1 b2 02 c0       	push   0xc002b2d1
c0019473:	e9 19 01 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019478:	66 81 fa 40 03       	cmp    dx,0x340
c001947d:	74 ed                	je     c001946c <CPU::detectFeatures()+0x82e>
c001947f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019484:	75 0c                	jne    c0019492 <CPU::detectFeatures()+0x854>
c0019486:	56                   	push   esi
c0019487:	56                   	push   esi
c0019488:	68 d8 b2 02 c0       	push   0xc002b2d8
c001948d:	e9 ff 00 00 00       	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019492:	83 f8 06             	cmp    eax,0x6
c0019495:	0f 84 45 ff ff ff    	je     c00193e0 <CPU::detectFeatures()+0x7a2>
c001949b:	83 f8 04             	cmp    eax,0x4
c001949e:	0f 84 4d ff ff ff    	je     c00193f1 <CPU::detectFeatures()+0x7b3>
c00194a4:	83 f8 03             	cmp    eax,0x3
c00194a7:	0f 85 72 01 00 00    	jne    c001961f <CPU::detectFeatures()+0x9e1>
c00194ad:	51                   	push   ecx
c00194ae:	51                   	push   ecx
c00194af:	68 e1 b2 02 c0       	push   0xc002b2e1
c00194b4:	53                   	push   ebx
c00194b5:	e8 5e ac ff ff       	call   c0014118 <Device::setName(char const*)>
c00194ba:	b1 c1                	mov    cl,0xc1
c00194bc:	88 c8                	mov    al,cl
c00194be:	e6 22                	out    0x22,al
c00194c0:	e4 23                	in     al,0x23
c00194c2:	88 c2                	mov    dl,al
c00194c4:	88 c8                	mov    al,cl
c00194c6:	e6 22                	out    0x22,al
c00194c8:	88 d0                	mov    al,dl
c00194ca:	83 c8 10             	or     eax,0x10
c00194cd:	e6 23                	out    0x23,al
c00194cf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00194d6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194d9:	89 d0                	mov    eax,edx
c00194db:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00194e1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00194e5:	40                   	inc    eax
c00194e6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194ec:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194f1:	e9 a1 00 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x959>
c00194f6:	83 f8 06             	cmp    eax,0x6
c00194f9:	0f 84 e1 fe ff ff    	je     c00193e0 <CPU::detectFeatures()+0x7a2>
c00194ff:	83 f8 04             	cmp    eax,0x4
c0019502:	0f 84 e9 fe ff ff    	je     c00193f1 <CPU::detectFeatures()+0x7b3>
c0019508:	83 f8 03             	cmp    eax,0x3
c001950b:	0f 85 0e 01 00 00    	jne    c001961f <CPU::detectFeatures()+0x9e1>
c0019511:	52                   	push   edx
c0019512:	52                   	push   edx
c0019513:	68 ec b2 02 c0       	push   0xc002b2ec
c0019518:	eb 77                	jmp    c0019591 <CPU::detectFeatures()+0x953>
c001951a:	83 f8 07             	cmp    eax,0x7
c001951d:	75 09                	jne    c0019528 <CPU::detectFeatures()+0x8ea>
c001951f:	50                   	push   eax
c0019520:	50                   	push   eax
c0019521:	68 f6 b2 02 c0       	push   0xc002b2f6
c0019526:	eb 69                	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019528:	83 f8 0a             	cmp    eax,0xa
c001952b:	75 09                	jne    c0019536 <CPU::detectFeatures()+0x8f8>
c001952d:	50                   	push   eax
c001952e:	50                   	push   eax
c001952f:	68 01 b3 02 c0       	push   0xc002b301
c0019534:	eb 5b                	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019536:	83 f8 0b             	cmp    eax,0xb
c0019539:	75 09                	jne    c0019544 <CPU::detectFeatures()+0x906>
c001953b:	50                   	push   eax
c001953c:	50                   	push   eax
c001953d:	68 09 b3 02 c0       	push   0xc002b309
c0019542:	eb 4d                	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019544:	83 f8 08             	cmp    eax,0x8
c0019547:	75 09                	jne    c0019552 <CPU::detectFeatures()+0x914>
c0019549:	50                   	push   eax
c001954a:	50                   	push   eax
c001954b:	68 12 b3 02 c0       	push   0xc002b312
c0019550:	eb 3f                	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019552:	83 f8 09             	cmp    eax,0x9
c0019555:	75 09                	jne    c0019560 <CPU::detectFeatures()+0x922>
c0019557:	50                   	push   eax
c0019558:	50                   	push   eax
c0019559:	68 1a b3 02 c0       	push   0xc002b31a
c001955e:	eb 31                	jmp    c0019591 <CPU::detectFeatures()+0x953>
c0019560:	83 f8 05             	cmp    eax,0x5
c0019563:	75 09                	jne    c001956e <CPU::detectFeatures()+0x930>
c0019565:	50                   	push   eax
c0019566:	50                   	push   eax
c0019567:	68 22 b3 02 c0       	push   0xc002b322
c001956c:	eb 23                	jmp    c0019591 <CPU::detectFeatures()+0x953>
c001956e:	83 f8 0c             	cmp    eax,0xc
c0019571:	75 09                	jne    c001957c <CPU::detectFeatures()+0x93e>
c0019573:	55                   	push   ebp
c0019574:	55                   	push   ebp
c0019575:	68 30 b3 02 c0       	push   0xc002b330
c001957a:	eb 15                	jmp    c0019591 <CPU::detectFeatures()+0x953>
c001957c:	83 f8 0d             	cmp    eax,0xd
c001957f:	75 09                	jne    c001958a <CPU::detectFeatures()+0x94c>
c0019581:	57                   	push   edi
c0019582:	57                   	push   edi
c0019583:	68 3b b3 02 c0       	push   0xc002b33b
c0019588:	eb 07                	jmp    c0019591 <CPU::detectFeatures()+0x953>
c001958a:	56                   	push   esi
c001958b:	56                   	push   esi
c001958c:	68 4f b3 02 c0       	push   0xc002b34f
c0019591:	53                   	push   ebx
c0019592:	e8 81 ab ff ff       	call   c0014118 <Device::setName(char const*)>
c0019597:	83 c4 10             	add    esp,0x10
c001959a:	e9 80 00 00 00       	jmp    c001961f <CPU::detectFeatures()+0x9e1>
c001959f:	51                   	push   ecx
c00195a0:	51                   	push   ecx
c00195a1:	68 9b b1 02 c0       	push   0xc002b19b
c00195a6:	57                   	push   edi
c00195a7:	e8 88 72 fe ff       	call   c0000834 <strcpy>
c00195ac:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195b6:	e8 f3 6c fe ff       	call   c00002ae <is486>
c00195bb:	83 c4 10             	add    esp,0x10
c00195be:	85 c0                	test   eax,eax
c00195c0:	74 2b                	je     c00195ed <CPU::detectFeatures()+0x9af>
c00195c2:	52                   	push   edx
c00195c3:	52                   	push   edx
c00195c4:	68 5b b3 02 c0       	push   0xc002b35b
c00195c9:	53                   	push   ebx
c00195ca:	e8 49 ab ff ff       	call   c0014118 <Device::setName(char const*)>
c00195cf:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00195d6:	0f 20 c0             	mov    eax,cr0
c00195d9:	83 e0 14             	and    eax,0x14
c00195dc:	83 c4 10             	add    esp,0x10
c00195df:	83 f8 04             	cmp    eax,0x4
c00195e2:	75 1f                	jne    c0019603 <CPU::detectFeatures()+0x9c5>
c00195e4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00195eb:	eb 32                	jmp    c001961f <CPU::detectFeatures()+0x9e1>
c00195ed:	50                   	push   eax
c00195ee:	50                   	push   eax
c00195ef:	68 66 b3 02 c0       	push   0xc002b366
c00195f4:	53                   	push   ebx
c00195f5:	e8 1e ab ff ff       	call   c0014118 <Device::setName(char const*)>
c00195fa:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019601:	eb d3                	jmp    c00195d6 <CPU::detectFeatures()+0x998>
c0019603:	e8 81 6c fe ff       	call   c0000289 <hasLegacyFPU>
c0019608:	83 e0 01             	and    eax,0x1
c001960b:	8d 14 00             	lea    edx,[eax+eax*1]
c001960e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019614:	83 e0 fd             	and    eax,0xfffffffd
c0019617:	09 d0                	or     eax,edx
c0019619:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001961f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019626:	83 c4 4c             	add    esp,0x4c
c0019629:	5b                   	pop    ebx
c001962a:	5e                   	pop    esi
c001962b:	5f                   	pop    edi
c001962c:	5d                   	pop    ebp
c001962d:	c3                   	ret    

c001962e <CPU::setupSMEP()>:
c001962e:	0f 20 e0             	mov    eax,cr4
c0019631:	0d 00 00 10 00       	or     eax,0x100000
c0019636:	0f 22 e0             	mov    cr4,eax
c0019639:	c3                   	ret    

c001963a <CPU::setupUMIP()>:
c001963a:	0f 20 e0             	mov    eax,cr4
c001963d:	80 cc 08             	or     ah,0x8
c0019640:	0f 22 e0             	mov    cr4,eax
c0019643:	c3                   	ret    

c0019644 <CPU::setupTSC()>:
c0019644:	0f 20 e0             	mov    eax,cr4
c0019647:	83 c8 04             	or     eax,0x4
c001964a:	0f 22 e0             	mov    cr4,eax
c001964d:	c3                   	ret    

c001964e <CPU::setupLargePages()>:
c001964e:	0f 20 e0             	mov    eax,cr4
c0019651:	83 c8 10             	or     eax,0x10
c0019654:	0f 22 e0             	mov    cr4,eax
c0019657:	c3                   	ret    

c0019658 <CPU::setupPAT()>:
c0019658:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001965d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019664:	74 2c                	je     c0019692 <CPU::setupPAT()+0x3a>
c0019666:	53                   	push   ebx
c0019667:	83 ec 10             	sub    esp,0x10
c001966a:	68 77 02 00 00       	push   0x277
c001966f:	50                   	push   eax
c0019670:	e8 73 57 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019675:	83 e2 f8             	and    edx,0xfffffff8
c0019678:	83 ca 01             	or     edx,0x1
c001967b:	52                   	push   edx
c001967c:	50                   	push   eax
c001967d:	68 77 02 00 00       	push   0x277
c0019682:	ff 35 08 dd 02 c0    	push   DWORD PTR ds:0xc002dd08
c0019688:	e8 87 57 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c001968d:	83 c4 28             	add    esp,0x28
c0019690:	5b                   	pop    ebx
c0019691:	c3                   	ret    
c0019692:	c3                   	ret    
c0019693:	90                   	nop

c0019694 <CPU::setupMTRR()>:
c0019694:	c3                   	ret    
c0019695:	90                   	nop

c0019696 <CPU::setupGlobalPages()>:
c0019696:	0f 20 e0             	mov    eax,cr4
c0019699:	0c 80                	or     al,0x80
c001969b:	0f 22 e0             	mov    cr4,eax
c001969e:	c3                   	ret    
c001969f:	90                   	nop

c00196a0 <CPU::allowUsermodeDataAccess()>:
c00196a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196a4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196ab:	74 03                	je     c00196b0 <CPU::allowUsermodeDataAccess()+0x10>
c00196ad:	0f 01 cb             	stac   
c00196b0:	c3                   	ret    
c00196b1:	90                   	nop

c00196b2 <CPU::prohibitUsermodeDataAccess()>:
c00196b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196b6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196bd:	74 03                	je     c00196c2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00196bf:	0f 01 ca             	clac   
c00196c2:	c3                   	ret    
c00196c3:	90                   	nop

c00196c4 <CPU::setupSMAP()>:
c00196c4:	0f 20 e0             	mov    eax,cr4
c00196c7:	0d 00 00 20 00       	or     eax,0x200000
c00196cc:	0f 22 e0             	mov    cr4,eax
c00196cf:	eb e1                	jmp    c00196b2 <CPU::prohibitUsermodeDataAccess()>
c00196d1:	90                   	nop

c00196d2 <CPU::setupFeatures()>:
c00196d2:	83 ec 0c             	sub    esp,0xc
c00196d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196d9:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00196e0:	74 07                	je     c00196e9 <CPU::setupFeatures()+0x17>
c00196e2:	52                   	push   edx
c00196e3:	e8 46 ff ff ff       	call   c001962e <CPU::setupSMEP()>
c00196e8:	58                   	pop    eax
c00196e9:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00196f0:	74 07                	je     c00196f9 <CPU::setupFeatures()+0x27>
c00196f2:	52                   	push   edx
c00196f3:	e8 cc ff ff ff       	call   c00196c4 <CPU::setupSMAP()>
c00196f8:	58                   	pop    eax
c00196f9:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019700:	74 07                	je     c0019709 <CPU::setupFeatures()+0x37>
c0019702:	52                   	push   edx
c0019703:	e8 32 ff ff ff       	call   c001963a <CPU::setupUMIP()>
c0019708:	58                   	pop    eax
c0019709:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019710:	74 07                	je     c0019719 <CPU::setupFeatures()+0x47>
c0019712:	52                   	push   edx
c0019713:	e8 2c ff ff ff       	call   c0019644 <CPU::setupTSC()>
c0019718:	58                   	pop    eax
c0019719:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019720:	74 07                	je     c0019729 <CPU::setupFeatures()+0x57>
c0019722:	52                   	push   edx
c0019723:	e8 26 ff ff ff       	call   c001964e <CPU::setupLargePages()>
c0019728:	59                   	pop    ecx
c0019729:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019730:	74 07                	je     c0019739 <CPU::setupFeatures()+0x67>
c0019732:	52                   	push   edx
c0019733:	e8 5e ff ff ff       	call   c0019696 <CPU::setupGlobalPages()>
c0019738:	58                   	pop    eax
c0019739:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019740:	74 0c                	je     c001974e <CPU::setupFeatures()+0x7c>
c0019742:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019746:	83 c4 0c             	add    esp,0xc
c0019749:	e9 0a ff ff ff       	jmp    c0019658 <CPU::setupPAT()>
c001974e:	83 c4 0c             	add    esp,0xc
c0019751:	c3                   	ret    

c0019752 <CPU::open(int, int, void*)>:
c0019752:	57                   	push   edi
c0019753:	56                   	push   esi
c0019754:	53                   	push   ebx
c0019755:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019759:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001975d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019763:	83 ec 0c             	sub    esp,0xc
c0019766:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001976c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019772:	50                   	push   eax
c0019773:	e8 5c 59 ff ff       	call   c000f0d4 <GDT::setup()>
c0019778:	83 c4 0c             	add    esp,0xc
c001977b:	6a 00                	push   0x0
c001977d:	68 ef be ad de       	push   0xdeadbeef
c0019782:	57                   	push   edi
c0019783:	e8 08 7d ff ff       	call   c0011490 <TSS::setup(unsigned long, unsigned long)>
c0019788:	89 3c 24             	mov    DWORD PTR [esp],edi
c001978b:	e8 e0 7c ff ff       	call   c0011470 <TSS::flush()>
c0019790:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019796:	89 04 24             	mov    DWORD PTR [esp],eax
c0019799:	e8 92 5b ff ff       	call   c000f330 <IDT::setup()>
c001979e:	b8 00 04 00 00       	mov    eax,0x400
c00197a3:	0f 23 f8             	mov    db7,eax
c00197a6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00197b0:	e8 28 67 ff ff       	call   c000fedd <Phys::allocatePage()>
c00197b5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00197bb:	89 30                	mov    DWORD PTR [eax],esi
c00197bd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00197c3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00197c6:	58                   	pop    eax
c00197c7:	5a                   	pop    edx
c00197c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197ce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00197d2:	e8 eb 8c ff ff       	call   c00124c2 <VAS::setCPUSpecific(unsigned long)>
c00197d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197da:	e8 5f f4 ff ff       	call   c0018c3e <CPU::detectFeatures()>
c00197df:	e8 fd bc ff ff       	call   c00154e1 <setupInterruptController()>
c00197e4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00197ea:	a1 20 dd 02 c0       	mov    eax,ds:0xc002dd20
c00197ef:	83 e0 10             	and    eax,0x10
c00197f2:	83 f8 01             	cmp    eax,0x1
c00197f5:	19 c0                	sbb    eax,eax
c00197f7:	83 e0 46             	and    eax,0x46
c00197fa:	83 c0 1e             	add    eax,0x1e
c00197fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0019800:	e8 bb d1 ff ff       	call   c00169c0 <setupTimer(int)>
c0019805:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001980b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001980e:	e8 bf fe ff ff       	call   c00196d2 <CPU::setupFeatures()>
c0019813:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019816:	e8 a7 f1 ff ff       	call   c00189c2 <CPU::displayFeatures()>
c001981b:	83 c4 10             	add    esp,0x10
c001981e:	31 c0                	xor    eax,eax
c0019820:	5b                   	pop    ebx
c0019821:	5e                   	pop    esi
c0019822:	5f                   	pop    edi
c0019823:	c3                   	ret    

c0019824 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019824:	57                   	push   edi
c0019825:	56                   	push   esi
c0019826:	53                   	push   ebx
c0019827:	51                   	push   ecx
c0019828:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001982c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001982f:	0f 02 c0             	lar    eax,ax
c0019832:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019835:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019839:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001983c:	88 ca                	mov    dl,cl
c001983e:	c0 ea 06             	shr    dl,0x6
c0019841:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019845:	89 ca                	mov    edx,ecx
c0019847:	66 c1 ea 03          	shr    dx,0x3
c001984b:	83 e2 07             	and    edx,0x7
c001984e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019853:	88 17                	mov    BYTE PTR [edi],dl
c0019855:	0f 84 a6 01 00 00    	je     c0019a01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001985b:	83 e1 07             	and    ecx,0x7
c001985e:	80 f9 04             	cmp    cl,0x4
c0019861:	0f 84 98 00 00 00    	je     c00198ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019867:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001986c:	0f 95 c0             	setne  al
c001986f:	80 f9 05             	cmp    cl,0x5
c0019872:	0f 95 c2             	setne  dl
c0019875:	08 c2                	or     dl,al
c0019877:	74 79                	je     c00198f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019879:	84 c9                	test   cl,cl
c001987b:	75 05                	jne    c0019882 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001987d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019880:	eb 3c                	jmp    c00198be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019882:	80 f9 01             	cmp    cl,0x1
c0019885:	75 05                	jne    c001988c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019887:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001988a:	eb 32                	jmp    c00198be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001988c:	80 f9 02             	cmp    cl,0x2
c001988f:	75 05                	jne    c0019896 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019891:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019894:	eb 28                	jmp    c00198be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019896:	31 c0                	xor    eax,eax
c0019898:	80 f9 03             	cmp    cl,0x3
c001989b:	75 05                	jne    c00198a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001989d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00198a0:	eb 1c                	jmp    c00198be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198a2:	80 f9 05             	cmp    cl,0x5
c00198a5:	75 05                	jne    c00198ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00198a7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00198aa:	eb 12                	jmp    c00198be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198ac:	80 f9 06             	cmp    cl,0x6
c00198af:	75 05                	jne    c00198b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00198b1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00198b4:	eb 08                	jmp    c00198be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198b6:	80 f9 07             	cmp    cl,0x7
c00198b9:	75 03                	jne    c00198be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198bb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198be:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00198c3:	75 10                	jne    c00198d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00198c5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00198c9:	b9 03 00 00 00       	mov    ecx,0x3
c00198ce:	01 d0                	add    eax,edx
c00198d0:	e9 37 01 00 00       	jmp    c0019a0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198d5:	b9 02 00 00 00       	mov    ecx,0x2
c00198da:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00198df:	0f 85 27 01 00 00    	jne    c0019a0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198e5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00198e8:	b9 06 00 00 00       	mov    ecx,0x6
c00198ed:	e9 1a 01 00 00       	jmp    c0019a0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198f2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00198f5:	b9 06 00 00 00       	mov    ecx,0x6
c00198fa:	e9 0f 01 00 00       	jmp    c0019a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00198ff:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019902:	88 ca                	mov    dl,cl
c0019904:	c0 ea 06             	shr    dl,0x6
c0019907:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001990b:	89 ca                	mov    edx,ecx
c001990d:	66 c1 ea 03          	shr    dx,0x3
c0019911:	83 e2 07             	and    edx,0x7
c0019914:	80 e1 07             	and    cl,0x7
c0019917:	75 05                	jne    c001991e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019919:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001991c:	eb 4c                	jmp    c001996a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001991e:	80 f9 01             	cmp    cl,0x1
c0019921:	75 05                	jne    c0019928 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019923:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019926:	eb 42                	jmp    c001996a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019928:	80 f9 02             	cmp    cl,0x2
c001992b:	75 05                	jne    c0019932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001992d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019930:	eb 38                	jmp    c001996a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019932:	80 f9 03             	cmp    cl,0x3
c0019935:	75 05                	jne    c001993c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019937:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001993a:	eb 2e                	jmp    c001996a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001993c:	80 f9 04             	cmp    cl,0x4
c001993f:	75 12                	jne    c0019953 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019941:	f6 c4 60             	test   ah,0x60
c0019944:	75 08                	jne    c001994e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019946:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019949:	8d 78 14             	lea    edi,[eax+0x14]
c001994c:	eb 1c                	jmp    c001996a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001994e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019951:	eb 17                	jmp    c001996a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019953:	80 f9 05             	cmp    cl,0x5
c0019956:	75 05                	jne    c001995d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019958:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001995b:	eb 0d                	jmp    c001996a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001995d:	80 f9 06             	cmp    cl,0x6
c0019960:	75 05                	jne    c0019967 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019962:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019965:	eb 03                	jmp    c001996a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019967:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001996a:	84 d2                	test   dl,dl
c001996c:	75 05                	jne    c0019973 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001996e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019971:	eb 3c                	jmp    c00199af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019973:	80 fa 01             	cmp    dl,0x1
c0019976:	75 05                	jne    c001997d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019978:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001997b:	eb 32                	jmp    c00199af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001997d:	80 fa 02             	cmp    dl,0x2
c0019980:	75 05                	jne    c0019987 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019982:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019985:	eb 28                	jmp    c00199af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019987:	80 fa 03             	cmp    dl,0x3
c001998a:	75 05                	jne    c0019991 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001998c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001998f:	eb 1e                	jmp    c00199af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019991:	31 c0                	xor    eax,eax
c0019993:	80 fa 04             	cmp    dl,0x4
c0019996:	74 17                	je     c00199af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019998:	80 fa 05             	cmp    dl,0x5
c001999b:	75 05                	jne    c00199a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001999d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00199a0:	eb 0d                	jmp    c00199af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199a2:	80 fa 06             	cmp    dl,0x6
c00199a5:	75 05                	jne    c00199ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00199a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00199aa:	eb 03                	jmp    c00199af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199ac:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00199af:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199b4:	0f 94 c2             	sete   dl
c00199b7:	80 f9 05             	cmp    cl,0x5
c00199ba:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00199be:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00199c3:	d3 e0                	shl    eax,cl
c00199c5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00199c9:	74 0a                	je     c00199d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00199cb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00199ce:	b9 07 00 00 00       	mov    ecx,0x7
c00199d3:	eb 37                	jmp    c0019a0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199d5:	01 f8                	add    eax,edi
c00199d7:	b9 03 00 00 00       	mov    ecx,0x3
c00199dc:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199e1:	74 2b                	je     c0019a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199e3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00199e8:	75 0d                	jne    c00199f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00199ea:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00199ee:	01 c8                	add    eax,ecx
c00199f0:	b9 04 00 00 00       	mov    ecx,0x4
c00199f5:	eb 17                	jmp    c0019a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199f7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00199fa:	b9 07 00 00 00       	mov    ecx,0x7
c00199ff:	eb 0d                	jmp    c0019a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a01:	b9 02 00 00 00       	mov    ecx,0x2
c0019a06:	b2 01                	mov    dl,0x1
c0019a08:	31 c0                	xor    eax,eax
c0019a0a:	eb 02                	jmp    c0019a0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a0c:	31 d2                	xor    edx,edx
c0019a0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a12:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019a14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a18:	88 11                	mov    BYTE PTR [ecx],dl
c0019a1a:	5a                   	pop    edx
c0019a1b:	5b                   	pop    ebx
c0019a1c:	5e                   	pop    esi
c0019a1d:	5f                   	pop    edi
c0019a1e:	c3                   	ret    

c0019a1f <Krnl::startCPU(int)>:
c0019a1f:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0019a24:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a2b:	0f 84 26 01 00 00    	je     c0019b57 <Krnl::startCPU(int)+0x138>
c0019a31:	55                   	push   ebp
c0019a32:	57                   	push   edi
c0019a33:	56                   	push   esi
c0019a34:	53                   	push   ebx
c0019a35:	83 ec 24             	sub    esp,0x24
c0019a38:	6a 1b                	push   0x1b
c0019a3a:	50                   	push   eax
c0019a3b:	e8 a8 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019a40:	59                   	pop    ecx
c0019a41:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019a46:	5e                   	pop    esi
c0019a47:	89 c3                	mov    ebx,eax
c0019a49:	50                   	push   eax
c0019a4a:	8d ab 80 02 00 00    	lea    ebp,[ebx+0x280]
c0019a50:	68 a0 b3 02 c0       	push   0xc002b3a0
c0019a55:	8d bb 10 03 00 00    	lea    edi,[ebx+0x310]
c0019a5b:	e8 af 90 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0019a60:	8d b3 00 03 00 00    	lea    esi,[ebx+0x300]
c0019a66:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019a70:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019a74:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019a7e:	c1 e1 18             	shl    ecx,0x18
c0019a81:	8b 83 10 03 00 00    	mov    eax,DWORD PTR [ebx+0x310]
c0019a87:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019a8b:	25 ff ff ff 00       	and    eax,0xffffff
c0019a90:	83 c4 10             	add    esp,0x10
c0019a93:	09 c8                	or     eax,ecx
c0019a95:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019a9b:	8b 93 00 03 00 00    	mov    edx,DWORD PTR [ebx+0x300]
c0019aa1:	81 e2 00 00 f0 ff    	and    edx,0xfff00000
c0019aa7:	80 ce c5             	or     dh,0xc5
c0019aaa:	89 93 00 03 00 00    	mov    DWORD PTR [ebx+0x300],edx
c0019ab0:	f3 90                	pause  
c0019ab2:	8b 16                	mov    edx,DWORD PTR [esi]
c0019ab4:	0f ba e2 0c          	bt     edx,0xc
c0019ab8:	72 f6                	jb     c0019ab0 <Krnl::startCPU(int)+0x91>
c0019aba:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019ac0:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ac6:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0019aca:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ad0:	8b 93 00 03 00 00    	mov    edx,DWORD PTR [ebx+0x300]
c0019ad6:	81 e2 00 00 f0 ff    	and    edx,0xfff00000
c0019adc:	80 ce 85             	or     dh,0x85
c0019adf:	89 93 00 03 00 00    	mov    DWORD PTR [ebx+0x300],edx
c0019ae5:	f3 90                	pause  
c0019ae7:	8b 16                	mov    edx,DWORD PTR [esi]
c0019ae9:	0f ba e2 0c          	bt     edx,0xc
c0019aed:	72 f6                	jb     c0019ae5 <Krnl::startCPU(int)+0xc6>
c0019aef:	bb 02 00 00 00       	mov    ebx,0x2
c0019af4:	52                   	push   edx
c0019af5:	52                   	push   edx
c0019af6:	6a 00                	push   0x0
c0019af8:	68 80 96 98 00       	push   0x989680
c0019afd:	e8 7c 42 00 00       	call   c001dd7e <nanoSleep(unsigned long long)>
c0019b02:	83 c4 10             	add    esp,0x10
c0019b05:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019b0c:	8b 17                	mov    edx,DWORD PTR [edi]
c0019b0e:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019b14:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0019b18:	89 17                	mov    DWORD PTR [edi],edx
c0019b1a:	8b 16                	mov    edx,DWORD PTR [esi]
c0019b1c:	81 e2 00 f8 f0 ff    	and    edx,0xfff0f800
c0019b22:	81 ca 08 06 00 00    	or     edx,0x608
c0019b28:	89 16                	mov    DWORD PTR [esi],edx
c0019b2a:	50                   	push   eax
c0019b2b:	50                   	push   eax
c0019b2c:	6a 00                	push   0x0
c0019b2e:	68 40 0d 03 00       	push   0x30d40
c0019b33:	e8 46 42 00 00       	call   c001dd7e <nanoSleep(unsigned long long)>
c0019b38:	83 c4 10             	add    esp,0x10
c0019b3b:	f3 90                	pause  
c0019b3d:	8b 16                	mov    edx,DWORD PTR [esi]
c0019b3f:	0f ba e2 0c          	bt     edx,0xc
c0019b43:	72 f6                	jb     c0019b3b <Krnl::startCPU(int)+0x11c>
c0019b45:	4b                   	dec    ebx
c0019b46:	74 07                	je     c0019b4f <Krnl::startCPU(int)+0x130>
c0019b48:	bb 01 00 00 00       	mov    ebx,0x1
c0019b4d:	eb b6                	jmp    c0019b05 <Krnl::startCPU(int)+0xe6>
c0019b4f:	83 c4 1c             	add    esp,0x1c
c0019b52:	5b                   	pop    ebx
c0019b53:	5e                   	pop    esi
c0019b54:	5f                   	pop    edi
c0019b55:	5d                   	pop    ebp
c0019b56:	c3                   	ret    
c0019b57:	c3                   	ret    

c0019b58 <Krnl::startCPUs()>:
c0019b58:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0019b5d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019b63:	88 c2                	mov    dl,al
c0019b65:	83 e2 0a             	and    edx,0xa
c0019b68:	80 fa 0a             	cmp    dl,0xa
c0019b6b:	75 5e                	jne    c0019bcb <Krnl::startCPUs()+0x73>
c0019b6d:	a8 01                	test   al,0x1
c0019b6f:	74 5a                	je     c0019bcb <Krnl::startCPUs()+0x73>
c0019b71:	53                   	push   ebx
c0019b72:	83 ec 08             	sub    esp,0x8
c0019b75:	b8 01 00 00 00       	mov    eax,0x1
c0019b7a:	0f a2                	cpuid  
c0019b7c:	c1 eb 18             	shr    ebx,0x18
c0019b7f:	88 1d 50 08 03 c0    	mov    BYTE PTR ds:0xc0030850,bl
c0019b85:	31 db                	xor    ebx,ebx
c0019b87:	0f b6 05 e0 07 03 c0 	movzx  eax,BYTE PTR ds:0xc00307e0
c0019b8e:	39 d8                	cmp    eax,ebx
c0019b90:	7e 34                	jle    c0019bc6 <Krnl::startCPUs()+0x6e>
c0019b92:	0f b6 05 50 08 03 c0 	movzx  eax,BYTE PTR ds:0xc0030850
c0019b99:	39 d8                	cmp    eax,ebx
c0019b9b:	74 26                	je     c0019bc3 <Krnl::startCPUs()+0x6b>
c0019b9d:	0f b6 83 00 08 03 c0 	movzx  eax,BYTE PTR [ebx-0x3ffcf800]
c0019ba4:	50                   	push   eax
c0019ba5:	0f b6 83 20 08 03 c0 	movzx  eax,BYTE PTR [ebx-0x3ffcf7e0]
c0019bac:	50                   	push   eax
c0019bad:	53                   	push   ebx
c0019bae:	68 b1 b3 02 c0       	push   0xc002b3b1
c0019bb3:	e8 57 8f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0019bb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bbb:	e8 5f fe ff ff       	call   c0019a1f <Krnl::startCPU(int)>
c0019bc0:	83 c4 10             	add    esp,0x10
c0019bc3:	43                   	inc    ebx
c0019bc4:	eb c1                	jmp    c0019b87 <Krnl::startCPUs()+0x2f>
c0019bc6:	83 c4 08             	add    esp,0x8
c0019bc9:	5b                   	pop    ebx
c0019bca:	c3                   	ret    
c0019bcb:	c3                   	ret    

c0019bcc <EnvVarContainer::getEnv(char const*)>:
c0019bcc:	57                   	push   edi
c0019bcd:	56                   	push   esi
c0019bce:	53                   	push   ebx
c0019bcf:	31 db                	xor    ebx,ebx
c0019bd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bd5:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019bd7:	7e 2b                	jle    c0019c04 <EnvVarContainer::getEnv(char const*)+0x38>
c0019bd9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019be0:	50                   	push   eax
c0019be1:	50                   	push   eax
c0019be2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019be5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019be8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019bec:	e8 cf 6c fe ff       	call   c00008c0 <strcmp>
c0019bf1:	83 c4 10             	add    esp,0x10
c0019bf4:	85 c0                	test   eax,eax
c0019bf6:	75 09                	jne    c0019c01 <EnvVarContainer::getEnv(char const*)+0x35>
c0019bf8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019bfb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019bff:	eb 05                	jmp    c0019c06 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019c01:	43                   	inc    ebx
c0019c02:	eb d1                	jmp    c0019bd5 <EnvVarContainer::getEnv(char const*)+0x9>
c0019c04:	31 c0                	xor    eax,eax
c0019c06:	5b                   	pop    ebx
c0019c07:	5e                   	pop    esi
c0019c08:	5f                   	pop    edi
c0019c09:	c3                   	ret    

c0019c0a <EnvVarContainer::setEnv(char const*, char const*)>:
c0019c0a:	57                   	push   edi
c0019c0b:	56                   	push   esi
c0019c0c:	53                   	push   ebx
c0019c0d:	83 ec 1c             	sub    esp,0x1c
c0019c10:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019c14:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019c18:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019c1c:	57                   	push   edi
c0019c1d:	e8 72 6b fe ff       	call   c0000794 <strlen>
c0019c22:	40                   	inc    eax
c0019c23:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c26:	e8 15 5c ff ff       	call   c000f840 <malloc>
c0019c2b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c32:	e8 5d 6b fe ff       	call   c0000794 <strlen>
c0019c37:	40                   	inc    eax
c0019c38:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c3b:	e8 00 5c ff ff       	call   c000f840 <malloc>
c0019c40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c47:	e8 48 6b fe ff       	call   c0000794 <strlen>
c0019c4c:	83 c4 0c             	add    esp,0xc
c0019c4f:	40                   	inc    eax
c0019c50:	50                   	push   eax
c0019c51:	6a 00                	push   0x0
c0019c53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019c57:	e8 1c 6b fe ff       	call   c0000778 <memset>
c0019c5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c5f:	e8 30 6b fe ff       	call   c0000794 <strlen>
c0019c64:	83 c4 0c             	add    esp,0xc
c0019c67:	40                   	inc    eax
c0019c68:	50                   	push   eax
c0019c69:	57                   	push   edi
c0019c6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019c6e:	e8 d1 6a fe ff       	call   c0000744 <memcpy>
c0019c73:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c76:	e8 19 6b fe ff       	call   c0000794 <strlen>
c0019c7b:	83 c4 0c             	add    esp,0xc
c0019c7e:	40                   	inc    eax
c0019c7f:	50                   	push   eax
c0019c80:	6a 00                	push   0x0
c0019c82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c86:	e8 ed 6a fe ff       	call   c0000778 <memset>
c0019c8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c8e:	e8 01 6b fe ff       	call   c0000794 <strlen>
c0019c93:	83 c4 0c             	add    esp,0xc
c0019c96:	40                   	inc    eax
c0019c97:	50                   	push   eax
c0019c98:	56                   	push   esi
c0019c99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c9d:	e8 a2 6a fe ff       	call   c0000744 <memcpy>
c0019ca2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ca4:	40                   	inc    eax
c0019ca5:	89 03                	mov    DWORD PTR [ebx],eax
c0019ca7:	c1 e0 03             	shl    eax,0x3
c0019caa:	5a                   	pop    edx
c0019cab:	59                   	pop    ecx
c0019cac:	50                   	push   eax
c0019cad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019cb0:	e8 77 5b ff ff       	call   c000f82c <realloc>
c0019cb5:	83 c4 0c             	add    esp,0xc
c0019cb8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019cbb:	6a 08                	push   0x8
c0019cbd:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019cc1:	52                   	push   edx
c0019cc2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019cc4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019cc8:	50                   	push   eax
c0019cc9:	e8 76 6a fe ff       	call   c0000744 <memcpy>
c0019cce:	83 c4 20             	add    esp,0x20
c0019cd1:	5b                   	pop    ebx
c0019cd2:	5e                   	pop    esi
c0019cd3:	5f                   	pop    edi
c0019cd4:	c3                   	ret    
c0019cd5:	90                   	nop

c0019cd6 <EnvVarContainer::deleteEnv(char const*)>:
c0019cd6:	c3                   	ret    
c0019cd7:	90                   	nop

c0019cd8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019cd8:	55                   	push   ebp
c0019cd9:	57                   	push   edi
c0019cda:	56                   	push   esi
c0019cdb:	53                   	push   ebx
c0019cdc:	81 ec 38 01 00 00    	sub    esp,0x138
c0019ce2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019ce9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019cf0:	68 14 01 00 00       	push   0x114
c0019cf5:	e8 46 5b ff ff       	call   c000f840 <malloc>
c0019cfa:	83 c4 0c             	add    esp,0xc
c0019cfd:	89 c7                	mov    edi,eax
c0019cff:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019d02:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019d09:	50                   	push   eax
c0019d0a:	e8 59 93 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c0019d0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019d12:	e8 23 96 ff ff       	call   c001333a <File::exists()>
c0019d17:	83 c4 10             	add    esp,0x10
c0019d1a:	84 c0                	test   al,al
c0019d1c:	75 31                	jne    c0019d4f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019d1e:	51                   	push   ecx
c0019d1f:	51                   	push   ecx
c0019d20:	6a 12                	push   0x12
c0019d22:	57                   	push   edi
c0019d23:	e8 a4 93 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c0019d28:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d2a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019d2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019d30:	e8 5f 6a fe ff       	call   c0000794 <strlen>
c0019d35:	5a                   	pop    edx
c0019d36:	31 d2                	xor    edx,edx
c0019d38:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019d3c:	51                   	push   ecx
c0019d3d:	55                   	push   ebp
c0019d3e:	52                   	push   edx
c0019d3f:	50                   	push   eax
c0019d40:	57                   	push   edi
c0019d41:	ff d3                	call   ebx
c0019d43:	83 c4 14             	add    esp,0x14
c0019d46:	57                   	push   edi
c0019d47:	e8 de 93 ff ff       	call   c001312a <File::close()>
c0019d4c:	83 c4 10             	add    esp,0x10
c0019d4f:	31 db                	xor    ebx,ebx
c0019d51:	50                   	push   eax
c0019d52:	31 ed                	xor    ebp,ebp
c0019d54:	68 00 01 00 00       	push   0x100
c0019d59:	6a 00                	push   0x0
c0019d5b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d5f:	50                   	push   eax
c0019d60:	e8 13 6a fe ff       	call   c0000778 <memset>
c0019d65:	58                   	pop    eax
c0019d66:	5a                   	pop    edx
c0019d67:	6a 01                	push   0x1
c0019d69:	57                   	push   edi
c0019d6a:	e8 5d 93 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c0019d6f:	83 c4 10             	add    esp,0x10
c0019d72:	83 ec 0c             	sub    esp,0xc
c0019d75:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d77:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019d7b:	51                   	push   ecx
c0019d7c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019d80:	52                   	push   edx
c0019d81:	6a 00                	push   0x0
c0019d83:	6a 01                	push   0x1
c0019d85:	57                   	push   edi
c0019d86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d89:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019d8d:	83 c4 20             	add    esp,0x20
c0019d90:	3c 0d                	cmp    al,0xd
c0019d92:	0f 84 12 01 00 00    	je     c0019eaa <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019d98:	85 db                	test   ebx,ebx
c0019d9a:	0f 84 fd 00 00 00    	je     c0019e9d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019da0:	3c 0a                	cmp    al,0xa
c0019da2:	74 13                	je     c0019db7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019da4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019da9:	74 0c                	je     c0019db7 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019dab:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019db1:	0f 8e e6 00 00 00    	jle    c0019e9d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019db7:	83 ec 0c             	sub    esp,0xc
c0019dba:	8d 53 01             	lea    edx,[ebx+0x1]
c0019dbd:	29 dd                	sub    ebp,ebx
c0019dbf:	52                   	push   edx
c0019dc0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019dc4:	e8 77 5a ff ff       	call   c000f840 <malloc>
c0019dc9:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019dcc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019dd0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019dd3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019dd7:	e8 64 5a ff ff       	call   c000f840 <malloc>
c0019ddc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019de0:	83 c4 0c             	add    esp,0xc
c0019de3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019de7:	52                   	push   edx
c0019de8:	6a 00                	push   0x0
c0019dea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019dee:	e8 85 69 fe ff       	call   c0000778 <memset>
c0019df3:	83 c4 0c             	add    esp,0xc
c0019df6:	53                   	push   ebx
c0019df7:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019dfb:	55                   	push   ebp
c0019dfc:	01 eb                	add    ebx,ebp
c0019dfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e02:	e8 3d 69 fe ff       	call   c0000744 <memcpy>
c0019e07:	83 c4 0c             	add    esp,0xc
c0019e0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e0e:	51                   	push   ecx
c0019e0f:	6a 00                	push   0x0
c0019e11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e15:	e8 5e 69 fe ff       	call   c0000778 <memset>
c0019e1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e1d:	e8 72 69 fe ff       	call   c0000794 <strlen>
c0019e22:	83 c4 0c             	add    esp,0xc
c0019e25:	50                   	push   eax
c0019e26:	53                   	push   ebx
c0019e27:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e2b:	e8 14 69 fe ff       	call   c0000744 <memcpy>
c0019e30:	5b                   	pop    ebx
c0019e31:	58                   	pop    eax
c0019e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e36:	68 da b3 02 c0       	push   0xc002b3da
c0019e3b:	e8 cf 8c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0019e40:	8b 06                	mov    eax,DWORD PTR [esi]
c0019e42:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019e45:	40                   	inc    eax
c0019e46:	83 c4 10             	add    esp,0x10
c0019e49:	89 06                	mov    DWORD PTR [esi],eax
c0019e4b:	85 d2                	test   edx,edx
c0019e4d:	75 0c                	jne    c0019e5b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019e4f:	83 ec 0c             	sub    esp,0xc
c0019e52:	6a 08                	push   0x8
c0019e54:	e8 e7 59 ff ff       	call   c000f840 <malloc>
c0019e59:	eb 0c                	jmp    c0019e67 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019e5b:	c1 e0 03             	shl    eax,0x3
c0019e5e:	51                   	push   ecx
c0019e5f:	51                   	push   ecx
c0019e60:	50                   	push   eax
c0019e61:	52                   	push   edx
c0019e62:	e8 c5 59 ff ff       	call   c000f82c <realloc>
c0019e67:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019e6a:	83 c4 10             	add    esp,0x10
c0019e6d:	31 db                	xor    ebx,ebx
c0019e6f:	52                   	push   edx
c0019e70:	6a 08                	push   0x8
c0019e72:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019e76:	50                   	push   eax
c0019e77:	8b 16                	mov    edx,DWORD PTR [esi]
c0019e79:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e7c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019e80:	50                   	push   eax
c0019e81:	e8 be 68 fe ff       	call   c0000744 <memcpy>
c0019e86:	83 c4 0c             	add    esp,0xc
c0019e89:	68 00 01 00 00       	push   0x100
c0019e8e:	6a 00                	push   0x0
c0019e90:	55                   	push   ebp
c0019e91:	31 ed                	xor    ebp,ebp
c0019e93:	e8 e0 68 fe ff       	call   c0000778 <memset>
c0019e98:	83 c4 10             	add    esp,0x10
c0019e9b:	eb 0d                	jmp    c0019eaa <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019e9d:	3c 3d                	cmp    al,0x3d
c0019e9f:	74 07                	je     c0019ea8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019ea1:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019ea5:	45                   	inc    ebp
c0019ea6:	eb 02                	jmp    c0019eaa <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019ea8:	89 eb                	mov    ebx,ebp
c0019eaa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019eaf:	0f 85 bd fe ff ff    	jne    c0019d72 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019eb5:	50                   	push   eax
c0019eb6:	50                   	push   eax
c0019eb7:	ff 36                	push   DWORD PTR [esi]
c0019eb9:	68 e8 b3 02 c0       	push   0xc002b3e8
c0019ebe:	e8 4c 8c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0019ec3:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019ec9:	5b                   	pop    ebx
c0019eca:	5e                   	pop    esi
c0019ecb:	5f                   	pop    edi
c0019ecc:	5d                   	pop    ebp
c0019ecd:	c3                   	ret    

c0019ece <EnvVarContainer::__loadSystem()>:
c0019ece:	83 ec 10             	sub    esp,0x10
c0019ed1:	68 40 d2 02 c0       	push   0xc002d240
c0019ed6:	68 13 b4 02 c0       	push   0xc002b413
c0019edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019edf:	e8 f4 fd ff ff       	call   c0019cd8 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019ee4:	83 c4 1c             	add    esp,0x1c
c0019ee7:	c3                   	ret    

c0019ee8 <EnvVarContainer::__loadUser()>:
c0019ee8:	c3                   	ret    
c0019ee9:	90                   	nop

c0019eea <EnvVarContainer::EnvVarContainer(Process*)>:
c0019eea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019eee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019efc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019eff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019f0a:	90                   	nop
c0019f0b:	c3                   	ret    

c0019f0c <EnvVarContainer::~EnvVarContainer()>:
c0019f0c:	83 ec 0c             	sub    esp,0xc
c0019f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019f16:	85 c0                	test   eax,eax
c0019f18:	74 1d                	je     c0019f37 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f20:	85 c0                	test   eax,eax
c0019f22:	74 13                	je     c0019f37 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019f2b:	83 ec 0c             	sub    esp,0xc
c0019f2e:	50                   	push   eax
c0019f2f:	e8 1c 59 ff ff       	call   c000f850 <free>
c0019f34:	83 c4 10             	add    esp,0x10
c0019f37:	90                   	nop
c0019f38:	83 c4 0c             	add    esp,0xc
c0019f3b:	c3                   	ret    

c0019f3c <Krnl::getEnv(Process*, char const*)>:
c0019f3c:	53                   	push   ebx
c0019f3d:	83 ec 08             	sub    esp,0x8
c0019f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f44:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f48:	39 05 74 12 03 c0    	cmp    DWORD PTR ds:0xc0031274,eax
c0019f4e:	74 04                	je     c0019f54 <Krnl::getEnv(Process*, char const*)+0x18>
c0019f50:	85 c0                	test   eax,eax
c0019f52:	75 0b                	jne    c0019f5f <Krnl::getEnv(Process*, char const*)+0x23>
c0019f54:	a1 54 08 03 c0       	mov    eax,ds:0xc0030854
c0019f59:	85 c0                	test   eax,eax
c0019f5b:	75 19                	jne    c0019f76 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019f5d:	eb 27                	jmp    c0019f86 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019f5f:	52                   	push   edx
c0019f60:	52                   	push   edx
c0019f61:	53                   	push   ebx
c0019f62:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019f68:	e8 5f fc ff ff       	call   c0019bcc <EnvVarContainer::getEnv(char const*)>
c0019f6d:	83 c4 10             	add    esp,0x10
c0019f70:	85 c0                	test   eax,eax
c0019f72:	75 28                	jne    c0019f9c <Krnl::getEnv(Process*, char const*)+0x60>
c0019f74:	eb de                	jmp    c0019f54 <Krnl::getEnv(Process*, char const*)+0x18>
c0019f76:	52                   	push   edx
c0019f77:	52                   	push   edx
c0019f78:	53                   	push   ebx
c0019f79:	50                   	push   eax
c0019f7a:	e8 4d fc ff ff       	call   c0019bcc <EnvVarContainer::getEnv(char const*)>
c0019f7f:	83 c4 10             	add    esp,0x10
c0019f82:	85 c0                	test   eax,eax
c0019f84:	75 16                	jne    c0019f9c <Krnl::getEnv(Process*, char const*)+0x60>
c0019f86:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019f8a:	a1 58 08 03 c0       	mov    eax,ds:0xc0030858
c0019f8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f93:	83 c4 08             	add    esp,0x8
c0019f96:	5b                   	pop    ebx
c0019f97:	e9 30 fc ff ff       	jmp    c0019bcc <EnvVarContainer::getEnv(char const*)>
c0019f9c:	83 c4 08             	add    esp,0x8
c0019f9f:	5b                   	pop    ebx
c0019fa0:	c3                   	ret    

c0019fa1 <Krnl::setEnvSystem(char const*, char const*)>:
c0019fa1:	83 ec 10             	sub    esp,0x10
c0019fa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fac:	ff 35 58 08 03 c0    	push   DWORD PTR ds:0xc0030858
c0019fb2:	e8 53 fc ff ff       	call   c0019c0a <EnvVarContainer::setEnv(char const*, char const*)>
c0019fb7:	83 c4 1c             	add    esp,0x1c
c0019fba:	c3                   	ret    

c0019fbb <Krnl::setEnvUser(char const*, char const*)>:
c0019fbb:	a1 54 08 03 c0       	mov    eax,ds:0xc0030854
c0019fc0:	85 c0                	test   eax,eax
c0019fc2:	74 15                	je     c0019fd9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019fc4:	83 ec 10             	sub    esp,0x10
c0019fc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fcf:	50                   	push   eax
c0019fd0:	e8 35 fc ff ff       	call   c0019c0a <EnvVarContainer::setEnv(char const*, char const*)>
c0019fd5:	83 c4 1c             	add    esp,0x1c
c0019fd8:	c3                   	ret    
c0019fd9:	c3                   	ret    

c0019fda <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019fda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fde:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019fe4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fe8:	e9 1d fc ff ff       	jmp    c0019c0a <EnvVarContainer::setEnv(char const*, char const*)>

c0019fed <Krnl::deleteEnvSystem(char const*)>:
c0019fed:	c3                   	ret    

c0019fee <Krnl::deleteEnvUser(char const*)>:
c0019fee:	c3                   	ret    

c0019fef <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019fef:	c3                   	ret    

c0019ff0 <Krnl::newProcessEnv(Process*)>:
c0019ff0:	83 ec 28             	sub    esp,0x28
c0019ff3:	6a 0c                	push   0xc
c0019ff5:	e8 46 58 ff ff       	call   c000f840 <malloc>
c0019ffa:	5a                   	pop    edx
c0019ffb:	59                   	pop    ecx
c0019ffc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a000:	50                   	push   eax
c001a001:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a005:	e8 e0 fe ff ff       	call   c0019eea <EnvVarContainer::EnvVarContainer(Process*)>
c001a00a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a00e:	83 c4 2c             	add    esp,0x2c
c001a011:	c3                   	ret    

c001a012 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a012:	56                   	push   esi
c001a013:	53                   	push   ebx
c001a014:	83 ec 10             	sub    esp,0x10
c001a017:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a01b:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a021:	6a 0c                	push   0xc
c001a023:	e8 18 58 ff ff       	call   c000f840 <malloc>
c001a028:	89 c3                	mov    ebx,eax
c001a02a:	58                   	pop    eax
c001a02b:	5a                   	pop    edx
c001a02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a030:	53                   	push   ebx
c001a031:	e8 b4 fe ff ff       	call   c0019eea <EnvVarContainer::EnvVarContainer(Process*)>
c001a036:	8b 06                	mov    eax,DWORD PTR [esi]
c001a038:	89 03                	mov    DWORD PTR [ebx],eax
c001a03a:	c1 e0 03             	shl    eax,0x3
c001a03d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a040:	e8 fb 57 ff ff       	call   c000f840 <malloc>
c001a045:	83 c4 0c             	add    esp,0xc
c001a048:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a04b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a04d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a054:	52                   	push   edx
c001a055:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a058:	50                   	push   eax
c001a059:	e8 e6 66 fe ff       	call   c0000744 <memcpy>
c001a05e:	89 d8                	mov    eax,ebx
c001a060:	83 c4 14             	add    esp,0x14
c001a063:	5b                   	pop    ebx
c001a064:	5e                   	pop    esi
c001a065:	c3                   	ret    

c001a066 <Krnl::loadSystemEnv()>:
c001a066:	53                   	push   ebx
c001a067:	83 ec 14             	sub    esp,0x14
c001a06a:	6a 0c                	push   0xc
c001a06c:	e8 cf 57 ff ff       	call   c000f840 <malloc>
c001a071:	89 c3                	mov    ebx,eax
c001a073:	58                   	pop    eax
c001a074:	5a                   	pop    edx
c001a075:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c001a07b:	53                   	push   ebx
c001a07c:	e8 69 fe ff ff       	call   c0019eea <EnvVarContainer::EnvVarContainer(Process*)>
c001a081:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a084:	89 1d 58 08 03 c0    	mov    DWORD PTR ds:0xc0030858,ebx
c001a08a:	e8 3f fe ff ff       	call   c0019ece <EnvVarContainer::__loadSystem()>
c001a08f:	83 c4 18             	add    esp,0x18
c001a092:	5b                   	pop    ebx
c001a093:	c3                   	ret    

c001a094 <Krnl::loadUserEnv()>:
c001a094:	53                   	push   ebx
c001a095:	83 ec 14             	sub    esp,0x14
c001a098:	6a 0c                	push   0xc
c001a09a:	e8 a1 57 ff ff       	call   c000f840 <malloc>
c001a09f:	89 c3                	mov    ebx,eax
c001a0a1:	58                   	pop    eax
c001a0a2:	5a                   	pop    edx
c001a0a3:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c001a0a9:	53                   	push   ebx
c001a0aa:	e8 3b fe ff ff       	call   c0019eea <EnvVarContainer::EnvVarContainer(Process*)>
c001a0af:	89 1d 54 08 03 c0    	mov    DWORD PTR ds:0xc0030854,ebx
c001a0b5:	83 c4 18             	add    esp,0x18
c001a0b8:	5b                   	pop    ebx
c001a0b9:	c3                   	ret    

c001a0ba <Krnl::flushEnv()>:
c001a0ba:	c3                   	ret    

c001a0bb <Krnl::getProcessTotalEnvCount(Process*)>:
c001a0bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0bf:	8b 15 54 08 03 c0    	mov    edx,DWORD PTR ds:0xc0030854
c001a0c5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a0cb:	a1 58 08 03 c0       	mov    eax,ds:0xc0030858
c001a0d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0d2:	03 01                	add    eax,DWORD PTR [ecx]
c001a0d4:	85 d2                	test   edx,edx
c001a0d6:	74 02                	je     c001a0da <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a0d8:	03 02                	add    eax,DWORD PTR [edx]
c001a0da:	c3                   	ret    

c001a0db <Krnl::getProcessEnvPair(Process*, int)>:
c001a0db:	57                   	push   edi
c001a0dc:	8b 0d 54 08 03 c0    	mov    ecx,DWORD PTR ds:0xc0030854
c001a0e2:	56                   	push   esi
c001a0e3:	85 c9                	test   ecx,ecx
c001a0e5:	53                   	push   ebx
c001a0e6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a0ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0ee:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a0f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0f8:	8b 02                	mov    eax,DWORD PTR [edx]
c001a0fa:	75 47                	jne    c001a143 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a0fc:	39 c3                	cmp    ebx,eax
c001a0fe:	7c 47                	jl     c001a147 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a100:	8b 15 58 08 03 c0    	mov    edx,DWORD PTR ds:0xc0030858
c001a106:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a108:	01 c1                	add    ecx,eax
c001a10a:	39 d9                	cmp    ecx,ebx
c001a10c:	7e 6c                	jle    c001a17a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a10e:	51                   	push   ecx
c001a10f:	89 d9                	mov    ecx,ebx
c001a111:	29 c1                	sub    ecx,eax
c001a113:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a116:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a11a:	53                   	push   ebx
c001a11b:	68 35 b4 02 c0       	push   0xc002b435
c001a120:	e8 ea 89 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a125:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a12b:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a12d:	a1 58 08 03 c0       	mov    eax,ds:0xc0030858
c001a132:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a135:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a139:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a13c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a13f:	89 06                	mov    DWORD PTR [esi],eax
c001a141:	eb 51                	jmp    c001a194 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a143:	39 c3                	cmp    ebx,eax
c001a145:	7d 05                	jge    c001a14c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a147:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a14a:	eb 20                	jmp    c001a16c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a14c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a14e:	8d 14 07             	lea    edx,[edi+eax*1]
c001a151:	39 da                	cmp    edx,ebx
c001a153:	7e 04                	jle    c001a159 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a155:	29 c3                	sub    ebx,eax
c001a157:	eb 10                	jmp    c001a169 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a159:	8b 0d 58 08 03 c0    	mov    ecx,DWORD PTR ds:0xc0030858
c001a15f:	03 11                	add    edx,DWORD PTR [ecx]
c001a161:	39 da                	cmp    edx,ebx
c001a163:	7e 15                	jle    c001a17a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a165:	29 c3                	sub    ebx,eax
c001a167:	29 fb                	sub    ebx,edi
c001a169:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a16c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a170:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a173:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a176:	89 06                	mov    DWORD PTR [esi],eax
c001a178:	eb 1d                	jmp    c001a197 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a17a:	83 ec 0c             	sub    esp,0xc
c001a17d:	68 49 b4 02 c0       	push   0xc002b449
c001a182:	e8 18 00 00 00       	call   c001a19f <Krnl::panic(char const*)>
c001a187:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a18d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a194:	83 c4 10             	add    esp,0x10
c001a197:	89 f0                	mov    eax,esi
c001a199:	5b                   	pop    ebx
c001a19a:	5e                   	pop    esi
c001a19b:	5f                   	pop    edi
c001a19c:	c2 04 00             	ret    0x4

c001a19f <Krnl::panic(char const*)>:
c001a19f:	55                   	push   ebp
c001a1a0:	89 e5                	mov    ebp,esp
c001a1a2:	53                   	push   ebx
c001a1a3:	83 ec 0c             	sub    esp,0xc
c001a1a6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a1a9:	fa                   	cli    
c001a1aa:	c6 05 64 08 03 c0 01 	mov    BYTE PTR ds:0xc0030864,0x1
c001a1b1:	53                   	push   ebx
c001a1b2:	c6 05 44 cc 02 c0 00 	mov    BYTE PTR ds:0xc002cc44,0x0
c001a1b9:	68 63 b4 02 c0       	push   0xc002b463
c001a1be:	e8 4c 89 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a1c3:	58                   	pop    eax
c001a1c4:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a1c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1cf:	e8 fd 6a ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c001a1d4:	83 c4 0c             	add    esp,0xc
c001a1d7:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a1dc:	6a 01                	push   0x1
c001a1de:	6a 0f                	push   0xf
c001a1e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e6:	e8 17 65 ff ff       	call   c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a1eb:	58                   	pop    eax
c001a1ec:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a1f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1f7:	e8 76 6d ff ff       	call   c0010f72 <VgaText::clearScreen()>
c001a1fc:	58                   	pop    eax
c001a1fd:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a202:	5a                   	pop    edx
c001a203:	68 7c b4 02 c0       	push   0xc002b47c
c001a208:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a20e:	e8 dd 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a213:	59                   	pop    ecx
c001a214:	58                   	pop    eax
c001a215:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a21a:	68 24 b5 02 c0       	push   0xc002b524
c001a21f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a225:	e8 c6 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a22a:	58                   	pop    eax
c001a22b:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a230:	5a                   	pop    edx
c001a231:	68 98 b4 02 c0       	push   0xc002b498
c001a236:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a23c:	e8 af 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a241:	59                   	pop    ecx
c001a242:	58                   	pop    eax
c001a243:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a248:	53                   	push   ebx
c001a249:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a24f:	e8 9c 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a254:	58                   	pop    eax
c001a255:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a25a:	5a                   	pop    edx
c001a25b:	68 b8 b4 02 c0       	push   0xc002b4b8
c001a260:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a266:	e8 85 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a26b:	a1 60 08 03 c0       	mov    eax,ds:0xc0030860
c001a270:	83 c4 10             	add    esp,0x10
c001a273:	85 c0                	test   eax,eax
c001a275:	74 02                	je     c001a279 <Krnl::panic(char const*)+0xda>
c001a277:	ff d0                	call   eax
c001a279:	83 ec 0c             	sub    esp,0xc
c001a27c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a27f:	e8 b2 2e 00 00       	call   c001d136 <Thr::getDriverNameFromAddress(unsigned long)>
c001a284:	83 c4 10             	add    esp,0x10
c001a287:	89 c3                	mov    ebx,eax
c001a289:	85 c0                	test   eax,eax
c001a28b:	0f 84 50 02 00 00    	je     c001a4e1 <Krnl::panic(char const*)+0x342>
c001a291:	83 ec 08             	sub    esp,0x8
c001a294:	8b 15 74 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031274
c001a29a:	68 60 b5 02 c0       	push   0xc002b560
c001a29f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a2a5:	e8 46 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a2aa:	58                   	pop    eax
c001a2ab:	5a                   	pop    edx
c001a2ac:	8b 15 74 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031274
c001a2b2:	68 98 b4 02 c0       	push   0xc002b498
c001a2b7:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a2bd:	e8 2e 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a2c2:	59                   	pop    ecx
c001a2c3:	58                   	pop    eax
c001a2c4:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a2c9:	53                   	push   ebx
c001a2ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2d0:	e8 1b 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a2d5:	83 c4 10             	add    esp,0x10
c001a2d8:	83 ec 08             	sub    esp,0x8
c001a2db:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a2e0:	68 b7 b4 02 c0       	push   0xc002b4b7
c001a2e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2eb:	e8 00 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a2f0:	58                   	pop    eax
c001a2f1:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a2f6:	5a                   	pop    edx
c001a2f7:	68 b8 b5 02 c0       	push   0xc002b5b8
c001a2fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a302:	e8 e9 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a307:	59                   	pop    ecx
c001a308:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a30d:	5b                   	pop    ebx
c001a30e:	68 f8 b5 02 c0       	push   0xc002b5f8
c001a313:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a319:	e8 d2 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a31e:	58                   	pop    eax
c001a31f:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a324:	5a                   	pop    edx
c001a325:	68 a3 b4 02 c0       	push   0xc002b4a3
c001a32a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a330:	e8 bb 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a335:	59                   	pop    ecx
c001a336:	5b                   	pop    ebx
c001a337:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a33a:	68 bb b4 02 c0       	push   0xc002b4bb
c001a33f:	e8 cb 87 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a344:	58                   	pop    eax
c001a345:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a348:	5a                   	pop    edx
c001a349:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a34c:	68 c4 b4 02 c0       	push   0xc002b4c4
c001a351:	e8 b9 87 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a356:	59                   	pop    ecx
c001a357:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a35a:	5b                   	pop    ebx
c001a35b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a35d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a360:	68 cd b4 02 c0       	push   0xc002b4cd
c001a365:	e8 a5 87 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a36a:	58                   	pop    eax
c001a36b:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a370:	5a                   	pop    edx
c001a371:	68 3c b6 02 c0       	push   0xc002b63c
c001a376:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a37c:	e8 6f 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a381:	59                   	pop    ecx
c001a382:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a387:	5b                   	pop    ebx
c001a388:	68 d6 b4 02 c0       	push   0xc002b4d6
c001a38d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a393:	e8 58 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a398:	0f 20 c0             	mov    eax,cr0
c001a39b:	5a                   	pop    edx
c001a39c:	59                   	pop    ecx
c001a39d:	50                   	push   eax
c001a39e:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a3a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a9:	e8 68 6d ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a3ae:	5b                   	pop    ebx
c001a3af:	58                   	pop    eax
c001a3b0:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a3b5:	68 e0 b4 02 c0       	push   0xc002b4e0
c001a3ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3c0:	e8 2b 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a3c5:	0f 20 d0             	mov    eax,cr2
c001a3c8:	5a                   	pop    edx
c001a3c9:	59                   	pop    ecx
c001a3ca:	50                   	push   eax
c001a3cb:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a3d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d6:	e8 3b 6d ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a3db:	5b                   	pop    ebx
c001a3dc:	58                   	pop    eax
c001a3dd:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a3e2:	68 ea b4 02 c0       	push   0xc002b4ea
c001a3e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ed:	e8 fe 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a3f2:	0f 20 d8             	mov    eax,cr3
c001a3f5:	5a                   	pop    edx
c001a3f6:	59                   	pop    ecx
c001a3f7:	50                   	push   eax
c001a3f8:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a3fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a403:	e8 0e 6d ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a408:	5b                   	pop    ebx
c001a409:	58                   	pop    eax
c001a40a:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a40f:	68 fd b4 02 c0       	push   0xc002b4fd
c001a414:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a41a:	e8 d1 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a41f:	0f 20 e0             	mov    eax,cr4
c001a422:	5a                   	pop    edx
c001a423:	59                   	pop    ecx
c001a424:	50                   	push   eax
c001a425:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a42a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a430:	e8 e1 6c ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a435:	5b                   	pop    ebx
c001a436:	58                   	pop    eax
c001a437:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a43c:	68 07 b5 02 c0       	push   0xc002b507
c001a441:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a447:	e8 a4 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a44c:	5a                   	pop    edx
c001a44d:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a452:	59                   	pop    ecx
c001a453:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a459:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a45c:	50                   	push   eax
c001a45d:	e8 b4 6c ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a462:	5b                   	pop    ebx
c001a463:	58                   	pop    eax
c001a464:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a469:	68 1e b5 02 c0       	push   0xc002b51e
c001a46e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a474:	e8 77 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a479:	5a                   	pop    edx
c001a47a:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a47f:	59                   	pop    ecx
c001a480:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a486:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a489:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a48c:	50                   	push   eax
c001a48d:	e8 84 6c ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a492:	5b                   	pop    ebx
c001a493:	58                   	pop    eax
c001a494:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a499:	68 1e b5 02 c0       	push   0xc002b51e
c001a49e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4a4:	e8 47 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a4a9:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a4ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a4b1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4b7:	8b 12                	mov    edx,DWORD PTR [edx]
c001a4b9:	59                   	pop    ecx
c001a4ba:	5b                   	pop    ebx
c001a4bb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a4be:	50                   	push   eax
c001a4bf:	e8 52 6c ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a4c4:	83 c4 10             	add    esp,0x10
c001a4c7:	b2 fe                	mov    dl,0xfe
c001a4c9:	e4 60                	in     al,0x60
c001a4cb:	3c 1c                	cmp    al,0x1c
c001a4cd:	74 04                	je     c001a4d3 <Krnl::panic(char const*)+0x334>
c001a4cf:	3c 5a                	cmp    al,0x5a
c001a4d1:	75 f6                	jne    c001a4c9 <Krnl::panic(char const*)+0x32a>
c001a4d3:	e4 64                	in     al,0x64
c001a4d5:	a8 02                	test   al,0x2
c001a4d7:	75 fa                	jne    c001a4d3 <Krnl::panic(char const*)+0x334>
c001a4d9:	88 d0                	mov    al,dl
c001a4db:	e6 64                	out    0x64,al
c001a4dd:	fa                   	cli    
c001a4de:	f4                   	hlt    
c001a4df:	eb e8                	jmp    c001a4c9 <Krnl::panic(char const*)+0x32a>
c001a4e1:	50                   	push   eax
c001a4e2:	50                   	push   eax
c001a4e3:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a4e8:	68 8c b5 02 c0       	push   0xc002b58c
c001a4ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4f3:	e8 f8 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a4f8:	58                   	pop    eax
c001a4f9:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a4fe:	5a                   	pop    edx
c001a4ff:	68 98 b4 02 c0       	push   0xc002b498
c001a504:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a50a:	e8 e1 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a50f:	59                   	pop    ecx
c001a510:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a515:	5b                   	pop    ebx
c001a516:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a519:	83 c0 0c             	add    eax,0xc
c001a51c:	50                   	push   eax
c001a51d:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001a522:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a528:	e8 c3 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a52d:	83 c4 10             	add    esp,0x10
c001a530:	e9 a3 fd ff ff       	jmp    c001a2d8 <Krnl::panic(char const*)+0x139>

c001a535 <Net::switchEndian16(unsigned short)>:
c001a535:	83 ec 04             	sub    esp,0x4
c001a538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a53c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a540:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a544:	c1 f8 08             	sar    eax,0x8
c001a547:	89 c2                	mov    edx,eax
c001a549:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a54d:	c1 e0 08             	shl    eax,0x8
c001a550:	09 d0                	or     eax,edx
c001a552:	83 c4 04             	add    esp,0x4
c001a555:	c3                   	ret    

c001a556 <Net::switchEndian32(unsigned int)>:
c001a556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a55a:	c1 e8 18             	shr    eax,0x18
c001a55d:	89 c2                	mov    edx,eax
c001a55f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a563:	c1 e0 08             	shl    eax,0x8
c001a566:	25 00 00 ff 00       	and    eax,0xff0000
c001a56b:	09 c2                	or     edx,eax
c001a56d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a571:	c1 e8 08             	shr    eax,0x8
c001a574:	25 00 ff 00 00       	and    eax,0xff00
c001a579:	09 c2                	or     edx,eax
c001a57b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a57f:	c1 e0 18             	shl    eax,0x18
c001a582:	09 d0                	or     eax,edx
c001a584:	c3                   	ret    

c001a585 <Net::crc32Calc(unsigned char*, int)>:
c001a585:	83 ec 10             	sub    esp,0x10
c001a588:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a58d:	75 07                	jne    c001a596 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a58f:	b8 00 00 00 00       	mov    eax,0x0
c001a594:	eb 7c                	jmp    c001a612 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a596:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a59b:	7f 07                	jg     c001a5a4 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a59d:	b8 00 00 00 00       	mov    eax,0x0
c001a5a2:	eb 6e                	jmp    c001a612 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a5a4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a5ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a5b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5b8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a5bc:	7d 4e                	jge    c001a60c <Net::crc32Calc(unsigned char*, int)+0x87>
c001a5be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5c6:	01 d0                	add    eax,edx
c001a5c8:	8a 00                	mov    al,BYTE PTR [eax]
c001a5ca:	0f b6 c0             	movzx  eax,al
c001a5cd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a5d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5d9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a5de:	7f 26                	jg     c001a606 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a5e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e4:	83 e0 01             	and    eax,0x1
c001a5e7:	74 0d                	je     c001a5f6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a5e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5ed:	d1 e8                	shr    eax,1
c001a5ef:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a5f4:	eb 06                	jmp    c001a5fc <Net::crc32Calc(unsigned char*, int)+0x77>
c001a5f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5fa:	d1 e8                	shr    eax,1
c001a5fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a600:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a604:	eb d3                	jmp    c001a5d9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a606:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a60a:	eb a8                	jmp    c001a5b4 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a610:	f7 d0                	not    eax
c001a612:	83 c4 10             	add    esp,0x10
c001a615:	c3                   	ret    

c001a616 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a616:	83 ec 1c             	sub    esp,0x1c
c001a619:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a61d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a621:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a629:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a62e:	7f 14                	jg     c001a644 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a630:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a634:	8d 50 01             	lea    edx,[eax+0x1]
c001a637:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a63b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a63e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a642:	eb e5                	jmp    c001a629 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a644:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a648:	8d 50 01             	lea    edx,[eax+0x1]
c001a64b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a64f:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a652:	83 ec 04             	sub    esp,0x4
c001a655:	6a 06                	push   0x6
c001a657:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a65b:	50                   	push   eax
c001a65c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a660:	e8 df 60 fe ff       	call   c0000744 <memcpy>
c001a665:	83 c4 10             	add    esp,0x10
c001a668:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a66d:	83 ec 04             	sub    esp,0x4
c001a670:	6a 06                	push   0x6
c001a672:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a676:	50                   	push   eax
c001a677:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a67b:	e8 c4 60 fe ff       	call   c0000744 <memcpy>
c001a680:	83 c4 10             	add    esp,0x10
c001a683:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a688:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a68c:	0f b7 c0             	movzx  eax,ax
c001a68f:	c1 f8 08             	sar    eax,0x8
c001a692:	89 c1                	mov    ecx,eax
c001a694:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a698:	8d 50 01             	lea    edx,[eax+0x1]
c001a69b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a69f:	88 ca                	mov    dl,cl
c001a6a1:	88 10                	mov    BYTE PTR [eax],dl
c001a6a3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a6a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6ab:	8d 48 01             	lea    ecx,[eax+0x1]
c001a6ae:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a6b2:	88 10                	mov    BYTE PTR [eax],dl
c001a6b4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a6b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6bc:	83 ec 04             	sub    esp,0x4
c001a6bf:	52                   	push   edx
c001a6c0:	50                   	push   eax
c001a6c1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a6c5:	e8 7a 60 fe ff       	call   c0000744 <memcpy>
c001a6ca:	83 c4 10             	add    esp,0x10
c001a6cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a6d1:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a6d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a6dd:	83 ec 08             	sub    esp,0x8
c001a6e0:	50                   	push   eax
c001a6e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a6e5:	e8 9b fe ff ff       	call   c001a585 <Net::crc32Calc(unsigned char*, int)>
c001a6ea:	83 c4 10             	add    esp,0x10
c001a6ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f5:	c1 e8 18             	shr    eax,0x18
c001a6f8:	89 c1                	mov    ecx,eax
c001a6fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6fe:	8d 50 01             	lea    edx,[eax+0x1]
c001a701:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a705:	88 ca                	mov    dl,cl
c001a707:	88 10                	mov    BYTE PTR [eax],dl
c001a709:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a70d:	c1 e8 10             	shr    eax,0x10
c001a710:	89 c1                	mov    ecx,eax
c001a712:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a716:	8d 50 01             	lea    edx,[eax+0x1]
c001a719:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a71d:	88 ca                	mov    dl,cl
c001a71f:	88 10                	mov    BYTE PTR [eax],dl
c001a721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a725:	c1 e8 08             	shr    eax,0x8
c001a728:	89 c1                	mov    ecx,eax
c001a72a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a72e:	8d 50 01             	lea    edx,[eax+0x1]
c001a731:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a735:	88 ca                	mov    dl,cl
c001a737:	88 10                	mov    BYTE PTR [eax],dl
c001a739:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a73d:	8d 50 01             	lea    edx,[eax+0x1]
c001a740:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a744:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a748:	88 10                	mov    BYTE PTR [eax],dl
c001a74a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a74e:	83 c4 1c             	add    esp,0x1c
c001a751:	c3                   	ret    

c001a752 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a752:	83 ec 2c             	sub    esp,0x2c
c001a755:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a759:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a75d:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a762:	83 ec 04             	sub    esp,0x4
c001a765:	6a 06                	push   0x6
c001a767:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a76b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a76f:	83 c0 0e             	add    eax,0xe
c001a772:	50                   	push   eax
c001a773:	e8 cc 5f fe ff       	call   c0000744 <memcpy>
c001a778:	83 c4 10             	add    esp,0x10
c001a77b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a780:	83 ec 04             	sub    esp,0x4
c001a783:	6a 06                	push   0x6
c001a785:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a789:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a78d:	83 c0 08             	add    eax,0x8
c001a790:	50                   	push   eax
c001a791:	e8 ae 5f fe ff       	call   c0000744 <memcpy>
c001a796:	83 c4 10             	add    esp,0x10
c001a799:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a79e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7a2:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a7a9:	8a 00                	mov    al,BYTE PTR [eax]
c001a7ab:	0f b6 c0             	movzx  eax,al
c001a7ae:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a7b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7b7:	8d 50 01             	lea    edx,[eax+0x1]
c001a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a7be:	8a 00                	mov    al,BYTE PTR [eax]
c001a7c0:	0f b6 c0             	movzx  eax,al
c001a7c3:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a7c8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a7cd:	c1 e0 08             	shl    eax,0x8
c001a7d0:	89 c2                	mov    edx,eax
c001a7d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7d6:	09 d0                	or     eax,edx
c001a7d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7dc:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a7e0:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a7e5:	75 3a                	jne    c001a821 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a7e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a7eb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a7ee:	66 3d dc 05          	cmp    ax,0x5dc
c001a7f2:	77 10                	ja     c001a804 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a7f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a7f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a7fb:	0f b7 c0             	movzx  eax,ax
c001a7fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a802:	eb 1d                	jmp    c001a821 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a804:	83 ec 0c             	sub    esp,0xc
c001a807:	68 64 b6 02 c0       	push   0xc002b664
c001a80c:	e8 fe 82 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a811:	83 c4 10             	add    esp,0x10
c001a814:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a818:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a81c:	e9 c0 00 00 00       	jmp    c001a8e1 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a821:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a825:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a829:	8b 00                	mov    eax,DWORD PTR [eax]
c001a82b:	83 ec 04             	sub    esp,0x4
c001a82e:	52                   	push   edx
c001a82f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a833:	50                   	push   eax
c001a834:	e8 0b 5f fe ff       	call   c0000744 <memcpy>
c001a839:	83 c4 10             	add    esp,0x10
c001a83c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a840:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a844:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a848:	8d 50 01             	lea    edx,[eax+0x1]
c001a84b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a84f:	8a 00                	mov    al,BYTE PTR [eax]
c001a851:	0f b6 c0             	movzx  eax,al
c001a854:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a858:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a85c:	8d 50 01             	lea    edx,[eax+0x1]
c001a85f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a863:	8a 00                	mov    al,BYTE PTR [eax]
c001a865:	0f b6 c0             	movzx  eax,al
c001a868:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a86c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a870:	8d 50 01             	lea    edx,[eax+0x1]
c001a873:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a877:	8a 00                	mov    al,BYTE PTR [eax]
c001a879:	0f b6 c0             	movzx  eax,al
c001a87c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a880:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a884:	8d 50 01             	lea    edx,[eax+0x1]
c001a887:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a88b:	8a 00                	mov    al,BYTE PTR [eax]
c001a88d:	0f b6 c0             	movzx  eax,al
c001a890:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a894:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a898:	c1 e0 18             	shl    eax,0x18
c001a89b:	89 c2                	mov    edx,eax
c001a89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a1:	c1 e0 10             	shl    eax,0x10
c001a8a4:	09 c2                	or     edx,eax
c001a8a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8aa:	c1 e0 08             	shl    eax,0x8
c001a8ad:	09 d0                	or     eax,edx
c001a8af:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a8b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a8b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8bb:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a8bf:	83 e8 04             	sub    eax,0x4
c001a8c2:	83 ec 08             	sub    esp,0x8
c001a8c5:	50                   	push   eax
c001a8c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a8ca:	e8 b6 fc ff ff       	call   c001a585 <Net::crc32Calc(unsigned char*, int)>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a8d6:	0f 94 c2             	sete   dl
c001a8d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8dd:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a8e0:	90                   	nop
c001a8e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8e5:	83 c4 2c             	add    esp,0x2c
c001a8e8:	c2 04 00             	ret    0x4

c001a8eb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a8eb:	55                   	push   ebp
c001a8ec:	57                   	push   edi
c001a8ed:	56                   	push   esi
c001a8ee:	53                   	push   ebx
c001a8ef:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8f5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a8fc:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a8fe:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a901:	80 fb 40             	cmp    bl,0x40
c001a904:	75 1b                	jne    c001a921 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a906:	8a 16                	mov    dl,BYTE PTR [esi]
c001a908:	84 d2                	test   dl,dl
c001a90a:	0f 84 f1 00 00 00    	je     c001aa01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a910:	8d 46 01             	lea    eax,[esi+0x1]
c001a913:	80 fa 3a             	cmp    dl,0x3a
c001a916:	74 04                	je     c001a91c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a918:	89 c6                	mov    esi,eax
c001a91a:	eb ea                	jmp    c001a906 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a91c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a91f:	89 c6                	mov    esi,eax
c001a921:	50                   	push   eax
c001a922:	6a 40                	push   0x40
c001a924:	6a 00                	push   0x0
c001a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a92a:	50                   	push   eax
c001a92b:	e8 48 5e fe ff       	call   c0000778 <memset>
c001a930:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a937:	31 c0                	xor    eax,eax
c001a939:	83 c4 10             	add    esp,0x10
c001a93c:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a93e:	84 c9                	test   cl,cl
c001a940:	0f 84 bb 00 00 00    	je     c001aa01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a946:	3d c7 00 00 00       	cmp    eax,0xc7
c001a94b:	0f 8f b0 00 00 00    	jg     c001aa01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a951:	80 f9 0a             	cmp    cl,0xa
c001a954:	0f 85 98 00 00 00    	jne    c001a9f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a95a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a95f:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a963:	a8 df                	test   al,0xdf
c001a965:	0f 94 c1             	sete   cl
c001a968:	3c 23                	cmp    al,0x23
c001a96a:	0f 94 c2             	sete   dl
c001a96d:	08 d1                	or     cl,dl
c001a96f:	75 4a                	jne    c001a9bb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a971:	8d 50 f7             	lea    edx,[eax-0x9]
c001a974:	80 fa 01             	cmp    dl,0x1
c001a977:	76 42                	jbe    c001a9bb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a979:	3c 5b                	cmp    al,0x5b
c001a97b:	75 42                	jne    c001a9bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a97d:	80 fb 40             	cmp    bl,0x40
c001a980:	75 39                	jne    c001a9bb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a982:	83 ec 0c             	sub    esp,0xc
c001a985:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a989:	52                   	push   edx
c001a98a:	e8 05 5e fe ff       	call   c0000794 <strlen>
c001a98f:	83 c4 10             	add    esp,0x10
c001a992:	83 f8 3f             	cmp    eax,0x3f
c001a995:	77 6a                	ja     c001aa01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a997:	50                   	push   eax
c001a998:	50                   	push   eax
c001a999:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a99d:	52                   	push   edx
c001a99e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9a2:	52                   	push   edx
c001a9a3:	e8 8c 5e fe ff       	call   c0000834 <strcpy>
c001a9a8:	58                   	pop    eax
c001a9a9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9ad:	52                   	push   edx
c001a9ae:	e8 e1 5d fe ff       	call   c0000794 <strlen>
c001a9b3:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a9b8:	83 c4 10             	add    esp,0x10
c001a9bb:	31 d2                	xor    edx,edx
c001a9bd:	eb 3a                	jmp    c001a9f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a9bf:	80 fb 40             	cmp    bl,0x40
c001a9c2:	74 06                	je     c001a9ca <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a9c4:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a9c8:	eb 20                	jmp    c001a9ea <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a9ca:	50                   	push   eax
c001a9cb:	50                   	push   eax
c001a9cc:	55                   	push   ebp
c001a9cd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9d1:	50                   	push   eax
c001a9d2:	e8 e9 5e fe ff       	call   c00008c0 <strcmp>
c001a9d7:	83 c4 10             	add    esp,0x10
c001a9da:	85 c0                	test   eax,eax
c001a9dc:	75 dd                	jne    c001a9bb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9de:	eb e4                	jmp    c001a9c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a9e0:	8d 50 01             	lea    edx,[eax+0x1]
c001a9e3:	80 f9 3d             	cmp    cl,0x3d
c001a9e6:	74 1d                	je     c001aa05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a9e8:	89 d0                	mov    eax,edx
c001a9ea:	8a 08                	mov    cl,BYTE PTR [eax]
c001a9ec:	84 c9                	test   cl,cl
c001a9ee:	75 f0                	jne    c001a9e0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a9f0:	eb 0f                	jmp    c001aa01 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9f2:	8d 50 01             	lea    edx,[eax+0x1]
c001a9f5:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a9f9:	47                   	inc    edi
c001a9fa:	89 d0                	mov    eax,edx
c001a9fc:	e9 3b ff ff ff       	jmp    c001a93c <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aa01:	31 c0                	xor    eax,eax
c001aa03:	eb 33                	jmp    c001aa38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aa05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aa09:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aa0c:	50                   	push   eax
c001aa0d:	50                   	push   eax
c001aa0e:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aa12:	50                   	push   eax
c001aa13:	56                   	push   esi
c001aa14:	e8 a7 5e fe ff       	call   c00008c0 <strcmp>
c001aa19:	83 c4 10             	add    esp,0x10
c001aa1c:	85 c0                	test   eax,eax
c001aa1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa22:	75 97                	jne    c001a9bb <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa24:	51                   	push   ecx
c001aa25:	51                   	push   ecx
c001aa26:	52                   	push   edx
c001aa27:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aa2e:	e8 01 5e fe ff       	call   c0000834 <strcpy>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	b0 01                	mov    al,0x1
c001aa38:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aa3e:	5b                   	pop    ebx
c001aa3f:	5e                   	pop    esi
c001aa40:	5f                   	pop    edi
c001aa41:	5d                   	pop    ebp
c001aa42:	c3                   	ret    

c001aa43 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aa43:	57                   	push   edi
c001aa44:	56                   	push   esi
c001aa45:	53                   	push   ebx
c001aa46:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aa4c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aa53:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa5a:	53                   	push   ebx
c001aa5b:	e8 34 5d fe ff       	call   c0000794 <strlen>
c001aa60:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa63:	89 c7                	mov    edi,eax
c001aa65:	e8 2a 5d fe ff       	call   c0000794 <strlen>
c001aa6a:	83 c4 10             	add    esp,0x10
c001aa6d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aa71:	3d ff 00 00 00       	cmp    eax,0xff
c001aa76:	0f 87 d3 00 00 00    	ja     c001ab4f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aa7c:	57                   	push   edi
c001aa7d:	57                   	push   edi
c001aa7e:	56                   	push   esi
c001aa7f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aa83:	56                   	push   esi
c001aa84:	e8 ab 5d fe ff       	call   c0000834 <strcpy>
c001aa89:	58                   	pop    eax
c001aa8a:	5a                   	pop    edx
c001aa8b:	68 f7 ba 02 c0       	push   0xc002baf7
c001aa90:	56                   	push   esi
c001aa91:	e8 de 5e fe ff       	call   c0000974 <strcat>
c001aa96:	59                   	pop    ecx
c001aa97:	5f                   	pop    edi
c001aa98:	53                   	push   ebx
c001aa99:	56                   	push   esi
c001aa9a:	e8 d5 5e fe ff       	call   c0000974 <strcat>
c001aa9f:	58                   	pop    eax
c001aaa0:	5a                   	pop    edx
c001aaa1:	68 b0 b6 02 c0       	push   0xc002b6b0
c001aaa6:	56                   	push   esi
c001aaa7:	e8 c8 5e fe ff       	call   c0000974 <strcat>
c001aaac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aab3:	e8 88 4d ff ff       	call   c000f840 <malloc>
c001aab8:	83 c4 0c             	add    esp,0xc
c001aabb:	89 c3                	mov    ebx,eax
c001aabd:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c001aac3:	56                   	push   esi
c001aac4:	50                   	push   eax
c001aac5:	e8 9e 85 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001aaca:	83 c4 10             	add    esp,0x10
c001aacd:	85 db                	test   ebx,ebx
c001aacf:	74 7e                	je     c001ab4f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aad1:	51                   	push   ecx
c001aad2:	51                   	push   ecx
c001aad3:	6a 01                	push   0x1
c001aad5:	53                   	push   ebx
c001aad6:	e8 f1 85 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001aadb:	83 c4 10             	add    esp,0x10
c001aade:	85 c0                	test   eax,eax
c001aae0:	74 08                	je     c001aaea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aae2:	83 ec 0c             	sub    esp,0xc
c001aae5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aae7:	53                   	push   ebx
c001aae8:	eb 5f                	jmp    c001ab49 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aaea:	52                   	push   edx
c001aaeb:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aaef:	50                   	push   eax
c001aaf0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aaf4:	50                   	push   eax
c001aaf5:	53                   	push   ebx
c001aaf6:	e8 7d 88 ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001aafb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aaff:	83 c4 10             	add    esp,0x10
c001ab02:	89 c1                	mov    ecx,eax
c001ab04:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ab08:	74 31                	je     c001ab3b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab0a:	83 ec 0c             	sub    esp,0xc
c001ab0d:	50                   	push   eax
c001ab0e:	e8 2d 4d ff ff       	call   c000f840 <malloc>
c001ab13:	89 c6                	mov    esi,eax
c001ab15:	58                   	pop    eax
c001ab16:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab18:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ab1c:	52                   	push   edx
c001ab1d:	56                   	push   esi
c001ab1e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab26:	53                   	push   ebx
c001ab27:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab2a:	83 c4 20             	add    esp,0x20
c001ab2d:	85 c0                	test   eax,eax
c001ab2f:	75 0a                	jne    c001ab3b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab35:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ab39:	74 18                	je     c001ab53 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ab3b:	83 ec 0c             	sub    esp,0xc
c001ab3e:	53                   	push   ebx
c001ab3f:	e8 e6 85 ff ff       	call   c001312a <File::close()>
c001ab44:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab4c:	83 c4 10             	add    esp,0x10
c001ab4f:	31 c0                	xor    eax,eax
c001ab51:	eb 3b                	jmp    c001ab8e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ab53:	83 ec 0c             	sub    esp,0xc
c001ab56:	53                   	push   ebx
c001ab57:	e8 ce 85 ff ff       	call   c001312a <File::close()>
c001ab5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab61:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab64:	83 c4 0c             	add    esp,0xc
c001ab67:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab6e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab75:	56                   	push   esi
c001ab76:	e8 70 fd ff ff       	call   c001a8eb <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ab7b:	89 34 24             	mov    DWORD PTR [esp],esi
c001ab7e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab82:	e8 c9 4c ff ff       	call   c000f850 <free>
c001ab87:	83 c4 10             	add    esp,0x10
c001ab8a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ab8e:	81 c4 20 01 00 00    	add    esp,0x120
c001ab94:	5b                   	pop    ebx
c001ab95:	5e                   	pop    esi
c001ab96:	5f                   	pop    edi
c001ab97:	c3                   	ret    

c001ab98 <Reg::getLine(char*, char*, char*)>:
c001ab98:	57                   	push   edi
c001ab99:	56                   	push   esi
c001ab9a:	53                   	push   ebx
c001ab9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aba3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aba7:	57                   	push   edi
c001aba8:	56                   	push   esi
c001aba9:	53                   	push   ebx
c001abaa:	68 b5 b6 02 c0       	push   0xc002b6b5
c001abaf:	e8 8f fe ff ff       	call   c001aa43 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001abb4:	83 c4 10             	add    esp,0x10
c001abb7:	84 c0                	test   al,al
c001abb9:	75 10                	jne    c001abcb <Reg::getLine(char*, char*, char*)+0x33>
c001abbb:	57                   	push   edi
c001abbc:	56                   	push   esi
c001abbd:	53                   	push   ebx
c001abbe:	68 da b6 02 c0       	push   0xc002b6da
c001abc3:	e8 7b fe ff ff       	call   c001aa43 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001abc8:	83 c4 10             	add    esp,0x10
c001abcb:	5b                   	pop    ebx
c001abcc:	5e                   	pop    esi
c001abcd:	5f                   	pop    edi
c001abce:	c3                   	ret    

c001abcf <Reg::readInt(char*, char*, int*)>:
c001abcf:	55                   	push   ebp
c001abd0:	57                   	push   edi
c001abd1:	56                   	push   esi
c001abd2:	53                   	push   ebx
c001abd3:	81 ec f0 00 00 00    	sub    esp,0xf0
c001abd9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001abdd:	57                   	push   edi
c001abde:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001abe5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001abec:	e8 a7 ff ff ff       	call   c001ab98 <Reg::getLine(char*, char*, char*)>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	84 c0                	test   al,al
c001abf6:	0f 84 b3 00 00 00    	je     c001acaf <Reg::readInt(char*, char*, int*)+0xe0>
c001abfc:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ac00:	80 fa 2b             	cmp    dl,0x2b
c001ac03:	74 0c                	je     c001ac11 <Reg::readInt(char*, char*, int*)+0x42>
c001ac05:	80 fa 2d             	cmp    dl,0x2d
c001ac08:	75 0e                	jne    c001ac18 <Reg::readInt(char*, char*, int*)+0x49>
c001ac0a:	ba 01 00 00 00       	mov    edx,0x1
c001ac0f:	eb 0b                	jmp    c001ac1c <Reg::readInt(char*, char*, int*)+0x4d>
c001ac11:	ba 01 00 00 00       	mov    edx,0x1
c001ac16:	eb 02                	jmp    c001ac1a <Reg::readInt(char*, char*, int*)+0x4b>
c001ac18:	31 d2                	xor    edx,edx
c001ac1a:	31 c0                	xor    eax,eax
c001ac1c:	be 0a 00 00 00       	mov    esi,0xa
c001ac21:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ac26:	75 20                	jne    c001ac48 <Reg::readInt(char*, char*, int*)+0x79>
c001ac28:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ac2c:	80 f9 78             	cmp    cl,0x78
c001ac2f:	75 0a                	jne    c001ac3b <Reg::readInt(char*, char*, int*)+0x6c>
c001ac31:	83 c2 02             	add    edx,0x2
c001ac34:	be 10 00 00 00       	mov    esi,0x10
c001ac39:	eb 0d                	jmp    c001ac48 <Reg::readInt(char*, char*, int*)+0x79>
c001ac3b:	80 f9 62             	cmp    cl,0x62
c001ac3e:	75 08                	jne    c001ac48 <Reg::readInt(char*, char*, int*)+0x79>
c001ac40:	83 c2 02             	add    edx,0x2
c001ac43:	be 02 00 00 00       	mov    esi,0x2
c001ac48:	01 d7                	add    edi,edx
c001ac4a:	31 d2                	xor    edx,edx
c001ac4c:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ac4e:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ac52:	80 fb 0d             	cmp    bl,0xd
c001ac55:	0f 94 c3             	sete   bl
c001ac58:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ac5d:	0f 94 c1             	sete   cl
c001ac60:	08 cb                	or     bl,cl
c001ac62:	75 3a                	jne    c001ac9e <Reg::readInt(char*, char*, int*)+0xcf>
c001ac64:	0f af d6             	imul   edx,esi
c001ac67:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ac6c:	83 fe 10             	cmp    esi,0x10
c001ac6f:	75 26                	jne    c001ac97 <Reg::readInt(char*, char*, int*)+0xc8>
c001ac71:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac75:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ac78:	89 e9                	mov    ecx,ebp
c001ac7a:	80 f9 05             	cmp    cl,0x5
c001ac7d:	77 06                	ja     c001ac85 <Reg::readInt(char*, char*, int*)+0xb6>
c001ac7f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ac83:	eb 16                	jmp    c001ac9b <Reg::readInt(char*, char*, int*)+0xcc>
c001ac85:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac89:	83 e9 61             	sub    ecx,0x61
c001ac8c:	80 f9 05             	cmp    cl,0x5
c001ac8f:	77 06                	ja     c001ac97 <Reg::readInt(char*, char*, int*)+0xc8>
c001ac91:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ac95:	eb 04                	jmp    c001ac9b <Reg::readInt(char*, char*, int*)+0xcc>
c001ac97:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ac9b:	47                   	inc    edi
c001ac9c:	eb ae                	jmp    c001ac4c <Reg::readInt(char*, char*, int*)+0x7d>
c001ac9e:	84 c0                	test   al,al
c001aca0:	74 02                	je     c001aca4 <Reg::readInt(char*, char*, int*)+0xd5>
c001aca2:	f7 da                	neg    edx
c001aca4:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001acab:	89 10                	mov    DWORD PTR [eax],edx
c001acad:	88 d8                	mov    al,bl
c001acaf:	81 c4 ec 00 00 00    	add    esp,0xec
c001acb5:	5b                   	pop    ebx
c001acb6:	5e                   	pop    esi
c001acb7:	5f                   	pop    edi
c001acb8:	5d                   	pop    ebp
c001acb9:	c3                   	ret    

c001acba <Reg::readString(char*, char*, char*, int)>:
c001acba:	57                   	push   edi
c001acbb:	56                   	push   esi
c001acbc:	53                   	push   ebx
c001acbd:	81 ec d4 00 00 00    	sub    esp,0xd4
c001acc3:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001acca:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001acce:	57                   	push   edi
c001accf:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001acd6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001acdd:	e8 b6 fe ff ff       	call   c001ab98 <Reg::getLine(char*, char*, char*)>
c001ace2:	83 c4 10             	add    esp,0x10
c001ace5:	89 c6                	mov    esi,eax
c001ace7:	84 c0                	test   al,al
c001ace9:	74 44                	je     c001ad2f <Reg::readString(char*, char*, char*, int)+0x75>
c001aceb:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001acf2:	31 c0                	xor    eax,eax
c001acf4:	4a                   	dec    edx
c001acf5:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001acf8:	84 c9                	test   cl,cl
c001acfa:	74 0f                	je     c001ad0b <Reg::readString(char*, char*, char*, int)+0x51>
c001acfc:	39 c2                	cmp    edx,eax
c001acfe:	7e 0b                	jle    c001ad0b <Reg::readString(char*, char*, char*, int)+0x51>
c001ad00:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ad03:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ad08:	40                   	inc    eax
c001ad09:	eb ea                	jmp    c001acf5 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ad0b:	83 ec 0c             	sub    esp,0xc
c001ad0e:	53                   	push   ebx
c001ad0f:	e8 80 5a fe ff       	call   c0000794 <strlen>
c001ad14:	83 c4 10             	add    esp,0x10
c001ad17:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ad1c:	75 11                	jne    c001ad2f <Reg::readString(char*, char*, char*, int)+0x75>
c001ad1e:	83 ec 0c             	sub    esp,0xc
c001ad21:	53                   	push   ebx
c001ad22:	e8 6d 5a fe ff       	call   c0000794 <strlen>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ad2f:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ad35:	89 f0                	mov    eax,esi
c001ad37:	5b                   	pop    ebx
c001ad38:	5e                   	pop    esi
c001ad39:	5f                   	pop    edi
c001ad3a:	c3                   	ret    

c001ad3b <Reg::readBool(char*, char*, bool*)>:
c001ad3b:	83 ec 20             	sub    esp,0x20
c001ad3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad42:	50                   	push   eax
c001ad43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad4b:	e8 7f fe ff ff       	call   c001abcf <Reg::readInt(char*, char*, int*)>
c001ad50:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ad55:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad59:	0f 95 02             	setne  BYTE PTR [edx]
c001ad5c:	83 c4 2c             	add    esp,0x2c
c001ad5f:	c3                   	ret    

c001ad60 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ad60:	53                   	push   ebx
c001ad61:	83 ec 1c             	sub    esp,0x1c
c001ad64:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ad68:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ad6c:	50                   	push   eax
c001ad6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad75:	e8 c1 ff ff ff       	call   c001ad3b <Reg::readBool(char*, char*, bool*)>
c001ad7a:	83 c4 10             	add    esp,0x10
c001ad7d:	84 c0                	test   al,al
c001ad7f:	74 04                	je     c001ad85 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ad81:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ad85:	88 d8                	mov    al,bl
c001ad87:	83 c4 18             	add    esp,0x18
c001ad8a:	5b                   	pop    ebx
c001ad8b:	c3                   	ret    

c001ad8c <Reg::readIntWithDefault(char*, char*, int)>:
c001ad8c:	53                   	push   ebx
c001ad8d:	83 ec 1c             	sub    esp,0x1c
c001ad90:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad94:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad98:	50                   	push   eax
c001ad99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ada1:	e8 29 fe ff ff       	call   c001abcf <Reg::readInt(char*, char*, int*)>
c001ada6:	83 c4 10             	add    esp,0x10
c001ada9:	84 c0                	test   al,al
c001adab:	74 04                	je     c001adb1 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001adad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001adb1:	89 d8                	mov    eax,ebx
c001adb3:	83 c4 18             	add    esp,0x18
c001adb6:	5b                   	pop    ebx
c001adb7:	c3                   	ret    

c001adb8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001adb8:	57                   	push   edi
c001adb9:	56                   	push   esi
c001adba:	53                   	push   ebx
c001adbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001adbf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001adc3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001adc7:	56                   	push   esi
c001adc8:	53                   	push   ebx
c001adc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001add1:	e8 e4 fe ff ff       	call   c001acba <Reg::readString(char*, char*, char*, int)>
c001add6:	83 c4 10             	add    esp,0x10
c001add9:	84 c0                	test   al,al
c001addb:	75 1b                	jne    c001adf8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001addd:	50                   	push   eax
c001adde:	56                   	push   esi
c001addf:	4e                   	dec    esi
c001ade0:	6a 00                	push   0x0
c001ade2:	53                   	push   ebx
c001ade3:	e8 90 59 fe ff       	call   c0000778 <memset>
c001ade8:	83 c4 0c             	add    esp,0xc
c001adeb:	56                   	push   esi
c001adec:	57                   	push   edi
c001aded:	53                   	push   ebx
c001adee:	89 fb                	mov    ebx,edi
c001adf0:	e8 4f 59 fe ff       	call   c0000744 <memcpy>
c001adf5:	83 c4 10             	add    esp,0x10
c001adf8:	89 d8                	mov    eax,ebx
c001adfa:	5b                   	pop    ebx
c001adfb:	5e                   	pop    esi
c001adfc:	5f                   	pop    edi
c001adfd:	c3                   	ret    

c001adfe <Sys::eject(regs*)>:
c001adfe:	83 ec 0c             	sub    esp,0xc
c001ae01:	83 ca ff             	or     edx,0xffffffff
c001ae04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae08:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ae0b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ae10:	83 e9 41             	sub    ecx,0x41
c001ae13:	83 f9 19             	cmp    ecx,0x19
c001ae16:	77 18                	ja     c001ae30 <Sys::eject(regs*)+0x32>
c001ae18:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c001ae1f:	85 c9                	test   ecx,ecx
c001ae21:	74 0d                	je     c001ae30 <Sys::eject(regs*)+0x32>
c001ae23:	83 ec 0c             	sub    esp,0xc
c001ae26:	51                   	push   ecx
c001ae27:	e8 36 b4 ff ff       	call   c0016262 <LogicalDisk::eject()>
c001ae2c:	83 c4 10             	add    esp,0x10
c001ae2f:	99                   	cdq    
c001ae30:	83 c4 0c             	add    esp,0xc
c001ae33:	c3                   	ret    

c001ae34 <Sys::exit(regs*)>:
c001ae34:	83 ec 18             	sub    esp,0x18
c001ae37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae3b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae3e:	e8 2e 34 00 00       	call   c001e271 <terminateTask(int)>
c001ae43:	83 c8 ff             	or     eax,0xffffffff
c001ae46:	83 c4 1c             	add    esp,0x1c
c001ae49:	89 c2                	mov    edx,eax
c001ae4b:	c3                   	ret    

c001ae4c <Sys::getCwd(regs*)>:
c001ae4c:	83 ec 10             	sub    esp,0x10
c001ae4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae53:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ae56:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae5e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae61:	e8 04 80 ff ff       	call   c0012e6a <Fs::getcwd(Process*, char*, int)>
c001ae66:	83 c4 1c             	add    esp,0x1c
c001ae69:	99                   	cdq    
c001ae6a:	c3                   	ret    

c001ae6b <Sys::getPID(regs*)>:
c001ae6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae75:	99                   	cdq    
c001ae76:	c3                   	ret    

c001ae77 <Sys::loadDLL(regs*)>:
c001ae77:	56                   	push   esi
c001ae78:	53                   	push   ebx
c001ae79:	31 d2                	xor    edx,edx
c001ae7b:	51                   	push   ecx
c001ae7c:	b8 01 00 00 00       	mov    eax,0x1
c001ae81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae85:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ae89:	0f 84 8c 00 00 00    	je     c001af1b <Sys::loadDLL(regs*)+0xa4>
c001ae8f:	83 ec 0c             	sub    esp,0xc
c001ae92:	68 14 01 00 00       	push   0x114
c001ae97:	e8 a4 49 ff ff       	call   c000f840 <malloc>
c001ae9c:	83 c4 0c             	add    esp,0xc
c001ae9f:	89 c3                	mov    ebx,eax
c001aea1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aea6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aea9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aeac:	53                   	push   ebx
c001aead:	e8 b6 81 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001aeb2:	83 c4 10             	add    esp,0x10
c001aeb5:	31 d2                	xor    edx,edx
c001aeb7:	b8 02 00 00 00       	mov    eax,0x2
c001aebc:	85 db                	test   ebx,ebx
c001aebe:	74 5b                	je     c001af1b <Sys::loadDLL(regs*)+0xa4>
c001aec0:	83 ec 0c             	sub    esp,0xc
c001aec3:	53                   	push   ebx
c001aec4:	e8 71 84 ff ff       	call   c001333a <File::exists()>
c001aec9:	83 c4 10             	add    esp,0x10
c001aecc:	84 c0                	test   al,al
c001aece:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aed0:	75 11                	jne    c001aee3 <Sys::loadDLL(regs*)+0x6c>
c001aed2:	83 ec 0c             	sub    esp,0xc
c001aed5:	53                   	push   ebx
c001aed6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aed9:	83 c4 10             	add    esp,0x10
c001aedc:	b8 03 00 00 00       	mov    eax,0x3
c001aee1:	eb 36                	jmp    c001af19 <Sys::loadDLL(regs*)+0xa2>
c001aee3:	83 ec 0c             	sub    esp,0xc
c001aee6:	53                   	push   ebx
c001aee7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aeea:	58                   	pop    eax
c001aeeb:	5a                   	pop    edx
c001aeec:	6a 00                	push   0x0
c001aeee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aef1:	e8 91 22 00 00       	call   c001d187 <Thr::loadDLL(char const*, bool)>
c001aef6:	83 c4 10             	add    esp,0x10
c001aef9:	89 c1                	mov    ecx,eax
c001aefb:	31 d2                	xor    edx,edx
c001aefd:	b8 04 00 00 00       	mov    eax,0x4
c001af02:	85 c9                	test   ecx,ecx
c001af04:	74 15                	je     c001af1b <Sys::loadDLL(regs*)+0xa4>
c001af06:	53                   	push   ebx
c001af07:	53                   	push   ebx
c001af08:	ff 35 08 dd 02 c0    	push   DWORD PTR ds:0xc002dd08
c001af0e:	51                   	push   ecx
c001af0f:	e8 a7 24 00 00       	call   c001d3bb <Thr::executeDLL(unsigned long, void*)>
c001af14:	83 c4 10             	add    esp,0x10
c001af17:	31 c0                	xor    eax,eax
c001af19:	31 d2                	xor    edx,edx
c001af1b:	59                   	pop    ecx
c001af1c:	5b                   	pop    ebx
c001af1d:	5e                   	pop    esi
c001af1e:	c3                   	ret    

c001af1f <Sys::read(regs*)>:
c001af1f:	57                   	push   edi
c001af20:	56                   	push   esi
c001af21:	53                   	push   ebx
c001af22:	83 ec 10             	sub    esp,0x10
c001af25:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af2c:	83 f8 02             	cmp    eax,0x2
c001af2f:	77 10                	ja     c001af41 <Sys::read(regs*)+0x22>
c001af31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af39:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001af3f:	eb 0e                	jmp    c001af4f <Sys::read(regs*)+0x30>
c001af41:	83 ec 0c             	sub    esp,0xc
c001af44:	50                   	push   eax
c001af45:	e8 7f 6a ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001af4a:	83 c4 10             	add    esp,0x10
c001af4d:	89 c1                	mov    ecx,eax
c001af4f:	83 c8 ff             	or     eax,0xffffffff
c001af52:	85 c9                	test   ecx,ecx
c001af54:	89 c2                	mov    edx,eax
c001af56:	74 28                	je     c001af80 <Sys::read(regs*)+0x61>
c001af58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af60:	31 ff                	xor    edi,edi
c001af62:	83 ec 0c             	sub    esp,0xc
c001af65:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af67:	8d 54 24 18          	lea    edx,[esp+0x18]
c001af6b:	52                   	push   edx
c001af6c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af6f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001af72:	57                   	push   edi
c001af73:	56                   	push   esi
c001af74:	51                   	push   ecx
c001af75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af7c:	83 c4 20             	add    esp,0x20
c001af7f:	99                   	cdq    
c001af80:	83 c4 10             	add    esp,0x10
c001af83:	5b                   	pop    ebx
c001af84:	5e                   	pop    esi
c001af85:	5f                   	pop    edi
c001af86:	c3                   	ret    

c001af87 <Sys::sbrk(regs*)>:
c001af87:	56                   	push   esi
c001af88:	53                   	push   ebx
c001af89:	50                   	push   eax
c001af8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af93:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af96:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001af99:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001af9f:	85 db                	test   ebx,ebx
c001afa1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001afa4:	74 02                	je     c001afa8 <Sys::sbrk(regs*)+0x21>
c001afa6:	79 06                	jns    c001afae <Sys::sbrk(regs*)+0x27>
c001afa8:	89 f0                	mov    eax,esi
c001afaa:	31 d2                	xor    edx,edx
c001afac:	eb 2a                	jmp    c001afd8 <Sys::sbrk(regs*)+0x51>
c001afae:	83 c8 ff             	or     eax,0xffffffff
c001afb1:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001afb7:	89 c2                	mov    edx,eax
c001afb9:	77 1d                	ja     c001afd8 <Sys::sbrk(regs*)+0x51>
c001afbb:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001afc1:	50                   	push   eax
c001afc2:	c1 ea 0c             	shr    edx,0xc
c001afc5:	68 07 04 00 00       	push   0x407
c001afca:	52                   	push   edx
c001afcb:	51                   	push   ecx
c001afcc:	e8 19 73 ff ff       	call   c00122ea <VAS::allocatePages(int, int)>
c001afd1:	89 f0                	mov    eax,esi
c001afd3:	31 d2                	xor    edx,edx
c001afd5:	83 c4 10             	add    esp,0x10
c001afd8:	59                   	pop    ecx
c001afd9:	5b                   	pop    ebx
c001afda:	5e                   	pop    esi
c001afdb:	c3                   	ret    

c001afdc <Sys::setCwd(regs*)>:
c001afdc:	83 ec 14             	sub    esp,0x14
c001afdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afe3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001afe6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afeb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afee:	e8 e6 83 ff ff       	call   c00133d9 <Fs::setcwd(Process*, char*)>
c001aff3:	83 c4 1c             	add    esp,0x1c
c001aff6:	99                   	cdq    
c001aff7:	c3                   	ret    

c001aff8 <Sys::setTime(regs*)>:
c001aff8:	55                   	push   ebp
c001aff9:	31 d2                	xor    edx,edx
c001affb:	57                   	push   edi
c001affc:	bf 18 00 00 00       	mov    edi,0x18
c001b001:	56                   	push   esi
c001b002:	53                   	push   ebx
c001b003:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b008:	83 ec 30             	sub    esp,0x30
c001b00b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b00f:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b012:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b015:	f7 f3                	div    ebx
c001b017:	89 d6                	mov    esi,edx
c001b019:	31 d2                	xor    edx,edx
c001b01b:	f7 f3                	div    ebx
c001b01d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b020:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b024:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b029:	31 d2                	xor    edx,edx
c001b02b:	f7 f3                	div    ebx
c001b02d:	31 d2                	xor    edx,edx
c001b02f:	bb 0c 00 00 00       	mov    ebx,0xc
c001b034:	f7 f7                	div    edi
c001b036:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b039:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b03d:	0f b7 cd             	movzx  ecx,bp
c001b040:	56                   	push   esi
c001b041:	89 c7                	mov    edi,eax
c001b043:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b047:	c1 e6 10             	shl    esi,0x10
c001b04a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b04e:	83 e7 1f             	and    edi,0x1f
c001b051:	51                   	push   ecx
c001b052:	47                   	inc    edi
c001b053:	c1 e8 05             	shr    eax,0x5
c001b056:	31 d2                	xor    edx,edx
c001b058:	f7 f3                	div    ebx
c001b05a:	31 db                	xor    ebx,ebx
c001b05c:	52                   	push   edx
c001b05d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b061:	57                   	push   edi
c001b062:	68 f5 b6 02 c0       	push   0xc002b6f5
c001b067:	e8 a3 7a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b06c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b070:	89 f8                	mov    eax,edi
c001b072:	31 c9                	xor    ecx,ecx
c001b074:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b078:	88 c1                	mov    cl,al
c001b07a:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b080:	88 d5                	mov    ch,dl
c001b082:	c1 e0 10             	shl    eax,0x10
c001b085:	0f b7 d1             	movzx  edx,cx
c001b088:	09 c2                	or     edx,eax
c001b08a:	89 d8                	mov    eax,ebx
c001b08c:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b091:	09 f0                	or     eax,esi
c001b093:	89 c3                	mov    ebx,eax
c001b095:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b099:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b09d:	83 c4 18             	add    esp,0x18
c001b0a0:	53                   	push   ebx
c001b0a1:	52                   	push   edx
c001b0a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b0a6:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b0aa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b0ae:	e8 40 8a ff ff       	call   c0013af3 <datetimeToSeconds(datetime_t)>
c001b0b3:	83 c4 0c             	add    esp,0xc
c001b0b6:	52                   	push   edx
c001b0b7:	50                   	push   eax
c001b0b8:	56                   	push   esi
c001b0b9:	e8 bc 8b ff ff       	call   c0013c7a <secondsToDatetime(unsigned long long)>
c001b0be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b0c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0c6:	51                   	push   ecx
c001b0c7:	89 d6                	mov    esi,edx
c001b0c9:	51                   	push   ecx
c001b0ca:	c1 ee 10             	shr    esi,0x10
c001b0cd:	89 f3                	mov    ebx,esi
c001b0cf:	0f b6 f3             	movzx  esi,bl
c001b0d2:	56                   	push   esi
c001b0d3:	0f b6 f6             	movzx  esi,dh
c001b0d6:	0f b6 d2             	movzx  edx,dl
c001b0d9:	56                   	push   esi
c001b0da:	52                   	push   edx
c001b0db:	89 c2                	mov    edx,eax
c001b0dd:	c1 ea 10             	shr    edx,0x10
c001b0e0:	52                   	push   edx
c001b0e1:	0f b6 d4             	movzx  edx,ah
c001b0e4:	0f b6 c0             	movzx  eax,al
c001b0e7:	52                   	push   edx
c001b0e8:	50                   	push   eax
c001b0e9:	68 11 b7 02 c0       	push   0xc002b711
c001b0ee:	e8 1c 7a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b0f3:	83 c4 2c             	add    esp,0x2c
c001b0f6:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001b0fb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b0ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b103:	53                   	push   ebx
c001b104:	51                   	push   ecx
c001b105:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b10b:	e8 0a 8b ff ff       	call   c0013c1a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b110:	83 f0 01             	xor    eax,0x1
c001b113:	31 d2                	xor    edx,edx
c001b115:	0f b6 c0             	movzx  eax,al
c001b118:	83 c4 3c             	add    esp,0x3c
c001b11b:	5b                   	pop    ebx
c001b11c:	5e                   	pop    esi
c001b11d:	5f                   	pop    edi
c001b11e:	5d                   	pop    ebp
c001b11f:	c3                   	ret    

c001b120 <Sys::timezone(regs*)>:
c001b120:	53                   	push   ebx
c001b121:	83 ec 08             	sub    esp,0x8
c001b124:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b128:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b12c:	75 17                	jne    c001b145 <Sys::timezone(regs*)+0x25>
c001b12e:	83 ec 0c             	sub    esp,0xc
c001b131:	68 2d b7 02 c0       	push   0xc002b72d
c001b136:	e8 d4 79 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b13b:	83 c8 ff             	or     eax,0xffffffff
c001b13e:	83 c4 10             	add    esp,0x10
c001b141:	89 c2                	mov    edx,eax
c001b143:	eb 20                	jmp    c001b165 <Sys::timezone(regs*)+0x45>
c001b145:	83 ec 0c             	sub    esp,0xc
c001b148:	68 65 b7 02 c0       	push   0xc002b765
c001b14d:	e8 bd 79 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b152:	58                   	pop    eax
c001b153:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b156:	e8 21 88 ff ff       	call   c001397c <User::loadClockSettings(int)>
c001b15b:	83 c4 10             	add    esp,0x10
c001b15e:	b8 01 00 00 00       	mov    eax,0x1
c001b163:	31 d2                	xor    edx,edx
c001b165:	83 c4 08             	add    esp,0x8
c001b168:	5b                   	pop    ebx
c001b169:	c3                   	ret    

c001b16a <Sys::write(regs*)>:
c001b16a:	57                   	push   edi
c001b16b:	56                   	push   esi
c001b16c:	53                   	push   ebx
c001b16d:	83 ec 10             	sub    esp,0x10
c001b170:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b174:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b177:	83 f8 02             	cmp    eax,0x2
c001b17a:	77 10                	ja     c001b18c <Sys::write(regs*)+0x22>
c001b17c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b181:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b184:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b18a:	eb 0e                	jmp    c001b19a <Sys::write(regs*)+0x30>
c001b18c:	83 ec 0c             	sub    esp,0xc
c001b18f:	50                   	push   eax
c001b190:	e8 34 68 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b195:	83 c4 10             	add    esp,0x10
c001b198:	89 c1                	mov    ecx,eax
c001b19a:	83 c8 ff             	or     eax,0xffffffff
c001b19d:	85 c9                	test   ecx,ecx
c001b19f:	89 c2                	mov    edx,eax
c001b1a1:	74 28                	je     c001b1cb <Sys::write(regs*)+0x61>
c001b1a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1ab:	31 ff                	xor    edi,edi
c001b1ad:	83 ec 0c             	sub    esp,0xc
c001b1b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b1b2:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b1b6:	52                   	push   edx
c001b1b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b1ba:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b1bd:	57                   	push   edi
c001b1be:	56                   	push   esi
c001b1bf:	51                   	push   ecx
c001b1c0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b1c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b1c7:	83 c4 20             	add    esp,0x20
c001b1ca:	99                   	cdq    
c001b1cb:	83 c4 10             	add    esp,0x10
c001b1ce:	5b                   	pop    ebx
c001b1cf:	5e                   	pop    esi
c001b1d0:	5f                   	pop    edi
c001b1d1:	c3                   	ret    

c001b1d2 <Sys::yield(regs*)>:
c001b1d2:	57                   	push   edi
c001b1d3:	56                   	push   esi
c001b1d4:	53                   	push   ebx
c001b1d5:	e8 54 26 00 00       	call   c001d82e <lockScheduler()>
c001b1da:	e8 8b 29 00 00       	call   c001db6a <schedule()>
c001b1df:	e8 4c 26 00 00       	call   c001d830 <unlockScheduler()>
c001b1e4:	8b 35 90 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e390
c001b1ea:	8b 3d 94 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e394
c001b1f0:	89 f0                	mov    eax,esi
c001b1f2:	89 fb                	mov    ebx,edi
c001b1f4:	89 f1                	mov    ecx,esi
c001b1f6:	c1 e0 07             	shl    eax,0x7
c001b1f9:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b1fd:	25 80 30 0f 00       	and    eax,0xf3080
c001b202:	c1 eb 17             	shr    ebx,0x17
c001b205:	31 c8                	xor    eax,ecx
c001b207:	89 da                	mov    edx,ebx
c001b209:	5b                   	pop    ebx
c001b20a:	5e                   	pop    esi
c001b20b:	5f                   	pop    edi
c001b20c:	c3                   	ret    

c001b20d <sysCallSeekDir(regs*)>:
c001b20d:	31 c0                	xor    eax,eax
c001b20f:	31 d2                	xor    edx,edx
c001b211:	c3                   	ret    

c001b212 <sysCallTellDir(regs*)>:
c001b212:	31 c0                	xor    eax,eax
c001b214:	31 d2                	xor    edx,edx
c001b216:	c3                   	ret    

c001b217 <sysCallVerify(regs*)>:
c001b217:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b21b:	31 d2                	xor    edx,edx
c001b21d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b220:	c3                   	ret    

c001b221 <sysCallGetArgc(regs*)>:
c001b221:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b226:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b229:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b22f:	99                   	cdq    
c001b230:	c3                   	ret    

c001b231 <sysFormatDisk(regs*)>:
c001b231:	56                   	push   esi
c001b232:	53                   	push   ebx
c001b233:	53                   	push   ebx
c001b234:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b238:	8b 1d 88 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de88
c001b23e:	eb 25                	jmp    c001b265 <sysFormatDisk(regs*)+0x34>
c001b240:	83 ec 0c             	sub    esp,0xc
c001b243:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b246:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b248:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b24b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b24e:	50                   	push   eax
c001b24f:	ff 34 85 20 e3 02 c0 	push   DWORD PTR [eax*4-0x3ffd1ce0]
c001b256:	53                   	push   ebx
c001b257:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b25a:	83 c4 20             	add    esp,0x20
c001b25d:	83 f8 08             	cmp    eax,0x8
c001b260:	75 12                	jne    c001b274 <sysFormatDisk(regs*)+0x43>
c001b262:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b265:	85 db                	test   ebx,ebx
c001b267:	75 d7                	jne    c001b240 <sysFormatDisk(regs*)+0xf>
c001b269:	59                   	pop    ecx
c001b26a:	b8 03 00 00 00       	mov    eax,0x3
c001b26f:	31 d2                	xor    edx,edx
c001b271:	5b                   	pop    ebx
c001b272:	5e                   	pop    esi
c001b273:	c3                   	ret    
c001b274:	85 c0                	test   eax,eax
c001b276:	74 1b                	je     c001b293 <sysFormatDisk(regs*)+0x62>
c001b278:	83 f8 09             	cmp    eax,0x9
c001b27b:	74 0b                	je     c001b288 <sysFormatDisk(regs*)+0x57>
c001b27d:	59                   	pop    ecx
c001b27e:	b8 02 00 00 00       	mov    eax,0x2
c001b283:	31 d2                	xor    edx,edx
c001b285:	5b                   	pop    ebx
c001b286:	5e                   	pop    esi
c001b287:	c3                   	ret    
c001b288:	59                   	pop    ecx
c001b289:	b8 01 00 00 00       	mov    eax,0x1
c001b28e:	31 d2                	xor    edx,edx
c001b290:	5b                   	pop    ebx
c001b291:	5e                   	pop    esi
c001b292:	c3                   	ret    
c001b293:	59                   	pop    ecx
c001b294:	31 c0                	xor    eax,eax
c001b296:	31 d2                	xor    edx,edx
c001b298:	5b                   	pop    ebx
c001b299:	5e                   	pop    esi
c001b29a:	c3                   	ret    

c001b29b <sysSetDiskVolumeLabel(regs*)>:
c001b29b:	56                   	push   esi
c001b29c:	53                   	push   ebx
c001b29d:	53                   	push   ebx
c001b29e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2a2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b2a5:	83 f8 19             	cmp    eax,0x19
c001b2a8:	77 29                	ja     c001b2d3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2aa:	8b 0c 85 20 e3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1ce0]
c001b2b1:	85 c9                	test   ecx,ecx
c001b2b3:	74 1e                	je     c001b2d3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2b5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b2b8:	85 d2                	test   edx,edx
c001b2ba:	74 17                	je     c001b2d3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2bc:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b2c2:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b2c4:	52                   	push   edx
c001b2c5:	50                   	push   eax
c001b2c6:	51                   	push   ecx
c001b2c7:	53                   	push   ebx
c001b2c8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b2cb:	83 c4 10             	add    esp,0x10
c001b2ce:	99                   	cdq    
c001b2cf:	59                   	pop    ecx
c001b2d0:	5b                   	pop    ebx
c001b2d1:	5e                   	pop    esi
c001b2d2:	c3                   	ret    
c001b2d3:	59                   	pop    ecx
c001b2d4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2de:	5b                   	pop    ebx
c001b2df:	5e                   	pop    esi
c001b2e0:	c3                   	ret    

c001b2e1 <sysGetDiskVolumeLabel(regs*)>:
c001b2e1:	57                   	push   edi
c001b2e2:	56                   	push   esi
c001b2e3:	53                   	push   ebx
c001b2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2e8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b2eb:	83 fa 19             	cmp    edx,0x19
c001b2ee:	77 34                	ja     c001b324 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b2f0:	8b 0c 95 20 e3 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1ce0]
c001b2f7:	85 c9                	test   ecx,ecx
c001b2f9:	74 29                	je     c001b324 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b2fb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b2fe:	85 db                	test   ebx,ebx
c001b300:	74 22                	je     c001b324 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b302:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b305:	85 c0                	test   eax,eax
c001b307:	74 1b                	je     c001b324 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b309:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b30f:	83 ec 0c             	sub    esp,0xc
c001b312:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b314:	50                   	push   eax
c001b315:	53                   	push   ebx
c001b316:	52                   	push   edx
c001b317:	51                   	push   ecx
c001b318:	56                   	push   esi
c001b319:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b31c:	83 c4 20             	add    esp,0x20
c001b31f:	99                   	cdq    
c001b320:	5b                   	pop    ebx
c001b321:	5e                   	pop    esi
c001b322:	5f                   	pop    edi
c001b323:	c3                   	ret    
c001b324:	5b                   	pop    ebx
c001b325:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b32a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b32f:	5e                   	pop    esi
c001b330:	5f                   	pop    edi
c001b331:	c3                   	ret    

c001b332 <sysShutdown(regs*)>:
c001b332:	83 ec 0c             	sub    esp,0xc
c001b335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b339:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b33c:	85 c0                	test   eax,eax
c001b33e:	74 18                	je     c001b358 <sysShutdown(regs*)+0x26>
c001b340:	83 f8 01             	cmp    eax,0x1
c001b343:	74 38                	je     c001b37d <sysShutdown(regs*)+0x4b>
c001b345:	83 f8 02             	cmp    eax,0x2
c001b348:	74 24                	je     c001b36e <sysShutdown(regs*)+0x3c>
c001b34a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b34f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b354:	83 c4 0c             	add    esp,0xc
c001b357:	c3                   	ret    
c001b358:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001b35d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b35f:	6a 00                	push   0x0
c001b361:	6a 00                	push   0x0
c001b363:	6a 00                	push   0x0
c001b365:	50                   	push   eax
c001b366:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b369:	83 c4 10             	add    esp,0x10
c001b36c:	eb dc                	jmp    c001b34a <sysShutdown(regs*)+0x18>
c001b36e:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001b373:	8b 10                	mov    edx,DWORD PTR [eax]
c001b375:	6a 00                	push   0x0
c001b377:	6a 00                	push   0x0
c001b379:	6a 01                	push   0x1
c001b37b:	eb e8                	jmp    c001b365 <sysShutdown(regs*)+0x33>
c001b37d:	a1 c0 03 03 c0       	mov    eax,ds:0xc00303c0
c001b382:	85 c0                	test   eax,eax
c001b384:	74 02                	je     c001b388 <sysShutdown(regs*)+0x56>
c001b386:	ff d0                	call   eax
c001b388:	31 c0                	xor    eax,eax
c001b38a:	31 d2                	xor    edx,edx
c001b38c:	83 c4 0c             	add    esp,0xc
c001b38f:	c3                   	ret    

c001b390 <sysCallRealpath(regs*)>:
c001b390:	83 ec 0c             	sub    esp,0xc
c001b393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b397:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b39a:	85 d2                	test   edx,edx
c001b39c:	74 07                	je     c001b3a5 <sysCallRealpath(regs*)+0x15>
c001b39e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b3a1:	85 c0                	test   eax,eax
c001b3a3:	75 0b                	jne    c001b3b0 <sysCallRealpath(regs*)+0x20>
c001b3a5:	b8 01 00 00 00       	mov    eax,0x1
c001b3aa:	31 d2                	xor    edx,edx
c001b3ac:	83 c4 0c             	add    esp,0xc
c001b3af:	c3                   	ret    
c001b3b0:	51                   	push   ecx
c001b3b1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b3b7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b3ba:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b3c0:	51                   	push   ecx
c001b3c1:	52                   	push   edx
c001b3c2:	50                   	push   eax
c001b3c3:	e8 f6 7a ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c001b3c8:	83 c4 10             	add    esp,0x10
c001b3cb:	31 c0                	xor    eax,eax
c001b3cd:	31 d2                	xor    edx,edx
c001b3cf:	83 c4 0c             	add    esp,0xc
c001b3d2:	c3                   	ret    

c001b3d3 <sysCallReadDir(regs*)>:
c001b3d3:	53                   	push   ebx
c001b3d4:	83 ec 18             	sub    esp,0x18
c001b3d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3db:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3de:	83 f8 02             	cmp    eax,0x2
c001b3e1:	76 53                	jbe    c001b436 <sysCallReadDir(regs*)+0x63>
c001b3e3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b3e6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b3ec:	77 4f                	ja     c001b43d <sysCallReadDir(regs*)+0x6a>
c001b3ee:	83 ec 0c             	sub    esp,0xc
c001b3f1:	50                   	push   eax
c001b3f2:	e8 d2 65 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b3f7:	83 c4 10             	add    esp,0x10
c001b3fa:	85 c0                	test   eax,eax
c001b3fc:	74 50                	je     c001b44e <sysCallReadDir(regs*)+0x7b>
c001b3fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b406:	83 ec 0c             	sub    esp,0xc
c001b409:	8b 10                	mov    edx,DWORD PTR [eax]
c001b40b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b40f:	51                   	push   ecx
c001b410:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b413:	6a 00                	push   0x0
c001b415:	68 10 01 00 00       	push   0x110
c001b41a:	50                   	push   eax
c001b41b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b41e:	83 c4 20             	add    esp,0x20
c001b421:	85 c0                	test   eax,eax
c001b423:	74 38                	je     c001b45d <sysCallReadDir(regs*)+0x8a>
c001b425:	83 f8 07             	cmp    eax,0x7
c001b428:	74 0c                	je     c001b436 <sysCallReadDir(regs*)+0x63>
c001b42a:	b8 02 00 00 00       	mov    eax,0x2
c001b42f:	31 d2                	xor    edx,edx
c001b431:	83 c4 18             	add    esp,0x18
c001b434:	5b                   	pop    ebx
c001b435:	c3                   	ret    
c001b436:	b8 01 00 00 00       	mov    eax,0x1
c001b43b:	eb f2                	jmp    c001b42f <sysCallReadDir(regs*)+0x5c>
c001b43d:	83 ec 08             	sub    esp,0x8
c001b440:	52                   	push   edx
c001b441:	68 a4 b7 02 c0       	push   0xc002b7a4
c001b446:	e8 c4 76 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b44b:	83 c4 10             	add    esp,0x10
c001b44e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b453:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b458:	83 c4 18             	add    esp,0x18
c001b45b:	5b                   	pop    ebx
c001b45c:	c3                   	ret    
c001b45d:	31 c0                	xor    eax,eax
c001b45f:	eb ce                	jmp    c001b42f <sysCallReadDir(regs*)+0x5c>

c001b461 <sysCallIsATTY(regs*)>:
c001b461:	83 ec 0c             	sub    esp,0xc
c001b464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b468:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b46b:	83 f8 02             	cmp    eax,0x2
c001b46e:	76 07                	jbe    c001b477 <sysCallIsATTY(regs*)+0x16>
c001b470:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b475:	75 26                	jne    c001b49d <sysCallIsATTY(regs*)+0x3c>
c001b477:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b47c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b47f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b485:	85 c0                	test   eax,eax
c001b487:	74 24                	je     c001b4ad <sysCallIsATTY(regs*)+0x4c>
c001b489:	83 ec 0c             	sub    esp,0xc
c001b48c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b48e:	50                   	push   eax
c001b48f:	ff 12                	call   DWORD PTR [edx]
c001b491:	31 d2                	xor    edx,edx
c001b493:	0f b6 c0             	movzx  eax,al
c001b496:	83 c4 10             	add    esp,0x10
c001b499:	83 c4 0c             	add    esp,0xc
c001b49c:	c3                   	ret    
c001b49d:	83 ec 0c             	sub    esp,0xc
c001b4a0:	50                   	push   eax
c001b4a1:	e8 23 65 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b4a6:	83 c4 10             	add    esp,0x10
c001b4a9:	85 c0                	test   eax,eax
c001b4ab:	75 dc                	jne    c001b489 <sysCallIsATTY(regs*)+0x28>
c001b4ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4b7:	83 c4 0c             	add    esp,0xc
c001b4ba:	c3                   	ret    

c001b4bb <sysCallSeek(regs*)>:
c001b4bb:	53                   	push   ebx
c001b4bc:	83 ec 08             	sub    esp,0x8
c001b4bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4c6:	83 f8 02             	cmp    eax,0x2
c001b4c9:	76 4a                	jbe    c001b515 <sysCallSeek(regs*)+0x5a>
c001b4cb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4d0:	77 32                	ja     c001b504 <sysCallSeek(regs*)+0x49>
c001b4d2:	83 ec 0c             	sub    esp,0xc
c001b4d5:	50                   	push   eax
c001b4d6:	e8 ee 64 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b4db:	83 c4 0c             	add    esp,0xc
c001b4de:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b4e1:	31 db                	xor    ebx,ebx
c001b4e3:	53                   	push   ebx
c001b4e4:	51                   	push   ecx
c001b4e5:	50                   	push   eax
c001b4e6:	e8 9f 7c ff ff       	call   c001318a <File::seek(unsigned long long)>
c001b4eb:	83 c4 10             	add    esp,0x10
c001b4ee:	85 c0                	test   eax,eax
c001b4f0:	0f 95 c0             	setne  al
c001b4f3:	31 d2                	xor    edx,edx
c001b4f5:	0f b6 c0             	movzx  eax,al
c001b4f8:	f7 d8                	neg    eax
c001b4fa:	83 d2 00             	adc    edx,0x0
c001b4fd:	83 c4 08             	add    esp,0x8
c001b500:	f7 da                	neg    edx
c001b502:	5b                   	pop    ebx
c001b503:	c3                   	ret    
c001b504:	83 ec 08             	sub    esp,0x8
c001b507:	50                   	push   eax
c001b508:	68 13 b8 02 c0       	push   0xc002b813
c001b50d:	e8 fd 75 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b512:	83 c4 10             	add    esp,0x10
c001b515:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b51a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b51f:	83 c4 08             	add    esp,0x8
c001b522:	5b                   	pop    ebx
c001b523:	c3                   	ret    

c001b524 <sysCallTell(regs*)>:
c001b524:	53                   	push   ebx
c001b525:	83 ec 08             	sub    esp,0x8
c001b528:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b52c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b52f:	83 f8 02             	cmp    eax,0x2
c001b532:	76 5e                	jbe    c001b592 <sysCallTell(regs*)+0x6e>
c001b534:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b539:	77 2d                	ja     c001b568 <sysCallTell(regs*)+0x44>
c001b53b:	83 ec 0c             	sub    esp,0xc
c001b53e:	50                   	push   eax
c001b53f:	e8 85 64 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b544:	5a                   	pop    edx
c001b545:	59                   	pop    ecx
c001b546:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b549:	50                   	push   eax
c001b54a:	e8 91 7c ff ff       	call   c00131e0 <File::tell(unsigned long long*)>
c001b54f:	83 c4 10             	add    esp,0x10
c001b552:	85 c0                	test   eax,eax
c001b554:	0f 95 c0             	setne  al
c001b557:	31 d2                	xor    edx,edx
c001b559:	0f b6 c0             	movzx  eax,al
c001b55c:	f7 d8                	neg    eax
c001b55e:	83 d2 00             	adc    edx,0x0
c001b561:	83 c4 08             	add    esp,0x8
c001b564:	f7 da                	neg    edx
c001b566:	5b                   	pop    ebx
c001b567:	c3                   	ret    
c001b568:	83 ec 08             	sub    esp,0x8
c001b56b:	50                   	push   eax
c001b56c:	68 2d b8 02 c0       	push   0xc002b82d
c001b571:	e8 99 75 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b576:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b579:	83 c4 10             	add    esp,0x10
c001b57c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b582:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b589:	31 d2                	xor    edx,edx
c001b58b:	31 c0                	xor    eax,eax
c001b58d:	83 c4 08             	add    esp,0x8
c001b590:	5b                   	pop    ebx
c001b591:	c3                   	ret    
c001b592:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b597:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b59c:	83 c4 08             	add    esp,0x8
c001b59f:	5b                   	pop    ebx
c001b5a0:	c3                   	ret    

c001b5a1 <sysCallSize(regs*)>:
c001b5a1:	53                   	push   ebx
c001b5a2:	83 ec 18             	sub    esp,0x18
c001b5a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5ac:	83 f8 02             	cmp    eax,0x2
c001b5af:	76 64                	jbe    c001b615 <sysCallSize(regs*)+0x74>
c001b5b1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b5b6:	77 33                	ja     c001b5eb <sysCallSize(regs*)+0x4a>
c001b5b8:	83 ec 0c             	sub    esp,0xc
c001b5bb:	50                   	push   eax
c001b5bc:	e8 08 64 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b5c1:	83 c4 0c             	add    esp,0xc
c001b5c4:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b5c8:	52                   	push   edx
c001b5c9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b5cc:	50                   	push   eax
c001b5cd:	e8 a6 7d ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001b5d2:	83 c4 10             	add    esp,0x10
c001b5d5:	85 c0                	test   eax,eax
c001b5d7:	0f 95 c0             	setne  al
c001b5da:	31 d2                	xor    edx,edx
c001b5dc:	0f b6 c0             	movzx  eax,al
c001b5df:	f7 d8                	neg    eax
c001b5e1:	83 d2 00             	adc    edx,0x0
c001b5e4:	83 c4 18             	add    esp,0x18
c001b5e7:	f7 da                	neg    edx
c001b5e9:	5b                   	pop    ebx
c001b5ea:	c3                   	ret    
c001b5eb:	83 ec 08             	sub    esp,0x8
c001b5ee:	50                   	push   eax
c001b5ef:	68 47 b8 02 c0       	push   0xc002b847
c001b5f4:	e8 16 75 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b5f9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b5fc:	83 c4 10             	add    esp,0x10
c001b5ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b605:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b60c:	31 d2                	xor    edx,edx
c001b60e:	31 c0                	xor    eax,eax
c001b610:	83 c4 18             	add    esp,0x18
c001b613:	5b                   	pop    ebx
c001b614:	c3                   	ret    
c001b615:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b61a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b61f:	83 c4 18             	add    esp,0x18
c001b622:	5b                   	pop    ebx
c001b623:	c3                   	ret    

c001b624 <sysCallSizeFromFilename(regs*)>:
c001b624:	57                   	push   edi
c001b625:	56                   	push   esi
c001b626:	53                   	push   ebx
c001b627:	83 ec 20             	sub    esp,0x20
c001b62a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b62e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b631:	83 fb 02             	cmp    ebx,0x2
c001b634:	0f 86 99 00 00 00    	jbe    c001b6d3 <sysCallSizeFromFilename(regs*)+0xaf>
c001b63a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b640:	77 65                	ja     c001b6a7 <sysCallSizeFromFilename(regs*)+0x83>
c001b642:	83 ec 0c             	sub    esp,0xc
c001b645:	68 14 01 00 00       	push   0x114
c001b64a:	e8 f1 41 ff ff       	call   c000f840 <malloc>
c001b64f:	83 c4 0c             	add    esp,0xc
c001b652:	89 c6                	mov    esi,eax
c001b654:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b659:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b65c:	53                   	push   ebx
c001b65d:	56                   	push   esi
c001b65e:	e8 05 7a ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001b663:	83 c4 0c             	add    esp,0xc
c001b666:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b66a:	50                   	push   eax
c001b66b:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b66e:	56                   	push   esi
c001b66f:	e8 04 7d ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001b674:	83 c4 10             	add    esp,0x10
c001b677:	85 f6                	test   esi,esi
c001b679:	74 14                	je     c001b68f <sysCallSizeFromFilename(regs*)+0x6b>
c001b67b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b67f:	8b 16                	mov    edx,DWORD PTR [esi]
c001b681:	83 ec 0c             	sub    esp,0xc
c001b684:	56                   	push   esi
c001b685:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b688:	83 c4 10             	add    esp,0x10
c001b68b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b68f:	85 c0                	test   eax,eax
c001b691:	0f 95 c0             	setne  al
c001b694:	31 d2                	xor    edx,edx
c001b696:	0f b6 c0             	movzx  eax,al
c001b699:	f7 d8                	neg    eax
c001b69b:	83 d2 00             	adc    edx,0x0
c001b69e:	83 c4 20             	add    esp,0x20
c001b6a1:	f7 da                	neg    edx
c001b6a3:	5b                   	pop    ebx
c001b6a4:	5e                   	pop    esi
c001b6a5:	5f                   	pop    edi
c001b6a6:	c3                   	ret    
c001b6a7:	83 ec 08             	sub    esp,0x8
c001b6aa:	53                   	push   ebx
c001b6ab:	68 47 b8 02 c0       	push   0xc002b847
c001b6b0:	e8 5a 74 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b6b5:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b6b8:	83 c4 10             	add    esp,0x10
c001b6bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b6c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b6c8:	31 d2                	xor    edx,edx
c001b6ca:	83 c4 20             	add    esp,0x20
c001b6cd:	31 c0                	xor    eax,eax
c001b6cf:	5b                   	pop    ebx
c001b6d0:	5e                   	pop    esi
c001b6d1:	5f                   	pop    edi
c001b6d2:	c3                   	ret    
c001b6d3:	83 c4 20             	add    esp,0x20
c001b6d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6db:	5b                   	pop    ebx
c001b6dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6e1:	5e                   	pop    esi
c001b6e2:	5f                   	pop    edi
c001b6e3:	c3                   	ret    

c001b6e4 <sysCallClose(regs*)>:
c001b6e4:	53                   	push   ebx
c001b6e5:	83 ec 08             	sub    esp,0x8
c001b6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6ef:	83 f8 02             	cmp    eax,0x2
c001b6f2:	76 50                	jbe    c001b744 <sysCallClose(regs*)+0x60>
c001b6f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b6f9:	74 58                	je     c001b753 <sysCallClose(regs*)+0x6f>
c001b6fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b700:	74 60                	je     c001b762 <sysCallClose(regs*)+0x7e>
c001b702:	77 2f                	ja     c001b733 <sysCallClose(regs*)+0x4f>
c001b704:	83 ec 0c             	sub    esp,0xc
c001b707:	50                   	push   eax
c001b708:	e8 bc 62 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b70d:	89 c3                	mov    ebx,eax
c001b70f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b712:	e8 13 7a ff ff       	call   c001312a <File::close()>
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	85 db                	test   ebx,ebx
c001b71c:	74 0c                	je     c001b72a <sysCallClose(regs*)+0x46>
c001b71e:	83 ec 0c             	sub    esp,0xc
c001b721:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b723:	53                   	push   ebx
c001b724:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b727:	83 c4 10             	add    esp,0x10
c001b72a:	31 c0                	xor    eax,eax
c001b72c:	31 d2                	xor    edx,edx
c001b72e:	83 c4 08             	add    esp,0x8
c001b731:	5b                   	pop    ebx
c001b732:	c3                   	ret    
c001b733:	83 ec 08             	sub    esp,0x8
c001b736:	50                   	push   eax
c001b737:	68 c8 b7 02 c0       	push   0xc002b7c8
c001b73c:	e8 ce 73 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b741:	83 c4 10             	add    esp,0x10
c001b744:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b749:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b74e:	83 c4 08             	add    esp,0x8
c001b751:	5b                   	pop    ebx
c001b752:	c3                   	ret    
c001b753:	83 ec 0c             	sub    esp,0xc
c001b756:	68 62 b8 02 c0       	push   0xc002b862
c001b75b:	e8 af 73 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b760:	eb c5                	jmp    c001b727 <sysCallClose(regs*)+0x43>
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	68 70 b8 02 c0       	push   0xc002b870
c001b76a:	eb ef                	jmp    c001b75b <sysCallClose(regs*)+0x77>

c001b76c <sysCallOpenDir(regs*)>:
c001b76c:	56                   	push   esi
c001b76d:	53                   	push   ebx
c001b76e:	53                   	push   ebx
c001b76f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b773:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b776:	85 f6                	test   esi,esi
c001b778:	74 59                	je     c001b7d3 <sysCallOpenDir(regs*)+0x67>
c001b77a:	83 ec 0c             	sub    esp,0xc
c001b77d:	68 14 01 00 00       	push   0x114
c001b782:	e8 b9 40 ff ff       	call   c000f840 <malloc>
c001b787:	83 c4 0c             	add    esp,0xc
c001b78a:	89 c6                	mov    esi,eax
c001b78c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b791:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b794:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b797:	56                   	push   esi
c001b798:	e8 77 7d ff ff       	call   c0013514 <Directory::Directory(char const*, Process*)>
c001b79d:	83 c4 10             	add    esp,0x10
c001b7a0:	85 f6                	test   esi,esi
c001b7a2:	74 2f                	je     c001b7d3 <sysCallOpenDir(regs*)+0x67>
c001b7a4:	83 ec 0c             	sub    esp,0xc
c001b7a7:	56                   	push   esi
c001b7a8:	e8 cb 7d ff ff       	call   c0013578 <Directory::open()>
c001b7ad:	83 c4 10             	add    esp,0x10
c001b7b0:	85 c0                	test   eax,eax
c001b7b2:	75 1f                	jne    c001b7d3 <sysCallOpenDir(regs*)+0x67>
c001b7b4:	83 ec 0c             	sub    esp,0xc
c001b7b7:	56                   	push   esi
c001b7b8:	e8 17 5f ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001b7bd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b7c0:	83 c4 10             	add    esp,0x10
c001b7c3:	89 02                	mov    DWORD PTR [edx],eax
c001b7c5:	c1 f8 1f             	sar    eax,0x1f
c001b7c8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b7cb:	31 c0                	xor    eax,eax
c001b7cd:	59                   	pop    ecx
c001b7ce:	31 d2                	xor    edx,edx
c001b7d0:	5b                   	pop    ebx
c001b7d1:	5e                   	pop    esi
c001b7d2:	c3                   	ret    
c001b7d3:	59                   	pop    ecx
c001b7d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7de:	5b                   	pop    ebx
c001b7df:	5e                   	pop    esi
c001b7e0:	c3                   	ret    

c001b7e1 <sysCallCloseDir(regs*)>:
c001b7e1:	53                   	push   ebx
c001b7e2:	83 ec 08             	sub    esp,0x8
c001b7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7ec:	83 f8 02             	cmp    eax,0x2
c001b7ef:	76 47                	jbe    c001b838 <sysCallCloseDir(regs*)+0x57>
c001b7f1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b7f6:	77 2f                	ja     c001b827 <sysCallCloseDir(regs*)+0x46>
c001b7f8:	83 ec 0c             	sub    esp,0xc
c001b7fb:	50                   	push   eax
c001b7fc:	e8 c8 61 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b801:	89 c3                	mov    ebx,eax
c001b803:	89 04 24             	mov    DWORD PTR [esp],eax
c001b806:	e8 c9 7d ff ff       	call   c00135d4 <Directory::close()>
c001b80b:	83 c4 10             	add    esp,0x10
c001b80e:	85 db                	test   ebx,ebx
c001b810:	74 0c                	je     c001b81e <sysCallCloseDir(regs*)+0x3d>
c001b812:	83 ec 0c             	sub    esp,0xc
c001b815:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b817:	53                   	push   ebx
c001b818:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b81b:	83 c4 10             	add    esp,0x10
c001b81e:	31 c0                	xor    eax,eax
c001b820:	31 d2                	xor    edx,edx
c001b822:	83 c4 08             	add    esp,0x8
c001b825:	5b                   	pop    ebx
c001b826:	c3                   	ret    
c001b827:	83 ec 08             	sub    esp,0x8
c001b82a:	50                   	push   eax
c001b82b:	68 f0 b7 02 c0       	push   0xc002b7f0
c001b830:	e8 da 72 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b835:	83 c4 10             	add    esp,0x10
c001b838:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b83d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b842:	83 c4 08             	add    esp,0x8
c001b845:	5b                   	pop    ebx
c001b846:	c3                   	ret    

c001b847 <sysCallMakeDir(regs*)>:
c001b847:	56                   	push   esi
c001b848:	53                   	push   ebx
c001b849:	83 ec 10             	sub    esp,0x10
c001b84c:	68 14 01 00 00       	push   0x114
c001b851:	e8 ea 3f ff ff       	call   c000f840 <malloc>
c001b856:	83 c4 0c             	add    esp,0xc
c001b859:	89 c3                	mov    ebx,eax
c001b85b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b860:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b867:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b86a:	53                   	push   ebx
c001b86b:	e8 a4 7c ff ff       	call   c0013514 <Directory::Directory(char const*, Process*)>
c001b870:	83 c4 10             	add    esp,0x10
c001b873:	85 db                	test   ebx,ebx
c001b875:	74 32                	je     c001b8a9 <sysCallMakeDir(regs*)+0x62>
c001b877:	83 ec 0c             	sub    esp,0xc
c001b87a:	53                   	push   ebx
c001b87b:	e8 d8 7e ff ff       	call   c0013758 <Directory::create()>
c001b880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b883:	89 c6                	mov    esi,eax
c001b885:	e8 4a 7d ff ff       	call   c00135d4 <Directory::close()>
c001b88a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b88c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b88f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b892:	83 c4 10             	add    esp,0x10
c001b895:	31 c0                	xor    eax,eax
c001b897:	59                   	pop    ecx
c001b898:	85 f6                	test   esi,esi
c001b89a:	5b                   	pop    ebx
c001b89b:	0f 95 c0             	setne  al
c001b89e:	5e                   	pop    esi
c001b89f:	31 d2                	xor    edx,edx
c001b8a1:	f7 d8                	neg    eax
c001b8a3:	83 d2 00             	adc    edx,0x0
c001b8a6:	f7 da                	neg    edx
c001b8a8:	c3                   	ret    
c001b8a9:	59                   	pop    ecx
c001b8aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8af:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8b4:	5b                   	pop    ebx
c001b8b5:	5e                   	pop    esi
c001b8b6:	c3                   	ret    

c001b8b7 <sysCallWait(regs*)>:
c001b8b7:	83 ec 10             	sub    esp,0x10
c001b8ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8be:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b8c1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b8c4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b8c7:	e8 19 24 00 00       	call   c001dce5 <waitTask(int, int*, int)>
c001b8cc:	83 c4 1c             	add    esp,0x1c
c001b8cf:	99                   	cdq    
c001b8d0:	c3                   	ret    

c001b8d1 <sysCallNotImpl(regs*)>:
c001b8d1:	83 ec 18             	sub    esp,0x18
c001b8d4:	68 7e b8 02 c0       	push   0xc002b87e
c001b8d9:	e8 c1 e8 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001b8de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8e8:	83 c4 1c             	add    esp,0x1c
c001b8eb:	c3                   	ret    

c001b8ec <sysPanic(regs*)>:
c001b8ec:	83 ec 18             	sub    esp,0x18
c001b8ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8f3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b8f6:	e8 a4 e8 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001b8fb:	c7 04 24 98 b8 02 c0 	mov    DWORD PTR [esp],0xc002b898
c001b902:	e8 98 e8 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001b907:	b8 01 00 00 00       	mov    eax,0x1
c001b90c:	31 d2                	xor    edx,edx
c001b90e:	83 c4 1c             	add    esp,0x1c
c001b911:	c3                   	ret    

c001b912 <sysCallRmdir(regs*)>:
c001b912:	56                   	push   esi
c001b913:	53                   	push   ebx
c001b914:	83 ec 20             	sub    esp,0x20
c001b917:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b91b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b91e:	68 14 01 00 00       	push   0x114
c001b923:	e8 18 3f ff ff       	call   c000f840 <malloc>
c001b928:	83 c4 0c             	add    esp,0xc
c001b92b:	89 c3                	mov    ebx,eax
c001b92d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b932:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b935:	56                   	push   esi
c001b936:	53                   	push   ebx
c001b937:	e8 2c 77 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001b93c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b93f:	e8 00 79 ff ff       	call   c0013244 <File::unlink()>
c001b944:	83 c4 10             	add    esp,0x10
c001b947:	85 db                	test   ebx,ebx
c001b949:	74 14                	je     c001b95f <sysCallRmdir(regs*)+0x4d>
c001b94b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b94f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b951:	83 ec 0c             	sub    esp,0xc
c001b954:	53                   	push   ebx
c001b955:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b958:	83 c4 10             	add    esp,0x10
c001b95b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b95f:	85 c0                	test   eax,eax
c001b961:	0f 95 c0             	setne  al
c001b964:	31 d2                	xor    edx,edx
c001b966:	0f b6 c0             	movzx  eax,al
c001b969:	f7 d8                	neg    eax
c001b96b:	83 d2 00             	adc    edx,0x0
c001b96e:	83 c4 14             	add    esp,0x14
c001b971:	f7 da                	neg    edx
c001b973:	5b                   	pop    ebx
c001b974:	5e                   	pop    esi
c001b975:	c3                   	ret    

c001b976 <sysCallUnlink(regs*)>:
c001b976:	56                   	push   esi
c001b977:	53                   	push   ebx
c001b978:	83 ec 20             	sub    esp,0x20
c001b97b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b97f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b982:	68 14 01 00 00       	push   0x114
c001b987:	e8 b4 3e ff ff       	call   c000f840 <malloc>
c001b98c:	83 c4 0c             	add    esp,0xc
c001b98f:	89 c3                	mov    ebx,eax
c001b991:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b996:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b999:	56                   	push   esi
c001b99a:	53                   	push   ebx
c001b99b:	e8 c8 76 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001b9a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9a3:	e8 9c 78 ff ff       	call   c0013244 <File::unlink()>
c001b9a8:	83 c4 10             	add    esp,0x10
c001b9ab:	85 db                	test   ebx,ebx
c001b9ad:	74 14                	je     c001b9c3 <sysCallUnlink(regs*)+0x4d>
c001b9af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9b5:	83 ec 0c             	sub    esp,0xc
c001b9b8:	53                   	push   ebx
c001b9b9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9c3:	85 c0                	test   eax,eax
c001b9c5:	0f 95 c0             	setne  al
c001b9c8:	31 d2                	xor    edx,edx
c001b9ca:	0f b6 c0             	movzx  eax,al
c001b9cd:	f7 d8                	neg    eax
c001b9cf:	83 d2 00             	adc    edx,0x0
c001b9d2:	83 c4 14             	add    esp,0x14
c001b9d5:	f7 da                	neg    edx
c001b9d7:	5b                   	pop    ebx
c001b9d8:	5e                   	pop    esi
c001b9d9:	c3                   	ret    

c001b9da <sysCallGetArgv(regs*)>:
c001b9da:	83 ec 0c             	sub    esp,0xc
c001b9dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9e1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b9e4:	85 c0                	test   eax,eax
c001b9e6:	78 2b                	js     c001ba13 <sysCallGetArgv(regs*)+0x39>
c001b9e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b9ee:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b9f1:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b9f7:	7d 1a                	jge    c001ba13 <sysCallGetArgv(regs*)+0x39>
c001b9f9:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001ba00:	85 c0                	test   eax,eax
c001ba02:	74 17                	je     c001ba1b <sysCallGetArgv(regs*)+0x41>
c001ba04:	83 ec 08             	sub    esp,0x8
c001ba07:	50                   	push   eax
c001ba08:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001ba0b:	e8 24 4e fe ff       	call   c0000834 <strcpy>
c001ba10:	83 c4 10             	add    esp,0x10
c001ba13:	31 c0                	xor    eax,eax
c001ba15:	31 d2                	xor    edx,edx
c001ba17:	83 c4 0c             	add    esp,0xc
c001ba1a:	c3                   	ret    
c001ba1b:	b8 01 00 00 00       	mov    eax,0x1
c001ba20:	31 d2                	xor    edx,edx
c001ba22:	83 c4 0c             	add    esp,0xc
c001ba25:	c3                   	ret    

c001ba26 <sysCallTTYName(regs*)>:
c001ba26:	56                   	push   esi
c001ba27:	53                   	push   ebx
c001ba28:	53                   	push   ebx
c001ba29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba2d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001ba30:	85 c0                	test   eax,eax
c001ba32:	74 5f                	je     c001ba93 <sysCallTTYName(regs*)+0x6d>
c001ba34:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba37:	83 f8 02             	cmp    eax,0x2
c001ba3a:	77 3e                	ja     c001ba7a <sysCallTTYName(regs*)+0x54>
c001ba3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba44:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001ba4a:	85 db                	test   ebx,ebx
c001ba4c:	74 45                	je     c001ba93 <sysCallTTYName(regs*)+0x6d>
c001ba4e:	83 ec 0c             	sub    esp,0xc
c001ba51:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba53:	53                   	push   ebx
c001ba54:	ff 10                	call   DWORD PTR [eax]
c001ba56:	83 c4 10             	add    esp,0x10
c001ba59:	84 c0                	test   al,al
c001ba5b:	74 41                	je     c001ba9e <sysCallTTYName(regs*)+0x78>
c001ba5d:	83 ec 08             	sub    esp,0x8
c001ba60:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001ba66:	53                   	push   ebx
c001ba67:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba6a:	e8 c5 4d fe ff       	call   c0000834 <strcpy>
c001ba6f:	83 c4 10             	add    esp,0x10
c001ba72:	31 c0                	xor    eax,eax
c001ba74:	59                   	pop    ecx
c001ba75:	31 d2                	xor    edx,edx
c001ba77:	5b                   	pop    ebx
c001ba78:	5e                   	pop    esi
c001ba79:	c3                   	ret    
c001ba7a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba7f:	74 bb                	je     c001ba3c <sysCallTTYName(regs*)+0x16>
c001ba81:	83 ec 0c             	sub    esp,0xc
c001ba84:	50                   	push   eax
c001ba85:	e8 3f 5f ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001ba8a:	83 c4 10             	add    esp,0x10
c001ba8d:	89 c3                	mov    ebx,eax
c001ba8f:	85 db                	test   ebx,ebx
c001ba91:	75 bb                	jne    c001ba4e <sysCallTTYName(regs*)+0x28>
c001ba93:	59                   	pop    ecx
c001ba94:	b8 01 00 00 00       	mov    eax,0x1
c001ba99:	31 d2                	xor    edx,edx
c001ba9b:	5b                   	pop    ebx
c001ba9c:	5e                   	pop    esi
c001ba9d:	c3                   	ret    
c001ba9e:	59                   	pop    ecx
c001ba9f:	b8 02 00 00 00       	mov    eax,0x2
c001baa4:	31 d2                	xor    edx,edx
c001baa6:	5b                   	pop    ebx
c001baa7:	5e                   	pop    esi
c001baa8:	c3                   	ret    

c001baa9 <sysCallUSleep(regs*)>:
c001baa9:	83 ec 14             	sub    esp,0x14
c001baac:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bab1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bab5:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001babc:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001babf:	01 ca                	add    edx,ecx
c001bac1:	52                   	push   edx
c001bac2:	50                   	push   eax
c001bac3:	e8 b6 22 00 00       	call   c001dd7e <nanoSleep(unsigned long long)>
c001bac8:	31 c0                	xor    eax,eax
c001baca:	31 d2                	xor    edx,edx
c001bacc:	83 c4 1c             	add    esp,0x1c
c001bacf:	c3                   	ret    

c001bad0 <sysCallSpawn(regs*)>:
c001bad0:	56                   	push   esi
c001bad1:	53                   	push   ebx
c001bad2:	53                   	push   ebx
c001bad3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bad7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bada:	85 f6                	test   esi,esi
c001badc:	75 08                	jne    c001bae6 <sysCallSpawn(regs*)+0x16>
c001bade:	59                   	pop    ecx
c001badf:	31 c0                	xor    eax,eax
c001bae1:	31 d2                	xor    edx,edx
c001bae3:	5b                   	pop    ebx
c001bae4:	5e                   	pop    esi
c001bae5:	c3                   	ret    
c001bae6:	83 ec 0c             	sub    esp,0xc
c001bae9:	68 3f 07 00 00       	push   0x73f
c001baee:	e8 4d 3d ff ff       	call   c000f840 <malloc>
c001baf3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001baf6:	89 c6                	mov    esi,eax
c001baf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bafd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb00:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb03:	56                   	push   esi
c001bb04:	e8 75 19 00 00       	call   c001d47e <Process::Process(char const*, Process*, char**)>
c001bb09:	83 c4 20             	add    esp,0x20
c001bb0c:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bb13:	75 c9                	jne    c001bade <sysCallSpawn(regs*)+0xe>
c001bb15:	83 ec 0c             	sub    esp,0xc
c001bb18:	56                   	push   esi
c001bb19:	e8 26 1f 00 00       	call   c001da44 <Process::createUserThread()>
c001bb1e:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb20:	83 c4 10             	add    esp,0x10
c001bb23:	99                   	cdq    
c001bb24:	59                   	pop    ecx
c001bb25:	5b                   	pop    ebx
c001bb26:	5e                   	pop    esi
c001bb27:	c3                   	ret    

c001bb28 <sysCallGetEnv(regs*)>:
c001bb28:	57                   	push   edi
c001bb29:	56                   	push   esi
c001bb2a:	53                   	push   ebx
c001bb2b:	83 ec 1c             	sub    esp,0x1c
c001bb2e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bb32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb37:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bb3a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bb3d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb40:	e8 76 e5 ff ff       	call   c001a0bb <Krnl::getProcessTotalEnvCount(Process*)>
c001bb45:	83 c4 10             	add    esp,0x10
c001bb48:	39 c7                	cmp    edi,eax
c001bb4a:	7c 14                	jl     c001bb60 <sysCallGetEnv(regs*)+0x38>
c001bb4c:	85 f6                	test   esi,esi
c001bb4e:	75 0b                	jne    c001bb5b <sysCallGetEnv(regs*)+0x33>
c001bb50:	83 c4 10             	add    esp,0x10
c001bb53:	31 c0                	xor    eax,eax
c001bb55:	5b                   	pop    ebx
c001bb56:	31 d2                	xor    edx,edx
c001bb58:	5e                   	pop    esi
c001bb59:	5f                   	pop    edi
c001bb5a:	c3                   	ret    
c001bb5b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bb5e:	eb f0                	jmp    c001bb50 <sysCallGetEnv(regs*)+0x28>
c001bb60:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb64:	52                   	push   edx
c001bb65:	57                   	push   edi
c001bb66:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bb6c:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bb6f:	50                   	push   eax
c001bb70:	e8 66 e5 ff ff       	call   c001a0db <Krnl::getProcessEnvPair(Process*, int)>
c001bb75:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bb78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb7c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bb80:	83 c4 0c             	add    esp,0xc
c001bb83:	85 c9                	test   ecx,ecx
c001bb85:	75 23                	jne    c001bbaa <sysCallGetEnv(regs*)+0x82>
c001bb87:	83 ec 0c             	sub    esp,0xc
c001bb8a:	50                   	push   eax
c001bb8b:	e8 04 4c fe ff       	call   c0000794 <strlen>
c001bb90:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb93:	89 c3                	mov    ebx,eax
c001bb95:	e8 fa 4b fe ff       	call   c0000794 <strlen>
c001bb9a:	83 c4 10             	add    esp,0x10
c001bb9d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bba1:	83 c4 10             	add    esp,0x10
c001bba4:	31 d2                	xor    edx,edx
c001bba6:	5b                   	pop    ebx
c001bba7:	5e                   	pop    esi
c001bba8:	5f                   	pop    edi
c001bba9:	c3                   	ret    
c001bbaa:	83 ec 08             	sub    esp,0x8
c001bbad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bbb0:	50                   	push   eax
c001bbb1:	56                   	push   esi
c001bbb2:	e8 7d 4c fe ff       	call   c0000834 <strcpy>
c001bbb7:	58                   	pop    eax
c001bbb8:	5a                   	pop    edx
c001bbb9:	68 a7 b8 02 c0       	push   0xc002b8a7
c001bbbe:	56                   	push   esi
c001bbbf:	e8 b0 4d fe ff       	call   c0000974 <strcat>
c001bbc4:	59                   	pop    ecx
c001bbc5:	5b                   	pop    ebx
c001bbc6:	57                   	push   edi
c001bbc7:	56                   	push   esi
c001bbc8:	e8 a7 4d fe ff       	call   c0000974 <strcat>
c001bbcd:	83 c4 10             	add    esp,0x10
c001bbd0:	e9 7b ff ff ff       	jmp    c001bb50 <sysCallGetEnv(regs*)+0x28>

c001bbd5 <sysAppSettings(regs*)>:
c001bbd5:	53                   	push   ebx
c001bbd6:	83 ec 08             	sub    esp,0x8
c001bbd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bbe0:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bbe6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bbeb:	66 3d c0 09          	cmp    ax,0x9c0
c001bbef:	75 2f                	jne    c001bc20 <sysAppSettings(regs*)+0x4b>
c001bbf1:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bbf7:	83 e0 1f             	and    eax,0x1f
c001bbfa:	3c 01                	cmp    al,0x1
c001bbfc:	74 2e                	je     c001bc2c <sysAppSettings(regs*)+0x57>
c001bbfe:	3c 07                	cmp    al,0x7
c001bc00:	0f 84 bd 00 00 00    	je     c001bcc3 <sysAppSettings(regs*)+0xee>
c001bc06:	84 c0                	test   al,al
c001bc08:	0f 84 dc 00 00 00    	je     c001bcea <sysAppSettings(regs*)+0x115>
c001bc0e:	3c 08                	cmp    al,0x8
c001bc10:	74 6d                	je     c001bc7f <sysAppSettings(regs*)+0xaa>
c001bc12:	0f b6 c0             	movzx  eax,al
c001bc15:	83 c4 08             	add    esp,0x8
c001bc18:	05 e8 03 00 00       	add    eax,0x3e8
c001bc1d:	5b                   	pop    ebx
c001bc1e:	99                   	cdq    
c001bc1f:	c3                   	ret    
c001bc20:	b8 01 00 00 00       	mov    eax,0x1
c001bc25:	31 d2                	xor    edx,edx
c001bc27:	83 c4 08             	add    esp,0x8
c001bc2a:	5b                   	pop    ebx
c001bc2b:	c3                   	ret    
c001bc2c:	51                   	push   ecx
c001bc2d:	68 00 01 00 00       	push   0x100
c001bc32:	6a 00                	push   0x0
c001bc34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc3c:	83 c0 0c             	add    eax,0xc
c001bc3f:	50                   	push   eax
c001bc40:	e8 33 4b fe ff       	call   c0000778 <memset>
c001bc45:	83 c4 0c             	add    esp,0xc
c001bc48:	68 ff 00 00 00       	push   0xff
c001bc4d:	53                   	push   ebx
c001bc4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc56:	83 c0 0c             	add    eax,0xc
c001bc59:	50                   	push   eax
c001bc5a:	e8 e5 4a fe ff       	call   c0000744 <memcpy>
c001bc5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc64:	5b                   	pop    ebx
c001bc65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc68:	5a                   	pop    edx
c001bc69:	8d 50 0c             	lea    edx,[eax+0xc]
c001bc6c:	52                   	push   edx
c001bc6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc73:	e8 cc 4e ff ff       	call   c0010b44 <VgaText::setTitle(char*)>
c001bc78:	83 c4 10             	add    esp,0x10
c001bc7b:	31 c0                	xor    eax,eax
c001bc7d:	eb a6                	jmp    c001bc25 <sysAppSettings(regs*)+0x50>
c001bc7f:	83 ec 08             	sub    esp,0x8
c001bc82:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001bc88:	83 e0 0f             	and    eax,0xf
c001bc8b:	50                   	push   eax
c001bc8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bc9a:	e8 95 4e ff ff       	call   c0010b34 <VgaText::setTitleColour(VgaColour)>
c001bc9f:	58                   	pop    eax
c001bca0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001bca6:	5a                   	pop    edx
c001bca7:	c1 e8 04             	shr    eax,0x4
c001bcaa:	83 e0 0f             	and    eax,0xf
c001bcad:	50                   	push   eax
c001bcae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bcbc:	e8 63 4e ff ff       	call   c0010b24 <VgaText::setTitleTextColour(VgaColour)>
c001bcc1:	eb b5                	jmp    c001bc78 <sysAppSettings(regs*)+0xa3>
c001bcc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcc8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bccb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bcd1:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001bcd7:	c0 e8 06             	shr    al,0x6
c001bcda:	83 e0 01             	and    eax,0x1
c001bcdd:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001bce3:	31 c0                	xor    eax,eax
c001bce5:	e9 3b ff ff ff       	jmp    c001bc25 <sysAppSettings(regs*)+0x50>
c001bcea:	b8 02 00 00 00       	mov    eax,0x2
c001bcef:	e9 31 ff ff ff       	jmp    c001bc25 <sysAppSettings(regs*)+0x50>

c001bcf4 <sysSetFatAttrib(regs*)>:
c001bcf4:	57                   	push   edi
c001bcf5:	56                   	push   esi
c001bcf6:	53                   	push   ebx
c001bcf7:	83 ec 1c             	sub    esp,0x1c
c001bcfa:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bcfe:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bd01:	68 14 01 00 00       	push   0x114
c001bd06:	e8 35 3b ff ff       	call   c000f840 <malloc>
c001bd0b:	83 c4 0c             	add    esp,0xc
c001bd0e:	89 c3                	mov    ebx,eax
c001bd10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd15:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd18:	57                   	push   edi
c001bd19:	53                   	push   ebx
c001bd1a:	e8 49 73 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001bd1f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bd22:	83 c4 0c             	add    esp,0xc
c001bd25:	0f b6 d4             	movzx  edx,ah
c001bd28:	0f b6 c0             	movzx  eax,al
c001bd2b:	52                   	push   edx
c001bd2c:	50                   	push   eax
c001bd2d:	53                   	push   ebx
c001bd2e:	e8 ab 75 ff ff       	call   c00132de <File::chfatattr(unsigned char, unsigned char)>
c001bd33:	83 c4 10             	add    esp,0x10
c001bd36:	85 db                	test   ebx,ebx
c001bd38:	74 14                	je     c001bd4e <sysSetFatAttrib(regs*)+0x5a>
c001bd3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd3e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd40:	83 ec 0c             	sub    esp,0xc
c001bd43:	53                   	push   ebx
c001bd44:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd47:	83 c4 10             	add    esp,0x10
c001bd4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd4e:	85 c0                	test   eax,eax
c001bd50:	0f 95 c0             	setne  al
c001bd53:	31 d2                	xor    edx,edx
c001bd55:	0f b6 c0             	movzx  eax,al
c001bd58:	f7 d8                	neg    eax
c001bd5a:	83 d2 00             	adc    edx,0x0
c001bd5d:	83 c4 10             	add    esp,0x10
c001bd60:	f7 da                	neg    edx
c001bd62:	5b                   	pop    ebx
c001bd63:	5e                   	pop    esi
c001bd64:	5f                   	pop    edi
c001bd65:	c3                   	ret    

c001bd66 <sysPipe(regs*)>:
c001bd66:	57                   	push   edi
c001bd67:	56                   	push   esi
c001bd68:	53                   	push   ebx
c001bd69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd6d:	83 ec 0c             	sub    esp,0xc
c001bd70:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bd73:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bd76:	6a 20                	push   0x20
c001bd78:	e8 c3 3a ff ff       	call   c000f840 <malloc>
c001bd7d:	89 c3                	mov    ebx,eax
c001bd7f:	58                   	pop    eax
c001bd80:	5a                   	pop    edx
c001bd81:	68 00 50 00 00       	push   0x5000
c001bd86:	53                   	push   ebx
c001bd87:	e8 e8 46 ff ff       	call   c0010474 <Pipe::Pipe(int)>
c001bd8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd8f:	e8 40 59 ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001bd94:	89 07                	mov    DWORD PTR [edi],eax
c001bd96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd99:	e8 36 59 ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001bd9e:	83 c4 10             	add    esp,0x10
c001bda1:	89 06                	mov    DWORD PTR [esi],eax
c001bda3:	31 d2                	xor    edx,edx
c001bda5:	5b                   	pop    ebx
c001bda6:	31 c0                	xor    eax,eax
c001bda8:	5e                   	pop    esi
c001bda9:	5f                   	pop    edi
c001bdaa:	c3                   	ret    

c001bdab <sysGetUnixTime(regs*)>:
c001bdab:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001bdb0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bdb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bdba:	e9 93 7c ff ff       	jmp    c0013a52 <Clock::timeInSecondsLocal()>

c001bdbf <string_ends_with(char const*, char const*)>:
c001bdbf:	57                   	push   edi
c001bdc0:	56                   	push   esi
c001bdc1:	53                   	push   ebx
c001bdc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bdc6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bdca:	83 ec 0c             	sub    esp,0xc
c001bdcd:	53                   	push   ebx
c001bdce:	e8 c1 49 fe ff       	call   c0000794 <strlen>
c001bdd3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bdd6:	89 c6                	mov    esi,eax
c001bdd8:	e8 b7 49 fe ff       	call   c0000794 <strlen>
c001bddd:	83 c4 10             	add    esp,0x10
c001bde0:	39 c6                	cmp    esi,eax
c001bde2:	7d 06                	jge    c001bdea <string_ends_with(char const*, char const*)+0x2b>
c001bde4:	5b                   	pop    ebx
c001bde5:	31 c0                	xor    eax,eax
c001bde7:	5e                   	pop    esi
c001bde8:	5f                   	pop    edi
c001bde9:	c3                   	ret    
c001bdea:	83 ec 08             	sub    esp,0x8
c001bded:	29 c6                	sub    esi,eax
c001bdef:	57                   	push   edi
c001bdf0:	01 f3                	add    ebx,esi
c001bdf2:	53                   	push   ebx
c001bdf3:	e8 c8 4a fe ff       	call   c00008c0 <strcmp>
c001bdf8:	83 c4 10             	add    esp,0x10
c001bdfb:	85 c0                	test   eax,eax
c001bdfd:	5b                   	pop    ebx
c001bdfe:	0f 94 c0             	sete   al
c001be01:	5e                   	pop    esi
c001be02:	0f b6 c0             	movzx  eax,al
c001be05:	5f                   	pop    edi
c001be06:	c3                   	ret    

c001be07 <sysCallOpen(regs*)>:
c001be07:	56                   	push   esi
c001be08:	53                   	push   ebx
c001be09:	81 ec 04 01 00 00    	sub    esp,0x104
c001be0f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001be16:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001be19:	85 c9                	test   ecx,ecx
c001be1b:	0f 84 b3 00 00 00    	je     c001bed4 <sysCallOpen(regs*)+0xcd>
c001be21:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001be24:	85 c0                	test   eax,eax
c001be26:	0f 84 a8 00 00 00    	je     c001bed4 <sysCallOpen(regs*)+0xcd>
c001be2c:	52                   	push   edx
c001be2d:	68 a9 b8 02 c0       	push   0xc002b8a9
c001be32:	50                   	push   eax
c001be33:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001be37:	56                   	push   esi
c001be38:	e8 81 70 ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c001be3d:	89 34 24             	mov    DWORD PTR [esp],esi
c001be40:	e8 4f 49 fe ff       	call   c0000794 <strlen>
c001be45:	83 c4 10             	add    esp,0x10
c001be48:	48                   	dec    eax
c001be49:	74 1d                	je     c001be68 <sysCallOpen(regs*)+0x61>
c001be4b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001be4e:	eb 0f                	jmp    c001be5f <sysCallOpen(regs*)+0x58>
c001be50:	80 fa 3a             	cmp    dl,0x3a
c001be53:	74 0f                	je     c001be64 <sysCallOpen(regs*)+0x5d>
c001be55:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001be59:	48                   	dec    eax
c001be5a:	74 0c                	je     c001be68 <sysCallOpen(regs*)+0x61>
c001be5c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001be5f:	80 fa 2e             	cmp    dl,0x2e
c001be62:	75 ec                	jne    c001be50 <sysCallOpen(regs*)+0x49>
c001be64:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001be68:	83 ec 08             	sub    esp,0x8
c001be6b:	68 ad b8 02 c0       	push   0xc002b8ad
c001be70:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be73:	e8 47 ff ff ff       	call   c001bdbf <string_ends_with(char const*, char const*)>
c001be78:	83 c4 10             	add    esp,0x10
c001be7b:	85 c0                	test   eax,eax
c001be7d:	75 17                	jne    c001be96 <sysCallOpen(regs*)+0x8f>
c001be7f:	83 ec 08             	sub    esp,0x8
c001be82:	68 ce b8 02 c0       	push   0xc002b8ce
c001be87:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be8a:	e8 30 ff ff ff       	call   c001bdbf <string_ends_with(char const*, char const*)>
c001be8f:	83 c4 10             	add    esp,0x10
c001be92:	85 c0                	test   eax,eax
c001be94:	74 51                	je     c001bee7 <sysCallOpen(regs*)+0xe0>
c001be96:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be99:	83 ec 08             	sub    esp,0x8
c001be9c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bea2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bea9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001beac:	ff 30                	push   DWORD PTR [eax]
c001beae:	68 b2 b8 02 c0       	push   0xc002b8b2
c001beb3:	e8 57 6c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001beb8:	c7 04 24 c1 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8c1
c001bebf:	e8 4b 6c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001bec4:	83 c4 10             	add    esp,0x10
c001bec7:	81 c4 04 01 00 00    	add    esp,0x104
c001becd:	31 c0                	xor    eax,eax
c001becf:	31 d2                	xor    edx,edx
c001bed1:	5b                   	pop    ebx
c001bed2:	5e                   	pop    esi
c001bed3:	c3                   	ret    
c001bed4:	81 c4 04 01 00 00    	add    esp,0x104
c001beda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bedf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bee4:	5b                   	pop    ebx
c001bee5:	5e                   	pop    esi
c001bee6:	c3                   	ret    
c001bee7:	83 ec 08             	sub    esp,0x8
c001beea:	68 ae b8 02 c0       	push   0xc002b8ae
c001beef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bef2:	e8 c9 49 fe ff       	call   c00008c0 <strcmp>
c001bef7:	83 c4 10             	add    esp,0x10
c001befa:	85 c0                	test   eax,eax
c001befc:	74 98                	je     c001be96 <sysCallOpen(regs*)+0x8f>
c001befe:	83 ec 08             	sub    esp,0x8
c001bf01:	68 ad b8 02 c0       	push   0xc002b8ad
c001bf06:	56                   	push   esi
c001bf07:	e8 b3 fe ff ff       	call   c001bdbf <string_ends_with(char const*, char const*)>
c001bf0c:	83 c4 10             	add    esp,0x10
c001bf0f:	85 c0                	test   eax,eax
c001bf11:	75 83                	jne    c001be96 <sysCallOpen(regs*)+0x8f>
c001bf13:	83 ec 08             	sub    esp,0x8
c001bf16:	68 d3 b8 02 c0       	push   0xc002b8d3
c001bf1b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf1e:	e8 9c fe ff ff       	call   c001bdbf <string_ends_with(char const*, char const*)>
c001bf23:	83 c4 10             	add    esp,0x10
c001bf26:	85 c0                	test   eax,eax
c001bf28:	0f 85 d9 00 00 00    	jne    c001c007 <sysCallOpen(regs*)+0x200>
c001bf2e:	83 ec 08             	sub    esp,0x8
c001bf31:	68 d8 b8 02 c0       	push   0xc002b8d8
c001bf36:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf39:	e8 81 fe ff ff       	call   c001bdbf <string_ends_with(char const*, char const*)>
c001bf3e:	83 c4 10             	add    esp,0x10
c001bf41:	85 c0                	test   eax,eax
c001bf43:	0f 85 be 00 00 00    	jne    c001c007 <sysCallOpen(regs*)+0x200>
c001bf49:	83 ec 08             	sub    esp,0x8
c001bf4c:	68 d4 b8 02 c0       	push   0xc002b8d4
c001bf51:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf54:	e8 67 49 fe ff       	call   c00008c0 <strcmp>
c001bf59:	83 c4 10             	add    esp,0x10
c001bf5c:	85 c0                	test   eax,eax
c001bf5e:	0f 84 a3 00 00 00    	je     c001c007 <sysCallOpen(regs*)+0x200>
c001bf64:	83 ec 08             	sub    esp,0x8
c001bf67:	68 d3 b8 02 c0       	push   0xc002b8d3
c001bf6c:	56                   	push   esi
c001bf6d:	e8 4d fe ff ff       	call   c001bdbf <string_ends_with(char const*, char const*)>
c001bf72:	83 c4 10             	add    esp,0x10
c001bf75:	85 c0                	test   eax,eax
c001bf77:	0f 85 8a 00 00 00    	jne    c001c007 <sysCallOpen(regs*)+0x200>
c001bf7d:	83 ec 0c             	sub    esp,0xc
c001bf80:	68 14 01 00 00       	push   0x114
c001bf85:	e8 b6 38 ff ff       	call   c000f840 <malloc>
c001bf8a:	83 c4 0c             	add    esp,0xc
c001bf8d:	89 c6                	mov    esi,eax
c001bf8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf94:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf97:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf9a:	56                   	push   esi
c001bf9b:	e8 c8 70 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001bfa0:	83 c4 10             	add    esp,0x10
c001bfa3:	85 f6                	test   esi,esi
c001bfa5:	0f 84 29 ff ff ff    	je     c001bed4 <sysCallOpen(regs*)+0xcd>
c001bfab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bfae:	0f b6 c2             	movzx  eax,dl
c001bfb1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bfb4:	89 d0                	mov    eax,edx
c001bfb6:	83 e0 01             	and    eax,0x1
c001bfb9:	f6 c2 02             	test   dl,0x2
c001bfbc:	74 03                	je     c001bfc1 <sysCallOpen(regs*)+0x1ba>
c001bfbe:	83 c8 02             	or     eax,0x2
c001bfc1:	f6 c2 04             	test   dl,0x4
c001bfc4:	74 03                	je     c001bfc9 <sysCallOpen(regs*)+0x1c2>
c001bfc6:	83 c8 04             	or     eax,0x4
c001bfc9:	f6 c2 08             	test   dl,0x8
c001bfcc:	74 03                	je     c001bfd1 <sysCallOpen(regs*)+0x1ca>
c001bfce:	83 c8 0a             	or     eax,0xa
c001bfd1:	83 e2 10             	and    edx,0x10
c001bfd4:	74 03                	je     c001bfd9 <sysCallOpen(regs*)+0x1d2>
c001bfd6:	83 c8 12             	or     eax,0x12
c001bfd9:	83 ec 08             	sub    esp,0x8
c001bfdc:	50                   	push   eax
c001bfdd:	56                   	push   esi
c001bfde:	e8 e9 70 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001bfe3:	83 c4 10             	add    esp,0x10
c001bfe6:	85 c0                	test   eax,eax
c001bfe8:	0f 85 e6 fe ff ff    	jne    c001bed4 <sysCallOpen(regs*)+0xcd>
c001bfee:	83 ec 0c             	sub    esp,0xc
c001bff1:	56                   	push   esi
c001bff2:	e8 dd 56 ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001bff7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bffa:	89 02                	mov    DWORD PTR [edx],eax
c001bffc:	c1 f8 1f             	sar    eax,0x1f
c001bfff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c002:	e9 bd fe ff ff       	jmp    c001bec4 <sysCallOpen(regs*)+0xbd>
c001c007:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c00a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c010:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c017:	e9 ab fe ff ff       	jmp    c001bec7 <sysCallOpen(regs*)+0xc0>

c001c01c <Sys::loadSyscalls()>:
c001c01c:	c7 05 80 08 03 c0 d2 b1 01 c0 	mov    DWORD PTR ds:0xc0030880,0xc001b1d2
c001c026:	c7 05 84 08 03 c0 34 ae 01 c0 	mov    DWORD PTR ds:0xc0030884,0xc001ae34
c001c030:	c7 05 88 08 03 c0 87 af 01 c0 	mov    DWORD PTR ds:0xc0030888,0xc001af87
c001c03a:	c7 05 8c 08 03 c0 6a b1 01 c0 	mov    DWORD PTR ds:0xc003088c,0xc001b16a
c001c044:	c7 05 90 08 03 c0 1f af 01 c0 	mov    DWORD PTR ds:0xc0030890,0xc001af1f
c001c04e:	c7 05 94 08 03 c0 6b ae 01 c0 	mov    DWORD PTR ds:0xc0030894,0xc001ae6b
c001c058:	c7 05 98 08 03 c0 4c ae 01 c0 	mov    DWORD PTR ds:0xc0030898,0xc001ae4c
c001c062:	c7 05 9c 08 03 c0 dc af 01 c0 	mov    DWORD PTR ds:0xc003089c,0xc001afdc
c001c06c:	c7 05 a4 08 03 c0 e4 b6 01 c0 	mov    DWORD PTR ds:0xc00308a4,0xc001b6e4
c001c076:	c7 05 a0 08 03 c0 07 be 01 c0 	mov    DWORD PTR ds:0xc00308a0,0xc001be07
c001c080:	c7 05 a8 08 03 c0 6c b7 01 c0 	mov    DWORD PTR ds:0xc00308a8,0xc001b76c
c001c08a:	c7 05 ac 08 03 c0 d3 b3 01 c0 	mov    DWORD PTR ds:0xc00308ac,0xc001b3d3
c001c094:	c7 05 b0 08 03 c0 0d b2 01 c0 	mov    DWORD PTR ds:0xc00308b0,0xc001b20d
c001c09e:	c7 05 b4 08 03 c0 12 b2 01 c0 	mov    DWORD PTR ds:0xc00308b4,0xc001b212
c001c0a8:	c7 05 b8 08 03 c0 47 b8 01 c0 	mov    DWORD PTR ds:0xc00308b8,0xc001b847
c001c0b2:	c7 05 bc 08 03 c0 e1 b7 01 c0 	mov    DWORD PTR ds:0xc00308bc,0xc001b7e1
c001c0bc:	c7 05 c0 08 03 c0 bb b4 01 c0 	mov    DWORD PTR ds:0xc00308c0,0xc001b4bb
c001c0c6:	c7 05 c4 08 03 c0 24 b5 01 c0 	mov    DWORD PTR ds:0xc00308c4,0xc001b524
c001c0d0:	c7 05 c8 08 03 c0 a1 b5 01 c0 	mov    DWORD PTR ds:0xc00308c8,0xc001b5a1
c001c0da:	c7 05 cc 08 03 c0 17 b2 01 c0 	mov    DWORD PTR ds:0xc00308cc,0xc001b217
c001c0e4:	c7 05 d0 08 03 c0 b7 b8 01 c0 	mov    DWORD PTR ds:0xc00308d0,0xc001b8b7
c001c0ee:	c7 05 d4 08 03 c0 d1 b8 01 c0 	mov    DWORD PTR ds:0xc00308d4,0xc001b8d1
c001c0f8:	c7 05 d8 08 03 c0 d1 b8 01 c0 	mov    DWORD PTR ds:0xc00308d8,0xc001b8d1
c001c102:	c7 05 dc 08 03 c0 12 b9 01 c0 	mov    DWORD PTR ds:0xc00308dc,0xc001b912
c001c10c:	c7 05 e0 08 03 c0 76 b9 01 c0 	mov    DWORD PTR ds:0xc00308e0,0xc001b976
c001c116:	c7 05 e4 08 03 c0 21 b2 01 c0 	mov    DWORD PTR ds:0xc00308e4,0xc001b221
c001c120:	c7 05 e8 08 03 c0 da b9 01 c0 	mov    DWORD PTR ds:0xc00308e8,0xc001b9da
c001c12a:	c7 05 ec 08 03 c0 90 b3 01 c0 	mov    DWORD PTR ds:0xc00308ec,0xc001b390
c001c134:	c7 05 f0 08 03 c0 26 ba 01 c0 	mov    DWORD PTR ds:0xc00308f0,0xc001ba26
c001c13e:	c7 05 f4 08 03 c0 61 b4 01 c0 	mov    DWORD PTR ds:0xc00308f4,0xc001b461
c001c148:	c7 05 f8 08 03 c0 a9 ba 01 c0 	mov    DWORD PTR ds:0xc00308f8,0xc001baa9
c001c152:	c7 05 fc 08 03 c0 24 b6 01 c0 	mov    DWORD PTR ds:0xc00308fc,0xc001b624
c001c15c:	c7 05 00 09 03 c0 d0 ba 01 c0 	mov    DWORD PTR ds:0xc0030900,0xc001bad0
c001c166:	c7 05 04 09 03 c0 28 bb 01 c0 	mov    DWORD PTR ds:0xc0030904,0xc001bb28
c001c170:	c7 05 08 09 03 c0 d5 bb 01 c0 	mov    DWORD PTR ds:0xc0030908,0xc001bbd5
c001c17a:	c7 05 0c 09 03 c0 31 b2 01 c0 	mov    DWORD PTR ds:0xc003090c,0xc001b231
c001c184:	c7 05 10 09 03 c0 9b b2 01 c0 	mov    DWORD PTR ds:0xc0030910,0xc001b29b
c001c18e:	c7 05 14 09 03 c0 e1 b2 01 c0 	mov    DWORD PTR ds:0xc0030914,0xc001b2e1
c001c198:	c7 05 18 09 03 c0 f4 bc 01 c0 	mov    DWORD PTR ds:0xc0030918,0xc001bcf4
c001c1a2:	c7 05 1c 09 03 c0 ec b8 01 c0 	mov    DWORD PTR ds:0xc003091c,0xc001b8ec
c001c1ac:	c7 05 20 09 03 c0 32 b3 01 c0 	mov    DWORD PTR ds:0xc0030920,0xc001b332
c001c1b6:	c7 05 24 09 03 c0 66 bd 01 c0 	mov    DWORD PTR ds:0xc0030924,0xc001bd66
c001c1c0:	c7 05 28 09 03 c0 ab bd 01 c0 	mov    DWORD PTR ds:0xc0030928,0xc001bdab
c001c1ca:	c7 05 2c 09 03 c0 77 ae 01 c0 	mov    DWORD PTR ds:0xc003092c,0xc001ae77
c001c1d4:	c7 05 30 09 03 c0 f8 af 01 c0 	mov    DWORD PTR ds:0xc0030930,0xc001aff8
c001c1de:	c7 05 34 09 03 c0 20 b1 01 c0 	mov    DWORD PTR ds:0xc0030934,0xc001b120
c001c1e8:	c7 05 38 09 03 c0 fe ad 01 c0 	mov    DWORD PTR ds:0xc0030938,0xc001adfe
c001c1f2:	c3                   	ret    

c001c1f3 <Sys::systemCall(regs*, void*)>:
c001c1f3:	53                   	push   ebx
c001c1f4:	83 ec 08             	sub    esp,0x8
c001c1f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c1fe:	83 f8 7f             	cmp    eax,0x7f
c001c201:	77 16                	ja     c001c219 <Sys::systemCall(regs*, void*)+0x26>
c001c203:	8b 14 85 80 08 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf780]
c001c20a:	85 d2                	test   edx,edx
c001c20c:	74 0b                	je     c001c219 <Sys::systemCall(regs*, void*)+0x26>
c001c20e:	83 ec 0c             	sub    esp,0xc
c001c211:	53                   	push   ebx
c001c212:	ff d2                	call   edx
c001c214:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c217:	eb 0d                	jmp    c001c226 <Sys::systemCall(regs*, void*)+0x33>
c001c219:	52                   	push   edx
c001c21a:	52                   	push   edx
c001c21b:	50                   	push   eax
c001c21c:	68 dd b8 02 c0       	push   0xc002b8dd
c001c221:	e8 e9 68 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001c226:	83 c4 10             	add    esp,0x10
c001c229:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c22e:	31 d2                	xor    edx,edx
c001c230:	83 c4 08             	add    esp,0x8
c001c233:	5b                   	pop    ebx
c001c234:	c3                   	ret    

c001c235 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c235:	55                   	push   ebp
c001c236:	89 e5                	mov    ebp,esp
c001c238:	57                   	push   edi
c001c239:	56                   	push   esi
c001c23a:	53                   	push   ebx
c001c23b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c241:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001c244:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001c247:	85 c0                	test   eax,eax
c001c249:	0f 95 c1             	setne  cl
c001c24c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c250:	0f 94 c2             	sete   dl
c001c253:	84 d1                	test   cl,dl
c001c255:	74 26                	je     c001c27d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c257:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001c25e:	74 1d                	je     c001c27d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c260:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001c263:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001c269:	89 d6                	mov    esi,edx
c001c26b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001c271:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001c277:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c27a:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001c27d:	83 ec 0c             	sub    esp,0xc
c001c280:	05 ff 0f 00 00       	add    eax,0xfff
c001c285:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c288:	6a 01                	push   0x1
c001c28a:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001c290:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001c296:	e8 84 58 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c001c29b:	83 c4 10             	add    esp,0x10
c001c29e:	89 c6                	mov    esi,eax
c001c2a0:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001c2a6:	0f 86 21 01 00 00    	jbe    c001c3cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001c2ac:	c1 eb 0c             	shr    ebx,0xc
c001c2af:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001c2b9:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001c2bf:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c2c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c2c5:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001c2cb:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001c2ce:	29 d8                	sub    eax,ebx
c001c2d0:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001c2d6:	0f 83 f4 00 00 00    	jae    c001c3d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001c2dc:	83 ec 0c             	sub    esp,0xc
c001c2df:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001c2e5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001c2e8:	3d 00 10 00 00       	cmp    eax,0x1000
c001c2ed:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001c2ef:	52                   	push   edx
c001c2f0:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001c2f6:	52                   	push   edx
c001c2f7:	76 05                	jbe    c001c2fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001c2f9:	b8 00 10 00 00       	mov    eax,0x1000
c001c2fe:	31 d2                	xor    edx,edx
c001c300:	52                   	push   edx
c001c301:	50                   	push   eax
c001c302:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001c305:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c308:	83 c4 20             	add    esp,0x20
c001c30b:	85 c0                	test   eax,eax
c001c30d:	74 1f                	je     c001c32e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001c30f:	51                   	push   ecx
c001c310:	51                   	push   ecx
c001c311:	50                   	push   eax
c001c312:	68 f1 b8 02 c0       	push   0xc002b8f1
c001c317:	e8 f3 67 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001c31c:	89 34 24             	mov    DWORD PTR [esp],esi
c001c31f:	e8 5f 5b ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c001c324:	83 c4 10             	add    esp,0x10
c001c327:	31 c0                	xor    eax,eax
c001c329:	e9 7c 01 00 00       	jmp    c001c4aa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001c32e:	e8 fb 14 00 00       	call   c001d82e <lockScheduler()>
c001c333:	e8 a5 3b ff ff       	call   c000fedd <Phys::allocatePage()>
c001c338:	6a 07                	push   0x7
c001c33a:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001c340:	56                   	push   esi
c001c341:	50                   	push   eax
c001c342:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c348:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c34b:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c351:	e8 94 5e ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c001c356:	83 c4 0c             	add    esp,0xc
c001c359:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c35f:	6a 00                	push   0x0
c001c361:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c367:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c36a:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c370:	e8 df 5c ff ff       	call   c0012054 <VAS::mapOtherVASIn(bool, VAS*)>
c001c375:	58                   	pop    eax
c001c376:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c37c:	5a                   	pop    edx
c001c37d:	68 07 04 00 00       	push   0x407
c001c382:	53                   	push   ebx
c001c383:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c389:	50                   	push   eax
c001c38a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c390:	6a 00                	push   0x0
c001c392:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c397:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c39a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3a0:	e8 ff 61 ff ff       	call   c00125a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c3a5:	83 c4 1c             	add    esp,0x1c
c001c3a8:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001c3ae:	68 00 10 00 00       	push   0x1000
c001c3b3:	50                   	push   eax
c001c3b4:	56                   	push   esi
c001c3b5:	e8 8a 43 fe ff       	call   c0000744 <memcpy>
c001c3ba:	e8 71 14 00 00       	call   c001d830 <unlockScheduler()>
c001c3bf:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001c3c5:	83 c4 10             	add    esp,0x10
c001c3c8:	e9 f5 fe ff ff       	jmp    c001c2c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001c3cd:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c3d0:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001c3da:	0f 86 bc 00 00 00    	jbe    c001c49c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001c3e0:	e8 49 14 00 00       	call   c001d82e <lockScheduler()>
c001c3e5:	51                   	push   ecx
c001c3e6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c3ec:	6a 00                	push   0x0
c001c3ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3fc:	e8 53 5c ff ff       	call   c0012054 <VAS::mapOtherVASIn(bool, VAS*)>
c001c401:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001c407:	83 c4 10             	add    esp,0x10
c001c40a:	c1 e8 0c             	shr    eax,0xc
c001c40d:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001c417:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001c41d:	e8 bb 3a ff ff       	call   c000fedd <Phys::allocatePage()>
c001c422:	6a 07                	push   0x7
c001c424:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001c42a:	56                   	push   esi
c001c42b:	50                   	push   eax
c001c42c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c432:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c435:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001c43b:	e8 aa 5d ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c001c440:	58                   	pop    eax
c001c441:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001c447:	5a                   	pop    edx
c001c448:	68 07 04 00 00       	push   0x407
c001c44d:	53                   	push   ebx
c001c44e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c454:	50                   	push   eax
c001c455:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c45b:	6a 00                	push   0x0
c001c45d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c462:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c465:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c46b:	e8 34 61 ff ff       	call   c00125a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c470:	83 c4 1c             	add    esp,0x1c
c001c473:	68 00 10 00 00       	push   0x1000
c001c478:	6a 00                	push   0x0
c001c47a:	56                   	push   esi
c001c47b:	e8 f8 42 fe ff       	call   c0000778 <memset>
c001c480:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001c486:	83 c4 10             	add    esp,0x10
c001c489:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001c48f:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001c495:	77 86                	ja     c001c41d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001c497:	e8 94 13 00 00       	call   c001d830 <unlockScheduler()>
c001c49c:	83 ec 0c             	sub    esp,0xc
c001c49f:	56                   	push   esi
c001c4a0:	e8 de 59 ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c001c4a5:	83 c4 10             	add    esp,0x10
c001c4a8:	b0 01                	mov    al,0x1
c001c4aa:	8d 65 f4             	lea    esp,[ebp-0xc]
c001c4ad:	5b                   	pop    ebx
c001c4ae:	5e                   	pop    esi
c001c4af:	5f                   	pop    edi
c001c4b0:	5d                   	pop    ebp
c001c4b1:	c3                   	ret    

c001c4b2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c4b2:	55                   	push   ebp
c001c4b3:	57                   	push   edi
c001c4b4:	56                   	push   esi
c001c4b5:	53                   	push   ebx
c001c4b6:	83 ec 48             	sub    esp,0x48
c001c4b9:	68 14 01 00 00       	push   0x114
c001c4be:	e8 7d 33 ff ff       	call   c000f840 <malloc>
c001c4c3:	83 c4 0c             	add    esp,0xc
c001c4c6:	89 c6                	mov    esi,eax
c001c4c8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c4cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c4d0:	50                   	push   eax
c001c4d1:	e8 92 6b ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001c4d6:	58                   	pop    eax
c001c4d7:	5a                   	pop    edx
c001c4d8:	6a 01                	push   0x1
c001c4da:	56                   	push   esi
c001c4db:	e8 ec 6b ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001c4e0:	83 c4 10             	add    esp,0x10
c001c4e3:	85 c0                	test   eax,eax
c001c4e5:	0f 85 47 01 00 00    	jne    c001c632 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4eb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c4f3:	83 ec 0c             	sub    esp,0xc
c001c4f6:	6a 34                	push   0x34
c001c4f8:	e8 43 33 ff ff       	call   c000f840 <malloc>
c001c4fd:	89 c3                	mov    ebx,eax
c001c4ff:	58                   	pop    eax
c001c500:	8b 06                	mov    eax,DWORD PTR [esi]
c001c502:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c506:	57                   	push   edi
c001c507:	53                   	push   ebx
c001c508:	6a 00                	push   0x0
c001c50a:	6a 34                	push   0x34
c001c50c:	56                   	push   esi
c001c50d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c510:	83 c4 20             	add    esp,0x20
c001c513:	85 c0                	test   eax,eax
c001c515:	0f 85 17 01 00 00    	jne    c001c632 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c51b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c521:	0f 85 0b 01 00 00    	jne    c001c632 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c527:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c52a:	85 c0                	test   eax,eax
c001c52c:	0f 84 00 01 00 00    	je     c001c632 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c532:	31 d2                	xor    edx,edx
c001c534:	55                   	push   ebp
c001c535:	52                   	push   edx
c001c536:	50                   	push   eax
c001c537:	56                   	push   esi
c001c538:	e8 4d 6c ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c53d:	83 c4 10             	add    esp,0x10
c001c540:	85 c0                	test   eax,eax
c001c542:	0f 85 ea 00 00 00    	jne    c001c632 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c548:	83 ec 0c             	sub    esp,0xc
c001c54b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c54e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c552:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c556:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c55a:	0f af c2             	imul   eax,edx
c001c55d:	50                   	push   eax
c001c55e:	e8 dd 32 ff ff       	call   c000f840 <malloc>
c001c563:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c565:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c569:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c56c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c570:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c574:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c578:	0f af c2             	imul   eax,edx
c001c57b:	99                   	cdq    
c001c57c:	52                   	push   edx
c001c57d:	50                   	push   eax
c001c57e:	56                   	push   esi
c001c57f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c582:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c585:	83 c4 20             	add    esp,0x20
c001c588:	85 c0                	test   eax,eax
c001c58a:	0f 84 a2 00 00 00    	je     c001c632 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c590:	31 d2                	xor    edx,edx
c001c592:	51                   	push   ecx
c001c593:	52                   	push   edx
c001c594:	50                   	push   eax
c001c595:	56                   	push   esi
c001c596:	e8 ef 6b ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	85 c0                	test   eax,eax
c001c5a0:	0f 85 8c 00 00 00    	jne    c001c632 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c5a6:	83 ec 0c             	sub    esp,0xc
c001c5a9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c5ad:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c5b1:	31 ed                	xor    ebp,ebp
c001c5b3:	0f af c2             	imul   eax,edx
c001c5b6:	50                   	push   eax
c001c5b7:	e8 84 32 ff ff       	call   c000f840 <malloc>
c001c5bc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c5be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5c9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c5cd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c5d1:	0f af c2             	imul   eax,edx
c001c5d4:	99                   	cdq    
c001c5d5:	52                   	push   edx
c001c5d6:	50                   	push   eax
c001c5d7:	56                   	push   esi
c001c5d8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5db:	83 c4 20             	add    esp,0x20
c001c5de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c5e6:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c5ea:	0f 86 80 00 00 00    	jbe    c001c670 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c5f0:	0f b7 fd             	movzx  edi,bp
c001c5f3:	c1 e7 05             	shl    edi,0x5
c001c5f6:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c5fa:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c5fd:	75 6b                	jne    c001c66a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c5ff:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c602:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c606:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c609:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c60d:	52                   	push   edx
c001c60e:	31 d2                	xor    edx,edx
c001c610:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c613:	52                   	push   edx
c001c614:	50                   	push   eax
c001c615:	56                   	push   esi
c001c616:	e8 6f 6b ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c61b:	83 c4 10             	add    esp,0x10
c001c61e:	85 c0                	test   eax,eax
c001c620:	74 17                	je     c001c639 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c622:	83 ec 0c             	sub    esp,0xc
c001c625:	68 1c b9 02 c0       	push   0xc002b91c
c001c62a:	e8 e0 64 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001c62f:	83 c4 10             	add    esp,0x10
c001c632:	31 c0                	xor    eax,eax
c001c634:	e9 87 00 00 00       	jmp    c001c6c0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c639:	83 ec 0c             	sub    esp,0xc
c001c63c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c63f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c642:	50                   	push   eax
c001c643:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c64b:	56                   	push   esi
c001c64c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c650:	e8 e0 fb ff ff       	call   c001c235 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c655:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c659:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c65d:	83 c4 20             	add    esp,0x20
c001c660:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c664:	73 04                	jae    c001c66a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c66a:	45                   	inc    ebp
c001c66b:	e9 76 ff ff ff       	jmp    c001c5e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c670:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c674:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c678:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c67c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c682:	83 ec 0c             	sub    esp,0xc
c001c685:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c68b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c690:	05 00 10 00 00       	add    eax,0x1000
c001c695:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c69c:	e8 af 31 ff ff       	call   c000f850 <free>
c001c6a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6a4:	e8 a7 31 ff ff       	call   c000f850 <free>
c001c6a9:	58                   	pop    eax
c001c6aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c6ae:	e8 9d 31 ff ff       	call   c000f850 <free>
c001c6b3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6b6:	e8 6f 6a ff ff       	call   c001312a <File::close()>
c001c6bb:	83 c4 10             	add    esp,0x10
c001c6be:	b0 01                	mov    al,0x1
c001c6c0:	83 c4 3c             	add    esp,0x3c
c001c6c3:	5b                   	pop    ebx
c001c6c4:	5e                   	pop    esi
c001c6c5:	5f                   	pop    edi
c001c6c6:	5d                   	pop    ebp
c001c6c7:	c3                   	ret    

c001c6c8 <Thr::runtimeReferenceHelper()>:
c001c6c8:	83 ec 18             	sub    esp,0x18
c001c6cb:	68 24 b9 02 c0       	push   0xc002b924
c001c6d0:	e8 3a 64 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001c6d5:	fa                   	cli    
c001c6d6:	83 c4 10             	add    esp,0x10
c001c6d9:	eb fe                	jmp    c001c6d9 <Thr::runtimeReferenceHelper()+0x11>

c001c6db <Thr::getAddressOfKernelSymbol(char const*)>:
c001c6db:	57                   	push   edi
c001c6dc:	56                   	push   esi
c001c6dd:	53                   	push   ebx
c001c6de:	31 db                	xor    ebx,ebx
c001c6e0:	39 1d 20 12 03 c0    	cmp    DWORD PTR ds:0xc0031220,ebx
c001c6e6:	7e 3c                	jle    c001c724 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c6e8:	8b 34 9d a0 11 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcee60]
c001c6ef:	31 ff                	xor    edi,edi
c001c6f1:	39 3c 9d a0 10 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcef60],edi
c001c6f8:	7e 27                	jle    c001c721 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c6fa:	50                   	push   eax
c001c6fb:	50                   	push   eax
c001c6fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c700:	8b 06                	mov    eax,DWORD PTR [esi]
c001c702:	03 04 9d 20 11 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffceee0]
c001c709:	50                   	push   eax
c001c70a:	e8 b1 41 fe ff       	call   c00008c0 <strcmp>
c001c70f:	83 c4 10             	add    esp,0x10
c001c712:	85 c0                	test   eax,eax
c001c714:	75 05                	jne    c001c71b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c716:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c719:	eb 0b                	jmp    c001c726 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c71b:	83 c6 10             	add    esi,0x10
c001c71e:	47                   	inc    edi
c001c71f:	eb d0                	jmp    c001c6f1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c721:	43                   	inc    ebx
c001c722:	eb bc                	jmp    c001c6e0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c724:	31 c0                	xor    eax,eax
c001c726:	5b                   	pop    ebx
c001c727:	5e                   	pop    esi
c001c728:	5f                   	pop    edi
c001c729:	c3                   	ret    

c001c72a <Thr::loadKernelSymbolTable(char const*)>:
c001c72a:	55                   	push   ebp
c001c72b:	57                   	push   edi
c001c72c:	56                   	push   esi
c001c72d:	53                   	push   ebx
c001c72e:	83 ec 68             	sub    esp,0x68
c001c731:	8b 35 74 12 03 c0    	mov    esi,DWORD PTR ds:0xc0031274
c001c737:	68 14 01 00 00       	push   0x114
c001c73c:	e8 ff 30 ff ff       	call   c000f840 <malloc>
c001c741:	83 c4 0c             	add    esp,0xc
c001c744:	89 c3                	mov    ebx,eax
c001c746:	56                   	push   esi
c001c747:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c74b:	50                   	push   eax
c001c74c:	e8 17 69 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001c751:	5e                   	pop    esi
c001c752:	5f                   	pop    edi
c001c753:	6a 01                	push   0x1
c001c755:	53                   	push   ebx
c001c756:	e8 71 69 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001c75b:	83 c4 10             	add    esp,0x10
c001c75e:	85 c0                	test   eax,eax
c001c760:	74 0a                	je     c001c76c <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c762:	83 ec 0c             	sub    esp,0xc
c001c765:	68 46 b9 02 c0       	push   0xc002b946
c001c76a:	eb 34                	jmp    c001c7a0 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c76c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c774:	83 ec 0c             	sub    esp,0xc
c001c777:	6a 34                	push   0x34
c001c779:	e8 c2 30 ff ff       	call   c000f840 <malloc>
c001c77e:	59                   	pop    ecx
c001c77f:	89 c7                	mov    edi,eax
c001c781:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c785:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c787:	56                   	push   esi
c001c788:	57                   	push   edi
c001c789:	6a 00                	push   0x0
c001c78b:	6a 34                	push   0x34
c001c78d:	53                   	push   ebx
c001c78e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c791:	83 c4 20             	add    esp,0x20
c001c794:	85 c0                	test   eax,eax
c001c796:	74 17                	je     c001c7af <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c798:	83 ec 0c             	sub    esp,0xc
c001c79b:	68 5d b9 02 c0       	push   0xc002b95d
c001c7a0:	e8 fa d9 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001c7a5:	83 c4 10             	add    esp,0x10
c001c7a8:	31 c0                	xor    eax,eax
c001c7aa:	e9 31 02 00 00       	jmp    c001c9e0 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c7af:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c7b5:	75 e1                	jne    c001c798 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c7b7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c7ba:	85 c0                	test   eax,eax
c001c7bc:	74 da                	je     c001c798 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c7be:	52                   	push   edx
c001c7bf:	31 d2                	xor    edx,edx
c001c7c1:	52                   	push   edx
c001c7c2:	50                   	push   eax
c001c7c3:	53                   	push   ebx
c001c7c4:	e8 c1 69 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c7c9:	83 c4 10             	add    esp,0x10
c001c7cc:	85 c0                	test   eax,eax
c001c7ce:	75 c8                	jne    c001c798 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c7d0:	83 ec 0c             	sub    esp,0xc
c001c7d3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c7d7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c7db:	31 ed                	xor    ebp,ebp
c001c7dd:	0f af c2             	imul   eax,edx
c001c7e0:	50                   	push   eax
c001c7e1:	e8 5a 30 ff ff       	call   c000f840 <malloc>
c001c7e6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7ec:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c7f3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c7f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c7fb:	0f af c2             	imul   eax,edx
c001c7fe:	99                   	cdq    
c001c7ff:	52                   	push   edx
c001c800:	50                   	push   eax
c001c801:	53                   	push   ebx
c001c802:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c805:	83 c4 20             	add    esp,0x20
c001c808:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c810:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c818:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c820:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c828:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c82c:	0f 86 aa 00 00 00    	jbe    c001c8dc <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c832:	0f b7 f5             	movzx  esi,bp
c001c835:	6b f6 28             	imul   esi,esi,0x28
c001c838:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c83c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c83f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c843:	50                   	push   eax
c001c844:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c848:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c84c:	8b 16                	mov    edx,DWORD PTR [esi]
c001c84e:	6b c0 28             	imul   eax,eax,0x28
c001c851:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c855:	89 d0                	mov    eax,edx
c001c857:	31 d2                	xor    edx,edx
c001c859:	52                   	push   edx
c001c85a:	50                   	push   eax
c001c85b:	53                   	push   ebx
c001c85c:	e8 29 69 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c861:	83 c4 0c             	add    esp,0xc
c001c864:	6a 20                	push   0x20
c001c866:	6a 00                	push   0x0
c001c868:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c86c:	52                   	push   edx
c001c86d:	e8 06 3f fe ff       	call   c0000778 <memset>
c001c872:	58                   	pop    eax
c001c873:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c875:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c879:	51                   	push   ecx
c001c87a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c87e:	52                   	push   edx
c001c87f:	6a 00                	push   0x0
c001c881:	6a 1f                	push   0x1f
c001c883:	53                   	push   ebx
c001c884:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c887:	83 c4 18             	add    esp,0x18
c001c88a:	68 74 b9 02 c0       	push   0xc002b974
c001c88f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c893:	52                   	push   edx
c001c894:	e8 27 40 fe ff       	call   c00008c0 <strcmp>
c001c899:	83 c4 10             	add    esp,0x10
c001c89c:	85 c0                	test   eax,eax
c001c89e:	75 0f                	jne    c001c8af <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c8a0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c8a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8af:	50                   	push   eax
c001c8b0:	50                   	push   eax
c001c8b1:	68 7c b9 02 c0       	push   0xc002b97c
c001c8b6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c8ba:	50                   	push   eax
c001c8bb:	e8 00 40 fe ff       	call   c00008c0 <strcmp>
c001c8c0:	83 c4 10             	add    esp,0x10
c001c8c3:	85 c0                	test   eax,eax
c001c8c5:	75 0f                	jne    c001c8d6 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c8c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c8ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8d6:	45                   	inc    ebp
c001c8d7:	e9 4c ff ff ff       	jmp    c001c828 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c8dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c8e1:	75 10                	jne    c001c8f3 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c8e3:	83 ec 0c             	sub    esp,0xc
c001c8e6:	68 84 b9 02 c0       	push   0xc002b984
c001c8eb:	e8 af d8 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001c8f0:	83 c4 10             	add    esp,0x10
c001c8f3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c8f8:	75 10                	jne    c001c90a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c8fa:	83 ec 0c             	sub    esp,0xc
c001c8fd:	68 84 b9 02 c0       	push   0xc002b984
c001c902:	e8 98 d8 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001c907:	83 c4 10             	add    esp,0x10
c001c90a:	31 d2                	xor    edx,edx
c001c90c:	50                   	push   eax
c001c90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c911:	52                   	push   edx
c001c912:	50                   	push   eax
c001c913:	53                   	push   ebx
c001c914:	e8 71 68 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c919:	5a                   	pop    edx
c001c91a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c91e:	e8 1d 2f ff ff       	call   c000f840 <malloc>
c001c923:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c927:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c92b:	31 c9                	xor    ecx,ecx
c001c92d:	5e                   	pop    esi
c001c92e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c930:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c934:	55                   	push   ebp
c001c935:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c939:	51                   	push   ecx
c001c93a:	52                   	push   edx
c001c93b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c93f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c943:	53                   	push   ebx
c001c944:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c947:	83 c4 14             	add    esp,0x14
c001c94a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c94e:	e8 ed 2e ff ff       	call   c000f840 <malloc>
c001c953:	89 c6                	mov    esi,eax
c001c955:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c957:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c95a:	56                   	push   esi
c001c95b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c95f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c963:	51                   	push   ecx
c001c964:	52                   	push   edx
c001c965:	53                   	push   ebx
c001c966:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c969:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c96d:	8b 15 20 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031220
c001c973:	83 c4 1c             	add    esp,0x1c
c001c976:	c1 e8 04             	shr    eax,0x4
c001c979:	89 04 95 a0 10 03 c0 	mov    DWORD PTR [edx*4-0x3ffcef60],eax
c001c980:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c984:	31 d2                	xor    edx,edx
c001c986:	52                   	push   edx
c001c987:	50                   	push   eax
c001c988:	53                   	push   ebx
c001c989:	e8 fc 67 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c98e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c990:	31 d2                	xor    edx,edx
c001c992:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c995:	56                   	push   esi
c001c996:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c99a:	52                   	push   edx
c001c99b:	50                   	push   eax
c001c99c:	53                   	push   ebx
c001c99d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9a0:	83 c4 14             	add    esp,0x14
c001c9a3:	53                   	push   ebx
c001c9a4:	e8 81 67 ff ff       	call   c001312a <File::close()>
c001c9a9:	5d                   	pop    ebp
c001c9aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9ae:	e8 9d 2e ff ff       	call   c000f850 <free>
c001c9b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9b6:	e8 95 2e ff ff       	call   c000f850 <free>
c001c9bb:	a1 20 12 03 c0       	mov    eax,ds:0xc0031220
c001c9c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c9c4:	8d 50 01             	lea    edx,[eax+0x1]
c001c9c7:	89 0c 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],ecx
c001c9ce:	89 34 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],esi
c001c9d5:	89 15 20 12 03 c0    	mov    DWORD PTR ds:0xc0031220,edx
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	b0 01                	mov    al,0x1
c001c9e0:	83 c4 5c             	add    esp,0x5c
c001c9e3:	5b                   	pop    ebx
c001c9e4:	5e                   	pop    esi
c001c9e5:	5f                   	pop    edi
c001c9e6:	5d                   	pop    ebp
c001c9e7:	c3                   	ret    

c001c9e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c9e8:	55                   	push   ebp
c001c9e9:	57                   	push   edi
c001c9ea:	56                   	push   esi
c001c9eb:	53                   	push   ebx
c001c9ec:	81 ec 68 03 00 00    	sub    esp,0x368
c001c9f2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c9f9:	8b 1d 74 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031274
c001c9ff:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ca03:	68 14 01 00 00       	push   0x114
c001ca08:	e8 33 2e ff ff       	call   c000f840 <malloc>
c001ca0d:	83 c4 0c             	add    esp,0xc
c001ca10:	89 c5                	mov    ebp,eax
c001ca12:	53                   	push   ebx
c001ca13:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ca1a:	50                   	push   eax
c001ca1b:	e8 48 66 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001ca20:	5e                   	pop    esi
c001ca21:	5f                   	pop    edi
c001ca22:	6a 01                	push   0x1
c001ca24:	55                   	push   ebp
c001ca25:	e8 a2 66 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001ca2a:	83 c4 10             	add    esp,0x10
c001ca2d:	85 c0                	test   eax,eax
c001ca2f:	0f 85 8d 06 00 00    	jne    c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ca35:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ca3d:	83 ec 0c             	sub    esp,0xc
c001ca40:	6a 34                	push   0x34
c001ca42:	e8 f9 2d ff ff       	call   c000f840 <malloc>
c001ca47:	5b                   	pop    ebx
c001ca48:	89 c7                	mov    edi,eax
c001ca4a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca4e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca51:	53                   	push   ebx
c001ca52:	57                   	push   edi
c001ca53:	6a 00                	push   0x0
c001ca55:	6a 34                	push   0x34
c001ca57:	55                   	push   ebp
c001ca58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca5b:	83 c4 20             	add    esp,0x20
c001ca5e:	85 c0                	test   eax,eax
c001ca60:	0f 85 5c 06 00 00    	jne    c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ca66:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ca6c:	0f 85 50 06 00 00    	jne    c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ca72:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ca75:	85 c0                	test   eax,eax
c001ca77:	0f 84 45 06 00 00    	je     c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ca7d:	31 d2                	xor    edx,edx
c001ca7f:	51                   	push   ecx
c001ca80:	52                   	push   edx
c001ca81:	50                   	push   eax
c001ca82:	55                   	push   ebp
c001ca83:	e8 02 67 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001ca88:	83 c4 10             	add    esp,0x10
c001ca8b:	85 c0                	test   eax,eax
c001ca8d:	0f 85 2f 06 00 00    	jne    c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ca93:	83 ec 0c             	sub    esp,0xc
c001ca96:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ca99:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001caa1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001caa5:	0f af c2             	imul   eax,edx
c001caa8:	50                   	push   eax
c001caa9:	e8 92 2d ff ff       	call   c000f840 <malloc>
c001caae:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cab1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cab5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cab8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cabc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cac0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cac4:	0f af c2             	imul   eax,edx
c001cac7:	99                   	cdq    
c001cac8:	52                   	push   edx
c001cac9:	50                   	push   eax
c001caca:	55                   	push   ebp
c001cacb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cace:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cad1:	83 c4 20             	add    esp,0x20
c001cad4:	85 c0                	test   eax,eax
c001cad6:	0f 84 e6 05 00 00    	je     c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cadc:	52                   	push   edx
c001cadd:	31 d2                	xor    edx,edx
c001cadf:	52                   	push   edx
c001cae0:	50                   	push   eax
c001cae1:	55                   	push   ebp
c001cae2:	e8 a3 66 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cae7:	83 c4 10             	add    esp,0x10
c001caea:	85 c0                	test   eax,eax
c001caec:	0f 85 d0 05 00 00    	jne    c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001caf2:	83 ec 0c             	sub    esp,0xc
c001caf5:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001caf9:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cafd:	31 f6                	xor    esi,esi
c001caff:	0f af c2             	imul   eax,edx
c001cb02:	50                   	push   eax
c001cb03:	e8 38 2d ff ff       	call   c000f840 <malloc>
c001cb08:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb16:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cb1a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cb1e:	0f af c2             	imul   eax,edx
c001cb21:	99                   	cdq    
c001cb22:	52                   	push   edx
c001cb23:	50                   	push   eax
c001cb24:	55                   	push   ebp
c001cb25:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb28:	83 c4 20             	add    esp,0x20
c001cb2b:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cb2f:	0f 86 8a 00 00 00    	jbe    c001cbbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cb35:	0f b7 de             	movzx  ebx,si
c001cb38:	c1 e3 05             	shl    ebx,0x5
c001cb3b:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cb3f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cb42:	75 75                	jne    c001cbb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cb44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb47:	31 d2                	xor    edx,edx
c001cb49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb4d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb54:	50                   	push   eax
c001cb55:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cb58:	52                   	push   edx
c001cb59:	50                   	push   eax
c001cb5a:	55                   	push   ebp
c001cb5b:	e8 2a 66 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cb60:	83 c4 10             	add    esp,0x10
c001cb63:	85 c0                	test   eax,eax
c001cb65:	0f 85 57 05 00 00    	jne    c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cb6b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cb72:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb75:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cb79:	31 d2                	xor    edx,edx
c001cb7b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cb7f:	83 ec 0c             	sub    esp,0xc
c001cb82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb86:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb8d:	50                   	push   eax
c001cb8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb96:	52                   	push   edx
c001cb97:	50                   	push   eax
c001cb98:	55                   	push   ebp
c001cb99:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb9c:	83 c4 1c             	add    esp,0x1c
c001cb9f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cba2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cba5:	50                   	push   eax
c001cba6:	6a 00                	push   0x0
c001cba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbac:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cbb0:	50                   	push   eax
c001cbb1:	e8 c2 3b fe ff       	call   c0000778 <memset>
c001cbb6:	83 c4 10             	add    esp,0x10
c001cbb9:	46                   	inc    esi
c001cbba:	e9 6c ff ff ff       	jmp    c001cb2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cbbf:	53                   	push   ebx
c001cbc0:	31 db                	xor    ebx,ebx
c001cbc2:	68 00 01 00 00       	push   0x100
c001cbc7:	6a 00                	push   0x0
c001cbc9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cbcd:	50                   	push   eax
c001cbce:	e8 a5 3b fe ff       	call   c0000778 <memset>
c001cbd3:	83 c4 0c             	add    esp,0xc
c001cbd6:	68 00 01 00 00       	push   0x100
c001cbdb:	6a 00                	push   0x0
c001cbdd:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cbe4:	50                   	push   eax
c001cbe5:	e8 8e 3b fe ff       	call   c0000778 <memset>
c001cbea:	83 c4 10             	add    esp,0x10
c001cbed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cbf5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cbfd:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cc05:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc0d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cc15:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cc19:	0f 86 30 01 00 00    	jbe    c001cd4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cc1f:	0f b7 f3             	movzx  esi,bx
c001cc22:	6b f6 28             	imul   esi,esi,0x28
c001cc25:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc29:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc30:	52                   	push   edx
c001cc31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc35:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cc39:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc3b:	6b d2 28             	imul   edx,edx,0x28
c001cc3e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cc42:	31 d2                	xor    edx,edx
c001cc44:	52                   	push   edx
c001cc45:	50                   	push   eax
c001cc46:	55                   	push   ebp
c001cc47:	e8 3e 65 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cc4c:	83 c4 0c             	add    esp,0xc
c001cc4f:	6a 20                	push   0x20
c001cc51:	6a 00                	push   0x0
c001cc53:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cc5a:	51                   	push   ecx
c001cc5b:	e8 18 3b fe ff       	call   c0000778 <memset>
c001cc60:	59                   	pop    ecx
c001cc61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc64:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cc68:	52                   	push   edx
c001cc69:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cc70:	51                   	push   ecx
c001cc71:	6a 00                	push   0x0
c001cc73:	6a 1f                	push   0x1f
c001cc75:	55                   	push   ebp
c001cc76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc79:	83 c4 1c             	add    esp,0x1c
c001cc7c:	6a 09                	push   0x9
c001cc7e:	68 9e b9 02 c0       	push   0xc002b99e
c001cc83:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cc8a:	51                   	push   ecx
c001cc8b:	e8 b0 39 fe ff       	call   c0000640 <memcmp>
c001cc90:	83 c4 10             	add    esp,0x10
c001cc93:	85 c0                	test   eax,eax
c001cc95:	75 21                	jne    c001ccb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cc97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc9f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cca3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cca7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccaa:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ccb1:	89 d0                	mov    eax,edx
c001ccb3:	40                   	inc    eax
c001ccb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccb8:	50                   	push   eax
c001ccb9:	6a 09                	push   0x9
c001ccbb:	68 a8 b9 02 c0       	push   0xc002b9a8
c001ccc0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ccc7:	50                   	push   eax
c001ccc8:	e8 73 39 fe ff       	call   c0000640 <memcmp>
c001cccd:	83 c4 10             	add    esp,0x10
c001ccd0:	85 c0                	test   eax,eax
c001ccd2:	75 21                	jne    c001ccf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001ccd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ccdc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cce0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cce4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cce7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ccee:	89 d0                	mov    eax,edx
c001ccf0:	40                   	inc    eax
c001ccf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccf5:	50                   	push   eax
c001ccf6:	50                   	push   eax
c001ccf7:	68 74 b9 02 c0       	push   0xc002b974
c001ccfc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd03:	50                   	push   eax
c001cd04:	e8 b7 3b fe ff       	call   c00008c0 <strcmp>
c001cd09:	83 c4 10             	add    esp,0x10
c001cd0c:	85 c0                	test   eax,eax
c001cd0e:	75 0f                	jne    c001cd1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cd10:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd1f:	50                   	push   eax
c001cd20:	50                   	push   eax
c001cd21:	68 7c b9 02 c0       	push   0xc002b97c
c001cd26:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd2d:	50                   	push   eax
c001cd2e:	e8 8d 3b fe ff       	call   c00008c0 <strcmp>
c001cd33:	83 c4 10             	add    esp,0x10
c001cd36:	85 c0                	test   eax,eax
c001cd38:	75 0f                	jne    c001cd49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cd3a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cd41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd45:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cd49:	43                   	inc    ebx
c001cd4a:	e9 c6 fe ff ff       	jmp    c001cc15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cd4f:	31 d2                	xor    edx,edx
c001cd51:	50                   	push   eax
c001cd52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd56:	52                   	push   edx
c001cd57:	50                   	push   eax
c001cd58:	55                   	push   ebp
c001cd59:	e8 2c 64 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cd5e:	58                   	pop    eax
c001cd5f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd63:	e8 d8 2a ff ff       	call   c000f840 <malloc>
c001cd68:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd6b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cd6f:	31 d2                	xor    edx,edx
c001cd71:	58                   	pop    eax
c001cd72:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cd76:	53                   	push   ebx
c001cd77:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cd7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd7f:	52                   	push   edx
c001cd80:	50                   	push   eax
c001cd81:	55                   	push   ebp
c001cd82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd85:	83 c4 14             	add    esp,0x14
c001cd88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd8c:	e8 af 2a ff ff       	call   c000f840 <malloc>
c001cd91:	31 d2                	xor    edx,edx
c001cd93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cd97:	83 c4 0c             	add    esp,0xc
c001cd9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd9e:	52                   	push   edx
c001cd9f:	50                   	push   eax
c001cda0:	55                   	push   ebp
c001cda1:	e8 e4 63 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cda6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cda9:	31 d2                	xor    edx,edx
c001cdab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cdb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cdb6:	52                   	push   edx
c001cdb7:	50                   	push   eax
c001cdb8:	55                   	push   ebp
c001cdb9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdbc:	83 c4 20             	add    esp,0x20
c001cdbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdc7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cdcb:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cdcf:	0f 84 f1 02 00 00    	je     c001d0c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001cdd5:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cddc:	31 d2                	xor    edx,edx
c001cdde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cde2:	c1 e8 03             	shr    eax,0x3
c001cde5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cde9:	51                   	push   ecx
c001cdea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdee:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cdf2:	52                   	push   edx
c001cdf3:	50                   	push   eax
c001cdf4:	55                   	push   ebp
c001cdf5:	e8 90 63 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cdfa:	5b                   	pop    ebx
c001cdfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdff:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001ce06:	e8 35 2a ff ff       	call   c000f840 <malloc>
c001ce0b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce12:	31 d2                	xor    edx,edx
c001ce14:	5e                   	pop    esi
c001ce15:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ce19:	50                   	push   eax
c001ce1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce22:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001ce29:	52                   	push   edx
c001ce2a:	50                   	push   eax
c001ce2b:	55                   	push   ebp
c001ce2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce2f:	83 c4 20             	add    esp,0x20
c001ce32:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ce3a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ce3e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001ce42:	0f 8d 62 02 00 00    	jge    c001d0aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001ce48:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ce4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce50:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ce55:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ce58:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ce5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce60:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ce64:	89 d8                	mov    eax,ebx
c001ce66:	c1 e8 08             	shr    eax,0x8
c001ce69:	89 c6                	mov    esi,eax
c001ce6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ce6f:	c1 e6 04             	shl    esi,0x4
c001ce72:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ce76:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ce79:	85 d2                	test   edx,edx
c001ce7b:	0f 85 bf 00 00 00    	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ce81:	83 ec 0c             	sub    esp,0xc
c001ce84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce88:	03 06                	add    eax,DWORD PTR [esi]
c001ce8a:	50                   	push   eax
c001ce8b:	e8 4b f8 ff ff       	call   c001c6db <Thr::getAddressOfKernelSymbol(char const*)>
c001ce90:	83 c4 10             	add    esp,0x10
c001ce93:	89 c2                	mov    edx,eax
c001ce95:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001ce9a:	85 c0                	test   eax,eax
c001ce9c:	0f 85 9e 00 00 00    	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cea2:	83 ec 0c             	sub    esp,0xc
c001cea5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cea9:	03 06                	add    eax,DWORD PTR [esi]
c001ceab:	50                   	push   eax
c001ceac:	e8 44 16 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	89 c2                	mov    edx,eax
c001ceb6:	85 c0                	test   eax,eax
c001ceb8:	0f 85 82 00 00 00    	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cebe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cec2:	50                   	push   eax
c001cec3:	50                   	push   eax
c001cec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec8:	03 06                	add    eax,DWORD PTR [esi]
c001ceca:	50                   	push   eax
c001cecb:	68 b2 b9 02 c0       	push   0xc002b9b2
c001ced0:	e8 3a 5c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ced5:	58                   	pop    eax
c001ced6:	5a                   	pop    edx
c001ced7:	68 cc b9 02 c0       	push   0xc002b9cc
c001cedc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cee3:	50                   	push   eax
c001cee4:	e8 4b 39 fe ff       	call   c0000834 <strcpy>
c001cee9:	59                   	pop    ecx
c001ceea:	58                   	pop    eax
c001ceeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceef:	03 06                	add    eax,DWORD PTR [esi]
c001cef1:	50                   	push   eax
c001cef2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cef9:	50                   	push   eax
c001cefa:	e8 75 3a fe ff       	call   c0000974 <strcat>
c001ceff:	58                   	pop    eax
c001cf00:	5a                   	pop    edx
c001cf01:	68 62 ba 02 c0       	push   0xc002ba62
c001cf06:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf0d:	50                   	push   eax
c001cf0e:	e8 61 3a fe ff       	call   c0000974 <strcat>
c001cf13:	83 c4 10             	add    esp,0x10
c001cf16:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf1b:	0f 84 43 01 00 00    	je     c001d064 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cf21:	83 ec 0c             	sub    esp,0xc
c001cf24:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf2b:	50                   	push   eax
c001cf2c:	e8 6e d2 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001cf31:	83 c4 10             	add    esp,0x10
c001cf34:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cf38:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf3c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cf40:	80 fb 01             	cmp    bl,0x1
c001cf43:	75 7d                	jne    c001cfc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001cf45:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cf4c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf50:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cf54:	01 ce                	add    esi,ecx
c001cf56:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cf5c:	0f 94 c0             	sete   al
c001cf5f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cf65:	0f 94 c3             	sete   bl
c001cf68:	09 c3                	or     ebx,eax
c001cf6a:	8b 06                	mov    eax,DWORD PTR [esi]
c001cf6c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cf71:	74 36                	je     c001cfa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001cf73:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cf76:	84 db                	test   bl,bl
c001cf78:	75 0a                	jne    c001cf84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001cf7a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf7e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cf82:	76 37                	jbe    c001cfbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cf84:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cf88:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf8d:	0f 84 d1 00 00 00    	je     c001d064 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cf93:	83 ec 0c             	sub    esp,0xc
c001cf96:	68 e3 b9 02 c0       	push   0xc002b9e3
c001cf9b:	e8 ff d1 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001cfa0:	83 c4 10             	add    esp,0x10
c001cfa3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cfa7:	eb 12                	jmp    c001cfbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cfa9:	01 c1                	add    ecx,eax
c001cfab:	84 db                	test   bl,bl
c001cfad:	75 0c                	jne    c001cfbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cfaf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfb3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cfb7:	77 02                	ja     c001cfbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cfb9:	01 d1                	add    ecx,edx
c001cfbb:	89 0e                	mov    DWORD PTR [esi],ecx
c001cfbd:	e9 df 00 00 00       	jmp    c001d0a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cfc2:	80 fb 02             	cmp    bl,0x2
c001cfc5:	75 71                	jne    c001d038 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001cfc7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cfce:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cfd2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cfd6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cfdc:	74 15                	je     c001cff3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001cfde:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cfe4:	74 0d                	je     c001cff3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001cfe6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfea:	83 e8 04             	sub    eax,0x4
c001cfed:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cff1:	76 1f                	jbe    c001d012 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001cff3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cff7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cffc:	74 66                	je     c001d064 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cffe:	83 ec 0c             	sub    esp,0xc
c001d001:	68 ff b9 02 c0       	push   0xc002b9ff
c001d006:	e8 94 d1 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001d00b:	83 c4 10             	add    esp,0x10
c001d00e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d012:	8b 06                	mov    eax,DWORD PTR [esi]
c001d014:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d019:	74 13                	je     c001d02e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d01b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d01f:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d026:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d02a:	01 c8                	add    eax,ecx
c001d02c:	eb 04                	jmp    c001d032 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d02e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d032:	01 c2                	add    edx,eax
c001d034:	89 16                	mov    DWORD PTR [esi],edx
c001d036:	eb 69                	jmp    c001d0a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d038:	0f b6 db             	movzx  ebx,bl
c001d03b:	50                   	push   eax
c001d03c:	50                   	push   eax
c001d03d:	53                   	push   ebx
c001d03e:	68 1b ba 02 c0       	push   0xc002ba1b
c001d043:	e8 c7 5a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d048:	83 c4 10             	add    esp,0x10
c001d04b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d050:	74 12                	je     c001d064 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d052:	83 ec 0c             	sub    esp,0xc
c001d055:	68 26 ba 02 c0       	push   0xc002ba26
c001d05a:	e8 40 d1 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001d05f:	83 c4 10             	add    esp,0x10
c001d062:	eb 3d                	jmp    c001d0a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d064:	83 ec 0c             	sub    esp,0xc
c001d067:	55                   	push   ebp
c001d068:	e8 bd 60 ff ff       	call   c001312a <File::close()>
c001d06d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d070:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d073:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d076:	59                   	pop    ecx
c001d077:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d07b:	e8 d0 27 ff ff       	call   c000f850 <free>
c001d080:	5b                   	pop    ebx
c001d081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d085:	e8 c6 27 ff ff       	call   c000f850 <free>
c001d08a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d08d:	e8 be 27 ff ff       	call   c000f850 <free>
c001d092:	5e                   	pop    esi
c001d093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d097:	e8 b4 27 ff ff       	call   c000f850 <free>
c001d09c:	83 c4 10             	add    esp,0x10
c001d09f:	eb 21                	jmp    c001d0c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a1:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d0a5:	e9 90 fd ff ff       	jmp    c001ce3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d0aa:	83 ec 0c             	sub    esp,0xc
c001d0ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0b1:	e8 9a 27 ff ff       	call   c000f850 <free>
c001d0b6:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d0ba:	83 c4 10             	add    esp,0x10
c001d0bd:	e9 05 fd ff ff       	jmp    c001cdc7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d0c2:	31 c0                	xor    eax,eax
c001d0c4:	eb 33                	jmp    c001d0f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d0c6:	83 ec 0c             	sub    esp,0xc
c001d0c9:	55                   	push   ebp
c001d0ca:	e8 5b 60 ff ff       	call   c001312a <File::close()>
c001d0cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d0d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0d8:	58                   	pop    eax
c001d0d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0dd:	e8 6e 27 ff ff       	call   c000f850 <free>
c001d0e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0e5:	e8 66 27 ff ff       	call   c000f850 <free>
c001d0ea:	5a                   	pop    edx
c001d0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ef:	e8 5c 27 ff ff       	call   c000f850 <free>
c001d0f4:	83 c4 10             	add    esp,0x10
c001d0f7:	b0 01                	mov    al,0x1
c001d0f9:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d0ff:	5b                   	pop    ebx
c001d100:	5e                   	pop    esi
c001d101:	5f                   	pop    edi
c001d102:	5d                   	pop    ebp
c001d103:	c3                   	ret    

c001d104 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d104:	56                   	push   esi
c001d105:	31 d2                	xor    edx,edx
c001d107:	53                   	push   ebx
c001d108:	8b 1d 80 0a 03 c0    	mov    ebx,DWORD PTR ds:0xc0030a80
c001d10e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d112:	39 d3                	cmp    ebx,edx
c001d114:	7e 1b                	jle    c001d131 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d116:	8b 04 95 a0 0c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf360]
c001d11d:	39 c8                	cmp    eax,ecx
c001d11f:	77 0d                	ja     c001d12e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d121:	8b 34 95 a0 0a 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf560]
c001d128:	01 c6                	add    esi,eax
c001d12a:	39 ce                	cmp    esi,ecx
c001d12c:	77 05                	ja     c001d133 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d12e:	42                   	inc    edx
c001d12f:	eb e1                	jmp    c001d112 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d131:	31 c0                	xor    eax,eax
c001d133:	5b                   	pop    ebx
c001d134:	5e                   	pop    esi
c001d135:	c3                   	ret    

c001d136 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d136:	53                   	push   ebx
c001d137:	31 c0                	xor    eax,eax
c001d139:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d13d:	8b 1d 80 0a 03 c0    	mov    ebx,DWORD PTR ds:0xc0030a80
c001d143:	39 c3                	cmp    ebx,eax
c001d145:	7e 22                	jle    c001d169 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d147:	8b 14 85 a0 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf360]
c001d14e:	39 ca                	cmp    edx,ecx
c001d150:	77 14                	ja     c001d166 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d152:	03 14 85 a0 0a 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf560]
c001d159:	39 ca                	cmp    edx,ecx
c001d15b:	76 09                	jbe    c001d166 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d15d:	8b 04 85 a0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf160]
c001d164:	eb 05                	jmp    c001d16b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d166:	40                   	inc    eax
c001d167:	eb da                	jmp    c001d143 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d169:	31 c0                	xor    eax,eax
c001d16b:	5b                   	pop    ebx
c001d16c:	c3                   	ret    

c001d16d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d16d:	53                   	push   ebx
c001d16e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d172:	53                   	push   ebx
c001d173:	e8 8c ff ff ff       	call   c001d104 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d178:	5a                   	pop    edx
c001d179:	31 d2                	xor    edx,edx
c001d17b:	85 c0                	test   eax,eax
c001d17d:	74 04                	je     c001d183 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d17f:	89 da                	mov    edx,ebx
c001d181:	29 c2                	sub    edx,eax
c001d183:	89 d0                	mov    eax,edx
c001d185:	5b                   	pop    ebx
c001d186:	c3                   	ret    

c001d187 <Thr::loadDLL(char const*, bool)>:
c001d187:	55                   	push   ebp
c001d188:	57                   	push   edi
c001d189:	56                   	push   esi
c001d18a:	53                   	push   ebx
c001d18b:	81 ec 34 01 00 00    	sub    esp,0x134
c001d191:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d198:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d19f:	56                   	push   esi
c001d1a0:	68 3e ba 02 c0       	push   0xc002ba3e
c001d1a5:	e8 65 59 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d1aa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d1b1:	e8 8a 26 ff ff       	call   c000f840 <malloc>
c001d1b6:	83 c4 0c             	add    esp,0xc
c001d1b9:	89 c3                	mov    ebx,eax
c001d1bb:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c001d1c1:	56                   	push   esi
c001d1c2:	50                   	push   eax
c001d1c3:	e8 a0 5e ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001d1c8:	83 c4 10             	add    esp,0x10
c001d1cb:	85 db                	test   ebx,ebx
c001d1cd:	75 3c                	jne    c001d20b <Thr::loadDLL(char const*, bool)+0x84>
c001d1cf:	89 e8                	mov    eax,ebp
c001d1d1:	84 c0                	test   al,al
c001d1d3:	0f 84 d5 01 00 00    	je     c001d3ae <Thr::loadDLL(char const*, bool)+0x227>
c001d1d9:	57                   	push   edi
c001d1da:	57                   	push   edi
c001d1db:	68 4f ba 02 c0       	push   0xc002ba4f
c001d1e0:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d1e4:	57                   	push   edi
c001d1e5:	e8 4a 36 fe ff       	call   c0000834 <strcpy>
c001d1ea:	58                   	pop    eax
c001d1eb:	5a                   	pop    edx
c001d1ec:	56                   	push   esi
c001d1ed:	57                   	push   edi
c001d1ee:	e8 81 37 fe ff       	call   c0000974 <strcat>
c001d1f3:	59                   	pop    ecx
c001d1f4:	58                   	pop    eax
c001d1f5:	68 62 ba 02 c0       	push   0xc002ba62
c001d1fa:	57                   	push   edi
c001d1fb:	e8 74 37 fe ff       	call   c0000974 <strcat>
c001d200:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d203:	e8 97 cf ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001d208:	83 c4 10             	add    esp,0x10
c001d20b:	51                   	push   ecx
c001d20c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d210:	50                   	push   eax
c001d211:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d215:	50                   	push   eax
c001d216:	53                   	push   ebx
c001d217:	e8 5c 61 ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001d21c:	83 c4 10             	add    esp,0x10
c001d21f:	85 db                	test   ebx,ebx
c001d221:	74 0c                	je     c001d22f <Thr::loadDLL(char const*, bool)+0xa8>
c001d223:	83 ec 0c             	sub    esp,0xc
c001d226:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d228:	53                   	push   ebx
c001d229:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d22c:	83 c4 10             	add    esp,0x10
c001d22f:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d234:	75 0a                	jne    c001d240 <Thr::loadDLL(char const*, bool)+0xb9>
c001d236:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d23a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d23e:	75 3c                	jne    c001d27c <Thr::loadDLL(char const*, bool)+0xf5>
c001d240:	89 e8                	mov    eax,ebp
c001d242:	84 c0                	test   al,al
c001d244:	0f 84 4c 01 00 00    	je     c001d396 <Thr::loadDLL(char const*, bool)+0x20f>
c001d24a:	51                   	push   ecx
c001d24b:	51                   	push   ecx
c001d24c:	68 4f ba 02 c0       	push   0xc002ba4f
c001d251:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d255:	53                   	push   ebx
c001d256:	e8 d9 35 fe ff       	call   c0000834 <strcpy>
c001d25b:	5f                   	pop    edi
c001d25c:	58                   	pop    eax
c001d25d:	56                   	push   esi
c001d25e:	53                   	push   ebx
c001d25f:	e8 10 37 fe ff       	call   c0000974 <strcat>
c001d264:	58                   	pop    eax
c001d265:	5a                   	pop    edx
c001d266:	68 62 ba 02 c0       	push   0xc002ba62
c001d26b:	53                   	push   ebx
c001d26c:	e8 03 37 fe ff       	call   c0000974 <strcat>
c001d271:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d274:	e8 26 cf ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001d279:	83 c4 10             	add    esp,0x10
c001d27c:	e8 2e 4a ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c001d281:	51                   	push   ecx
c001d282:	6a 03                	push   0x3
c001d284:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d288:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d28c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d292:	83 d3 00             	adc    ebx,0x0
c001d295:	89 ca                	mov    edx,ecx
c001d297:	89 d1                	mov    ecx,edx
c001d299:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d29d:	51                   	push   ecx
c001d29e:	50                   	push   eax
c001d29f:	e8 46 50 ff ff       	call   c00122ea <VAS::allocatePages(int, int)>
c001d2a4:	5f                   	pop    edi
c001d2a5:	89 c3                	mov    ebx,eax
c001d2a7:	58                   	pop    eax
c001d2a8:	53                   	push   ebx
c001d2a9:	68 64 ba 02 c0       	push   0xc002ba64
c001d2ae:	e8 5c 58 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d2b3:	89 34 24             	mov    DWORD PTR [esp],esi
c001d2b6:	e8 d9 34 fe ff       	call   c0000794 <strlen>
c001d2bb:	8b 3d 80 0a 03 c0    	mov    edi,DWORD PTR ds:0xc0030a80
c001d2c1:	40                   	inc    eax
c001d2c2:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2c5:	e8 76 25 ff ff       	call   c000f840 <malloc>
c001d2ca:	89 04 bd a0 0e 03 c0 	mov    DWORD PTR [edi*4-0x3ffcf160],eax
c001d2d1:	58                   	pop    eax
c001d2d2:	a1 80 0a 03 c0       	mov    eax,ds:0xc0030a80
c001d2d7:	5a                   	pop    edx
c001d2d8:	56                   	push   esi
c001d2d9:	ff 34 85 a0 0e 03 c0 	push   DWORD PTR [eax*4-0x3ffcf160]
c001d2e0:	e8 4f 35 fe ff       	call   c0000834 <strcpy>
c001d2e5:	a1 80 0a 03 c0       	mov    eax,ds:0xc0030a80
c001d2ea:	8d 50 01             	lea    edx,[eax+0x1]
c001d2ed:	89 1c 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],ebx
c001d2f4:	89 15 80 0a 03 c0    	mov    DWORD PTR ds:0xc0030a80,edx
c001d2fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2fe:	83 c4 0c             	add    esp,0xc
c001d301:	89 14 85 a0 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf560],edx
c001d308:	6a 01                	push   0x1
c001d30a:	53                   	push   ebx
c001d30b:	56                   	push   esi
c001d30c:	e8 d7 f6 ff ff       	call   c001c9e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d311:	83 c4 10             	add    esp,0x10
c001d314:	89 c7                	mov    edi,eax
c001d316:	84 c0                	test   al,al
c001d318:	0f 85 8c 00 00 00    	jne    c001d3aa <Thr::loadDLL(char const*, bool)+0x223>
c001d31e:	89 e8                	mov    eax,ebp
c001d320:	84 c0                	test   al,al
c001d322:	74 76                	je     c001d39a <Thr::loadDLL(char const*, bool)+0x213>
c001d324:	83 ec 0c             	sub    esp,0xc
c001d327:	68 71 ba 02 c0       	push   0xc002ba71
c001d32c:	e8 6e ce ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001d331:	83 c4 10             	add    esp,0x10
c001d334:	eb 64                	jmp    c001d39a <Thr::loadDLL(char const*, bool)+0x213>
c001d336:	e8 74 49 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c001d33b:	89 f5                	mov    ebp,esi
c001d33d:	c1 e5 0c             	shl    ebp,0xc
c001d340:	52                   	push   edx
c001d341:	01 dd                	add    ebp,ebx
c001d343:	52                   	push   edx
c001d344:	55                   	push   ebp
c001d345:	50                   	push   eax
c001d346:	e8 19 4b ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c001d34b:	83 c4 10             	add    esp,0x10
c001d34e:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d351:	75 0c                	jne    c001d35f <Thr::loadDLL(char const*, bool)+0x1d8>
c001d353:	83 ec 0c             	sub    esp,0xc
c001d356:	55                   	push   ebp
c001d357:	e8 f7 2a ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001d35c:	83 c4 10             	add    esp,0x10
c001d35f:	46                   	inc    esi
c001d360:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d364:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d368:	05 ff 0f 00 00       	add    eax,0xfff
c001d36d:	83 d2 00             	adc    edx,0x0
c001d370:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d374:	c1 ea 0c             	shr    edx,0xc
c001d377:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d37b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d37f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d383:	ba 00 00 00 00       	mov    edx,0x0
c001d388:	89 d0                	mov    eax,edx
c001d38a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d38e:	72 a6                	jb     c001d336 <Thr::loadDLL(char const*, bool)+0x1af>
c001d390:	89 f8                	mov    eax,edi
c001d392:	84 c0                	test   al,al
c001d394:	75 18                	jne    c001d3ae <Thr::loadDLL(char const*, bool)+0x227>
c001d396:	31 db                	xor    ebx,ebx
c001d398:	eb 14                	jmp    c001d3ae <Thr::loadDLL(char const*, bool)+0x227>
c001d39a:	83 ec 0c             	sub    esp,0xc
c001d39d:	68 90 ba 02 c0       	push   0xc002ba90
c001d3a2:	e8 f8 cd ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001d3a7:	83 c4 10             	add    esp,0x10
c001d3aa:	31 f6                	xor    esi,esi
c001d3ac:	eb b2                	jmp    c001d360 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d3ae:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d3b4:	89 d8                	mov    eax,ebx
c001d3b6:	5b                   	pop    ebx
c001d3b7:	5e                   	pop    esi
c001d3b8:	5f                   	pop    edi
c001d3b9:	5d                   	pop    ebp
c001d3ba:	c3                   	ret    

c001d3bb <Thr::executeDLL(unsigned long, void*)>:
c001d3bb:	56                   	push   esi
c001d3bc:	53                   	push   ebx
c001d3bd:	52                   	push   edx
c001d3be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d3c6:	85 db                	test   ebx,ebx
c001d3c8:	75 10                	jne    c001d3da <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d3ca:	83 ec 0c             	sub    esp,0xc
c001d3cd:	68 ac ba 02 c0       	push   0xc002baac
c001d3d2:	e8 c8 cd ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001d3d7:	83 c4 10             	add    esp,0x10
c001d3da:	50                   	push   eax
c001d3db:	50                   	push   eax
c001d3dc:	53                   	push   ebx
c001d3dd:	68 d6 ba 02 c0       	push   0xc002bad6
c001d3e2:	e8 28 57 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d3e7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d3eb:	89 d8                	mov    eax,ebx
c001d3ed:	83 c4 14             	add    esp,0x14
c001d3f0:	5b                   	pop    ebx
c001d3f1:	5e                   	pop    esi
c001d3f2:	ff e0                	jmp    eax

c001d3f4 <changeTSS>:
c001d3f4:	83 ec 14             	sub    esp,0x14
c001d3f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3fc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d3ff:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d404:	c1 e2 15             	shl    edx,0x15
c001d407:	29 d0                	sub    eax,edx
c001d409:	50                   	push   eax
c001d40a:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001d40f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d415:	05 7c 11 00 00       	add    eax,0x117c
c001d41a:	50                   	push   eax
c001d41b:	e8 3e 40 ff ff       	call   c001145e <TSS::setESP(unsigned long)>
c001d420:	83 c4 1c             	add    esp,0x1c
c001d423:	c3                   	ret    

c001d424 <Process::addArgs(char**)>:
c001d424:	57                   	push   edi
c001d425:	56                   	push   esi
c001d426:	53                   	push   ebx
c001d427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d42b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d42f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d439:	85 ff                	test   edi,edi
c001d43b:	74 3d                	je     c001d47a <Process::addArgs(char**)+0x56>
c001d43d:	8b 07                	mov    eax,DWORD PTR [edi]
c001d43f:	85 c0                	test   eax,eax
c001d441:	74 37                	je     c001d47a <Process::addArgs(char**)+0x56>
c001d443:	31 db                	xor    ebx,ebx
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	50                   	push   eax
c001d449:	e8 46 33 fe ff       	call   c0000794 <strlen>
c001d44e:	40                   	inc    eax
c001d44f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d452:	e8 e9 23 ff ff       	call   c000f840 <malloc>
c001d457:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d45e:	5a                   	pop    edx
c001d45f:	59                   	pop    ecx
c001d460:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d463:	43                   	inc    ebx
c001d464:	50                   	push   eax
c001d465:	e8 ca 33 fe ff       	call   c0000834 <strcpy>
c001d46a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d470:	83 c4 10             	add    esp,0x10
c001d473:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d476:	85 c0                	test   eax,eax
c001d478:	75 cb                	jne    c001d445 <Process::addArgs(char**)+0x21>
c001d47a:	5b                   	pop    ebx
c001d47b:	5e                   	pop    esi
c001d47c:	5f                   	pop    edi
c001d47d:	c3                   	ret    

c001d47e <Process::Process(char const*, Process*, char**)>:
c001d47e:	56                   	push   esi
c001d47f:	53                   	push   ebx
c001d480:	83 ec 14             	sub    esp,0x14
c001d483:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d487:	05 0c 02 00 00       	add    eax,0x20c
c001d48c:	bb 07 00 00 00       	mov    ebx,0x7
c001d491:	89 c6                	mov    esi,eax
c001d493:	85 db                	test   ebx,ebx
c001d495:	78 12                	js     c001d4a9 <Process::Process(char const*, Process*, char**)+0x2b>
c001d497:	83 ec 0c             	sub    esp,0xc
c001d49a:	56                   	push   esi
c001d49b:	e8 22 b2 00 00       	call   c00286c2 <ThreadControlBlock::ThreadControlBlock()>
c001d4a0:	83 c4 10             	add    esp,0x10
c001d4a3:	83 c6 63             	add    esi,0x63
c001d4a6:	4b                   	dec    ebx
c001d4a7:	eb ea                	jmp    c001d493 <Process::Process(char const*, Process*, char**)+0x15>
c001d4a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ad:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4bb:	e8 30 cb ff ff       	call   c0019ff0 <Krnl::newProcessEnv(Process*)>
c001d4c0:	83 c4 10             	add    esp,0x10
c001d4c3:	89 c2                	mov    edx,eax
c001d4c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4c9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d4cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d4dc:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c001d4e1:	8d 50 01             	lea    edx,[eax+0x1]
c001d4e4:	89 15 90 d2 02 c0    	mov    DWORD PTR ds:0xc002d290,edx
c001d4ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d4ee:	89 02                	mov    DWORD PTR [edx],eax
c001d4f0:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d4f8:	83 ec 0c             	sub    esp,0xc
c001d4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4ff:	e8 3c 23 ff ff       	call   c000f840 <malloc>
c001d504:	83 c4 10             	add    esp,0x10
c001d507:	89 c3                	mov    ebx,eax
c001d509:	83 ec 08             	sub    esp,0x8
c001d50c:	6a 00                	push   0x0
c001d50e:	53                   	push   ebx
c001d50f:	e8 7e 51 ff ff       	call   c0012692 <VAS::VAS(bool)>
c001d514:	83 c4 10             	add    esp,0x10
c001d517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d51b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d525:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d52f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d533:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d537:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d53d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d541:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d547:	85 c0                	test   eax,eax
c001d549:	74 42                	je     c001d58d <Process::Process(char const*, Process*, char**)+0x10f>
c001d54b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d54f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d555:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d55f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d569:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d56f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d579:	05 0c 01 00 00       	add    eax,0x10c
c001d57e:	83 ec 08             	sub    esp,0x8
c001d581:	52                   	push   edx
c001d582:	50                   	push   eax
c001d583:	e8 ac 32 fe ff       	call   c0000834 <strcpy>
c001d588:	83 c4 10             	add    esp,0x10
c001d58b:	eb 63                	jmp    c001d5f0 <Process::Process(char const*, Process*, char**)+0x172>
c001d58d:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d595:	83 ec 0c             	sub    esp,0xc
c001d598:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d59c:	e8 9f 22 ff ff       	call   c000f840 <malloc>
c001d5a1:	83 c4 10             	add    esp,0x10
c001d5a4:	89 c3                	mov    ebx,eax
c001d5a6:	83 ec 08             	sub    esp,0x8
c001d5a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5ad:	53                   	push   ebx
c001d5ae:	e8 a9 3b ff ff       	call   c001115c <VgaText::VgaText(char const*)>
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5ba:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d5c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5c4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d5ca:	83 ec 0c             	sub    esp,0xc
c001d5cd:	50                   	push   eax
c001d5ce:	e8 7c 2f ff ff       	call   c001054f <addToTerminalCycle(VgaText*)>
c001d5d3:	83 c4 10             	add    esp,0x10
c001d5d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5da:	05 0c 01 00 00       	add    eax,0x10c
c001d5df:	83 ec 08             	sub    esp,0x8
c001d5e2:	68 f5 ba 02 c0       	push   0xc002baf5
c001d5e7:	50                   	push   eax
c001d5e8:	e8 47 32 fe ff       	call   c0000834 <strcpy>
c001d5ed:	83 c4 10             	add    esp,0x10
c001d5f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5f4:	83 c0 0c             	add    eax,0xc
c001d5f7:	83 ec 08             	sub    esp,0x8
c001d5fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5fe:	50                   	push   eax
c001d5ff:	e8 30 32 fe ff       	call   c0000834 <strcpy>
c001d604:	83 c4 10             	add    esp,0x10
c001d607:	83 ec 08             	sub    esp,0x8
c001d60a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d60e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d612:	e8 0d fe ff ff       	call   c001d424 <Process::addArgs(char**)>
c001d617:	83 c4 10             	add    esp,0x10
c001d61a:	83 ec 08             	sub    esp,0x8
c001d61d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d621:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d625:	e8 88 ee ff ff       	call   c001c4b2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d62a:	83 c4 10             	add    esp,0x10
c001d62d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d631:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d635:	83 f0 01             	xor    eax,0x1
c001d638:	88 c2                	mov    dl,al
c001d63a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d63e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d644:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d649:	83 ec 08             	sub    esp,0x8
c001d64c:	50                   	push   eax
c001d64d:	68 f0 bb 02 c0       	push   0xc002bbf0
c001d652:	e8 b8 54 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d657:	83 c4 10             	add    esp,0x10
c001d65a:	90                   	nop
c001d65b:	83 c4 14             	add    esp,0x14
c001d65e:	5b                   	pop    ebx
c001d65f:	5e                   	pop    esi
c001d660:	c3                   	ret    
c001d661:	90                   	nop

c001d662 <Process::Process(bool, char const*, Process*, char**)>:
c001d662:	56                   	push   esi
c001d663:	53                   	push   ebx
c001d664:	83 ec 24             	sub    esp,0x24
c001d667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d66b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d66f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d673:	05 0c 02 00 00       	add    eax,0x20c
c001d678:	bb 07 00 00 00       	mov    ebx,0x7
c001d67d:	89 c6                	mov    esi,eax
c001d67f:	85 db                	test   ebx,ebx
c001d681:	78 12                	js     c001d695 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d683:	83 ec 0c             	sub    esp,0xc
c001d686:	56                   	push   esi
c001d687:	e8 36 b0 00 00       	call   c00286c2 <ThreadControlBlock::ThreadControlBlock()>
c001d68c:	83 c4 10             	add    esp,0x10
c001d68f:	83 c6 63             	add    esi,0x63
c001d692:	4b                   	dec    ebx
c001d693:	eb ea                	jmp    c001d67f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d695:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d699:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d6a0:	83 ec 0c             	sub    esp,0xc
c001d6a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6a7:	e8 44 c9 ff ff       	call   c0019ff0 <Krnl::newProcessEnv(Process*)>
c001d6ac:	83 c4 10             	add    esp,0x10
c001d6af:	89 c2                	mov    edx,eax
c001d6b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6b5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d6bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6bf:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d6c8:	a1 90 d2 02 c0       	mov    eax,ds:0xc002d290
c001d6cd:	8d 50 01             	lea    edx,[eax+0x1]
c001d6d0:	89 15 90 d2 02 c0    	mov    DWORD PTR ds:0xc002d290,edx
c001d6d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6da:	89 02                	mov    DWORD PTR [edx],eax
c001d6dc:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d6e4:	83 ec 0c             	sub    esp,0xc
c001d6e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6eb:	e8 50 21 ff ff       	call   c000f840 <malloc>
c001d6f0:	83 c4 10             	add    esp,0x10
c001d6f3:	89 c3                	mov    ebx,eax
c001d6f5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d6fa:	83 ec 08             	sub    esp,0x8
c001d6fd:	50                   	push   eax
c001d6fe:	53                   	push   ebx
c001d6ff:	e8 8e 4f ff ff       	call   c0012692 <VAS::VAS(bool)>
c001d704:	83 c4 10             	add    esp,0x10
c001d707:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d70b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d715:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d71f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d723:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d727:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d72d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d731:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d737:	85 c0                	test   eax,eax
c001d739:	74 42                	je     c001d77d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d73b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d73f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d745:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d74b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d74f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d755:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d759:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d75f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d769:	05 0c 01 00 00       	add    eax,0x10c
c001d76e:	83 ec 08             	sub    esp,0x8
c001d771:	52                   	push   edx
c001d772:	50                   	push   eax
c001d773:	e8 bc 30 fe ff       	call   c0000834 <strcpy>
c001d778:	83 c4 10             	add    esp,0x10
c001d77b:	eb 63                	jmp    c001d7e0 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d77d:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d785:	83 ec 0c             	sub    esp,0xc
c001d788:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d78c:	e8 af 20 ff ff       	call   c000f840 <malloc>
c001d791:	83 c4 10             	add    esp,0x10
c001d794:	89 c3                	mov    ebx,eax
c001d796:	83 ec 08             	sub    esp,0x8
c001d799:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d79d:	53                   	push   ebx
c001d79e:	e8 b9 39 ff ff       	call   c001115c <VgaText::VgaText(char const*)>
c001d7a3:	83 c4 10             	add    esp,0x10
c001d7a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7aa:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d7b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7b4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d7ba:	83 ec 0c             	sub    esp,0xc
c001d7bd:	50                   	push   eax
c001d7be:	e8 8c 2d ff ff       	call   c001054f <addToTerminalCycle(VgaText*)>
c001d7c3:	83 c4 10             	add    esp,0x10
c001d7c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7ca:	05 0c 01 00 00       	add    eax,0x10c
c001d7cf:	83 ec 08             	sub    esp,0x8
c001d7d2:	68 f5 ba 02 c0       	push   0xc002baf5
c001d7d7:	50                   	push   eax
c001d7d8:	e8 57 30 fe ff       	call   c0000834 <strcpy>
c001d7dd:	83 c4 10             	add    esp,0x10
c001d7e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7e4:	83 c0 0c             	add    eax,0xc
c001d7e7:	83 ec 08             	sub    esp,0x8
c001d7ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d7ee:	50                   	push   eax
c001d7ef:	e8 40 30 fe ff       	call   c0000834 <strcpy>
c001d7f4:	83 c4 10             	add    esp,0x10
c001d7f7:	83 ec 08             	sub    esp,0x8
c001d7fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d7fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d802:	e8 1d fc ff ff       	call   c001d424 <Process::addArgs(char**)>
c001d807:	83 c4 10             	add    esp,0x10
c001d80a:	90                   	nop
c001d80b:	83 c4 24             	add    esp,0x24
c001d80e:	5b                   	pop    ebx
c001d80f:	5e                   	pop    esi
c001d810:	c3                   	ret    

c001d811 <disableIRQs()>:
c001d811:	fa                   	cli    
c001d812:	ff 05 4c 12 03 c0    	inc    DWORD PTR ds:0xc003124c
c001d818:	c3                   	ret    

c001d819 <getIRQNestingLevel()>:
c001d819:	a1 4c 12 03 c0       	mov    eax,ds:0xc003124c
c001d81e:	c3                   	ret    

c001d81f <enableIRQs()>:
c001d81f:	a1 4c 12 03 c0       	mov    eax,ds:0xc003124c
c001d824:	48                   	dec    eax
c001d825:	a3 4c 12 03 c0       	mov    ds:0xc003124c,eax
c001d82a:	75 01                	jne    c001d82d <enableIRQs()+0xe>
c001d82c:	fb                   	sti    
c001d82d:	c3                   	ret    

c001d82e <lockScheduler()>:
c001d82e:	eb e1                	jmp    c001d811 <disableIRQs()>

c001d830 <unlockScheduler()>:
c001d830:	eb ed                	jmp    c001d81f <enableIRQs()>

c001d832 <userModeEntryPoint(void*)>:
c001d832:	83 ec 0c             	sub    esp,0xc
c001d835:	e8 f6 ff ff ff       	call   c001d830 <unlockScheduler()>
c001d83a:	fb                   	sti    
c001d83b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d840:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d843:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d849:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d84d:	83 c4 0c             	add    esp,0xc
c001d850:	e9 d5 2a fe ff       	jmp    c000032a <goToUsermode>

c001d855 <lockStuff()>:
c001d855:	e8 b7 ff ff ff       	call   c001d811 <disableIRQs()>
c001d85a:	ff 05 48 12 03 c0    	inc    DWORD PTR ds:0xc0031248
c001d860:	c3                   	ret    

c001d861 <taskStartupFunction>:
c001d861:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d866:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d869:	c3                   	ret    

c001d86a <updateTimeUsed()>:
c001d86a:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c001d86f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d875:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d87c:	74 50                	je     c001d8ce <updateTimeUsed()+0x64>
c001d87e:	57                   	push   edi
c001d87f:	56                   	push   esi
c001d880:	53                   	push   ebx
c001d881:	0f 31                	rdtsc  
c001d883:	89 c1                	mov    ecx,eax
c001d885:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c001d88a:	2b 0d 78 12 03 c0    	sub    ecx,DWORD PTR ds:0xc0031278
c001d890:	89 d3                	mov    ebx,edx
c001d892:	89 0d 80 12 03 c0    	mov    DWORD PTR ds:0xc0031280,ecx
c001d898:	1b 1d 7c 12 03 c0    	sbb    ebx,DWORD PTR ds:0xc003127c
c001d89e:	a3 78 12 03 c0       	mov    ds:0xc0031278,eax
c001d8a3:	89 1d 84 12 03 c0    	mov    DWORD PTR ds:0xc0031284,ebx
c001d8a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8ae:	89 15 8c 12 03 c0    	mov    DWORD PTR ds:0xc003128c,edx
c001d8b4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d8b7:	89 15 7c 12 03 c0    	mov    DWORD PTR ds:0xc003127c,edx
c001d8bd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d8c0:	01 f1                	add    ecx,esi
c001d8c2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d8c5:	11 fb                	adc    ebx,edi
c001d8c7:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d8ca:	5b                   	pop    ebx
c001d8cb:	5e                   	pop    esi
c001d8cc:	5f                   	pop    edi
c001d8cd:	c3                   	ret    
c001d8ce:	c3                   	ret    

c001d8cf <switchToThread(ThreadControlBlock*)>:
c001d8cf:	53                   	push   ebx
c001d8d0:	83 ec 08             	sub    esp,0x8
c001d8d3:	a1 48 12 03 c0       	mov    eax,ds:0xc0031248
c001d8d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8dc:	85 c0                	test   eax,eax
c001d8de:	75 30                	jne    c001d910 <switchToThread(ThreadControlBlock*)+0x41>
c001d8e0:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d8e3:	3c ff                	cmp    al,0xff
c001d8e5:	74 25                	je     c001d90c <switchToThread(ThreadControlBlock*)+0x3d>
c001d8e7:	0f b6 d0             	movzx  edx,al
c001d8ea:	b8 84 03 00 00       	mov    eax,0x384
c001d8ef:	29 d0                	sub    eax,edx
c001d8f1:	c1 e0 10             	shl    eax,0x10
c001d8f4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d8f7:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d8fa:	e8 6b ff ff ff       	call   c001d86a <updateTimeUsed()>
c001d8ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d903:	83 c4 08             	add    esp,0x8
c001d906:	5b                   	pop    ebx
c001d907:	e9 56 2a fe ff       	jmp    c0000362 <switchToThreadASM>
c001d90c:	31 c0                	xor    eax,eax
c001d90e:	eb e7                	jmp    c001d8f7 <switchToThread(ThreadControlBlock*)+0x28>
c001d910:	c7 05 44 12 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031244,0x1
c001d91a:	83 c4 08             	add    esp,0x8
c001d91d:	5b                   	pop    ebx
c001d91e:	c3                   	ret    
c001d91f:	90                   	nop

c001d920 <Semaphore::Semaphore(int)>:
c001d920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d924:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d928:	89 10                	mov    DWORD PTR [eax],edx
c001d92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d92e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d939:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d944:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d94b:	90                   	nop
c001d94c:	c3                   	ret    
c001d94d:	90                   	nop

c001d94e <Mutex::Mutex()>:
c001d94e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d952:	6a 01                	push   0x1
c001d954:	50                   	push   eax
c001d955:	e8 c6 ff ff ff       	call   c001d920 <Semaphore::Semaphore(int)>
c001d95a:	83 c4 08             	add    esp,0x8
c001d95d:	90                   	nop
c001d95e:	c3                   	ret    
c001d95f:	90                   	nop

c001d960 <Process::createThread(void (*)(void*), void*, int)>:
c001d960:	55                   	push   ebp
c001d961:	31 c9                	xor    ecx,ecx
c001d963:	57                   	push   edi
c001d964:	56                   	push   esi
c001d965:	53                   	push   ebx
c001d966:	83 ec 1c             	sub    esp,0x1c
c001d969:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d96d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d974:	89 f2                	mov    edx,esi
c001d976:	0f b7 c2             	movzx  eax,dx
c001d979:	83 e2 01             	and    edx,0x1
c001d97c:	74 14                	je     c001d992 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d97e:	d1 f8                	sar    eax,1
c001d980:	41                   	inc    ecx
c001d981:	89 c2                	mov    edx,eax
c001d983:	83 f9 10             	cmp    ecx,0x10
c001d986:	75 ee                	jne    c001d976 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d988:	83 c4 1c             	add    esp,0x1c
c001d98b:	31 c0                	xor    eax,eax
c001d98d:	5b                   	pop    ebx
c001d98e:	5e                   	pop    esi
c001d98f:	5f                   	pop    edi
c001d990:	5d                   	pop    ebp
c001d991:	c3                   	ret    
c001d992:	83 ec 08             	sub    esp,0x8
c001d995:	b8 01 00 00 00       	mov    eax,0x1
c001d99a:	d3 e0                	shl    eax,cl
c001d99c:	09 c6                	or     esi,eax
c001d99e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d9a4:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d9ab:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d9ae:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d9b1:	01 ce                	add    esi,ecx
c001d9b3:	89 f0                	mov    eax,esi
c001d9b5:	c1 e0 05             	shl    eax,0x5
c001d9b8:	01 c6                	add    esi,eax
c001d9ba:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d9bd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d9c3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d9c9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d9cd:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d9d3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d9d9:	89 ca                	mov    edx,ecx
c001d9db:	f7 da                	neg    edx
c001d9dd:	c1 e2 15             	shl    edx,0x15
c001d9e0:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d9e6:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d9ec:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d9f0:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d9fa:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001da00:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da04:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001da0a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001da14:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001da1e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001da25:	50                   	push   eax
c001da26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001da2a:	68 68 12 03 c0       	push   0xc0031268
c001da2f:	e8 1c ab 00 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da34:	83 c4 10             	add    esp,0x10
c001da37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da3b:	83 c4 1c             	add    esp,0x1c
c001da3e:	5b                   	pop    ebx
c001da3f:	5e                   	pop    esi
c001da40:	5f                   	pop    edi
c001da41:	5d                   	pop    ebp
c001da42:	c3                   	ret    
c001da43:	90                   	nop

c001da44 <Process::createUserThread()>:
c001da44:	83 ec 0c             	sub    esp,0xc
c001da47:	68 80 00 00 00       	push   0x80
c001da4c:	6a 00                	push   0x0
c001da4e:	68 32 d8 01 c0       	push   0xc001d832
c001da53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da57:	e8 04 ff ff ff       	call   c001d960 <Process::createThread(void (*)(void*), void*, int)>
c001da5c:	83 c4 1c             	add    esp,0x1c
c001da5f:	c3                   	ret    

c001da60 <setupMultitasking(void (*)())>:
c001da60:	56                   	push   esi
c001da61:	53                   	push   ebx
c001da62:	53                   	push   ebx
c001da63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da67:	eb 10                	jmp    c001da79 <setupMultitasking(void (*)())+0x19>
c001da69:	83 ec 0c             	sub    esp,0xc
c001da6c:	68 68 12 03 c0       	push   0xc0031268
c001da71:	e8 2c aa 00 00       	call   c00284a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da76:	83 c4 10             	add    esp,0x10
c001da79:	83 ec 0c             	sub    esp,0xc
c001da7c:	68 68 12 03 c0       	push   0xc0031268
c001da81:	e8 00 aa 00 00       	call   c0028486 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da86:	83 c4 10             	add    esp,0x10
c001da89:	84 c0                	test   al,al
c001da8b:	74 dc                	je     c001da69 <setupMultitasking(void (*)())+0x9>
c001da8d:	83 ec 0c             	sub    esp,0xc
c001da90:	68 3f 07 00 00       	push   0x73f
c001da95:	e8 a6 1d ff ff       	call   c000f840 <malloc>
c001da9a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001daa1:	89 c3                	mov    ebx,eax
c001daa3:	6a 00                	push   0x0
c001daa5:	68 f9 ba 02 c0       	push   0xc002baf9
c001daaa:	6a 01                	push   0x1
c001daac:	50                   	push   eax
c001daad:	e8 b0 fb ff ff       	call   c001d662 <Process::Process(bool, char const*, Process*, char**)>
c001dab2:	83 c4 18             	add    esp,0x18
c001dab5:	89 1d 74 12 03 c0    	mov    DWORD PTR ds:0xc0031274,ebx
c001dabb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dac1:	68 18 bc 02 c0       	push   0xc002bc18
c001dac6:	e8 44 50 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001dacb:	58                   	pop    eax
c001dacc:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dad2:	e8 fa 31 ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c001dad7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dadf:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dae5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dae8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001daf2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001daf8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dafe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001db08:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001db12:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001db1c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001db22:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001db28:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001db32:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001db38:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001db42:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001db48:	5a                   	pop    edx
c001db49:	59                   	pop    ecx
c001db4a:	68 f5 ba 02 c0       	push   0xc002baf5
c001db4f:	50                   	push   eax
c001db50:	e8 df 2c fe ff       	call   c0000834 <strcpy>
c001db55:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001db5c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001db60:	83 c4 14             	add    esp,0x14
c001db63:	5b                   	pop    ebx
c001db64:	5e                   	pop    esi
c001db65:	e9 ea 27 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001db6a <schedule()>:
c001db6a:	a1 48 12 03 c0       	mov    eax,ds:0xc0031248
c001db6f:	85 c0                	test   eax,eax
c001db71:	74 0b                	je     c001db7e <schedule()+0x14>
c001db73:	c7 05 44 12 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031244,0x1
c001db7d:	c3                   	ret    
c001db7e:	53                   	push   ebx
c001db7f:	83 ec 14             	sub    esp,0x14
c001db82:	68 68 12 03 c0       	push   0xc0031268
c001db87:	e8 fa a8 00 00       	call   c0028486 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001db8c:	83 c4 10             	add    esp,0x10
c001db8f:	84 c0                	test   al,al
c001db91:	75 38                	jne    c001dbcb <schedule()+0x61>
c001db93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db98:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001db9b:	4a                   	dec    edx
c001db9c:	74 32                	je     c001dbd0 <schedule()+0x66>
c001db9e:	83 ec 0c             	sub    esp,0xc
c001dba1:	68 68 12 03 c0       	push   0xc0031268
c001dba6:	e8 d3 a8 00 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dbab:	c7 04 24 68 12 03 c0 	mov    DWORD PTR [esp],0xc0031268
c001dbb2:	89 c3                	mov    ebx,eax
c001dbb4:	e8 e9 a8 00 00       	call   c00284a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dbb9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dbc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbc3:	e8 07 fd ff ff       	call   c001d8cf <switchToThread(ThreadControlBlock*)>
c001dbc8:	83 c4 10             	add    esp,0x10
c001dbcb:	83 c4 08             	add    esp,0x8
c001dbce:	5b                   	pop    ebx
c001dbcf:	c3                   	ret    
c001dbd0:	83 ec 08             	sub    esp,0x8
c001dbd3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dbda:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dbe0:	68 68 12 03 c0       	push   0xc0031268
c001dbe5:	e8 66 a9 00 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dbea:	83 c4 10             	add    esp,0x10
c001dbed:	eb af                	jmp    c001db9e <schedule()+0x34>

c001dbef <unlockStuff()>:
c001dbef:	a1 48 12 03 c0       	mov    eax,ds:0xc0031248
c001dbf4:	48                   	dec    eax
c001dbf5:	a3 48 12 03 c0       	mov    ds:0xc0031248,eax
c001dbfa:	75 09                	jne    c001dc05 <unlockStuff()+0x16>
c001dbfc:	a1 44 12 03 c0       	mov    eax,ds:0xc0031244
c001dc01:	85 c0                	test   eax,eax
c001dc03:	75 05                	jne    c001dc0a <unlockStuff()+0x1b>
c001dc05:	e9 15 fc ff ff       	jmp    c001d81f <enableIRQs()>
c001dc0a:	83 ec 0c             	sub    esp,0xc
c001dc0d:	c7 05 44 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031244,0x0
c001dc17:	e8 4e ff ff ff       	call   c001db6a <schedule()>
c001dc1c:	83 c4 0c             	add    esp,0xc
c001dc1f:	e9 fb fb ff ff       	jmp    c001d81f <enableIRQs()>

c001dc24 <Semaphore::tryAcquire()>:
c001dc24:	83 ec 0c             	sub    esp,0xc
c001dc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2b:	e8 25 fc ff ff       	call   c001d855 <lockStuff()>
c001dc30:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dc33:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dc35:	7c 0b                	jl     c001dc42 <Semaphore::tryAcquire()+0x1e>
c001dc37:	e8 b3 ff ff ff       	call   c001dbef <unlockStuff()>
c001dc3c:	31 c0                	xor    eax,eax
c001dc3e:	83 c4 0c             	add    esp,0xc
c001dc41:	c3                   	ret    
c001dc42:	42                   	inc    edx
c001dc43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dc46:	e8 a4 ff ff ff       	call   c001dbef <unlockStuff()>
c001dc4b:	b0 01                	mov    al,0x1
c001dc4d:	83 c4 0c             	add    esp,0xc
c001dc50:	c3                   	ret    
c001dc51:	90                   	nop

c001dc52 <Semaphore::assertLocked(char const*)>:
c001dc52:	83 ec 0c             	sub    esp,0xc
c001dc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc5d:	e8 f3 fb ff ff       	call   c001d855 <lockStuff()>
c001dc62:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc64:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001dc67:	7c 05                	jl     c001dc6e <Semaphore::assertLocked(char const*)+0x1c>
c001dc69:	83 c4 0c             	add    esp,0xc
c001dc6c:	eb 81                	jmp    c001dbef <unlockStuff()>
c001dc6e:	83 ec 0c             	sub    esp,0xc
c001dc71:	52                   	push   edx
c001dc72:	e8 28 c5 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001dc77:	83 c4 10             	add    esp,0x10
c001dc7a:	83 c4 0c             	add    esp,0xc
c001dc7d:	e9 6d ff ff ff       	jmp    c001dbef <unlockStuff()>

c001dc82 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dc82:	83 ec 0c             	sub    esp,0xc
c001dc85:	e8 8f fb ff ff       	call   c001d819 <getIRQNestingLevel()>
c001dc8a:	83 ec 08             	sub    esp,0x8
c001dc8d:	50                   	push   eax
c001dc8e:	68 4c bc 02 c0       	push   0xc002bc4c
c001dc93:	e8 77 4e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001dc98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dc9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dca1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dca4:	e8 c1 fe ff ff       	call   c001db6a <schedule()>
c001dca9:	e8 82 fb ff ff       	call   c001d830 <unlockScheduler()>
c001dcae:	e8 66 fb ff ff       	call   c001d819 <getIRQNestingLevel()>
c001dcb3:	5a                   	pop    edx
c001dcb4:	59                   	pop    ecx
c001dcb5:	50                   	push   eax
c001dcb6:	68 80 bc 02 c0       	push   0xc002bc80
c001dcbb:	e8 4f 4e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001dcc0:	83 c4 1c             	add    esp,0x1c
c001dcc3:	c3                   	ret    

c001dcc4 <blockTask(TaskState)>:
c001dcc4:	83 ec 0c             	sub    esp,0xc
c001dcc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dccb:	e8 5e fb ff ff       	call   c001d82e <lockScheduler()>
c001dcd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcd5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dcd8:	e8 8d fe ff ff       	call   c001db6a <schedule()>
c001dcdd:	83 c4 0c             	add    esp,0xc
c001dce0:	e9 4b fb ff ff       	jmp    c001d830 <unlockScheduler()>

c001dce5 <waitTask(int, int*, int)>:
c001dce5:	83 ec 18             	sub    esp,0x18
c001dce8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dced:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dcf1:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dcf4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dcf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcfd:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dd00:	6a 07                	push   0x7
c001dd02:	e8 bd ff ff ff       	call   c001dcc4 <blockTask(TaskState)>
c001dd07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd0c:	83 c4 10             	add    esp,0x10
c001dd0f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dd12:	85 d2                	test   edx,edx
c001dd14:	74 0a                	je     c001dd20 <waitTask(int, int*, int)+0x3b>
c001dd16:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dd19:	89 02                	mov    DWORD PTR [edx],eax
c001dd1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd20:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dd23:	83 c4 0c             	add    esp,0xc
c001dd26:	c3                   	ret    

c001dd27 <nanoSleepUntil(unsigned long long)>:
c001dd27:	83 ec 0c             	sub    esp,0xc
c001dd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd32:	3b 05 90 e3 02 c0    	cmp    eax,DWORD PTR ds:0xc002e390
c001dd38:	89 d1                	mov    ecx,edx
c001dd3a:	1b 0d 94 e3 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e394
c001dd40:	73 04                	jae    c001dd46 <nanoSleepUntil(unsigned long long)+0x1f>
c001dd42:	83 c4 0c             	add    esp,0xc
c001dd45:	c3                   	ret    
c001dd46:	e8 0a fb ff ff       	call   c001d855 <lockStuff()>
c001dd4b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd51:	83 ec 08             	sub    esp,0x8
c001dd54:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dd57:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dd5a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dd60:	68 5c 12 03 c0       	push   0xc003125c
c001dd65:	e8 e6 a7 00 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd6a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dd71:	e8 4e ff ff ff       	call   c001dcc4 <blockTask(TaskState)>
c001dd76:	83 c4 1c             	add    esp,0x1c
c001dd79:	e9 71 fe ff ff       	jmp    c001dbef <unlockStuff()>

c001dd7e <nanoSleep(unsigned long long)>:
c001dd7e:	a1 90 e3 02 c0       	mov    eax,ds:0xc002e390
c001dd83:	8b 15 94 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e394
c001dd89:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dd8d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dd91:	eb 94                	jmp    c001dd27 <nanoSleepUntil(unsigned long long)>

c001dd93 <sleep(unsigned long long)>:
c001dd93:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dd9b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dda0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dda4:	01 ca                	add    edx,ecx
c001dda6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ddaa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ddae:	eb ce                	jmp    c001dd7e <nanoSleep(unsigned long long)>

c001ddb0 <Semaphore::acquire()>:
c001ddb0:	83 ec 0c             	sub    esp,0xc
c001ddb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb7:	e8 99 fa ff ff       	call   c001d855 <lockStuff()>
c001ddbc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ddbf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001ddc1:	7d 0c                	jge    c001ddcf <Semaphore::acquire()+0x1f>
c001ddc3:	42                   	inc    edx
c001ddc4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ddc7:	83 c4 0c             	add    esp,0xc
c001ddca:	e9 20 fe ff ff       	jmp    c001dbef <unlockStuff()>
c001ddcf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ddd5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001dddc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dddf:	85 d2                	test   edx,edx
c001dde1:	74 2a                	je     c001de0d <Semaphore::acquire()+0x5d>
c001dde3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001dde6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ddec:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001ddef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ddf5:	83 ec 0c             	sub    esp,0xc
c001ddf8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ddfb:	6a 05                	push   0x5
c001ddfd:	e8 c2 fe ff ff       	call   c001dcc4 <blockTask(TaskState)>
c001de02:	83 c4 10             	add    esp,0x10
c001de05:	83 c4 0c             	add    esp,0xc
c001de08:	e9 e2 fd ff ff       	jmp    c001dbef <unlockStuff()>
c001de0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001de13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001de16:	eb d7                	jmp    c001ddef <Semaphore::acquire()+0x3f>

c001de18 <taskReturned>:
c001de18:	83 ec 18             	sub    esp,0x18
c001de1b:	68 b4 bc 02 c0       	push   0xc002bcb4
c001de20:	e8 7a c3 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	83 ec 0c             	sub    esp,0xc
c001de2b:	6a 02                	push   0x2
c001de2d:	e8 92 fe ff ff       	call   c001dcc4 <blockTask(TaskState)>
c001de32:	e8 f7 f9 ff ff       	call   c001d82e <lockScheduler()>
c001de37:	e8 2e fd ff ff       	call   c001db6a <schedule()>
c001de3c:	e8 ef f9 ff ff       	call   c001d830 <unlockScheduler()>
c001de41:	83 c4 10             	add    esp,0x10
c001de44:	eb e2                	jmp    c001de28 <taskReturned+0x10>

c001de46 <unblockTask(ThreadControlBlock*)>:
c001de46:	53                   	push   ebx
c001de47:	83 ec 08             	sub    esp,0x8
c001de4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de4e:	e8 db f9 ff ff       	call   c001d82e <lockScheduler()>
c001de53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de56:	85 c0                	test   eax,eax
c001de58:	74 5c                	je     c001deb6 <unblockTask(ThreadControlBlock*)+0x70>
c001de5a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de5d:	48                   	dec    eax
c001de5e:	74 31                	je     c001de91 <unblockTask(ThreadControlBlock*)+0x4b>
c001de60:	83 ec 0c             	sub    esp,0xc
c001de63:	68 68 12 03 c0       	push   0xc0031268
c001de68:	e8 11 a6 00 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de6d:	83 c4 10             	add    esp,0x10
c001de70:	85 c0                	test   eax,eax
c001de72:	75 17                	jne    c001de8b <unblockTask(ThreadControlBlock*)+0x45>
c001de74:	eb 65                	jmp    c001dedb <unblockTask(ThreadControlBlock*)+0x95>
c001de76:	83 ec 08             	sub    esp,0x8
c001de79:	50                   	push   eax
c001de7a:	68 68 12 03 c0       	push   0xc0031268
c001de7f:	e8 d4 a8 00 00       	call   c0028758 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	85 c0                	test   eax,eax
c001de89:	74 50                	je     c001dedb <unblockTask(ThreadControlBlock*)+0x95>
c001de8b:	39 c3                	cmp    ebx,eax
c001de8d:	75 e7                	jne    c001de76 <unblockTask(ThreadControlBlock*)+0x30>
c001de8f:	eb 1c                	jmp    c001dead <unblockTask(ThreadControlBlock*)+0x67>
c001de91:	83 ec 0c             	sub    esp,0xc
c001de94:	68 a4 bd 02 c0       	push   0xc002bda4
c001de99:	e8 71 4c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001de9e:	c7 04 24 30 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd30
c001dea5:	e8 65 4c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001deaa:	83 c4 10             	add    esp,0x10
c001dead:	83 c4 08             	add    esp,0x8
c001deb0:	5b                   	pop    ebx
c001deb1:	e9 7a f9 ff ff       	jmp    c001d830 <unlockScheduler()>
c001deb6:	83 ec 0c             	sub    esp,0xc
c001deb9:	68 e8 bc 02 c0       	push   0xc002bce8
c001debe:	e8 4c 4c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001dec3:	c7 04 24 30 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd30
c001deca:	e8 40 4c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001decf:	83 c4 10             	add    esp,0x10
c001ded2:	83 c4 08             	add    esp,0x8
c001ded5:	5b                   	pop    ebx
c001ded6:	e9 55 f9 ff ff       	jmp    c001d830 <unlockScheduler()>
c001dedb:	83 ec 08             	sub    esp,0x8
c001dede:	53                   	push   ebx
c001dedf:	68 68 12 03 c0       	push   0xc0031268
c001dee4:	e8 67 a6 00 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dee9:	83 c4 10             	add    esp,0x10
c001deec:	83 c4 08             	add    esp,0x8
c001deef:	5b                   	pop    ebx
c001def0:	e9 3b f9 ff ff       	jmp    c001d830 <unlockScheduler()>

c001def5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001def5:	55                   	push   ebp
c001def6:	57                   	push   edi
c001def7:	56                   	push   esi
c001def8:	53                   	push   ebx
c001def9:	83 ec 1c             	sub    esp,0x1c
c001defc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df00:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df03:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001df09:	85 ff                	test   edi,edi
c001df0b:	7e 20                	jle    c001df2d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001df0d:	31 f6                	xor    esi,esi
c001df0f:	83 ec 0c             	sub    esp,0xc
c001df12:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001df19:	46                   	inc    esi
c001df1a:	e8 31 19 ff ff       	call   c000f850 <free>
c001df1f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df22:	83 c4 10             	add    esp,0x10
c001df25:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df2b:	7f e2                	jg     c001df0f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df2d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df37:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df3c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df3f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df42:	d3 c0                	rol    eax,cl
c001df44:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df4b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df4e:	89 f7                	mov    edi,esi
c001df50:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df58:	0f 85 74 01 00 00    	jne    c001e0d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001df5e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df64:	85 ed                	test   ebp,ebp
c001df66:	74 1b                	je     c001df83 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df68:	83 ec 0c             	sub    esp,0xc
c001df6b:	55                   	push   ebp
c001df6c:	e8 9b bf ff ff       	call   c0019f0c <EnvVarContainer::~EnvVarContainer()>
c001df71:	59                   	pop    ecx
c001df72:	5e                   	pop    esi
c001df73:	6a 0c                	push   0xc
c001df75:	55                   	push   ebp
c001df76:	e8 b4 4a ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c001df7b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df7e:	83 c4 10             	add    esp,0x10
c001df81:	89 f7                	mov    edi,esi
c001df83:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df89:	85 c0                	test   eax,eax
c001df8b:	0f 84 aa 00 00 00    	je     c001e03b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df91:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df94:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df98:	31 c9                	xor    ecx,ecx
c001df9a:	eb 10                	jmp    c001dfac <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001df9c:	41                   	inc    ecx
c001df9d:	83 f9 10             	cmp    ecx,0x10
c001dfa0:	0f 84 95 00 00 00    	je     c001e03b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dfa6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfac:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dfb3:	d3 fa                	sar    edx,cl
c001dfb5:	83 e2 01             	and    edx,0x1
c001dfb8:	74 e2                	je     c001df9c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfba:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfbd:	01 ca                	add    edx,ecx
c001dfbf:	89 d5                	mov    ebp,edx
c001dfc1:	c1 e5 05             	shl    ebp,0x5
c001dfc4:	01 ea                	add    edx,ebp
c001dfc6:	01 d0                	add    eax,edx
c001dfc8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dfce:	83 fd 07             	cmp    ebp,0x7
c001dfd1:	75 c9                	jne    c001df9c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfd3:	05 40 02 00 00       	add    eax,0x240
c001dfd8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dfdb:	83 fd ff             	cmp    ebp,0xffffffff
c001dfde:	0f 8c 08 01 00 00    	jl     c001e0ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001dfe4:	0f 84 b9 01 00 00    	je     c001e1a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001dfea:	85 ed                	test   ebp,ebp
c001dfec:	0f 84 a0 01 00 00    	je     c001e192 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001dff2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dff4:	75 a6                	jne    c001df9c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dff6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dffc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e000:	01 d0                	add    eax,edx
c001e002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e006:	83 ec 0c             	sub    esp,0xc
c001e009:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e00f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e012:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e018:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e01f:	50                   	push   eax
c001e020:	e8 21 fe ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e025:	83 c4 10             	add    esp,0x10
c001e028:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e02b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e02f:	89 f7                	mov    edi,esi
c001e031:	41                   	inc    ecx
c001e032:	83 f9 10             	cmp    ecx,0x10
c001e035:	0f 85 6b ff ff ff    	jne    c001dfa6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e03b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e041:	85 c0                	test   eax,eax
c001e043:	74 5d                	je     c001e0a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e045:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e04b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e051:	74 4f                	je     c001e0a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e053:	83 ec 0c             	sub    esp,0xc
c001e056:	68 68 12 03 c0       	push   0xc0031268
c001e05b:	e8 1e a4 00 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e060:	c7 04 24 68 12 03 c0 	mov    DWORD PTR [esp],0xc0031268
c001e067:	89 c7                	mov    edi,eax
c001e069:	e8 18 a4 00 00       	call   c0028486 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e06e:	83 c4 10             	add    esp,0x10
c001e071:	84 c0                	test   al,al
c001e073:	0f 84 e4 00 00 00    	je     c001e15d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e079:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e07c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e082:	85 d2                	test   edx,edx
c001e084:	74 0f                	je     c001e095 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e086:	83 ec 0c             	sub    esp,0xc
c001e089:	8b 02                	mov    eax,DWORD PTR [edx]
c001e08b:	52                   	push   edx
c001e08c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e08f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e092:	83 c4 10             	add    esp,0x10
c001e095:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e09f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e0a2:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e0a8:	85 db                	test   ebx,ebx
c001e0aa:	74 16                	je     c001e0c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e0ac:	83 ec 0c             	sub    esp,0xc
c001e0af:	53                   	push   ebx
c001e0b0:	e8 c9 3f ff ff       	call   c001207e <VAS::~VAS()>
c001e0b5:	58                   	pop    eax
c001e0b6:	5a                   	pop    edx
c001e0b7:	6a 10                	push   0x10
c001e0b9:	53                   	push   ebx
c001e0ba:	e8 70 49 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c001e0bf:	83 c4 10             	add    esp,0x10
c001e0c2:	83 ec 0c             	sub    esp,0xc
c001e0c5:	68 00 bb 02 c0       	push   0xc002bb00
c001e0ca:	e8 40 4a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e0cf:	83 c4 10             	add    esp,0x10
c001e0d2:	83 ec 08             	sub    esp,0x8
c001e0d5:	68 3f 07 00 00       	push   0x73f
c001e0da:	68 0e bb 02 c0       	push   0xc002bb0e
c001e0df:	e8 2b 4a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e0e4:	83 c4 2c             	add    esp,0x2c
c001e0e7:	5b                   	pop    ebx
c001e0e8:	5e                   	pop    esi
c001e0e9:	5f                   	pop    edi
c001e0ea:	5d                   	pop    ebp
c001e0eb:	c3                   	ret    
c001e0ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0f0:	83 ec 0c             	sub    esp,0xc
c001e0f3:	68 e8 bd 02 c0       	push   0xc002bde8
c001e0f8:	e8 a2 c0 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001e0fd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e100:	83 c4 10             	add    esp,0x10
c001e103:	89 f7                	mov    edi,esi
c001e105:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e109:	e9 8e fe ff ff       	jmp    c001df9c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e10e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e114:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e11a:	75 1c                	jne    c001e138 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e11c:	83 ec 0c             	sub    esp,0xc
c001e11f:	68 50 be 02 c0       	push   0xc002be50
c001e124:	e8 e6 49 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e129:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e130:	e8 8f fb ff ff       	call   c001dcc4 <blockTask(TaskState)>
c001e135:	83 c4 10             	add    esp,0x10
c001e138:	83 ec 08             	sub    esp,0x8
c001e13b:	56                   	push   esi
c001e13c:	68 68 12 03 c0       	push   0xc0031268
c001e141:	e8 0a a4 00 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e146:	c7 04 24 68 12 03 c0 	mov    DWORD PTR [esp],0xc0031268
c001e14d:	e8 2c a3 00 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e152:	83 c4 10             	add    esp,0x10
c001e155:	39 f8                	cmp    eax,edi
c001e157:	0f 84 1c ff ff ff    	je     c001e079 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e15d:	83 ec 0c             	sub    esp,0xc
c001e160:	68 68 12 03 c0       	push   0xc0031268
c001e165:	e8 14 a3 00 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e16a:	c7 04 24 68 12 03 c0 	mov    DWORD PTR [esp],0xc0031268
c001e171:	89 c6                	mov    esi,eax
c001e173:	e8 2a a3 00 00       	call   c00284a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e178:	83 c4 10             	add    esp,0x10
c001e17b:	39 f3                	cmp    ebx,esi
c001e17d:	74 b9                	je     c001e138 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e17f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e182:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e185:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e18b:	75 ab                	jne    c001e138 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e18d:	e9 7c ff ff ff       	jmp    c001e10e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e192:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e196:	83 ec 0c             	sub    esp,0xc
c001e199:	68 1c be 02 c0       	push   0xc002be1c
c001e19e:	e9 55 ff ff ff       	jmp    c001e0f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e1a3:	8b 36                	mov    esi,DWORD PTR [esi]
c001e1a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e1a9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e1ac:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1af:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e1b5:	01 d7                	add    edi,edx
c001e1b7:	89 f8                	mov    eax,edi
c001e1b9:	e9 44 fe ff ff       	jmp    c001e002 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e1be <cleanerTaskFunction(void*)>:
c001e1be:	53                   	push   ebx
c001e1bf:	83 ec 08             	sub    esp,0x8
c001e1c2:	e8 69 f6 ff ff       	call   c001d830 <unlockScheduler()>
c001e1c7:	e8 62 f6 ff ff       	call   c001d82e <lockScheduler()>
c001e1cc:	80 3d 2c 12 03 c0 00 	cmp    BYTE PTR ds:0xc003122c,0x0
c001e1d3:	0f 85 8e 00 00 00    	jne    c001e267 <cleanerTaskFunction(void*)+0xa9>
c001e1d9:	83 ec 0c             	sub    esp,0xc
c001e1dc:	6a 02                	push   0x2
c001e1de:	e8 9f fa ff ff       	call   c001dc82 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e1e3:	83 c4 10             	add    esp,0x10
c001e1e6:	c6 05 2c 12 03 c0 00 	mov    BYTE PTR ds:0xc003122c,0x0
c001e1ed:	e8 63 f6 ff ff       	call   c001d855 <lockStuff()>
c001e1f2:	e8 37 f6 ff ff       	call   c001d82e <lockScheduler()>
c001e1f7:	83 ec 0c             	sub    esp,0xc
c001e1fa:	68 50 12 03 c0       	push   0xc0031250
c001e1ff:	e8 82 a2 00 00       	call   c0028486 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e204:	83 c4 10             	add    esp,0x10
c001e207:	84 c0                	test   al,al
c001e209:	75 40                	jne    c001e24b <cleanerTaskFunction(void*)+0x8d>
c001e20b:	83 ec 0c             	sub    esp,0xc
c001e20e:	68 50 12 03 c0       	push   0xc0031250
c001e213:	e8 66 a2 00 00       	call   c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e218:	c7 04 24 50 12 03 c0 	mov    DWORD PTR [esp],0xc0031250
c001e21f:	89 c3                	mov    ebx,eax
c001e221:	e8 7c a2 00 00       	call   c00284a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e226:	c7 04 24 24 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb24
c001e22d:	e8 dd 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e232:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e235:	e8 bb fc ff ff       	call   c001def5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e23a:	c7 04 24 3d bb 02 c0 	mov    DWORD PTR [esp],0xc002bb3d
c001e241:	e8 c9 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e246:	83 c4 10             	add    esp,0x10
c001e249:	eb ac                	jmp    c001e1f7 <cleanerTaskFunction(void*)+0x39>
c001e24b:	e8 e0 f5 ff ff       	call   c001d830 <unlockScheduler()>
c001e250:	e8 9a f9 ff ff       	call   c001dbef <unlockStuff()>
c001e255:	e8 d4 f5 ff ff       	call   c001d82e <lockScheduler()>
c001e25a:	80 3d 2c 12 03 c0 00 	cmp    BYTE PTR ds:0xc003122c,0x0
c001e261:	0f 84 72 ff ff ff    	je     c001e1d9 <cleanerTaskFunction(void*)+0x1b>
c001e267:	e8 c4 f5 ff ff       	call   c001d830 <unlockScheduler()>
c001e26c:	e9 75 ff ff ff       	jmp    c001e1e6 <cleanerTaskFunction(void*)+0x28>

c001e271 <terminateTask(int)>:
c001e271:	83 ec 14             	sub    esp,0x14
c001e274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e279:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e27c:	83 c0 0c             	add    eax,0xc
c001e27f:	50                   	push   eax
c001e280:	68 78 be 02 c0       	push   0xc002be78
c001e285:	e8 85 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e28a:	e8 c6 f5 ff ff       	call   c001d855 <lockStuff()>
c001e28f:	e8 9a f5 ff ff       	call   c001d82e <lockScheduler()>
c001e294:	c7 04 24 50 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb50
c001e29b:	e8 6f 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e2a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e2ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e2b4:	5a                   	pop    edx
c001e2b5:	59                   	pop    ecx
c001e2b6:	50                   	push   eax
c001e2b7:	68 50 12 03 c0       	push   0xc0031250
c001e2bc:	e8 8f a2 00 00       	call   c0028550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e2cd:	c7 04 24 6a bb 02 c0 	mov    DWORD PTR [esp],0xc002bb6a
c001e2d4:	e8 36 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e2d9:	83 c4 10             	add    esp,0x10
c001e2dc:	a1 28 12 03 c0       	mov    eax,ds:0xc0031228
c001e2e1:	85 c0                	test   eax,eax
c001e2e3:	74 5a                	je     c001e33f <terminateTask(int)+0xce>
c001e2e5:	83 ec 0c             	sub    esp,0xc
c001e2e8:	68 84 bb 02 c0       	push   0xc002bb84
c001e2ed:	e8 1d 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e2f2:	58                   	pop    eax
c001e2f3:	c6 05 2c 12 03 c0 01 	mov    BYTE PTR ds:0xc003122c,0x1
c001e2fa:	ff 35 28 12 03 c0    	push   DWORD PTR ds:0xc0031228
c001e300:	e8 41 fb ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e305:	c7 04 24 9e bb 02 c0 	mov    DWORD PTR [esp],0xc002bb9e
c001e30c:	e8 fe 47 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e311:	83 c4 10             	add    esp,0x10
c001e314:	e8 17 f5 ff ff       	call   c001d830 <unlockScheduler()>
c001e319:	e8 d1 f8 ff ff       	call   c001dbef <unlockStuff()>
c001e31e:	83 ec 0c             	sub    esp,0xc
c001e321:	68 d6 bb 02 c0       	push   0xc002bbd6
c001e326:	e8 e4 47 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e32b:	83 c4 10             	add    esp,0x10
c001e32e:	e8 fb f4 ff ff       	call   c001d82e <lockScheduler()>
c001e333:	e8 32 f8 ff ff       	call   c001db6a <schedule()>
c001e338:	e8 f3 f4 ff ff       	call   c001d830 <unlockScheduler()>
c001e33d:	eb ef                	jmp    c001e32e <terminateTask(int)+0xbd>
c001e33f:	83 ec 0c             	sub    esp,0xc
c001e342:	68 b8 bb 02 c0       	push   0xc002bbb8
c001e347:	e8 c3 47 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e34c:	83 c4 10             	add    esp,0x10
c001e34f:	eb c3                	jmp    c001e314 <terminateTask(int)+0xa3>

c001e351 <Thr::terminateFromIRQ(int)>:
c001e351:	83 ec 18             	sub    esp,0x18
c001e354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e358:	e8 14 ff ff ff       	call   c001e271 <terminateTask(int)>
c001e35d:	90                   	nop

c001e35e <Semaphore::release()>:
c001e35e:	83 ec 0c             	sub    esp,0xc
c001e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e365:	e8 eb f4 ff ff       	call   c001d855 <lockStuff()>
c001e36a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e36d:	85 d2                	test   edx,edx
c001e36f:	74 1a                	je     c001e38b <Semaphore::release()+0x2d>
c001e371:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e374:	83 ec 0c             	sub    esp,0xc
c001e377:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e37a:	52                   	push   edx
c001e37b:	e8 c6 fa ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e380:	83 c4 10             	add    esp,0x10
c001e383:	83 c4 0c             	add    esp,0xc
c001e386:	e9 64 f8 ff ff       	jmp    c001dbef <unlockStuff()>
c001e38b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e38e:	83 c4 0c             	add    esp,0xc
c001e391:	e9 59 f8 ff ff       	jmp    c001dbef <unlockStuff()>

c001e396 <__static_initialization_and_destruction_0(int, int)>:
c001e396:	83 ec 0c             	sub    esp,0xc
c001e399:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e39e:	0f 85 88 00 00 00    	jne    c001e42c <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3a4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e3ac:	75 7e                	jne    c001e42c <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3ae:	83 ec 0c             	sub    esp,0xc
c001e3b1:	68 68 12 03 c0       	push   0xc0031268
c001e3b6:	e8 45 a3 00 00       	call   c0028700 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3bb:	83 c4 10             	add    esp,0x10
c001e3be:	83 ec 04             	sub    esp,0x4
c001e3c1:	68 30 cc 02 c0       	push   0xc002cc30
c001e3c6:	68 68 12 03 c0       	push   0xc0031268
c001e3cb:	68 c0 86 02 c0       	push   0xc00286c0
c001e3d0:	e8 d4 45 ff ff       	call   c00129a9 <__cxa_atexit>
c001e3d5:	83 c4 10             	add    esp,0x10
c001e3d8:	83 ec 0c             	sub    esp,0xc
c001e3db:	68 5c 12 03 c0       	push   0xc003125c
c001e3e0:	e8 1b a3 00 00       	call   c0028700 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3e5:	83 c4 10             	add    esp,0x10
c001e3e8:	83 ec 04             	sub    esp,0x4
c001e3eb:	68 30 cc 02 c0       	push   0xc002cc30
c001e3f0:	68 5c 12 03 c0       	push   0xc003125c
c001e3f5:	68 c0 86 02 c0       	push   0xc00286c0
c001e3fa:	e8 aa 45 ff ff       	call   c00129a9 <__cxa_atexit>
c001e3ff:	83 c4 10             	add    esp,0x10
c001e402:	83 ec 0c             	sub    esp,0xc
c001e405:	68 50 12 03 c0       	push   0xc0031250
c001e40a:	e8 f1 a2 00 00       	call   c0028700 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e40f:	83 c4 10             	add    esp,0x10
c001e412:	83 ec 04             	sub    esp,0x4
c001e415:	68 30 cc 02 c0       	push   0xc002cc30
c001e41a:	68 50 12 03 c0       	push   0xc0031250
c001e41f:	68 c0 86 02 c0       	push   0xc00286c0
c001e424:	e8 80 45 ff ff       	call   c00129a9 <__cxa_atexit>
c001e429:	83 c4 10             	add    esp,0x10
c001e42c:	90                   	nop
c001e42d:	83 c4 0c             	add    esp,0xc
c001e430:	c3                   	ret    

c001e431 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e431:	83 ec 0c             	sub    esp,0xc
c001e434:	83 ec 08             	sub    esp,0x8
c001e437:	68 ff ff 00 00       	push   0xffff
c001e43c:	6a 01                	push   0x1
c001e43e:	e8 53 ff ff ff       	call   c001e396 <__static_initialization_and_destruction_0(int, int)>
c001e443:	83 c4 10             	add    esp,0x10
c001e446:	83 c4 0c             	add    esp,0xc
c001e449:	c3                   	ret    

c001e44a <Vm::inbv(unsigned short)>:
c001e44a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e44e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e453:	75 06                	jne    c001e45b <Vm::inbv(unsigned short)+0x11>
c001e455:	a0 ac 12 03 c0       	mov    al,ds:0xc00312ac
c001e45a:	c3                   	ret    
c001e45b:	ec                   	in     al,dx
c001e45c:	c3                   	ret    

c001e45d <Vm::outbv(unsigned short, unsigned char)>:
c001e45d:	53                   	push   ebx
c001e45e:	83 ec 08             	sub    esp,0x8
c001e461:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e465:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e469:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e46e:	75 38                	jne    c001e4a8 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e470:	0f b6 c3             	movzx  eax,bl
c001e473:	51                   	push   ecx
c001e474:	51                   	push   ecx
c001e475:	50                   	push   eax
c001e476:	68 97 be 02 c0       	push   0xc002be97
c001e47b:	e8 8f 46 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e480:	8b 15 ac 12 03 c0    	mov    edx,DWORD PTR ds:0xc00312ac
c001e486:	83 c4 10             	add    esp,0x10
c001e489:	8d 42 01             	lea    eax,[edx+0x1]
c001e48c:	88 9a c0 12 03 c0    	mov    BYTE PTR [edx-0x3ffced40],bl
c001e492:	a3 ac 12 03 c0       	mov    ds:0xc00312ac,eax
c001e497:	83 f8 20             	cmp    eax,0x20
c001e49a:	75 0f                	jne    c001e4ab <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e49c:	c7 05 ac 12 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00312ac,0x1f
c001e4a6:	eb 03                	jmp    c001e4ab <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e4a8:	88 d8                	mov    al,bl
c001e4aa:	ee                   	out    dx,al
c001e4ab:	83 c4 08             	add    esp,0x8
c001e4ae:	5b                   	pop    ebx
c001e4af:	c3                   	ret    

c001e4b0 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e4b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4ba:	c1 e0 04             	shl    eax,0x4
c001e4bd:	01 d0                	add    eax,edx
c001e4bf:	c3                   	ret    

c001e4c0 <Vm::getSegment(unsigned int)>:
c001e4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4c4:	c1 e8 10             	shr    eax,0x10
c001e4c7:	c3                   	ret    

c001e4c8 <Vm::getOffset(unsigned int)>:
c001e4c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4cc:	c3                   	ret    

c001e4cd <Vm::mainloop2()>:
c001e4cd:	83 ec 0c             	sub    esp,0xc
c001e4d0:	e8 59 f3 ff ff       	call   c001d82e <lockScheduler()>
c001e4d5:	83 ec 0c             	sub    esp,0xc
c001e4d8:	c6 05 a5 12 03 c0 01 	mov    BYTE PTR ds:0xc00312a5,0x1
c001e4df:	6a 02                	push   0x2
c001e4e1:	e8 9c f7 ff ff       	call   c001dc82 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4eb:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e4ef:	52                   	push   edx
c001e4f0:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e4f4:	52                   	push   edx
c001e4f5:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e4f9:	52                   	push   edx
c001e4fa:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e4fe:	50                   	push   eax
c001e4ff:	e8 f6 1d fe ff       	call   c00002fa <goToVM86>
c001e504:	83 c4 2c             	add    esp,0x2c
c001e507:	c3                   	ret    

c001e508 <Vm::mainVm8086Loop(void*)>:
c001e508:	83 ec 0c             	sub    esp,0xc
c001e50b:	e8 20 f3 ff ff       	call   c001d830 <unlockScheduler()>
c001e510:	83 c4 0c             	add    esp,0xc
c001e513:	eb b8                	jmp    c001e4cd <Vm::mainloop2()>

c001e515 <Vm::mainloop3(unsigned long)>:
c001e515:	53                   	push   ebx
c001e516:	83 ec 08             	sub    esp,0x8
c001e519:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e51d:	e8 0c f3 ff ff       	call   c001d82e <lockScheduler()>
c001e522:	83 ec 0c             	sub    esp,0xc
c001e525:	89 1d a0 12 03 c0    	mov    DWORD PTR ds:0xc00312a0,ebx
c001e52b:	6a 02                	push   0x2
c001e52d:	c6 05 a4 12 03 c0 01 	mov    BYTE PTR ds:0xc00312a4,0x1
c001e534:	e8 49 f7 ff ff       	call   c001dc82 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e539:	83 c4 18             	add    esp,0x18
c001e53c:	5b                   	pop    ebx
c001e53d:	eb 8e                	jmp    c001e4cd <Vm::mainloop2()>

c001e53f <Vm::initialise8086()>:
c001e53f:	83 ec 0c             	sub    esp,0xc
c001e542:	68 80 00 00 00       	push   0x80
c001e547:	6a 00                	push   0x0
c001e549:	68 08 e5 01 c0       	push   0xc001e508
c001e54e:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c001e554:	e8 07 f4 ff ff       	call   c001d960 <Process::createThread(void (*)(void*), void*, int)>
c001e559:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e560:	a3 a8 12 03 c0       	mov    ds:0xc00312a8,eax
c001e565:	68 00 01 00 00       	push   0x100
c001e56a:	a1 74 12 03 c0       	mov    eax,ds:0xc0031274
c001e56f:	6a 00                	push   0x0
c001e571:	6a 00                	push   0x0
c001e573:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e579:	e8 60 3f ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e57e:	83 c4 2c             	add    esp,0x2c
c001e581:	c3                   	ret    

c001e582 <Vm::finish8086()>:
c001e582:	53                   	push   ebx
c001e583:	83 ec 08             	sub    esp,0x8
c001e586:	e8 a3 f2 ff ff       	call   c001d82e <lockScheduler()>
c001e58b:	80 3d a4 12 03 c0 00 	cmp    BYTE PTR ds:0xc00312a4,0x0
c001e592:	75 0c                	jne    c001e5a0 <Vm::finish8086()+0x1e>
c001e594:	e8 d1 f5 ff ff       	call   c001db6a <schedule()>
c001e599:	e8 92 f2 ff ff       	call   c001d830 <unlockScheduler()>
c001e59e:	eb e6                	jmp    c001e586 <Vm::finish8086()+0x4>
c001e5a0:	83 ec 0c             	sub    esp,0xc
c001e5a3:	8b 1d a0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312a0
c001e5a9:	ff 35 a8 12 03 c0    	push   DWORD PTR ds:0xc00312a8
c001e5af:	c6 05 a4 12 03 c0 00 	mov    BYTE PTR ds:0xc00312a4,0x0
c001e5b6:	e8 8b f8 ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e5bb:	e8 70 f2 ff ff       	call   c001d830 <unlockScheduler()>
c001e5c0:	89 d8                	mov    eax,ebx
c001e5c2:	83 c4 18             	add    esp,0x18
c001e5c5:	5b                   	pop    ebx
c001e5c6:	c3                   	ret    

c001e5c7 <Vm::getOutput8086(unsigned char*)>:
c001e5c7:	83 ec 10             	sub    esp,0x10
c001e5ca:	ff 35 ac 12 03 c0    	push   DWORD PTR ds:0xc00312ac
c001e5d0:	68 c0 12 03 c0       	push   0xc00312c0
c001e5d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5d9:	e8 66 21 fe ff       	call   c0000744 <memcpy>
c001e5de:	a1 ac 12 03 c0       	mov    eax,ds:0xc00312ac
c001e5e3:	c7 05 ac 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00312ac,0x0
c001e5ed:	83 c4 1c             	add    esp,0x1c
c001e5f0:	c3                   	ret    

c001e5f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e5f1:	55                   	push   ebp
c001e5f2:	57                   	push   edi
c001e5f3:	56                   	push   esi
c001e5f4:	53                   	push   ebx
c001e5f5:	83 ec 2c             	sub    esp,0x2c
c001e5f8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e5fc:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e600:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e604:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e608:	e8 21 f2 ff ff       	call   c001d82e <lockScheduler()>
c001e60d:	a0 a5 12 03 c0       	mov    al,ds:0xc00312a5
c001e612:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e616:	84 c0                	test   al,al
c001e618:	75 0c                	jne    c001e626 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e61a:	e8 4b f5 ff ff       	call   c001db6a <schedule()>
c001e61f:	e8 0c f2 ff ff       	call   c001d830 <unlockScheduler()>
c001e624:	eb e2                	jmp    c001e608 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e626:	a1 a8 12 03 c0       	mov    eax,ds:0xc00312a8
c001e62b:	c7 05 ac 12 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00312ac,0x0
c001e635:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e639:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e63d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e641:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e645:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e649:	50                   	push   eax
c001e64a:	6a 20                	push   0x20
c001e64c:	6a 00                	push   0x0
c001e64e:	68 c0 12 03 c0       	push   0xc00312c0
c001e653:	e8 20 21 fe ff       	call   c0000778 <memset>
c001e658:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e65f:	e8 dc 11 ff ff       	call   c000f840 <malloc>
c001e664:	83 c4 0c             	add    esp,0xc
c001e667:	89 c7                	mov    edi,eax
c001e669:	ff 35 74 12 03 c0    	push   DWORD PTR ds:0xc0031274
c001e66f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e673:	50                   	push   eax
c001e674:	e8 ef 49 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001e679:	83 c4 10             	add    esp,0x10
c001e67c:	85 ff                	test   edi,edi
c001e67e:	75 0a                	jne    c001e68a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e680:	83 ec 0c             	sub    esp,0xc
c001e683:	68 b3 be 02 c0       	push   0xc002beb3
c001e688:	eb 27                	jmp    c001e6b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e68a:	50                   	push   eax
c001e68b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e68f:	50                   	push   eax
c001e690:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e694:	50                   	push   eax
c001e695:	57                   	push   edi
c001e696:	e8 dd 4c ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001e69b:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e6a0:	83 c4 10             	add    esp,0x10
c001e6a3:	89 e8                	mov    eax,ebp
c001e6a5:	84 c0                	test   al,al
c001e6a7:	74 19                	je     c001e6c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e6a9:	83 ec 0c             	sub    esp,0xc
c001e6ac:	68 c7 be 02 c0       	push   0xc002bec7
c001e6b1:	e8 e9 ba ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001e6b6:	31 ed                	xor    ebp,ebp
c001e6b8:	e8 73 f1 ff ff       	call   c001d830 <unlockScheduler()>
c001e6bd:	83 c4 10             	add    esp,0x10
c001e6c0:	eb 75                	jmp    c001e737 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e6c2:	50                   	push   eax
c001e6c3:	50                   	push   eax
c001e6c4:	6a 01                	push   0x1
c001e6c6:	57                   	push   edi
c001e6c7:	e8 00 4a ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001e6cc:	83 c4 10             	add    esp,0x10
c001e6cf:	85 c0                	test   eax,eax
c001e6d1:	74 17                	je     c001e6ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e6d3:	83 ec 0c             	sub    esp,0xc
c001e6d6:	68 e0 be 02 c0       	push   0xc002bee0
c001e6db:	e8 bf ba ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001e6e0:	e8 4b f1 ff ff       	call   c001d830 <unlockScheduler()>
c001e6e5:	83 c4 10             	add    esp,0x10
c001e6e8:	eb 4d                	jmp    c001e737 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e6ea:	0f b7 f6             	movzx  esi,si
c001e6ed:	50                   	push   eax
c001e6ee:	0f b7 db             	movzx  ebx,bx
c001e6f1:	50                   	push   eax
c001e6f2:	56                   	push   esi
c001e6f3:	53                   	push   ebx
c001e6f4:	e8 b7 fd ff ff       	call   c001e4b0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6f9:	5a                   	pop    edx
c001e6fa:	8b 17                	mov    edx,DWORD PTR [edi]
c001e6fc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e700:	51                   	push   ecx
c001e701:	50                   	push   eax
c001e702:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e706:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e70a:	57                   	push   edi
c001e70b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e70e:	83 c4 14             	add    esp,0x14
c001e711:	57                   	push   edi
c001e712:	e8 13 4a ff ff       	call   c001312a <File::close()>
c001e717:	c6 05 a5 12 03 c0 00 	mov    BYTE PTR ds:0xc00312a5,0x0
c001e71e:	e8 0d f1 ff ff       	call   c001d830 <unlockScheduler()>
c001e723:	59                   	pop    ecx
c001e724:	ff 35 a8 12 03 c0    	push   DWORD PTR ds:0xc00312a8
c001e72a:	e8 17 f7 ff ff       	call   c001de46 <unblockTask(ThreadControlBlock*)>
c001e72f:	83 c4 10             	add    esp,0x10
c001e732:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e737:	83 c4 2c             	add    esp,0x2c
c001e73a:	89 e8                	mov    eax,ebp
c001e73c:	5b                   	pop    ebx
c001e73d:	5e                   	pop    esi
c001e73e:	5f                   	pop    edi
c001e73f:	5d                   	pop    ebp
c001e740:	c3                   	ret    

c001e741 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e741:	57                   	push   edi
c001e742:	56                   	push   esi
c001e743:	53                   	push   ebx
c001e744:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e748:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e74c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e750:	83 e8 06             	sub    eax,0x6
c001e753:	0f b7 c0             	movzx  eax,ax
c001e756:	50                   	push   eax
c001e757:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e75c:	50                   	push   eax
c001e75d:	e8 4e fd ff ff       	call   c001e4b0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e762:	5a                   	pop    edx
c001e763:	5e                   	pop    esi
c001e764:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e767:	8d 56 fa             	lea    edx,[esi-0x6]
c001e76a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e770:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e773:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e776:	83 c2 02             	add    edx,0x2
c001e779:	66 89 10             	mov    WORD PTR [eax],dx
c001e77c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e77f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e783:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e786:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e78a:	89 d6                	mov    esi,edx
c001e78c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e792:	66 81 e6 ff fd       	and    si,0xfdff
c001e797:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e79b:	74 07                	je     c001e7a4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e79d:	89 d6                	mov    esi,edx
c001e79f:	66 81 ce 00 02       	or     si,0x200
c001e7a4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7ad:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7b1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e7b9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e7bc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e7c4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e7c7:	5b                   	pop    ebx
c001e7c8:	5e                   	pop    esi
c001e7c9:	5f                   	pop    edi
c001e7ca:	c3                   	ret    

c001e7cb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e7cb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7d0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7d5:	c1 e0 04             	shl    eax,0x4
c001e7d8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e7db:	c3                   	ret    

c001e7dc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e7dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7e1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7e6:	c1 e0 04             	shl    eax,0x4
c001e7e9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e7ed:	c3                   	ret    

c001e7ee <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e7ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7f8:	c1 e0 04             	shl    eax,0x4
c001e7fb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e7fe:	c3                   	ret    

c001e7ff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e7ff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e804:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e809:	c1 e0 04             	shl    eax,0x4
c001e80c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e810:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e813:	c3                   	ret    

c001e814 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e814:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e819:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e81e:	c1 e0 04             	shl    eax,0x4
c001e821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e825:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e829:	c3                   	ret    

c001e82a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e82a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e82f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e834:	c1 e0 04             	shl    eax,0x4
c001e837:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e83b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e83e:	c3                   	ret    

c001e83f <Vm::faultHandler(regs*)>:
c001e83f:	55                   	push   ebp
c001e840:	57                   	push   edi
c001e841:	56                   	push   esi
c001e842:	53                   	push   ebx
c001e843:	83 ec 1c             	sub    esp,0x1c
c001e846:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e84a:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e84d:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e850:	0f b7 c1             	movzx  eax,cx
c001e853:	50                   	push   eax
c001e854:	0f b7 c3             	movzx  eax,bx
c001e857:	c1 e3 04             	shl    ebx,0x4
c001e85a:	50                   	push   eax
c001e85b:	e8 50 fc ff ff       	call   c001e4b0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e860:	5a                   	pop    edx
c001e861:	89 c5                	mov    ebp,eax
c001e863:	5e                   	pop    esi
c001e864:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e868:	50                   	push   eax
c001e869:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e86d:	50                   	push   eax
c001e86e:	e8 3d fc ff ff       	call   c001e4b0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e873:	01 cb                	add    ebx,ecx
c001e875:	89 c6                	mov    esi,eax
c001e877:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e87b:	50                   	push   eax
c001e87c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e880:	50                   	push   eax
c001e881:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e885:	50                   	push   eax
c001e886:	55                   	push   ebp
c001e887:	53                   	push   ebx
c001e888:	b3 06                	mov    bl,0x6
c001e88a:	68 f9 be 02 c0       	push   0xc002bef9
c001e88f:	e8 7b 42 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e894:	83 c4 20             	add    esp,0x20
c001e897:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e89c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e8a1:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e8a5:	3c 9d                	cmp    al,0x9d
c001e8a7:	0f 84 d7 02 00 00    	je     c001eb84 <Vm::faultHandler(regs*)+0x345>
c001e8ad:	0f 87 a3 00 00 00    	ja     c001e956 <Vm::faultHandler(regs*)+0x117>
c001e8b3:	3c 66                	cmp    al,0x66
c001e8b5:	0f 84 15 02 00 00    	je     c001ead0 <Vm::faultHandler(regs*)+0x291>
c001e8bb:	77 5f                	ja     c001e91c <Vm::faultHandler(regs*)+0xdd>
c001e8bd:	3c 36                	cmp    al,0x36
c001e8bf:	0f 84 f1 01 00 00    	je     c001eab6 <Vm::faultHandler(regs*)+0x277>
c001e8c5:	77 28                	ja     c001e8ef <Vm::faultHandler(regs*)+0xb0>
c001e8c7:	3c 26                	cmp    al,0x26
c001e8c9:	0f 84 99 01 00 00    	je     c001ea68 <Vm::faultHandler(regs*)+0x229>
c001e8cf:	3c 2e                	cmp    al,0x2e
c001e8d1:	0f 85 3b 07 00 00    	jne    c001f012 <Vm::faultHandler(regs*)+0x7d3>
c001e8d7:	83 ec 0c             	sub    esp,0xc
c001e8da:	31 db                	xor    ebx,ebx
c001e8dc:	68 0e bf 02 c0       	push   0xc002bf0e
c001e8e1:	e8 29 42 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e8e6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e8e9:	83 c4 10             	add    esp,0x10
c001e8ec:	45                   	inc    ebp
c001e8ed:	eb b2                	jmp    c001e8a1 <Vm::faultHandler(regs*)+0x62>
c001e8ef:	3c 64                	cmp    al,0x64
c001e8f1:	0f 84 8b 01 00 00    	je     c001ea82 <Vm::faultHandler(regs*)+0x243>
c001e8f7:	0f 87 9f 01 00 00    	ja     c001ea9c <Vm::faultHandler(regs*)+0x25d>
c001e8fd:	3c 3e                	cmp    al,0x3e
c001e8ff:	0f 85 0d 07 00 00    	jne    c001f012 <Vm::faultHandler(regs*)+0x7d3>
c001e905:	83 ec 0c             	sub    esp,0xc
c001e908:	b3 01                	mov    bl,0x1
c001e90a:	68 12 bf 02 c0       	push   0xc002bf12
c001e90f:	e8 fb 41 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e914:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e917:	83 c4 10             	add    esp,0x10
c001e91a:	eb d0                	jmp    c001e8ec <Vm::faultHandler(regs*)+0xad>
c001e91c:	3c 6d                	cmp    al,0x6d
c001e91e:	0f 84 af 03 00 00    	je     c001ecd3 <Vm::faultHandler(regs*)+0x494>
c001e924:	77 15                	ja     c001e93b <Vm::faultHandler(regs*)+0xfc>
c001e926:	3c 67                	cmp    al,0x67
c001e928:	0f 84 bf 01 00 00    	je     c001eaed <Vm::faultHandler(regs*)+0x2ae>
c001e92e:	3c 6c                	cmp    al,0x6c
c001e930:	0f 84 3f 03 00 00    	je     c001ec75 <Vm::faultHandler(regs*)+0x436>
c001e936:	e9 d7 06 00 00       	jmp    c001f012 <Vm::faultHandler(regs*)+0x7d3>
c001e93b:	3c 6f                	cmp    al,0x6f
c001e93d:	0f 84 a4 04 00 00    	je     c001ede7 <Vm::faultHandler(regs*)+0x5a8>
c001e943:	0f 82 11 04 00 00    	jb     c001ed5a <Vm::faultHandler(regs*)+0x51b>
c001e949:	3c 9c                	cmp    al,0x9c
c001e94b:	0f 84 ba 01 00 00    	je     c001eb0b <Vm::faultHandler(regs*)+0x2cc>
c001e951:	e9 bc 06 00 00       	jmp    c001f012 <Vm::faultHandler(regs*)+0x7d3>
c001e956:	3c ec                	cmp    al,0xec
c001e958:	0f 84 24 06 00 00    	je     c001ef82 <Vm::faultHandler(regs*)+0x743>
c001e95e:	0f 87 93 00 00 00    	ja     c001e9f7 <Vm::faultHandler(regs*)+0x1b8>
c001e964:	3c e4                	cmp    al,0xe4
c001e966:	0f 84 5c 05 00 00    	je     c001eec8 <Vm::faultHandler(regs*)+0x689>
c001e96c:	77 6a                	ja     c001e9d8 <Vm::faultHandler(regs*)+0x199>
c001e96e:	3c cd                	cmp    al,0xcd
c001e970:	0f 84 7e 02 00 00    	je     c001ebf4 <Vm::faultHandler(regs*)+0x3b5>
c001e976:	3c cf                	cmp    al,0xcf
c001e978:	0f 85 94 06 00 00    	jne    c001f012 <Vm::faultHandler(regs*)+0x7d3>
c001e97e:	83 ec 0c             	sub    esp,0xc
c001e981:	68 56 bf 02 c0       	push   0xc002bf56
c001e986:	e8 84 41 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e98b:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e98e:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e991:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e995:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e998:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e99c:	0d 00 02 02 00       	or     eax,0x20200
c001e9a1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e9a4:	56                   	push   esi
c001e9a5:	53                   	push   ebx
c001e9a6:	52                   	push   edx
c001e9a7:	68 5c bf 02 c0       	push   0xc002bf5c
c001e9ac:	e8 5e 41 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e9b1:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e9b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9bb:	66 c1 e8 09          	shr    ax,0x9
c001e9bf:	83 e0 01             	and    eax,0x1
c001e9c2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e9c5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e9c8:	83 c0 06             	add    eax,0x6
c001e9cb:	25 ff ff 00 00       	and    eax,0xffff
c001e9d0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e9d3:	e9 95 02 00 00       	jmp    c001ec6d <Vm::faultHandler(regs*)+0x42e>
c001e9d8:	3c e6                	cmp    al,0xe6
c001e9da:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e9de:	0f 84 4e 05 00 00    	je     c001ef32 <Vm::faultHandler(regs*)+0x6f3>
c001e9e4:	0f 82 0a 05 00 00    	jb     c001eef4 <Vm::faultHandler(regs*)+0x6b5>
c001e9ea:	3c e7                	cmp    al,0xe7
c001e9ec:	0f 84 69 05 00 00    	je     c001ef5b <Vm::faultHandler(regs*)+0x71c>
c001e9f2:	e9 1b 06 00 00       	jmp    c001f012 <Vm::faultHandler(regs*)+0x7d3>
c001e9f7:	3c ef                	cmp    al,0xef
c001e9f9:	0f 84 e6 05 00 00    	je     c001efe5 <Vm::faultHandler(regs*)+0x7a6>
c001e9ff:	77 37                	ja     c001ea38 <Vm::faultHandler(regs*)+0x1f9>
c001ea01:	3c ed                	cmp    al,0xed
c001ea03:	0f 84 a3 05 00 00    	je     c001efac <Vm::faultHandler(regs*)+0x76d>
c001ea09:	3c ee                	cmp    al,0xee
c001ea0b:	0f 85 01 06 00 00    	jne    c001f012 <Vm::faultHandler(regs*)+0x7d3>
c001ea11:	52                   	push   edx
c001ea12:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ea15:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ea18:	68 f7 bf 02 c0       	push   0xc002bff7
c001ea1d:	e8 ed 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ea22:	59                   	pop    ecx
c001ea23:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ea27:	5b                   	pop    ebx
c001ea28:	50                   	push   eax
c001ea29:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ea2d:	50                   	push   eax
c001ea2e:	e8 2a fa ff ff       	call   c001e45d <Vm::outbv(unsigned short, unsigned char)>
c001ea33:	e9 a5 05 00 00       	jmp    c001efdd <Vm::faultHandler(regs*)+0x79e>
c001ea38:	3c fa                	cmp    al,0xfa
c001ea3a:	0f 84 f7 01 00 00    	je     c001ec37 <Vm::faultHandler(regs*)+0x3f8>
c001ea40:	3c fb                	cmp    al,0xfb
c001ea42:	0f 84 0a 02 00 00    	je     c001ec52 <Vm::faultHandler(regs*)+0x413>
c001ea48:	3c f3                	cmp    al,0xf3
c001ea4a:	0f 85 c2 05 00 00    	jne    c001f012 <Vm::faultHandler(regs*)+0x7d3>
c001ea50:	83 ec 0c             	sub    esp,0xc
c001ea53:	68 2f bf 02 c0       	push   0xc002bf2f
c001ea58:	e8 b2 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ea5d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ea60:	83 c4 10             	add    esp,0x10
c001ea63:	e9 84 fe ff ff       	jmp    c001e8ec <Vm::faultHandler(regs*)+0xad>
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	b3 02                	mov    bl,0x2
c001ea6d:	68 0a bf 02 c0       	push   0xc002bf0a
c001ea72:	e8 98 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ea77:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ea7a:	83 c4 10             	add    esp,0x10
c001ea7d:	e9 6a fe ff ff       	jmp    c001e8ec <Vm::faultHandler(regs*)+0xad>
c001ea82:	83 ec 0c             	sub    esp,0xc
c001ea85:	b3 03                	mov    bl,0x3
c001ea87:	68 16 bf 02 c0       	push   0xc002bf16
c001ea8c:	e8 7e 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ea91:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ea94:	83 c4 10             	add    esp,0x10
c001ea97:	e9 50 fe ff ff       	jmp    c001e8ec <Vm::faultHandler(regs*)+0xad>
c001ea9c:	83 ec 0c             	sub    esp,0xc
c001ea9f:	b3 04                	mov    bl,0x4
c001eaa1:	68 1a bf 02 c0       	push   0xc002bf1a
c001eaa6:	e8 64 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eaab:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eaae:	83 c4 10             	add    esp,0x10
c001eab1:	e9 36 fe ff ff       	jmp    c001e8ec <Vm::faultHandler(regs*)+0xad>
c001eab6:	83 ec 0c             	sub    esp,0xc
c001eab9:	b3 05                	mov    bl,0x5
c001eabb:	68 1e bf 02 c0       	push   0xc002bf1e
c001eac0:	e8 4a 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eac5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eac8:	83 c4 10             	add    esp,0x10
c001eacb:	e9 1c fe ff ff       	jmp    c001e8ec <Vm::faultHandler(regs*)+0xad>
c001ead0:	83 ec 0c             	sub    esp,0xc
c001ead3:	68 22 bf 02 c0       	push   0xc002bf22
c001ead8:	e8 32 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eadd:	83 c4 10             	add    esp,0x10
c001eae0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eae3:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001eae8:	e9 ff fd ff ff       	jmp    c001e8ec <Vm::faultHandler(regs*)+0xad>
c001eaed:	50                   	push   eax
c001eaee:	50                   	push   eax
c001eaef:	6a 01                	push   0x1
c001eaf1:	68 27 bf 02 c0       	push   0xc002bf27
c001eaf6:	e8 14 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eafb:	83 c4 10             	add    esp,0x10
c001eafe:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eb01:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001eb06:	e9 e1 fd ff ff       	jmp    c001e8ec <Vm::faultHandler(regs*)+0xad>
c001eb0b:	83 ec 0c             	sub    esp,0xc
c001eb0e:	68 35 bf 02 c0       	push   0xc002bf35
c001eb13:	e8 f7 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eb18:	83 c4 10             	add    esp,0x10
c001eb1b:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001eb1e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb23:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001eb26:	74 2f                	je     c001eb57 <Vm::faultHandler(regs*)+0x318>
c001eb28:	83 ea 04             	sub    edx,0x4
c001eb2b:	25 ff 0d 00 00       	and    eax,0xdff
c001eb30:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eb36:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001eb39:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001eb3c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb42:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001eb46:	0f 84 bf 04 00 00    	je     c001f00b <Vm::faultHandler(regs*)+0x7cc>
c001eb4c:	80 cc 02             	or     ah,0x2
c001eb4f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001eb52:	e9 b4 04 00 00       	jmp    c001f00b <Vm::faultHandler(regs*)+0x7cc>
c001eb57:	83 ea 02             	sub    edx,0x2
c001eb5a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eb60:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001eb63:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001eb67:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb6d:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001eb71:	74 05                	je     c001eb78 <Vm::faultHandler(regs*)+0x339>
c001eb73:	80 cc 02             	or     ah,0x2
c001eb76:	eb 03                	jmp    c001eb7b <Vm::faultHandler(regs*)+0x33c>
c001eb78:	80 e4 fd             	and    ah,0xfd
c001eb7b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001eb7f:	e9 87 04 00 00       	jmp    c001f00b <Vm::faultHandler(regs*)+0x7cc>
c001eb84:	83 ec 0c             	sub    esp,0xc
c001eb87:	68 3c bf 02 c0       	push   0xc002bf3c
c001eb8c:	e8 7e 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eb91:	83 c4 10             	add    esp,0x10
c001eb94:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb99:	74 28                	je     c001ebc3 <Vm::faultHandler(regs*)+0x384>
c001eb9b:	8b 06                	mov    eax,DWORD PTR [esi]
c001eb9d:	25 ff 0d 00 00       	and    eax,0xdff
c001eba2:	0d 00 02 02 00       	or     eax,0x20200
c001eba7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ebaa:	8b 06                	mov    eax,DWORD PTR [esi]
c001ebac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ebb2:	c1 e8 09             	shr    eax,0x9
c001ebb5:	83 e0 01             	and    eax,0x1
c001ebb8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ebbb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ebbe:	83 c0 04             	add    eax,0x4
c001ebc1:	eb 24                	jmp    c001ebe7 <Vm::faultHandler(regs*)+0x3a8>
c001ebc3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ebc6:	0d 00 02 02 00       	or     eax,0x20200
c001ebcb:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ebce:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ebd1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ebd7:	66 c1 e8 09          	shr    ax,0x9
c001ebdb:	83 e0 01             	and    eax,0x1
c001ebde:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ebe1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ebe4:	83 c0 02             	add    eax,0x2
c001ebe7:	25 ff ff 00 00       	and    eax,0xffff
c001ebec:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ebef:	e9 17 04 00 00       	jmp    c001f00b <Vm::faultHandler(regs*)+0x7cc>
c001ebf4:	53                   	push   ebx
c001ebf5:	53                   	push   ebx
c001ebf6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ebfa:	50                   	push   eax
c001ebfb:	68 42 bf 02 c0       	push   0xc002bf42
c001ec00:	e8 0a 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ec05:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec09:	83 c4 10             	add    esp,0x10
c001ec0c:	3c ee                	cmp    al,0xee
c001ec0e:	75 10                	jne    c001ec20 <Vm::faultHandler(regs*)+0x3e1>
c001ec10:	83 ec 0c             	sub    esp,0xc
c001ec13:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ec16:	e8 fa f8 ff ff       	call   c001e515 <Vm::mainloop3(unsigned long)>
c001ec1b:	e9 c0 03 00 00       	jmp    c001efe0 <Vm::faultHandler(regs*)+0x7a1>
c001ec20:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001ec24:	83 ec 0c             	sub    esp,0xc
c001ec27:	53                   	push   ebx
c001ec28:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001ec2c:	53                   	push   ebx
c001ec2d:	55                   	push   ebp
c001ec2e:	50                   	push   eax
c001ec2f:	57                   	push   edi
c001ec30:	e8 0c fb ff ff       	call   c001e741 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ec35:	eb 36                	jmp    c001ec6d <Vm::faultHandler(regs*)+0x42e>
c001ec37:	83 ec 0c             	sub    esp,0xc
c001ec3a:	68 4c bf 02 c0       	push   0xc002bf4c
c001ec3f:	e8 cb 3e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ec44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec49:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ec4d:	e9 8b 03 00 00       	jmp    c001efdd <Vm::faultHandler(regs*)+0x79e>
c001ec52:	83 ec 0c             	sub    esp,0xc
c001ec55:	68 51 bf 02 c0       	push   0xc002bf51
c001ec5a:	e8 b0 3e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ec5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec64:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ec68:	e9 70 03 00 00       	jmp    c001efdd <Vm::faultHandler(regs*)+0x79e>
c001ec6d:	83 c4 20             	add    esp,0x20
c001ec70:	e9 99 03 00 00       	jmp    c001f00e <Vm::faultHandler(regs*)+0x7cf>
c001ec75:	83 ec 0c             	sub    esp,0xc
c001ec78:	68 8f bf 02 c0       	push   0xc002bf8f
c001ec7d:	e8 8d 3e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ec82:	83 c4 10             	add    esp,0x10
c001ec85:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001ec88:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ec8d:	74 0d                	je     c001ec9c <Vm::faultHandler(regs*)+0x45d>
c001ec8f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001ec96:	0f 87 9e 01 00 00    	ja     c001ee3a <Vm::faultHandler(regs*)+0x5fb>
c001ec9c:	83 ec 0c             	sub    esp,0xc
c001ec9f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eca3:	0f b7 db             	movzx  ebx,bx
c001eca6:	50                   	push   eax
c001eca7:	e8 9e f7 ff ff       	call   c001e44a <Vm::inbv(unsigned short)>
c001ecac:	83 c4 0c             	add    esp,0xc
c001ecaf:	0f b6 c0             	movzx  eax,al
c001ecb2:	50                   	push   eax
c001ecb3:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001ecb7:	50                   	push   eax
c001ecb8:	53                   	push   ebx
c001ecb9:	e8 41 fb ff ff       	call   c001e7ff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ecbe:	83 c4 10             	add    esp,0x10
c001ecc1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ecc4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ecc8:	74 03                	je     c001eccd <Vm::faultHandler(regs*)+0x48e>
c001ecca:	48                   	dec    eax
c001eccb:	eb 01                	jmp    c001ecce <Vm::faultHandler(regs*)+0x48f>
c001eccd:	40                   	inc    eax
c001ecce:	0f b7 c0             	movzx  eax,ax
c001ecd1:	eb 7f                	jmp    c001ed52 <Vm::faultHandler(regs*)+0x513>
c001ecd3:	83 ec 0c             	sub    esp,0xc
c001ecd6:	68 c1 bf 02 c0       	push   0xc002bfc1
c001ecdb:	e8 2f 3e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ece0:	83 c4 10             	add    esp,0x10
c001ece3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001ece6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eceb:	74 0d                	je     c001ecfa <Vm::faultHandler(regs*)+0x4bb>
c001eced:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001ecf4:	0f 87 40 01 00 00    	ja     c001ee3a <Vm::faultHandler(regs*)+0x5fb>
c001ecfa:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ecfd:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001ed01:	0f b7 db             	movzx  ebx,bx
c001ed04:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed09:	74 20                	je     c001ed2b <Vm::faultHandler(regs*)+0x4ec>
c001ed0b:	ed                   	in     eax,dx
c001ed0c:	51                   	push   ecx
c001ed0d:	50                   	push   eax
c001ed0e:	56                   	push   esi
c001ed0f:	53                   	push   ebx
c001ed10:	e8 15 fb ff ff       	call   c001e82a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ed15:	83 c4 10             	add    esp,0x10
c001ed18:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ed1b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ed1f:	74 05                	je     c001ed26 <Vm::faultHandler(regs*)+0x4e7>
c001ed21:	83 e8 04             	sub    eax,0x4
c001ed24:	eb 27                	jmp    c001ed4d <Vm::faultHandler(regs*)+0x50e>
c001ed26:	83 c0 04             	add    eax,0x4
c001ed29:	eb 22                	jmp    c001ed4d <Vm::faultHandler(regs*)+0x50e>
c001ed2b:	66 ed                	in     ax,dx
c001ed2d:	0f b7 c0             	movzx  eax,ax
c001ed30:	52                   	push   edx
c001ed31:	50                   	push   eax
c001ed32:	56                   	push   esi
c001ed33:	53                   	push   ebx
c001ed34:	e8 db fa ff ff       	call   c001e814 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ed39:	83 c4 10             	add    esp,0x10
c001ed3c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ed3f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ed43:	74 05                	je     c001ed4a <Vm::faultHandler(regs*)+0x50b>
c001ed45:	83 e8 02             	sub    eax,0x2
c001ed48:	eb 03                	jmp    c001ed4d <Vm::faultHandler(regs*)+0x50e>
c001ed4a:	83 c0 02             	add    eax,0x2
c001ed4d:	25 ff ff 00 00       	and    eax,0xffff
c001ed52:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ed55:	e9 b1 02 00 00       	jmp    c001f00b <Vm::faultHandler(regs*)+0x7cc>
c001ed5a:	83 ec 0c             	sub    esp,0xc
c001ed5d:	4b                   	dec    ebx
c001ed5e:	68 c7 bf 02 c0       	push   0xc002bfc7
c001ed63:	e8 a7 3d ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ed68:	83 c4 10             	add    esp,0x10
c001ed6b:	80 fb 05             	cmp    bl,0x5
c001ed6e:	77 0a                	ja     c001ed7a <Vm::faultHandler(regs*)+0x53b>
c001ed70:	0f b6 db             	movzx  ebx,bl
c001ed73:	ff 24 9d 38 c0 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3fc8]
c001ed7a:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ed7e:	eb 1b                	jmp    c001ed9b <Vm::faultHandler(regs*)+0x55c>
c001ed80:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ed84:	eb 15                	jmp    c001ed9b <Vm::faultHandler(regs*)+0x55c>
c001ed86:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ed8a:	eb 0f                	jmp    c001ed9b <Vm::faultHandler(regs*)+0x55c>
c001ed8c:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ed90:	eb 09                	jmp    c001ed9b <Vm::faultHandler(regs*)+0x55c>
c001ed92:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ed95:	eb 04                	jmp    c001ed9b <Vm::faultHandler(regs*)+0x55c>
c001ed97:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ed9b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eda0:	74 0d                	je     c001edaf <Vm::faultHandler(regs*)+0x570>
c001eda2:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001eda9:	0f 87 8b 00 00 00    	ja     c001ee3a <Vm::faultHandler(regs*)+0x5fb>
c001edaf:	53                   	push   ebx
c001edb0:	53                   	push   ebx
c001edb1:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001edb5:	52                   	push   edx
c001edb6:	50                   	push   eax
c001edb7:	e8 0f fa ff ff       	call   c001e7cb <Vm::readByteFromReal(unsigned short, unsigned short)>
c001edbc:	5e                   	pop    esi
c001edbd:	0f b6 c0             	movzx  eax,al
c001edc0:	5d                   	pop    ebp
c001edc1:	50                   	push   eax
c001edc2:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001edc6:	50                   	push   eax
c001edc7:	e8 91 f6 ff ff       	call   c001e45d <Vm::outbv(unsigned short, unsigned char)>
c001edcc:	83 c4 10             	add    esp,0x10
c001edcf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001edd2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001edd6:	74 03                	je     c001eddb <Vm::faultHandler(regs*)+0x59c>
c001edd8:	48                   	dec    eax
c001edd9:	eb 01                	jmp    c001eddc <Vm::faultHandler(regs*)+0x59d>
c001eddb:	40                   	inc    eax
c001eddc:	0f b7 c0             	movzx  eax,ax
c001eddf:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001ede2:	e9 24 02 00 00       	jmp    c001f00b <Vm::faultHandler(regs*)+0x7cc>
c001ede7:	83 ec 0c             	sub    esp,0xc
c001edea:	4b                   	dec    ebx
c001edeb:	68 c7 bf 02 c0       	push   0xc002bfc7
c001edf0:	e8 1a 3d ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001edf5:	83 c4 10             	add    esp,0x10
c001edf8:	80 fb 05             	cmp    bl,0x5
c001edfb:	77 0a                	ja     c001ee07 <Vm::faultHandler(regs*)+0x5c8>
c001edfd:	0f b6 db             	movzx  ebx,bl
c001ee00:	ff 24 9d 50 c0 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3fb0]
c001ee07:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ee0b:	eb 1b                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x5e9>
c001ee0d:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ee11:	eb 15                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x5e9>
c001ee13:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ee17:	eb 0f                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x5e9>
c001ee19:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ee1d:	eb 09                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x5e9>
c001ee1f:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ee22:	eb 04                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x5e9>
c001ee24:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee28:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001ee2b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ee30:	74 39                	je     c001ee6b <Vm::faultHandler(regs*)+0x62c>
c001ee32:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001ee38:	76 31                	jbe    c001ee6b <Vm::faultHandler(regs*)+0x62c>
c001ee3a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ee3e:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee42:	51                   	push   ecx
c001ee43:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ee47:	51                   	push   ecx
c001ee48:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ee4c:	51                   	push   ecx
c001ee4d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ee51:	51                   	push   ecx
c001ee52:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ee56:	52                   	push   edx
c001ee57:	50                   	push   eax
c001ee58:	50                   	push   eax
c001ee59:	68 94 bf 02 c0       	push   0xc002bf94
c001ee5e:	e8 ac 3c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ee63:	83 c4 20             	add    esp,0x20
c001ee66:	e9 fb 01 00 00       	jmp    c001f066 <Vm::faultHandler(regs*)+0x827>
c001ee6b:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001ee6e:	0f b7 d3             	movzx  edx,bx
c001ee71:	81 e6 00 04 00 00    	and    esi,0x400
c001ee77:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001ee7a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ee7f:	74 1d                	je     c001ee9e <Vm::faultHandler(regs*)+0x65f>
c001ee81:	51                   	push   ecx
c001ee82:	51                   	push   ecx
c001ee83:	52                   	push   edx
c001ee84:	50                   	push   eax
c001ee85:	e8 64 f9 ff ff       	call   c001e7ee <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ee8a:	83 c4 10             	add    esp,0x10
c001ee8d:	89 ea                	mov    edx,ebp
c001ee8f:	ef                   	out    dx,eax
c001ee90:	85 f6                	test   esi,esi
c001ee92:	74 05                	je     c001ee99 <Vm::faultHandler(regs*)+0x65a>
c001ee94:	83 eb 04             	sub    ebx,0x4
c001ee97:	eb 21                	jmp    c001eeba <Vm::faultHandler(regs*)+0x67b>
c001ee99:	83 c3 04             	add    ebx,0x4
c001ee9c:	eb 1c                	jmp    c001eeba <Vm::faultHandler(regs*)+0x67b>
c001ee9e:	51                   	push   ecx
c001ee9f:	51                   	push   ecx
c001eea0:	52                   	push   edx
c001eea1:	50                   	push   eax
c001eea2:	e8 35 f9 ff ff       	call   c001e7dc <Vm::readWordFromReal(unsigned short, unsigned short)>
c001eea7:	83 c4 10             	add    esp,0x10
c001eeaa:	89 ea                	mov    edx,ebp
c001eeac:	66 ef                	out    dx,ax
c001eeae:	85 f6                	test   esi,esi
c001eeb0:	74 05                	je     c001eeb7 <Vm::faultHandler(regs*)+0x678>
c001eeb2:	83 eb 02             	sub    ebx,0x2
c001eeb5:	eb 03                	jmp    c001eeba <Vm::faultHandler(regs*)+0x67b>
c001eeb7:	83 c3 02             	add    ebx,0x2
c001eeba:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001eec0:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001eec3:	e9 43 01 00 00       	jmp    c001f00b <Vm::faultHandler(regs*)+0x7cc>
c001eec8:	53                   	push   ebx
c001eec9:	53                   	push   ebx
c001eeca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eece:	50                   	push   eax
c001eecf:	68 cd bf 02 c0       	push   0xc002bfcd
c001eed4:	e8 36 3c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eed9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001eee0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eee4:	89 04 24             	mov    DWORD PTR [esp],eax
c001eee7:	e8 5e f5 ff ff       	call   c001e44a <Vm::inbv(unsigned short)>
c001eeec:	0f b6 c0             	movzx  eax,al
c001eeef:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001eef2:	eb 5e                	jmp    c001ef52 <Vm::faultHandler(regs*)+0x713>
c001eef4:	51                   	push   ecx
c001eef5:	51                   	push   ecx
c001eef6:	53                   	push   ebx
c001eef7:	68 d3 bf 02 c0       	push   0xc002bfd3
c001eefc:	e8 0e 3c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ef01:	83 c4 10             	add    esp,0x10
c001ef04:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef09:	74 07                	je     c001ef12 <Vm::faultHandler(regs*)+0x6d3>
c001ef0b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ef0f:	ed                   	in     eax,dx
c001ef10:	eb 14                	jmp    c001ef26 <Vm::faultHandler(regs*)+0x6e7>
c001ef12:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001ef15:	66 31 db             	xor    bx,bx
c001ef18:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001ef1b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ef1f:	66 ed                	in     ax,dx
c001ef21:	0f b7 c0             	movzx  eax,ax
c001ef24:	09 d8                	or     eax,ebx
c001ef26:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ef29:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ef2d:	e9 dc 00 00 00       	jmp    c001f00e <Vm::faultHandler(regs*)+0x7cf>
c001ef32:	50                   	push   eax
c001ef33:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ef36:	53                   	push   ebx
c001ef37:	68 d9 bf 02 c0       	push   0xc002bfd9
c001ef3c:	e8 ce 3b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ef41:	58                   	pop    eax
c001ef42:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ef46:	5a                   	pop    edx
c001ef47:	50                   	push   eax
c001ef48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef4c:	50                   	push   eax
c001ef4d:	e8 0b f5 ff ff       	call   c001e45d <Vm::outbv(unsigned short, unsigned char)>
c001ef52:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ef56:	e9 85 00 00 00       	jmp    c001efe0 <Vm::faultHandler(regs*)+0x7a1>
c001ef5b:	50                   	push   eax
c001ef5c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ef5f:	53                   	push   ebx
c001ef60:	68 e2 bf 02 c0       	push   0xc002bfe2
c001ef65:	e8 a5 3b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ef6a:	83 c4 10             	add    esp,0x10
c001ef6d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ef71:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef76:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ef79:	74 03                	je     c001ef7e <Vm::faultHandler(regs*)+0x73f>
c001ef7b:	ef                   	out    dx,eax
c001ef7c:	eb ab                	jmp    c001ef29 <Vm::faultHandler(regs*)+0x6ea>
c001ef7e:	66 ef                	out    dx,ax
c001ef80:	eb a7                	jmp    c001ef29 <Vm::faultHandler(regs*)+0x6ea>
c001ef82:	55                   	push   ebp
c001ef83:	55                   	push   ebp
c001ef84:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ef87:	68 eb bf 02 c0       	push   0xc002bfeb
c001ef8c:	e8 7e 3b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ef91:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ef98:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ef9c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef9f:	e8 a6 f4 ff ff       	call   c001e44a <Vm::inbv(unsigned short)>
c001efa4:	0f b6 c0             	movzx  eax,al
c001efa7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001efaa:	eb 31                	jmp    c001efdd <Vm::faultHandler(regs*)+0x79e>
c001efac:	56                   	push   esi
c001efad:	56                   	push   esi
c001efae:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efb1:	68 f1 bf 02 c0       	push   0xc002bff1
c001efb6:	e8 54 3b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001efbb:	83 c4 10             	add    esp,0x10
c001efbe:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001efc1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001efc6:	74 03                	je     c001efcb <Vm::faultHandler(regs*)+0x78c>
c001efc8:	ed                   	in     eax,dx
c001efc9:	eb 0d                	jmp    c001efd8 <Vm::faultHandler(regs*)+0x799>
c001efcb:	66 ed                	in     ax,dx
c001efcd:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001efd0:	0f b7 c0             	movzx  eax,ax
c001efd3:	66 31 d2             	xor    dx,dx
c001efd6:	09 d0                	or     eax,edx
c001efd8:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001efdb:	eb 2e                	jmp    c001f00b <Vm::faultHandler(regs*)+0x7cc>
c001efdd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efe0:	83 c4 10             	add    esp,0x10
c001efe3:	eb 29                	jmp    c001f00e <Vm::faultHandler(regs*)+0x7cf>
c001efe5:	50                   	push   eax
c001efe6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efe9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efec:	68 00 c0 02 c0       	push   0xc002c000
c001eff1:	e8 19 3b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eff6:	83 c4 10             	add    esp,0x10
c001eff9:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001effc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f001:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f004:	74 03                	je     c001f009 <Vm::faultHandler(regs*)+0x7ca>
c001f006:	ef                   	out    dx,eax
c001f007:	eb 02                	jmp    c001f00b <Vm::faultHandler(regs*)+0x7cc>
c001f009:	66 ef                	out    dx,ax
c001f00b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f00e:	b0 01                	mov    al,0x1
c001f010:	eb 56                	jmp    c001f068 <Vm::faultHandler(regs*)+0x829>
c001f012:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f016:	51                   	push   ecx
c001f017:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f01b:	51                   	push   ecx
c001f01c:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f020:	51                   	push   ecx
c001f021:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f025:	51                   	push   ecx
c001f026:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f02a:	52                   	push   edx
c001f02b:	50                   	push   eax
c001f02c:	50                   	push   eax
c001f02d:	68 09 c0 02 c0       	push   0xc002c009
c001f032:	e8 d8 3a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001f037:	83 c4 20             	add    esp,0x20
c001f03a:	83 ec 0c             	sub    esp,0xc
c001f03d:	6a 60                	push   0x60
c001f03f:	e8 06 f4 ff ff       	call   c001e44a <Vm::inbv(unsigned short)>
c001f044:	83 c4 10             	add    esp,0x10
c001f047:	3c 1c                	cmp    al,0x1c
c001f049:	74 04                	je     c001f04f <Vm::faultHandler(regs*)+0x810>
c001f04b:	3c 5a                	cmp    al,0x5a
c001f04d:	75 eb                	jne    c001f03a <Vm::faultHandler(regs*)+0x7fb>
c001f04f:	3c 1c                	cmp    al,0x1c
c001f051:	74 04                	je     c001f057 <Vm::faultHandler(regs*)+0x818>
c001f053:	3c 5a                	cmp    al,0x5a
c001f055:	75 0f                	jne    c001f066 <Vm::faultHandler(regs*)+0x827>
c001f057:	83 ec 0c             	sub    esp,0xc
c001f05a:	6a 60                	push   0x60
c001f05c:	e8 e9 f3 ff ff       	call   c001e44a <Vm::inbv(unsigned short)>
c001f061:	83 c4 10             	add    esp,0x10
c001f064:	eb e9                	jmp    c001f04f <Vm::faultHandler(regs*)+0x810>
c001f066:	31 c0                	xor    eax,eax
c001f068:	83 c4 1c             	add    esp,0x1c
c001f06b:	5b                   	pop    ebx
c001f06c:	5e                   	pop    esi
c001f06d:	5f                   	pop    edi
c001f06e:	5d                   	pop    ebp
c001f06f:	c3                   	ret    

c001f070 <Vm::fpuInternalTo32(unsigned long long)>:
c001f070:	57                   	push   edi
c001f071:	56                   	push   esi
c001f072:	53                   	push   ebx
c001f073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07b:	89 d6                	mov    esi,edx
c001f07d:	89 d7                	mov    edi,edx
c001f07f:	89 c1                	mov    ecx,eax
c001f081:	c1 ef 14             	shr    edi,0x14
c001f084:	89 d3                	mov    ebx,edx
c001f086:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f08c:	31 d2                	xor    edx,edx
c001f08e:	89 f8                	mov    eax,edi
c001f090:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f096:	bf ff 00 00 00       	mov    edi,0xff
c001f09b:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f0a0:	83 d2 ff             	adc    edx,0xffffffff
c001f0a3:	39 c7                	cmp    edi,eax
c001f0a5:	bf 00 00 00 00       	mov    edi,0x0
c001f0aa:	19 d7                	sbb    edi,edx
c001f0ac:	72 15                	jb     c001f0c3 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f0ae:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f0b2:	c1 e0 17             	shl    eax,0x17
c001f0b5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f0bb:	09 f1                	or     ecx,esi
c001f0bd:	09 c1                	or     ecx,eax
c001f0bf:	89 cf                	mov    edi,ecx
c001f0c1:	eb 02                	jmp    c001f0c5 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f0c3:	31 ff                	xor    edi,edi
c001f0c5:	89 f8                	mov    eax,edi
c001f0c7:	5b                   	pop    ebx
c001f0c8:	5e                   	pop    esi
c001f0c9:	5f                   	pop    edi
c001f0ca:	c3                   	ret    

c001f0cb <Vm::fpuInternalTo64(unsigned long long)>:
c001f0cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0d3:	c3                   	ret    

c001f0d4 <Vm::fpu32ToInternal(unsigned int)>:
c001f0d4:	57                   	push   edi
c001f0d5:	31 ff                	xor    edi,edi
c001f0d7:	56                   	push   esi
c001f0d8:	53                   	push   ebx
c001f0d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0dd:	89 cb                	mov    ebx,ecx
c001f0df:	89 ce                	mov    esi,ecx
c001f0e1:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f0e7:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f0ed:	c1 e9 17             	shr    ecx,0x17
c001f0f0:	89 f0                	mov    eax,esi
c001f0f2:	0f b6 d1             	movzx  edx,cl
c001f0f5:	81 c2 80 03 00 00    	add    edx,0x380
c001f0fb:	89 d1                	mov    ecx,edx
c001f0fd:	89 fa                	mov    edx,edi
c001f0ff:	c1 e1 14             	shl    ecx,0x14
c001f102:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f106:	c1 e0 1d             	shl    eax,0x1d
c001f109:	89 d7                	mov    edi,edx
c001f10b:	89 c6                	mov    esi,eax
c001f10d:	89 ca                	mov    edx,ecx
c001f10f:	89 f0                	mov    eax,esi
c001f111:	09 fa                	or     edx,edi
c001f113:	09 da                	or     edx,ebx
c001f115:	5b                   	pop    ebx
c001f116:	5e                   	pop    esi
c001f117:	5f                   	pop    edi
c001f118:	c3                   	ret    

c001f119 <Vm::fpu64ToInternal(unsigned long long)>:
c001f119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f11d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f121:	c3                   	ret    

c001f122 <Vm::fpuFloatToLong(unsigned long long)>:
c001f122:	57                   	push   edi
c001f123:	31 c0                	xor    eax,eax
c001f125:	56                   	push   esi
c001f126:	31 d2                	xor    edx,edx
c001f128:	53                   	push   ebx
c001f129:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f12d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f131:	89 d9                	mov    ecx,ebx
c001f133:	c1 e9 14             	shr    ecx,0x14
c001f136:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f13c:	89 cf                	mov    edi,ecx
c001f13e:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f144:	78 33                	js     c001f179 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f146:	89 d9                	mov    ecx,ebx
c001f148:	89 f0                	mov    eax,esi
c001f14a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f150:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f156:	89 ca                	mov    edx,ecx
c001f158:	b9 34 00 00 00       	mov    ecx,0x34
c001f15d:	29 f9                	sub    ecx,edi
c001f15f:	0f ad d0             	shrd   eax,edx,cl
c001f162:	d3 fa                	sar    edx,cl
c001f164:	f6 c1 20             	test   cl,0x20
c001f167:	74 05                	je     c001f16e <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f169:	89 d0                	mov    eax,edx
c001f16b:	c1 fa 1f             	sar    edx,0x1f
c001f16e:	85 db                	test   ebx,ebx
c001f170:	79 07                	jns    c001f179 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f172:	f7 d8                	neg    eax
c001f174:	83 d2 00             	adc    edx,0x0
c001f177:	f7 da                	neg    edx
c001f179:	5b                   	pop    ebx
c001f17a:	5e                   	pop    esi
c001f17b:	5f                   	pop    edi
c001f17c:	c3                   	ret    

c001f17d <Vm::fpuULongToFloat(unsigned long long)>:
c001f17d:	57                   	push   edi
c001f17e:	31 c9                	xor    ecx,ecx
c001f180:	56                   	push   esi
c001f181:	53                   	push   ebx
c001f182:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f186:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f18a:	0f ba e7 14          	bt     edi,0x14
c001f18e:	72 07                	jb     c001f197 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f190:	01 f6                	add    esi,esi
c001f192:	11 ff                	adc    edi,edi
c001f194:	41                   	inc    ecx
c001f195:	eb f3                	jmp    c001f18a <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f197:	89 fa                	mov    edx,edi
c001f199:	89 f0                	mov    eax,esi
c001f19b:	bb 33 04 00 00       	mov    ebx,0x433
c001f1a0:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f1a6:	29 cb                	sub    ebx,ecx
c001f1a8:	89 d9                	mov    ecx,ebx
c001f1aa:	5b                   	pop    ebx
c001f1ab:	c1 e1 14             	shl    ecx,0x14
c001f1ae:	5e                   	pop    esi
c001f1af:	09 ca                	or     edx,ecx
c001f1b1:	5f                   	pop    edi
c001f1b2:	c3                   	ret    

c001f1b3 <Vm::fpuLongToFloat(long long)>:
c001f1b3:	56                   	push   esi
c001f1b4:	31 c0                	xor    eax,eax
c001f1b6:	53                   	push   ebx
c001f1b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f1bf:	39 c8                	cmp    eax,ecx
c001f1c1:	19 d8                	sbb    eax,ebx
c001f1c3:	7d 04                	jge    c001f1c9 <Vm::fpuLongToFloat(long long)+0x16>
c001f1c5:	31 f6                	xor    esi,esi
c001f1c7:	eb 0c                	jmp    c001f1d5 <Vm::fpuLongToFloat(long long)+0x22>
c001f1c9:	f7 d9                	neg    ecx
c001f1cb:	be 01 00 00 00       	mov    esi,0x1
c001f1d0:	83 d3 00             	adc    ebx,0x0
c001f1d3:	f7 db                	neg    ebx
c001f1d5:	31 c0                	xor    eax,eax
c001f1d7:	0f ba e3 14          	bt     ebx,0x14
c001f1db:	72 07                	jb     c001f1e4 <Vm::fpuLongToFloat(long long)+0x31>
c001f1dd:	01 c9                	add    ecx,ecx
c001f1df:	11 db                	adc    ebx,ebx
c001f1e1:	40                   	inc    eax
c001f1e2:	eb f3                	jmp    c001f1d7 <Vm::fpuLongToFloat(long long)+0x24>
c001f1e4:	ba 33 04 00 00       	mov    edx,0x433
c001f1e9:	29 c2                	sub    edx,eax
c001f1eb:	89 c8                	mov    eax,ecx
c001f1ed:	c1 e2 14             	shl    edx,0x14
c001f1f0:	89 d9                	mov    ecx,ebx
c001f1f2:	89 f3                	mov    ebx,esi
c001f1f4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f1fa:	09 ca                	or     edx,ecx
c001f1fc:	84 db                	test   bl,bl
c001f1fe:	74 06                	je     c001f206 <Vm::fpuLongToFloat(long long)+0x53>
c001f200:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f206:	5b                   	pop    ebx
c001f207:	5e                   	pop    esi
c001f208:	c3                   	ret    

c001f209 <Vm::fpuGet0()>:
c001f209:	31 c0                	xor    eax,eax
c001f20b:	31 d2                	xor    edx,edx
c001f20d:	c3                   	ret    

c001f20e <Vm::fpuGet1()>:
c001f20e:	b8 01 00 00 00       	mov    eax,0x1
c001f213:	31 d2                	xor    edx,edx
c001f215:	c3                   	ret    

c001f216 <Vm::fpuGetPi()>:
c001f216:	b8 03 00 00 00       	mov    eax,0x3
c001f21b:	31 d2                	xor    edx,edx
c001f21d:	c3                   	ret    

c001f21e <Vm::fpuGetLog2E()>:
c001f21e:	83 ec 18             	sub    esp,0x18
c001f221:	68 68 c0 02 c0       	push   0xc002c068
c001f226:	e8 74 af ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001f22b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f230:	31 d2                	xor    edx,edx
c001f232:	83 c4 1c             	add    esp,0x1c
c001f235:	c3                   	ret    

c001f236 <Vm::fpuGetLogE2()>:
c001f236:	83 ec 18             	sub    esp,0x18
c001f239:	68 74 c0 02 c0       	push   0xc002c074
c001f23e:	e8 5c af ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001f243:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f248:	31 d2                	xor    edx,edx
c001f24a:	83 c4 1c             	add    esp,0x1c
c001f24d:	c3                   	ret    

c001f24e <Vm::fpuGetLog210()>:
c001f24e:	83 ec 18             	sub    esp,0x18
c001f251:	68 80 c0 02 c0       	push   0xc002c080
c001f256:	e8 44 af ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001f25b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f260:	31 d2                	xor    edx,edx
c001f262:	83 c4 1c             	add    esp,0x1c
c001f265:	c3                   	ret    

c001f266 <Vm::fpuGetLog102()>:
c001f266:	83 ec 18             	sub    esp,0x18
c001f269:	68 8d c0 02 c0       	push   0xc002c08d
c001f26e:	e8 2c af ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001f273:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f278:	31 d2                	xor    edx,edx
c001f27a:	83 c4 1c             	add    esp,0x1c
c001f27d:	c3                   	ret    

c001f27e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f27e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f282:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f28a:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f28e:	0f 92 c0             	setb   al
c001f291:	c3                   	ret    

c001f292 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f29e:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f2a2:	09 c2                	or     edx,eax
c001f2a4:	0f 94 c0             	sete   al
c001f2a7:	c3                   	ret    

c001f2a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f2a8:	57                   	push   edi
c001f2a9:	56                   	push   esi
c001f2aa:	53                   	push   ebx
c001f2ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f2b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f2b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f2bb:	57                   	push   edi
c001f2bc:	56                   	push   esi
c001f2bd:	53                   	push   ebx
c001f2be:	51                   	push   ecx
c001f2bf:	e8 ce ff ff ff       	call   c001f292 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f2c4:	83 c4 10             	add    esp,0x10
c001f2c7:	88 c2                	mov    dl,al
c001f2c9:	31 c0                	xor    eax,eax
c001f2cb:	84 d2                	test   dl,dl
c001f2cd:	75 0c                	jne    c001f2db <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f2cf:	57                   	push   edi
c001f2d0:	56                   	push   esi
c001f2d1:	53                   	push   ebx
c001f2d2:	51                   	push   ecx
c001f2d3:	e8 a6 ff ff ff       	call   c001f27e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f2d8:	83 c4 10             	add    esp,0x10
c001f2db:	83 e0 01             	and    eax,0x1
c001f2de:	5b                   	pop    ebx
c001f2df:	88 c1                	mov    cl,al
c001f2e1:	83 e2 01             	and    edx,0x1
c001f2e4:	a0 e1 12 03 c0       	mov    al,ds:0xc00312e1
c001f2e9:	c1 e2 06             	shl    edx,0x6
c001f2ec:	83 e0 ba             	and    eax,0xffffffba
c001f2ef:	5e                   	pop    esi
c001f2f0:	09 c8                	or     eax,ecx
c001f2f2:	5f                   	pop    edi
c001f2f3:	09 d0                	or     eax,edx
c001f2f5:	a2 e1 12 03 c0       	mov    ds:0xc00312e1,al
c001f2fa:	c3                   	ret    

c001f2fb <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f2fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f303:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f307:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f30b:	c3                   	ret    

c001f30c <Vm::fpuAbs(unsigned long long)>:
c001f30c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f310:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f314:	c3                   	ret    

c001f315 <Vm::fpuChs(unsigned long long)>:
c001f315:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f319:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f31d:	f7 d8                	neg    eax
c001f31f:	83 d2 00             	adc    edx,0x0
c001f322:	f7 da                	neg    edx
c001f324:	c3                   	ret    

c001f325 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f325:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f329:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f32e:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f332:	eb c7                	jmp    c001f2fb <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f334 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f334:	53                   	push   ebx
c001f335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f339:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f33d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f341:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f345:	0f af ca             	imul   ecx,edx
c001f348:	0f af d8             	imul   ebx,eax
c001f34b:	f7 e2                	mul    edx
c001f34d:	01 d9                	add    ecx,ebx
c001f34f:	5b                   	pop    ebx
c001f350:	01 ca                	add    edx,ecx
c001f352:	c3                   	ret    

c001f353 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f353:	83 ec 0c             	sub    esp,0xc
c001f356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f366:	e8 a1 70 00 00       	call   c002640c <__udivdi3>
c001f36b:	83 c4 1c             	add    esp,0x1c
c001f36e:	c3                   	ret    

c001f36f <Vm::fpuSquare(unsigned long long)>:
c001f36f:	50                   	push   eax
c001f370:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f374:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f378:	52                   	push   edx
c001f379:	50                   	push   eax
c001f37a:	52                   	push   edx
c001f37b:	50                   	push   eax
c001f37c:	e8 b3 ff ff ff       	call   c001f334 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f381:	83 c4 14             	add    esp,0x14
c001f384:	c3                   	ret    

c001f385 <Vm::fpuGetReg(int)>:
c001f385:	83 ec 0c             	sub    esp,0xc
c001f388:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f38d:	76 10                	jbe    c001f39f <Vm::fpuGetReg(int)+0x1a>
c001f38f:	83 ec 0c             	sub    esp,0xc
c001f392:	68 9a c0 02 c0       	push   0xc002c09a
c001f397:	e8 03 ae ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001f39c:	83 c4 10             	add    esp,0x10
c001f39f:	a0 e1 12 03 c0       	mov    al,ds:0xc00312e1
c001f3a4:	b9 08 00 00 00       	mov    ecx,0x8
c001f3a9:	c0 e8 03             	shr    al,0x3
c001f3ac:	83 e0 07             	and    eax,0x7
c001f3af:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f3b3:	99                   	cdq    
c001f3b4:	f7 f9                	idiv   ecx
c001f3b6:	8b 04 d5 e4 12 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffced1c]
c001f3bd:	8b 14 d5 e8 12 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffced18]
c001f3c4:	83 c4 0c             	add    esp,0xc
c001f3c7:	c3                   	ret    

c001f3c8 <Vm::fpuSetReg(int, unsigned long long)>:
c001f3c8:	57                   	push   edi
c001f3c9:	56                   	push   esi
c001f3ca:	52                   	push   edx
c001f3cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f3cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f3d3:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f3d8:	76 10                	jbe    c001f3ea <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f3da:	83 ec 0c             	sub    esp,0xc
c001f3dd:	68 ad c0 02 c0       	push   0xc002c0ad
c001f3e2:	e8 b8 ad ff ff       	call   c001a19f <Krnl::panic(char const*)>
c001f3e7:	83 c4 10             	add    esp,0x10
c001f3ea:	a0 e1 12 03 c0       	mov    al,ds:0xc00312e1
c001f3ef:	b9 08 00 00 00       	mov    ecx,0x8
c001f3f4:	c0 e8 03             	shr    al,0x3
c001f3f7:	83 e0 07             	and    eax,0x7
c001f3fa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f3fe:	99                   	cdq    
c001f3ff:	f7 f9                	idiv   ecx
c001f401:	89 34 d5 e4 12 03 c0 	mov    DWORD PTR [edx*8-0x3ffced1c],esi
c001f408:	89 3c d5 e8 12 03 c0 	mov    DWORD PTR [edx*8-0x3ffced18],edi
c001f40f:	58                   	pop    eax
c001f410:	5e                   	pop    esi
c001f411:	5f                   	pop    edi
c001f412:	c3                   	ret    

c001f413 <Vm::fpuPush(unsigned long long)>:
c001f413:	a0 e1 12 03 c0       	mov    al,ds:0xc00312e1
c001f418:	c0 e8 03             	shr    al,0x3
c001f41b:	83 e0 07             	and    eax,0x7
c001f41e:	83 c0 07             	add    eax,0x7
c001f421:	88 c2                	mov    dl,al
c001f423:	83 e0 07             	and    eax,0x7
c001f426:	83 e2 07             	and    edx,0x7
c001f429:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f430:	8a 15 e1 12 03 c0    	mov    dl,BYTE PTR ds:0xc00312e1
c001f436:	83 e2 c7             	and    edx,0xffffffc7
c001f439:	09 ca                	or     edx,ecx
c001f43b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f43f:	88 15 e1 12 03 c0    	mov    BYTE PTR ds:0xc00312e1,dl
c001f445:	89 0c c5 e8 12 03 c0 	mov    DWORD PTR [eax*8-0x3ffced18],ecx
c001f44c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f450:	89 14 c5 e4 12 03 c0 	mov    DWORD PTR [eax*8-0x3ffced1c],edx
c001f457:	a1 24 13 03 c0       	mov    eax,ds:0xc0031324
c001f45c:	83 f8 08             	cmp    eax,0x8
c001f45f:	75 08                	jne    c001f469 <Vm::fpuPush(unsigned long long)+0x56>
c001f461:	80 0d e0 12 03 c0 40 	or     BYTE PTR ds:0xc00312e0,0x40
c001f468:	c3                   	ret    
c001f469:	40                   	inc    eax
c001f46a:	a3 24 13 03 c0       	mov    ds:0xc0031324,eax
c001f46f:	c3                   	ret    

c001f470 <Vm::fpuPop()>:
c001f470:	8a 0d e1 12 03 c0    	mov    cl,BYTE PTR ds:0xc00312e1
c001f476:	53                   	push   ebx
c001f477:	c0 e9 03             	shr    cl,0x3
c001f47a:	8a 1d e1 12 03 c0    	mov    bl,BYTE PTR ds:0xc00312e1
c001f480:	83 e1 07             	and    ecx,0x7
c001f483:	83 e3 c7             	and    ebx,0xffffffc7
c001f486:	8b 04 cd e4 12 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffced1c]
c001f48d:	8b 14 cd e8 12 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffced18]
c001f494:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f49b:	83 e1 38             	and    ecx,0x38
c001f49e:	09 d9                	or     ecx,ebx
c001f4a0:	88 0d e1 12 03 c0    	mov    BYTE PTR ds:0xc00312e1,cl
c001f4a6:	8b 0d 24 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031324
c001f4ac:	85 c9                	test   ecx,ecx
c001f4ae:	74 09                	je     c001f4b9 <Vm::fpuPop()+0x49>
c001f4b0:	49                   	dec    ecx
c001f4b1:	89 0d 24 13 03 c0    	mov    DWORD PTR ds:0xc0031324,ecx
c001f4b7:	eb 07                	jmp    c001f4c0 <Vm::fpuPop()+0x50>
c001f4b9:	80 0d e0 12 03 c0 40 	or     BYTE PTR ds:0xc00312e0,0x40
c001f4c0:	5b                   	pop    ebx
c001f4c1:	c3                   	ret    

c001f4c2 <Vm::x87Handler(regs*)>:
c001f4c2:	55                   	push   ebp
c001f4c3:	57                   	push   edi
c001f4c4:	56                   	push   esi
c001f4c5:	53                   	push   ebx
c001f4c6:	83 ec 1c             	sub    esp,0x1c
c001f4c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f4cd:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f4d2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f4d5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f4dd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f4e1:	50                   	push   eax
c001f4e2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f4e6:	50                   	push   eax
c001f4e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f4eb:	50                   	push   eax
c001f4ec:	53                   	push   ebx
c001f4ed:	e8 32 a3 ff ff       	call   c0019824 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f4f2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f4f5:	83 c4 10             	add    esp,0x10
c001f4f8:	89 c6                	mov    esi,eax
c001f4fa:	80 fa d9             	cmp    dl,0xd9
c001f4fd:	0f 85 52 01 00 00    	jne    c001f655 <Vm::x87Handler(regs*)+0x193>
c001f503:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f507:	8d 50 20             	lea    edx,[eax+0x20]
c001f50a:	80 fa 0e             	cmp    dl,0xe
c001f50d:	0f 87 86 00 00 00    	ja     c001f599 <Vm::x87Handler(regs*)+0xd7>
c001f513:	0f b6 d2             	movzx  edx,dl
c001f516:	ff 24 95 c0 c0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3f40]
c001f51d:	e8 e7 fc ff ff       	call   c001f209 <Vm::fpuGet0()>
c001f522:	eb 05                	jmp    c001f529 <Vm::x87Handler(regs*)+0x67>
c001f524:	e8 e5 fc ff ff       	call   c001f20e <Vm::fpuGet1()>
c001f529:	57                   	push   edi
c001f52a:	57                   	push   edi
c001f52b:	52                   	push   edx
c001f52c:	50                   	push   eax
c001f52d:	e8 e1 fe ff ff       	call   c001f413 <Vm::fpuPush(unsigned long long)>
c001f532:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f536:	83 c4 10             	add    esp,0x10
c001f539:	b0 01                	mov    al,0x1
c001f53b:	e9 e3 09 00 00       	jmp    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001f540:	83 ec 0c             	sub    esp,0xc
c001f543:	6a 00                	push   0x0
c001f545:	e8 3b fe ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f54a:	59                   	pop    ecx
c001f54b:	5e                   	pop    esi
c001f54c:	52                   	push   edx
c001f54d:	50                   	push   eax
c001f54e:	e8 c2 fd ff ff       	call   c001f315 <Vm::fpuChs(unsigned long long)>
c001f553:	eb 13                	jmp    c001f568 <Vm::x87Handler(regs*)+0xa6>
c001f555:	83 ec 0c             	sub    esp,0xc
c001f558:	6a 00                	push   0x0
c001f55a:	e8 26 fe ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f55f:	5f                   	pop    edi
c001f560:	5d                   	pop    ebp
c001f561:	52                   	push   edx
c001f562:	50                   	push   eax
c001f563:	e8 a4 fd ff ff       	call   c001f30c <Vm::fpuAbs(unsigned long long)>
c001f568:	83 c4 0c             	add    esp,0xc
c001f56b:	52                   	push   edx
c001f56c:	50                   	push   eax
c001f56d:	6a 00                	push   0x0
c001f56f:	e8 54 fe ff ff       	call   c001f3c8 <Vm::fpuSetReg(int, unsigned long long)>
c001f574:	eb bc                	jmp    c001f532 <Vm::x87Handler(regs*)+0x70>
c001f576:	e8 d3 fc ff ff       	call   c001f24e <Vm::fpuGetLog210()>
c001f57b:	eb ac                	jmp    c001f529 <Vm::x87Handler(regs*)+0x67>
c001f57d:	e8 9c fc ff ff       	call   c001f21e <Vm::fpuGetLog2E()>
c001f582:	eb a5                	jmp    c001f529 <Vm::x87Handler(regs*)+0x67>
c001f584:	e8 8d fc ff ff       	call   c001f216 <Vm::fpuGetPi()>
c001f589:	eb 9e                	jmp    c001f529 <Vm::x87Handler(regs*)+0x67>
c001f58b:	e8 d6 fc ff ff       	call   c001f266 <Vm::fpuGetLog102()>
c001f590:	eb 97                	jmp    c001f529 <Vm::x87Handler(regs*)+0x67>
c001f592:	e8 9f fc ff ff       	call   c001f236 <Vm::fpuGetLogE2()>
c001f597:	eb 90                	jmp    c001f529 <Vm::x87Handler(regs*)+0x67>
c001f599:	8d 50 40             	lea    edx,[eax+0x40]
c001f59c:	80 fa 07             	cmp    dl,0x7
c001f59f:	77 15                	ja     c001f5b6 <Vm::x87Handler(regs*)+0xf4>
c001f5a1:	83 ec 0c             	sub    esp,0xc
c001f5a4:	2d c0 00 00 00       	sub    eax,0xc0
c001f5a9:	50                   	push   eax
c001f5aa:	e8 d6 fd ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f5af:	59                   	pop    ecx
c001f5b0:	5e                   	pop    esi
c001f5b1:	e9 75 ff ff ff       	jmp    c001f52b <Vm::x87Handler(regs*)+0x69>
c001f5b6:	8d 50 38             	lea    edx,[eax+0x38]
c001f5b9:	80 fa 07             	cmp    dl,0x7
c001f5bc:	77 3c                	ja     c001f5fa <Vm::x87Handler(regs*)+0x138>
c001f5be:	83 ec 0c             	sub    esp,0xc
c001f5c1:	2d c8 00 00 00       	sub    eax,0xc8
c001f5c6:	50                   	push   eax
c001f5c7:	e8 b9 fd ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f5cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5d3:	89 c6                	mov    esi,eax
c001f5d5:	89 d7                	mov    edi,edx
c001f5d7:	e8 a9 fd ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f5dc:	83 c4 0c             	add    esp,0xc
c001f5df:	52                   	push   edx
c001f5e0:	50                   	push   eax
c001f5e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5e5:	2d c8 00 00 00       	sub    eax,0xc8
c001f5ea:	50                   	push   eax
c001f5eb:	e8 d8 fd ff ff       	call   c001f3c8 <Vm::fpuSetReg(int, unsigned long long)>
c001f5f0:	83 c4 0c             	add    esp,0xc
c001f5f3:	57                   	push   edi
c001f5f4:	56                   	push   esi
c001f5f5:	e9 73 ff ff ff       	jmp    c001f56d <Vm::x87Handler(regs*)+0xab>
c001f5fa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f5fe:	84 d2                	test   dl,dl
c001f600:	75 0f                	jne    c001f611 <Vm::x87Handler(regs*)+0x14f>
c001f602:	83 ec 0c             	sub    esp,0xc
c001f605:	ff 36                	push   DWORD PTR [esi]
c001f607:	e8 c8 fa ff ff       	call   c001f0d4 <Vm::fpu32ToInternal(unsigned int)>
c001f60c:	e9 bf 00 00 00       	jmp    c001f6d0 <Vm::x87Handler(regs*)+0x20e>
c001f611:	80 fa 03             	cmp    dl,0x3
c001f614:	75 13                	jne    c001f629 <Vm::x87Handler(regs*)+0x167>
c001f616:	e8 55 fe ff ff       	call   c001f470 <Vm::fpuPop()>
c001f61b:	55                   	push   ebp
c001f61c:	55                   	push   ebp
c001f61d:	52                   	push   edx
c001f61e:	50                   	push   eax
c001f61f:	e8 4c fa ff ff       	call   c001f070 <Vm::fpuInternalTo32(unsigned long long)>
c001f624:	e9 88 00 00 00       	jmp    c001f6b1 <Vm::x87Handler(regs*)+0x1ef>
c001f629:	80 fa 05             	cmp    dl,0x5
c001f62c:	75 0e                	jne    c001f63c <Vm::x87Handler(regs*)+0x17a>
c001f62e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f631:	66 a3 e2 12 03 c0    	mov    ds:0xc00312e2,ax
c001f637:	e9 df 00 00 00       	jmp    c001f71b <Vm::x87Handler(regs*)+0x259>
c001f63c:	31 c0                	xor    eax,eax
c001f63e:	80 fa 07             	cmp    dl,0x7
c001f641:	0f 85 dc 08 00 00    	jne    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001f647:	66 a1 e2 12 03 c0    	mov    ax,ds:0xc00312e2
c001f64d:	66 89 06             	mov    WORD PTR [esi],ax
c001f650:	e9 c6 00 00 00       	jmp    c001f71b <Vm::x87Handler(regs*)+0x259>
c001f655:	80 fa d8             	cmp    dl,0xd8
c001f658:	0f 84 c9 00 00 00    	je     c001f727 <Vm::x87Handler(regs*)+0x265>
c001f65e:	80 fa dc             	cmp    dl,0xdc
c001f661:	0f 84 0d 02 00 00    	je     c001f874 <Vm::x87Handler(regs*)+0x3b2>
c001f667:	80 fa de             	cmp    dl,0xde
c001f66a:	0f 84 cd 02 00 00    	je     c001f93d <Vm::x87Handler(regs*)+0x47b>
c001f670:	80 fa dd             	cmp    dl,0xdd
c001f673:	0f 84 5f 04 00 00    	je     c001fad8 <Vm::x87Handler(regs*)+0x616>
c001f679:	80 fa da             	cmp    dl,0xda
c001f67c:	0f 84 24 05 00 00    	je     c001fba6 <Vm::x87Handler(regs*)+0x6e4>
c001f682:	80 fa df             	cmp    dl,0xdf
c001f685:	0f 84 68 05 00 00    	je     c001fbf3 <Vm::x87Handler(regs*)+0x731>
c001f68b:	31 c0                	xor    eax,eax
c001f68d:	80 fa db             	cmp    dl,0xdb
c001f690:	0f 85 8d 08 00 00    	jne    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001f696:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f69a:	80 fa 03             	cmp    dl,0x3
c001f69d:	0f 85 70 06 00 00    	jne    c001fd13 <Vm::x87Handler(regs*)+0x851>
c001f6a3:	e8 c8 fd ff ff       	call   c001f470 <Vm::fpuPop()>
c001f6a8:	55                   	push   ebp
c001f6a9:	55                   	push   ebp
c001f6aa:	52                   	push   edx
c001f6ab:	50                   	push   eax
c001f6ac:	e8 71 fa ff ff       	call   c001f122 <Vm::fpuFloatToLong(unsigned long long)>
c001f6b1:	83 c4 10             	add    esp,0x10
c001f6b4:	89 06                	mov    DWORD PTR [esi],eax
c001f6b6:	eb 63                	jmp    c001f71b <Vm::x87Handler(regs*)+0x259>
c001f6b8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f6bc:	84 d2                	test   dl,dl
c001f6be:	0f 85 e6 05 00 00    	jne    c001fcaa <Vm::x87Handler(regs*)+0x7e8>
c001f6c4:	57                   	push   edi
c001f6c5:	57                   	push   edi
c001f6c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6c9:	ff 36                	push   DWORD PTR [esi]
c001f6cb:	e8 49 fa ff ff       	call   c001f119 <Vm::fpu64ToInternal(unsigned long long)>
c001f6d0:	5e                   	pop    esi
c001f6d1:	5f                   	pop    edi
c001f6d2:	52                   	push   edx
c001f6d3:	50                   	push   eax
c001f6d4:	e8 3a fd ff ff       	call   c001f413 <Vm::fpuPush(unsigned long long)>
c001f6d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f6dd:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f6e0:	e9 51 fe ff ff       	jmp    c001f536 <Vm::x87Handler(regs*)+0x74>
c001f6e5:	80 fa 03             	cmp    dl,0x3
c001f6e8:	0f 85 d7 06 00 00    	jne    c001fdc5 <Vm::x87Handler(regs*)+0x903>
c001f6ee:	57                   	push   edi
c001f6ef:	57                   	push   edi
c001f6f0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6f3:	ff 36                	push   DWORD PTR [esi]
c001f6f5:	e8 1f fa ff ff       	call   c001f119 <Vm::fpu64ToInternal(unsigned long long)>
c001f6fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f701:	89 c6                	mov    esi,eax
c001f703:	89 d7                	mov    edi,edx
c001f705:	e8 7b fc ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f70a:	57                   	push   edi
c001f70b:	56                   	push   esi
c001f70c:	52                   	push   edx
c001f70d:	50                   	push   eax
c001f70e:	e8 95 fb ff ff       	call   c001f2a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f713:	83 c4 20             	add    esp,0x20
c001f716:	e8 55 fd ff ff       	call   c001f470 <Vm::fpuPop()>
c001f71b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f71f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f722:	e9 12 fe ff ff       	jmp    c001f539 <Vm::x87Handler(regs*)+0x77>
c001f727:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f72b:	8d 50 40             	lea    edx,[eax+0x40]
c001f72e:	80 fa 07             	cmp    dl,0x7
c001f731:	77 29                	ja     c001f75c <Vm::x87Handler(regs*)+0x29a>
c001f733:	83 ec 0c             	sub    esp,0xc
c001f736:	2d c0 00 00 00       	sub    eax,0xc0
c001f73b:	50                   	push   eax
c001f73c:	e8 44 fc ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f741:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f748:	89 c6                	mov    esi,eax
c001f74a:	89 d7                	mov    edi,edx
c001f74c:	e8 34 fc ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f751:	57                   	push   edi
c001f752:	56                   	push   esi
c001f753:	52                   	push   edx
c001f754:	50                   	push   eax
c001f755:	e8 a1 fb ff ff       	call   c001f2fb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f75a:	eb 2f                	jmp    c001f78b <Vm::x87Handler(regs*)+0x2c9>
c001f75c:	8d 50 38             	lea    edx,[eax+0x38]
c001f75f:	80 fa 07             	cmp    dl,0x7
c001f762:	77 2f                	ja     c001f793 <Vm::x87Handler(regs*)+0x2d1>
c001f764:	83 ec 0c             	sub    esp,0xc
c001f767:	2d c8 00 00 00       	sub    eax,0xc8
c001f76c:	50                   	push   eax
c001f76d:	e8 13 fc ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f772:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f779:	89 c6                	mov    esi,eax
c001f77b:	89 d7                	mov    edi,edx
c001f77d:	e8 03 fc ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f782:	57                   	push   edi
c001f783:	56                   	push   esi
c001f784:	52                   	push   edx
c001f785:	50                   	push   eax
c001f786:	e8 a9 fb ff ff       	call   c001f334 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f78b:	83 c4 1c             	add    esp,0x1c
c001f78e:	e9 d8 fd ff ff       	jmp    c001f56b <Vm::x87Handler(regs*)+0xa9>
c001f793:	8d 50 30             	lea    edx,[eax+0x30]
c001f796:	80 fa 07             	cmp    dl,0x7
c001f799:	77 0d                	ja     c001f7a8 <Vm::x87Handler(regs*)+0x2e6>
c001f79b:	83 ec 0c             	sub    esp,0xc
c001f79e:	2d d0 00 00 00       	sub    eax,0xd0
c001f7a3:	e9 99 03 00 00       	jmp    c001fb41 <Vm::x87Handler(regs*)+0x67f>
c001f7a8:	8d 50 28             	lea    edx,[eax+0x28]
c001f7ab:	80 fa 07             	cmp    dl,0x7
c001f7ae:	77 0d                	ja     c001f7bd <Vm::x87Handler(regs*)+0x2fb>
c001f7b0:	83 ec 0c             	sub    esp,0xc
c001f7b3:	2d d8 00 00 00       	sub    eax,0xd8
c001f7b8:	e9 c0 03 00 00       	jmp    c001fb7d <Vm::x87Handler(regs*)+0x6bb>
c001f7bd:	8d 50 20             	lea    edx,[eax+0x20]
c001f7c0:	80 fa 07             	cmp    dl,0x7
c001f7c3:	77 1b                	ja     c001f7e0 <Vm::x87Handler(regs*)+0x31e>
c001f7c5:	83 ec 0c             	sub    esp,0xc
c001f7c8:	2d e0 00 00 00       	sub    eax,0xe0
c001f7cd:	50                   	push   eax
c001f7ce:	e8 b2 fb ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f7d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7da:	89 c6                	mov    esi,eax
c001f7dc:	89 d7                	mov    edi,edx
c001f7de:	eb 22                	jmp    c001f802 <Vm::x87Handler(regs*)+0x340>
c001f7e0:	8d 50 18             	lea    edx,[eax+0x18]
c001f7e3:	80 fa 07             	cmp    dl,0x7
c001f7e6:	77 2d                	ja     c001f815 <Vm::x87Handler(regs*)+0x353>
c001f7e8:	83 ec 0c             	sub    esp,0xc
c001f7eb:	6a 00                	push   0x0
c001f7ed:	e8 93 fb ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f7f2:	89 c6                	mov    esi,eax
c001f7f4:	89 d7                	mov    edi,edx
c001f7f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7fa:	2d e8 00 00 00       	sub    eax,0xe8
c001f7ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001f802:	e8 7e fb ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f807:	57                   	push   edi
c001f808:	56                   	push   esi
c001f809:	52                   	push   edx
c001f80a:	50                   	push   eax
c001f80b:	e8 15 fb ff ff       	call   c001f325 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f810:	e9 76 ff ff ff       	jmp    c001f78b <Vm::x87Handler(regs*)+0x2c9>
c001f815:	8d 50 10             	lea    edx,[eax+0x10]
c001f818:	80 fa 07             	cmp    dl,0x7
c001f81b:	77 1b                	ja     c001f838 <Vm::x87Handler(regs*)+0x376>
c001f81d:	83 ec 0c             	sub    esp,0xc
c001f820:	2d f0 00 00 00       	sub    eax,0xf0
c001f825:	50                   	push   eax
c001f826:	e8 5a fb ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f82b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f832:	89 c6                	mov    esi,eax
c001f834:	89 d7                	mov    edi,edx
c001f836:	eb 22                	jmp    c001f85a <Vm::x87Handler(regs*)+0x398>
c001f838:	3c f7                	cmp    al,0xf7
c001f83a:	0f 86 d1 03 00 00    	jbe    c001fc11 <Vm::x87Handler(regs*)+0x74f>
c001f840:	83 ec 0c             	sub    esp,0xc
c001f843:	6a 00                	push   0x0
c001f845:	e8 3b fb ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f84a:	89 c6                	mov    esi,eax
c001f84c:	89 d7                	mov    edi,edx
c001f84e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f852:	2d f8 00 00 00       	sub    eax,0xf8
c001f857:	89 04 24             	mov    DWORD PTR [esp],eax
c001f85a:	e8 26 fb ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f85f:	57                   	push   edi
c001f860:	56                   	push   esi
c001f861:	52                   	push   edx
c001f862:	50                   	push   eax
c001f863:	e8 eb fa ff ff       	call   c001f353 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f868:	83 c4 1c             	add    esp,0x1c
c001f86b:	52                   	push   edx
c001f86c:	50                   	push   eax
c001f86d:	6a 00                	push   0x0
c001f86f:	e9 51 02 00 00       	jmp    c001fac5 <Vm::x87Handler(regs*)+0x603>
c001f874:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f878:	8d 50 40             	lea    edx,[eax+0x40]
c001f87b:	80 fa 07             	cmp    dl,0x7
c001f87e:	77 37                	ja     c001f8b7 <Vm::x87Handler(regs*)+0x3f5>
c001f880:	83 ec 0c             	sub    esp,0xc
c001f883:	2d c0 00 00 00       	sub    eax,0xc0
c001f888:	50                   	push   eax
c001f889:	e8 f7 fa ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f88e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f895:	89 c6                	mov    esi,eax
c001f897:	89 d7                	mov    edi,edx
c001f899:	e8 e7 fa ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f89e:	57                   	push   edi
c001f89f:	56                   	push   esi
c001f8a0:	52                   	push   edx
c001f8a1:	50                   	push   eax
c001f8a2:	e8 54 fa ff ff       	call   c001f2fb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f8a7:	83 c4 1c             	add    esp,0x1c
c001f8aa:	52                   	push   edx
c001f8ab:	50                   	push   eax
c001f8ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8b0:	2d c0 00 00 00       	sub    eax,0xc0
c001f8b5:	eb 3d                	jmp    c001f8f4 <Vm::x87Handler(regs*)+0x432>
c001f8b7:	8d 50 38             	lea    edx,[eax+0x38]
c001f8ba:	80 fa 07             	cmp    dl,0x7
c001f8bd:	77 3b                	ja     c001f8fa <Vm::x87Handler(regs*)+0x438>
c001f8bf:	83 ec 0c             	sub    esp,0xc
c001f8c2:	2d c8 00 00 00       	sub    eax,0xc8
c001f8c7:	50                   	push   eax
c001f8c8:	e8 b8 fa ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f8cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8d4:	89 c6                	mov    esi,eax
c001f8d6:	89 d7                	mov    edi,edx
c001f8d8:	e8 a8 fa ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f8dd:	57                   	push   edi
c001f8de:	56                   	push   esi
c001f8df:	52                   	push   edx
c001f8e0:	50                   	push   eax
c001f8e1:	e8 4e fa ff ff       	call   c001f334 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8e6:	83 c4 1c             	add    esp,0x1c
c001f8e9:	52                   	push   edx
c001f8ea:	50                   	push   eax
c001f8eb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8ef:	2d c8 00 00 00       	sub    eax,0xc8
c001f8f4:	50                   	push   eax
c001f8f5:	e9 75 fc ff ff       	jmp    c001f56f <Vm::x87Handler(regs*)+0xad>
c001f8fa:	83 c0 18             	add    eax,0x18
c001f8fd:	3c 07                	cmp    al,0x7
c001f8ff:	0f 87 3b 04 00 00    	ja     c001fd40 <Vm::x87Handler(regs*)+0x87e>
c001f905:	83 ec 0c             	sub    esp,0xc
c001f908:	6a 00                	push   0x0
c001f90a:	e8 76 fa ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f90f:	89 c6                	mov    esi,eax
c001f911:	89 d7                	mov    edi,edx
c001f913:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f917:	2d e8 00 00 00       	sub    eax,0xe8
c001f91c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f91f:	e8 61 fa ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f924:	57                   	push   edi
c001f925:	56                   	push   esi
c001f926:	52                   	push   edx
c001f927:	50                   	push   eax
c001f928:	e8 f8 f9 ff ff       	call   c001f325 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f92d:	83 c4 1c             	add    esp,0x1c
c001f930:	52                   	push   edx
c001f931:	50                   	push   eax
c001f932:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f936:	2d e8 00 00 00       	sub    eax,0xe8
c001f93b:	eb b7                	jmp    c001f8f4 <Vm::x87Handler(regs*)+0x432>
c001f93d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f941:	8d 50 40             	lea    edx,[eax+0x40]
c001f944:	80 fa 07             	cmp    dl,0x7
c001f947:	77 3a                	ja     c001f983 <Vm::x87Handler(regs*)+0x4c1>
c001f949:	83 ec 0c             	sub    esp,0xc
c001f94c:	2d c0 00 00 00       	sub    eax,0xc0
c001f951:	50                   	push   eax
c001f952:	e8 2e fa ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f957:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f95e:	89 c6                	mov    esi,eax
c001f960:	89 d7                	mov    edi,edx
c001f962:	e8 1e fa ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f967:	57                   	push   edi
c001f968:	56                   	push   esi
c001f969:	52                   	push   edx
c001f96a:	50                   	push   eax
c001f96b:	e8 8b f9 ff ff       	call   c001f2fb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f970:	83 c4 1c             	add    esp,0x1c
c001f973:	52                   	push   edx
c001f974:	50                   	push   eax
c001f975:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f979:	2d c0 00 00 00       	sub    eax,0xc0
c001f97e:	e9 9e 01 00 00       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x65f>
c001f983:	8d 50 20             	lea    edx,[eax+0x20]
c001f986:	80 fa 07             	cmp    dl,0x7
c001f989:	77 3a                	ja     c001f9c5 <Vm::x87Handler(regs*)+0x503>
c001f98b:	83 ec 0c             	sub    esp,0xc
c001f98e:	2d e0 00 00 00       	sub    eax,0xe0
c001f993:	50                   	push   eax
c001f994:	e8 ec f9 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f999:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9a0:	89 c6                	mov    esi,eax
c001f9a2:	89 d7                	mov    edi,edx
c001f9a4:	e8 dc f9 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f9a9:	57                   	push   edi
c001f9aa:	56                   	push   esi
c001f9ab:	52                   	push   edx
c001f9ac:	50                   	push   eax
c001f9ad:	e8 73 f9 ff ff       	call   c001f325 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f9b2:	83 c4 1c             	add    esp,0x1c
c001f9b5:	52                   	push   edx
c001f9b6:	50                   	push   eax
c001f9b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9bb:	2d e0 00 00 00       	sub    eax,0xe0
c001f9c0:	e9 5c 01 00 00       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x65f>
c001f9c5:	8d 50 18             	lea    edx,[eax+0x18]
c001f9c8:	80 fa 07             	cmp    dl,0x7
c001f9cb:	77 3b                	ja     c001fa08 <Vm::x87Handler(regs*)+0x546>
c001f9cd:	83 ec 0c             	sub    esp,0xc
c001f9d0:	6a 00                	push   0x0
c001f9d2:	e8 ae f9 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f9d7:	89 c6                	mov    esi,eax
c001f9d9:	89 d7                	mov    edi,edx
c001f9db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9df:	2d e8 00 00 00       	sub    eax,0xe8
c001f9e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9e7:	e8 99 f9 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001f9ec:	57                   	push   edi
c001f9ed:	56                   	push   esi
c001f9ee:	52                   	push   edx
c001f9ef:	50                   	push   eax
c001f9f0:	e8 30 f9 ff ff       	call   c001f325 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f9f5:	83 c4 1c             	add    esp,0x1c
c001f9f8:	52                   	push   edx
c001f9f9:	50                   	push   eax
c001f9fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9fe:	2d e8 00 00 00       	sub    eax,0xe8
c001fa03:	e9 19 01 00 00       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x65f>
c001fa08:	8d 50 38             	lea    edx,[eax+0x38]
c001fa0b:	80 fa 07             	cmp    dl,0x7
c001fa0e:	77 37                	ja     c001fa47 <Vm::x87Handler(regs*)+0x585>
c001fa10:	83 ec 0c             	sub    esp,0xc
c001fa13:	2d c8 00 00 00       	sub    eax,0xc8
c001fa18:	50                   	push   eax
c001fa19:	e8 67 f9 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fa1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa25:	89 c6                	mov    esi,eax
c001fa27:	89 d7                	mov    edi,edx
c001fa29:	e8 57 f9 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fa2e:	57                   	push   edi
c001fa2f:	56                   	push   esi
c001fa30:	52                   	push   edx
c001fa31:	50                   	push   eax
c001fa32:	e8 fd f8 ff ff       	call   c001f334 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa37:	83 c4 1c             	add    esp,0x1c
c001fa3a:	52                   	push   edx
c001fa3b:	50                   	push   eax
c001fa3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa40:	2d c8 00 00 00       	sub    eax,0xc8
c001fa45:	eb 7d                	jmp    c001fac4 <Vm::x87Handler(regs*)+0x602>
c001fa47:	3c f7                	cmp    al,0xf7
c001fa49:	76 38                	jbe    c001fa83 <Vm::x87Handler(regs*)+0x5c1>
c001fa4b:	83 ec 0c             	sub    esp,0xc
c001fa4e:	6a 00                	push   0x0
c001fa50:	e8 30 f9 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fa55:	89 c6                	mov    esi,eax
c001fa57:	89 d7                	mov    edi,edx
c001fa59:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa5d:	2d f8 00 00 00       	sub    eax,0xf8
c001fa62:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa65:	e8 1b f9 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fa6a:	57                   	push   edi
c001fa6b:	56                   	push   esi
c001fa6c:	52                   	push   edx
c001fa6d:	50                   	push   eax
c001fa6e:	e8 e0 f8 ff ff       	call   c001f353 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa73:	83 c4 1c             	add    esp,0x1c
c001fa76:	52                   	push   edx
c001fa77:	50                   	push   eax
c001fa78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa7c:	2d f8 00 00 00       	sub    eax,0xf8
c001fa81:	eb 41                	jmp    c001fac4 <Vm::x87Handler(regs*)+0x602>
c001fa83:	8d 50 10             	lea    edx,[eax+0x10]
c001fa86:	80 fa 07             	cmp    dl,0x7
c001fa89:	0f 87 5a 01 00 00    	ja     c001fbe9 <Vm::x87Handler(regs*)+0x727>
c001fa8f:	83 ec 0c             	sub    esp,0xc
c001fa92:	2d f0 00 00 00       	sub    eax,0xf0
c001fa97:	50                   	push   eax
c001fa98:	e8 e8 f8 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fa9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faa4:	89 c6                	mov    esi,eax
c001faa6:	89 d7                	mov    edi,edx
c001faa8:	e8 d8 f8 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001faad:	57                   	push   edi
c001faae:	56                   	push   esi
c001faaf:	52                   	push   edx
c001fab0:	50                   	push   eax
c001fab1:	e8 9d f8 ff ff       	call   c001f353 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fab6:	83 c4 1c             	add    esp,0x1c
c001fab9:	52                   	push   edx
c001faba:	50                   	push   eax
c001fabb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fabf:	2d f0 00 00 00       	sub    eax,0xf0
c001fac4:	50                   	push   eax
c001fac5:	e8 fe f8 ff ff       	call   c001f3c8 <Vm::fpuSetReg(int, unsigned long long)>
c001faca:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001face:	e8 9d f9 ff ff       	call   c001f470 <Vm::fpuPop()>
c001fad3:	e9 5e fa ff ff       	jmp    c001f536 <Vm::x87Handler(regs*)+0x74>
c001fad8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fadc:	8d 50 30             	lea    edx,[eax+0x30]
c001fadf:	80 fa 07             	cmp    dl,0x7
c001fae2:	77 1d                	ja     c001fb01 <Vm::x87Handler(regs*)+0x63f>
c001fae4:	83 ec 0c             	sub    esp,0xc
c001fae7:	6a 00                	push   0x0
c001fae9:	e8 97 f8 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001faee:	83 c4 0c             	add    esp,0xc
c001faf1:	52                   	push   edx
c001faf2:	50                   	push   eax
c001faf3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faf7:	2d d0 00 00 00       	sub    eax,0xd0
c001fafc:	e9 f3 fd ff ff       	jmp    c001f8f4 <Vm::x87Handler(regs*)+0x432>
c001fb01:	8d 50 28             	lea    edx,[eax+0x28]
c001fb04:	80 fa 07             	cmp    dl,0x7
c001fb07:	77 28                	ja     c001fb31 <Vm::x87Handler(regs*)+0x66f>
c001fb09:	83 ec 0c             	sub    esp,0xc
c001fb0c:	6a 00                	push   0x0
c001fb0e:	e8 72 f8 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fb13:	83 c4 0c             	add    esp,0xc
c001fb16:	52                   	push   edx
c001fb17:	50                   	push   eax
c001fb18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb1c:	2d d8 00 00 00       	sub    eax,0xd8
c001fb21:	50                   	push   eax
c001fb22:	e8 a1 f8 ff ff       	call   c001f3c8 <Vm::fpuSetReg(int, unsigned long long)>
c001fb27:	e8 44 f9 ff ff       	call   c001f470 <Vm::fpuPop()>
c001fb2c:	e9 01 fa ff ff       	jmp    c001f532 <Vm::x87Handler(regs*)+0x70>
c001fb31:	8d 50 20             	lea    edx,[eax+0x20]
c001fb34:	80 fa 07             	cmp    dl,0x7
c001fb37:	77 30                	ja     c001fb69 <Vm::x87Handler(regs*)+0x6a7>
c001fb39:	83 ec 0c             	sub    esp,0xc
c001fb3c:	2d e0 00 00 00       	sub    eax,0xe0
c001fb41:	50                   	push   eax
c001fb42:	e8 3e f8 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fb47:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb4e:	89 c6                	mov    esi,eax
c001fb50:	89 d7                	mov    edi,edx
c001fb52:	e8 2e f8 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fb57:	57                   	push   edi
c001fb58:	56                   	push   esi
c001fb59:	52                   	push   edx
c001fb5a:	50                   	push   eax
c001fb5b:	e8 48 f7 ff ff       	call   c001f2a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb60:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb64:	e9 54 02 00 00       	jmp    c001fdbd <Vm::x87Handler(regs*)+0x8fb>
c001fb69:	8d 50 18             	lea    edx,[eax+0x18]
c001fb6c:	80 fa 07             	cmp    dl,0x7
c001fb6f:	0f 87 43 fb ff ff    	ja     c001f6b8 <Vm::x87Handler(regs*)+0x1f6>
c001fb75:	83 ec 0c             	sub    esp,0xc
c001fb78:	2d e8 00 00 00       	sub    eax,0xe8
c001fb7d:	50                   	push   eax
c001fb7e:	e8 02 f8 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fb83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb8a:	89 c6                	mov    esi,eax
c001fb8c:	89 d7                	mov    edi,edx
c001fb8e:	e8 f2 f7 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fb93:	57                   	push   edi
c001fb94:	56                   	push   esi
c001fb95:	52                   	push   edx
c001fb96:	50                   	push   eax
c001fb97:	e8 0c f7 ff ff       	call   c001f2a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb9c:	83 c4 20             	add    esp,0x20
c001fb9f:	e8 cc f8 ff ff       	call   c001f470 <Vm::fpuPop()>
c001fba4:	eb 62                	jmp    c001fc08 <Vm::x87Handler(regs*)+0x746>
c001fba6:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fbaa:	0f 85 0f 01 00 00    	jne    c001fcbf <Vm::x87Handler(regs*)+0x7fd>
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	6a 01                	push   0x1
c001fbb5:	e8 cb f7 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fbba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc1:	89 c6                	mov    esi,eax
c001fbc3:	89 d7                	mov    edi,edx
c001fbc5:	e8 bb f7 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fbca:	57                   	push   edi
c001fbcb:	56                   	push   esi
c001fbcc:	52                   	push   edx
c001fbcd:	50                   	push   eax
c001fbce:	e8 d5 f6 ff ff       	call   c001f2a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fbd3:	83 c4 20             	add    esp,0x20
c001fbd6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbda:	e8 91 f8 ff ff       	call   c001f470 <Vm::fpuPop()>
c001fbdf:	e8 8c f8 ff ff       	call   c001f470 <Vm::fpuPop()>
c001fbe4:	e9 50 f9 ff ff       	jmp    c001f539 <Vm::x87Handler(regs*)+0x77>
c001fbe9:	3c d9                	cmp    al,0xd9
c001fbeb:	0f 85 b5 02 00 00    	jne    c001fea6 <Vm::x87Handler(regs*)+0x9e4>
c001fbf1:	eb bd                	jmp    c001fbb0 <Vm::x87Handler(regs*)+0x6ee>
c001fbf3:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fbf7:	0f 85 ea 02 00 00    	jne    c001fee7 <Vm::x87Handler(regs*)+0xa25>
c001fbfd:	0f b7 05 e0 12 03 c0 	movzx  eax,WORD PTR ds:0xc00312e0
c001fc04:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fc08:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc0c:	e9 28 f9 ff ff       	jmp    c001f539 <Vm::x87Handler(regs*)+0x77>
c001fc11:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc15:	84 d2                	test   dl,dl
c001fc17:	75 0f                	jne    c001fc28 <Vm::x87Handler(regs*)+0x766>
c001fc19:	83 ec 0c             	sub    esp,0xc
c001fc1c:	ff 36                	push   DWORD PTR [esi]
c001fc1e:	e8 b1 f4 ff ff       	call   c001f0d4 <Vm::fpu32ToInternal(unsigned int)>
c001fc23:	e9 2c 01 00 00       	jmp    c001fd54 <Vm::x87Handler(regs*)+0x892>
c001fc28:	80 fa 01             	cmp    dl,0x1
c001fc2b:	75 0f                	jne    c001fc3c <Vm::x87Handler(regs*)+0x77a>
c001fc2d:	83 ec 0c             	sub    esp,0xc
c001fc30:	ff 36                	push   DWORD PTR [esi]
c001fc32:	e8 9d f4 ff ff       	call   c001f0d4 <Vm::fpu32ToInternal(unsigned int)>
c001fc37:	e9 81 02 00 00       	jmp    c001febd <Vm::x87Handler(regs*)+0x9fb>
c001fc3c:	80 fa 04             	cmp    dl,0x4
c001fc3f:	75 0f                	jne    c001fc50 <Vm::x87Handler(regs*)+0x78e>
c001fc41:	83 ec 0c             	sub    esp,0xc
c001fc44:	ff 36                	push   DWORD PTR [esi]
c001fc46:	e8 89 f4 ff ff       	call   c001f0d4 <Vm::fpu32ToInternal(unsigned int)>
c001fc4b:	e9 86 01 00 00       	jmp    c001fdd6 <Vm::x87Handler(regs*)+0x914>
c001fc50:	80 fa 05             	cmp    dl,0x5
c001fc53:	75 1b                	jne    c001fc70 <Vm::x87Handler(regs*)+0x7ae>
c001fc55:	83 ec 0c             	sub    esp,0xc
c001fc58:	6a 00                	push   0x0
c001fc5a:	e8 26 f7 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fc5f:	89 c7                	mov    edi,eax
c001fc61:	89 d5                	mov    ebp,edx
c001fc63:	58                   	pop    eax
c001fc64:	ff 36                	push   DWORD PTR [esi]
c001fc66:	e8 69 f4 ff ff       	call   c001f0d4 <Vm::fpu32ToInternal(unsigned int)>
c001fc6b:	e9 a3 01 00 00       	jmp    c001fe13 <Vm::x87Handler(regs*)+0x951>
c001fc70:	80 fa 06             	cmp    dl,0x6
c001fc73:	75 0f                	jne    c001fc84 <Vm::x87Handler(regs*)+0x7c2>
c001fc75:	83 ec 0c             	sub    esp,0xc
c001fc78:	ff 36                	push   DWORD PTR [esi]
c001fc7a:	e8 55 f4 ff ff       	call   c001f0d4 <Vm::fpu32ToInternal(unsigned int)>
c001fc7f:	e9 ae 01 00 00       	jmp    c001fe32 <Vm::x87Handler(regs*)+0x970>
c001fc84:	31 c0                	xor    eax,eax
c001fc86:	80 fa 07             	cmp    dl,0x7
c001fc89:	0f 85 94 02 00 00    	jne    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001fc8f:	83 ec 0c             	sub    esp,0xc
c001fc92:	6a 00                	push   0x0
c001fc94:	e8 ec f6 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fc99:	89 c7                	mov    edi,eax
c001fc9b:	89 d5                	mov    ebp,edx
c001fc9d:	58                   	pop    eax
c001fc9e:	ff 36                	push   DWORD PTR [esi]
c001fca0:	e8 2f f4 ff ff       	call   c001f0d4 <Vm::fpu32ToInternal(unsigned int)>
c001fca5:	e9 cb 01 00 00       	jmp    c001fe75 <Vm::x87Handler(regs*)+0x9b3>
c001fcaa:	80 fa 03             	cmp    dl,0x3
c001fcad:	0f 85 d3 01 00 00    	jne    c001fe86 <Vm::x87Handler(regs*)+0x9c4>
c001fcb3:	e8 b8 f7 ff ff       	call   c001f470 <Vm::fpuPop()>
c001fcb8:	51                   	push   ecx
c001fcb9:	51                   	push   ecx
c001fcba:	e9 de 01 00 00       	jmp    c001fe9d <Vm::x87Handler(regs*)+0x9db>
c001fcbf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcc3:	80 fa 01             	cmp    dl,0x1
c001fcc6:	75 09                	jne    c001fcd1 <Vm::x87Handler(regs*)+0x80f>
c001fcc8:	57                   	push   edi
c001fcc9:	57                   	push   edi
c001fcca:	8b 06                	mov    eax,DWORD PTR [esi]
c001fccc:	e9 e3 01 00 00       	jmp    c001feb4 <Vm::x87Handler(regs*)+0x9f2>
c001fcd1:	80 fa 04             	cmp    dl,0x4
c001fcd4:	75 12                	jne    c001fce8 <Vm::x87Handler(regs*)+0x826>
c001fcd6:	31 d2                	xor    edx,edx
c001fcd8:	51                   	push   ecx
c001fcd9:	51                   	push   ecx
c001fcda:	8b 06                	mov    eax,DWORD PTR [esi]
c001fcdc:	52                   	push   edx
c001fcdd:	50                   	push   eax
c001fcde:	e8 d0 f4 ff ff       	call   c001f1b3 <Vm::fpuLongToFloat(long long)>
c001fce3:	e9 ee 00 00 00       	jmp    c001fdd6 <Vm::x87Handler(regs*)+0x914>
c001fce8:	31 c0                	xor    eax,eax
c001fcea:	80 fa 07             	cmp    dl,0x7
c001fced:	0f 85 30 02 00 00    	jne    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001fcf3:	83 ec 0c             	sub    esp,0xc
c001fcf6:	6a 00                	push   0x0
c001fcf8:	e8 88 f6 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fcfd:	89 c7                	mov    edi,eax
c001fcff:	89 d5                	mov    ebp,edx
c001fd01:	58                   	pop    eax
c001fd02:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd04:	5a                   	pop    edx
c001fd05:	31 d2                	xor    edx,edx
c001fd07:	52                   	push   edx
c001fd08:	50                   	push   eax
c001fd09:	e8 a5 f4 ff ff       	call   c001f1b3 <Vm::fpuLongToFloat(long long)>
c001fd0e:	e9 62 01 00 00       	jmp    c001fe75 <Vm::x87Handler(regs*)+0x9b3>
c001fd13:	84 d2                	test   dl,dl
c001fd15:	75 0d                	jne    c001fd24 <Vm::x87Handler(regs*)+0x862>
c001fd17:	31 d2                	xor    edx,edx
c001fd19:	55                   	push   ebp
c001fd1a:	55                   	push   ebp
c001fd1b:	8b 06                	mov    eax,DWORD PTR [esi]
c001fd1d:	52                   	push   edx
c001fd1e:	50                   	push   eax
c001fd1f:	e9 d3 01 00 00       	jmp    c001fef7 <Vm::x87Handler(regs*)+0xa35>
c001fd24:	31 c0                	xor    eax,eax
c001fd26:	80 fa 02             	cmp    dl,0x2
c001fd29:	0f 85 f4 01 00 00    	jne    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001fd2f:	83 ec 0c             	sub    esp,0xc
c001fd32:	6a 00                	push   0x0
c001fd34:	e8 4c f6 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fd39:	59                   	pop    ecx
c001fd3a:	5f                   	pop    edi
c001fd3b:	e9 6a f9 ff ff       	jmp    c001f6aa <Vm::x87Handler(regs*)+0x1e8>
c001fd40:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd44:	84 d2                	test   dl,dl
c001fd46:	75 2a                	jne    c001fd72 <Vm::x87Handler(regs*)+0x8b0>
c001fd48:	50                   	push   eax
c001fd49:	50                   	push   eax
c001fd4a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd4d:	ff 36                	push   DWORD PTR [esi]
c001fd4f:	e8 c5 f3 ff ff       	call   c001f119 <Vm::fpu64ToInternal(unsigned long long)>
c001fd54:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd5b:	89 c6                	mov    esi,eax
c001fd5d:	89 d7                	mov    edi,edx
c001fd5f:	e8 21 f6 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fd64:	57                   	push   edi
c001fd65:	56                   	push   esi
c001fd66:	52                   	push   edx
c001fd67:	50                   	push   eax
c001fd68:	e8 8e f5 ff ff       	call   c001f2fb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd6d:	e9 64 01 00 00       	jmp    c001fed6 <Vm::x87Handler(regs*)+0xa14>
c001fd72:	80 fa 01             	cmp    dl,0x1
c001fd75:	75 11                	jne    c001fd88 <Vm::x87Handler(regs*)+0x8c6>
c001fd77:	50                   	push   eax
c001fd78:	50                   	push   eax
c001fd79:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd7c:	ff 36                	push   DWORD PTR [esi]
c001fd7e:	e8 96 f3 ff ff       	call   c001f119 <Vm::fpu64ToInternal(unsigned long long)>
c001fd83:	e9 35 01 00 00       	jmp    c001febd <Vm::x87Handler(regs*)+0x9fb>
c001fd88:	80 fa 02             	cmp    dl,0x2
c001fd8b:	0f 85 54 f9 ff ff    	jne    c001f6e5 <Vm::x87Handler(regs*)+0x223>
c001fd91:	55                   	push   ebp
c001fd92:	55                   	push   ebp
c001fd93:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd96:	ff 36                	push   DWORD PTR [esi]
c001fd98:	e8 7c f3 ff ff       	call   c001f119 <Vm::fpu64ToInternal(unsigned long long)>
c001fd9d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda4:	89 c6                	mov    esi,eax
c001fda6:	89 d7                	mov    edi,edx
c001fda8:	e8 d8 f5 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fdad:	57                   	push   edi
c001fdae:	56                   	push   esi
c001fdaf:	52                   	push   edx
c001fdb0:	50                   	push   eax
c001fdb1:	e8 f2 f4 ff ff       	call   c001f2a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fdba:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdbd:	83 c4 20             	add    esp,0x20
c001fdc0:	e9 74 f7 ff ff       	jmp    c001f539 <Vm::x87Handler(regs*)+0x77>
c001fdc5:	80 fa 04             	cmp    dl,0x4
c001fdc8:	75 2a                	jne    c001fdf4 <Vm::x87Handler(regs*)+0x932>
c001fdca:	51                   	push   ecx
c001fdcb:	51                   	push   ecx
c001fdcc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdcf:	ff 36                	push   DWORD PTR [esi]
c001fdd1:	e8 43 f3 ff ff       	call   c001f119 <Vm::fpu64ToInternal(unsigned long long)>
c001fdd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fddd:	89 c6                	mov    esi,eax
c001fddf:	89 d7                	mov    edi,edx
c001fde1:	e8 9f f5 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fde6:	57                   	push   edi
c001fde7:	56                   	push   esi
c001fde8:	52                   	push   edx
c001fde9:	50                   	push   eax
c001fdea:	e8 36 f5 ff ff       	call   c001f325 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdef:	e9 e2 00 00 00       	jmp    c001fed6 <Vm::x87Handler(regs*)+0xa14>
c001fdf4:	80 fa 05             	cmp    dl,0x5
c001fdf7:	75 28                	jne    c001fe21 <Vm::x87Handler(regs*)+0x95f>
c001fdf9:	83 ec 0c             	sub    esp,0xc
c001fdfc:	6a 00                	push   0x0
c001fdfe:	e8 82 f5 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fe03:	89 c7                	mov    edi,eax
c001fe05:	89 d5                	mov    ebp,edx
c001fe07:	58                   	pop    eax
c001fe08:	5a                   	pop    edx
c001fe09:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe0c:	ff 36                	push   DWORD PTR [esi]
c001fe0e:	e8 06 f3 ff ff       	call   c001f119 <Vm::fpu64ToInternal(unsigned long long)>
c001fe13:	83 c4 10             	add    esp,0x10
c001fe16:	55                   	push   ebp
c001fe17:	57                   	push   edi
c001fe18:	52                   	push   edx
c001fe19:	50                   	push   eax
c001fe1a:	e8 06 f5 ff ff       	call   c001f325 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe1f:	eb 60                	jmp    c001fe81 <Vm::x87Handler(regs*)+0x9bf>
c001fe21:	80 fa 06             	cmp    dl,0x6
c001fe24:	75 2a                	jne    c001fe50 <Vm::x87Handler(regs*)+0x98e>
c001fe26:	51                   	push   ecx
c001fe27:	51                   	push   ecx
c001fe28:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe2b:	ff 36                	push   DWORD PTR [esi]
c001fe2d:	e8 e7 f2 ff ff       	call   c001f119 <Vm::fpu64ToInternal(unsigned long long)>
c001fe32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe39:	89 c6                	mov    esi,eax
c001fe3b:	89 d7                	mov    edi,edx
c001fe3d:	e8 43 f5 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fe42:	57                   	push   edi
c001fe43:	56                   	push   esi
c001fe44:	52                   	push   edx
c001fe45:	50                   	push   eax
c001fe46:	e8 08 f5 ff ff       	call   c001f353 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe4b:	e9 86 00 00 00       	jmp    c001fed6 <Vm::x87Handler(regs*)+0xa14>
c001fe50:	31 c0                	xor    eax,eax
c001fe52:	80 fa 07             	cmp    dl,0x7
c001fe55:	0f 85 c8 00 00 00    	jne    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001fe5b:	83 ec 0c             	sub    esp,0xc
c001fe5e:	6a 00                	push   0x0
c001fe60:	e8 20 f5 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fe65:	89 c7                	mov    edi,eax
c001fe67:	89 d5                	mov    ebp,edx
c001fe69:	58                   	pop    eax
c001fe6a:	5a                   	pop    edx
c001fe6b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe6e:	ff 36                	push   DWORD PTR [esi]
c001fe70:	e8 a4 f2 ff ff       	call   c001f119 <Vm::fpu64ToInternal(unsigned long long)>
c001fe75:	83 c4 10             	add    esp,0x10
c001fe78:	55                   	push   ebp
c001fe79:	57                   	push   edi
c001fe7a:	52                   	push   edx
c001fe7b:	50                   	push   eax
c001fe7c:	e8 d2 f4 ff ff       	call   c001f353 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe81:	83 c4 0c             	add    esp,0xc
c001fe84:	eb 53                	jmp    c001fed9 <Vm::x87Handler(regs*)+0xa17>
c001fe86:	31 c0                	xor    eax,eax
c001fe88:	80 fa 02             	cmp    dl,0x2
c001fe8b:	0f 85 92 00 00 00    	jne    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001fe91:	83 ec 0c             	sub    esp,0xc
c001fe94:	6a 00                	push   0x0
c001fe96:	e8 ea f4 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fe9b:	59                   	pop    ecx
c001fe9c:	5f                   	pop    edi
c001fe9d:	52                   	push   edx
c001fe9e:	50                   	push   eax
c001fe9f:	e8 27 f2 ff ff       	call   c001f0cb <Vm::fpuInternalTo64(unsigned long long)>
c001fea4:	eb 70                	jmp    c001ff16 <Vm::x87Handler(regs*)+0xa54>
c001fea6:	31 c0                	xor    eax,eax
c001fea8:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fead:	75 74                	jne    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001feaf:	50                   	push   eax
c001feb0:	50                   	push   eax
c001feb1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001feb4:	31 d2                	xor    edx,edx
c001feb6:	52                   	push   edx
c001feb7:	50                   	push   eax
c001feb8:	e8 f6 f2 ff ff       	call   c001f1b3 <Vm::fpuLongToFloat(long long)>
c001febd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec4:	89 c6                	mov    esi,eax
c001fec6:	89 d7                	mov    edi,edx
c001fec8:	e8 b8 f4 ff ff       	call   c001f385 <Vm::fpuGetReg(int)>
c001fecd:	57                   	push   edi
c001fece:	56                   	push   esi
c001fecf:	52                   	push   edx
c001fed0:	50                   	push   eax
c001fed1:	e8 5e f4 ff ff       	call   c001f334 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fed6:	83 c4 1c             	add    esp,0x1c
c001fed9:	52                   	push   edx
c001feda:	50                   	push   eax
c001fedb:	6a 00                	push   0x0
c001fedd:	e8 e6 f4 ff ff       	call   c001f3c8 <Vm::fpuSetReg(int, unsigned long long)>
c001fee2:	e9 f2 f7 ff ff       	jmp    c001f6d9 <Vm::x87Handler(regs*)+0x217>
c001fee7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001feeb:	80 fa 05             	cmp    dl,0x5
c001feee:	75 11                	jne    c001ff01 <Vm::x87Handler(regs*)+0xa3f>
c001fef0:	55                   	push   ebp
c001fef1:	55                   	push   ebp
c001fef2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fef5:	ff 36                	push   DWORD PTR [esi]
c001fef7:	e8 81 f2 ff ff       	call   c001f17d <Vm::fpuULongToFloat(unsigned long long)>
c001fefc:	e9 cf f7 ff ff       	jmp    c001f6d0 <Vm::x87Handler(regs*)+0x20e>
c001ff01:	31 c0                	xor    eax,eax
c001ff03:	80 fa 07             	cmp    dl,0x7
c001ff06:	75 1b                	jne    c001ff23 <Vm::x87Handler(regs*)+0xa61>
c001ff08:	e8 63 f5 ff ff       	call   c001f470 <Vm::fpuPop()>
c001ff0d:	51                   	push   ecx
c001ff0e:	51                   	push   ecx
c001ff0f:	52                   	push   edx
c001ff10:	50                   	push   eax
c001ff11:	e8 0c f2 ff ff       	call   c001f122 <Vm::fpuFloatToLong(unsigned long long)>
c001ff16:	83 c4 10             	add    esp,0x10
c001ff19:	89 06                	mov    DWORD PTR [esi],eax
c001ff1b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001ff1e:	e9 f8 f7 ff ff       	jmp    c001f71b <Vm::x87Handler(regs*)+0x259>
c001ff23:	83 c4 1c             	add    esp,0x1c
c001ff26:	5b                   	pop    ebx
c001ff27:	5e                   	pop    esi
c001ff28:	5f                   	pop    edi
c001ff29:	5d                   	pop    ebp
c001ff2a:	c3                   	ret    

c001ff2b <__static_initialization_and_destruction_0(int, int)>:
c001ff2b:	83 ec 0c             	sub    esp,0xc
c001ff2e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ff33:	75 1a                	jne    c001ff4f <__static_initialization_and_destruction_0(int, int)+0x24>
c001ff35:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ff3d:	75 10                	jne    c001ff4f <__static_initialization_and_destruction_0(int, int)+0x24>
c001ff3f:	83 ec 0c             	sub    esp,0xc
c001ff42:	68 e0 12 03 c0       	push   0xc00312e0
c001ff47:	e8 14 88 00 00       	call   c0028760 <Vm::_FPUState::_FPUState()>
c001ff4c:	83 c4 10             	add    esp,0x10
c001ff4f:	90                   	nop
c001ff50:	83 c4 0c             	add    esp,0xc
c001ff53:	c3                   	ret    

c001ff54 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ff54:	83 ec 0c             	sub    esp,0xc
c001ff57:	83 ec 08             	sub    esp,0x8
c001ff5a:	68 ff ff 00 00       	push   0xffff
c001ff5f:	6a 01                	push   0x1
c001ff61:	e8 c5 ff ff ff       	call   c001ff2b <__static_initialization_and_destruction_0(int, int)>
c001ff66:	83 c4 10             	add    esp,0x10
c001ff69:	83 c4 0c             	add    esp,0xc
c001ff6c:	c3                   	ret    
c001ff6d:	90                   	nop

c001ff6e <FAT::getName()>:
c001ff6e:	b8 fc c0 02 c0       	mov    eax,0xc002c0fc
c001ff73:	c3                   	ret    

c001ff74 <FAT::tell(void*, unsigned long long*)>:
c001ff74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ff79:	75 06                	jne    c001ff81 <FAT::tell(void*, unsigned long long*)+0xd>
c001ff7b:	b8 04 00 00 00       	mov    eax,0x4
c001ff80:	c3                   	ret    
c001ff81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff86:	75 06                	jne    c001ff8e <FAT::tell(void*, unsigned long long*)+0x1a>
c001ff88:	b8 04 00 00 00       	mov    eax,0x4
c001ff8d:	c3                   	ret    
c001ff8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff92:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ff95:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ff98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff9c:	89 01                	mov    DWORD PTR [ecx],eax
c001ff9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ffa1:	b8 00 00 00 00       	mov    eax,0x0
c001ffa6:	c3                   	ret    
c001ffa7:	90                   	nop

c001ffa8 <FAT::stat(void*, unsigned long long*)>:
c001ffa8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ffad:	75 06                	jne    c001ffb5 <FAT::stat(void*, unsigned long long*)+0xd>
c001ffaf:	b8 04 00 00 00       	mov    eax,0x4
c001ffb4:	c3                   	ret    
c001ffb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ffba:	75 06                	jne    c001ffc2 <FAT::stat(void*, unsigned long long*)+0x1a>
c001ffbc:	b8 04 00 00 00       	mov    eax,0x4
c001ffc1:	c3                   	ret    
c001ffc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffc6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ffc9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ffcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ffd0:	89 01                	mov    DWORD PTR [ecx],eax
c001ffd2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ffd5:	b8 00 00 00 00       	mov    eax,0x0
c001ffda:	c3                   	ret    
c001ffdb:	90                   	nop

c001ffdc <FAT::~FAT()>:
c001ffdc:	83 ec 0c             	sub    esp,0xc
c001ffdf:	ba 80 c1 02 c0       	mov    edx,0xc002c180
c001ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe8:	89 10                	mov    DWORD PTR [eax],edx
c001ffea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffee:	83 ec 0c             	sub    esp,0xc
c001fff1:	50                   	push   eax
c001fff2:	e8 41 2e ff ff       	call   c0012e38 <Filesystem::~Filesystem()>
c001fff7:	83 c4 10             	add    esp,0x10
c001fffa:	90                   	nop
c001fffb:	83 c4 0c             	add    esp,0xc
c001fffe:	c3                   	ret    
c001ffff:	90                   	nop

c0020000 <FAT::~FAT()>:
c0020000:	83 ec 0c             	sub    esp,0xc
c0020003:	83 ec 0c             	sub    esp,0xc
c0020006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002000a:	e8 cd ff ff ff       	call   c001ffdc <FAT::~FAT()>
c002000f:	83 c4 10             	add    esp,0x10
c0020012:	83 ec 08             	sub    esp,0x8
c0020015:	6a 08                	push   0x8
c0020017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002001b:	e8 0f 2a ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0020020:	83 c4 10             	add    esp,0x10
c0020023:	83 c4 0c             	add    esp,0xc
c0020026:	c3                   	ret    
c0020027:	90                   	nop

c0020028 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020028:	83 ec 1c             	sub    esp,0x1c
c002002b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020032:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002003b:	8b 04 85 60 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceca0]
c0020042:	83 f8 ff             	cmp    eax,0xffffffff
c0020045:	75 34                	jne    c002007b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020047:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002004b:	88 c2                	mov    dl,al
c002004d:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c0020052:	01 d0                	add    eax,edx
c0020054:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020058:	8b 15 40 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031340
c002005e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020062:	89 14 85 60 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffceca0],edx
c0020069:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c002006e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020072:	89 14 85 e0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec20],edx
c0020079:	eb 17                	jmp    c0020092 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002007b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002007f:	88 c2                	mov    dl,al
c0020081:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020085:	8b 04 85 60 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceca0]
c002008c:	01 d0                	add    eax,edx
c002008e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020092:	83 ec 04             	sub    esp,0x4
c0020095:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020099:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002009d:	8d 44 24 15          	lea    eax,[esp+0x15]
c00200a1:	50                   	push   eax
c00200a2:	e8 91 6c fe ff       	call   c0006d38 <f_getlabel>
c00200a7:	83 c4 10             	add    esp,0x10
c00200aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200ae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00200b3:	75 07                	jne    c00200bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00200b5:	b8 00 00 00 00       	mov    eax,0x0
c00200ba:	eb 05                	jmp    c00200c1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00200bc:	b8 01 00 00 00       	mov    eax,0x1
c00200c1:	83 c4 1c             	add    esp,0x1c
c00200c4:	c3                   	ret    
c00200c5:	90                   	nop

c00200c6 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00200c6:	57                   	push   edi
c00200c7:	83 ec 58             	sub    esp,0x58
c00200ca:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00200d2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00200d6:	b9 0f 00 00 00       	mov    ecx,0xf
c00200db:	b8 00 00 00 00       	mov    eax,0x0
c00200e0:	fc                   	cld    
c00200e1:	89 d7                	mov    edi,edx
c00200e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00200e5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00200e9:	8b 04 85 60 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceca0]
c00200f0:	83 f8 ff             	cmp    eax,0xffffffff
c00200f3:	75 34                	jne    c0020129 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00200f5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00200f9:	88 c2                	mov    dl,al
c00200fb:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c0020100:	01 d0                	add    eax,edx
c0020102:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020106:	8b 15 40 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031340
c002010c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020110:	89 14 85 60 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffceca0],edx
c0020117:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c002011c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020120:	89 14 85 e0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec20],edx
c0020127:	eb 17                	jmp    c0020140 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020129:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002012d:	88 c2                	mov    dl,al
c002012f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020133:	8b 04 85 60 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceca0]
c002013a:	01 d0                	add    eax,edx
c002013c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020140:	83 ec 08             	sub    esp,0x8
c0020143:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020147:	8d 44 24 18          	lea    eax,[esp+0x18]
c002014b:	50                   	push   eax
c002014c:	e8 23 08 fe ff       	call   c0000974 <strcat>
c0020151:	83 c4 10             	add    esp,0x10
c0020154:	83 ec 0c             	sub    esp,0xc
c0020157:	8d 44 24 18          	lea    eax,[esp+0x18]
c002015b:	50                   	push   eax
c002015c:	e8 c5 6d fe ff       	call   c0006f26 <f_setlabel>
c0020161:	83 c4 10             	add    esp,0x10
c0020164:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020168:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002016d:	75 07                	jne    c0020176 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002016f:	b8 00 00 00 00       	mov    eax,0x0
c0020174:	eb 05                	jmp    c002017b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020176:	b8 01 00 00 00       	mov    eax,0x1
c002017b:	83 c4 58             	add    esp,0x58
c002017e:	5f                   	pop    edi
c002017f:	c3                   	ret    

c0020180 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020180:	83 ec 2c             	sub    esp,0x2c
c0020183:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002018b:	83 ec 08             	sub    esp,0x8
c002018e:	68 20 c1 02 c0       	push   0xc002c120
c0020193:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020197:	e8 24 07 fe ff       	call   c00008c0 <strcmp>
c002019c:	83 c4 10             	add    esp,0x10
c002019f:	85 c0                	test   eax,eax
c00201a1:	0f 94 c0             	sete   al
c00201a4:	84 c0                	test   al,al
c00201a6:	74 0d                	je     c00201b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00201a8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00201b0:	e9 a6 00 00 00       	jmp    c002025b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201b5:	83 ec 08             	sub    esp,0x8
c00201b8:	68 12 c1 02 c0       	push   0xc002c112
c00201bd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00201c1:	e8 fa 06 fe ff       	call   c00008c0 <strcmp>
c00201c6:	83 c4 10             	add    esp,0x10
c00201c9:	85 c0                	test   eax,eax
c00201cb:	0f 94 c0             	sete   al
c00201ce:	84 c0                	test   al,al
c00201d0:	74 0a                	je     c00201dc <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00201d2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00201da:	eb 7f                	jmp    c002025b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201dc:	83 ec 08             	sub    esp,0x8
c00201df:	68 18 c1 02 c0       	push   0xc002c118
c00201e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00201e8:	e8 d3 06 fe ff       	call   c00008c0 <strcmp>
c00201ed:	83 c4 10             	add    esp,0x10
c00201f0:	85 c0                	test   eax,eax
c00201f2:	0f 94 c0             	sete   al
c00201f5:	84 c0                	test   al,al
c00201f7:	74 0a                	je     c0020203 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00201f9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020201:	eb 58                	jmp    c002025b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020203:	83 ec 08             	sub    esp,0x8
c0020206:	68 cc 8e 02 c0       	push   0xc0028ecc
c002020b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002020f:	e8 ac 06 fe ff       	call   c00008c0 <strcmp>
c0020214:	83 c4 10             	add    esp,0x10
c0020217:	85 c0                	test   eax,eax
c0020219:	0f 94 c0             	sete   al
c002021c:	84 c0                	test   al,al
c002021e:	74 0a                	je     c002022a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020220:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020228:	eb 31                	jmp    c002025b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002022a:	83 ec 08             	sub    esp,0x8
c002022d:	68 1e c1 02 c0       	push   0xc002c11e
c0020232:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020236:	e8 85 06 fe ff       	call   c00008c0 <strcmp>
c002023b:	83 c4 10             	add    esp,0x10
c002023e:	85 c0                	test   eax,eax
c0020240:	0f 94 c0             	sete   al
c0020243:	84 c0                	test   al,al
c0020245:	74 0a                	je     c0020251 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020247:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002024f:	eb 0a                	jmp    c002025b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020251:	b8 08 00 00 00       	mov    eax,0x8
c0020256:	e9 04 01 00 00       	jmp    c002035f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002025b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020262:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020267:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002026b:	8b 04 85 60 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceca0]
c0020272:	83 f8 ff             	cmp    eax,0xffffffff
c0020275:	75 34                	jne    c00202ab <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020277:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002027b:	88 c2                	mov    dl,al
c002027d:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c0020282:	01 d0                	add    eax,edx
c0020284:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020288:	8b 15 40 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031340
c002028e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020292:	89 14 85 60 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffceca0],edx
c0020299:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c002029e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00202a2:	89 14 85 e0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec20],edx
c00202a9:	eb 17                	jmp    c00202c2 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00202ab:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00202af:	88 c2                	mov    dl,al
c00202b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202b5:	8b 04 85 60 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceca0]
c00202bc:	01 d0                	add    eax,edx
c00202be:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00202c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202c6:	88 04 24             	mov    BYTE PTR [esp],al
c00202c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00202cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00202d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00202d9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00202de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00202e6:	83 ec 0c             	sub    esp,0xc
c00202e9:	68 00 20 00 00       	push   0x2000
c00202ee:	e8 4d f5 fe ff       	call   c000f840 <malloc>
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00202fa:	68 00 20 00 00       	push   0x2000
c00202ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020303:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020307:	50                   	push   eax
c0020308:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002030c:	50                   	push   eax
c002030d:	e8 5f 70 fe ff       	call   c0007371 <f_mkfs>
c0020312:	83 c4 10             	add    esp,0x10
c0020315:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002031e:	75 07                	jne    c0020327 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020320:	b8 00 00 00 00       	mov    eax,0x0
c0020325:	eb 38                	jmp    c002035f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020327:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002032c:	75 17                	jne    c0020345 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002032e:	83 ec 0c             	sub    esp,0xc
c0020331:	68 50 c1 02 c0       	push   0xc002c150
c0020336:	e8 d4 27 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002033b:	83 c4 10             	add    esp,0x10
c002033e:	b8 09 00 00 00       	mov    eax,0x9
c0020343:	eb 1a                	jmp    c002035f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020345:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020349:	83 ec 08             	sub    esp,0x8
c002034c:	50                   	push   eax
c002034d:	68 24 c1 02 c0       	push   0xc002c124
c0020352:	e8 b8 27 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0020357:	83 c4 10             	add    esp,0x10
c002035a:	b8 01 00 00 00       	mov    eax,0x1
c002035f:	83 c4 2c             	add    esp,0x2c
c0020362:	c3                   	ret    
c0020363:	90                   	nop

c0020364 <FAT::tryMount(LogicalDisk*, int)>:
c0020364:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002036a:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c002036f:	83 f8 14             	cmp    eax,0x14
c0020372:	75 17                	jne    c002038b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020374:	83 ec 0c             	sub    esp,0xc
c0020377:	68 36 c1 02 c0       	push   0xc002c136
c002037c:	e8 1e 9e ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0020381:	83 c4 10             	add    esp,0x10
c0020384:	b0 00                	mov    al,0x0
c0020386:	e9 d7 01 00 00       	jmp    c0020562 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002038b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020392:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020398:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002039e:	3d 00 02 00 00       	cmp    eax,0x200
c00203a3:	74 07                	je     c00203ac <FAT::tryMount(LogicalDisk*, int)+0x48>
c00203a5:	b0 00                	mov    al,0x0
c00203a7:	e9 b6 01 00 00       	jmp    c0020562 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203ac:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00203b4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00203bb:	8b 04 85 60 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceca0]
c00203c2:	83 f8 ff             	cmp    eax,0xffffffff
c00203c5:	74 07                	je     c00203ce <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00203c7:	b0 01                	mov    al,0x1
c00203c9:	e9 94 01 00 00       	jmp    c0020562 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203ce:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00203d8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00203e0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00203e7:	88 c2                	mov    dl,al
c00203e9:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c00203ee:	01 d0                	add    eax,edx
c00203f0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00203f7:	8b 15 40 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031340
c00203fd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020404:	89 14 85 60 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffceca0],edx
c002040b:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c0020410:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020417:	89 14 85 e0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec20],edx
c002041e:	83 ec 0c             	sub    esp,0xc
c0020421:	68 54 02 00 00       	push   0x254
c0020426:	e8 15 f4 fe ff       	call   c000f840 <malloc>
c002042b:	83 c4 10             	add    esp,0x10
c002042e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020435:	83 ec 04             	sub    esp,0x4
c0020438:	6a 00                	push   0x0
c002043a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020441:	50                   	push   eax
c0020442:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020449:	e8 e1 4a fe ff       	call   c0004f2f <f_mount>
c002044e:	83 c4 10             	add    esp,0x10
c0020451:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020458:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020460:	74 19                	je     c002047b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020462:	83 ec 0c             	sub    esp,0xc
c0020465:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002046c:	e8 ef f3 fe ff       	call   c000f860 <rfree>
c0020471:	83 c4 10             	add    esp,0x10
c0020474:	b0 00                	mov    al,0x0
c0020476:	e9 e7 00 00 00       	jmp    c0020562 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002047b:	83 ec 04             	sub    esp,0x4
c002047e:	68 00 01 00 00       	push   0x100
c0020483:	6a 00                	push   0x0
c0020485:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002048c:	50                   	push   eax
c002048d:	e8 e6 02 fe ff       	call   c0000778 <memset>
c0020492:	83 c4 10             	add    esp,0x10
c0020495:	83 ec 08             	sub    esp,0x8
c0020498:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002049f:	50                   	push   eax
c00204a0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00204a7:	50                   	push   eax
c00204a8:	e8 c7 04 fe ff       	call   c0000974 <strcat>
c00204ad:	83 c4 10             	add    esp,0x10
c00204b0:	83 ec 08             	sub    esp,0x8
c00204b3:	68 44 c1 02 c0       	push   0xc002c144
c00204b8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00204bf:	50                   	push   eax
c00204c0:	e8 af 04 fe ff       	call   c0000974 <strcat>
c00204c5:	83 c4 10             	add    esp,0x10
c00204c8:	83 ec 04             	sub    esp,0x4
c00204cb:	6a 01                	push   0x1
c00204cd:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00204d4:	50                   	push   eax
c00204d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00204d9:	50                   	push   eax
c00204da:	e8 b2 4a fe ff       	call   c0004f91 <f_open>
c00204df:	83 c4 10             	add    esp,0x10
c00204e2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00204e9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00204f0:	85 c0                	test   eax,eax
c00204f2:	74 0a                	je     c00204fe <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00204f4:	78 2d                	js     c0020523 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00204f6:	83 e8 04             	sub    eax,0x4
c00204f9:	83 f8 01             	cmp    eax,0x1
c00204fc:	77 25                	ja     c0020523 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00204fe:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020506:	83 ec 0c             	sub    esp,0xc
c0020509:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002050d:	50                   	push   eax
c002050e:	e8 d0 55 fe ff       	call   c0005ae3 <f_close>
c0020513:	83 c4 10             	add    esp,0x10
c0020516:	90                   	nop
c0020517:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002051f:	74 3a                	je     c002055b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020521:	eb 2d                	jmp    c0020550 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020523:	83 ec 0c             	sub    esp,0xc
c0020526:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002052d:	e8 2e f3 fe ff       	call   c000f860 <rfree>
c0020532:	83 c4 10             	add    esp,0x10
c0020535:	83 ec 04             	sub    esp,0x4
c0020538:	6a 00                	push   0x0
c002053a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020541:	50                   	push   eax
c0020542:	6a 00                	push   0x0
c0020544:	e8 e6 49 fe ff       	call   c0004f2f <f_mount>
c0020549:	83 c4 10             	add    esp,0x10
c002054c:	b0 00                	mov    al,0x0
c002054e:	eb 12                	jmp    c0020562 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020550:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c0020555:	40                   	inc    eax
c0020556:	a3 40 13 03 c0       	mov    ds:0xc0031340,eax
c002055b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020562:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020568:	c3                   	ret    
c0020569:	90                   	nop

c002056a <FAT::readDir(void*, unsigned long, void*, int*)>:
c002056a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020570:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020578:	74 0a                	je     c0020584 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c002057a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020582:	75 0a                	jne    c002058e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020584:	b8 04 00 00 00       	mov    eax,0x4
c0020589:	e9 db 00 00 00       	jmp    c0020669 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002058e:	83 ec 08             	sub    esp,0x8
c0020591:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020598:	50                   	push   eax
c0020599:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00205a0:	e8 48 5b fe ff       	call   c00060ed <f_readdir>
c00205a5:	83 c4 10             	add    esp,0x10
c00205a8:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00205af:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00205b5:	83 ec 0c             	sub    esp,0xc
c00205b8:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00205bf:	83 c0 1a             	add    eax,0x1a
c00205c2:	50                   	push   eax
c00205c3:	e8 cc 01 fe ff       	call   c0000794 <strlen>
c00205c8:	83 c4 10             	add    esp,0x10
c00205cb:	ba 00 00 00 00       	mov    edx,0x0
c00205d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00205d4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00205d8:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00205df:	0f b6 c0             	movzx  eax,al
c00205e2:	83 e0 10             	and    eax,0x10
c00205e5:	74 07                	je     c00205ee <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00205e7:	b8 02 00 00 00       	mov    eax,0x2
c00205ec:	eb 05                	jmp    c00205f3 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00205ee:	b8 01 00 00 00       	mov    eax,0x1
c00205f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205f7:	83 ec 08             	sub    esp,0x8
c00205fa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020601:	83 c0 1a             	add    eax,0x1a
c0020604:	50                   	push   eax
c0020605:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020609:	83 c0 10             	add    eax,0x10
c002060c:	50                   	push   eax
c002060d:	e8 22 02 fe ff       	call   c0000834 <strcpy>
c0020612:	83 c4 10             	add    esp,0x10
c0020615:	83 ec 04             	sub    esp,0x4
c0020618:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c002061f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020623:	50                   	push   eax
c0020624:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c002062b:	e8 14 01 fe ff       	call   c0000744 <memcpy>
c0020630:	83 c4 10             	add    esp,0x10
c0020633:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c002063a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020640:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020647:	84 c0                	test   al,al
c0020649:	75 07                	jne    c0020652 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c002064b:	b8 07 00 00 00       	mov    eax,0x7
c0020650:	eb 17                	jmp    c0020669 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020652:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020659:	85 c0                	test   eax,eax
c002065b:	75 07                	jne    c0020664 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c002065d:	b8 00 00 00 00       	mov    eax,0x0
c0020662:	eb 05                	jmp    c0020669 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020664:	b8 01 00 00 00       	mov    eax,0x1
c0020669:	81 c4 3c 02 00 00    	add    esp,0x23c
c002066f:	c3                   	ret    

c0020670 <FAT::read(void*, unsigned long, void*, int*)>:
c0020670:	83 ec 1c             	sub    esp,0x1c
c0020673:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020678:	74 07                	je     c0020681 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002067a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002067f:	75 07                	jne    c0020688 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020681:	b8 04 00 00 00       	mov    eax,0x4
c0020686:	eb 3d                	jmp    c00206c5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020688:	8d 44 24 08          	lea    eax,[esp+0x8]
c002068c:	50                   	push   eax
c002068d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020691:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020695:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020699:	e8 2f 4d fe ff       	call   c00053cd <f_read>
c002069e:	83 c4 10             	add    esp,0x10
c00206a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206a9:	89 c2                	mov    edx,eax
c00206ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00206af:	89 10                	mov    DWORD PTR [eax],edx
c00206b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206b5:	85 c0                	test   eax,eax
c00206b7:	75 07                	jne    c00206c0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00206b9:	b8 00 00 00 00       	mov    eax,0x0
c00206be:	eb 05                	jmp    c00206c5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00206c0:	b8 01 00 00 00       	mov    eax,0x1
c00206c5:	83 c4 1c             	add    esp,0x1c
c00206c8:	c3                   	ret    
c00206c9:	90                   	nop

c00206ca <FAT::write(void*, unsigned long, void*, int*)>:
c00206ca:	83 ec 1c             	sub    esp,0x1c
c00206cd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206d2:	74 07                	je     c00206db <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00206d4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00206d9:	75 07                	jne    c00206e2 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00206db:	b8 04 00 00 00       	mov    eax,0x4
c00206e0:	eb 3d                	jmp    c002071f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00206e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206e6:	50                   	push   eax
c00206e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00206eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206f3:	e8 55 4f fe ff       	call   c000564d <f_write>
c00206f8:	83 c4 10             	add    esp,0x10
c00206fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020703:	89 c2                	mov    edx,eax
c0020705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020709:	89 10                	mov    DWORD PTR [eax],edx
c002070b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002070f:	85 c0                	test   eax,eax
c0020711:	75 07                	jne    c002071a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020713:	b8 00 00 00 00       	mov    eax,0x0
c0020718:	eb 05                	jmp    c002071f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002071a:	b8 01 00 00 00       	mov    eax,0x1
c002071f:	83 c4 1c             	add    esp,0x1c
c0020722:	c3                   	ret    
c0020723:	90                   	nop

c0020724 <FAT::close(void*)>:
c0020724:	83 ec 1c             	sub    esp,0x1c
c0020727:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002072c:	75 07                	jne    c0020735 <FAT::close(void*)+0x11>
c002072e:	b8 04 00 00 00       	mov    eax,0x4
c0020733:	eb 36                	jmp    c002076b <FAT::close(void*)+0x47>
c0020735:	83 ec 0c             	sub    esp,0xc
c0020738:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002073c:	e8 a2 53 fe ff       	call   c0005ae3 <f_close>
c0020741:	83 c4 10             	add    esp,0x10
c0020744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020748:	83 ec 0c             	sub    esp,0xc
c002074b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002074f:	e8 fc f0 fe ff       	call   c000f850 <free>
c0020754:	83 c4 10             	add    esp,0x10
c0020757:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002075b:	85 c0                	test   eax,eax
c002075d:	75 07                	jne    c0020766 <FAT::close(void*)+0x42>
c002075f:	b8 00 00 00 00       	mov    eax,0x0
c0020764:	eb 05                	jmp    c002076b <FAT::close(void*)+0x47>
c0020766:	b8 01 00 00 00       	mov    eax,0x1
c002076b:	83 c4 1c             	add    esp,0x1c
c002076e:	c3                   	ret    
c002076f:	90                   	nop

c0020770 <FAT::closeDir(void*)>:
c0020770:	83 ec 1c             	sub    esp,0x1c
c0020773:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020778:	75 07                	jne    c0020781 <FAT::closeDir(void*)+0x11>
c002077a:	b8 04 00 00 00       	mov    eax,0x4
c002077f:	eb 36                	jmp    c00207b7 <FAT::closeDir(void*)+0x47>
c0020781:	83 ec 0c             	sub    esp,0xc
c0020784:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020788:	e8 3e 59 fe ff       	call   c00060cb <f_closedir>
c002078d:	83 c4 10             	add    esp,0x10
c0020790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020794:	83 ec 0c             	sub    esp,0xc
c0020797:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002079b:	e8 b0 f0 fe ff       	call   c000f850 <free>
c00207a0:	83 c4 10             	add    esp,0x10
c00207a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207a7:	85 c0                	test   eax,eax
c00207a9:	75 07                	jne    c00207b2 <FAT::closeDir(void*)+0x42>
c00207ab:	b8 00 00 00 00       	mov    eax,0x0
c00207b0:	eb 05                	jmp    c00207b7 <FAT::closeDir(void*)+0x47>
c00207b2:	b8 01 00 00 00       	mov    eax,0x1
c00207b7:	83 c4 1c             	add    esp,0x1c
c00207ba:	c3                   	ret    
c00207bb:	90                   	nop

c00207bc <FAT::seek(void*, unsigned long long)>:
c00207bc:	83 ec 2c             	sub    esp,0x2c
c00207bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00207c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00207cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00207d4:	75 07                	jne    c00207dd <FAT::seek(void*, unsigned long long)+0x21>
c00207d6:	b8 04 00 00 00       	mov    eax,0x4
c00207db:	eb 2f                	jmp    c002080c <FAT::seek(void*, unsigned long long)+0x50>
c00207dd:	83 ec 04             	sub    esp,0x4
c00207e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00207e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00207e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00207ec:	e8 21 53 fe ff       	call   c0005b12 <f_lseek>
c00207f1:	83 c4 10             	add    esp,0x10
c00207f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00207f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207fc:	85 c0                	test   eax,eax
c00207fe:	75 07                	jne    c0020807 <FAT::seek(void*, unsigned long long)+0x4b>
c0020800:	b8 00 00 00 00       	mov    eax,0x0
c0020805:	eb 05                	jmp    c002080c <FAT::seek(void*, unsigned long long)+0x50>
c0020807:	b8 01 00 00 00       	mov    eax,0x1
c002080c:	83 c4 2c             	add    esp,0x2c
c002080f:	c3                   	ret    

c0020810 <fatWrapperReadDisk>:
c0020810:	83 ec 1c             	sub    esp,0x1c
c0020813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020817:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002081b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002081f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020822:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020826:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002082a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002082f:	8b 04 85 20 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ce0]
c0020836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002083a:	83 ec 0c             	sub    esp,0xc
c002083d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020841:	52                   	push   edx
c0020842:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020846:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002084a:	50                   	push   eax
c002084b:	e8 7c 5a ff ff       	call   c00162cc <LogicalDisk::read(unsigned long long, int, void*)>
c0020850:	83 c4 20             	add    esp,0x20
c0020853:	83 c4 1c             	add    esp,0x1c
c0020856:	c3                   	ret    

c0020857 <fatWrapperWriteDisk>:
c0020857:	83 ec 1c             	sub    esp,0x1c
c002085a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002085e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020862:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020866:	89 04 24             	mov    DWORD PTR [esp],eax
c0020869:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002086d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020871:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020876:	8b 04 85 20 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ce0]
c002087d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020881:	83 ec 0c             	sub    esp,0xc
c0020884:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020888:	52                   	push   edx
c0020889:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002088d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020891:	50                   	push   eax
c0020892:	e8 a1 5a ff ff       	call   c0016338 <LogicalDisk::write(unsigned long long, int, void*)>
c0020897:	83 c4 20             	add    esp,0x20
c002089a:	83 c4 1c             	add    esp,0x1c
c002089d:	c3                   	ret    

c002089e <fatWrapperIoctl>:
c002089e:	53                   	push   ebx
c002089f:	83 ec 28             	sub    esp,0x28
c00208a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00208a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00208aa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00208ae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00208b2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00208b7:	75 31                	jne    c00208ea <fatWrapperIoctl+0x4c>
c00208b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00208c1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208c6:	8b 04 85 20 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ce0]
c00208cd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00208d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208dd:	66 89 02             	mov    WORD PTR [edx],ax
c00208e0:	b8 00 00 00 00       	mov    eax,0x0
c00208e5:	e9 b2 00 00 00       	jmp    c002099c <fatWrapperIoctl+0xfe>
c00208ea:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00208ef:	75 6a                	jne    c002095b <fatWrapperIoctl+0xbd>
c00208f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208f9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208fe:	8b 04 85 20 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ce0]
c0020905:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002090b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020911:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020917:	89 c8                	mov    eax,ecx
c0020919:	89 da                	mov    edx,ebx
c002091b:	0f a4 c2 0a          	shld   edx,eax,0xa
c002091f:	c1 e0 0a             	shl    eax,0xa
c0020922:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020927:	8b 0c 8d 20 e3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1ce0]
c002092e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020934:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002093a:	89 cb                	mov    ebx,ecx
c002093c:	c1 fb 1f             	sar    ebx,0x1f
c002093f:	53                   	push   ebx
c0020940:	51                   	push   ecx
c0020941:	52                   	push   edx
c0020942:	50                   	push   eax
c0020943:	e8 c4 5a 00 00       	call   c002640c <__udivdi3>
c0020948:	83 c4 10             	add    esp,0x10
c002094b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002094f:	89 01                	mov    DWORD PTR [ecx],eax
c0020951:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020954:	b8 00 00 00 00       	mov    eax,0x0
c0020959:	eb 41                	jmp    c002099c <fatWrapperIoctl+0xfe>
c002095b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020960:	75 07                	jne    c0020969 <fatWrapperIoctl+0xcb>
c0020962:	b8 00 00 00 00       	mov    eax,0x0
c0020967:	eb 33                	jmp    c002099c <fatWrapperIoctl+0xfe>
c0020969:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002096e:	75 19                	jne    c0020989 <fatWrapperIoctl+0xeb>
c0020970:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020974:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020978:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002097c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020982:	b8 00 00 00 00       	mov    eax,0x0
c0020987:	eb 13                	jmp    c002099c <fatWrapperIoctl+0xfe>
c0020989:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002098e:	75 07                	jne    c0020997 <fatWrapperIoctl+0xf9>
c0020990:	b8 00 00 00 00       	mov    eax,0x0
c0020995:	eb 05                	jmp    c002099c <fatWrapperIoctl+0xfe>
c0020997:	b8 04 00 00 00       	mov    eax,0x4
c002099c:	83 c4 28             	add    esp,0x28
c002099f:	5b                   	pop    ebx
c00209a0:	c3                   	ret    
c00209a1:	90                   	nop

c00209a2 <FAT::FAT()>:
c00209a2:	83 ec 1c             	sub    esp,0x1c
c00209a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209a9:	83 ec 0c             	sub    esp,0xc
c00209ac:	50                   	push   eax
c00209ad:	e8 62 24 ff ff       	call   c0012e14 <Filesystem::Filesystem()>
c00209b2:	83 c4 10             	add    esp,0x10
c00209b5:	ba 80 c1 02 c0       	mov    edx,0xc002c180
c00209ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209be:	89 10                	mov    DWORD PTR [eax],edx
c00209c0:	c7 05 40 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031340,0x0
c00209ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00209d2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00209d7:	7f 15                	jg     c00209ee <FAT::FAT()+0x4c>
c00209d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209dd:	c7 04 85 60 13 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffceca0],0xffffffff
c00209e8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00209ec:	eb e4                	jmp    c00209d2 <FAT::FAT()+0x30>
c00209ee:	90                   	nop
c00209ef:	83 c4 1c             	add    esp,0x1c
c00209f2:	c3                   	ret    
c00209f3:	90                   	nop

c00209f4 <FAT::fixFilepath(char*)>:
c00209f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209f8:	8a 00                	mov    al,BYTE PTR [eax]
c00209fa:	3c 40                	cmp    al,0x40
c00209fc:	7e 2c                	jle    c0020a2a <FAT::fixFilepath(char*)+0x36>
c00209fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a02:	8a 00                	mov    al,BYTE PTR [eax]
c0020a04:	83 e8 41             	sub    eax,0x41
c0020a07:	88 c2                	mov    dl,al
c0020a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a0d:	88 10                	mov    BYTE PTR [eax],dl
c0020a0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a13:	8a 00                	mov    al,BYTE PTR [eax]
c0020a15:	0f be c0             	movsx  eax,al
c0020a18:	8b 04 85 60 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceca0]
c0020a1f:	83 c0 30             	add    eax,0x30
c0020a22:	88 c2                	mov    dl,al
c0020a24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a28:	88 10                	mov    BYTE PTR [eax],dl
c0020a2a:	90                   	nop
c0020a2b:	c3                   	ret    

c0020a2c <FAT::open(char const*, void**, FileOpenMode)>:
c0020a2c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020a32:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a3a:	74 0a                	je     c0020a46 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020a3c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020a44:	75 0a                	jne    c0020a50 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020a46:	b8 04 00 00 00       	mov    eax,0x4
c0020a4b:	e9 fd 00 00 00       	jmp    c0020b4d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020a50:	83 ec 08             	sub    esp,0x8
c0020a53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a5e:	50                   	push   eax
c0020a5f:	e8 d0 fd fd ff       	call   c0000834 <strcpy>
c0020a64:	83 c4 10             	add    esp,0x10
c0020a67:	83 ec 08             	sub    esp,0x8
c0020a6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a6e:	50                   	push   eax
c0020a6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a76:	e8 79 ff ff ff       	call   c00209f4 <FAT::fixFilepath(char*)>
c0020a7b:	83 c4 10             	add    esp,0x10
c0020a7e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a8d:	83 e0 01             	and    eax,0x1
c0020a90:	74 08                	je     c0020a9a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a92:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a9a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020aa1:	83 e0 04             	and    eax,0x4
c0020aa4:	74 10                	je     c0020ab6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020aa6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020aae:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020ab6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020abd:	83 e0 02             	and    eax,0x2
c0020ac0:	74 08                	je     c0020aca <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020ac2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020aca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ad1:	83 e0 08             	and    eax,0x8
c0020ad4:	74 08                	je     c0020ade <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020ad6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020ade:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ae5:	83 e0 10             	and    eax,0x10
c0020ae8:	74 08                	je     c0020af2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020aea:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020af2:	83 ec 0c             	sub    esp,0xc
c0020af5:	68 50 02 00 00       	push   0x250
c0020afa:	e8 41 ed fe ff       	call   c000f840 <malloc>
c0020aff:	83 c4 10             	add    esp,0x10
c0020b02:	89 c2                	mov    edx,eax
c0020b04:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b0b:	89 10                	mov    DWORD PTR [eax],edx
c0020b0d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020b15:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b1e:	83 ec 04             	sub    esp,0x4
c0020b21:	52                   	push   edx
c0020b22:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020b26:	52                   	push   edx
c0020b27:	50                   	push   eax
c0020b28:	e8 64 44 fe ff       	call   c0004f91 <f_open>
c0020b2d:	83 c4 10             	add    esp,0x10
c0020b30:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020b37:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020b3f:	74 07                	je     c0020b48 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020b41:	b8 01 00 00 00       	mov    eax,0x1
c0020b46:	eb 05                	jmp    c0020b4d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020b48:	b8 00 00 00 00       	mov    eax,0x0
c0020b4d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b53:	c3                   	ret    

c0020b54 <FAT::openDir(char const*, void**)>:
c0020b54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b62:	74 0a                	je     c0020b6e <FAT::openDir(char const*, void**)+0x1a>
c0020b64:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b6c:	75 07                	jne    c0020b75 <FAT::openDir(char const*, void**)+0x21>
c0020b6e:	b8 04 00 00 00       	mov    eax,0x4
c0020b73:	eb 7d                	jmp    c0020bf2 <FAT::openDir(char const*, void**)+0x9e>
c0020b75:	83 ec 08             	sub    esp,0x8
c0020b78:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b83:	50                   	push   eax
c0020b84:	e8 ab fc fd ff       	call   c0000834 <strcpy>
c0020b89:	83 c4 10             	add    esp,0x10
c0020b8c:	83 ec 08             	sub    esp,0x8
c0020b8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b93:	50                   	push   eax
c0020b94:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b9b:	e8 54 fe ff ff       	call   c00209f4 <FAT::fixFilepath(char*)>
c0020ba0:	83 c4 10             	add    esp,0x10
c0020ba3:	83 ec 0c             	sub    esp,0xc
c0020ba6:	6a 4c                	push   0x4c
c0020ba8:	e8 93 ec fe ff       	call   c000f840 <malloc>
c0020bad:	83 c4 10             	add    esp,0x10
c0020bb0:	89 c2                	mov    edx,eax
c0020bb2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020bb9:	89 10                	mov    DWORD PTR [eax],edx
c0020bbb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020bc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bc4:	83 ec 08             	sub    esp,0x8
c0020bc7:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020bcb:	52                   	push   edx
c0020bcc:	50                   	push   eax
c0020bcd:	e8 f7 53 fe ff       	call   c0005fc9 <f_opendir>
c0020bd2:	83 c4 10             	add    esp,0x10
c0020bd5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020bdc:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020be4:	74 07                	je     c0020bed <FAT::openDir(char const*, void**)+0x99>
c0020be6:	b8 01 00 00 00       	mov    eax,0x1
c0020beb:	eb 05                	jmp    c0020bf2 <FAT::openDir(char const*, void**)+0x9e>
c0020bed:	b8 00 00 00 00       	mov    eax,0x0
c0020bf2:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020bf8:	c3                   	ret    
c0020bf9:	90                   	nop

c0020bfa <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020bfa:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020c00:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020c08:	75 0a                	jne    c0020c14 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020c0a:	b8 04 00 00 00       	mov    eax,0x4
c0020c0f:	e9 c9 00 00 00       	jmp    c0020cdd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c14:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020c1c:	75 0a                	jne    c0020c28 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020c1e:	b8 04 00 00 00       	mov    eax,0x4
c0020c23:	e9 b5 00 00 00       	jmp    c0020cdd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c28:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020c30:	75 0a                	jne    c0020c3c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020c32:	b8 04 00 00 00       	mov    eax,0x4
c0020c37:	e9 a1 00 00 00       	jmp    c0020cdd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c3c:	83 ec 08             	sub    esp,0x8
c0020c3f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c46:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c4d:	50                   	push   eax
c0020c4e:	e8 e1 fb fd ff       	call   c0000834 <strcpy>
c0020c53:	83 c4 10             	add    esp,0x10
c0020c56:	83 ec 08             	sub    esp,0x8
c0020c59:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020c60:	50                   	push   eax
c0020c61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c68:	e8 87 fd ff ff       	call   c00209f4 <FAT::fixFilepath(char*)>
c0020c6d:	83 c4 10             	add    esp,0x10
c0020c70:	83 ec 08             	sub    esp,0x8
c0020c73:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c77:	50                   	push   eax
c0020c78:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c7f:	50                   	push   eax
c0020c80:	e8 03 55 fe ff       	call   c0006188 <f_stat>
c0020c85:	83 c4 10             	add    esp,0x10
c0020c88:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c8f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c96:	85 c0                	test   eax,eax
c0020c98:	74 07                	je     c0020ca1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c9a:	83 f8 04             	cmp    eax,0x4
c0020c9d:	74 32                	je     c0020cd1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c9f:	eb 37                	jmp    c0020cd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020ca1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020ca5:	0f b6 c0             	movzx  eax,al
c0020ca8:	83 e0 10             	and    eax,0x10
c0020cab:	0f 95 c2             	setne  dl
c0020cae:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020cb5:	88 10                	mov    BYTE PTR [eax],dl
c0020cb7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020cba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020cbe:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020cc5:	89 01                	mov    DWORD PTR [ecx],eax
c0020cc7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020cca:	b8 00 00 00 00       	mov    eax,0x0
c0020ccf:	eb 0c                	jmp    c0020cdd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020cd1:	b8 02 00 00 00       	mov    eax,0x2
c0020cd6:	eb 05                	jmp    c0020cdd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020cd8:	b8 01 00 00 00       	mov    eax,0x1
c0020cdd:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ce3:	c3                   	ret    

c0020ce4 <FAT::unlink(char const*)>:
c0020ce4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020cf2:	75 07                	jne    c0020cfb <FAT::unlink(char const*)+0x17>
c0020cf4:	b8 04 00 00 00       	mov    eax,0x4
c0020cf9:	eb 5c                	jmp    c0020d57 <FAT::unlink(char const*)+0x73>
c0020cfb:	83 ec 08             	sub    esp,0x8
c0020cfe:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d05:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d09:	50                   	push   eax
c0020d0a:	e8 25 fb fd ff       	call   c0000834 <strcpy>
c0020d0f:	83 c4 10             	add    esp,0x10
c0020d12:	83 ec 08             	sub    esp,0x8
c0020d15:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d19:	50                   	push   eax
c0020d1a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d21:	e8 ce fc ff ff       	call   c00209f4 <FAT::fixFilepath(char*)>
c0020d26:	83 c4 10             	add    esp,0x10
c0020d29:	83 ec 0c             	sub    esp,0xc
c0020d2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d30:	50                   	push   eax
c0020d31:	e8 a4 57 fe ff       	call   c00064da <f_unlink>
c0020d36:	83 c4 10             	add    esp,0x10
c0020d39:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d40:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020d47:	85 c0                	test   eax,eax
c0020d49:	75 07                	jne    c0020d52 <FAT::unlink(char const*)+0x6e>
c0020d4b:	b8 00 00 00 00       	mov    eax,0x0
c0020d50:	eb 05                	jmp    c0020d57 <FAT::unlink(char const*)+0x73>
c0020d52:	b8 01 00 00 00       	mov    eax,0x1
c0020d57:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d5d:	c3                   	ret    

c0020d5e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d5e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020d64:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020d6b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d72:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d76:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d7a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020d82:	75 0a                	jne    c0020d8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020d84:	b8 04 00 00 00       	mov    eax,0x4
c0020d89:	e9 1c 01 00 00       	jmp    c0020eaa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d8e:	83 ec 08             	sub    esp,0x8
c0020d91:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d98:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d9c:	50                   	push   eax
c0020d9d:	e8 92 fa fd ff       	call   c0000834 <strcpy>
c0020da2:	83 c4 10             	add    esp,0x10
c0020da5:	83 ec 08             	sub    esp,0x8
c0020da8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020dac:	50                   	push   eax
c0020dad:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020db4:	e8 3b fc ff ff       	call   c00209f4 <FAT::fixFilepath(char*)>
c0020db9:	83 c4 10             	add    esp,0x10
c0020dbc:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020dc4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020dcc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020dd1:	83 e0 01             	and    eax,0x1
c0020dd4:	74 08                	je     c0020dde <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020dd6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020dde:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020de3:	83 e0 02             	and    eax,0x2
c0020de6:	74 08                	je     c0020df0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020de8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020df5:	83 e0 04             	and    eax,0x4
c0020df8:	74 08                	je     c0020e02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020dfa:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020e02:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e07:	83 e0 08             	and    eax,0x8
c0020e0a:	74 08                	je     c0020e14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020e0c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020e14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e19:	83 e0 01             	and    eax,0x1
c0020e1c:	74 08                	je     c0020e26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020e1e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020e26:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e2b:	83 e0 02             	and    eax,0x2
c0020e2e:	74 08                	je     c0020e38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020e30:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020e38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e3d:	83 e0 04             	and    eax,0x4
c0020e40:	74 08                	je     c0020e4a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020e42:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020e4a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e4f:	83 e0 08             	and    eax,0x8
c0020e52:	74 08                	je     c0020e5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020e54:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020e5c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020e63:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020e6a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e72:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020e7a:	83 ec 04             	sub    esp,0x4
c0020e7d:	52                   	push   edx
c0020e7e:	50                   	push   eax
c0020e7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e83:	50                   	push   eax
c0020e84:	e8 f3 5c fe ff       	call   c0006b7c <f_chmod>
c0020e89:	83 c4 10             	add    esp,0x10
c0020e8c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e93:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e9a:	85 c0                	test   eax,eax
c0020e9c:	75 07                	jne    c0020ea5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e9e:	b8 00 00 00 00       	mov    eax,0x0
c0020ea3:	eb 05                	jmp    c0020eaa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020ea5:	b8 01 00 00 00       	mov    eax,0x1
c0020eaa:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020eb0:	c3                   	ret    
c0020eb1:	90                   	nop

c0020eb2 <FAT::rename(char const*, char const*)>:
c0020eb2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020eb8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020ec0:	74 0a                	je     c0020ecc <FAT::rename(char const*, char const*)+0x1a>
c0020ec2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020eca:	75 0a                	jne    c0020ed6 <FAT::rename(char const*, char const*)+0x24>
c0020ecc:	b8 04 00 00 00       	mov    eax,0x4
c0020ed1:	e9 98 00 00 00       	jmp    c0020f6e <FAT::rename(char const*, char const*)+0xbc>
c0020ed6:	83 ec 08             	sub    esp,0x8
c0020ed9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ee0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ee7:	50                   	push   eax
c0020ee8:	e8 47 f9 fd ff       	call   c0000834 <strcpy>
c0020eed:	83 c4 10             	add    esp,0x10
c0020ef0:	83 ec 08             	sub    esp,0x8
c0020ef3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020efa:	50                   	push   eax
c0020efb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f02:	e8 ed fa ff ff       	call   c00209f4 <FAT::fixFilepath(char*)>
c0020f07:	83 c4 10             	add    esp,0x10
c0020f0a:	83 ec 08             	sub    esp,0x8
c0020f0d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020f14:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f18:	50                   	push   eax
c0020f19:	e8 16 f9 fd ff       	call   c0000834 <strcpy>
c0020f1e:	83 c4 10             	add    esp,0x10
c0020f21:	83 ec 08             	sub    esp,0x8
c0020f24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f28:	50                   	push   eax
c0020f29:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f30:	e8 bf fa ff ff       	call   c00209f4 <FAT::fixFilepath(char*)>
c0020f35:	83 c4 10             	add    esp,0x10
c0020f38:	83 ec 08             	sub    esp,0x8
c0020f3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f3f:	50                   	push   eax
c0020f40:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f47:	50                   	push   eax
c0020f48:	e8 3c 59 fe ff       	call   c0006889 <f_rename>
c0020f4d:	83 c4 10             	add    esp,0x10
c0020f50:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020f57:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020f5e:	85 c0                	test   eax,eax
c0020f60:	75 07                	jne    c0020f69 <FAT::rename(char const*, char const*)+0xb7>
c0020f62:	b8 00 00 00 00       	mov    eax,0x0
c0020f67:	eb 05                	jmp    c0020f6e <FAT::rename(char const*, char const*)+0xbc>
c0020f69:	b8 01 00 00 00       	mov    eax,0x1
c0020f6e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020f74:	c3                   	ret    
c0020f75:	90                   	nop

c0020f76 <FAT::mkdir(char const*)>:
c0020f76:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f7c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f84:	75 07                	jne    c0020f8d <FAT::mkdir(char const*)+0x17>
c0020f86:	b8 04 00 00 00       	mov    eax,0x4
c0020f8b:	eb 5c                	jmp    c0020fe9 <FAT::mkdir(char const*)+0x73>
c0020f8d:	83 ec 08             	sub    esp,0x8
c0020f90:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f97:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f9b:	50                   	push   eax
c0020f9c:	e8 93 f8 fd ff       	call   c0000834 <strcpy>
c0020fa1:	83 c4 10             	add    esp,0x10
c0020fa4:	83 ec 08             	sub    esp,0x8
c0020fa7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fab:	50                   	push   eax
c0020fac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fb3:	e8 3c fa ff ff       	call   c00209f4 <FAT::fixFilepath(char*)>
c0020fb8:	83 c4 10             	add    esp,0x10
c0020fbb:	83 ec 0c             	sub    esp,0xc
c0020fbe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fc2:	50                   	push   eax
c0020fc3:	e8 95 56 fe ff       	call   c000665d <f_mkdir>
c0020fc8:	83 c4 10             	add    esp,0x10
c0020fcb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020fd2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020fd9:	85 c0                	test   eax,eax
c0020fdb:	75 07                	jne    c0020fe4 <FAT::mkdir(char const*)+0x6e>
c0020fdd:	b8 00 00 00 00       	mov    eax,0x0
c0020fe2:	eb 05                	jmp    c0020fe9 <FAT::mkdir(char const*)+0x73>
c0020fe4:	b8 01 00 00 00       	mov    eax,0x1
c0020fe9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fef:	c3                   	ret    

c0020ff0 <FAT::exists(char const*)>:
c0020ff0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020ff6:	83 ec 08             	sub    esp,0x8
c0020ff9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021000:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021004:	50                   	push   eax
c0021005:	e8 2a f8 fd ff       	call   c0000834 <strcpy>
c002100a:	83 c4 10             	add    esp,0x10
c002100d:	83 ec 08             	sub    esp,0x8
c0021010:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021014:	50                   	push   eax
c0021015:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002101c:	e8 d3 f9 ff ff       	call   c00209f4 <FAT::fixFilepath(char*)>
c0021021:	83 c4 10             	add    esp,0x10
c0021024:	83 ec 08             	sub    esp,0x8
c0021027:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002102e:	50                   	push   eax
c002102f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021033:	50                   	push   eax
c0021034:	e8 4f 51 fe ff       	call   c0006188 <f_stat>
c0021039:	83 c4 10             	add    esp,0x10
c002103c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021043:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002104a:	85 c0                	test   eax,eax
c002104c:	75 04                	jne    c0021052 <FAT::exists(char const*)+0x62>
c002104e:	b0 01                	mov    al,0x1
c0021050:	eb 02                	jmp    c0021054 <FAT::exists(char const*)+0x64>
c0021052:	b0 00                	mov    al,0x0
c0021054:	81 c4 2c 02 00 00    	add    esp,0x22c
c002105a:	c3                   	ret    
c002105b:	90                   	nop

c002105c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002105c:	b8 08 00 00 00       	mov    eax,0x8
c0021061:	c3                   	ret    

c0021062 <ISO9660::seek(void*, unsigned long long)>:
c0021062:	53                   	push   ebx
c0021063:	b8 04 00 00 00       	mov    eax,0x4
c0021068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002106c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021070:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021074:	85 d2                	test   edx,edx
c0021076:	74 17                	je     c002108f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021078:	89 c8                	mov    eax,ecx
c002107a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002107d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021080:	b8 01 00 00 00       	mov    eax,0x1
c0021085:	73 08                	jae    c002108f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021087:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002108a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002108d:	31 c0                	xor    eax,eax
c002108f:	5b                   	pop    ebx
c0021090:	c3                   	ret    
c0021091:	90                   	nop

c0021092 <ISO9660::tell(void*, unsigned long long*)>:
c0021092:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002109a:	85 d2                	test   edx,edx
c002109c:	74 12                	je     c00210b0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002109e:	85 c0                	test   eax,eax
c00210a0:	74 0e                	je     c00210b0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00210a2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00210a5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00210a8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00210ab:	89 10                	mov    DWORD PTR [eax],edx
c00210ad:	31 c0                	xor    eax,eax
c00210af:	c3                   	ret    
c00210b0:	b8 04 00 00 00       	mov    eax,0x4
c00210b5:	c3                   	ret    

c00210b6 <ISO9660::getName()>:
c00210b6:	b8 dc c1 02 c0       	mov    eax,0xc002c1dc
c00210bb:	c3                   	ret    

c00210bc <ISO9660::stat(void*, unsigned long long*)>:
c00210bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00210c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210c4:	85 d2                	test   edx,edx
c00210c6:	74 12                	je     c00210da <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00210c8:	85 c0                	test   eax,eax
c00210ca:	74 0e                	je     c00210da <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00210cc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00210cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00210d2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00210d5:	89 10                	mov    DWORD PTR [eax],edx
c00210d7:	31 c0                	xor    eax,eax
c00210d9:	c3                   	ret    
c00210da:	b8 04 00 00 00       	mov    eax,0x4
c00210df:	c3                   	ret    

c00210e0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00210e0:	b8 01 00 00 00       	mov    eax,0x1
c00210e5:	c3                   	ret    

c00210e6 <ISO9660::unlink(char const*)>:
c00210e6:	b8 01 00 00 00       	mov    eax,0x1
c00210eb:	c3                   	ret    

c00210ec <ISO9660::write(void*, unsigned long, void*, int*)>:
c00210ec:	b8 01 00 00 00       	mov    eax,0x1
c00210f1:	c3                   	ret    

c00210f2 <ISO9660::rename(char const*, char const*)>:
c00210f2:	b8 01 00 00 00       	mov    eax,0x1
c00210f7:	c3                   	ret    

c00210f8 <ISO9660::mkdir(char const*)>:
c00210f8:	b8 01 00 00 00       	mov    eax,0x1
c00210fd:	c3                   	ret    

c00210fe <ISO9660::close(void*)>:
c00210fe:	83 ec 0c             	sub    esp,0xc
c0021101:	b8 04 00 00 00       	mov    eax,0x4
c0021106:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002110a:	85 d2                	test   edx,edx
c002110c:	74 0e                	je     c002111c <ISO9660::close(void*)+0x1e>
c002110e:	83 ec 0c             	sub    esp,0xc
c0021111:	52                   	push   edx
c0021112:	e8 39 e7 fe ff       	call   c000f850 <free>
c0021117:	83 c4 10             	add    esp,0x10
c002111a:	31 c0                	xor    eax,eax
c002111c:	83 c4 0c             	add    esp,0xc
c002111f:	c3                   	ret    

c0021120 <ISO9660::closeDir(void*)>:
c0021120:	83 ec 0c             	sub    esp,0xc
c0021123:	b8 04 00 00 00       	mov    eax,0x4
c0021128:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002112c:	85 d2                	test   edx,edx
c002112e:	74 0e                	je     c002113e <ISO9660::closeDir(void*)+0x1e>
c0021130:	83 ec 0c             	sub    esp,0xc
c0021133:	52                   	push   edx
c0021134:	e8 17 e7 fe ff       	call   c000f850 <free>
c0021139:	83 c4 10             	add    esp,0x10
c002113c:	31 c0                	xor    eax,eax
c002113e:	83 c4 0c             	add    esp,0xc
c0021141:	c3                   	ret    

c0021142 <ISO9660::~ISO9660()>:
c0021142:	83 ec 0c             	sub    esp,0xc
c0021145:	ba 40 c2 02 c0       	mov    edx,0xc002c240
c002114a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002114e:	89 10                	mov    DWORD PTR [eax],edx
c0021150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021154:	83 ec 0c             	sub    esp,0xc
c0021157:	50                   	push   eax
c0021158:	e8 db 1c ff ff       	call   c0012e38 <Filesystem::~Filesystem()>
c002115d:	83 c4 10             	add    esp,0x10
c0021160:	90                   	nop
c0021161:	83 c4 0c             	add    esp,0xc
c0021164:	c3                   	ret    
c0021165:	90                   	nop

c0021166 <ISO9660::~ISO9660()>:
c0021166:	83 ec 0c             	sub    esp,0xc
c0021169:	83 ec 0c             	sub    esp,0xc
c002116c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021170:	e8 cd ff ff ff       	call   c0021142 <ISO9660::~ISO9660()>
c0021175:	83 c4 10             	add    esp,0x10
c0021178:	83 ec 08             	sub    esp,0x8
c002117b:	6a 08                	push   0x8
c002117d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021181:	e8 a9 18 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0021186:	83 c4 10             	add    esp,0x10
c0021189:	83 c4 0c             	add    esp,0xc
c002118c:	c3                   	ret    

c002118d <__memmem(unsigned char*, int, unsigned char*, int)>:
c002118d:	55                   	push   ebp
c002118e:	31 c9                	xor    ecx,ecx
c0021190:	57                   	push   edi
c0021191:	56                   	push   esi
c0021192:	53                   	push   ebx
c0021193:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021197:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002119b:	89 eb                	mov    ebx,ebp
c002119d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00211a1:	39 ce                	cmp    esi,ecx
c00211a3:	7e 17                	jle    c00211bc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00211a5:	31 d2                	xor    edx,edx
c00211a7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00211ab:	7d 13                	jge    c00211c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00211ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00211b1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00211b4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00211b7:	75 0d                	jne    c00211c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00211b9:	42                   	inc    edx
c00211ba:	eb eb                	jmp    c00211a7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00211bc:	31 c0                	xor    eax,eax
c00211be:	eb 0a                	jmp    c00211ca <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00211c0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00211c4:	eb 04                	jmp    c00211ca <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00211c6:	41                   	inc    ecx
c00211c7:	43                   	inc    ebx
c00211c8:	eb d7                	jmp    c00211a1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00211ca:	5b                   	pop    ebx
c00211cb:	5e                   	pop    esi
c00211cc:	5f                   	pop    edi
c00211cd:	5d                   	pop    ebp
c00211ce:	c3                   	ret    

c00211cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00211cf:	56                   	push   esi
c00211d0:	53                   	push   ebx
c00211d1:	52                   	push   edx
c00211d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00211da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00211de:	39 0d 40 14 03 c0    	cmp    DWORD PTR ds:0xc0031440,ecx
c00211e4:	75 08                	jne    c00211ee <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00211e6:	38 05 94 d2 02 c0    	cmp    BYTE PTR ds:0xc002d294,al
c00211ec:	74 2b                	je     c0021219 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00211ee:	83 ec 0c             	sub    esp,0xc
c00211f1:	a2 94 d2 02 c0       	mov    ds:0xc002d294,al
c00211f6:	68 60 14 03 c0       	push   0xc0031460
c00211fb:	0f be c0             	movsx  eax,al
c00211fe:	6a 01                	push   0x1
c0021200:	89 0d 40 14 03 c0    	mov    DWORD PTR ds:0xc0031440,ecx
c0021206:	31 db                	xor    ebx,ebx
c0021208:	53                   	push   ebx
c0021209:	51                   	push   ecx
c002120a:	ff 34 85 1c e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1de4]
c0021211:	e8 b6 50 ff ff       	call   c00162cc <LogicalDisk::read(unsigned long long, int, void*)>
c0021216:	83 c4 20             	add    esp,0x20
c0021219:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021221:	c7 44 24 14 60 14 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031460
c0021229:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002122d:	58                   	pop    eax
c002122e:	5b                   	pop    ebx
c002122f:	5e                   	pop    esi
c0021230:	e9 0f f5 fd ff       	jmp    c0000744 <memcpy>
c0021235:	90                   	nop

c0021236 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021236:	81 ec 10 08 00 00    	sub    esp,0x810
c002123c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021243:	83 c0 41             	add    eax,0x41
c0021246:	0f be c0             	movsx  eax,al
c0021249:	50                   	push   eax
c002124a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002124e:	50                   	push   eax
c002124f:	6a 10                	push   0x10
c0021251:	e8 79 ff ff ff       	call   c00211cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021256:	83 c4 10             	add    esp,0x10
c0021259:	31 c0                	xor    eax,eax
c002125b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021260:	75 1d                	jne    c002127f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021262:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021267:	75 16                	jne    c002127f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021269:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002126e:	75 0f                	jne    c002127f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021270:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021275:	75 08                	jne    c002127f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021277:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002127c:	0f 94 c0             	sete   al
c002127f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021285:	c3                   	ret    

c0021286 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021286:	55                   	push   ebp
c0021287:	57                   	push   edi
c0021288:	56                   	push   esi
c0021289:	53                   	push   ebx
c002128a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021290:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021297:	85 ed                	test   ebp,ebp
c0021299:	0f 84 d6 01 00 00    	je     c0021475 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002129f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00212a7:	0f 84 c8 01 00 00    	je     c0021475 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00212ad:	b8 01 00 00 00       	mov    eax,0x1
c00212b2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00212b6:	0f 85 be 01 00 00    	jne    c002147a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00212bc:	31 d2                	xor    edx,edx
c00212be:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00212c5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00212c8:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00212cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00212cf:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00212d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00212d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212d9:	01 f0                	add    eax,esi
c00212db:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00212de:	11 fa                	adc    edx,edi
c00212e0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00212e4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00212e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00212ec:	19 d1                	sbb    ecx,edx
c00212ee:	72 0a                	jb     c00212fa <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00212f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00212f8:	eb 13                	jmp    c002130d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00212fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021302:	29 f0                	sub    eax,esi
c0021304:	19 fa                	sbb    edx,edi
c0021306:	89 04 24             	mov    DWORD PTR [esp],eax
c0021309:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002130d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021310:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021313:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021317:	51                   	push   ecx
c0021318:	c1 e0 0b             	shl    eax,0xb
c002131b:	01 c6                	add    esi,eax
c002131d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021321:	11 d7                	adc    edi,edx
c0021323:	50                   	push   eax
c0021324:	89 fa                	mov    edx,edi
c0021326:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002132a:	89 f0                	mov    eax,esi
c002132c:	53                   	push   ebx
c002132d:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021331:	50                   	push   eax
c0021332:	e8 98 fe ff ff       	call   c00211cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021337:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002133b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002133e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021342:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021348:	83 c4 10             	add    esp,0x10
c002134b:	b8 00 08 00 00       	mov    eax,0x800
c0021350:	29 d0                	sub    eax,edx
c0021352:	39 c1                	cmp    ecx,eax
c0021354:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021358:	83 d9 00             	sbb    ecx,0x0
c002135b:	7d 1c                	jge    c0021379 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c002135d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021362:	75 12                	jne    c0021376 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021364:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002136b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021371:	e9 fb 00 00 00       	jmp    c0021471 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021376:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021379:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002137c:	31 d2                	xor    edx,edx
c002137e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021382:	39 c2                	cmp    edx,eax
c0021384:	7d 14                	jge    c002139a <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021386:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002138d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021391:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021394:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021397:	42                   	inc    edx
c0021398:	eb e8                	jmp    c0021382 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002139a:	89 c3                	mov    ebx,eax
c002139c:	85 c0                	test   eax,eax
c002139e:	79 02                	jns    c00213a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00213a0:	31 db                	xor    ebx,ebx
c00213a2:	99                   	cdq    
c00213a3:	01 c3                	add    ebx,eax
c00213a5:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00213ac:	01 c6                	add    esi,eax
c00213ae:	11 d7                	adc    edi,edx
c00213b0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00213b4:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00213b8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00213bb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00213bf:	29 c6                	sub    esi,eax
c00213c1:	19 d7                	sbb    edi,edx
c00213c3:	89 34 24             	mov    DWORD PTR [esp],esi
c00213c6:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00213ca:	b8 ff 07 00 00       	mov    eax,0x7ff
c00213cf:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00213d2:	b8 00 00 00 00       	mov    eax,0x0
c00213d7:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00213db:	7d 3e                	jge    c002141b <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00213dd:	52                   	push   edx
c00213de:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213e2:	50                   	push   eax
c00213e3:	53                   	push   ebx
c00213e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213e8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00213ec:	0f ac d0 0b          	shrd   eax,edx,0xb
c00213f0:	50                   	push   eax
c00213f1:	e8 d9 fd ff ff       	call   c00211cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213f6:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00213fe:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021403:	81 c3 00 08 00 00    	add    ebx,0x800
c0021409:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021411:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021416:	83 c4 10             	add    esp,0x10
c0021419:	eb af                	jmp    c00213ca <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c002141b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002141f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021422:	74 32                	je     c0021456 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021424:	50                   	push   eax
c0021425:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021429:	50                   	push   eax
c002142a:	8d 44 24 28          	lea    eax,[esp+0x28]
c002142e:	50                   	push   eax
c002142f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021433:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021437:	0f ac fe 0b          	shrd   esi,edi,0xb
c002143b:	56                   	push   esi
c002143c:	e8 8e fd ff ff       	call   c00211cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021441:	83 c4 0c             	add    esp,0xc
c0021444:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021448:	8d 44 24 28          	lea    eax,[esp+0x28]
c002144c:	50                   	push   eax
c002144d:	53                   	push   ebx
c002144e:	e8 f1 f2 fd ff       	call   c0000744 <memcpy>
c0021453:	83 c4 10             	add    esp,0x10
c0021456:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002145d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021461:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021465:	89 38                	mov    DWORD PTR [eax],edi
c0021467:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002146b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002146e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021471:	31 c0                	xor    eax,eax
c0021473:	eb 05                	jmp    c002147a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021475:	b8 04 00 00 00       	mov    eax,0x4
c002147a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021480:	5b                   	pop    ebx
c0021481:	5e                   	pop    esi
c0021482:	5f                   	pop    edi
c0021483:	5d                   	pop    ebp
c0021484:	c3                   	ret    
c0021485:	90                   	nop

c0021486 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021486:	55                   	push   ebp
c0021487:	57                   	push   edi
c0021488:	56                   	push   esi
c0021489:	53                   	push   ebx
c002148a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021490:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021497:	85 f6                	test   esi,esi
c0021499:	0f 84 64 02 00 00    	je     c0021703 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002149f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00214a7:	0f 84 56 02 00 00    	je     c0021703 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00214ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00214b0:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00214b3:	75 0a                	jne    c00214bf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00214b5:	b8 07 00 00 00       	mov    eax,0x7
c00214ba:	e9 49 02 00 00       	jmp    c0021708 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00214bf:	50                   	push   eax
c00214c0:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00214c4:	50                   	push   eax
c00214c5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214cc:	53                   	push   ebx
c00214cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00214cf:	c1 e0 0b             	shl    eax,0xb
c00214d2:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00214d5:	c1 e8 0b             	shr    eax,0xb
c00214d8:	50                   	push   eax
c00214d9:	e8 f1 fc ff ff       	call   c00211cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214de:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00214e1:	83 c4 10             	add    esp,0x10
c00214e4:	89 c1                	mov    ecx,eax
c00214e6:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00214e9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00214ef:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00214f2:	84 db                	test   bl,bl
c00214f4:	0f 85 90 00 00 00    	jne    c002158a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00214fa:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021500:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021506:	29 c7                	sub    edi,eax
c0021508:	89 fb                	mov    ebx,edi
c002150a:	c1 fb 1f             	sar    ebx,0x1f
c002150d:	01 f8                	add    eax,edi
c002150f:	11 da                	adc    edx,ebx
c0021511:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021515:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021519:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c002151c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c002151f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021522:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021525:	89 04 24             	mov    DWORD PTR [esp],eax
c0021528:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002152c:	89 d8                	mov    eax,ebx
c002152e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021531:	ba 00 00 00 00       	mov    edx,0x0
c0021536:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002153a:	b8 00 00 00 00       	mov    eax,0x0
c002153f:	73 0b                	jae    c002154c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021541:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021544:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021548:	29 f8                	sub    eax,edi
c002154a:	19 da                	sbb    edx,ebx
c002154c:	89 d3                	mov    ebx,edx
c002154e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021551:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021554:	09 c3                	or     ebx,eax
c0021556:	0f 84 59 ff ff ff    	je     c00214b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002155c:	55                   	push   ebp
c002155d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021561:	50                   	push   eax
c0021562:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021569:	53                   	push   ebx
c002156a:	8b 06                	mov    eax,DWORD PTR [esi]
c002156c:	c1 e0 0b             	shl    eax,0xb
c002156f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021573:	c1 e8 0b             	shr    eax,0xb
c0021576:	50                   	push   eax
c0021577:	e8 53 fc ff ff       	call   c00211cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002157c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002157f:	83 c4 10             	add    esp,0x10
c0021582:	25 ff 07 00 00       	and    eax,0x7ff
c0021587:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002158a:	57                   	push   edi
c002158b:	6a 28                	push   0x28
c002158d:	6a 00                	push   0x0
c002158f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021593:	50                   	push   eax
c0021594:	e8 df f1 fd ff       	call   c0000778 <memset>
c0021599:	31 d2                	xor    edx,edx
c002159b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c002159e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00215a4:	89 f8                	mov    eax,edi
c00215a6:	83 c0 21             	add    eax,0x21
c00215a9:	83 d2 00             	adc    edx,0x0
c00215ac:	89 c7                	mov    edi,eax
c00215ae:	89 d5                	mov    ebp,edx
c00215b0:	83 c4 10             	add    esp,0x10
c00215b3:	31 c9                	xor    ecx,ecx
c00215b5:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c00215bc:	83 f9 28             	cmp    ecx,0x28
c00215bf:	88 04 24             	mov    BYTE PTR [esp],al
c00215c2:	0f 94 c2             	sete   dl
c00215c5:	88 d0                	mov    al,dl
c00215c7:	ba ff 07 00 00       	mov    edx,0x7ff
c00215cc:	39 fa                	cmp    edx,edi
c00215ce:	ba 00 00 00 00       	mov    edx,0x0
c00215d3:	19 ea                	sbb    edx,ebp
c00215d5:	0f 92 c2             	setb   dl
c00215d8:	09 c2                	or     edx,eax
c00215da:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00215de:	0f 94 c0             	sete   al
c00215e1:	08 d0                	or     al,dl
c00215e3:	75 16                	jne    c00215fb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00215e5:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00215e9:	74 10                	je     c00215fb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00215eb:	8a 04 24             	mov    al,BYTE PTR [esp]
c00215ee:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00215f2:	41                   	inc    ecx
c00215f3:	83 c7 01             	add    edi,0x1
c00215f6:	83 d5 00             	adc    ebp,0x0
c00215f9:	eb ba                	jmp    c00215b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c00215fb:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021602:	83 ec 0c             	sub    esp,0xc
c0021605:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021609:	57                   	push   edi
c002160a:	e8 85 f1 fd ff       	call   c0000794 <strlen>
c002160f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021617:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002161b:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021622:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021625:	5a                   	pop    edx
c0021626:	25 ff 07 00 00       	and    eax,0x7ff
c002162b:	01 c8                	add    eax,ecx
c002162d:	59                   	pop    ecx
c002162e:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021634:	83 e0 02             	and    eax,0x2
c0021637:	3c 01                	cmp    al,0x1
c0021639:	19 c0                	sbb    eax,eax
c002163b:	83 c0 02             	add    eax,0x2
c002163e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021642:	57                   	push   edi
c0021643:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021647:	50                   	push   eax
c0021648:	e8 e7 f1 fd ff       	call   c0000834 <strcpy>
c002164d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021651:	83 c4 10             	add    esp,0x10
c0021654:	84 c0                	test   al,al
c0021656:	75 21                	jne    c0021679 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021658:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021660:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021668:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021670:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021677:	eb 28                	jmp    c00216a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021679:	fe c8                	dec    al
c002167b:	75 24                	jne    c00216a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002167d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021685:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002168d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021695:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002169c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00216a1:	0f b6 fb             	movzx  edi,bl
c00216a4:	31 db                	xor    ebx,ebx
c00216a6:	50                   	push   eax
c00216a7:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c00216ae:	8d 44 24 48          	lea    eax,[esp+0x48]
c00216b2:	50                   	push   eax
c00216b3:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c00216ba:	e8 85 f0 fd ff       	call   c0000744 <memcpy>
c00216bf:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00216c6:	89 f9                	mov    ecx,edi
c00216c8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00216ce:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00216d1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00216d4:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00216d7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00216da:	83 c4 10             	add    esp,0x10
c00216dd:	39 c7                	cmp    edi,eax
c00216df:	89 df                	mov    edi,ebx
c00216e1:	19 d7                	sbb    edi,edx
c00216e3:	72 10                	jb     c00216f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00216e5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00216ec:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00216f3:	eb 0a                	jmp    c00216ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00216f5:	29 c8                	sub    eax,ecx
c00216f7:	19 da                	sbb    edx,ebx
c00216f9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00216fc:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00216ff:	31 c0                	xor    eax,eax
c0021701:	eb 05                	jmp    c0021708 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021703:	b8 04 00 00 00       	mov    eax,0x4
c0021708:	81 c4 5c 09 00 00    	add    esp,0x95c
c002170e:	5b                   	pop    ebx
c002170f:	5e                   	pop    esi
c0021710:	5f                   	pop    edi
c0021711:	5d                   	pop    ebp
c0021712:	c3                   	ret    

c0021713 <readRoot(unsigned int*, unsigned int*, char)>:
c0021713:	81 ec 40 08 00 00    	sub    esp,0x840
c0021719:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021721:	50                   	push   eax
c0021722:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021726:	50                   	push   eax
c0021727:	6a 10                	push   0x10
c0021729:	e8 a1 fa ff ff       	call   c00211cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002172e:	83 c4 0c             	add    esp,0xc
c0021731:	6a 22                	push   0x22
c0021733:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c002173a:	50                   	push   eax
c002173b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002173f:	50                   	push   eax
c0021740:	e8 ff ef fd ff       	call   c0000744 <memcpy>
c0021745:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002174c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021750:	89 10                	mov    DWORD PTR [eax],edx
c0021752:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021759:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002175d:	89 10                	mov    DWORD PTR [eax],edx
c002175f:	b0 01                	mov    al,0x1
c0021761:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021767:	c3                   	ret    

c0021768 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021768:	55                   	push   ebp
c0021769:	57                   	push   edi
c002176a:	56                   	push   esi
c002176b:	53                   	push   ebx
c002176c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021772:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021779:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021780:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021784:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021788:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002178c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021790:	75 03                	jne    c0021795 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021792:	83 c3 02             	add    ebx,0x2
c0021795:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021798:	75 03                	jne    c002179d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002179a:	43                   	inc    ebx
c002179b:	eb f8                	jmp    c0021795 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002179d:	51                   	push   ecx
c002179e:	68 00 01 00 00       	push   0x100
c00217a3:	6a 00                	push   0x0
c00217a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217a9:	50                   	push   eax
c00217aa:	e8 c9 ef fd ff       	call   c0000778 <memset>
c00217af:	83 c4 10             	add    esp,0x10
c00217b2:	31 d2                	xor    edx,edx
c00217b4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217b7:	84 c0                	test   al,al
c00217b9:	74 21                	je     c00217dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00217bb:	3c 2f                	cmp    al,0x2f
c00217bd:	75 0b                	jne    c00217ca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00217bf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00217c3:	bd 01 00 00 00       	mov    ebp,0x1
c00217c8:	eb 14                	jmp    c00217de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00217ca:	8d 48 9f             	lea    ecx,[eax-0x61]
c00217cd:	80 f9 19             	cmp    cl,0x19
c00217d0:	77 03                	ja     c00217d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00217d2:	83 e8 20             	sub    eax,0x20
c00217d5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00217d9:	42                   	inc    edx
c00217da:	eb d8                	jmp    c00217b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00217dc:	31 ed                	xor    ebp,ebp
c00217de:	83 ec 0c             	sub    esp,0xc
c00217e1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00217e8:	e8 53 e0 fe ff       	call   c000f840 <malloc>
c00217ed:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00217f4:	89 c6                	mov    esi,eax
c00217f6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00217fc:	c1 ef 0b             	shr    edi,0xb
c00217ff:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021806:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002180a:	83 c4 10             	add    esp,0x10
c002180d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021812:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021816:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002181d:	74 28                	je     c0021847 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002181f:	52                   	push   edx
c0021820:	57                   	push   edi
c0021821:	50                   	push   eax
c0021822:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021826:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002182d:	e8 9d f9 ff ff       	call   c00211cf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021832:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021836:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002183d:	05 00 08 00 00       	add    eax,0x800
c0021842:	83 c4 10             	add    esp,0x10
c0021845:	eb cb                	jmp    c0021812 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021847:	83 ec 0c             	sub    esp,0xc
c002184a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002184e:	57                   	push   edi
c002184f:	e8 40 ef fd ff       	call   c0000794 <strlen>
c0021854:	50                   	push   eax
c0021855:	57                   	push   edi
c0021856:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002185d:	56                   	push   esi
c002185e:	e8 2a f9 ff ff       	call   c002118d <__memmem(unsigned char*, int, unsigned char*, int)>
c0021863:	83 c4 20             	add    esp,0x20
c0021866:	85 c0                	test   eax,eax
c0021868:	75 13                	jne    c002187d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002186a:	83 ec 0c             	sub    esp,0xc
c002186d:	56                   	push   esi
c002186e:	e8 dd df fe ff       	call   c000f850 <free>
c0021873:	83 c4 10             	add    esp,0x10
c0021876:	31 c0                	xor    eax,eax
c0021878:	e9 b3 00 00 00       	jmp    c0021930 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002187d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021881:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021885:	c1 e7 08             	shl    edi,0x8
c0021888:	c1 e2 10             	shl    edx,0x10
c002188b:	09 d7                	or     edi,edx
c002188d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021891:	09 d7                	or     edi,edx
c0021893:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021897:	c1 e2 18             	shl    edx,0x18
c002189a:	09 d7                	or     edi,edx
c002189c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00218a0:	89 d1                	mov    ecx,edx
c00218a2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00218a6:	c1 e1 08             	shl    ecx,0x8
c00218a9:	c1 e2 10             	shl    edx,0x10
c00218ac:	09 ca                	or     edx,ecx
c00218ae:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00218b2:	09 ca                	or     edx,ecx
c00218b4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00218b8:	c1 e1 18             	shl    ecx,0x18
c00218bb:	09 ca                	or     edx,ecx
c00218bd:	89 e9                	mov    ecx,ebp
c00218bf:	84 c9                	test   cl,cl
c00218c1:	74 3c                	je     c00218ff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00218c3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00218c7:	83 ec 0c             	sub    esp,0xc
c00218ca:	56                   	push   esi
c00218cb:	e8 80 df fe ff       	call   c000f850 <free>
c00218d0:	83 c4 0c             	add    esp,0xc
c00218d3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218da:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00218df:	50                   	push   eax
c00218e0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218e7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00218f2:	52                   	push   edx
c00218f3:	57                   	push   edi
c00218f4:	53                   	push   ebx
c00218f5:	e8 6e fe ff ff       	call   c0021768 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00218fa:	83 c4 20             	add    esp,0x20
c00218fd:	eb 31                	jmp    c0021930 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00218ff:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021902:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021909:	d0 e8                	shr    al,1
c002190b:	89 3b                	mov    DWORD PTR [ebx],edi
c002190d:	83 e0 01             	and    eax,0x1
c0021910:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021917:	83 ec 0c             	sub    esp,0xc
c002191a:	89 13                	mov    DWORD PTR [ebx],edx
c002191c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021923:	89 03                	mov    DWORD PTR [ebx],eax
c0021925:	56                   	push   esi
c0021926:	e8 25 df fe ff       	call   c000f850 <free>
c002192b:	83 c4 10             	add    esp,0x10
c002192e:	b0 01                	mov    al,0x1
c0021930:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021936:	5b                   	pop    ebx
c0021937:	5e                   	pop    esi
c0021938:	5f                   	pop    edi
c0021939:	5d                   	pop    ebp
c002193a:	c3                   	ret    

c002193b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002193b:	55                   	push   ebp
c002193c:	57                   	push   edi
c002193d:	56                   	push   esi
c002193e:	53                   	push   ebx
c002193f:	83 ec 20             	sub    esp,0x20
c0021942:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021946:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002194a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002194e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021956:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002195e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021963:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021969:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002196f:	57                   	push   edi
c0021970:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021974:	50                   	push   eax
c0021975:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021979:	50                   	push   eax
c002197a:	e8 94 fd ff ff       	call   c0021713 <readRoot(unsigned int*, unsigned int*, char)>
c002197f:	5a                   	pop    edx
c0021980:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021984:	e8 0b ee fd ff       	call   c0000794 <strlen>
c0021989:	83 c4 10             	add    esp,0x10
c002198c:	83 f8 03             	cmp    eax,0x3
c002198f:	77 17                	ja     c00219a8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021991:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021995:	89 03                	mov    DWORD PTR [ebx],eax
c0021997:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002199b:	89 06                	mov    DWORD PTR [esi],eax
c002199d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00219a4:	b0 01                	mov    al,0x1
c00219a6:	eb 19                	jmp    c00219c1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00219a8:	50                   	push   eax
c00219a9:	55                   	push   ebp
c00219aa:	57                   	push   edi
c00219ab:	56                   	push   esi
c00219ac:	53                   	push   ebx
c00219ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00219b9:	e8 aa fd ff ff       	call   c0021768 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00219be:	83 c4 20             	add    esp,0x20
c00219c1:	83 c4 1c             	add    esp,0x1c
c00219c4:	5b                   	pop    ebx
c00219c5:	5e                   	pop    esi
c00219c6:	5f                   	pop    edi
c00219c7:	5d                   	pop    ebp
c00219c8:	c3                   	ret    
c00219c9:	90                   	nop

c00219ca <ISO9660::open(char const*, void**, FileOpenMode)>:
c00219ca:	57                   	push   edi
c00219cb:	56                   	push   esi
c00219cc:	53                   	push   ebx
c00219cd:	83 ec 10             	sub    esp,0x10
c00219d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219d4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219d8:	85 ff                	test   edi,edi
c00219da:	0f 84 9d 00 00 00    	je     c0021a7d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00219e0:	85 f6                	test   esi,esi
c00219e2:	0f 84 95 00 00 00    	je     c0021a7d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00219e8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00219ed:	74 17                	je     c0021a06 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00219ef:	83 ec 0c             	sub    esp,0xc
c00219f2:	68 f7 c1 02 c0       	push   0xc002c1f7
c00219f7:	e8 13 11 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00219fc:	83 c4 10             	add    esp,0x10
c00219ff:	b8 03 00 00 00       	mov    eax,0x3
c0021a04:	eb 7c                	jmp    c0021a82 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021a06:	83 ec 0c             	sub    esp,0xc
c0021a09:	6a 1c                	push   0x1c
c0021a0b:	e8 30 de fe ff       	call   c000f840 <malloc>
c0021a10:	89 07                	mov    DWORD PTR [edi],eax
c0021a12:	89 c3                	mov    ebx,eax
c0021a14:	58                   	pop    eax
c0021a15:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a19:	50                   	push   eax
c0021a1a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021a1d:	50                   	push   eax
c0021a1e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a22:	50                   	push   eax
c0021a23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a27:	50                   	push   eax
c0021a28:	56                   	push   esi
c0021a29:	e8 0d ff ff ff       	call   c002193b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a2e:	83 c4 20             	add    esp,0x20
c0021a31:	84 c0                	test   al,al
c0021a33:	74 07                	je     c0021a3c <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021a35:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021a3a:	74 0b                	je     c0021a47 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021a3c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a40:	b8 01 00 00 00       	mov    eax,0x1
c0021a45:	eb 3b                	jmp    c0021a82 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021a47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a4b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a4f:	89 03                	mov    DWORD PTR [ebx],eax
c0021a51:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a5c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a63:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a6a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a6d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a74:	8a 06                	mov    al,BYTE PTR [esi]
c0021a76:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a79:	31 c0                	xor    eax,eax
c0021a7b:	eb 05                	jmp    c0021a82 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021a7d:	b8 04 00 00 00       	mov    eax,0x4
c0021a82:	83 c4 10             	add    esp,0x10
c0021a85:	5b                   	pop    ebx
c0021a86:	5e                   	pop    esi
c0021a87:	5f                   	pop    edi
c0021a88:	c3                   	ret    
c0021a89:	90                   	nop

c0021a8a <ISO9660::exists(char const*)>:
c0021a8a:	83 ec 28             	sub    esp,0x28
c0021a8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021a91:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021a95:	52                   	push   edx
c0021a96:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021a99:	52                   	push   edx
c0021a9a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a9e:	52                   	push   edx
c0021a9f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021aa3:	52                   	push   edx
c0021aa4:	50                   	push   eax
c0021aa5:	e8 91 fe ff ff       	call   c002193b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021aaa:	83 c4 3c             	add    esp,0x3c
c0021aad:	c3                   	ret    

c0021aae <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021aae:	56                   	push   esi
c0021aaf:	53                   	push   ebx
c0021ab0:	83 ec 14             	sub    esp,0x14
c0021ab3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021ab7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021abb:	85 db                	test   ebx,ebx
c0021abd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021ac1:	0f 94 c2             	sete   dl
c0021ac4:	85 f6                	test   esi,esi
c0021ac6:	0f 94 c0             	sete   al
c0021ac9:	08 c2                	or     dl,al
c0021acb:	75 68                	jne    c0021b35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021acd:	85 c9                	test   ecx,ecx
c0021acf:	74 64                	je     c0021b35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021ad1:	83 ec 0c             	sub    esp,0xc
c0021ad4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021ad7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021adb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021ae1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ae8:	50                   	push   eax
c0021ae9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021aec:	50                   	push   eax
c0021aed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021af1:	50                   	push   eax
c0021af2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021af6:	50                   	push   eax
c0021af7:	51                   	push   ecx
c0021af8:	e8 3e fe ff ff       	call   c002193b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021afd:	83 c4 20             	add    esp,0x20
c0021b00:	ba 01 00 00 00       	mov    edx,0x1
c0021b05:	84 c0                	test   al,al
c0021b07:	74 31                	je     c0021b3a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b0d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b14:	89 03                	mov    DWORD PTR [ebx],eax
c0021b16:	ba 00 00 00 00       	mov    edx,0x0
c0021b1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b1f:	85 c0                	test   eax,eax
c0021b21:	0f 95 06             	setne  BYTE PTR [esi]
c0021b24:	74 14                	je     c0021b3a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b26:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021b2c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b33:	eb 05                	jmp    c0021b3a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b35:	ba 04 00 00 00       	mov    edx,0x4
c0021b3a:	83 c4 14             	add    esp,0x14
c0021b3d:	89 d0                	mov    eax,edx
c0021b3f:	5b                   	pop    ebx
c0021b40:	5e                   	pop    esi
c0021b41:	c3                   	ret    

c0021b42 <ISO9660::openDir(char const*, void**)>:
c0021b42:	57                   	push   edi
c0021b43:	56                   	push   esi
c0021b44:	53                   	push   ebx
c0021b45:	83 ec 10             	sub    esp,0x10
c0021b48:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021b4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021b50:	85 ff                	test   edi,edi
c0021b52:	0f 84 95 00 00 00    	je     c0021bed <ISO9660::openDir(char const*, void**)+0xab>
c0021b58:	85 f6                	test   esi,esi
c0021b5a:	0f 84 8d 00 00 00    	je     c0021bed <ISO9660::openDir(char const*, void**)+0xab>
c0021b60:	83 ec 0c             	sub    esp,0xc
c0021b63:	6a 1c                	push   0x1c
c0021b65:	e8 d6 dc fe ff       	call   c000f840 <malloc>
c0021b6a:	89 07                	mov    DWORD PTR [edi],eax
c0021b6c:	89 c3                	mov    ebx,eax
c0021b6e:	59                   	pop    ecx
c0021b6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b73:	50                   	push   eax
c0021b74:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021b77:	50                   	push   eax
c0021b78:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b7c:	50                   	push   eax
c0021b7d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b81:	50                   	push   eax
c0021b82:	56                   	push   esi
c0021b83:	e8 b3 fd ff ff       	call   c002193b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b88:	83 c4 20             	add    esp,0x20
c0021b8b:	84 c0                	test   al,al
c0021b8d:	74 07                	je     c0021b96 <ISO9660::openDir(char const*, void**)+0x54>
c0021b8f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b94:	75 21                	jne    c0021bb7 <ISO9660::openDir(char const*, void**)+0x75>
c0021b96:	0f b6 c0             	movzx  eax,al
c0021b99:	52                   	push   edx
c0021b9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021b9e:	50                   	push   eax
c0021b9f:	68 1d c2 02 c0       	push   0xc002c21d
c0021ba4:	e8 66 0f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0021ba9:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021bad:	83 c4 10             	add    esp,0x10
c0021bb0:	b8 01 00 00 00       	mov    eax,0x1
c0021bb5:	eb 3b                	jmp    c0021bf2 <ISO9660::openDir(char const*, void**)+0xb0>
c0021bb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bbb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021bbf:	89 03                	mov    DWORD PTR [ebx],eax
c0021bc1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021bc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bcc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021bd3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021bda:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021bdd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021be4:	8a 06                	mov    al,BYTE PTR [esi]
c0021be6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021be9:	31 c0                	xor    eax,eax
c0021beb:	eb 05                	jmp    c0021bf2 <ISO9660::openDir(char const*, void**)+0xb0>
c0021bed:	b8 04 00 00 00       	mov    eax,0x4
c0021bf2:	83 c4 10             	add    esp,0x10
c0021bf5:	5b                   	pop    ebx
c0021bf6:	5e                   	pop    esi
c0021bf7:	5f                   	pop    edi
c0021bf8:	c3                   	ret    
c0021bf9:	90                   	nop

c0021bfa <ISO9660::ISO9660()>:
c0021bfa:	83 ec 0c             	sub    esp,0xc
c0021bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c01:	83 ec 0c             	sub    esp,0xc
c0021c04:	50                   	push   eax
c0021c05:	e8 0a 12 ff ff       	call   c0012e14 <Filesystem::Filesystem()>
c0021c0a:	83 c4 10             	add    esp,0x10
c0021c0d:	ba 40 c2 02 c0       	mov    edx,0xc002c240
c0021c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c16:	89 10                	mov    DWORD PTR [eax],edx
c0021c18:	90                   	nop
c0021c19:	83 c4 0c             	add    esp,0xc
c0021c1c:	c3                   	ret    
c0021c1d:	90                   	nop

c0021c1e <SoundChannel::~SoundChannel()>:
c0021c1e:	83 ec 0c             	sub    esp,0xc
c0021c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021c28:	83 ec 0c             	sub    esp,0xc
c0021c2b:	50                   	push   eax
c0021c2c:	e8 1f dc fe ff       	call   c000f850 <free>
c0021c31:	83 c4 10             	add    esp,0x10
c0021c34:	90                   	nop
c0021c35:	83 c4 0c             	add    esp,0xc
c0021c38:	c3                   	ret    
c0021c39:	90                   	nop

c0021c3a <SoundChannel::setSpeed(float)>:
c0021c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021c42:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021c45:	c3                   	ret    

c0021c46 <SoundChannel::getSpeed()>:
c0021c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c4a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021c4d:	c3                   	ret    

c0021c4e <SoundChannel::setVolume(int)>:
c0021c4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c52:	83 f8 64             	cmp    eax,0x64
c0021c55:	7e 05                	jle    c0021c5c <SoundChannel::setVolume(int)+0xe>
c0021c57:	b8 64 00 00 00       	mov    eax,0x64
c0021c5c:	85 c0                	test   eax,eax
c0021c5e:	79 02                	jns    c0021c62 <SoundChannel::setVolume(int)+0x14>
c0021c60:	31 c0                	xor    eax,eax
c0021c62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021c66:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021c69:	c3                   	ret    

c0021c6a <SoundChannel::getVolume()>:
c0021c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c6e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021c71:	c3                   	ret    

c0021c72 <SoundChannel::pause()>:
c0021c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c76:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021c7a:	c3                   	ret    
c0021c7b:	90                   	nop

c0021c7c <SoundChannel::SoundChannel(int, int, int, int)>:
c0021c7c:	83 ec 1c             	sub    esp,0x1c
c0021c7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021c83:	e8 ea ff ff ff       	call   c0021c72 <SoundChannel::pause()>
c0021c88:	83 c4 04             	add    esp,0x4
c0021c8b:	6a 50                	push   0x50
c0021c8d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021c91:	e8 b8 ff ff ff       	call   c0021c4e <SoundChannel::setVolume(int)>
c0021c96:	83 c4 08             	add    esp,0x8
c0021c99:	a1 b8 c2 02 c0       	mov    eax,ds:0xc002c2b8
c0021c9e:	50                   	push   eax
c0021c9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021ca3:	e8 92 ff ff ff       	call   c0021c3a <SoundChannel::setSpeed(float)>
c0021ca8:	83 c4 08             	add    esp,0x8
c0021cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021caf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021cb3:	89 10                	mov    DWORD PTR [eax],edx
c0021cb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cbd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cc4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021cc8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ccb:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021cd0:	75 23                	jne    c0021cf5 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cd6:	8b 10                	mov    edx,DWORD PTR [eax]
c0021cd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cdf:	0f af c2             	imul   eax,edx
c0021ce2:	85 c0                	test   eax,eax
c0021ce4:	79 03                	jns    c0021ce9 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021ce6:	83 c0 03             	add    eax,0x3
c0021ce9:	c1 f8 02             	sar    eax,0x2
c0021cec:	05 a0 0f 00 00       	add    eax,0xfa0
c0021cf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cf9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021cfd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d04:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021d0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d0f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d1a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021d1d:	c1 e0 02             	shl    eax,0x2
c0021d20:	83 ec 0c             	sub    esp,0xc
c0021d23:	50                   	push   eax
c0021d24:	e8 17 db fe ff       	call   c000f840 <malloc>
c0021d29:	83 c4 10             	add    esp,0x10
c0021d2c:	89 c2                	mov    edx,eax
c0021d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021d35:	83 ec 04             	sub    esp,0x4
c0021d38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021d3c:	50                   	push   eax
c0021d3d:	6a 01                	push   0x1
c0021d3f:	6a 04                	push   0x4
c0021d41:	e8 59 6e fe ff       	call   c0008b9f <src_new>
c0021d46:	83 c4 10             	add    esp,0x10
c0021d49:	89 c2                	mov    edx,eax
c0021d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d56:	85 c0                	test   eax,eax
c0021d58:	74 10                	je     c0021d6a <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021d5a:	83 ec 0c             	sub    esp,0xc
c0021d5d:	68 9c c2 02 c0       	push   0xc002c29c
c0021d62:	e8 38 84 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0021d67:	83 c4 10             	add    esp,0x10
c0021d6a:	a0 60 20 03 c0       	mov    al,ds:0xc0032060
c0021d6f:	83 f0 01             	xor    eax,0x1
c0021d72:	84 c0                	test   al,al
c0021d74:	74 57                	je     c0021dcd <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021d76:	a1 bc c2 02 c0       	mov    eax,ds:0xc002c2bc
c0021d7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021d7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d87:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021d8f:	7f 35                	jg     c0021dc6 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021d91:	83 ec 0c             	sub    esp,0xc
c0021d94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d98:	e8 9a 4f 00 00       	call   c0026d37 <__floatsisf>
c0021d9d:	83 c4 10             	add    esp,0x10
c0021da0:	8b 15 bc c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c2bc
c0021da6:	83 ec 08             	sub    esp,0x8
c0021da9:	52                   	push   edx
c0021daa:	50                   	push   eax
c0021dab:	e8 99 4b 00 00       	call   c0026949 <__mulsf3>
c0021db0:	83 c4 10             	add    esp,0x10
c0021db3:	89 c2                	mov    edx,eax
c0021db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021db9:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0021dc0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021dc4:	eb c1                	jmp    c0021d87 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021dc6:	c6 05 60 20 03 c0 01 	mov    BYTE PTR ds:0xc0032060,0x1
c0021dcd:	90                   	nop
c0021dce:	83 c4 1c             	add    esp,0x1c
c0021dd1:	c3                   	ret    

c0021dd2 <SoundChannel::play()>:
c0021dd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dd6:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021dda:	c3                   	ret    
c0021ddb:	90                   	nop

c0021ddc <SoundChannel::paused()>:
c0021ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021de0:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021de3:	c3                   	ret    

c0021de4 <SoundChannel::getSampleRate()>:
c0021de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021de8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dea:	c3                   	ret    
c0021deb:	90                   	nop

c0021dec <SoundChannel::getBits()>:
c0021dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021df0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021df3:	c3                   	ret    

c0021df4 <SoundChannel::getBufferUsed()>:
c0021df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021df8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021dfb:	c3                   	ret    

c0021dfc <SoundChannel::getBufferSize()>:
c0021dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e00:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021e03:	c3                   	ret    

c0021e04 <SoundChannel::unbuffer(float*, int, int)>:
c0021e04:	56                   	push   esi
c0021e05:	53                   	push   ebx
c0021e06:	83 ec 40             	sub    esp,0x40
c0021e09:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021e0d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021e10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e14:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021e17:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021e1b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021e1f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021e23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021e27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021e2b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021e2f:	e8 03 4f 00 00       	call   c0026d37 <__floatsisf>
c0021e34:	5a                   	pop    edx
c0021e35:	89 c6                	mov    esi,eax
c0021e37:	ff 33                	push   DWORD PTR [ebx]
c0021e39:	e8 f9 4e 00 00       	call   c0026d37 <__floatsisf>
c0021e3e:	59                   	pop    ecx
c0021e3f:	5a                   	pop    edx
c0021e40:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021e43:	50                   	push   eax
c0021e44:	e8 00 4b 00 00       	call   c0026949 <__mulsf3>
c0021e49:	59                   	pop    ecx
c0021e4a:	5a                   	pop    edx
c0021e4b:	50                   	push   eax
c0021e4c:	56                   	push   esi
c0021e4d:	e8 ba 4c 00 00       	call   c0026b0c <__divsf3>
c0021e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e55:	e8 ad 61 00 00       	call   c0028007 <__extendsfdf2>
c0021e5a:	59                   	pop    ecx
c0021e5b:	5e                   	pop    esi
c0021e5c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021e60:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021e64:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021e6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e70:	50                   	push   eax
c0021e71:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021e74:	e8 1b 69 fe ff       	call   c0008794 <src_process>
c0021e79:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021e7d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021e80:	83 c4 0c             	add    esp,0xc
c0021e83:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021e86:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021e89:	29 d0                	sub    eax,edx
c0021e8b:	c1 e0 02             	shl    eax,0x2
c0021e8e:	50                   	push   eax
c0021e8f:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021e92:	50                   	push   eax
c0021e93:	51                   	push   ecx
c0021e94:	e8 e3 e7 fd ff       	call   c000067c <memmove>
c0021e99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021e9d:	83 c4 44             	add    esp,0x44
c0021ea0:	5b                   	pop    ebx
c0021ea1:	5e                   	pop    esi
c0021ea2:	c3                   	ret    
c0021ea3:	90                   	nop

c0021ea4 <SoundChannel::buffer8(unsigned char*, int)>:
c0021ea4:	55                   	push   ebp
c0021ea5:	57                   	push   edi
c0021ea6:	56                   	push   esi
c0021ea7:	53                   	push   ebx
c0021ea8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021eac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021eb0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021eb3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021eb7:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021eba:	74 7a                	je     c0021f36 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021ebc:	85 ff                	test   edi,edi
c0021ebe:	7e 76                	jle    c0021f36 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021ec0:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021ec4:	8d 70 01             	lea    esi,[eax+0x1]
c0021ec7:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021eca:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ecd:	8b 1c 9d 60 1c 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce3a0]
c0021ed4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ed7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021eda:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021edd:	74 5e                	je     c0021f3d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021edf:	83 ff 01             	cmp    edi,0x1
c0021ee2:	74 4b                	je     c0021f2f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021ee4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021ee8:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021eeb:	8d 70 01             	lea    esi,[eax+0x1]
c0021eee:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ef1:	8b 1c 9d 60 1c 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce3a0]
c0021ef8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021efb:	b8 02 00 00 00       	mov    eax,0x2
c0021f00:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f03:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f06:	75 23                	jne    c0021f2b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021f08:	eb 27                	jmp    c0021f31 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f0a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021f0f:	8d 71 01             	lea    esi,[ecx+0x1]
c0021f12:	40                   	inc    eax
c0021f13:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f16:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021f19:	8b 1c 9d 60 1c 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce3a0]
c0021f20:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021f23:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f26:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f29:	74 06                	je     c0021f31 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f2b:	39 c7                	cmp    edi,eax
c0021f2d:	75 db                	jne    c0021f0a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021f2f:	89 f8                	mov    eax,edi
c0021f31:	5b                   	pop    ebx
c0021f32:	5e                   	pop    esi
c0021f33:	5f                   	pop    edi
c0021f34:	5d                   	pop    ebp
c0021f35:	c3                   	ret    
c0021f36:	5b                   	pop    ebx
c0021f37:	31 c0                	xor    eax,eax
c0021f39:	5e                   	pop    esi
c0021f3a:	5f                   	pop    edi
c0021f3b:	5d                   	pop    ebp
c0021f3c:	c3                   	ret    
c0021f3d:	b8 01 00 00 00       	mov    eax,0x1
c0021f42:	eb ed                	jmp    c0021f31 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021f44 <SoundDevice::SoundDevice(char const*)>:
c0021f44:	83 ec 1c             	sub    esp,0x1c
c0021f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f4b:	83 ec 08             	sub    esp,0x8
c0021f4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021f52:	50                   	push   eax
c0021f53:	e8 ce 21 ff ff       	call   c0014126 <Device::Device(char const*)>
c0021f58:	83 c4 10             	add    esp,0x10
c0021f5b:	ba c8 c2 02 c0       	mov    edx,0xc002c2c8
c0021f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f64:	89 10                	mov    DWORD PTR [eax],edx
c0021f66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f6a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f78:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f82:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f8a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f8f:	7f 19                	jg     c0021faa <SoundDevice::SoundDevice(char const*)+0x66>
c0021f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f99:	83 c2 54             	add    edx,0x54
c0021f9c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021fa4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fa8:	eb e0                	jmp    c0021f8a <SoundDevice::SoundDevice(char const*)+0x46>
c0021faa:	90                   	nop
c0021fab:	83 c4 1c             	add    esp,0x1c
c0021fae:	c3                   	ret    
c0021faf:	90                   	nop

c0021fb0 <SoundDevice::~SoundDevice()>:
c0021fb0:	53                   	push   ebx
c0021fb1:	83 ec 18             	sub    esp,0x18
c0021fb4:	ba c8 c2 02 c0       	mov    edx,0xc002c2c8
c0021fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fbd:	89 10                	mov    DWORD PTR [eax],edx
c0021fbf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fc7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021fcc:	7f 46                	jg     c0022014 <SoundDevice::~SoundDevice()+0x64>
c0021fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fd6:	83 c2 54             	add    edx,0x54
c0021fd9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021fdd:	85 c0                	test   eax,eax
c0021fdf:	74 2d                	je     c002200e <SoundDevice::~SoundDevice()+0x5e>
c0021fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fe5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fe9:	83 c2 54             	add    edx,0x54
c0021fec:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021ff0:	85 db                	test   ebx,ebx
c0021ff2:	74 1a                	je     c002200e <SoundDevice::~SoundDevice()+0x5e>
c0021ff4:	83 ec 0c             	sub    esp,0xc
c0021ff7:	53                   	push   ebx
c0021ff8:	e8 21 fc ff ff       	call   c0021c1e <SoundChannel::~SoundChannel()>
c0021ffd:	83 c4 10             	add    esp,0x10
c0022000:	83 ec 08             	sub    esp,0x8
c0022003:	6a 2c                	push   0x2c
c0022005:	53                   	push   ebx
c0022006:	e8 24 0a ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c002200b:	83 c4 10             	add    esp,0x10
c002200e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022012:	eb b3                	jmp    c0021fc7 <SoundDevice::~SoundDevice()+0x17>
c0022014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022018:	83 ec 0c             	sub    esp,0xc
c002201b:	50                   	push   eax
c002201c:	e8 e7 1d ff ff       	call   c0013e08 <Device::~Device()>
c0022021:	83 c4 10             	add    esp,0x10
c0022024:	90                   	nop
c0022025:	83 c4 18             	add    esp,0x18
c0022028:	5b                   	pop    ebx
c0022029:	c3                   	ret    

c002202a <SoundDevice::~SoundDevice()>:
c002202a:	83 ec 0c             	sub    esp,0xc
c002202d:	83 ec 0c             	sub    esp,0xc
c0022030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022034:	e8 77 ff ff ff       	call   c0021fb0 <SoundDevice::~SoundDevice()>
c0022039:	83 c4 10             	add    esp,0x10
c002203c:	83 ec 08             	sub    esp,0x8
c002203f:	68 e4 01 00 00       	push   0x1e4
c0022044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022048:	e8 e2 09 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c002204d:	83 c4 10             	add    esp,0x10
c0022050:	83 c4 0c             	add    esp,0xc
c0022053:	c3                   	ret    

c0022054 <SoundDevice::getFreeChannelNum()>:
c0022054:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022058:	31 c0                	xor    eax,eax
c002205a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022062:	74 09                	je     c002206d <SoundDevice::getFreeChannelNum()+0x19>
c0022064:	40                   	inc    eax
c0022065:	83 f8 20             	cmp    eax,0x20
c0022068:	75 f0                	jne    c002205a <SoundDevice::getFreeChannelNum()+0x6>
c002206a:	83 c8 ff             	or     eax,0xffffffff
c002206d:	c3                   	ret    

c002206e <SoundDevice::addChannel(SoundChannel*)>:
c002206e:	56                   	push   esi
c002206f:	53                   	push   ebx
c0022070:	51                   	push   ecx
c0022071:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022075:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022079:	53                   	push   ebx
c002207a:	e8 d5 ff ff ff       	call   c0022054 <SoundDevice::getFreeChannelNum()>
c002207f:	5a                   	pop    edx
c0022080:	83 f8 ff             	cmp    eax,0xffffffff
c0022083:	74 51                	je     c00220d6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022085:	85 f6                	test   esi,esi
c0022087:	74 4d                	je     c00220d6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022089:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022090:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022097:	75 30                	jne    c00220c9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022099:	83 ec 0c             	sub    esp,0xc
c002209c:	56                   	push   esi
c002209d:	e8 42 fd ff ff       	call   c0021de4 <SoundChannel::getSampleRate()>
c00220a2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00220a8:	89 34 24             	mov    DWORD PTR [esp],esi
c00220ab:	e8 3c fd ff ff       	call   c0021dec <SoundChannel::getBits()>
c00220b0:	83 c4 0c             	add    esp,0xc
c00220b3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00220b9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00220bb:	50                   	push   eax
c00220bc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00220c2:	53                   	push   ebx
c00220c3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00220c6:	83 c4 10             	add    esp,0x10
c00220c9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00220cf:	b8 01 00 00 00       	mov    eax,0x1
c00220d4:	eb 03                	jmp    c00220d9 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00220d6:	83 c8 ff             	or     eax,0xffffffff
c00220d9:	5a                   	pop    edx
c00220da:	5b                   	pop    ebx
c00220db:	5e                   	pop    esi
c00220dc:	c3                   	ret    
c00220dd:	90                   	nop

c00220de <SoundDevice::removeChannel(int)>:
c00220de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220e6:	83 fa 1f             	cmp    edx,0x1f
c00220e9:	77 23                	ja     c002210e <SoundDevice::removeChannel(int)+0x30>
c00220eb:	8d 14 90             	lea    edx,[eax+edx*4]
c00220ee:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00220f5:	74 17                	je     c002210e <SoundDevice::removeChannel(int)+0x30>
c00220f7:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022101:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022107:	75 05                	jne    c002210e <SoundDevice::removeChannel(int)+0x30>
c0022109:	8b 00                	mov    eax,DWORD PTR [eax]
c002210b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002210e:	c3                   	ret    
c002210f:	90                   	nop

c0022110 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022110:	57                   	push   edi
c0022111:	56                   	push   esi
c0022112:	53                   	push   ebx
c0022113:	31 db                	xor    ebx,ebx
c0022115:	83 ec 10             	sub    esp,0x10
c0022118:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002211c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022120:	0f 8d cb 00 00 00    	jge    c00221f1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022126:	83 ec 0c             	sub    esp,0xc
c0022129:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002212d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022130:	e8 d2 5e 00 00       	call   c0028007 <__extendsfdf2>
c0022135:	83 c4 10             	add    esp,0x10
c0022138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002213c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022140:	68 00 00 f0 3f       	push   0x3ff00000
c0022145:	6a 00                	push   0x0
c0022147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002214b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002214f:	e8 3f 4e 00 00       	call   c0026f93 <__adddf3>
c0022154:	83 c4 10             	add    esp,0x10
c0022157:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002215b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002215f:	68 00 00 e0 3f       	push   0x3fe00000
c0022164:	6a 00                	push   0x0
c0022166:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002216a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002216e:	e8 9d 54 00 00       	call   c0027610 <__muldf3>
c0022173:	83 c4 10             	add    esp,0x10
c0022176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002217a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002217e:	68 00 00 60 40       	push   0x40600000
c0022183:	6a 00                	push   0x0
c0022185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002218d:	e8 7e 54 00 00       	call   c0027610 <__muldf3>
c0022192:	59                   	pop    ecx
c0022193:	5f                   	pop    edi
c0022194:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022198:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002219c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221a4:	e8 3a 5d 00 00       	call   c0027ee3 <__truncdfsf2>
c00221a9:	5a                   	pop    edx
c00221aa:	89 c7                	mov    edi,eax
c00221ac:	59                   	pop    ecx
c00221ad:	68 00 00 fe 42       	push   0x42fe0000
c00221b2:	50                   	push   eax
c00221b3:	e8 d5 4d 00 00       	call   c0026f8d <__gesf2>
c00221b8:	83 c4 10             	add    esp,0x10
c00221bb:	85 c0                	test   eax,eax
c00221bd:	78 06                	js     c00221c5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00221bf:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00221c3:	eb 26                	jmp    c00221eb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00221c5:	50                   	push   eax
c00221c6:	50                   	push   eax
c00221c7:	6a 00                	push   0x0
c00221c9:	57                   	push   edi
c00221ca:	e8 c2 4d 00 00       	call   c0026f91 <__lesf2>
c00221cf:	83 c4 10             	add    esp,0x10
c00221d2:	85 c0                	test   eax,eax
c00221d4:	7f 06                	jg     c00221dc <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00221d6:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00221da:	eb 0f                	jmp    c00221eb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00221dc:	83 ec 0c             	sub    esp,0xc
c00221df:	57                   	push   edi
c00221e0:	e8 b7 5e 00 00       	call   c002809c <lrintf>
c00221e5:	83 c4 10             	add    esp,0x10
c00221e8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00221eb:	43                   	inc    ebx
c00221ec:	e9 2b ff ff ff       	jmp    c002211c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00221f1:	83 c4 10             	add    esp,0x10
c00221f4:	5b                   	pop    ebx
c00221f5:	5e                   	pop    esi
c00221f6:	5f                   	pop    edi
c00221f7:	c3                   	ret    

c00221f8 <SoundDevice::getAudio(int, float*, float*)>:
c00221f8:	55                   	push   ebp
c00221f9:	57                   	push   edi
c00221fa:	56                   	push   esi
c00221fb:	53                   	push   ebx
c00221fc:	31 db                	xor    ebx,ebx
c00221fe:	83 ec 20             	sub    esp,0x20
c0022201:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022205:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022209:	c1 e0 02             	shl    eax,0x2
c002220c:	50                   	push   eax
c002220d:	6a 00                	push   0x0
c002220f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022213:	e8 60 e5 fd ff       	call   c0000778 <memset>
c0022218:	83 c4 10             	add    esp,0x10
c002221b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002221f:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022226:	85 c0                	test   eax,eax
c0022228:	0f 84 d7 00 00 00    	je     c0022305 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002222e:	83 ec 0c             	sub    esp,0xc
c0022231:	50                   	push   eax
c0022232:	e8 a5 fb ff ff       	call   c0021ddc <SoundChannel::paused()>
c0022237:	83 c4 10             	add    esp,0x10
c002223a:	84 c0                	test   al,al
c002223c:	0f 85 c3 00 00 00    	jne    c0022305 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022242:	83 ec 0c             	sub    esp,0xc
c0022245:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002224c:	e8 19 fa ff ff       	call   c0021c6a <SoundChannel::getVolume()>
c0022251:	83 c4 10             	add    esp,0x10
c0022254:	85 c0                	test   eax,eax
c0022256:	0f 84 a9 00 00 00    	je     c0022305 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002225c:	83 ec 0c             	sub    esp,0xc
c002225f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022266:	e8 ff f9 ff ff       	call   c0021c6a <SoundChannel::getVolume()>
c002226b:	83 ec 0c             	sub    esp,0xc
c002226e:	50                   	push   eax
c002226f:	e8 c3 4a 00 00       	call   c0026d37 <__floatsisf>
c0022274:	59                   	pop    ecx
c0022275:	5d                   	pop    ebp
c0022276:	31 ed                	xor    ebp,ebp
c0022278:	68 00 00 c8 42       	push   0x42c80000
c002227d:	50                   	push   eax
c002227e:	e8 89 48 00 00       	call   c0026b0c <__divsf3>
c0022283:	83 c4 10             	add    esp,0x10
c0022286:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002228a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002228e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022294:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022298:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002229f:	e8 60 fb ff ff       	call   c0021e04 <SoundChannel::unbuffer(float*, int, int)>
c00222a4:	83 c4 20             	add    esp,0x20
c00222a7:	89 c1                	mov    ecx,eax
c00222a9:	39 cd                	cmp    ebp,ecx
c00222ab:	7d 52                	jge    c00222ff <SoundDevice::getAudio(int, float*, float*)+0x107>
c00222ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00222b1:	50                   	push   eax
c00222b2:	50                   	push   eax
c00222b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00222b7:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00222ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00222be:	e8 86 46 00 00       	call   c0026949 <__mulsf3>
c00222c3:	5a                   	pop    edx
c00222c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00222c8:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00222ce:	e8 64 4a 00 00       	call   c0026d37 <__floatsisf>
c00222d3:	59                   	pop    ecx
c00222d4:	5a                   	pop    edx
c00222d5:	50                   	push   eax
c00222d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222da:	e8 2d 48 00 00       	call   c0026b0c <__divsf3>
c00222df:	59                   	pop    ecx
c00222e0:	5a                   	pop    edx
c00222e1:	50                   	push   eax
c00222e2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00222e6:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00222e9:	e8 38 43 00 00       	call   c0026626 <__addsf3>
c00222ee:	83 c4 10             	add    esp,0x10
c00222f1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00222f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00222f9:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00222fc:	45                   	inc    ebp
c00222fd:	eb aa                	jmp    c00222a9 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00222ff:	39 cf                	cmp    edi,ecx
c0022301:	7e 02                	jle    c0022305 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022303:	89 cf                	mov    edi,ecx
c0022305:	43                   	inc    ebx
c0022306:	83 fb 20             	cmp    ebx,0x20
c0022309:	0f 85 10 ff ff ff    	jne    c002221f <SoundDevice::getAudio(int, float*, float*)+0x27>
c002230f:	83 c4 1c             	add    esp,0x1c
c0022312:	89 f8                	mov    eax,edi
c0022314:	5b                   	pop    ebx
c0022315:	5e                   	pop    esi
c0022316:	5f                   	pop    edi
c0022317:	5d                   	pop    ebp
c0022318:	c3                   	ret    
c0022319:	90                   	nop

c002231a <PCI::open(int, int, void*)>:
c002231a:	83 ec 18             	sub    esp,0x18
c002231d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022321:	8b 10                	mov    edx,DWORD PTR [eax]
c0022323:	50                   	push   eax
c0022324:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022327:	31 c0                	xor    eax,eax
c0022329:	83 c4 1c             	add    esp,0x1c
c002232c:	c3                   	ret    
c002232d:	90                   	nop

c002232e <PCI::close(int, int, void*)>:
c002232e:	31 c0                	xor    eax,eax
c0022330:	c3                   	ret    
c0022331:	90                   	nop

c0022332 <PCI::PCI()>:
c0022332:	83 ec 0c             	sub    esp,0xc
c0022335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022339:	83 ec 08             	sub    esp,0x8
c002233c:	68 f8 c2 02 c0       	push   0xc002c2f8
c0022341:	50                   	push   eax
c0022342:	e8 63 14 ff ff       	call   c00137aa <Bus::Bus(char const*)>
c0022347:	83 c4 10             	add    esp,0x10
c002234a:	ba 64 c3 02 c0       	mov    edx,0xc002c364
c002234f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022353:	89 10                	mov    DWORD PTR [eax],edx
c0022355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022359:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002235f:	0f b6 d0             	movzx  edx,al
c0022362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022366:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002236d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022371:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022377:	0f b6 d0             	movzx  edx,al
c002237a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022387:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002238d:	8d 50 01             	lea    edx,[eax+0x1]
c0022390:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022394:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002239a:	0f b6 d0             	movzx  edx,al
c002239d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223a5:	83 c9 c0             	or     ecx,0xffffffc0
c00223a8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223ac:	90                   	nop
c00223ad:	83 c4 0c             	add    esp,0xc
c00223b0:	c3                   	ret    
c00223b1:	90                   	nop

c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00223b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00223b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00223bb:	89 ca                	mov    edx,ecx
c00223bd:	c1 e0 10             	shl    eax,0x10
c00223c0:	81 e2 fc 00 00 00    	and    edx,0xfc
c00223c6:	09 d0                	or     eax,edx
c00223c8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00223cd:	c1 e2 08             	shl    edx,0x8
c00223d0:	09 d0                	or     eax,edx
c00223d2:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00223d7:	c1 e2 0b             	shl    edx,0xb
c00223da:	09 d0                	or     eax,edx
c00223dc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00223e1:	0d 00 00 00 80       	or     eax,0x80000000
c00223e6:	ef                   	out    dx,eax
c00223e7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00223ec:	ed                   	in     eax,dx
c00223ed:	83 e1 02             	and    ecx,0x2
c00223f0:	0f b6 c9             	movzx  ecx,cl
c00223f3:	c1 e1 03             	shl    ecx,0x3
c00223f6:	d3 e8                	shr    eax,cl
c00223f8:	c3                   	ret    
c00223f9:	90                   	nop

c00223fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00223fa:	6a 00                	push   0x0
c00223fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022401:	50                   	push   eax
c0022402:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022407:	50                   	push   eax
c0022408:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002240d:	50                   	push   eax
c002240e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022412:	e8 9b ff ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022417:	83 c4 14             	add    esp,0x14
c002241a:	c3                   	ret    
c002241b:	90                   	nop

c002241c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002241c:	6a 0e                	push   0xe
c002241e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022423:	50                   	push   eax
c0022424:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022429:	50                   	push   eax
c002242a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002242f:	50                   	push   eax
c0022430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022434:	e8 79 ff ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022439:	83 c4 14             	add    esp,0x14
c002243c:	0f b6 c0             	movzx  eax,al
c002243f:	c3                   	ret    

c0022440 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022440:	55                   	push   ebp
c0022441:	57                   	push   edi
c0022442:	56                   	push   esi
c0022443:	53                   	push   ebx
c0022444:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022449:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002244e:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022453:	6a 0a                	push   0xa
c0022455:	56                   	push   esi
c0022456:	55                   	push   ebp
c0022457:	57                   	push   edi
c0022458:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002245c:	e8 51 ff ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022461:	6a 0a                	push   0xa
c0022463:	89 c3                	mov    ebx,eax
c0022465:	56                   	push   esi
c0022466:	0f b6 db             	movzx  ebx,bl
c0022469:	55                   	push   ebp
c002246a:	57                   	push   edi
c002246b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002246f:	e8 3e ff ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022474:	83 c4 28             	add    esp,0x28
c0022477:	25 00 ff 00 00       	and    eax,0xff00
c002247c:	09 d8                	or     eax,ebx
c002247e:	5b                   	pop    ebx
c002247f:	5e                   	pop    esi
c0022480:	5f                   	pop    edi
c0022481:	5d                   	pop    ebp
c0022482:	c3                   	ret    
c0022483:	90                   	nop

c0022484 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022484:	6a 08                	push   0x8
c0022486:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002248b:	50                   	push   eax
c002248c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022491:	50                   	push   eax
c0022492:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022497:	50                   	push   eax
c0022498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002249c:	e8 11 ff ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224a1:	83 c4 14             	add    esp,0x14
c00224a4:	0f b6 c4             	movzx  eax,ah
c00224a7:	c3                   	ret    

c00224a8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00224a8:	6a 08                	push   0x8
c00224aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224af:	50                   	push   eax
c00224b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224b5:	50                   	push   eax
c00224b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224bb:	50                   	push   eax
c00224bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224c0:	e8 ed fe ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224c5:	83 c4 14             	add    esp,0x14
c00224c8:	c3                   	ret    
c00224c9:	90                   	nop

c00224ca <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00224ca:	6a 3c                	push   0x3c
c00224cc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224d1:	50                   	push   eax
c00224d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224d7:	50                   	push   eax
c00224d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224dd:	50                   	push   eax
c00224de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224e2:	e8 cb fe ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224e7:	83 c4 14             	add    esp,0x14
c00224ea:	c3                   	ret    
c00224eb:	90                   	nop

c00224ec <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00224ec:	6a 18                	push   0x18
c00224ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224f3:	50                   	push   eax
c00224f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224f9:	50                   	push   eax
c00224fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224ff:	50                   	push   eax
c0022500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022504:	e8 a9 fe ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022509:	83 c4 14             	add    esp,0x14
c002250c:	0f b6 c4             	movzx  eax,ah
c002250f:	c3                   	ret    

c0022510 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022510:	55                   	push   ebp
c0022511:	57                   	push   edi
c0022512:	56                   	push   esi
c0022513:	53                   	push   ebx
c0022514:	50                   	push   eax
c0022515:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022519:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002251e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022523:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022528:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002252f:	8d 43 12             	lea    eax,[ebx+0x12]
c0022532:	83 c3 10             	add    ebx,0x10
c0022535:	0f b6 c0             	movzx  eax,al
c0022538:	0f b6 db             	movzx  ebx,bl
c002253b:	50                   	push   eax
c002253c:	51                   	push   ecx
c002253d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022541:	57                   	push   edi
c0022542:	55                   	push   ebp
c0022543:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022547:	e8 66 fe ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002254c:	53                   	push   ebx
c002254d:	89 c6                	mov    esi,eax
c002254f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022553:	c1 e6 10             	shl    esi,0x10
c0022556:	51                   	push   ecx
c0022557:	57                   	push   edi
c0022558:	55                   	push   ebp
c0022559:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002255d:	e8 50 fe ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022562:	83 c4 2c             	add    esp,0x2c
c0022565:	0f b7 c0             	movzx  eax,ax
c0022568:	5b                   	pop    ebx
c0022569:	09 f0                	or     eax,esi
c002256b:	5e                   	pop    esi
c002256c:	5f                   	pop    edi
c002256d:	5d                   	pop    ebp
c002256e:	c3                   	ret    
c002256f:	90                   	nop

c0022570 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022570:	53                   	push   ebx
c0022571:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022576:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002257b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002257f:	c1 e1 10             	shl    ecx,0x10
c0022582:	25 fc 00 00 00       	and    eax,0xfc
c0022587:	09 c1                	or     ecx,eax
c0022589:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002258e:	c1 e0 08             	shl    eax,0x8
c0022591:	09 c1                	or     ecx,eax
c0022593:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022598:	c1 e0 0b             	shl    eax,0xb
c002259b:	09 c1                	or     ecx,eax
c002259d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00225a3:	89 c8                	mov    eax,ecx
c00225a5:	ef                   	out    dx,eax
c00225a6:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225ab:	ed                   	in     eax,dx
c00225ac:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00225b1:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00225b6:	74 0a                	je     c00225c2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00225b8:	0f b7 d8             	movzx  ebx,ax
c00225bb:	89 d0                	mov    eax,edx
c00225bd:	c1 e0 10             	shl    eax,0x10
c00225c0:	eb 05                	jmp    c00225c7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00225c2:	66 31 c0             	xor    ax,ax
c00225c5:	89 d3                	mov    ebx,edx
c00225c7:	09 c3                	or     ebx,eax
c00225c9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225ce:	89 c8                	mov    eax,ecx
c00225d0:	ef                   	out    dx,eax
c00225d1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225d6:	89 d8                	mov    eax,ebx
c00225d8:	ef                   	out    dx,eax
c00225d9:	5b                   	pop    ebx
c00225da:	c3                   	ret    
c00225db:	90                   	nop

c00225dc <PCI::checkBus(unsigned char)>:
c00225dc:	56                   	push   esi
c00225dd:	53                   	push   ebx
c00225de:	31 db                	xor    ebx,ebx
c00225e0:	51                   	push   ecx
c00225e1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00225e6:	52                   	push   edx
c00225e7:	53                   	push   ebx
c00225e8:	43                   	inc    ebx
c00225e9:	56                   	push   esi
c00225ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225ee:	e8 2b 03 00 00       	call   c002291e <PCI::checkDevice(unsigned char, unsigned char)>
c00225f3:	83 c4 10             	add    esp,0x10
c00225f6:	83 fb 20             	cmp    ebx,0x20
c00225f9:	75 eb                	jne    c00225e6 <PCI::checkBus(unsigned char)+0xa>
c00225fb:	58                   	pop    eax
c00225fc:	5b                   	pop    ebx
c00225fd:	5e                   	pop    esi
c00225fe:	c3                   	ret    
c00225ff:	90                   	nop

c0022600 <PCI::foundDevice(PCIDeviceInfo)>:
c0022600:	55                   	push   ebp
c0022601:	57                   	push   edi
c0022602:	56                   	push   esi
c0022603:	53                   	push   ebx
c0022604:	83 ec 1c             	sub    esp,0x1c
c0022607:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002260b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022611:	0f 84 52 01 00 00    	je     c0022769 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022617:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002261b:	66 81 f9 06 04       	cmp    cx,0x406
c0022620:	75 2c                	jne    c002264e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022622:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022627:	50                   	push   eax
c0022628:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002262d:	50                   	push   eax
c002262e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022633:	50                   	push   eax
c0022634:	56                   	push   esi
c0022635:	e8 b2 fe ff ff       	call   c00224ec <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002263a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002263e:	0f b6 c0             	movzx  eax,al
c0022641:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022645:	83 c4 2c             	add    esp,0x2c
c0022648:	5b                   	pop    ebx
c0022649:	5e                   	pop    esi
c002264a:	5f                   	pop    edi
c002264b:	5d                   	pop    ebp
c002264c:	eb 8e                	jmp    c00225dc <PCI::checkBus(unsigned char)>
c002264e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022652:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022658:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002265c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022660:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022664:	88 d3                	mov    bl,dl
c0022666:	85 c0                	test   eax,eax
c0022668:	74 33                	je     c002269d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002266a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002266d:	85 d2                	test   edx,edx
c002266f:	74 28                	je     c0022699 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022671:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022677:	31 ef                	xor    edi,ebp
c0022679:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002267f:	75 18                	jne    c0022699 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022681:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022685:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002268b:	75 0c                	jne    c0022699 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002268d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022693:	0f 84 d0 00 00 00    	je     c0022769 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022699:	8b 00                	mov    eax,DWORD PTR [eax]
c002269b:	eb c9                	jmp    c0022666 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002269d:	66 81 f9 01 06       	cmp    cx,0x601
c00226a2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00226a6:	75 19                	jne    c00226c1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00226a8:	83 ec 0c             	sub    esp,0xc
c00226ab:	68 64 01 00 00       	push   0x164
c00226b0:	e8 8b d1 fe ff       	call   c000f840 <malloc>
c00226b5:	89 c5                	mov    ebp,eax
c00226b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00226ba:	e8 95 0f 00 00       	call   c0023654 <SATABus::SATABus()>
c00226bf:	eb 1e                	jmp    c00226df <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00226c1:	66 81 f9 01 01       	cmp    cx,0x101
c00226c6:	75 60                	jne    c0022728 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00226c8:	83 ec 0c             	sub    esp,0xc
c00226cb:	68 70 02 00 00       	push   0x270
c00226d0:	e8 6b d1 fe ff       	call   c000f840 <malloc>
c00226d5:	89 c5                	mov    ebp,eax
c00226d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00226da:	e8 03 03 00 00       	call   c00229e2 <IDE::IDE()>
c00226df:	58                   	pop    eax
c00226e0:	5a                   	pop    edx
c00226e1:	55                   	push   ebp
c00226e2:	56                   	push   esi
c00226e3:	e8 4e 18 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c00226e8:	83 ec 1c             	sub    esp,0x1c
c00226eb:	b9 09 00 00 00       	mov    ecx,0x9
c00226f0:	fc                   	cld    
c00226f1:	89 e7                	mov    edi,esp
c00226f3:	89 de                	mov    esi,ebx
c00226f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00226f7:	55                   	push   ebp
c00226f8:	e8 43 17 ff ff       	call   c0013e40 <Device::preOpenPCI(PCIDeviceInfo)>
c00226fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022700:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022704:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002270c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022714:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002271c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002271f:	83 c4 4c             	add    esp,0x4c
c0022722:	5b                   	pop    ebx
c0022723:	5e                   	pop    esi
c0022724:	5f                   	pop    edi
c0022725:	5d                   	pop    ebp
c0022726:	ff e0                	jmp    eax
c0022728:	83 ec 0c             	sub    esp,0xc
c002272b:	68 58 01 00 00       	push   0x158
c0022730:	e8 0b d1 fe ff       	call   c000f840 <malloc>
c0022735:	89 c5                	mov    ebp,eax
c0022737:	58                   	pop    eax
c0022738:	5a                   	pop    edx
c0022739:	68 00 c3 02 c0       	push   0xc002c300
c002273e:	55                   	push   ebp
c002273f:	e8 e8 1a ff ff       	call   c001422c <DriverlessDevice::DriverlessDevice(char const*)>
c0022744:	59                   	pop    ecx
c0022745:	5f                   	pop    edi
c0022746:	55                   	push   ebp
c0022747:	56                   	push   esi
c0022748:	e8 e9 17 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c002274d:	b9 09 00 00 00       	mov    ecx,0x9
c0022752:	fc                   	cld    
c0022753:	89 df                	mov    edi,ebx
c0022755:	89 de                	mov    esi,ebx
c0022757:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022759:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002275d:	83 c4 2c             	add    esp,0x2c
c0022760:	5b                   	pop    ebx
c0022761:	5e                   	pop    esi
c0022762:	5f                   	pop    edi
c0022763:	5d                   	pop    ebp
c0022764:	e9 d7 16 ff ff       	jmp    c0013e40 <Device::preOpenPCI(PCIDeviceInfo)>
c0022769:	83 c4 1c             	add    esp,0x1c
c002276c:	5b                   	pop    ebx
c002276d:	5e                   	pop    esi
c002276e:	5f                   	pop    edi
c002276f:	5d                   	pop    ebp
c0022770:	c3                   	ret    
c0022771:	90                   	nop

c0022772 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022772:	55                   	push   ebp
c0022773:	57                   	push   edi
c0022774:	56                   	push   esi
c0022775:	53                   	push   ebx
c0022776:	83 ec 5c             	sub    esp,0x5c
c0022779:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002277d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022781:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022785:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002278a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002278e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022792:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022797:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002279b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00227a0:	6a 0c                	push   0xc
c00227a2:	55                   	push   ebp
c00227a3:	53                   	push   ebx
c00227a4:	57                   	push   edi
c00227a5:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00227ac:	e8 01 fc ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227b1:	55                   	push   ebp
c00227b2:	53                   	push   ebx
c00227b3:	57                   	push   edi
c00227b4:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00227bb:	e8 80 fc ff ff       	call   c0022440 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00227c0:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00227c5:	83 c4 24             	add    esp,0x24
c00227c8:	55                   	push   ebp
c00227c9:	53                   	push   ebx
c00227ca:	57                   	push   edi
c00227cb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00227cf:	e8 f6 fc ff ff       	call   c00224ca <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00227d4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00227d8:	6a 3c                	push   0x3c
c00227da:	55                   	push   ebp
c00227db:	53                   	push   ebx
c00227dc:	57                   	push   edi
c00227dd:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00227e4:	e8 c9 fb ff ff       	call   c00223b2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227e9:	0f b6 c4             	movzx  eax,ah
c00227ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00227f0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00227f4:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00227f8:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00227fd:	83 c4 24             	add    esp,0x24
c0022800:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022806:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c002280d:	74 6c                	je     c002287b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002280f:	31 f6                	xor    esi,esi
c0022811:	8b 15 08 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd08
c0022817:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002281d:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022823:	7e 56                	jle    c002287b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022825:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022828:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002282f:	39 cb                	cmp    ebx,ecx
c0022831:	75 45                	jne    c0022878 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022833:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002283a:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c002283e:	75 38                	jne    c0022878 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022840:	83 ec 0c             	sub    esp,0xc
c0022843:	68 1a c3 02 c0       	push   0xc002c31a
c0022848:	e8 c2 02 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002284d:	8b 15 08 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd08
c0022853:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022859:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022861:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022865:	52                   	push   edx
c0022866:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002286a:	53                   	push   ebx
c002286b:	68 3f c3 02 c0       	push   0xc002c33f
c0022870:	e8 9a 02 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0022875:	83 c4 20             	add    esp,0x20
c0022878:	46                   	inc    esi
c0022879:	eb 96                	jmp    c0022811 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002287b:	31 d2                	xor    edx,edx
c002287d:	83 ec 0c             	sub    esp,0xc
c0022880:	55                   	push   ebp
c0022881:	53                   	push   ebx
c0022882:	57                   	push   edi
c0022883:	52                   	push   edx
c0022884:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022888:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002288f:	e8 7c fc ff ff       	call   c0022510 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022894:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022898:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002289c:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00228a0:	42                   	inc    edx
c00228a1:	83 c4 20             	add    esp,0x20
c00228a4:	83 fa 06             	cmp    edx,0x6
c00228a7:	75 d4                	jne    c002287d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00228a9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00228ad:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00228b1:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00228b5:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00228b9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00228bd:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00228c1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00228c6:	86 e0                	xchg   al,ah
c00228c8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00228cd:	55                   	push   ebp
c00228ce:	53                   	push   ebx
c00228cf:	57                   	push   edi
c00228d0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00228d4:	e8 ab fb ff ff       	call   c0022484 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00228d9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00228dd:	55                   	push   ebp
c00228de:	53                   	push   ebx
c00228df:	57                   	push   edi
c00228e0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00228e7:	e8 0e fb ff ff       	call   c00223fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00228ec:	83 ec 0c             	sub    esp,0xc
c00228ef:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00228f4:	b9 09 00 00 00       	mov    ecx,0x9
c00228f9:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00228fd:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022901:	fc                   	cld    
c0022902:	89 e7                	mov    edi,esp
c0022904:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022906:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002290d:	e8 ee fc ff ff       	call   c0022600 <PCI::foundDevice(PCIDeviceInfo)>
c0022912:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022918:	5b                   	pop    ebx
c0022919:	5e                   	pop    esi
c002291a:	5f                   	pop    edi
c002291b:	5d                   	pop    ebp
c002291c:	c3                   	ret    
c002291d:	90                   	nop

c002291e <PCI::checkDevice(unsigned char, unsigned char)>:
c002291e:	55                   	push   ebp
c002291f:	57                   	push   edi
c0022920:	56                   	push   esi
c0022921:	53                   	push   ebx
c0022922:	83 ec 0c             	sub    esp,0xc
c0022925:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022929:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002292e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022933:	6a 00                	push   0x0
c0022935:	56                   	push   esi
c0022936:	57                   	push   edi
c0022937:	55                   	push   ebp
c0022938:	e8 bd fa ff ff       	call   c00223fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002293d:	6a 00                	push   0x0
c002293f:	56                   	push   esi
c0022940:	57                   	push   edi
c0022941:	55                   	push   ebp
c0022942:	e8 2b fe ff ff       	call   c0022772 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022947:	83 c4 20             	add    esp,0x20
c002294a:	6a 00                	push   0x0
c002294c:	56                   	push   esi
c002294d:	57                   	push   edi
c002294e:	55                   	push   ebp
c002294f:	e8 c8 fa ff ff       	call   c002241c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022954:	83 c4 10             	add    esp,0x10
c0022957:	84 c0                	test   al,al
c0022959:	79 27                	jns    c0022982 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002295b:	bb 01 00 00 00       	mov    ebx,0x1
c0022960:	53                   	push   ebx
c0022961:	56                   	push   esi
c0022962:	57                   	push   edi
c0022963:	55                   	push   ebp
c0022964:	e8 91 fa ff ff       	call   c00223fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022969:	83 c4 10             	add    esp,0x10
c002296c:	66 40                	inc    ax
c002296e:	74 0c                	je     c002297c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022970:	53                   	push   ebx
c0022971:	56                   	push   esi
c0022972:	57                   	push   edi
c0022973:	55                   	push   ebp
c0022974:	e8 f9 fd ff ff       	call   c0022772 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022979:	83 c4 10             	add    esp,0x10
c002297c:	43                   	inc    ebx
c002297d:	83 fb 08             	cmp    ebx,0x8
c0022980:	75 de                	jne    c0022960 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022982:	83 c4 0c             	add    esp,0xc
c0022985:	5b                   	pop    ebx
c0022986:	5e                   	pop    esi
c0022987:	5f                   	pop    edi
c0022988:	5d                   	pop    ebp
c0022989:	c3                   	ret    

c002298a <PCI::detect()>:
c002298a:	56                   	push   esi
c002298b:	53                   	push   ebx
c002298c:	53                   	push   ebx
c002298d:	31 db                	xor    ebx,ebx
c002298f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022993:	6a 00                	push   0x0
c0022995:	6a 00                	push   0x0
c0022997:	6a 00                	push   0x0
c0022999:	56                   	push   esi
c002299a:	e8 7d fa ff ff       	call   c002241c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002299f:	83 c4 10             	add    esp,0x10
c00229a2:	a8 80                	test   al,0x80
c00229a4:	75 21                	jne    c00229c7 <PCI::detect()+0x3d>
c00229a6:	51                   	push   ecx
c00229a7:	51                   	push   ecx
c00229a8:	6a 00                	push   0x0
c00229aa:	56                   	push   esi
c00229ab:	e8 2c fc ff ff       	call   c00225dc <PCI::checkBus(unsigned char)>
c00229b0:	83 c4 10             	add    esp,0x10
c00229b3:	eb 24                	jmp    c00229d9 <PCI::detect()+0x4f>
c00229b5:	52                   	push   edx
c00229b6:	52                   	push   edx
c00229b7:	53                   	push   ebx
c00229b8:	43                   	inc    ebx
c00229b9:	56                   	push   esi
c00229ba:	e8 1d fc ff ff       	call   c00225dc <PCI::checkBus(unsigned char)>
c00229bf:	83 c4 10             	add    esp,0x10
c00229c2:	83 fb 08             	cmp    ebx,0x8
c00229c5:	74 12                	je     c00229d9 <PCI::detect()+0x4f>
c00229c7:	53                   	push   ebx
c00229c8:	6a 00                	push   0x0
c00229ca:	6a 00                	push   0x0
c00229cc:	56                   	push   esi
c00229cd:	e8 28 fa ff ff       	call   c00223fa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00229d2:	83 c4 10             	add    esp,0x10
c00229d5:	66 40                	inc    ax
c00229d7:	74 dc                	je     c00229b5 <PCI::detect()+0x2b>
c00229d9:	58                   	pop    eax
c00229da:	5b                   	pop    ebx
c00229db:	5e                   	pop    esi
c00229dc:	c3                   	ret    
c00229dd:	90                   	nop

c00229de <IDE::close(int, int, void*)>:
c00229de:	83 c8 ff             	or     eax,0xffffffff
c00229e1:	c3                   	ret    

c00229e2 <IDE::IDE()>:
c00229e2:	83 ec 0c             	sub    esp,0xc
c00229e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e9:	83 ec 08             	sub    esp,0x8
c00229ec:	68 88 c3 02 c0       	push   0xc002c388
c00229f1:	50                   	push   eax
c00229f2:	e8 cb 18 ff ff       	call   c00142c2 <HardDiskController::HardDiskController(char const*)>
c00229f7:	83 c4 10             	add    esp,0x10
c00229fa:	ba c8 c5 02 c0       	mov    edx,0xc002c5c8
c00229ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a03:	89 10                	mov    DWORD PTR [eax],edx
c0022a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a09:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022a10:	90                   	nop
c0022a11:	83 c4 0c             	add    esp,0xc
c0022a14:	c3                   	ret    
c0022a15:	90                   	nop

c0022a16 <IDE::prepareInterrupt(unsigned char)>:
c0022a16:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a1b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022a1f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022a27:	c3                   	ret    

c0022a28 <selectDrive(unsigned char, unsigned char)>:
c0022a28:	c3                   	ret    
c0022a29:	90                   	nop

c0022a2a <IDE::getBase(unsigned char)>:
c0022a2a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022a2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a33:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022a3b:	c3                   	ret    

c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022a3c:	55                   	push   ebp
c0022a3d:	57                   	push   edi
c0022a3e:	56                   	push   esi
c0022a3f:	53                   	push   ebx
c0022a40:	83 ec 1c             	sub    esp,0x1c
c0022a43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022a47:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022a4b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022a4e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022a52:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022a56:	80 f9 03             	cmp    cl,0x3
c0022a59:	77 51                	ja     c0022aac <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022a5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022a5f:	0f b6 f2             	movzx  esi,dl
c0022a62:	0f b6 db             	movzx  ebx,bl
c0022a65:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022a68:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022a6c:	83 ca 80             	or     edx,0xffffff80
c0022a6f:	0f b6 d2             	movzx  edx,dl
c0022a72:	52                   	push   edx
c0022a73:	6a 0c                	push   0xc
c0022a75:	56                   	push   esi
c0022a76:	57                   	push   edi
c0022a77:	e8 c0 ff ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a7c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022a81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022a85:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022a89:	ee                   	out    dx,al
c0022a8a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022a8f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022a93:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022a97:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022a9b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022aa3:	83 c4 2c             	add    esp,0x2c
c0022aa6:	5b                   	pop    ebx
c0022aa7:	5e                   	pop    esi
c0022aa8:	5f                   	pop    edi
c0022aa9:	5d                   	pop    ebp
c0022aaa:	eb 90                	jmp    c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022aac:	80 fb 07             	cmp    bl,0x7
c0022aaf:	77 12                	ja     c0022ac3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022ab1:	0f b6 d2             	movzx  edx,dl
c0022ab4:	0f b6 db             	movzx  ebx,bl
c0022ab7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022abf:	89 da                	mov    edx,ebx
c0022ac1:	eb 2f                	jmp    c0022af2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ac3:	80 fb 0d             	cmp    bl,0xd
c0022ac6:	77 13                	ja     c0022adb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ac8:	0f b6 d2             	movzx  edx,dl
c0022acb:	0f b6 db             	movzx  ebx,bl
c0022ace:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022ad5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022ad9:	eb 17                	jmp    c0022af2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022adb:	80 fb 15             	cmp    bl,0x15
c0022ade:	77 13                	ja     c0022af3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022ae0:	0f b6 d2             	movzx  edx,dl
c0022ae3:	0f b6 db             	movzx  ebx,bl
c0022ae6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022aee:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022af2:	ee                   	out    dx,al
c0022af3:	83 c4 1c             	add    esp,0x1c
c0022af6:	5b                   	pop    ebx
c0022af7:	5e                   	pop    esi
c0022af8:	5f                   	pop    edi
c0022af9:	5d                   	pop    ebp
c0022afa:	c3                   	ret    
c0022afb:	90                   	nop

c0022afc <IDE::read(unsigned char, unsigned char)>:
c0022afc:	55                   	push   ebp
c0022afd:	57                   	push   edi
c0022afe:	56                   	push   esi
c0022aff:	53                   	push   ebx
c0022b00:	83 ec 1c             	sub    esp,0x1c
c0022b03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022b07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022b0b:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022b0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022b12:	3c 03                	cmp    al,0x3
c0022b14:	77 43                	ja     c0022b59 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022b16:	0f b6 f2             	movzx  esi,dl
c0022b19:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022b1c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022b20:	83 c8 80             	or     eax,0xffffff80
c0022b23:	0f b6 c0             	movzx  eax,al
c0022b26:	50                   	push   eax
c0022b27:	6a 0c                	push   0xc
c0022b29:	56                   	push   esi
c0022b2a:	57                   	push   edi
c0022b2b:	e8 0c ff ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b30:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022b35:	0f b6 c3             	movzx  eax,bl
c0022b38:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022b3c:	ec                   	in     al,dx
c0022b3d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022b41:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022b46:	52                   	push   edx
c0022b47:	6a 0c                	push   0xc
c0022b49:	56                   	push   esi
c0022b4a:	57                   	push   edi
c0022b4b:	e8 ec fe ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b50:	83 c4 20             	add    esp,0x20
c0022b53:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022b57:	eb 49                	jmp    c0022ba2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022b59:	80 fb 07             	cmp    bl,0x7
c0022b5c:	77 12                	ja     c0022b70 <IDE::read(unsigned char, unsigned char)+0x74>
c0022b5e:	0f b6 d2             	movzx  edx,dl
c0022b61:	0f b6 c3             	movzx  eax,bl
c0022b64:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022b6c:	89 c2                	mov    edx,eax
c0022b6e:	eb 31                	jmp    c0022ba1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022b70:	80 fb 0d             	cmp    bl,0xd
c0022b73:	77 13                	ja     c0022b88 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022b75:	0f b6 d2             	movzx  edx,dl
c0022b78:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022b7f:	0f b6 d3             	movzx  edx,bl
c0022b82:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022b86:	eb 19                	jmp    c0022ba1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022b88:	31 c0                	xor    eax,eax
c0022b8a:	80 fb 15             	cmp    bl,0x15
c0022b8d:	77 13                	ja     c0022ba2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022b8f:	0f b6 d2             	movzx  edx,dl
c0022b92:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022b9a:	0f b6 d3             	movzx  edx,bl
c0022b9d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022ba1:	ec                   	in     al,dx
c0022ba2:	83 c4 1c             	add    esp,0x1c
c0022ba5:	5b                   	pop    ebx
c0022ba6:	5e                   	pop    esi
c0022ba7:	5f                   	pop    edi
c0022ba8:	5d                   	pop    ebp
c0022ba9:	c3                   	ret    

c0022baa <IDE::waitInterrupt(unsigned char)>:
c0022baa:	55                   	push   ebp
c0022bab:	57                   	push   edi
c0022bac:	56                   	push   esi
c0022bad:	53                   	push   ebx
c0022bae:	31 db                	xor    ebx,ebx
c0022bb0:	83 ec 0c             	sub    esp,0xc
c0022bb3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022bb7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022bbc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022bc4:	89 e8                	mov    eax,ebp
c0022bc6:	84 c0                	test   al,al
c0022bc8:	75 34                	jne    c0022bfe <IDE::waitInterrupt(unsigned char)+0x54>
c0022bca:	52                   	push   edx
c0022bcb:	6a 0c                	push   0xc
c0022bcd:	56                   	push   esi
c0022bce:	57                   	push   edi
c0022bcf:	e8 28 ff ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0022bd4:	83 c4 10             	add    esp,0x10
c0022bd7:	a8 01                	test   al,0x1
c0022bd9:	75 2b                	jne    c0022c06 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022bdb:	f6 c3 04             	test   bl,0x4
c0022bde:	75 16                	jne    c0022bf6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022be0:	83 fb 32             	cmp    ebx,0x32
c0022be3:	7e 11                	jle    c0022bf6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022be5:	50                   	push   eax
c0022be6:	50                   	push   eax
c0022be7:	6a 00                	push   0x0
c0022be9:	68 80 96 98 00       	push   0x989680
c0022bee:	e8 8b b1 ff ff       	call   c001dd7e <nanoSleep(unsigned long long)>
c0022bf3:	83 c4 10             	add    esp,0x10
c0022bf6:	83 fb 3c             	cmp    ebx,0x3c
c0022bf9:	74 0b                	je     c0022c06 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022bfb:	43                   	inc    ebx
c0022bfc:	eb be                	jmp    c0022bbc <IDE::waitInterrupt(unsigned char)+0x12>
c0022bfe:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022c06:	83 c4 0c             	add    esp,0xc
c0022c09:	89 e8                	mov    eax,ebp
c0022c0b:	5b                   	pop    ebx
c0022c0c:	5e                   	pop    esi
c0022c0d:	5f                   	pop    edi
c0022c0e:	5d                   	pop    ebp
c0022c0f:	c3                   	ret    

c0022c10 <ideChannel0IRQHandler(regs*, void*)>:
c0022c10:	83 ec 10             	sub    esp,0x10
c0022c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c17:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022c1e:	6a 07                	push   0x7
c0022c20:	6a 00                	push   0x0
c0022c22:	50                   	push   eax
c0022c23:	e8 d4 fe ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0022c28:	83 c4 1c             	add    esp,0x1c
c0022c2b:	c3                   	ret    

c0022c2c <ideChannel1IRQHandler(regs*, void*)>:
c0022c2c:	83 ec 10             	sub    esp,0x10
c0022c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c33:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022c3a:	6a 07                	push   0x7
c0022c3c:	6a 01                	push   0x1
c0022c3e:	50                   	push   eax
c0022c3f:	e8 b8 fe ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0022c44:	83 c4 1c             	add    esp,0x1c
c0022c47:	c3                   	ret    

c0022c48 <IDE::enableIRQs(unsigned char, bool)>:
c0022c48:	57                   	push   edi
c0022c49:	56                   	push   esi
c0022c4a:	be 04 00 00 00       	mov    esi,0x4
c0022c4f:	53                   	push   ebx
c0022c50:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022c55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022c59:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022c5e:	0f 94 c0             	sete   al
c0022c61:	d1 e0                	shl    eax,1
c0022c63:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022c6a:	0f b6 c0             	movzx  eax,al
c0022c6d:	50                   	push   eax
c0022c6e:	6a 0c                	push   0xc
c0022c70:	57                   	push   edi
c0022c71:	53                   	push   ebx
c0022c72:	e8 c5 fd ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c77:	83 c4 10             	add    esp,0x10
c0022c7a:	50                   	push   eax
c0022c7b:	6a 0c                	push   0xc
c0022c7d:	57                   	push   edi
c0022c7e:	53                   	push   ebx
c0022c7f:	e8 78 fe ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0022c84:	83 c4 10             	add    esp,0x10
c0022c87:	4e                   	dec    esi
c0022c88:	75 f0                	jne    c0022c7a <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022c8a:	5b                   	pop    ebx
c0022c8b:	5e                   	pop    esi
c0022c8c:	5f                   	pop    edi
c0022c8d:	c3                   	ret    

c0022c8e <IDE::open(int, int, void*)>:
c0022c8e:	55                   	push   ebp
c0022c8f:	57                   	push   edi
c0022c90:	56                   	push   esi
c0022c91:	53                   	push   ebx
c0022c92:	83 ec 1c             	sub    esp,0x1c
c0022c95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022c99:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022ca2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022cab:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022cb2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022cb9:	0f 85 b0 02 00 00    	jne    c0022f6f <IDE::open(int, int, void*)+0x2e1>
c0022cbf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022cc5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022cc9:	83 e0 7f             	and    eax,0x7f
c0022ccc:	3c 05                	cmp    al,0x5
c0022cce:	74 04                	je     c0022cd4 <IDE::open(int, int, void*)+0x46>
c0022cd0:	3c 0f                	cmp    al,0xf
c0022cd2:	75 32                	jne    c0022d06 <IDE::open(int, int, void*)+0x78>
c0022cd4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022cda:	83 e0 fc             	and    eax,0xfffffffc
c0022cdd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022ce4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022cea:	83 e0 fc             	and    eax,0xfffffffc
c0022ced:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022cf4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022cfa:	83 e0 fc             	and    eax,0xfffffffc
c0022cfd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022d04:	eb 14                	jmp    c0022d1a <IDE::open(int, int, void*)+0x8c>
c0022d06:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022d10:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022d1a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022d21:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022d28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022d2c:	89 c6                	mov    esi,eax
c0022d2e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022d33:	c1 e6 10             	shl    esi,0x10
c0022d36:	89 e8                	mov    eax,ebp
c0022d38:	89 fa                	mov    edx,edi
c0022d3a:	c1 e0 0b             	shl    eax,0xb
c0022d3d:	09 f0                	or     eax,esi
c0022d3f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022d46:	c1 e6 08             	shl    esi,0x8
c0022d49:	09 c6                	or     esi,eax
c0022d4b:	89 f0                	mov    eax,esi
c0022d4d:	0d 08 00 00 80       	or     eax,0x80000008
c0022d52:	ef                   	out    dx,eax
c0022d53:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022d58:	89 ca                	mov    edx,ecx
c0022d5a:	ed                   	in     eax,dx
c0022d5b:	c1 e8 10             	shr    eax,0x10
c0022d5e:	3d ff ff 00 00       	cmp    eax,0xffff
c0022d63:	0f 84 f5 00 00 00    	je     c0022e5e <IDE::open(int, int, void*)+0x1d0>
c0022d69:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022d6f:	89 fa                	mov    edx,edi
c0022d71:	89 f0                	mov    eax,esi
c0022d73:	ef                   	out    dx,eax
c0022d74:	b0 fe                	mov    al,0xfe
c0022d76:	89 ca                	mov    edx,ecx
c0022d78:	ee                   	out    dx,al
c0022d79:	89 f0                	mov    eax,esi
c0022d7b:	89 fa                	mov    edx,edi
c0022d7d:	ef                   	out    dx,eax
c0022d7e:	89 ca                	mov    edx,ecx
c0022d80:	ed                   	in     eax,dx
c0022d81:	3c fe                	cmp    al,0xfe
c0022d83:	0f 85 a9 00 00 00    	jne    c0022e32 <IDE::open(int, int, void*)+0x1a4>
c0022d89:	8b 15 08 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd08
c0022d8f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022d96:	74 33                	je     c0022dcb <IDE::open(int, int, void*)+0x13d>
c0022d98:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022d9e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022da2:	40                   	inc    eax
c0022da3:	83 ec 0c             	sub    esp,0xc
c0022da6:	0f b6 c0             	movzx  eax,al
c0022da9:	50                   	push   eax
c0022daa:	55                   	push   ebp
c0022dab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022daf:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022db5:	51                   	push   ecx
c0022db6:	e8 fb 4f ff ff       	call   c0017db6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022dbb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022dc0:	83 c4 1c             	add    esp,0x1c
c0022dc3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022dc9:	eb 0a                	jmp    c0022dd5 <IDE::open(int, int, void*)+0x147>
c0022dcb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022dd5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022ddc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022de3:	c1 e1 10             	shl    ecx,0x10
c0022de6:	c1 e0 08             	shl    eax,0x8
c0022de9:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022dee:	09 c1                	or     ecx,eax
c0022df0:	89 fa                	mov    edx,edi
c0022df2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022df9:	c1 e0 0b             	shl    eax,0xb
c0022dfc:	09 c1                	or     ecx,eax
c0022dfe:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022e04:	89 c8                	mov    eax,ecx
c0022e06:	ef                   	out    dx,eax
c0022e07:	be fc 0c 00 00       	mov    esi,0xcfc
c0022e0c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022e12:	89 f2                	mov    edx,esi
c0022e14:	ee                   	out    dx,al
c0022e15:	89 c8                	mov    eax,ecx
c0022e17:	89 fa                	mov    edx,edi
c0022e19:	ef                   	out    dx,eax
c0022e1a:	89 f2                	mov    edx,esi
c0022e1c:	ed                   	in     eax,dx
c0022e1d:	0f b6 c0             	movzx  eax,al
c0022e20:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022e26:	74 46                	je     c0022e6e <IDE::open(int, int, void*)+0x1e0>
c0022e28:	83 ec 0c             	sub    esp,0xc
c0022e2b:	68 a0 c3 02 c0       	push   0xc002c3a0
c0022e30:	eb 34                	jmp    c0022e66 <IDE::open(int, int, void*)+0x1d8>
c0022e32:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022e3b:	75 17                	jne    c0022e54 <IDE::open(int, int, void*)+0x1c6>
c0022e3d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022e42:	74 07                	je     c0022e4b <IDE::open(int, int, void*)+0x1bd>
c0022e44:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022e49:	75 09                	jne    c0022e54 <IDE::open(int, int, void*)+0x1c6>
c0022e4b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022e52:	eb 1a                	jmp    c0022e6e <IDE::open(int, int, void*)+0x1e0>
c0022e54:	83 ec 0c             	sub    esp,0xc
c0022e57:	68 a8 c3 02 c0       	push   0xc002c3a8
c0022e5c:	eb 08                	jmp    c0022e66 <IDE::open(int, int, void*)+0x1d8>
c0022e5e:	83 ec 0c             	sub    esp,0xc
c0022e61:	68 d9 c3 02 c0       	push   0xc002c3d9
c0022e66:	e8 34 73 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0022e6b:	83 c4 10             	add    esp,0x10
c0022e6e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022e75:	79 1a                	jns    c0022e91 <IDE::open(int, int, void*)+0x203>
c0022e77:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022e7d:	83 e0 fc             	and    eax,0xfffffffc
c0022e80:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022e87:	83 c0 08             	add    eax,0x8
c0022e8a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022e91:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022e97:	89 c2                	mov    edx,eax
c0022e99:	83 e2 0f             	and    edx,0xf
c0022e9c:	66 83 fa 08          	cmp    dx,0x8
c0022ea0:	75 0a                	jne    c0022eac <IDE::open(int, int, void*)+0x21e>
c0022ea2:	83 e8 02             	sub    eax,0x2
c0022ea5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022eac:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022eb2:	89 c2                	mov    edx,eax
c0022eb4:	83 e2 0f             	and    edx,0xf
c0022eb7:	66 83 fa 08          	cmp    dx,0x8
c0022ebb:	75 0a                	jne    c0022ec7 <IDE::open(int, int, void*)+0x239>
c0022ebd:	83 e8 02             	sub    eax,0x2
c0022ec0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022ec7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022ece:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022ed5:	89 d0                	mov    eax,edx
c0022ed7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022eda:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022ede:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022ee2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022ee5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022eea:	0f b6 c9             	movzx  ecx,cl
c0022eed:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022ef4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022ef7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022efb:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022eff:	8d 50 02             	lea    edx,[eax+0x2]
c0022f02:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022f07:	0f b6 d2             	movzx  edx,dl
c0022f0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022f10:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022f13:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022f17:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022f1b:	8d 48 03             	lea    ecx,[eax+0x3]
c0022f1e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022f23:	0f b6 c9             	movzx  ecx,cl
c0022f26:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022f2c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022f2f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022f33:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022f37:	8d 50 04             	lea    edx,[eax+0x4]
c0022f3a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022f40:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022f45:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022f4c:	66 85 f6             	test   si,si
c0022f4f:	74 3e                	je     c0022f8f <IDE::open(int, int, void*)+0x301>
c0022f51:	0f b6 d2             	movzx  edx,dl
c0022f54:	83 c0 05             	add    eax,0x5
c0022f57:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022f5a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022f5e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022f62:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022f68:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022f6d:	eb 20                	jmp    c0022f8f <IDE::open(int, int, void*)+0x301>
c0022f6f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022f79:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022f83:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022f8a:	e9 02 ff ff ff       	jmp    c0022e91 <IDE::open(int, int, void*)+0x203>
c0022f8f:	52                   	push   edx
c0022f90:	52                   	push   edx
c0022f91:	6a 00                	push   0x0
c0022f93:	53                   	push   ebx
c0022f94:	e8 7d fa ff ff       	call   c0022a16 <IDE::prepareInterrupt(unsigned char)>
c0022f99:	59                   	pop    ecx
c0022f9a:	5e                   	pop    esi
c0022f9b:	6a 01                	push   0x1
c0022f9d:	53                   	push   ebx
c0022f9e:	e8 73 fa ff ff       	call   c0022a16 <IDE::prepareInterrupt(unsigned char)>
c0022fa3:	83 c4 0c             	add    esp,0xc
c0022fa6:	6a 00                	push   0x0
c0022fa8:	6a 00                	push   0x0
c0022faa:	53                   	push   ebx
c0022fab:	e8 98 fc ff ff       	call   c0022c48 <IDE::enableIRQs(unsigned char, bool)>
c0022fb0:	83 c4 0c             	add    esp,0xc
c0022fb3:	6a 00                	push   0x0
c0022fb5:	6a 01                	push   0x1
c0022fb7:	53                   	push   ebx
c0022fb8:	e8 8b fc ff ff       	call   c0022c48 <IDE::enableIRQs(unsigned char, bool)>
c0022fbd:	83 c4 10             	add    esp,0x10
c0022fc0:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022fc7:	74 40                	je     c0023009 <IDE::open(int, int, void*)+0x37b>
c0022fc9:	83 ec 0c             	sub    esp,0xc
c0022fcc:	68 03 c4 02 c0       	push   0xc002c403
c0022fd1:	e8 39 fb fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0022fd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022fd9:	6a 01                	push   0x1
c0022fdb:	68 10 2c 02 c0       	push   0xc0022c10
c0022fe0:	6a 0e                	push   0xe
c0022fe2:	53                   	push   ebx
c0022fe3:	e8 d2 0e ff ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022fe8:	83 c4 14             	add    esp,0x14
c0022feb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022ff1:	53                   	push   ebx
c0022ff2:	6a 01                	push   0x1
c0022ff4:	68 2c 2c 02 c0       	push   0xc0022c2c
c0022ff9:	6a 0f                	push   0xf
c0022ffb:	53                   	push   ebx
c0022ffc:	e8 b9 0e ff ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023001:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023007:	eb 4a                	jmp    c0023053 <IDE::open(int, int, void*)+0x3c5>
c0023009:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023013:	50                   	push   eax
c0023014:	6a 0f                	push   0xf
c0023016:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002301c:	68 1f c4 02 c0       	push   0xc002c41f
c0023021:	e8 e9 fa fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023029:	6a 00                	push   0x0
c002302b:	68 10 2c 02 c0       	push   0xc0022c10
c0023030:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023036:	53                   	push   ebx
c0023037:	e8 7e 0e ff ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002303c:	83 c4 14             	add    esp,0x14
c002303f:	53                   	push   ebx
c0023040:	6a 00                	push   0x0
c0023042:	68 2c 2c 02 c0       	push   0xc0022c2c
c0023047:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002304d:	53                   	push   ebx
c002304e:	e8 67 0e ff ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023053:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023055:	83 c4 20             	add    esp,0x20
c0023058:	83 ec 0c             	sub    esp,0xc
c002305b:	53                   	push   ebx
c002305c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002305f:	83 c4 0c             	add    esp,0xc
c0023062:	6a 07                	push   0x7
c0023064:	6a 00                	push   0x0
c0023066:	53                   	push   ebx
c0023067:	e8 90 fa ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c002306c:	83 c4 0c             	add    esp,0xc
c002306f:	6a 07                	push   0x7
c0023071:	6a 01                	push   0x1
c0023073:	53                   	push   ebx
c0023074:	e8 83 fa ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0023079:	83 c4 0c             	add    esp,0xc
c002307c:	6a 01                	push   0x1
c002307e:	6a 00                	push   0x0
c0023080:	53                   	push   ebx
c0023081:	e8 c2 fb ff ff       	call   c0022c48 <IDE::enableIRQs(unsigned char, bool)>
c0023086:	83 c4 0c             	add    esp,0xc
c0023089:	6a 01                	push   0x1
c002308b:	6a 01                	push   0x1
c002308d:	53                   	push   ebx
c002308e:	e8 b5 fb ff ff       	call   c0022c48 <IDE::enableIRQs(unsigned char, bool)>
c0023093:	83 c4 2c             	add    esp,0x2c
c0023096:	31 c0                	xor    eax,eax
c0023098:	5b                   	pop    ebx
c0023099:	5e                   	pop    esi
c002309a:	5f                   	pop    edi
c002309b:	5d                   	pop    ebp
c002309c:	c3                   	ret    
c002309d:	90                   	nop

c002309e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002309e:	55                   	push   ebp
c002309f:	57                   	push   edi
c00230a0:	56                   	push   esi
c00230a1:	53                   	push   ebx
c00230a2:	83 ec 1c             	sub    esp,0x1c
c00230a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00230a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230ad:	8d 50 f8             	lea    edx,[eax-0x8]
c00230b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00230b4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00230b8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00230bc:	80 fa 03             	cmp    dl,0x3
c00230bf:	77 5d                	ja     c002311e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00230c1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00230c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00230c9:	0f b6 db             	movzx  ebx,bl
c00230cc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00230cf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00230d3:	83 ca 80             	or     edx,0xffffff80
c00230d6:	0f b6 d2             	movzx  edx,dl
c00230d9:	52                   	push   edx
c00230da:	6a 0c                	push   0xc
c00230dc:	53                   	push   ebx
c00230dd:	56                   	push   esi
c00230de:	e8 59 f9 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00230e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00230f0:	0f b6 c0             	movzx  eax,al
c00230f3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00230f7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00230f9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00230fe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023102:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023106:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002310a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023112:	83 c4 2c             	add    esp,0x2c
c0023115:	5b                   	pop    ebx
c0023116:	5e                   	pop    esi
c0023117:	5f                   	pop    edi
c0023118:	5d                   	pop    ebp
c0023119:	e9 1e f9 ff ff       	jmp    c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002311e:	3c 07                	cmp    al,0x7
c0023120:	77 10                	ja     c0023132 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023122:	0f b6 db             	movzx  ebx,bl
c0023125:	0f b6 d0             	movzx  edx,al
c0023128:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023130:	eb 2d                	jmp    c002315f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023132:	3c 0d                	cmp    al,0xd
c0023134:	77 13                	ja     c0023149 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023136:	0f b6 db             	movzx  ebx,bl
c0023139:	0f b6 c0             	movzx  eax,al
c002313c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023143:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023147:	eb 16                	jmp    c002315f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023149:	3c 15                	cmp    al,0x15
c002314b:	77 14                	ja     c0023161 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002314d:	0f b6 db             	movzx  ebx,bl
c0023150:	0f b6 c0             	movzx  eax,al
c0023153:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002315b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002315f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023161:	83 c4 1c             	add    esp,0x1c
c0023164:	5b                   	pop    ebx
c0023165:	5e                   	pop    esi
c0023166:	5f                   	pop    edi
c0023167:	5d                   	pop    ebp
c0023168:	c3                   	ret    
c0023169:	90                   	nop

c002316a <IDE::detect()>:
c002316a:	55                   	push   ebp
c002316b:	57                   	push   edi
c002316c:	56                   	push   esi
c002316d:	53                   	push   ebx
c002316e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023174:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002317b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023182:	0f 85 be 02 00 00    	jne    c0023446 <IDE::detect()+0x2dc>
c0023188:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002318f:	31 f6                	xor    esi,esi
c0023191:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023199:	31 ed                	xor    ebp,ebp
c002319b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002319f:	c1 e0 06             	shl    eax,0x6
c00231a2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00231aa:	89 e8                	mov    eax,ebp
c00231ac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00231b0:	c1 e0 04             	shl    eax,0x4
c00231b3:	83 c8 a0             	or     eax,0xffffffa0
c00231b6:	0f b6 c0             	movzx  eax,al
c00231b9:	50                   	push   eax
c00231ba:	6a 06                	push   0x6
c00231bc:	56                   	push   esi
c00231bd:	53                   	push   ebx
c00231be:	e8 79 f8 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231c3:	83 c4 0c             	add    esp,0xc
c00231c6:	6a 0c                	push   0xc
c00231c8:	56                   	push   esi
c00231c9:	53                   	push   ebx
c00231ca:	e8 2d f9 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c00231cf:	83 c4 0c             	add    esp,0xc
c00231d2:	6a 0c                	push   0xc
c00231d4:	56                   	push   esi
c00231d5:	53                   	push   ebx
c00231d6:	e8 21 f9 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c00231db:	83 c4 0c             	add    esp,0xc
c00231de:	6a 0c                	push   0xc
c00231e0:	56                   	push   esi
c00231e1:	53                   	push   ebx
c00231e2:	e8 15 f9 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c00231e7:	83 c4 0c             	add    esp,0xc
c00231ea:	6a 0c                	push   0xc
c00231ec:	56                   	push   esi
c00231ed:	53                   	push   ebx
c00231ee:	e8 09 f9 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c00231f3:	68 ec 00 00 00       	push   0xec
c00231f8:	6a 07                	push   0x7
c00231fa:	56                   	push   esi
c00231fb:	53                   	push   ebx
c00231fc:	e8 3b f8 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023201:	83 c4 1c             	add    esp,0x1c
c0023204:	6a 0c                	push   0xc
c0023206:	56                   	push   esi
c0023207:	53                   	push   ebx
c0023208:	e8 ef f8 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c002320d:	83 c4 0c             	add    esp,0xc
c0023210:	6a 0c                	push   0xc
c0023212:	56                   	push   esi
c0023213:	53                   	push   ebx
c0023214:	e8 e3 f8 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0023219:	83 c4 0c             	add    esp,0xc
c002321c:	6a 0c                	push   0xc
c002321e:	56                   	push   esi
c002321f:	53                   	push   ebx
c0023220:	e8 d7 f8 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0023225:	83 c4 0c             	add    esp,0xc
c0023228:	6a 0c                	push   0xc
c002322a:	56                   	push   esi
c002322b:	53                   	push   ebx
c002322c:	e8 cb f8 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0023231:	83 c4 0c             	add    esp,0xc
c0023234:	6a 0c                	push   0xc
c0023236:	56                   	push   esi
c0023237:	53                   	push   ebx
c0023238:	e8 bf f8 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c002323d:	83 c4 10             	add    esp,0x10
c0023240:	84 c0                	test   al,al
c0023242:	0f 84 8b 01 00 00    	je     c00233d3 <IDE::detect()+0x269>
c0023248:	31 ff                	xor    edi,edi
c002324a:	50                   	push   eax
c002324b:	6a 0c                	push   0xc
c002324d:	56                   	push   esi
c002324e:	53                   	push   ebx
c002324f:	e8 a8 f8 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0023254:	83 c4 10             	add    esp,0x10
c0023257:	a8 01                	test   al,0x1
c0023259:	0f 85 8e 01 00 00    	jne    c00233ed <IDE::detect()+0x283>
c002325f:	84 c0                	test   al,al
c0023261:	78 04                	js     c0023267 <IDE::detect()+0xfd>
c0023263:	a8 08                	test   al,0x8
c0023265:	75 27                	jne    c002328e <IDE::detect()+0x124>
c0023267:	47                   	inc    edi
c0023268:	81 ff 17 01 00 00    	cmp    edi,0x117
c002326e:	7e da                	jle    c002324a <IDE::detect()+0xe0>
c0023270:	50                   	push   eax
c0023271:	50                   	push   eax
c0023272:	6a 00                	push   0x0
c0023274:	68 40 4b 4c 00       	push   0x4c4b40
c0023279:	e8 00 ab ff ff       	call   c001dd7e <nanoSleep(unsigned long long)>
c002327e:	83 c4 10             	add    esp,0x10
c0023281:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023287:	75 c1                	jne    c002324a <IDE::detect()+0xe0>
c0023289:	e9 5f 01 00 00       	jmp    c00233ed <IDE::detect()+0x283>
c002328e:	31 c9                	xor    ecx,ecx
c0023290:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023294:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023298:	83 ec 0c             	sub    esp,0xc
c002329b:	68 80 00 00 00       	push   0x80
c00232a0:	57                   	push   edi
c00232a1:	6a 00                	push   0x0
c00232a3:	56                   	push   esi
c00232a4:	53                   	push   ebx
c00232a5:	e8 f4 fd ff ff       	call   c002309e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00232aa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00232af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00232b3:	89 d1                	mov    ecx,edx
c00232b5:	c1 e0 06             	shl    eax,0x6
c00232b8:	01 d8                	add    eax,ebx
c00232ba:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00232c1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00232c8:	89 f2                	mov    edx,esi
c00232ca:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00232d0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00232d4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00232da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00232de:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00232e5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00232ed:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00232f4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00232fc:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023302:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023309:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002330f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023313:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023317:	83 c4 20             	add    esp,0x20
c002331a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002331d:	83 c0 02             	add    eax,0x2
c0023320:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023326:	83 c7 02             	add    edi,0x2
c0023329:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002332c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023332:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023336:	75 e2                	jne    c002331a <IDE::detect()+0x1b0>
c0023338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002333c:	c1 e0 06             	shl    eax,0x6
c002333f:	01 d8                	add    eax,ebx
c0023341:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023347:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002334e:	66 c1 ea 09          	shr    dx,0x9
c0023352:	83 e2 01             	and    edx,0x1
c0023355:	84 c9                	test   cl,cl
c0023357:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002335d:	75 2f                	jne    c002338e <IDE::detect()+0x224>
c002335f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023365:	85 c0                	test   eax,eax
c0023367:	74 66                	je     c00233cf <IDE::detect()+0x265>
c0023369:	50                   	push   eax
c002336a:	55                   	push   ebp
c002336b:	56                   	push   esi
c002336c:	68 3b c4 02 c0       	push   0xc002c43b
c0023371:	e8 99 f7 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023376:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002337d:	e8 be c4 fe ff       	call   c000f840 <malloc>
c0023382:	89 c7                	mov    edi,eax
c0023384:	89 04 24             	mov    DWORD PTR [esp],eax
c0023387:	e8 78 06 00 00       	call   c0023a04 <ATA::ATA()>
c002338c:	eb 28                	jmp    c00233b6 <IDE::detect()+0x24c>
c002338e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023394:	55                   	push   ebp
c0023395:	56                   	push   esi
c0023396:	68 6a c4 02 c0       	push   0xc002c46a
c002339b:	e8 6f f7 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00233a0:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00233a7:	e8 94 c4 fe ff       	call   c000f840 <malloc>
c00233ac:	89 c7                	mov    edi,eax
c00233ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00233b1:	e8 8e 0c 00 00       	call   c0024044 <ATAPI::ATAPI()>
c00233b6:	5a                   	pop    edx
c00233b7:	59                   	pop    ecx
c00233b8:	57                   	push   edi
c00233b9:	53                   	push   ebx
c00233ba:	e8 77 0b ff ff       	call   c0013f36 <Device::addChild(Device*)>
c00233bf:	8b 07                	mov    eax,DWORD PTR [edi]
c00233c1:	53                   	push   ebx
c00233c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233c6:	6a 00                	push   0x0
c00233c8:	57                   	push   edi
c00233c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00233cc:	83 c4 20             	add    esp,0x20
c00233cf:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00233d3:	4d                   	dec    ebp
c00233d4:	74 0a                	je     c00233e0 <IDE::detect()+0x276>
c00233d6:	bd 01 00 00 00       	mov    ebp,0x1
c00233db:	e9 bb fd ff ff       	jmp    c002319b <IDE::detect()+0x31>
c00233e0:	4e                   	dec    esi
c00233e1:	74 63                	je     c0023446 <IDE::detect()+0x2dc>
c00233e3:	be 01 00 00 00       	mov    esi,0x1
c00233e8:	e9 ac fd ff ff       	jmp    c0023199 <IDE::detect()+0x2f>
c00233ed:	50                   	push   eax
c00233ee:	6a 04                	push   0x4
c00233f0:	56                   	push   esi
c00233f1:	53                   	push   ebx
c00233f2:	e8 05 f7 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c00233f7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00233fb:	83 c4 0c             	add    esp,0xc
c00233fe:	6a 05                	push   0x5
c0023400:	56                   	push   esi
c0023401:	53                   	push   ebx
c0023402:	e8 f5 f6 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0023407:	83 c4 10             	add    esp,0x10
c002340a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002340e:	80 fa 14             	cmp    dl,0x14
c0023411:	75 04                	jne    c0023417 <IDE::detect()+0x2ad>
c0023413:	3c eb                	cmp    al,0xeb
c0023415:	eb 07                	jmp    c002341e <IDE::detect()+0x2b4>
c0023417:	3c 96                	cmp    al,0x96
c0023419:	75 b8                	jne    c00233d3 <IDE::detect()+0x269>
c002341b:	80 fa 69             	cmp    dl,0x69
c002341e:	75 b3                	jne    c00233d3 <IDE::detect()+0x269>
c0023420:	68 a1 00 00 00       	push   0xa1
c0023425:	6a 07                	push   0x7
c0023427:	56                   	push   esi
c0023428:	53                   	push   ebx
c0023429:	e8 0e f6 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002342e:	5f                   	pop    edi
c002342f:	58                   	pop    eax
c0023430:	6a 00                	push   0x0
c0023432:	68 40 42 0f 00       	push   0xf4240
c0023437:	e8 42 a9 ff ff       	call   c001dd7e <nanoSleep(unsigned long long)>
c002343c:	83 c4 10             	add    esp,0x10
c002343f:	b1 01                	mov    cl,0x1
c0023441:	e9 4a fe ff ff       	jmp    c0023290 <IDE::detect()+0x126>
c0023446:	81 c4 1c 02 00 00    	add    esp,0x21c
c002344c:	5b                   	pop    ebx
c002344d:	5e                   	pop    esi
c002344e:	5f                   	pop    edi
c002344f:	5d                   	pop    ebp
c0023450:	c3                   	ret    
c0023451:	90                   	nop

c0023452 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023452:	55                   	push   ebp
c0023453:	57                   	push   edi
c0023454:	56                   	push   esi
c0023455:	53                   	push   ebx
c0023456:	83 ec 1c             	sub    esp,0x1c
c0023459:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002345d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023461:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023465:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023469:	88 c3                	mov    bl,al
c002346b:	84 c0                	test   al,al
c002346d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023471:	0f 84 67 01 00 00    	je     c00235de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023477:	83 ec 0c             	sub    esp,0xc
c002347a:	68 9b c4 02 c0       	push   0xc002c49b
c002347f:	e8 8b f6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023484:	83 c4 10             	add    esp,0x10
c0023487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002348b:	3c 01                	cmp    al,0x1
c002348d:	75 17                	jne    c00234a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002348f:	83 ec 0c             	sub    esp,0xc
c0023492:	b3 13                	mov    bl,0x13
c0023494:	68 a7 c4 02 c0       	push   0xc002c4a7
c0023499:	e8 71 f6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002349e:	83 c4 10             	add    esp,0x10
c00234a1:	e9 25 01 00 00       	jmp    c00235cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00234a6:	3c 02                	cmp    al,0x2
c00234a8:	0f 85 ef 00 00 00    	jne    c002359d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00234ae:	d1 e6                	shl    esi,1
c00234b0:	09 ee                	or     esi,ebp
c00234b2:	52                   	push   edx
c00234b3:	89 f0                	mov    eax,esi
c00234b5:	6a 01                	push   0x1
c00234b7:	0f b6 f0             	movzx  esi,al
c00234ba:	c1 e6 06             	shl    esi,0x6
c00234bd:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00234c5:	50                   	push   eax
c00234c6:	57                   	push   edi
c00234c7:	e8 30 f6 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c00234cc:	83 c4 10             	add    esp,0x10
c00234cf:	89 c6                	mov    esi,eax
c00234d1:	a8 01                	test   al,0x1
c00234d3:	74 12                	je     c00234e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00234d5:	83 ec 0c             	sub    esp,0xc
c00234d8:	b3 07                	mov    bl,0x7
c00234da:	68 bc c4 02 c0       	push   0xc002c4bc
c00234df:	e8 2b f6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00234e4:	83 c4 10             	add    esp,0x10
c00234e7:	f7 c6 02 00 00 00    	test   esi,0x2
c00234ed:	74 12                	je     c0023501 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00234ef:	83 ec 0c             	sub    esp,0xc
c00234f2:	b3 03                	mov    bl,0x3
c00234f4:	68 da c4 02 c0       	push   0xc002c4da
c00234f9:	e8 11 f6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00234fe:	83 c4 10             	add    esp,0x10
c0023501:	f7 c6 04 00 00 00    	test   esi,0x4
c0023507:	74 12                	je     c002351b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023509:	83 ec 0c             	sub    esp,0xc
c002350c:	b3 14                	mov    bl,0x14
c002350e:	68 fa c4 02 c0       	push   0xc002c4fa
c0023513:	e8 f7 f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023518:	83 c4 10             	add    esp,0x10
c002351b:	f7 c6 08 00 00 00    	test   esi,0x8
c0023521:	74 12                	je     c0023535 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023523:	83 ec 0c             	sub    esp,0xc
c0023526:	b3 03                	mov    bl,0x3
c0023528:	68 da c4 02 c0       	push   0xc002c4da
c002352d:	e8 dd f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023532:	83 c4 10             	add    esp,0x10
c0023535:	f7 c6 10 00 00 00    	test   esi,0x10
c002353b:	74 12                	je     c002354f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002353d:	83 ec 0c             	sub    esp,0xc
c0023540:	b3 15                	mov    bl,0x15
c0023542:	68 12 c5 02 c0       	push   0xc002c512
c0023547:	e8 c3 f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002354c:	83 c4 10             	add    esp,0x10
c002354f:	f7 c6 20 00 00 00    	test   esi,0x20
c0023555:	74 12                	je     c0023569 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023557:	83 ec 0c             	sub    esp,0xc
c002355a:	b3 03                	mov    bl,0x3
c002355c:	68 da c4 02 c0       	push   0xc002c4da
c0023561:	e8 a9 f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023566:	83 c4 10             	add    esp,0x10
c0023569:	f7 c6 40 00 00 00    	test   esi,0x40
c002356f:	74 12                	je     c0023583 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023571:	83 ec 0c             	sub    esp,0xc
c0023574:	b3 16                	mov    bl,0x16
c0023576:	68 2c c5 02 c0       	push   0xc002c52c
c002357b:	e8 8f f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023580:	83 c4 10             	add    esp,0x10
c0023583:	89 f0                	mov    eax,esi
c0023585:	84 c0                	test   al,al
c0023587:	79 42                	jns    c00235cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023589:	83 ec 0c             	sub    esp,0xc
c002358c:	b3 0d                	mov    bl,0xd
c002358e:	68 4d c5 02 c0       	push   0xc002c54d
c0023593:	e8 77 f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023598:	83 c4 10             	add    esp,0x10
c002359b:	eb 2e                	jmp    c00235cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002359d:	3c 03                	cmp    al,0x3
c002359f:	75 14                	jne    c00235b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00235a1:	83 ec 0c             	sub    esp,0xc
c00235a4:	b3 17                	mov    bl,0x17
c00235a6:	68 61 c5 02 c0       	push   0xc002c561
c00235ab:	e8 5f f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00235b0:	83 c4 10             	add    esp,0x10
c00235b3:	eb 16                	jmp    c00235cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00235b5:	3c 04                	cmp    al,0x4
c00235b7:	75 12                	jne    c00235cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00235b9:	83 ec 0c             	sub    esp,0xc
c00235bc:	b3 08                	mov    bl,0x8
c00235be:	68 77 c5 02 c0       	push   0xc002c577
c00235c3:	e8 47 f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00235c8:	83 c4 10             	add    esp,0x10
c00235cb:	50                   	push   eax
c00235cc:	50                   	push   eax
c00235cd:	0f b6 c3             	movzx  eax,bl
c00235d0:	50                   	push   eax
c00235d1:	68 8f c5 02 c0       	push   0xc002c58f
c00235d6:	e8 34 f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00235db:	83 c4 10             	add    esp,0x10
c00235de:	83 c4 1c             	add    esp,0x1c
c00235e1:	88 d8                	mov    al,bl
c00235e3:	5b                   	pop    ebx
c00235e4:	5e                   	pop    esi
c00235e5:	5f                   	pop    edi
c00235e6:	5d                   	pop    ebp
c00235e7:	c3                   	ret    

c00235e8 <IDE::polling(unsigned char, unsigned int)>:
c00235e8:	57                   	push   edi
c00235e9:	56                   	push   esi
c00235ea:	53                   	push   ebx
c00235eb:	bb 04 00 00 00       	mov    ebx,0x4
c00235f0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00235f4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00235f9:	52                   	push   edx
c00235fa:	6a 0c                	push   0xc
c00235fc:	56                   	push   esi
c00235fd:	57                   	push   edi
c00235fe:	e8 f9 f4 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0023603:	83 c4 10             	add    esp,0x10
c0023606:	4b                   	dec    ebx
c0023607:	75 f0                	jne    c00235f9 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023609:	bb a0 86 01 00       	mov    ebx,0x186a0
c002360e:	50                   	push   eax
c002360f:	6a 0c                	push   0xc
c0023611:	56                   	push   esi
c0023612:	57                   	push   edi
c0023613:	e8 e4 f4 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0023618:	83 c4 10             	add    esp,0x10
c002361b:	a8 01                	test   al,0x1
c002361d:	74 12                	je     c0023631 <IDE::polling(unsigned char, unsigned int)+0x49>
c002361f:	83 ec 0c             	sub    esp,0xc
c0023622:	68 a9 c5 02 c0       	push   0xc002c5a9
c0023627:	e8 e3 f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002362c:	83 c4 10             	add    esp,0x10
c002362f:	eb 17                	jmp    c0023648 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023631:	a8 20                	test   al,0x20
c0023633:	75 0f                	jne    c0023644 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023635:	4b                   	dec    ebx
c0023636:	74 10                	je     c0023648 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023638:	84 c0                	test   al,al
c002363a:	78 d2                	js     c002360e <IDE::polling(unsigned char, unsigned int)+0x26>
c002363c:	a8 08                	test   al,0x8
c002363e:	74 ce                	je     c002360e <IDE::polling(unsigned char, unsigned int)+0x26>
c0023640:	31 c0                	xor    eax,eax
c0023642:	eb 06                	jmp    c002364a <IDE::polling(unsigned char, unsigned int)+0x62>
c0023644:	b0 01                	mov    al,0x1
c0023646:	eb 02                	jmp    c002364a <IDE::polling(unsigned char, unsigned int)+0x62>
c0023648:	b0 02                	mov    al,0x2
c002364a:	5b                   	pop    ebx
c002364b:	5e                   	pop    esi
c002364c:	5f                   	pop    edi
c002364d:	c3                   	ret    

c002364e <SATABus::close(int, int, void*)>:
c002364e:	31 c0                	xor    eax,eax
c0023650:	c3                   	ret    
c0023651:	90                   	nop

c0023652 <SATABus::detect()>:
c0023652:	c3                   	ret    
c0023653:	90                   	nop

c0023654 <SATABus::SATABus()>:
c0023654:	83 ec 0c             	sub    esp,0xc
c0023657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002365b:	83 ec 08             	sub    esp,0x8
c002365e:	68 ec c5 02 c0       	push   0xc002c5ec
c0023663:	50                   	push   eax
c0023664:	e8 59 0c ff ff       	call   c00142c2 <HardDiskController::HardDiskController(char const*)>
c0023669:	83 c4 10             	add    esp,0x10
c002366c:	ba a8 c6 02 c0       	mov    edx,0xc002c6a8
c0023671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023675:	89 10                	mov    DWORD PTR [eax],edx
c0023677:	83 ec 0c             	sub    esp,0xc
c002367a:	6a 50                	push   0x50
c002367c:	e8 24 c9 fe ff       	call   c000ffa5 <Phys::allocateContiguousPages(int)>
c0023681:	83 c4 10             	add    esp,0x10
c0023684:	89 c2                	mov    edx,eax
c0023686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002368a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023690:	83 ec 0c             	sub    esp,0xc
c0023693:	6a 50                	push   0x50
c0023695:	e8 85 e4 fe ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c002369a:	83 c4 10             	add    esp,0x10
c002369d:	89 c2                	mov    edx,eax
c002369f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00236a9:	e8 01 e6 fe ff       	call   c0011caf <Virt::getAKernelVAS()>
c00236ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00236b2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00236b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00236bc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00236c2:	83 ec 0c             	sub    esp,0xc
c00236c5:	6a 03                	push   0x3
c00236c7:	6a 50                	push   0x50
c00236c9:	51                   	push   ecx
c00236ca:	52                   	push   edx
c00236cb:	50                   	push   eax
c00236cc:	e8 0d ee fe ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00236d1:	83 c4 20             	add    esp,0x20
c00236d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236d8:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00236de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00236e8:	83 ec 04             	sub    esp,0x4
c00236eb:	52                   	push   edx
c00236ec:	50                   	push   eax
c00236ed:	68 10 c6 02 c0       	push   0xc002c610
c00236f2:	e8 18 f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00236f7:	83 c4 10             	add    esp,0x10
c00236fa:	90                   	nop
c00236fb:	83 c4 0c             	add    esp,0xc
c00236fe:	c3                   	ret    
c00236ff:	90                   	nop

c0023700 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023700:	83 ec 0c             	sub    esp,0xc
c0023703:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023707:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002370a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002370d:	09 c2                	or     edx,eax
c002370f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023713:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023719:	8b 08                	mov    ecx,DWORD PTR [eax]
c002371b:	31 c0                	xor    eax,eax
c002371d:	c1 e9 08             	shr    ecx,0x8
c0023720:	83 e1 0f             	and    ecx,0xf
c0023723:	39 c8                	cmp    eax,ecx
c0023725:	74 0a                	je     c0023731 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023727:	f6 c2 01             	test   dl,0x1
c002372a:	74 18                	je     c0023744 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002372c:	d1 ea                	shr    edx,1
c002372e:	40                   	inc    eax
c002372f:	eb f2                	jmp    c0023723 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023731:	83 ec 0c             	sub    esp,0xc
c0023734:	68 34 c6 02 c0       	push   0xc002c634
c0023739:	e8 61 6a ff ff       	call   c001a19f <Krnl::panic(char const*)>
c002373e:	83 c4 10             	add    esp,0x10
c0023741:	83 c8 ff             	or     eax,0xffffffff
c0023744:	83 c4 0c             	add    esp,0xc
c0023747:	c3                   	ret    

c0023748 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023748:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002374c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002374f:	89 c2                	mov    edx,eax
c0023751:	c1 ea 08             	shr    edx,0x8
c0023754:	83 e2 0f             	and    edx,0xf
c0023757:	fe ca                	dec    dl
c0023759:	75 31                	jne    c002378c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002375b:	83 e0 0f             	and    eax,0xf
c002375e:	3c 03                	cmp    al,0x3
c0023760:	75 2a                	jne    c002378c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023762:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023765:	b8 02 00 00 00       	mov    eax,0x2
c002376a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023770:	74 1c                	je     c002378e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023772:	b8 04 00 00 00       	mov    eax,0x4
c0023777:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002377d:	74 0f                	je     c002378e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002377f:	31 c0                	xor    eax,eax
c0023781:	83 fa 03             	cmp    edx,0x3
c0023784:	0f 94 c0             	sete   al
c0023787:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002378b:	c3                   	ret    
c002378c:	31 c0                	xor    eax,eax
c002378e:	c3                   	ret    
c002378f:	90                   	nop

c0023790 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023794:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023797:	0f ba e2 0f          	bt     edx,0xf
c002379b:	72 f7                	jb     c0023794 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002379d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00237a0:	83 ca 10             	or     edx,0x10
c00237a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00237a6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00237a9:	83 ca 01             	or     edx,0x1
c00237ac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00237af:	c3                   	ret    

c00237b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00237b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00237b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00237b7:	83 e2 fe             	and    edx,0xfffffffe
c00237ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00237bd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00237c0:	83 e2 ef             	and    edx,0xffffffef
c00237c3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00237c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00237c9:	0f ba e2 0e          	bt     edx,0xe
c00237cd:	72 f7                	jb     c00237c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00237cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00237d2:	0f ba e2 0f          	bt     edx,0xf
c00237d6:	72 ee                	jb     c00237c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00237d8:	c3                   	ret    
c00237d9:	90                   	nop

c00237da <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00237da:	55                   	push   ebp
c00237db:	57                   	push   edi
c00237dc:	56                   	push   esi
c00237dd:	53                   	push   ebx
c00237de:	83 ec 1c             	sub    esp,0x1c
c00237e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00237e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00237e9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00237ed:	53                   	push   ebx
c00237ee:	89 fd                	mov    ebp,edi
c00237f0:	56                   	push   esi
c00237f1:	c1 e5 0a             	shl    ebp,0xa
c00237f4:	e8 b7 ff ff ff       	call   c00237b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00237f9:	83 ec 0c             	sub    esp,0xc
c00237fc:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023802:	01 e8                	add    eax,ebp
c0023804:	89 03                	mov    DWORD PTR [ebx],eax
c0023806:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023808:	68 00 04 00 00       	push   0x400
c002380d:	6a 00                	push   0x0
c002380f:	50                   	push   eax
c0023810:	e8 63 cf fd ff       	call   c0000778 <memset>
c0023815:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002381b:	89 fa                	mov    edx,edi
c002381d:	01 e8                	add    eax,ebp
c002381f:	c1 e7 0d             	shl    edi,0xd
c0023822:	89 03                	mov    DWORD PTR [ebx],eax
c0023824:	c1 e2 08             	shl    edx,0x8
c0023827:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002382e:	81 c2 00 80 00 00    	add    edx,0x8000
c0023834:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023838:	89 d0                	mov    eax,edx
c002383a:	83 c4 1c             	add    esp,0x1c
c002383d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023843:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023846:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023849:	68 00 01 00 00       	push   0x100
c002384e:	6a 00                	push   0x0
c0023850:	50                   	push   eax
c0023851:	e8 22 cf fd ff       	call   c0000778 <memset>
c0023856:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002385a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023860:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023866:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002386a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002386d:	83 c4 10             	add    esp,0x10
c0023870:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023877:	31 ff                	xor    edi,edi
c0023879:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002387f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023889:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002388f:	83 c5 20             	add    ebp,0x20
c0023892:	01 f8                	add    eax,edi
c0023894:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023897:	52                   	push   edx
c0023898:	68 00 01 00 00       	push   0x100
c002389d:	6a 00                	push   0x0
c002389f:	50                   	push   eax
c00238a0:	e8 d3 ce fd ff       	call   c0000778 <memset>
c00238a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238a9:	83 c4 10             	add    esp,0x10
c00238ac:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00238b2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00238b9:	01 f8                	add    eax,edi
c00238bb:	81 c7 00 01 00 00    	add    edi,0x100
c00238c1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00238c4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00238ca:	75 b3                	jne    c002387f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00238cc:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00238d0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00238d4:	83 c4 1c             	add    esp,0x1c
c00238d7:	5b                   	pop    ebx
c00238d8:	5e                   	pop    esi
c00238d9:	5f                   	pop    edi
c00238da:	5d                   	pop    ebp
c00238db:	e9 b0 fe ff ff       	jmp    c0023790 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00238e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00238e0:	55                   	push   ebp
c00238e1:	57                   	push   edi
c00238e2:	56                   	push   esi
c00238e3:	53                   	push   ebx
c00238e4:	31 db                	xor    ebx,ebx
c00238e6:	83 ec 0c             	sub    esp,0xc
c00238e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00238f1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00238f4:	f7 c7 01 00 00 00    	test   edi,0x1
c00238fa:	0f 84 aa 00 00 00    	je     c00239aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023900:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023904:	89 d8                	mov    eax,ebx
c0023906:	c1 e0 07             	shl    eax,0x7
c0023909:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023910:	55                   	push   ebp
c0023911:	56                   	push   esi
c0023912:	e8 31 fe ff ff       	call   c0023748 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023917:	5a                   	pop    edx
c0023918:	83 f8 01             	cmp    eax,0x1
c002391b:	59                   	pop    ecx
c002391c:	75 30                	jne    c002394e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c002391e:	50                   	push   eax
c002391f:	50                   	push   eax
c0023920:	53                   	push   ebx
c0023921:	68 59 c6 02 c0       	push   0xc002c659
c0023926:	e8 e4 f1 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002392b:	83 c4 0c             	add    esp,0xc
c002392e:	53                   	push   ebx
c002392f:	55                   	push   ebp
c0023930:	56                   	push   esi
c0023931:	e8 a4 fe ff ff       	call   c00237da <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023936:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002393d:	e8 fe be fe ff       	call   c000f840 <malloc>
c0023942:	89 c5                	mov    ebp,eax
c0023944:	89 04 24             	mov    DWORD PTR [esp],eax
c0023947:	e8 60 0d 00 00       	call   c00246ac <SATA::SATA()>
c002394c:	eb 33                	jmp    c0023981 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c002394e:	83 f8 04             	cmp    eax,0x4
c0023951:	75 47                	jne    c002399a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023953:	50                   	push   eax
c0023954:	50                   	push   eax
c0023955:	53                   	push   ebx
c0023956:	68 70 c6 02 c0       	push   0xc002c670
c002395b:	e8 af f1 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023960:	83 c4 0c             	add    esp,0xc
c0023963:	53                   	push   ebx
c0023964:	55                   	push   ebp
c0023965:	56                   	push   esi
c0023966:	e8 6f fe ff ff       	call   c00237da <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002396b:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023972:	e8 c9 be fe ff       	call   c000f840 <malloc>
c0023977:	89 c5                	mov    ebp,eax
c0023979:	89 04 24             	mov    DWORD PTR [esp],eax
c002397c:	e8 d7 10 00 00       	call   c0024a58 <SATAPI::SATAPI()>
c0023981:	5a                   	pop    edx
c0023982:	59                   	pop    ecx
c0023983:	55                   	push   ebp
c0023984:	56                   	push   esi
c0023985:	e8 ac 05 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c002398a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002398d:	56                   	push   esi
c002398e:	6a 00                	push   0x0
c0023990:	53                   	push   ebx
c0023991:	55                   	push   ebp
c0023992:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023995:	83 c4 20             	add    esp,0x20
c0023998:	eb 10                	jmp    c00239aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002399a:	50                   	push   eax
c002399b:	50                   	push   eax
c002399c:	53                   	push   ebx
c002399d:	68 89 c6 02 c0       	push   0xc002c689
c00239a2:	e8 68 f1 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00239a7:	83 c4 10             	add    esp,0x10
c00239aa:	d1 ef                	shr    edi,1
c00239ac:	43                   	inc    ebx
c00239ad:	83 fb 20             	cmp    ebx,0x20
c00239b0:	0f 85 3e ff ff ff    	jne    c00238f4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00239b6:	83 c4 0c             	add    esp,0xc
c00239b9:	5b                   	pop    ebx
c00239ba:	5e                   	pop    esi
c00239bb:	5f                   	pop    edi
c00239bc:	5d                   	pop    ebp
c00239bd:	c3                   	ret    

c00239be <SATABus::open(int, int, void*)>:
c00239be:	83 ec 14             	sub    esp,0x14
c00239c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239c5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00239cb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00239d1:	52                   	push   edx
c00239d2:	50                   	push   eax
c00239d3:	e8 08 ff ff ff       	call   c00238e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00239d8:	31 c0                	xor    eax,eax
c00239da:	83 c4 1c             	add    esp,0x1c
c00239dd:	c3                   	ret    

c00239de <ATA::close(int, int, void*)>:
c00239de:	83 ec 0c             	sub    esp,0xc
c00239e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00239eb:	85 c0                	test   eax,eax
c00239ed:	74 0c                	je     c00239fb <ATA::close(int, int, void*)+0x1d>
c00239ef:	83 ec 0c             	sub    esp,0xc
c00239f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00239f4:	50                   	push   eax
c00239f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00239f8:	83 c4 10             	add    esp,0x10
c00239fb:	31 c0                	xor    eax,eax
c00239fd:	83 c4 0c             	add    esp,0xc
c0023a00:	c3                   	ret    
c0023a01:	90                   	nop

c0023a02 <ATA::powerSaving(PowerSavingLevel)>:
c0023a02:	c3                   	ret    
c0023a03:	90                   	nop

c0023a04 <ATA::ATA()>:
c0023a04:	83 ec 0c             	sub    esp,0xc
c0023a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a0b:	83 ec 04             	sub    esp,0x4
c0023a0e:	68 00 02 00 00       	push   0x200
c0023a13:	68 71 c7 02 c0       	push   0xc002c771
c0023a18:	50                   	push   eax
c0023a19:	e8 3c 09 ff ff       	call   c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023a1e:	83 c4 10             	add    esp,0x10
c0023a21:	ba f4 c6 02 c0       	mov    edx,0xc002c6f4
c0023a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a2a:	89 10                	mov    DWORD PTR [eax],edx
c0023a2c:	90                   	nop
c0023a2d:	83 c4 0c             	add    esp,0xc
c0023a30:	c3                   	ret    
c0023a31:	90                   	nop

c0023a32 <ATA::flush(bool)>:
c0023a32:	53                   	push   ebx
c0023a33:	83 ec 08             	sub    esp,0x8
c0023a36:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023a3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a3f:	19 c0                	sbb    eax,eax
c0023a41:	83 e0 fd             	and    eax,0xfffffffd
c0023a44:	05 ea 00 00 00       	add    eax,0xea
c0023a49:	50                   	push   eax
c0023a4a:	6a 07                	push   0x7
c0023a4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a53:	50                   	push   eax
c0023a54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a5a:	e8 dd ef ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a5f:	83 c4 0c             	add    esp,0xc
c0023a62:	6a 00                	push   0x0
c0023a64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a6b:	50                   	push   eax
c0023a6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a72:	e8 71 fb ff ff       	call   c00235e8 <IDE::polling(unsigned char, unsigned int)>
c0023a77:	83 c4 18             	add    esp,0x18
c0023a7a:	5b                   	pop    ebx
c0023a7b:	c3                   	ret    

c0023a7c <ATA::readyForCommand()>:
c0023a7c:	56                   	push   esi
c0023a7d:	53                   	push   ebx
c0023a7e:	31 db                	xor    ebx,ebx
c0023a80:	50                   	push   eax
c0023a81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023a85:	50                   	push   eax
c0023a86:	6a 0c                	push   0xc
c0023a88:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023a8f:	50                   	push   eax
c0023a90:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023a96:	e8 61 f0 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0023a9b:	83 c4 10             	add    esp,0x10
c0023a9e:	a8 88                	test   al,0x88
c0023aa0:	74 23                	je     c0023ac5 <ATA::readyForCommand()+0x49>
c0023aa2:	43                   	inc    ebx
c0023aa3:	83 fb 63             	cmp    ebx,0x63
c0023aa6:	7e dd                	jle    c0023a85 <ATA::readyForCommand()+0x9>
c0023aa8:	51                   	push   ecx
c0023aa9:	51                   	push   ecx
c0023aaa:	6a 00                	push   0x0
c0023aac:	68 40 42 0f 00       	push   0xf4240
c0023ab1:	e8 c8 a2 ff ff       	call   c001dd7e <nanoSleep(unsigned long long)>
c0023ab6:	83 c4 10             	add    esp,0x10
c0023ab9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023abf:	75 c4                	jne    c0023a85 <ATA::readyForCommand()+0x9>
c0023ac1:	31 c0                	xor    eax,eax
c0023ac3:	eb 02                	jmp    c0023ac7 <ATA::readyForCommand()+0x4b>
c0023ac5:	b0 01                	mov    al,0x1
c0023ac7:	5a                   	pop    edx
c0023ac8:	5b                   	pop    ebx
c0023ac9:	5e                   	pop    esi
c0023aca:	c3                   	ret    
c0023acb:	90                   	nop

c0023acc <ATA::access(unsigned long long, int, void*, bool)>:
c0023acc:	55                   	push   ebp
c0023acd:	57                   	push   edi
c0023ace:	56                   	push   esi
c0023acf:	53                   	push   ebx
c0023ad0:	83 ec 2c             	sub    esp,0x2c
c0023ad3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023ad7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023adb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023adf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ae3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023ae7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023aeb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023aef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023af5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023af9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023aff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b03:	c1 e0 06             	shl    eax,0x6
c0023b06:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023b0e:	74 5d                	je     c0023b6d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023b10:	89 fa                	mov    edx,edi
c0023b12:	89 f0                	mov    eax,esi
c0023b14:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023b18:	c1 ea 1c             	shr    edx,0x1c
c0023b1b:	89 d1                	mov    ecx,edx
c0023b1d:	09 c1                	or     ecx,eax
c0023b1f:	74 25                	je     c0023b46 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023b21:	31 ed                	xor    ebp,ebp
c0023b23:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023b2a:	89 fa                	mov    edx,edi
c0023b2c:	89 f0                	mov    eax,esi
c0023b2e:	0f ad d0             	shrd   eax,edx,cl
c0023b31:	d3 ea                	shr    edx,cl
c0023b33:	f6 c1 20             	test   cl,0x20
c0023b36:	74 02                	je     c0023b3a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023b38:	89 d0                	mov    eax,edx
c0023b3a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023b3e:	45                   	inc    ebp
c0023b3f:	83 fd 06             	cmp    ebp,0x6
c0023b42:	75 df                	jne    c0023b23 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023b44:	eb 76                	jmp    c0023bbc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023b46:	89 f0                	mov    eax,esi
c0023b48:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023b4d:	89 fa                	mov    edx,edi
c0023b4f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023b56:	0f ac d0 10          	shrd   eax,edx,0x10
c0023b5a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023b5f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023b63:	c1 ee 18             	shr    esi,0x18
c0023b66:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023b6b:	eb 56                	jmp    c0023bc3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023b6d:	6a 00                	push   0x0
c0023b6f:	6a 3f                	push   0x3f
c0023b71:	57                   	push   edi
c0023b72:	56                   	push   esi
c0023b73:	e8 94 29 00 00       	call   c002650c <__umoddi3>
c0023b78:	83 c4 10             	add    esp,0x10
c0023b7b:	40                   	inc    eax
c0023b7c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023b80:	6a 00                	push   0x0
c0023b82:	68 f0 03 00 00       	push   0x3f0
c0023b87:	57                   	push   edi
c0023b88:	56                   	push   esi
c0023b89:	e8 7e 28 00 00       	call   c002640c <__udivdi3>
c0023b8e:	83 c4 10             	add    esp,0x10
c0023b91:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023b96:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023b9d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023ba2:	6a 00                	push   0x0
c0023ba4:	6a 3f                	push   0x3f
c0023ba6:	57                   	push   edi
c0023ba7:	56                   	push   esi
c0023ba8:	e8 5f 28 00 00       	call   c002640c <__udivdi3>
c0023bad:	83 c4 10             	add    esp,0x10
c0023bb0:	89 c6                	mov    esi,eax
c0023bb2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023bb7:	83 e6 0f             	and    esi,0xf
c0023bba:	eb 07                	jmp    c0023bc3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023bbc:	31 f6                	xor    esi,esi
c0023bbe:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023bc3:	bf 01 00 00 00       	mov    edi,0x1
c0023bc8:	50                   	push   eax
c0023bc9:	6a 00                	push   0x0
c0023bcb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023bd2:	50                   	push   eax
c0023bd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023bd7:	e8 6c f0 ff ff       	call   c0022c48 <IDE::enableIRQs(unsigned char, bool)>
c0023bdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023bdf:	e8 98 fe ff ff       	call   c0023a7c <ATA::readyForCommand()>
c0023be4:	83 c4 10             	add    esp,0x10
c0023be7:	84 c0                	test   al,al
c0023be9:	0f 84 5a 02 00 00    	je     c0023e49 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023bef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023bf5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023bfb:	c1 e0 04             	shl    eax,0x4
c0023bfe:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023c05:	09 c6                	or     esi,eax
c0023c07:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023c0c:	75 05                	jne    c0023c13 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023c0e:	83 ce a0             	or     esi,0xffffffa0
c0023c11:	eb 03                	jmp    c0023c16 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023c13:	83 ce e0             	or     esi,0xffffffe0
c0023c16:	89 f0                	mov    eax,esi
c0023c18:	0f b6 f0             	movzx  esi,al
c0023c1b:	56                   	push   esi
c0023c1c:	6a 06                	push   0x6
c0023c1e:	51                   	push   ecx
c0023c1f:	52                   	push   edx
c0023c20:	e8 17 ee ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c25:	83 c4 10             	add    esp,0x10
c0023c28:	6a 00                	push   0x0
c0023c2a:	6a 01                	push   0x1
c0023c2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c33:	50                   	push   eax
c0023c34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c3a:	e8 fd ed ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c3f:	83 c4 10             	add    esp,0x10
c0023c42:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023c47:	75 6e                	jne    c0023cb7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023c49:	6a 00                	push   0x0
c0023c4b:	6a 08                	push   0x8
c0023c4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c54:	50                   	push   eax
c0023c55:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c5b:	e8 dc ed ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c60:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023c65:	50                   	push   eax
c0023c66:	6a 09                	push   0x9
c0023c68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c6f:	50                   	push   eax
c0023c70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c76:	e8 c1 ed ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c7b:	83 c4 20             	add    esp,0x20
c0023c7e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023c83:	50                   	push   eax
c0023c84:	6a 0a                	push   0xa
c0023c86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c8d:	50                   	push   eax
c0023c8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c94:	e8 a3 ed ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c99:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023c9e:	50                   	push   eax
c0023c9f:	6a 0b                	push   0xb
c0023ca1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ca8:	50                   	push   eax
c0023ca9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023caf:	e8 88 ed ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cb4:	83 c4 20             	add    esp,0x20
c0023cb7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023cbc:	50                   	push   eax
c0023cbd:	6a 02                	push   0x2
c0023cbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cc6:	50                   	push   eax
c0023cc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ccd:	e8 6a ed ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cd2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023cd7:	50                   	push   eax
c0023cd8:	6a 03                	push   0x3
c0023cda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ce1:	50                   	push   eax
c0023ce2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ce8:	e8 4f ed ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ced:	83 c4 20             	add    esp,0x20
c0023cf0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023cf5:	50                   	push   eax
c0023cf6:	6a 04                	push   0x4
c0023cf8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cff:	50                   	push   eax
c0023d00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d06:	e8 31 ed ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023d10:	50                   	push   eax
c0023d11:	6a 05                	push   0x5
c0023d13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d1a:	50                   	push   eax
c0023d1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d21:	e8 16 ed ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d26:	83 c4 20             	add    esp,0x20
c0023d29:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023d2e:	0f 94 c0             	sete   al
c0023d31:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023d36:	74 09                	je     c0023d41 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023d38:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023d3f:	eb 07                	jmp    c0023d48 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023d41:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023d48:	0f b6 c0             	movzx  eax,al
c0023d4b:	50                   	push   eax
c0023d4c:	6a 07                	push   0x7
c0023d4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d55:	50                   	push   eax
c0023d56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d5c:	e8 db ec ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d61:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023d65:	83 c4 10             	add    esp,0x10
c0023d68:	85 f6                	test   esi,esi
c0023d6a:	0f 84 ba 00 00 00    	je     c0023e2a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023d70:	50                   	push   eax
c0023d71:	6a 01                	push   0x1
c0023d73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d7a:	50                   	push   eax
c0023d7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d81:	e8 62 f8 ff ff       	call   c00235e8 <IDE::polling(unsigned char, unsigned int)>
c0023d86:	83 c4 10             	add    esp,0x10
c0023d89:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023d8f:	84 c0                	test   al,al
c0023d91:	74 2c                	je     c0023dbf <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023d93:	0f b6 f8             	movzx  edi,al
c0023d96:	0f b6 d2             	movzx  edx,dl
c0023d99:	57                   	push   edi
c0023d9a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023da1:	50                   	push   eax
c0023da2:	52                   	push   edx
c0023da3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023da9:	e8 a4 f6 ff ff       	call   c0023452 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023dae:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0023db5:	e8 55 ed fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023dba:	e9 87 00 00 00       	jmp    c0023e46 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023dbf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023dc4:	74 33                	je     c0023df9 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023dc6:	31 ed                	xor    ebp,ebp
c0023dc8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023dcc:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023dd0:	50                   	push   eax
c0023dd1:	50                   	push   eax
c0023dd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dd9:	50                   	push   eax
c0023dda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023de0:	e8 45 ec ff ff       	call   c0022a2a <IDE::getBase(unsigned char)>
c0023de5:	89 c2                	mov    edx,eax
c0023de7:	89 f8                	mov    eax,edi
c0023de9:	66 ef                	out    dx,ax
c0023deb:	45                   	inc    ebp
c0023dec:	83 c4 10             	add    esp,0x10
c0023def:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023df5:	75 d1                	jne    c0023dc8 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023df7:	eb 23                	jmp    c0023e1c <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023df9:	0f b6 d2             	movzx  edx,dl
c0023dfc:	51                   	push   ecx
c0023dfd:	51                   	push   ecx
c0023dfe:	52                   	push   edx
c0023dff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e05:	e8 20 ec ff ff       	call   c0022a2a <IDE::getBase(unsigned char)>
c0023e0a:	b9 00 01 00 00       	mov    ecx,0x100
c0023e0f:	89 c2                	mov    edx,eax
c0023e11:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023e15:	fc                   	cld    
c0023e16:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023e19:	83 c4 10             	add    esp,0x10
c0023e1c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023e24:	4e                   	dec    esi
c0023e25:	e9 3e ff ff ff       	jmp    c0023d68 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0023e2a:	31 ff                	xor    edi,edi
c0023e2c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023e31:	74 16                	je     c0023e49 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023e33:	50                   	push   eax
c0023e34:	50                   	push   eax
c0023e35:	31 c0                	xor    eax,eax
c0023e37:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023e3c:	0f 94 c0             	sete   al
c0023e3f:	50                   	push   eax
c0023e40:	53                   	push   ebx
c0023e41:	e8 ec fb ff ff       	call   c0023a32 <ATA::flush(bool)>
c0023e46:	83 c4 10             	add    esp,0x10
c0023e49:	83 c4 2c             	add    esp,0x2c
c0023e4c:	89 f8                	mov    eax,edi
c0023e4e:	5b                   	pop    ebx
c0023e4f:	5e                   	pop    esi
c0023e50:	5f                   	pop    edi
c0023e51:	5d                   	pop    ebp
c0023e52:	c3                   	ret    
c0023e53:	90                   	nop

c0023e54 <ATA::read(unsigned long long, int, void*)>:
c0023e54:	57                   	push   edi
c0023e55:	b8 04 00 00 00       	mov    eax,0x4
c0023e5a:	56                   	push   esi
c0023e5b:	53                   	push   ebx
c0023e5c:	83 ec 10             	sub    esp,0x10
c0023e5f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e63:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e67:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e6a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e72:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e78:	77 3b                	ja     c0023eb5 <ATA::read(unsigned long long, int, void*)+0x61>
c0023e7a:	b8 06 00 00 00       	mov    eax,0x6
c0023e7f:	85 d2                	test   edx,edx
c0023e81:	74 32                	je     c0023eb5 <ATA::read(unsigned long long, int, void*)+0x61>
c0023e83:	50                   	push   eax
c0023e84:	50                   	push   eax
c0023e85:	6a 00                	push   0x0
c0023e87:	52                   	push   edx
c0023e88:	53                   	push   ebx
c0023e89:	57                   	push   edi
c0023e8a:	56                   	push   esi
c0023e8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023e8f:	e8 38 fc ff ff       	call   c0023acc <ATA::access(unsigned long long, int, void*, bool)>
c0023e94:	83 c4 20             	add    esp,0x20
c0023e97:	85 c0                	test   eax,eax
c0023e99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e9d:	75 11                	jne    c0023eb0 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023e9f:	01 1d 68 20 03 c0    	add    DWORD PTR ds:0xc0032068,ebx
c0023ea5:	e8 ca ca fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0023eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023eae:	eb 05                	jmp    c0023eb5 <ATA::read(unsigned long long, int, void*)+0x61>
c0023eb0:	b8 01 00 00 00       	mov    eax,0x1
c0023eb5:	83 c4 10             	add    esp,0x10
c0023eb8:	5b                   	pop    ebx
c0023eb9:	5e                   	pop    esi
c0023eba:	5f                   	pop    edi
c0023ebb:	c3                   	ret    

c0023ebc <ATA::write(unsigned long long, int, void*)>:
c0023ebc:	57                   	push   edi
c0023ebd:	b8 04 00 00 00       	mov    eax,0x4
c0023ec2:	56                   	push   esi
c0023ec3:	53                   	push   ebx
c0023ec4:	83 ec 10             	sub    esp,0x10
c0023ec7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023ecb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023ecf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023ed2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023ed6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023eda:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023ee0:	77 3b                	ja     c0023f1d <ATA::write(unsigned long long, int, void*)+0x61>
c0023ee2:	b8 06 00 00 00       	mov    eax,0x6
c0023ee7:	85 d2                	test   edx,edx
c0023ee9:	74 32                	je     c0023f1d <ATA::write(unsigned long long, int, void*)+0x61>
c0023eeb:	50                   	push   eax
c0023eec:	50                   	push   eax
c0023eed:	6a 01                	push   0x1
c0023eef:	52                   	push   edx
c0023ef0:	53                   	push   ebx
c0023ef1:	57                   	push   edi
c0023ef2:	56                   	push   esi
c0023ef3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023ef7:	e8 d0 fb ff ff       	call   c0023acc <ATA::access(unsigned long long, int, void*, bool)>
c0023efc:	83 c4 20             	add    esp,0x20
c0023eff:	85 c0                	test   eax,eax
c0023f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f05:	75 11                	jne    c0023f18 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023f07:	01 1d 64 20 03 c0    	add    DWORD PTR ds:0xc0032064,ebx
c0023f0d:	e8 62 ca fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0023f12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f16:	eb 05                	jmp    c0023f1d <ATA::write(unsigned long long, int, void*)+0x61>
c0023f18:	b8 01 00 00 00       	mov    eax,0x1
c0023f1d:	83 c4 10             	add    esp,0x10
c0023f20:	5b                   	pop    ebx
c0023f21:	5e                   	pop    esi
c0023f22:	5f                   	pop    edi
c0023f23:	c3                   	ret    

c0023f24 <ATA::detectCHS()>:
c0023f24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023f28:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023f2e:	c1 e0 06             	shl    eax,0x6
c0023f31:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023f37:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023f41:	c7 44 24 04 d7 c6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c6d7
c0023f49:	e9 51 62 ff ff       	jmp    c001a19f <Krnl::panic(char const*)>

c0023f4e <ATA::open(int, int, void*)>:
c0023f4e:	53                   	push   ebx
c0023f4f:	83 ec 08             	sub    esp,0x8
c0023f52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f5e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023f64:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023f6a:	c1 e0 06             	shl    eax,0x6
c0023f6d:	01 d0                	add    eax,edx
c0023f6f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023f76:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023f7c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023f83:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023f8d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023f93:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0023f9a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023fa1:	75 0c                	jne    c0023faf <ATA::open(int, int, void*)+0x61>
c0023fa3:	83 ec 0c             	sub    esp,0xc
c0023fa6:	53                   	push   ebx
c0023fa7:	e8 78 ff ff ff       	call   c0023f24 <ATA::detectCHS()>
c0023fac:	83 c4 10             	add    esp,0x10
c0023faf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023fb5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023fbb:	c1 e0 06             	shl    eax,0x6
c0023fbe:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023fc5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023fcf:	d1 e8                	shr    eax,1
c0023fd1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023fd7:	6a 04                	push   0x4
c0023fd9:	6a 0c                	push   0xc
c0023fdb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fe2:	50                   	push   eax
c0023fe3:	52                   	push   edx
c0023fe4:	e8 53 ea ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fe9:	90                   	nop
c0023fea:	90                   	nop
c0023feb:	6a 00                	push   0x0
c0023fed:	6a 0c                	push   0xc
c0023fef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff6:	50                   	push   eax
c0023ff7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ffd:	e8 3a ea ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024002:	83 c4 14             	add    esp,0x14
c0024005:	53                   	push   ebx
c0024006:	e8 b7 03 ff ff       	call   c00143c2 <PhysicalDisk::startCache()>
c002400b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002400e:	e8 d1 24 ff ff       	call   c00164e4 <createPartitionsForDisk(PhysicalDisk*)>
c0024013:	31 c0                	xor    eax,eax
c0024015:	83 c4 18             	add    esp,0x18
c0024018:	5b                   	pop    ebx
c0024019:	c3                   	ret    

c002401a <ATAPI::write(unsigned long long, int, void*)>:
c002401a:	b8 03 00 00 00       	mov    eax,0x3
c002401f:	c3                   	ret    

c0024020 <ATAPI::close(int, int, void*)>:
c0024020:	83 ec 0c             	sub    esp,0xc
c0024023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024027:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002402d:	85 c0                	test   eax,eax
c002402f:	74 0c                	je     c002403d <ATAPI::close(int, int, void*)+0x1d>
c0024031:	83 ec 0c             	sub    esp,0xc
c0024034:	8b 10                	mov    edx,DWORD PTR [eax]
c0024036:	50                   	push   eax
c0024037:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002403a:	83 c4 10             	add    esp,0x10
c002403d:	31 c0                	xor    eax,eax
c002403f:	83 c4 0c             	add    esp,0xc
c0024042:	c3                   	ret    
c0024043:	90                   	nop

c0024044 <ATAPI::ATAPI()>:
c0024044:	83 ec 0c             	sub    esp,0xc
c0024047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002404b:	83 ec 04             	sub    esp,0x4
c002404e:	68 00 08 00 00       	push   0x800
c0024053:	68 11 c8 02 c0       	push   0xc002c811
c0024058:	50                   	push   eax
c0024059:	e8 fc 02 ff ff       	call   c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002405e:	83 c4 10             	add    esp,0x10
c0024061:	ba 2c c7 02 c0       	mov    edx,0xc002c72c
c0024066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002406a:	89 10                	mov    DWORD PTR [eax],edx
c002406c:	90                   	nop
c002406d:	83 c4 0c             	add    esp,0xc
c0024070:	c3                   	ret    
c0024071:	90                   	nop

c0024072 <ATAPI::readyForCommand()>:
c0024072:	56                   	push   esi
c0024073:	53                   	push   ebx
c0024074:	31 db                	xor    ebx,ebx
c0024076:	50                   	push   eax
c0024077:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002407b:	50                   	push   eax
c002407c:	6a 0c                	push   0xc
c002407e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024085:	50                   	push   eax
c0024086:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002408c:	e8 6b ea ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0024091:	83 c4 10             	add    esp,0x10
c0024094:	a8 88                	test   al,0x88
c0024096:	74 23                	je     c00240bb <ATAPI::readyForCommand()+0x49>
c0024098:	43                   	inc    ebx
c0024099:	83 fb 63             	cmp    ebx,0x63
c002409c:	7e dd                	jle    c002407b <ATAPI::readyForCommand()+0x9>
c002409e:	51                   	push   ecx
c002409f:	51                   	push   ecx
c00240a0:	6a 00                	push   0x0
c00240a2:	68 40 42 0f 00       	push   0xf4240
c00240a7:	e8 d2 9c ff ff       	call   c001dd7e <nanoSleep(unsigned long long)>
c00240ac:	83 c4 10             	add    esp,0x10
c00240af:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240b5:	75 c4                	jne    c002407b <ATAPI::readyForCommand()+0x9>
c00240b7:	31 c0                	xor    eax,eax
c00240b9:	eb 02                	jmp    c00240bd <ATAPI::readyForCommand()+0x4b>
c00240bb:	b0 01                	mov    al,0x1
c00240bd:	5a                   	pop    edx
c00240be:	5b                   	pop    ebx
c00240bf:	5e                   	pop    esi
c00240c0:	c3                   	ret    
c00240c1:	90                   	nop

c00240c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00240c2:	55                   	push   ebp
c00240c3:	57                   	push   edi
c00240c4:	56                   	push   esi
c00240c5:	53                   	push   ebx
c00240c6:	83 ec 20             	sub    esp,0x20
c00240c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00240cd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00240d1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00240d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240d9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00240dd:	6a 01                	push   0x1
c00240df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00240e6:	50                   	push   eax
c00240e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00240ed:	e8 56 eb ff ff       	call   c0022c48 <IDE::enableIRQs(unsigned char, bool)>
c00240f2:	5e                   	pop    esi
c00240f3:	58                   	pop    eax
c00240f4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00240fb:	50                   	push   eax
c00240fc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024102:	e8 0f e9 ff ff       	call   c0022a16 <IDE::prepareInterrupt(unsigned char)>
c0024107:	89 3c 24             	mov    DWORD PTR [esp],edi
c002410a:	e8 63 ff ff ff       	call   c0024072 <ATAPI::readyForCommand()>
c002410f:	83 c4 10             	add    esp,0x10
c0024112:	84 c0                	test   al,al
c0024114:	75 0a                	jne    c0024120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024116:	bb 01 00 00 00       	mov    ebx,0x1
c002411b:	e9 57 02 00 00       	jmp    c0024377 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024120:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024126:	c1 e0 04             	shl    eax,0x4
c0024129:	0f b6 c0             	movzx  eax,al
c002412c:	50                   	push   eax
c002412d:	6a 06                	push   0x6
c002412f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024136:	50                   	push   eax
c0024137:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002413d:	e8 fa e8 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024142:	6a 00                	push   0x0
c0024144:	6a 01                	push   0x1
c0024146:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002414d:	50                   	push   eax
c002414e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024154:	e8 e3 e8 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024159:	83 c4 20             	add    esp,0x20
c002415c:	0f b6 c3             	movzx  eax,bl
c002415f:	0f b6 df             	movzx  ebx,bh
c0024162:	50                   	push   eax
c0024163:	6a 04                	push   0x4
c0024165:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002416c:	50                   	push   eax
c002416d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024173:	e8 c4 e8 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024178:	53                   	push   ebx
c0024179:	6a 05                	push   0x5
c002417b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024182:	50                   	push   eax
c0024183:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024189:	e8 ae e8 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002418e:	83 c4 20             	add    esp,0x20
c0024191:	68 a0 00 00 00       	push   0xa0
c0024196:	6a 07                	push   0x7
c0024198:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002419f:	50                   	push   eax
c00241a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241a6:	e8 91 e8 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ab:	83 c4 0c             	add    esp,0xc
c00241ae:	6a 01                	push   0x1
c00241b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00241b7:	50                   	push   eax
c00241b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241be:	e8 25 f4 ff ff       	call   c00235e8 <IDE::polling(unsigned char, unsigned int)>
c00241c3:	83 c4 10             	add    esp,0x10
c00241c6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00241cc:	84 c0                	test   al,al
c00241ce:	74 23                	je     c00241f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00241d0:	0f b6 d8             	movzx  ebx,al
c00241d3:	0f b6 d2             	movzx  edx,dl
c00241d6:	53                   	push   ebx
c00241d7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00241de:	50                   	push   eax
c00241df:	52                   	push   edx
c00241e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241e6:	e8 67 f2 ff ff       	call   c0023452 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00241eb:	83 c4 10             	add    esp,0x10
c00241ee:	e9 84 01 00 00       	jmp    c0024377 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00241f3:	0f b6 d2             	movzx  edx,dl
c00241f6:	53                   	push   ebx
c00241f7:	53                   	push   ebx
c00241f8:	52                   	push   edx
c00241f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241ff:	e8 26 e8 ff ff       	call   c0022a2a <IDE::getBase(unsigned char)>
c0024204:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024208:	b9 06 00 00 00       	mov    ecx,0x6
c002420d:	89 c2                	mov    edx,eax
c002420f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024212:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024216:	83 c4 10             	add    esp,0x10
c0024219:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002421f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024226:	85 db                	test   ebx,ebx
c0024228:	0f 84 ec 00 00 00    	je     c002431a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002422e:	51                   	push   ecx
c002422f:	51                   	push   ecx
c0024230:	52                   	push   edx
c0024231:	50                   	push   eax
c0024232:	e8 73 e9 ff ff       	call   c0022baa <IDE::waitInterrupt(unsigned char)>
c0024237:	83 c4 10             	add    esp,0x10
c002423a:	84 c0                	test   al,al
c002423c:	0f 84 d4 fe ff ff    	je     c0024116 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024242:	56                   	push   esi
c0024243:	56                   	push   esi
c0024244:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002424b:	50                   	push   eax
c002424c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024252:	e8 bf e7 ff ff       	call   c0022a16 <IDE::prepareInterrupt(unsigned char)>
c0024257:	83 c4 0c             	add    esp,0xc
c002425a:	6a 04                	push   0x4
c002425c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024263:	50                   	push   eax
c0024264:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002426a:	e8 8d e8 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c002426f:	83 c4 0c             	add    esp,0xc
c0024272:	89 c6                	mov    esi,eax
c0024274:	6a 05                	push   0x5
c0024276:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002427d:	50                   	push   eax
c002427e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024284:	e8 73 e8 ff ff       	call   c0022afc <IDE::read(unsigned char, unsigned char)>
c0024289:	89 f1                	mov    ecx,esi
c002428b:	0f b6 c0             	movzx  eax,al
c002428e:	0f b6 f1             	movzx  esi,cl
c0024291:	c1 e0 08             	shl    eax,0x8
c0024294:	09 c6                	or     esi,eax
c0024296:	d1 fe                	sar    esi,1
c0024298:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002429c:	83 c4 10             	add    esp,0x10
c002429f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00242a4:	74 41                	je     c00242e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00242a6:	31 c9                	xor    ecx,ecx
c00242a8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00242ae:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00242b5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00242b9:	75 0a                	jne    c00242c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00242bb:	01 c9                	add    ecx,ecx
c00242bd:	01 cd                	add    ebp,ecx
c00242bf:	4b                   	dec    ebx
c00242c0:	e9 54 ff ff ff       	jmp    c0024219 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00242c5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00242ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00242ce:	51                   	push   ecx
c00242cf:	51                   	push   ecx
c00242d0:	52                   	push   edx
c00242d1:	50                   	push   eax
c00242d2:	e8 53 e7 ff ff       	call   c0022a2a <IDE::getBase(unsigned char)>
c00242d7:	89 c2                	mov    edx,eax
c00242d9:	89 f0                	mov    eax,esi
c00242db:	66 ef                	out    dx,ax
c00242dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00242e1:	83 c4 10             	add    esp,0x10
c00242e4:	41                   	inc    ecx
c00242e5:	eb c1                	jmp    c00242a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00242e7:	31 f6                	xor    esi,esi
c00242e9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00242ef:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00242f6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00242fa:	75 06                	jne    c0024302 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00242fc:	01 f6                	add    esi,esi
c00242fe:	01 f5                	add    ebp,esi
c0024300:	eb bd                	jmp    c00242bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024302:	51                   	push   ecx
c0024303:	51                   	push   ecx
c0024304:	52                   	push   edx
c0024305:	50                   	push   eax
c0024306:	e8 1f e7 ff ff       	call   c0022a2a <IDE::getBase(unsigned char)>
c002430b:	89 c2                	mov    edx,eax
c002430d:	66 ed                	in     ax,dx
c002430f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024314:	83 c4 10             	add    esp,0x10
c0024317:	46                   	inc    esi
c0024318:	eb cf                	jmp    c00242e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002431a:	51                   	push   ecx
c002431b:	51                   	push   ecx
c002431c:	52                   	push   edx
c002431d:	50                   	push   eax
c002431e:	e8 87 e8 ff ff       	call   c0022baa <IDE::waitInterrupt(unsigned char)>
c0024323:	83 c4 10             	add    esp,0x10
c0024326:	84 c0                	test   al,al
c0024328:	0f 84 e8 fd ff ff    	je     c0024116 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002432e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024333:	52                   	push   edx
c0024334:	52                   	push   edx
c0024335:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002433c:	50                   	push   eax
c002433d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024343:	e8 ce e6 ff ff       	call   c0022a16 <IDE::prepareInterrupt(unsigned char)>
c0024348:	83 c4 10             	add    esp,0x10
c002434b:	50                   	push   eax
c002434c:	50                   	push   eax
c002434d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024354:	50                   	push   eax
c0024355:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002435b:	e8 ca e6 ff ff       	call   c0022a2a <IDE::getBase(unsigned char)>
c0024360:	8d 50 07             	lea    edx,[eax+0x7]
c0024363:	ec                   	in     al,dx
c0024364:	83 c4 10             	add    esp,0x10
c0024367:	a8 88                	test   al,0x88
c0024369:	74 0a                	je     c0024375 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002436b:	4b                   	dec    ebx
c002436c:	75 dd                	jne    c002434b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002436e:	bb 02 00 00 00       	mov    ebx,0x2
c0024373:	eb 02                	jmp    c0024377 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024375:	31 db                	xor    ebx,ebx
c0024377:	83 c4 1c             	add    esp,0x1c
c002437a:	89 d8                	mov    eax,ebx
c002437c:	5b                   	pop    ebx
c002437d:	5e                   	pop    esi
c002437e:	5f                   	pop    edi
c002437f:	5d                   	pop    ebp
c0024380:	c3                   	ret    
c0024381:	90                   	nop

c0024382 <ATAPI::diskRemoved()>:
c0024382:	83 ec 18             	sub    esp,0x18
c0024385:	68 1d c8 02 c0       	push   0xc002c81d
c002438a:	e8 80 e7 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002438f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024393:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002439a:	83 c4 1c             	add    esp,0x1c
c002439d:	c3                   	ret    

c002439e <ATAPI::eject()>:
c002439e:	57                   	push   edi
c002439f:	b9 03 00 00 00       	mov    ecx,0x3
c00243a4:	53                   	push   ebx
c00243a5:	83 ec 14             	sub    esp,0x14
c00243a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00243ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00243b0:	fc                   	cld    
c00243b1:	31 c0                	xor    eax,eax
c00243b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00243b5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00243ba:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00243bf:	50                   	push   eax
c00243c0:	50                   	push   eax
c00243c1:	6a 00                	push   0x0
c00243c3:	6a 00                	push   0x0
c00243c5:	6a 00                	push   0x0
c00243c7:	6a 02                	push   0x2
c00243c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00243cd:	50                   	push   eax
c00243ce:	53                   	push   ebx
c00243cf:	e8 ee fc ff ff       	call   c00240c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00243d4:	83 c4 14             	add    esp,0x14
c00243d7:	53                   	push   ebx
c00243d8:	e8 a5 ff ff ff       	call   c0024382 <ATAPI::diskRemoved()>
c00243dd:	83 c4 24             	add    esp,0x24
c00243e0:	31 c0                	xor    eax,eax
c00243e2:	5b                   	pop    ebx
c00243e3:	5f                   	pop    edi
c00243e4:	c3                   	ret    
c00243e5:	90                   	nop

c00243e6 <ATAPI::diskInserted()>:
c00243e6:	53                   	push   ebx
c00243e7:	83 ec 14             	sub    esp,0x14
c00243ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00243ee:	68 34 c8 02 c0       	push   0xc002c834
c00243f3:	e8 17 e7 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00243f8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00243ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024402:	e8 bb ff fe ff       	call   c00143c2 <PhysicalDisk::startCache()>
c0024407:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002440b:	83 c4 18             	add    esp,0x18
c002440e:	5b                   	pop    ebx
c002440f:	e9 d0 20 ff ff       	jmp    c00164e4 <createPartitionsForDisk(PhysicalDisk*)>

c0024414 <ATAPI::detectMedia()>:
c0024414:	56                   	push   esi
c0024415:	53                   	push   ebx
c0024416:	83 ec 28             	sub    esp,0x28
c0024419:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002441d:	6a 0c                	push   0xc
c002441f:	6a 00                	push   0x0
c0024421:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024425:	56                   	push   esi
c0024426:	e8 4d c3 fd ff       	call   c0000778 <memset>
c002442b:	58                   	pop    eax
c002442c:	5a                   	pop    edx
c002442d:	6a 00                	push   0x0
c002442f:	6a 00                	push   0x0
c0024431:	6a 00                	push   0x0
c0024433:	6a 00                	push   0x0
c0024435:	56                   	push   esi
c0024436:	53                   	push   ebx
c0024437:	e8 86 fc ff ff       	call   c00240c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002443c:	83 c4 1c             	add    esp,0x1c
c002443f:	6a 0c                	push   0xc
c0024441:	6a 00                	push   0x0
c0024443:	56                   	push   esi
c0024444:	e8 2f c3 fd ff       	call   c0000778 <memset>
c0024449:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002444e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024453:	59                   	pop    ecx
c0024454:	58                   	pop    eax
c0024455:	6a 01                	push   0x1
c0024457:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002445b:	50                   	push   eax
c002445c:	6a 00                	push   0x0
c002445e:	6a 12                	push   0x12
c0024460:	56                   	push   esi
c0024461:	53                   	push   ebx
c0024462:	e8 5b fc ff ff       	call   c00240c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024467:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002446b:	83 c4 20             	add    esp,0x20
c002446e:	83 e0 7f             	and    eax,0x7f
c0024471:	3c 70                	cmp    al,0x70
c0024473:	74 15                	je     c002448a <ATAPI::detectMedia()+0x76>
c0024475:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002447c:	75 0c                	jne    c002448a <ATAPI::detectMedia()+0x76>
c002447e:	83 ec 0c             	sub    esp,0xc
c0024481:	53                   	push   ebx
c0024482:	e8 5f ff ff ff       	call   c00243e6 <ATAPI::diskInserted()>
c0024487:	83 c4 10             	add    esp,0x10
c002448a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002448e:	83 e0 0f             	and    eax,0xf
c0024491:	3c 02                	cmp    al,0x2
c0024493:	75 1b                	jne    c00244b0 <ATAPI::detectMedia()+0x9c>
c0024495:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002449a:	75 2d                	jne    c00244c9 <ATAPI::detectMedia()+0xb5>
c002449c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00244a3:	74 24                	je     c00244c9 <ATAPI::detectMedia()+0xb5>
c00244a5:	83 ec 0c             	sub    esp,0xc
c00244a8:	53                   	push   ebx
c00244a9:	e8 d4 fe ff ff       	call   c0024382 <ATAPI::diskRemoved()>
c00244ae:	eb 16                	jmp    c00244c6 <ATAPI::detectMedia()+0xb2>
c00244b0:	84 c0                	test   al,al
c00244b2:	75 15                	jne    c00244c9 <ATAPI::detectMedia()+0xb5>
c00244b4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00244bb:	75 0c                	jne    c00244c9 <ATAPI::detectMedia()+0xb5>
c00244bd:	83 ec 0c             	sub    esp,0xc
c00244c0:	53                   	push   ebx
c00244c1:	e8 20 ff ff ff       	call   c00243e6 <ATAPI::diskInserted()>
c00244c6:	83 c4 10             	add    esp,0x10
c00244c9:	83 c4 24             	add    esp,0x24
c00244cc:	5b                   	pop    ebx
c00244cd:	5e                   	pop    esi
c00244ce:	c3                   	ret    
c00244cf:	90                   	nop

c00244d0 <ATAPI::open(int, int, void*)>:
c00244d0:	53                   	push   ebx
c00244d1:	83 ec 08             	sub    esp,0x8
c00244d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244e0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244e6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244ec:	c1 e0 06             	shl    eax,0x6
c00244ef:	01 d0                	add    eax,edx
c00244f1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00244f8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00244fe:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024505:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002450f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024515:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002451c:	6a 04                	push   0x4
c002451e:	6a 0c                	push   0xc
c0024520:	51                   	push   ecx
c0024521:	52                   	push   edx
c0024522:	e8 15 e5 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024527:	90                   	nop
c0024528:	90                   	nop
c0024529:	6a 00                	push   0x0
c002452b:	6a 0c                	push   0xc
c002452d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024534:	50                   	push   eax
c0024535:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002453b:	e8 fc e4 ff ff       	call   c0022a3c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024540:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024547:	83 c4 14             	add    esp,0x14
c002454a:	53                   	push   ebx
c002454b:	e8 c4 fe ff ff       	call   c0024414 <ATAPI::detectMedia()>
c0024550:	31 c0                	xor    eax,eax
c0024552:	83 c4 18             	add    esp,0x18
c0024555:	5b                   	pop    ebx
c0024556:	c3                   	ret    
c0024557:	90                   	nop

c0024558 <ATAPI::read(unsigned long long, int, void*)>:
c0024558:	55                   	push   ebp
c0024559:	57                   	push   edi
c002455a:	56                   	push   esi
c002455b:	53                   	push   ebx
c002455c:	83 ec 1c             	sub    esp,0x1c
c002455f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024563:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024567:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002456b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024572:	74 41                	je     c00245b5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024574:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024578:	b9 03 00 00 00       	mov    ecx,0x3
c002457d:	fc                   	cld    
c002457e:	31 c0                	xor    eax,eax
c0024580:	86 fb                	xchg   bl,bh
c0024582:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024584:	c1 c3 10             	rol    ebx,0x10
c0024587:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002458c:	89 e8                	mov    eax,ebp
c002458e:	86 fb                	xchg   bl,bh
c0024590:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024594:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024598:	50                   	push   eax
c0024599:	50                   	push   eax
c002459a:	55                   	push   ebp
c002459b:	c1 e5 0b             	shl    ebp,0xb
c002459e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00245a2:	6a 00                	push   0x0
c00245a4:	55                   	push   ebp
c00245a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00245a9:	50                   	push   eax
c00245aa:	56                   	push   esi
c00245ab:	e8 12 fb ff ff       	call   c00240c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245b0:	83 c4 20             	add    esp,0x20
c00245b3:	eb 1a                	jmp    c00245cf <ATAPI::read(unsigned long long, int, void*)+0x77>
c00245b5:	83 ec 0c             	sub    esp,0xc
c00245b8:	56                   	push   esi
c00245b9:	e8 56 fe ff ff       	call   c0024414 <ATAPI::detectMedia()>
c00245be:	83 c4 10             	add    esp,0x10
c00245c1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00245c8:	75 aa                	jne    c0024574 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00245ca:	b8 02 00 00 00       	mov    eax,0x2
c00245cf:	83 c4 1c             	add    esp,0x1c
c00245d2:	5b                   	pop    ebx
c00245d3:	5e                   	pop    esi
c00245d4:	5f                   	pop    edi
c00245d5:	5d                   	pop    ebp
c00245d6:	c3                   	ret    
c00245d7:	90                   	nop

c00245d8 <SATA::close(int, int, void*)>:
c00245d8:	83 ec 0c             	sub    esp,0xc
c00245db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245e5:	85 c0                	test   eax,eax
c00245e7:	74 0c                	je     c00245f5 <SATA::close(int, int, void*)+0x1d>
c00245e9:	83 ec 0c             	sub    esp,0xc
c00245ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00245ee:	50                   	push   eax
c00245ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245f2:	83 c4 10             	add    esp,0x10
c00245f5:	31 c0                	xor    eax,eax
c00245f7:	83 c4 0c             	add    esp,0xc
c00245fa:	c3                   	ret    
c00245fb:	90                   	nop

c00245fc <SATA::powerSaving(PowerSavingLevel)>:
c00245fc:	c3                   	ret    
c00245fd:	90                   	nop

c00245fe <SATA::open(int, int, void*)>:
c00245fe:	56                   	push   esi
c00245ff:	53                   	push   ebx
c0024600:	50                   	push   eax
c0024601:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024609:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024613:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024619:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024623:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024627:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024631:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024637:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002463e:	e8 9a b8 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024643:	89 c6                	mov    esi,eax
c0024645:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002464b:	81 c6 00 10 00 00    	add    esi,0x1000
c0024651:	e8 87 b8 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024656:	39 c6                	cmp    esi,eax
c0024658:	74 10                	je     c002466a <SATA::open(int, int, void*)+0x6c>
c002465a:	83 ec 0c             	sub    esp,0xc
c002465d:	68 5c c7 02 c0       	push   0xc002c75c
c0024662:	e8 38 5b ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0024667:	83 c4 10             	add    esp,0x10
c002466a:	83 ec 0c             	sub    esp,0xc
c002466d:	6a 02                	push   0x2
c002466f:	e8 ab d4 fe ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0024674:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002467a:	e8 30 d6 fe ff       	call   c0011caf <Virt::getAKernelVAS()>
c002467f:	6a 03                	push   0x3
c0024681:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024687:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002468d:	50                   	push   eax
c002468e:	e8 57 db fe ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0024693:	83 c4 14             	add    esp,0x14
c0024696:	53                   	push   ebx
c0024697:	e8 26 fd fe ff       	call   c00143c2 <PhysicalDisk::startCache()>
c002469c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002469f:	e8 40 1e ff ff       	call   c00164e4 <createPartitionsForDisk(PhysicalDisk*)>
c00246a4:	83 c4 14             	add    esp,0x14
c00246a7:	31 c0                	xor    eax,eax
c00246a9:	5b                   	pop    ebx
c00246aa:	5e                   	pop    esi
c00246ab:	c3                   	ret    

c00246ac <SATA::SATA()>:
c00246ac:	83 ec 0c             	sub    esp,0xc
c00246af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246b3:	83 ec 04             	sub    esp,0x4
c00246b6:	68 00 02 00 00       	push   0x200
c00246bb:	68 70 c7 02 c0       	push   0xc002c770
c00246c0:	50                   	push   eax
c00246c1:	e8 94 fc fe ff       	call   c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246c6:	83 c4 10             	add    esp,0x10
c00246c9:	ba e0 c7 02 c0       	mov    edx,0xc002c7e0
c00246ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d2:	89 10                	mov    DWORD PTR [eax],edx
c00246d4:	90                   	nop
c00246d5:	83 c4 0c             	add    esp,0xc
c00246d8:	c3                   	ret    
c00246d9:	90                   	nop

c00246da <SATA::access(unsigned long long, int, void*, bool)>:
c00246da:	55                   	push   ebp
c00246db:	57                   	push   edi
c00246dc:	56                   	push   esi
c00246dd:	53                   	push   ebx
c00246de:	83 ec 2c             	sub    esp,0x2c
c00246e1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00246e5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00246e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00246ed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00246f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00246f5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00246fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00246fe:	7e 10                	jle    c0024710 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024700:	83 ec 0c             	sub    esp,0xc
c0024703:	68 80 c7 02 c0       	push   0xc002c780
c0024708:	e8 92 5a ff ff       	call   c001a19f <Krnl::panic(char const*)>
c002470d:	83 c4 10             	add    esp,0x10
c0024710:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024716:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002471c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024726:	89 f0                	mov    eax,esi
c0024728:	c1 e0 07             	shl    eax,0x7
c002472b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002472f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024739:	53                   	push   ebx
c002473a:	8d 46 02             	lea    eax,[esi+0x2]
c002473d:	53                   	push   ebx
c002473e:	c1 e0 07             	shl    eax,0x7
c0024741:	bb 01 00 00 00       	mov    ebx,0x1
c0024746:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c002474a:	50                   	push   eax
c002474b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024751:	e8 aa ef ff ff       	call   c0023700 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024756:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002475a:	83 c4 10             	add    esp,0x10
c002475d:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024762:	0f 84 ce 01 00 00    	je     c0024936 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024768:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002476c:	c1 e0 09             	shl    eax,0x9
c002476f:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024774:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024778:	74 17                	je     c0024791 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c002477a:	51                   	push   ecx
c002477b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002477f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024783:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024789:	e8 b6 bf fd ff       	call   c0000744 <memcpy>
c002478e:	83 c4 10             	add    esp,0x10
c0024791:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024797:	8d 46 02             	lea    eax,[esi+0x2]
c002479a:	c1 e0 07             	shl    eax,0x7
c002479d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00247a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00247a3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00247a9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00247af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00247b3:	c1 e1 05             	shl    ecx,0x5
c00247b6:	01 c8                	add    eax,ecx
c00247b8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00247bc:	8a 18                	mov    bl,BYTE PTR [eax]
c00247be:	83 e1 01             	and    ecx,0x1
c00247c1:	83 e3 bf             	and    ebx,0xffffffbf
c00247c4:	c1 e1 06             	shl    ecx,0x6
c00247c7:	09 d9                	or     ecx,ebx
c00247c9:	88 08                	mov    BYTE PTR [eax],cl
c00247cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00247cd:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00247d3:	81 c9 05 00 01 00    	or     ecx,0x10005
c00247d9:	89 08                	mov    DWORD PTR [eax],ecx
c00247db:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00247e1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00247e7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00247ed:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00247f0:	52                   	push   edx
c00247f1:	68 90 00 00 00       	push   0x90
c00247f6:	6a 00                	push   0x0
c00247f8:	53                   	push   ebx
c00247f9:	e8 7a bf fd ff       	call   c0000778 <memset>
c00247fe:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024804:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024808:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002480e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024812:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024816:	83 c4 10             	add    esp,0x10
c0024819:	8d 48 ff             	lea    ecx,[eax-0x1]
c002481c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024822:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024828:	25 00 00 c0 ff       	and    eax,0xffc00000
c002482d:	09 c8                	or     eax,ecx
c002482f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024835:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024838:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002483f:	66 25 00 7f          	and    ax,0x7f00
c0024843:	66 0d 27 80          	or     ax,0x8027
c0024847:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c002484c:	66 89 03             	mov    WORD PTR [ebx],ax
c002484f:	19 c0                	sbb    eax,eax
c0024851:	83 e0 f0             	and    eax,0xfffffff0
c0024854:	83 c0 35             	add    eax,0x35
c0024857:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c002485a:	89 f8                	mov    eax,edi
c002485c:	c1 e8 10             	shr    eax,0x10
c002485f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024862:	89 f8                	mov    eax,edi
c0024864:	c1 e8 18             	shr    eax,0x18
c0024867:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002486a:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002486e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024875:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024878:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002487c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024880:	89 f3                	mov    ebx,esi
c0024882:	31 c0                	xor    eax,eax
c0024884:	c1 e3 07             	shl    ebx,0x7
c0024887:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c002488b:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024891:	80 e1 88             	and    cl,0x88
c0024894:	74 0a                	je     c00248a0 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024896:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002489b:	74 0a                	je     c00248a7 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c002489d:	40                   	inc    eax
c002489e:	eb eb                	jmp    c002488b <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c00248a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00248a5:	75 0a                	jne    c00248b1 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c00248a7:	83 ec 0c             	sub    esp,0xc
c00248aa:	68 b9 c7 02 c0       	push   0xc002c7b9
c00248af:	eb 56                	jmp    c0024907 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c00248b1:	b8 01 00 00 00       	mov    eax,0x1
c00248b6:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c00248ba:	c1 e6 07             	shl    esi,0x7
c00248bd:	d3 e0                	shl    eax,cl
c00248bf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00248c3:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00248c9:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c00248cf:	85 c8                	test   eax,ecx
c00248d1:	74 20                	je     c00248f3 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c00248d3:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c00248d9:	0f ba e1 1e          	bt     ecx,0x1e
c00248dd:	73 ea                	jae    c00248c9 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c00248df:	83 ec 0c             	sub    esp,0xc
c00248e2:	31 db                	xor    ebx,ebx
c00248e4:	68 c7 c7 02 c0       	push   0xc002c7c7
c00248e9:	e8 b1 58 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c00248ee:	83 c4 10             	add    esp,0x10
c00248f1:	eb 43                	jmp    c0024936 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00248f3:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c00248f9:	0f ba e0 1e          	bt     eax,0x1e
c00248fd:	73 17                	jae    c0024916 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c00248ff:	83 ec 0c             	sub    esp,0xc
c0024902:	68 c7 c7 02 c0       	push   0xc002c7c7
c0024907:	e8 93 58 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c002490c:	bb 01 00 00 00       	mov    ebx,0x1
c0024911:	83 c4 10             	add    esp,0x10
c0024914:	eb 20                	jmp    c0024936 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024916:	31 db                	xor    ebx,ebx
c0024918:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c002491d:	75 17                	jne    c0024936 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002491f:	50                   	push   eax
c0024920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024924:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c002492a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002492e:	e8 11 be fd ff       	call   c0000744 <memcpy>
c0024933:	83 c4 10             	add    esp,0x10
c0024936:	83 c4 2c             	add    esp,0x2c
c0024939:	89 d8                	mov    eax,ebx
c002493b:	5b                   	pop    ebx
c002493c:	5e                   	pop    esi
c002493d:	5f                   	pop    edi
c002493e:	5d                   	pop    ebp
c002493f:	c3                   	ret    

c0024940 <SATA::read(unsigned long long, int, void*)>:
c0024940:	57                   	push   edi
c0024941:	b8 04 00 00 00       	mov    eax,0x4
c0024946:	56                   	push   esi
c0024947:	53                   	push   ebx
c0024948:	83 ec 10             	sub    esp,0x10
c002494b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002494f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024953:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024956:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002495a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002495e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024964:	77 3b                	ja     c00249a1 <SATA::read(unsigned long long, int, void*)+0x61>
c0024966:	b8 06 00 00 00       	mov    eax,0x6
c002496b:	85 d2                	test   edx,edx
c002496d:	74 32                	je     c00249a1 <SATA::read(unsigned long long, int, void*)+0x61>
c002496f:	50                   	push   eax
c0024970:	50                   	push   eax
c0024971:	6a 00                	push   0x0
c0024973:	52                   	push   edx
c0024974:	53                   	push   ebx
c0024975:	57                   	push   edi
c0024976:	56                   	push   esi
c0024977:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002497b:	e8 5a fd ff ff       	call   c00246da <SATA::access(unsigned long long, int, void*, bool)>
c0024980:	83 c4 20             	add    esp,0x20
c0024983:	85 c0                	test   eax,eax
c0024985:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024989:	75 11                	jne    c002499c <SATA::read(unsigned long long, int, void*)+0x5c>
c002498b:	01 1d 68 20 03 c0    	add    DWORD PTR ds:0xc0032068,ebx
c0024991:	e8 de bf fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0024996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002499a:	eb 05                	jmp    c00249a1 <SATA::read(unsigned long long, int, void*)+0x61>
c002499c:	b8 01 00 00 00       	mov    eax,0x1
c00249a1:	83 c4 10             	add    esp,0x10
c00249a4:	5b                   	pop    ebx
c00249a5:	5e                   	pop    esi
c00249a6:	5f                   	pop    edi
c00249a7:	c3                   	ret    

c00249a8 <SATA::write(unsigned long long, int, void*)>:
c00249a8:	55                   	push   ebp
c00249a9:	b8 04 00 00 00       	mov    eax,0x4
c00249ae:	57                   	push   edi
c00249af:	56                   	push   esi
c00249b0:	53                   	push   ebx
c00249b1:	83 ec 1c             	sub    esp,0x1c
c00249b4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00249b8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00249bc:	8d 75 ff             	lea    esi,[ebp-0x1]
c00249bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00249c3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00249c7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00249cd:	77 56                	ja     c0024a25 <SATA::write(unsigned long long, int, void*)+0x7d>
c00249cf:	b8 06 00 00 00       	mov    eax,0x6
c00249d4:	85 ff                	test   edi,edi
c00249d6:	74 4d                	je     c0024a25 <SATA::write(unsigned long long, int, void*)+0x7d>
c00249d8:	89 ee                	mov    esi,ebp
c00249da:	c1 e6 09             	shl    esi,0x9
c00249dd:	01 fe                	add    esi,edi
c00249df:	89 c8                	mov    eax,ecx
c00249e1:	89 da                	mov    edx,ebx
c00249e3:	83 c0 01             	add    eax,0x1
c00249e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00249ea:	83 d2 00             	adc    edx,0x0
c00249ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00249f1:	50                   	push   eax
c00249f2:	50                   	push   eax
c00249f3:	6a 01                	push   0x1
c00249f5:	57                   	push   edi
c00249f6:	81 c7 00 02 00 00    	add    edi,0x200
c00249fc:	6a 01                	push   0x1
c00249fe:	53                   	push   ebx
c00249ff:	51                   	push   ecx
c0024a00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024a04:	e8 d1 fc ff ff       	call   c00246da <SATA::access(unsigned long long, int, void*, bool)>
c0024a09:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024a0d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024a11:	83 c4 20             	add    esp,0x20
c0024a14:	39 f7                	cmp    edi,esi
c0024a16:	75 c7                	jne    c00249df <SATA::write(unsigned long long, int, void*)+0x37>
c0024a18:	01 2d 64 20 03 c0    	add    DWORD PTR ds:0xc0032064,ebp
c0024a1e:	e8 51 bf fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0024a23:	31 c0                	xor    eax,eax
c0024a25:	83 c4 1c             	add    esp,0x1c
c0024a28:	5b                   	pop    ebx
c0024a29:	5e                   	pop    esi
c0024a2a:	5f                   	pop    edi
c0024a2b:	5d                   	pop    ebp
c0024a2c:	c3                   	ret    
c0024a2d:	90                   	nop

c0024a2e <SATAPI::write(unsigned long long, int, void*)>:
c0024a2e:	b8 03 00 00 00       	mov    eax,0x3
c0024a33:	c3                   	ret    

c0024a34 <SATAPI::close(int, int, void*)>:
c0024a34:	83 ec 0c             	sub    esp,0xc
c0024a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a41:	85 c0                	test   eax,eax
c0024a43:	74 0c                	je     c0024a51 <SATAPI::close(int, int, void*)+0x1d>
c0024a45:	83 ec 0c             	sub    esp,0xc
c0024a48:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a4a:	50                   	push   eax
c0024a4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a4e:	83 c4 10             	add    esp,0x10
c0024a51:	31 c0                	xor    eax,eax
c0024a53:	83 c4 0c             	add    esp,0xc
c0024a56:	c3                   	ret    
c0024a57:	90                   	nop

c0024a58 <SATAPI::SATAPI()>:
c0024a58:	83 ec 0c             	sub    esp,0xc
c0024a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a5f:	83 ec 04             	sub    esp,0x4
c0024a62:	68 00 08 00 00       	push   0x800
c0024a67:	68 10 c8 02 c0       	push   0xc002c810
c0024a6c:	50                   	push   eax
c0024a6d:	e8 e8 f8 fe ff       	call   c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a72:	83 c4 10             	add    esp,0x10
c0024a75:	ba bc c8 02 c0       	mov    edx,0xc002c8bc
c0024a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a7e:	89 10                	mov    DWORD PTR [eax],edx
c0024a80:	90                   	nop
c0024a81:	83 c4 0c             	add    esp,0xc
c0024a84:	c3                   	ret    
c0024a85:	90                   	nop

c0024a86 <SATAPI::diskRemoved()>:
c0024a86:	83 ec 18             	sub    esp,0x18
c0024a89:	68 1c c8 02 c0       	push   0xc002c81c
c0024a8e:	e8 7c e0 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0024a93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a97:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024a9e:	83 c4 1c             	add    esp,0x1c
c0024aa1:	c3                   	ret    

c0024aa2 <SATAPI::diskInserted()>:
c0024aa2:	53                   	push   ebx
c0024aa3:	83 ec 14             	sub    esp,0x14
c0024aa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024aaa:	68 33 c8 02 c0       	push   0xc002c833
c0024aaf:	e8 5b e0 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0024ab4:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024abb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024abe:	e8 ff f8 fe ff       	call   c00143c2 <PhysicalDisk::startCache()>
c0024ac3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024ac7:	83 c4 18             	add    esp,0x18
c0024aca:	5b                   	pop    ebx
c0024acb:	e9 14 1a ff ff       	jmp    c00164e4 <createPartitionsForDisk(PhysicalDisk*)>

c0024ad0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024ad0:	55                   	push   ebp
c0024ad1:	57                   	push   edi
c0024ad2:	56                   	push   esi
c0024ad3:	53                   	push   ebx
c0024ad4:	83 ec 24             	sub    esp,0x24
c0024ad7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024adb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024adf:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024ae5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ae9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024aed:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024af3:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024af6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024afc:	c1 e3 07             	shl    ebx,0x7
c0024aff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024b03:	89 f8                	mov    eax,edi
c0024b05:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024b09:	c1 e0 07             	shl    eax,0x7
c0024b0c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024b10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b14:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024b1e:	53                   	push   ebx
c0024b1f:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024b25:	e8 d6 eb ff ff       	call   c0023700 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024b2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024b2e:	83 c4 10             	add    esp,0x10
c0024b31:	b8 01 00 00 00       	mov    eax,0x1
c0024b36:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024b3b:	0f 84 8a 01 00 00    	je     c0024ccb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024b41:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024b47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024b49:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024b4f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024b55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024b59:	c1 e1 05             	shl    ecx,0x5
c0024b5c:	01 c8                	add    eax,ecx
c0024b5e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b60:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024b66:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0024b6e:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024b74:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024b7a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024b80:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024b83:	52                   	push   edx
c0024b84:	68 90 00 00 00       	push   0x90
c0024b89:	6a 00                	push   0x0
c0024b8b:	53                   	push   ebx
c0024b8c:	e8 e7 bb fd ff       	call   c0000778 <memset>
c0024b91:	83 c4 0c             	add    esp,0xc
c0024b94:	8d 43 40             	lea    eax,[ebx+0x40]
c0024b97:	6a 0c                	push   0xc
c0024b99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b9d:	50                   	push   eax
c0024b9e:	e8 a1 bb fd ff       	call   c0000744 <memcpy>
c0024ba3:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0024ba9:	89 ea                	mov    edx,ebp
c0024bab:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024bb1:	c1 ea 18             	shr    edx,0x18
c0024bb4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024bb8:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024bbb:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024bbe:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024bc2:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024bc8:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024bce:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024bd3:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0024bd7:	09 c8                	or     eax,ecx
c0024bd9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024bdd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024be3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024be6:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024bed:	66 25 00 7f          	and    ax,0x7f00
c0024bf1:	66 0d 27 80          	or     ax,0x8027
c0024bf5:	66 89 03             	mov    WORD PTR [ebx],ax
c0024bf8:	89 e8                	mov    eax,ebp
c0024bfa:	c1 e8 10             	shr    eax,0x10
c0024bfd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024c00:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024c04:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024c07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c0b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024c0e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024c12:	83 c4 10             	add    esp,0x10
c0024c15:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024c19:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024c1d:	31 c0                	xor    eax,eax
c0024c1f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024c25:	80 e1 88             	and    cl,0x88
c0024c28:	74 0a                	je     c0024c34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024c2a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c2f:	74 0a                	je     c0024c3b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024c31:	40                   	inc    eax
c0024c32:	eb eb                	jmp    c0024c1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024c34:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c39:	75 0f                	jne    c0024c4a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024c3b:	83 ec 0c             	sub    esp,0xc
c0024c3e:	68 b9 c7 02 c0       	push   0xc002c7b9
c0024c43:	e8 57 55 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0024c48:	eb 3a                	jmp    c0024c84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024c4a:	b8 01 00 00 00       	mov    eax,0x1
c0024c4f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024c53:	c1 e7 07             	shl    edi,0x7
c0024c56:	d3 e0                	shl    eax,cl
c0024c58:	03 3c 24             	add    edi,DWORD PTR [esp]
c0024c5b:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024c61:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024c67:	85 d0                	test   eax,edx
c0024c69:	74 23                	je     c0024c8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0024c6b:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024c71:	0f ba e2 1e          	bt     edx,0x1e
c0024c75:	73 ea                	jae    c0024c61 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0024c77:	83 ec 0c             	sub    esp,0xc
c0024c7a:	68 4b c8 02 c0       	push   0xc002c84b
c0024c7f:	e8 8b de fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0024c84:	83 c4 10             	add    esp,0x10
c0024c87:	b8 01 00 00 00       	mov    eax,0x1
c0024c8c:	eb 3d                	jmp    c0024ccb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024c8e:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024c94:	0f ba e0 1e          	bt     eax,0x1e
c0024c98:	73 0a                	jae    c0024ca4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0024c9a:	83 ec 0c             	sub    esp,0xc
c0024c9d:	68 5e c8 02 c0       	push   0xc002c85e
c0024ca2:	eb db                	jmp    c0024c7f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024ca4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0024ca9:	74 1e                	je     c0024cc9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024cab:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0024cb0:	74 17                	je     c0024cc9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024cb2:	50                   	push   eax
c0024cb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024cb7:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0024cbd:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024cc1:	e8 7e ba fd ff       	call   c0000744 <memcpy>
c0024cc6:	83 c4 10             	add    esp,0x10
c0024cc9:	31 c0                	xor    eax,eax
c0024ccb:	83 c4 1c             	add    esp,0x1c
c0024cce:	5b                   	pop    ebx
c0024ccf:	5e                   	pop    esi
c0024cd0:	5f                   	pop    edi
c0024cd1:	5d                   	pop    ebp
c0024cd2:	c3                   	ret    
c0024cd3:	90                   	nop

c0024cd4 <SATAPI::eject()>:
c0024cd4:	57                   	push   edi
c0024cd5:	b9 03 00 00 00       	mov    ecx,0x3
c0024cda:	53                   	push   ebx
c0024cdb:	83 ec 14             	sub    esp,0x14
c0024cde:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024ce2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ce6:	fc                   	cld    
c0024ce7:	31 c0                	xor    eax,eax
c0024ce9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ceb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024cf0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024cf5:	50                   	push   eax
c0024cf6:	6a 00                	push   0x0
c0024cf8:	6a 00                	push   0x0
c0024cfa:	6a 00                	push   0x0
c0024cfc:	6a 00                	push   0x0
c0024cfe:	6a 02                	push   0x2
c0024d00:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024d04:	50                   	push   eax
c0024d05:	53                   	push   ebx
c0024d06:	e8 c5 fd ff ff       	call   c0024ad0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024d0b:	83 c4 14             	add    esp,0x14
c0024d0e:	53                   	push   ebx
c0024d0f:	e8 72 fd ff ff       	call   c0024a86 <SATAPI::diskRemoved()>
c0024d14:	83 c4 24             	add    esp,0x24
c0024d17:	31 c0                	xor    eax,eax
c0024d19:	5b                   	pop    ebx
c0024d1a:	5f                   	pop    edi
c0024d1b:	c3                   	ret    

c0024d1c <SATAPI::detectMedia()>:
c0024d1c:	56                   	push   esi
c0024d1d:	53                   	push   ebx
c0024d1e:	83 ec 28             	sub    esp,0x28
c0024d21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d25:	6a 0c                	push   0xc
c0024d27:	6a 00                	push   0x0
c0024d29:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024d2d:	56                   	push   esi
c0024d2e:	e8 45 ba fd ff       	call   c0000778 <memset>
c0024d33:	83 c4 0c             	add    esp,0xc
c0024d36:	6a 00                	push   0x0
c0024d38:	6a 00                	push   0x0
c0024d3a:	6a 00                	push   0x0
c0024d3c:	6a 00                	push   0x0
c0024d3e:	6a 00                	push   0x0
c0024d40:	56                   	push   esi
c0024d41:	53                   	push   ebx
c0024d42:	e8 89 fd ff ff       	call   c0024ad0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024d47:	83 c4 1c             	add    esp,0x1c
c0024d4a:	6a 0c                	push   0xc
c0024d4c:	6a 00                	push   0x0
c0024d4e:	56                   	push   esi
c0024d4f:	e8 24 ba fd ff       	call   c0000778 <memset>
c0024d54:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024d59:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024d5e:	83 c4 0c             	add    esp,0xc
c0024d61:	6a 01                	push   0x1
c0024d63:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024d67:	50                   	push   eax
c0024d68:	6a 00                	push   0x0
c0024d6a:	6a 00                	push   0x0
c0024d6c:	6a 12                	push   0x12
c0024d6e:	56                   	push   esi
c0024d6f:	53                   	push   ebx
c0024d70:	e8 5b fd ff ff       	call   c0024ad0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024d75:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024d79:	83 c4 20             	add    esp,0x20
c0024d7c:	83 e0 7f             	and    eax,0x7f
c0024d7f:	3c 70                	cmp    al,0x70
c0024d81:	74 15                	je     c0024d98 <SATAPI::detectMedia()+0x7c>
c0024d83:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024d8a:	75 0c                	jne    c0024d98 <SATAPI::detectMedia()+0x7c>
c0024d8c:	83 ec 0c             	sub    esp,0xc
c0024d8f:	53                   	push   ebx
c0024d90:	e8 0d fd ff ff       	call   c0024aa2 <SATAPI::diskInserted()>
c0024d95:	83 c4 10             	add    esp,0x10
c0024d98:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024d9c:	83 e0 0f             	and    eax,0xf
c0024d9f:	3c 02                	cmp    al,0x2
c0024da1:	75 1b                	jne    c0024dbe <SATAPI::detectMedia()+0xa2>
c0024da3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024da8:	75 2d                	jne    c0024dd7 <SATAPI::detectMedia()+0xbb>
c0024daa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024db1:	74 24                	je     c0024dd7 <SATAPI::detectMedia()+0xbb>
c0024db3:	83 ec 0c             	sub    esp,0xc
c0024db6:	53                   	push   ebx
c0024db7:	e8 ca fc ff ff       	call   c0024a86 <SATAPI::diskRemoved()>
c0024dbc:	eb 16                	jmp    c0024dd4 <SATAPI::detectMedia()+0xb8>
c0024dbe:	84 c0                	test   al,al
c0024dc0:	75 15                	jne    c0024dd7 <SATAPI::detectMedia()+0xbb>
c0024dc2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024dc9:	75 0c                	jne    c0024dd7 <SATAPI::detectMedia()+0xbb>
c0024dcb:	83 ec 0c             	sub    esp,0xc
c0024dce:	53                   	push   ebx
c0024dcf:	e8 ce fc ff ff       	call   c0024aa2 <SATAPI::diskInserted()>
c0024dd4:	83 c4 10             	add    esp,0x10
c0024dd7:	83 c4 24             	add    esp,0x24
c0024dda:	5b                   	pop    ebx
c0024ddb:	5e                   	pop    esi
c0024ddc:	c3                   	ret    
c0024ddd:	90                   	nop

c0024dde <SATAPI::open(int, int, void*)>:
c0024dde:	56                   	push   esi
c0024ddf:	53                   	push   ebx
c0024de0:	50                   	push   eax
c0024de1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024de5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024de9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024df3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024df9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024e03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e07:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024e11:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024e17:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024e1e:	e8 ba b0 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024e23:	89 c6                	mov    esi,eax
c0024e25:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024e2b:	81 c6 00 10 00 00    	add    esi,0x1000
c0024e31:	e8 a7 b0 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024e36:	39 c6                	cmp    esi,eax
c0024e38:	74 10                	je     c0024e4a <SATAPI::open(int, int, void*)+0x6c>
c0024e3a:	83 ec 0c             	sub    esp,0xc
c0024e3d:	68 73 c8 02 c0       	push   0xc002c873
c0024e42:	e8 58 53 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0024e47:	83 c4 10             	add    esp,0x10
c0024e4a:	83 ec 0c             	sub    esp,0xc
c0024e4d:	6a 02                	push   0x2
c0024e4f:	e8 cb cc fe ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0024e54:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024e5a:	e8 50 ce fe ff       	call   c0011caf <Virt::getAKernelVAS()>
c0024e5f:	6a 03                	push   0x3
c0024e61:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024e67:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024e6d:	50                   	push   eax
c0024e6e:	e8 77 d3 fe ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0024e73:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024e7a:	83 c4 14             	add    esp,0x14
c0024e7d:	53                   	push   ebx
c0024e7e:	e8 99 fe ff ff       	call   c0024d1c <SATAPI::detectMedia()>
c0024e83:	83 c4 14             	add    esp,0x14
c0024e86:	31 c0                	xor    eax,eax
c0024e88:	5b                   	pop    ebx
c0024e89:	5e                   	pop    esi
c0024e8a:	c3                   	ret    
c0024e8b:	90                   	nop

c0024e8c <SATAPI::read(unsigned long long, int, void*)>:
c0024e8c:	55                   	push   ebp
c0024e8d:	57                   	push   edi
c0024e8e:	56                   	push   esi
c0024e8f:	53                   	push   ebx
c0024e90:	83 ec 1c             	sub    esp,0x1c
c0024e93:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024e97:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024e9f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024ea6:	74 19                	je     c0024ec1 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024ea8:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024ead:	7e 2e                	jle    c0024edd <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024eaf:	83 ec 0c             	sub    esp,0xc
c0024eb2:	68 89 c8 02 c0       	push   0xc002c889
c0024eb7:	e8 e3 52 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0024ebc:	83 c4 10             	add    esp,0x10
c0024ebf:	eb 1c                	jmp    c0024edd <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024ec1:	83 ec 0c             	sub    esp,0xc
c0024ec4:	55                   	push   ebp
c0024ec5:	e8 52 fe ff ff       	call   c0024d1c <SATAPI::detectMedia()>
c0024eca:	83 c4 10             	add    esp,0x10
c0024ecd:	b8 02 00 00 00       	mov    eax,0x2
c0024ed2:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024ed9:	75 cd                	jne    c0024ea8 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024edb:	eb 49                	jmp    c0024f26 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024edd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ee1:	b9 03 00 00 00       	mov    ecx,0x3
c0024ee6:	fc                   	cld    
c0024ee7:	31 c0                	xor    eax,eax
c0024ee9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024eeb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024ef0:	89 d8                	mov    eax,ebx
c0024ef2:	86 e0                	xchg   al,ah
c0024ef4:	c1 c0 10             	rol    eax,0x10
c0024ef7:	86 e0                	xchg   al,ah
c0024ef9:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024efd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024f01:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024f05:	50                   	push   eax
c0024f06:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024f0a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024f0e:	56                   	push   esi
c0024f0f:	53                   	push   ebx
c0024f10:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024f14:	c1 e0 0b             	shl    eax,0xb
c0024f17:	50                   	push   eax
c0024f18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024f1c:	50                   	push   eax
c0024f1d:	55                   	push   ebp
c0024f1e:	e8 ad fb ff ff       	call   c0024ad0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f23:	83 c4 20             	add    esp,0x20
c0024f26:	83 c4 1c             	add    esp,0x1c
c0024f29:	5b                   	pop    ebx
c0024f2a:	5e                   	pop    esi
c0024f2b:	5f                   	pop    edi
c0024f2c:	5d                   	pop    ebp
c0024f2d:	c3                   	ret    

c0024f2e <AVX::open(int, int, void*)>:
c0024f2e:	83 ec 0c             	sub    esp,0xc
c0024f31:	e8 42 11 00 00       	call   c0026078 <avxInit>
c0024f36:	b8 00 00 00 00       	mov    eax,0x0
c0024f3b:	83 c4 0c             	add    esp,0xc
c0024f3e:	c3                   	ret    
c0024f3f:	90                   	nop

c0024f40 <AVX::close(int, int, void*)>:
c0024f40:	83 ec 0c             	sub    esp,0xc
c0024f43:	e8 31 11 00 00       	call   c0026079 <avxClose>
c0024f48:	b8 00 00 00 00       	mov    eax,0x0
c0024f4d:	83 c4 0c             	add    esp,0xc
c0024f50:	c3                   	ret    
c0024f51:	90                   	nop

c0024f52 <AVX::available()>:
c0024f52:	83 ec 0c             	sub    esp,0xc
c0024f55:	e8 16 11 00 00       	call   c0026070 <avxDetect>
c0024f5a:	85 c0                	test   eax,eax
c0024f5c:	0f 95 c0             	setne  al
c0024f5f:	83 c4 0c             	add    esp,0xc
c0024f62:	c3                   	ret    
c0024f63:	90                   	nop

c0024f64 <AVX::save(void*)>:
c0024f64:	83 ec 0c             	sub    esp,0xc
c0024f67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f6b:	83 ec 0c             	sub    esp,0xc
c0024f6e:	50                   	push   eax
c0024f6f:	e8 02 11 00 00       	call   c0026076 <avxSave>
c0024f74:	83 c4 10             	add    esp,0x10
c0024f77:	90                   	nop
c0024f78:	83 c4 0c             	add    esp,0xc
c0024f7b:	c3                   	ret    

c0024f7c <AVX::load(void*)>:
c0024f7c:	83 ec 0c             	sub    esp,0xc
c0024f7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f83:	83 ec 0c             	sub    esp,0xc
c0024f86:	50                   	push   eax
c0024f87:	e8 eb 10 00 00       	call   c0026077 <avxLoad>
c0024f8c:	83 c4 10             	add    esp,0x10
c0024f8f:	90                   	nop
c0024f90:	83 c4 0c             	add    esp,0xc
c0024f93:	c3                   	ret    

c0024f94 <AVX::AVX()>:
c0024f94:	83 ec 0c             	sub    esp,0xc
c0024f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f9b:	83 ec 08             	sub    esp,0x8
c0024f9e:	68 ec c8 02 c0       	push   0xc002c8ec
c0024fa3:	50                   	push   eax
c0024fa4:	e8 8f f4 fe ff       	call   c0014438 <FPU::FPU(char const*)>
c0024fa9:	83 c4 10             	add    esp,0x10
c0024fac:	ba fc c8 02 c0       	mov    edx,0xc002c8fc
c0024fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb5:	89 10                	mov    DWORD PTR [eax],edx
c0024fb7:	90                   	nop
c0024fb8:	83 c4 0c             	add    esp,0xc
c0024fbb:	c3                   	ret    

c0024fbc <MMX::available()>:
c0024fbc:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0024fc1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024fc7:	83 e0 20             	and    eax,0x20
c0024fca:	84 c0                	test   al,al
c0024fcc:	0f 95 c0             	setne  al
c0024fcf:	c3                   	ret    

c0024fd0 <MMX::open(int, int, void*)>:
c0024fd0:	83 ec 0c             	sub    esp,0xc
c0024fd3:	e8 24 11 00 00       	call   c00260fc <x87Init>
c0024fd8:	b8 00 00 00 00       	mov    eax,0x0
c0024fdd:	83 c4 0c             	add    esp,0xc
c0024fe0:	c3                   	ret    
c0024fe1:	90                   	nop

c0024fe2 <MMX::close(int, int, void*)>:
c0024fe2:	83 ec 0c             	sub    esp,0xc
c0024fe5:	e8 2c 11 00 00       	call   c0026116 <x87Close>
c0024fea:	b8 00 00 00 00       	mov    eax,0x0
c0024fef:	83 c4 0c             	add    esp,0xc
c0024ff2:	c3                   	ret    
c0024ff3:	90                   	nop

c0024ff4 <MMX::save(void*)>:
c0024ff4:	83 ec 0c             	sub    esp,0xc
c0024ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ffb:	83 ec 0c             	sub    esp,0xc
c0024ffe:	50                   	push   eax
c0024fff:	e8 ed 10 00 00       	call   c00260f1 <x87Save>
c0025004:	83 c4 10             	add    esp,0x10
c0025007:	90                   	nop
c0025008:	83 c4 0c             	add    esp,0xc
c002500b:	c3                   	ret    

c002500c <MMX::load(void*)>:
c002500c:	83 ec 0c             	sub    esp,0xc
c002500f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025013:	83 ec 0c             	sub    esp,0xc
c0025016:	50                   	push   eax
c0025017:	e8 db 10 00 00       	call   c00260f7 <x87Load>
c002501c:	83 c4 10             	add    esp,0x10
c002501f:	90                   	nop
c0025020:	83 c4 0c             	add    esp,0xc
c0025023:	c3                   	ret    

c0025024 <MMX::MMX()>:
c0025024:	83 ec 0c             	sub    esp,0xc
c0025027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002502b:	83 ec 08             	sub    esp,0x8
c002502e:	68 2c c9 02 c0       	push   0xc002c92c
c0025033:	50                   	push   eax
c0025034:	e8 ff f3 fe ff       	call   c0014438 <FPU::FPU(char const*)>
c0025039:	83 c4 10             	add    esp,0x10
c002503c:	ba 3c c9 02 c0       	mov    edx,0xc002c93c
c0025041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025045:	89 10                	mov    DWORD PTR [eax],edx
c0025047:	90                   	nop
c0025048:	83 c4 0c             	add    esp,0xc
c002504b:	c3                   	ret    

c002504c <SSE::open(int, int, void*)>:
c002504c:	83 ec 0c             	sub    esp,0xc
c002504f:	e8 60 10 00 00       	call   c00260b4 <sseInit>
c0025054:	b8 00 00 00 00       	mov    eax,0x0
c0025059:	83 c4 0c             	add    esp,0xc
c002505c:	c3                   	ret    
c002505d:	90                   	nop

c002505e <SSE::close(int, int, void*)>:
c002505e:	83 ec 0c             	sub    esp,0xc
c0025061:	e8 5e 10 00 00       	call   c00260c4 <sseClose>
c0025066:	b8 00 00 00 00       	mov    eax,0x0
c002506b:	83 c4 0c             	add    esp,0xc
c002506e:	c3                   	ret    
c002506f:	90                   	nop

c0025070 <SSE::available()>:
c0025070:	83 ec 1c             	sub    esp,0x1c
c0025073:	e8 18 10 00 00       	call   c0026090 <absolutelyNoChanceInHell>
c0025078:	85 c0                	test   eax,eax
c002507a:	0f 95 c0             	setne  al
c002507d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025081:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025085:	83 c4 1c             	add    esp,0x1c
c0025088:	c3                   	ret    
c0025089:	90                   	nop

c002508a <SSE::save(void*)>:
c002508a:	83 ec 0c             	sub    esp,0xc
c002508d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025091:	83 ec 0c             	sub    esp,0xc
c0025094:	50                   	push   eax
c0025095:	e8 0e 10 00 00       	call   c00260a8 <sseSave>
c002509a:	83 c4 10             	add    esp,0x10
c002509d:	90                   	nop
c002509e:	83 c4 0c             	add    esp,0xc
c00250a1:	c3                   	ret    

c00250a2 <SSE::load(void*)>:
c00250a2:	83 ec 0c             	sub    esp,0xc
c00250a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250a9:	83 ec 0c             	sub    esp,0xc
c00250ac:	50                   	push   eax
c00250ad:	e8 fc 0f 00 00       	call   c00260ae <sseLoad>
c00250b2:	83 c4 10             	add    esp,0x10
c00250b5:	90                   	nop
c00250b6:	83 c4 0c             	add    esp,0xc
c00250b9:	c3                   	ret    

c00250ba <SSE::SSE()>:
c00250ba:	83 ec 0c             	sub    esp,0xc
c00250bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c1:	83 ec 08             	sub    esp,0x8
c00250c4:	68 6c c9 02 c0       	push   0xc002c96c
c00250c9:	50                   	push   eax
c00250ca:	e8 69 f3 fe ff       	call   c0014438 <FPU::FPU(char const*)>
c00250cf:	83 c4 10             	add    esp,0x10
c00250d2:	ba 7c c9 02 c0       	mov    edx,0xc002c97c
c00250d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250db:	89 10                	mov    DWORD PTR [eax],edx
c00250dd:	90                   	nop
c00250de:	83 c4 0c             	add    esp,0xc
c00250e1:	c3                   	ret    

c00250e2 <x87::open(int, int, void*)>:
c00250e2:	83 ec 0c             	sub    esp,0xc
c00250e5:	e8 12 10 00 00       	call   c00260fc <x87Init>
c00250ea:	b8 00 00 00 00       	mov    eax,0x0
c00250ef:	83 c4 0c             	add    esp,0xc
c00250f2:	c3                   	ret    
c00250f3:	90                   	nop

c00250f4 <x87::close(int, int, void*)>:
c00250f4:	83 ec 0c             	sub    esp,0xc
c00250f7:	e8 1a 10 00 00       	call   c0026116 <x87Close>
c00250fc:	b8 00 00 00 00       	mov    eax,0x0
c0025101:	83 c4 0c             	add    esp,0xc
c0025104:	c3                   	ret    
c0025105:	90                   	nop

c0025106 <x87::available()>:
c0025106:	83 ec 0c             	sub    esp,0xc
c0025109:	e8 c8 0f 00 00       	call   c00260d6 <x87Detect>
c002510e:	85 c0                	test   eax,eax
c0025110:	0f 95 c0             	setne  al
c0025113:	83 c4 0c             	add    esp,0xc
c0025116:	c3                   	ret    
c0025117:	90                   	nop

c0025118 <x87::save(void*)>:
c0025118:	83 ec 0c             	sub    esp,0xc
c002511b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002511f:	83 ec 0c             	sub    esp,0xc
c0025122:	50                   	push   eax
c0025123:	e8 c9 0f 00 00       	call   c00260f1 <x87Save>
c0025128:	83 c4 10             	add    esp,0x10
c002512b:	90                   	nop
c002512c:	83 c4 0c             	add    esp,0xc
c002512f:	c3                   	ret    

c0025130 <x87::load(void*)>:
c0025130:	83 ec 0c             	sub    esp,0xc
c0025133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025137:	83 ec 0c             	sub    esp,0xc
c002513a:	50                   	push   eax
c002513b:	e8 b7 0f 00 00       	call   c00260f7 <x87Load>
c0025140:	83 c4 10             	add    esp,0x10
c0025143:	90                   	nop
c0025144:	83 c4 0c             	add    esp,0xc
c0025147:	c3                   	ret    

c0025148 <x87::x87()>:
c0025148:	83 ec 0c             	sub    esp,0xc
c002514b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002514f:	83 ec 08             	sub    esp,0x8
c0025152:	68 ac c9 02 c0       	push   0xc002c9ac
c0025157:	50                   	push   eax
c0025158:	e8 db f2 fe ff       	call   c0014438 <FPU::FPU(char const*)>
c002515d:	83 c4 10             	add    esp,0x10
c0025160:	ba bc c9 02 c0       	mov    edx,0xc002c9bc
c0025165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025169:	89 10                	mov    DWORD PTR [eax],edx
c002516b:	90                   	nop
c002516c:	83 c4 0c             	add    esp,0xc
c002516f:	c3                   	ret    

c0025170 <APIC::disable()>:
c0025170:	90                   	nop
c0025171:	c3                   	ret    

c0025172 <APIC::close(int, int, void*)>:
c0025172:	55                   	push   ebp
c0025173:	89 e5                	mov    ebp,esp
c0025175:	83 ec 08             	sub    esp,0x8
c0025178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002517b:	8b 00                	mov    eax,DWORD PTR [eax]
c002517d:	83 c0 3c             	add    eax,0x3c
c0025180:	8b 00                	mov    eax,DWORD PTR [eax]
c0025182:	83 ec 0c             	sub    esp,0xc
c0025185:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025188:	ff d0                	call   eax
c002518a:	83 c4 10             	add    esp,0x10
c002518d:	b8 00 00 00 00       	mov    eax,0x0
c0025192:	c9                   	leave  
c0025193:	c3                   	ret    

c0025194 <IOAPIC::close(int, int, void*)>:
c0025194:	b8 00 00 00 00       	mov    eax,0x0
c0025199:	c3                   	ret    

c002519a <APIC::io_wait()>:
c002519a:	eb 00                	jmp    c002519c <APIC::io_wait()+0x2>
c002519c:	eb 00                	jmp    c002519e <APIC::io_wait()+0x4>
c002519e:	90                   	nop
c002519f:	c3                   	ret    

c00251a0 <APIC::getBase()>:
c00251a0:	55                   	push   ebp
c00251a1:	89 e5                	mov    ebp,esp
c00251a3:	83 ec 18             	sub    esp,0x18
c00251a6:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00251ab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00251b1:	83 e0 08             	and    eax,0x8
c00251b4:	84 c0                	test   al,al
c00251b6:	75 07                	jne    c00251bf <APIC::getBase()+0x1f>
c00251b8:	b8 00 00 00 00       	mov    eax,0x0
c00251bd:	eb 21                	jmp    c00251e0 <APIC::getBase()+0x40>
c00251bf:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c00251c4:	83 ec 08             	sub    esp,0x8
c00251c7:	6a 1b                	push   0x1b
c00251c9:	50                   	push   eax
c00251ca:	e8 19 9c fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00251cf:	83 c4 10             	add    esp,0x10
c00251d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00251d5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00251d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00251db:	25 00 f0 ff ff       	and    eax,0xfffff000
c00251e0:	c9                   	leave  
c00251e1:	c3                   	ret    

c00251e2 <APIC::eoi(unsigned char)>:
c00251e2:	55                   	push   ebp
c00251e3:	89 e5                	mov    ebp,esp
c00251e5:	83 ec 28             	sub    esp,0x28
c00251e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00251eb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00251ee:	83 ec 0c             	sub    esp,0xc
c00251f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00251f4:	e8 a7 ff ff ff       	call   c00251a0 <APIC::getBase()>
c00251f9:	83 c4 10             	add    esp,0x10
c00251fc:	05 b0 00 00 00       	add    eax,0xb0
c0025201:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025204:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025207:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002520d:	90                   	nop
c002520e:	c9                   	leave  
c002520f:	c3                   	ret    

c0025210 <APIC::open(int, int, void*)>:
c0025210:	55                   	push   ebp
c0025211:	89 e5                	mov    ebp,esp
c0025213:	57                   	push   edi
c0025214:	56                   	push   esi
c0025215:	53                   	push   ebx
c0025216:	83 ec 2c             	sub    esp,0x2c
c0025219:	83 ec 0c             	sub    esp,0xc
c002521c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002521f:	e8 7c ff ff ff       	call   c00251a0 <APIC::getBase()>
c0025224:	83 c4 10             	add    esp,0x10
c0025227:	89 c2                	mov    edx,eax
c0025229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002522c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025232:	0f b6 f8             	movzx  edi,al
c0025235:	89 d0                	mov    eax,edx
c0025237:	ba 00 00 00 00       	mov    edx,0x0
c002523c:	89 c1                	mov    ecx,eax
c002523e:	80 e5 ff             	and    ch,0xff
c0025241:	89 cb                	mov    ebx,ecx
c0025243:	0f b6 f2             	movzx  esi,dl
c0025246:	89 d8                	mov    eax,ebx
c0025248:	89 f2                	mov    edx,esi
c002524a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002524d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025250:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025254:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025258:	83 e0 00             	and    eax,0x0
c002525b:	09 d0                	or     eax,edx
c002525d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025264:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002526a:	8d 50 01             	lea    edx,[eax+0x1]
c002526d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025270:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025276:	0f b6 d0             	movzx  edx,al
c0025279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002527c:	83 c2 08             	add    edx,0x8
c002527f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025283:	0f b6 c9             	movzx  ecx,cl
c0025286:	81 c9 00 00 01 00    	or     ecx,0x10000
c002528c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025290:	83 ec 0c             	sub    esp,0xc
c0025293:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025296:	e8 05 ff ff ff       	call   c00251a0 <APIC::getBase()>
c002529b:	83 c4 10             	add    esp,0x10
c002529e:	05 f0 00 00 00       	add    eax,0xf0
c00252a3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00252a6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00252a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00252ab:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00252ae:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00252b5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00252bc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00252bf:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00252c2:	89 10                	mov    DWORD PTR [eax],edx
c00252c4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00252cb:	a1 f0 05 03 c0       	mov    eax,ds:0xc00305f0
c00252d0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00252d3:	7d 7c                	jge    c0025351 <APIC::open(int, int, void*)+0x141>
c00252d5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00252d8:	8b 04 85 00 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa00]
c00252df:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00252e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00252e5:	8b 04 85 00 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa00]
c00252ec:	c1 e8 08             	shr    eax,0x8
c00252ef:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00252f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00252f6:	8b 04 85 00 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa00]
c00252fd:	c1 e8 18             	shr    eax,0x18
c0025300:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025303:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025307:	75 40                	jne    c0025349 <APIC::open(int, int, void*)+0x139>
c0025309:	83 ec 0c             	sub    esp,0xc
c002530c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002530f:	e8 8c fe ff ff       	call   c00251a0 <APIC::getBase()>
c0025314:	83 c4 10             	add    esp,0x10
c0025317:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002531b:	75 07                	jne    c0025324 <APIC::open(int, int, void*)+0x114>
c002531d:	ba 60 03 00 00       	mov    edx,0x360
c0025322:	eb 05                	jmp    c0025329 <APIC::open(int, int, void*)+0x119>
c0025324:	ba 50 03 00 00       	mov    edx,0x350
c0025329:	01 d0                	add    eax,edx
c002532b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002532e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025331:	8b 00                	mov    eax,DWORD PTR [eax]
c0025333:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025336:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002533d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025341:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025344:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025347:	89 10                	mov    DWORD PTR [eax],edx
c0025349:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002534c:	e9 7a ff ff ff       	jmp    c00252cb <APIC::open(int, int, void*)+0xbb>
c0025351:	b8 00 00 00 00       	mov    eax,0x0
c0025356:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025359:	5b                   	pop    ebx
c002535a:	5e                   	pop    esi
c002535b:	5f                   	pop    edi
c002535c:	5d                   	pop    ebp
c002535d:	c3                   	ret    

c002535e <IOAPIC::IOAPIC()>:
c002535e:	83 ec 0c             	sub    esp,0xc
c0025361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025365:	83 ec 08             	sub    esp,0x8
c0025368:	68 ec c9 02 c0       	push   0xc002c9ec
c002536d:	50                   	push   eax
c002536e:	e8 b3 ed fe ff       	call   c0014126 <Device::Device(char const*)>
c0025373:	83 c4 10             	add    esp,0x10
c0025376:	ba 14 cb 02 c0       	mov    edx,0xc002cb14
c002537b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537f:	89 10                	mov    DWORD PTR [eax],edx
c0025381:	90                   	nop
c0025382:	83 c4 0c             	add    esp,0xc
c0025385:	c3                   	ret    

c0025386 <APIC::APIC()>:
c0025386:	53                   	push   ebx
c0025387:	83 ec 18             	sub    esp,0x18
c002538a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002538e:	83 ec 08             	sub    esp,0x8
c0025391:	68 f4 c9 02 c0       	push   0xc002c9f4
c0025396:	50                   	push   eax
c0025397:	e8 f6 f4 fe ff       	call   c0014892 <InterruptController::InterruptController(char const*)>
c002539c:	83 c4 10             	add    esp,0x10
c002539f:	ba cc ca 02 c0       	mov    edx,0xc002cacc
c00253a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00253a8:	89 10                	mov    DWORD PTR [eax],edx
c00253aa:	a0 c0 20 03 c0       	mov    al,ds:0xc00320c0
c00253af:	83 f0 01             	xor    eax,0x1
c00253b2:	84 c0                	test   al,al
c00253b4:	0f 84 a1 00 00 00    	je     c002545b <APIC::APIC()+0xd5>
c00253ba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00253bf:	a0 a0 06 03 c0       	mov    al,ds:0xc00306a0
c00253c4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00253c8:	0f 83 86 00 00 00    	jae    c0025454 <APIC::APIC()+0xce>
c00253ce:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00253d6:	83 ec 0c             	sub    esp,0xc
c00253d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00253dd:	e8 5e a4 fe ff       	call   c000f840 <malloc>
c00253e2:	83 c4 10             	add    esp,0x10
c00253e5:	89 c3                	mov    ebx,eax
c00253e7:	83 ec 0c             	sub    esp,0xc
c00253ea:	53                   	push   ebx
c00253eb:	e8 6e ff ff ff       	call   c002535e <IOAPIC::IOAPIC()>
c00253f0:	83 c4 10             	add    esp,0x10
c00253f3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00253f7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00253fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025400:	89 14 85 a0 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdf60],edx
c0025407:	a1 80 20 03 c0       	mov    eax,ds:0xc0032080
c002540c:	40                   	inc    eax
c002540d:	a3 80 20 03 c0       	mov    ds:0xc0032080,eax
c0025412:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0025417:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002541d:	83 ec 08             	sub    esp,0x8
c0025420:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025424:	50                   	push   eax
c0025425:	e8 0c eb fe ff       	call   c0013f36 <Device::addChild(Device*)>
c002542a:	83 c4 10             	add    esp,0x10
c002542d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025431:	8b 00                	mov    eax,DWORD PTR [eax]
c0025433:	83 c0 08             	add    eax,0x8
c0025436:	8b 00                	mov    eax,DWORD PTR [eax]
c0025438:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002543d:	6a 00                	push   0x0
c002543f:	6a 00                	push   0x0
c0025441:	52                   	push   edx
c0025442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025446:	ff d0                	call   eax
c0025448:	83 c4 10             	add    esp,0x10
c002544b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002544f:	e9 6b ff ff ff       	jmp    c00253bf <APIC::APIC()+0x39>
c0025454:	c6 05 c0 20 03 c0 01 	mov    BYTE PTR ds:0xc00320c0,0x1
c002545b:	90                   	nop
c002545c:	83 c4 18             	add    esp,0x18
c002545f:	5b                   	pop    ebx
c0025460:	c3                   	ret    
c0025461:	90                   	nop

c0025462 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025462:	55                   	push   ebp
c0025463:	89 e5                	mov    ebp,esp
c0025465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025468:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002546e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025471:	72 1d                	jb     c0025490 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025476:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002547c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002547f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025485:	01 d0                	add    eax,edx
c0025487:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002548a:	73 04                	jae    c0025490 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002548c:	b0 01                	mov    al,0x1
c002548e:	eb 02                	jmp    c0025492 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025490:	b0 00                	mov    al,0x0
c0025492:	5d                   	pop    ebp
c0025493:	c3                   	ret    

c0025494 <IOAPIC::read(int)>:
c0025494:	55                   	push   ebp
c0025495:	89 e5                	mov    ebp,esp
c0025497:	83 ec 10             	sub    esp,0x10
c002549a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002549d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00254a3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00254a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254a9:	0f b6 d0             	movzx  edx,al
c00254ac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00254af:	89 10                	mov    DWORD PTR [eax],edx
c00254b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00254b4:	83 c0 10             	add    eax,0x10
c00254b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00254b9:	c9                   	leave  
c00254ba:	c3                   	ret    
c00254bb:	90                   	nop

c00254bc <IOAPIC::open(int, int, void*)>:
c00254bc:	55                   	push   ebp
c00254bd:	89 e5                	mov    ebp,esp
c00254bf:	57                   	push   edi
c00254c0:	56                   	push   esi
c00254c1:	53                   	push   ebx
c00254c2:	83 ec 0c             	sub    esp,0xc
c00254c5:	83 ec 0c             	sub    esp,0xc
c00254c8:	68 1f ca 02 c0       	push   0xc002ca1f
c00254cd:	e8 3d d6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00254d2:	83 c4 10             	add    esp,0x10
c00254d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00254db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00254e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254e4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00254ea:	8b 14 85 e0 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf920]
c00254f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00254fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025503:	8b 14 85 60 07 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf8a0]
c002550a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002550d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025516:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002551c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002551f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025525:	0f b6 f8             	movzx  edi,al
c0025528:	89 d0                	mov    eax,edx
c002552a:	ba 00 00 00 00       	mov    edx,0x0
c002552f:	89 c1                	mov    ecx,eax
c0025531:	80 e5 ff             	and    ch,0xff
c0025534:	89 cb                	mov    ebx,ecx
c0025536:	0f b6 f2             	movzx  esi,dl
c0025539:	89 d8                	mov    eax,ebx
c002553b:	89 f2                	mov    edx,esi
c002553d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025540:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025543:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025547:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002554b:	83 e0 00             	and    eax,0x0
c002554e:	09 d0                	or     eax,edx
c0025550:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025557:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002555d:	8d 50 01             	lea    edx,[eax+0x1]
c0025560:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025563:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025569:	0f b6 d0             	movzx  edx,al
c002556c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002556f:	83 c2 08             	add    edx,0x8
c0025572:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025576:	0f b6 c9             	movzx  ecx,cl
c0025579:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002557f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025583:	83 ec 08             	sub    esp,0x8
c0025586:	6a 01                	push   0x1
c0025588:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002558b:	e8 04 ff ff ff       	call   c0025494 <IOAPIC::read(int)>
c0025590:	83 c4 10             	add    esp,0x10
c0025593:	c1 f8 10             	sar    eax,0x10
c0025596:	0f b6 c0             	movzx  eax,al
c0025599:	8d 50 01             	lea    edx,[eax+0x1]
c002559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002559f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00255a5:	b8 00 00 00 00       	mov    eax,0x0
c00255aa:	8d 65 f4             	lea    esp,[ebp-0xc]
c00255ad:	5b                   	pop    ebx
c00255ae:	5e                   	pop    esi
c00255af:	5f                   	pop    edi
c00255b0:	5d                   	pop    ebp
c00255b1:	c3                   	ret    

c00255b2 <IOAPIC::write(int, int)>:
c00255b2:	55                   	push   ebp
c00255b3:	89 e5                	mov    ebp,esp
c00255b5:	83 ec 10             	sub    esp,0x10
c00255b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00255c1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00255c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255c7:	0f b6 d0             	movzx  edx,al
c00255ca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00255cd:	89 10                	mov    DWORD PTR [eax],edx
c00255cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00255d2:	8d 50 10             	lea    edx,[eax+0x10]
c00255d5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00255d8:	89 02                	mov    DWORD PTR [edx],eax
c00255da:	90                   	nop
c00255db:	c9                   	leave  
c00255dc:	c3                   	ret    
c00255dd:	90                   	nop

c00255de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00255de:	55                   	push   ebp
c00255df:	89 e5                	mov    ebp,esp
c00255e1:	53                   	push   ebx
c00255e2:	83 ec 2c             	sub    esp,0x2c
c00255e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255e8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00255eb:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00255ee:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00255f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00255f4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00255f7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00255fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00255fd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025600:	88 d8                	mov    al,bl
c0025602:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025605:	88 c8                	mov    al,cl
c0025607:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002560a:	88 d0                	mov    al,dl
c002560c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002560f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025613:	83 c0 08             	add    eax,0x8
c0025616:	01 c0                	add    eax,eax
c0025618:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002561b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002561f:	83 c0 08             	add    eax,0x8
c0025622:	01 c0                	add    eax,eax
c0025624:	40                   	inc    eax
c0025625:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025628:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002562b:	50                   	push   eax
c002562c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002562f:	e8 60 fe ff ff       	call   c0025494 <IOAPIC::read(int)>
c0025634:	83 c4 08             	add    esp,0x8
c0025637:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002563a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025641:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025644:	c1 e0 18             	shl    eax,0x18
c0025647:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002564a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002564d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025650:	52                   	push   edx
c0025651:	50                   	push   eax
c0025652:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025655:	e8 58 ff ff ff       	call   c00255b2 <IOAPIC::write(int, int)>
c002565a:	83 c4 0c             	add    esp,0xc
c002565d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025660:	50                   	push   eax
c0025661:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025664:	e8 2b fe ff ff       	call   c0025494 <IOAPIC::read(int)>
c0025669:	83 c4 08             	add    esp,0x8
c002566c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002566f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025676:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002567d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025684:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025688:	74 09                	je     c0025693 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002568a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025691:	eb 07                	jmp    c002569a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025693:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002569a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002569e:	74 09                	je     c00256a9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00256a0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00256a7:	eb 07                	jmp    c00256b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00256a9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00256b0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00256b7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00256bb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00256be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00256c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256c4:	52                   	push   edx
c00256c5:	50                   	push   eax
c00256c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256c9:	e8 e4 fe ff ff       	call   c00255b2 <IOAPIC::write(int, int)>
c00256ce:	83 c4 0c             	add    esp,0xc
c00256d1:	90                   	nop
c00256d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00256d5:	c9                   	leave  
c00256d6:	c3                   	ret    
c00256d7:	90                   	nop

c00256d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00256d8:	55                   	push   ebp
c00256d9:	89 e5                	mov    ebp,esp
c00256db:	57                   	push   edi
c00256dc:	56                   	push   esi
c00256dd:	53                   	push   ebx
c00256de:	83 ec 2c             	sub    esp,0x2c
c00256e1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00256e4:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00256e7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00256eb:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00256ef:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00256f3:	74 5a                	je     c002574f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00256f5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00256f9:	7f 44                	jg     c002573f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00256fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256fe:	05 60 cf 02 c0       	add    eax,0xc002cf60
c0025703:	8a 00                	mov    al,BYTE PTR [eax]
c0025705:	0f b6 c0             	movzx  eax,al
c0025708:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002570b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002570e:	66 8b 84 00 80 06 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf980]
c0025716:	0f b7 c0             	movzx  eax,ax
c0025719:	83 e0 02             	and    eax,0x2
c002571c:	85 c0                	test   eax,eax
c002571e:	74 04                	je     c0025724 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025720:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025724:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025727:	66 8b 84 00 80 06 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf980]
c002572f:	0f b7 c0             	movzx  eax,ax
c0025732:	83 e0 08             	and    eax,0x8
c0025735:	85 c0                	test   eax,eax
c0025737:	74 16                	je     c002574f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025739:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002573d:	eb 10                	jmp    c002574f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002573f:	83 ec 0c             	sub    esp,0xc
c0025742:	68 30 ca 02 c0       	push   0xc002ca30
c0025747:	e8 53 4a ff ff       	call   c001a19f <Krnl::panic(char const*)>
c002574c:	83 c4 10             	add    esp,0x10
c002574f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025753:	a1 80 20 03 c0       	mov    eax,ds:0xc0032080
c0025758:	83 ec 08             	sub    esp,0x8
c002575b:	50                   	push   eax
c002575c:	68 68 ca 02 c0       	push   0xc002ca68
c0025761:	e8 a9 d3 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0025766:	83 c4 10             	add    esp,0x10
c0025769:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025770:	a1 80 20 03 c0       	mov    eax,ds:0xc0032080
c0025775:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025778:	7d 67                	jge    c00257e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002577a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002577d:	8b 04 85 a0 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdf60]
c0025784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025787:	83 ec 08             	sub    esp,0x8
c002578a:	52                   	push   edx
c002578b:	50                   	push   eax
c002578c:	e8 d1 fc ff ff       	call   c0025462 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025791:	83 c4 10             	add    esp,0x10
c0025794:	84 c0                	test   al,al
c0025796:	74 44                	je     c00257dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025798:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002579b:	8b 1c 85 a0 20 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcdf60]
c00257a2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00257a6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00257a9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00257ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257b0:	83 c0 20             	add    eax,0x20
c00257b3:	0f b6 f0             	movzx  esi,al
c00257b6:	b8 00 00 00 00       	mov    eax,0x0
c00257bb:	99                   	cdq    
c00257bc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00257bf:	0f b6 c9             	movzx  ecx,cl
c00257c2:	83 ec 04             	sub    esp,0x4
c00257c5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00257c8:	57                   	push   edi
c00257c9:	56                   	push   esi
c00257ca:	52                   	push   edx
c00257cb:	50                   	push   eax
c00257cc:	51                   	push   ecx
c00257cd:	53                   	push   ebx
c00257ce:	e8 0b fe ff ff       	call   c00255de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00257d3:	83 c4 20             	add    esp,0x20
c00257d6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00257da:	eb 05                	jmp    c00257e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00257dc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00257df:	eb 8f                	jmp    c0025770 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00257e1:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00257e4:	83 f0 01             	xor    eax,0x1
c00257e7:	84 c0                	test   al,al
c00257e9:	74 10                	je     c00257fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00257eb:	83 ec 0c             	sub    esp,0xc
c00257ee:	68 7f ca 02 c0       	push   0xc002ca7f
c00257f3:	e8 a7 49 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c00257f8:	83 c4 10             	add    esp,0x10
c00257fb:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00257ff:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025806:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002580a:	7f 65                	jg     c0025871 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002580c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025812:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025819:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002581c:	01 ca                	add    edx,ecx
c002581e:	83 c2 54             	add    edx,0x54
c0025821:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025825:	85 c0                	test   eax,eax
c0025827:	75 43                	jne    c002586c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002582c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002582f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025836:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025839:	01 ca                	add    edx,ecx
c002583b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002583e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025841:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025848:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002584b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025852:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025855:	01 ca                	add    edx,ecx
c0025857:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002585d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025860:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025864:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025867:	83 e8 20             	sub    eax,0x20
c002586a:	eb 1a                	jmp    c0025886 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002586c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002586f:	eb 95                	jmp    c0025806 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025871:	83 ec 0c             	sub    esp,0xc
c0025874:	68 8c ca 02 c0       	push   0xc002ca8c
c0025879:	e8 21 49 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c002587e:	83 c4 10             	add    esp,0x10
c0025881:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025886:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025889:	5b                   	pop    ebx
c002588a:	5e                   	pop    esi
c002588b:	5f                   	pop    edi
c002588c:	5d                   	pop    ebp
c002588d:	c3                   	ret    

c002588e <PIC::disable()>:
c002588e:	55                   	push   ebp
c002588f:	89 e5                	mov    ebp,esp
c0025891:	83 ec 10             	sub    esp,0x10
c0025894:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002589a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002589e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00258a1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00258a5:	ee                   	out    dx,al
c00258a6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00258ac:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00258b0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00258b3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00258b7:	ee                   	out    dx,al
c00258b8:	90                   	nop
c00258b9:	c9                   	leave  
c00258ba:	c3                   	ret    
c00258bb:	90                   	nop

c00258bc <PIC::close(int, int, void*)>:
c00258bc:	55                   	push   ebp
c00258bd:	89 e5                	mov    ebp,esp
c00258bf:	83 ec 08             	sub    esp,0x8
c00258c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00258c7:	83 c0 3c             	add    eax,0x3c
c00258ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00258cc:	83 ec 0c             	sub    esp,0xc
c00258cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258d2:	ff d0                	call   eax
c00258d4:	83 c4 10             	add    esp,0x10
c00258d7:	b8 00 00 00 00       	mov    eax,0x0
c00258dc:	c9                   	leave  
c00258dd:	c3                   	ret    

c00258de <PIC::PIC()>:
c00258de:	83 ec 0c             	sub    esp,0xc
c00258e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e5:	83 ec 08             	sub    esp,0x8
c00258e8:	68 38 cb 02 c0       	push   0xc002cb38
c00258ed:	50                   	push   eax
c00258ee:	e8 9f ef fe ff       	call   c0014892 <InterruptController::InterruptController(char const*)>
c00258f3:	83 c4 10             	add    esp,0x10
c00258f6:	ba 64 cb 02 c0       	mov    edx,0xc002cb64
c00258fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ff:	89 10                	mov    DWORD PTR [eax],edx
c0025901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025905:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002590b:	0f b6 d0             	movzx  edx,al
c002590e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025912:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002591d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025923:	0f b6 d0             	movzx  edx,al
c0025926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002592a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002592f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025933:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025939:	8d 50 01             	lea    edx,[eax+0x1]
c002593c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025940:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025946:	0f b6 d0             	movzx  edx,al
c0025949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002594d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025951:	83 e1 3f             	and    ecx,0x3f
c0025954:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002595c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025962:	0f b6 d0             	movzx  edx,al
c0025965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025969:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025974:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002597a:	0f b6 d0             	movzx  edx,al
c002597d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025981:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002598a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025990:	8d 50 01             	lea    edx,[eax+0x1]
c0025993:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025997:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002599d:	0f b6 d0             	movzx  edx,al
c00259a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259a4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00259a8:	83 e1 3f             	and    ecx,0x3f
c00259ab:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00259af:	90                   	nop
c00259b0:	83 c4 0c             	add    esp,0xc
c00259b3:	c3                   	ret    

c00259b4 <PIC::ioWait()>:
c00259b4:	eb 00                	jmp    c00259b6 <PIC::ioWait()+0x2>
c00259b6:	eb 00                	jmp    c00259b8 <PIC::ioWait()+0x4>
c00259b8:	90                   	nop
c00259b9:	c3                   	ret    

c00259ba <PIC::getIRQReg(int)>:
c00259ba:	55                   	push   ebp
c00259bb:	89 e5                	mov    ebp,esp
c00259bd:	83 ec 10             	sub    esp,0x10
c00259c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259c3:	0f b6 c0             	movzx  eax,al
c00259c6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00259cc:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00259cf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00259d2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00259d6:	ee                   	out    dx,al
c00259d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259da:	0f b6 c0             	movzx  eax,al
c00259dd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00259e3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00259e6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00259e9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00259ed:	ee                   	out    dx,al
c00259ee:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00259f4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00259f8:	89 c2                	mov    edx,eax
c00259fa:	ec                   	in     al,dx
c00259fb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00259fe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025a01:	0f b6 c0             	movzx  eax,al
c0025a04:	c1 e0 08             	shl    eax,0x8
c0025a07:	89 c1                	mov    ecx,eax
c0025a09:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025a0f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025a13:	89 c2                	mov    edx,eax
c0025a15:	ec                   	in     al,dx
c0025a16:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025a19:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025a1c:	0f b6 c0             	movzx  eax,al
c0025a1f:	09 c8                	or     eax,ecx
c0025a21:	c9                   	leave  
c0025a22:	c3                   	ret    
c0025a23:	90                   	nop

c0025a24 <PIC::eoi(unsigned char)>:
c0025a24:	55                   	push   ebp
c0025a25:	89 e5                	mov    ebp,esp
c0025a27:	83 ec 14             	sub    esp,0x14
c0025a2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a2d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025a30:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025a34:	75 1e                	jne    c0025a54 <PIC::eoi(unsigned char)+0x30>
c0025a36:	6a 0b                	push   0xb
c0025a38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a3b:	e8 7a ff ff ff       	call   c00259ba <PIC::getIRQReg(int)>
c0025a40:	83 c4 08             	add    esp,0x8
c0025a43:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025a47:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025a4b:	25 80 00 00 00       	and    eax,0x80
c0025a50:	85 c0                	test   eax,eax
c0025a52:	74 5f                	je     c0025ab3 <PIC::eoi(unsigned char)+0x8f>
c0025a54:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025a58:	75 2d                	jne    c0025a87 <PIC::eoi(unsigned char)+0x63>
c0025a5a:	6a 0b                	push   0xb
c0025a5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a5f:	e8 56 ff ff ff       	call   c00259ba <PIC::getIRQReg(int)>
c0025a64:	83 c4 08             	add    esp,0x8
c0025a67:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025a6b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a6e:	66 85 c0             	test   ax,ax
c0025a71:	78 14                	js     c0025a87 <PIC::eoi(unsigned char)+0x63>
c0025a73:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025a79:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025a7d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025a80:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025a84:	ee                   	out    dx,al
c0025a85:	eb 2d                	jmp    c0025ab4 <PIC::eoi(unsigned char)+0x90>
c0025a87:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025a8b:	76 12                	jbe    c0025a9f <PIC::eoi(unsigned char)+0x7b>
c0025a8d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025a93:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025a97:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025a9a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025a9e:	ee                   	out    dx,al
c0025a9f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025aa5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025aa9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025aac:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ab0:	ee                   	out    dx,al
c0025ab1:	eb 01                	jmp    c0025ab4 <PIC::eoi(unsigned char)+0x90>
c0025ab3:	90                   	nop
c0025ab4:	c9                   	leave  
c0025ab5:	c3                   	ret    

c0025ab6 <PIC::remap()>:
c0025ab6:	55                   	push   ebp
c0025ab7:	89 e5                	mov    ebp,esp
c0025ab9:	83 ec 48             	sub    esp,0x48
c0025abc:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025ac3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025aca:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025ad0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025ad3:	89 c2                	mov    edx,eax
c0025ad5:	ec                   	in     al,dx
c0025ad6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025ad9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025adc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025adf:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025ae5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025ae8:	89 c2                	mov    edx,eax
c0025aea:	ec                   	in     al,dx
c0025aeb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025aee:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025af1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025af4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025afa:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025afe:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025b01:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025b04:	ee                   	out    dx,al
c0025b05:	83 ec 0c             	sub    esp,0xc
c0025b08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b0b:	e8 a4 fe ff ff       	call   c00259b4 <PIC::ioWait()>
c0025b10:	83 c4 10             	add    esp,0x10
c0025b13:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025b19:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025b1d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025b20:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025b23:	ee                   	out    dx,al
c0025b24:	83 ec 0c             	sub    esp,0xc
c0025b27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b2a:	e8 85 fe ff ff       	call   c00259b4 <PIC::ioWait()>
c0025b2f:	83 c4 10             	add    esp,0x10
c0025b32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025b35:	0f b6 c0             	movzx  eax,al
c0025b38:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025b3e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025b41:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025b44:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025b47:	ee                   	out    dx,al
c0025b48:	83 ec 0c             	sub    esp,0xc
c0025b4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b4e:	e8 61 fe ff ff       	call   c00259b4 <PIC::ioWait()>
c0025b53:	83 c4 10             	add    esp,0x10
c0025b56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b59:	0f b6 c0             	movzx  eax,al
c0025b5c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025b62:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025b65:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025b68:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025b6b:	ee                   	out    dx,al
c0025b6c:	83 ec 0c             	sub    esp,0xc
c0025b6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b72:	e8 3d fe ff ff       	call   c00259b4 <PIC::ioWait()>
c0025b77:	83 c4 10             	add    esp,0x10
c0025b7a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025b80:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025b84:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025b87:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025b8a:	ee                   	out    dx,al
c0025b8b:	83 ec 0c             	sub    esp,0xc
c0025b8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b91:	e8 1e fe ff ff       	call   c00259b4 <PIC::ioWait()>
c0025b96:	83 c4 10             	add    esp,0x10
c0025b99:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025b9f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025ba3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025ba6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ba9:	ee                   	out    dx,al
c0025baa:	83 ec 0c             	sub    esp,0xc
c0025bad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bb0:	e8 ff fd ff ff       	call   c00259b4 <PIC::ioWait()>
c0025bb5:	83 c4 10             	add    esp,0x10
c0025bb8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025bbe:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025bc2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025bc5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025bc8:	ee                   	out    dx,al
c0025bc9:	83 ec 0c             	sub    esp,0xc
c0025bcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bcf:	e8 e0 fd ff ff       	call   c00259b4 <PIC::ioWait()>
c0025bd4:	83 c4 10             	add    esp,0x10
c0025bd7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025bdd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025be1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025be4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025be7:	ee                   	out    dx,al
c0025be8:	83 ec 0c             	sub    esp,0xc
c0025beb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bee:	e8 c1 fd ff ff       	call   c00259b4 <PIC::ioWait()>
c0025bf3:	83 c4 10             	add    esp,0x10
c0025bf6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025bfa:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025c00:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025c03:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025c06:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c09:	ee                   	out    dx,al
c0025c0a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025c0e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025c14:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025c17:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025c1a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025c1d:	ee                   	out    dx,al
c0025c1e:	90                   	nop
c0025c1f:	c9                   	leave  
c0025c20:	c3                   	ret    
c0025c21:	90                   	nop

c0025c22 <PIC::open(int, int, void*)>:
c0025c22:	55                   	push   ebp
c0025c23:	89 e5                	mov    ebp,esp
c0025c25:	83 ec 18             	sub    esp,0x18
c0025c28:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025c2e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025c32:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025c35:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025c39:	ee                   	out    dx,al
c0025c3a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025c40:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025c44:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025c47:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025c4b:	ee                   	out    dx,al
c0025c4c:	83 ec 0c             	sub    esp,0xc
c0025c4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c52:	e8 5f fe ff ff       	call   c0025ab6 <PIC::remap()>
c0025c57:	83 c4 10             	add    esp,0x10
c0025c5a:	b8 00 00 00 00       	mov    eax,0x0
c0025c5f:	c9                   	leave  
c0025c60:	c3                   	ret    
c0025c61:	90                   	nop

c0025c62 <APICTimer::close(int, int, void*)>:
c0025c62:	b8 00 00 00 00       	mov    eax,0x0
c0025c67:	c3                   	ret    

c0025c68 <apicTimerHandler(regs*, void*)>:
c0025c68:	83 ec 0c             	sub    esp,0xc
c0025c6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c71:	99                   	cdq    
c0025c72:	52                   	push   edx
c0025c73:	50                   	push   eax
c0025c74:	6a 00                	push   0x0
c0025c76:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025c7b:	e8 8c 07 00 00       	call   c002640c <__udivdi3>
c0025c80:	83 c4 10             	add    esp,0x10
c0025c83:	83 ec 08             	sub    esp,0x8
c0025c86:	52                   	push   edx
c0025c87:	50                   	push   eax
c0025c88:	e8 fc 0b ff ff       	call   c0016889 <timerHandler(unsigned long long)>
c0025c8d:	83 c4 10             	add    esp,0x10
c0025c90:	90                   	nop
c0025c91:	83 c4 0c             	add    esp,0xc
c0025c94:	c3                   	ret    
c0025c95:	90                   	nop

c0025c96 <APICTimer::write(int)>:
c0025c96:	53                   	push   ebx
c0025c97:	83 ec 28             	sub    esp,0x28
c0025c9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025c9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025ca2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ca8:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0025cad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025cb3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025cb9:	83 ec 0c             	sub    esp,0xc
c0025cbc:	50                   	push   eax
c0025cbd:	e8 de f4 ff ff       	call   c00251a0 <APIC::getBase()>
c0025cc2:	83 c4 10             	add    esp,0x10
c0025cc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025cc9:	a1 90 e3 02 c0       	mov    eax,ds:0xc002e390
c0025cce:	8b 15 94 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e394
c0025cd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025cd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025cdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ce0:	05 e0 03 00 00       	add    eax,0x3e0
c0025ce5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025ceb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025cef:	05 80 03 00 00       	add    eax,0x380
c0025cf4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025cfa:	fb                   	sti    
c0025cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025d03:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025d08:	83 d2 00             	adc    edx,0x0
c0025d0b:	89 c1                	mov    ecx,eax
c0025d0d:	89 d3                	mov    ebx,edx
c0025d0f:	a1 90 e3 02 c0       	mov    eax,ds:0xc002e390
c0025d14:	8b 15 94 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e394
c0025d1a:	39 c8                	cmp    eax,ecx
c0025d1c:	89 d0                	mov    eax,edx
c0025d1e:	19 d8                	sbb    eax,ebx
c0025d20:	73 02                	jae    c0025d24 <APICTimer::write(int)+0x8e>
c0025d22:	eb d7                	jmp    c0025cfb <APICTimer::write(int)+0x65>
c0025d24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d28:	05 20 03 00 00       	add    eax,0x320
c0025d2d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025d33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d37:	05 90 03 00 00       	add    eax,0x390
c0025d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d3e:	f7 d0                	not    eax
c0025d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025d44:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025d4c:	ba 00 00 00 00       	mov    edx,0x0
c0025d51:	f7 f3                	div    ebx
c0025d53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025d57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025d5b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025d61:	0d 00 00 02 00       	or     eax,0x20000
c0025d66:	89 c2                	mov    edx,eax
c0025d68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d6c:	05 20 03 00 00       	add    eax,0x320
c0025d71:	89 10                	mov    DWORD PTR [eax],edx
c0025d73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d77:	05 e0 03 00 00       	add    eax,0x3e0
c0025d7c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d86:	05 80 03 00 00       	add    eax,0x380
c0025d8b:	89 c2                	mov    edx,eax
c0025d8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025d91:	89 02                	mov    DWORD PTR [edx],eax
c0025d93:	90                   	nop
c0025d94:	83 c4 28             	add    esp,0x28
c0025d97:	5b                   	pop    ebx
c0025d98:	c3                   	ret    
c0025d99:	90                   	nop

c0025d9a <APICTimer::open(int, int, void*)>:
c0025d9a:	57                   	push   edi
c0025d9b:	56                   	push   esi
c0025d9c:	53                   	push   ebx
c0025d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025da3:	83 c0 24             	add    eax,0x24
c0025da6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025da8:	83 ec 08             	sub    esp,0x8
c0025dab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025daf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025db3:	ff d0                	call   eax
c0025db5:	83 c4 10             	add    esp,0x10
c0025db8:	a1 08 dd 02 c0       	mov    eax,ds:0xc002dd08
c0025dbd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025dc3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025dc9:	83 ec 0c             	sub    esp,0xc
c0025dcc:	50                   	push   eax
c0025dcd:	e8 ce f3 ff ff       	call   c00251a0 <APIC::getBase()>
c0025dd2:	83 c4 10             	add    esp,0x10
c0025dd5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025de5:	0f b6 f8             	movzx  edi,al
c0025de8:	89 d0                	mov    eax,edx
c0025dea:	ba 00 00 00 00       	mov    edx,0x0
c0025def:	89 c1                	mov    ecx,eax
c0025df1:	80 e5 ff             	and    ch,0xff
c0025df4:	89 cb                	mov    ebx,ecx
c0025df6:	0f b6 f2             	movzx  esi,dl
c0025df9:	89 d8                	mov    eax,ebx
c0025dfb:	89 f2                	mov    edx,esi
c0025dfd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e01:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025e04:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025e08:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025e0c:	83 e0 00             	and    eax,0x0
c0025e0f:	09 d0                	or     eax,edx
c0025e11:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e19:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025e1f:	8d 50 01             	lea    edx,[eax+0x1]
c0025e22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e26:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025e2c:	0f b6 d0             	movzx  edx,al
c0025e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e33:	83 c2 08             	add    edx,0x8
c0025e36:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025e3a:	0f b6 c9             	movzx  ecx,cl
c0025e3d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025e43:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025e4f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025e5d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025e63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025e67:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025e6d:	83 ec 0c             	sub    esp,0xc
c0025e70:	51                   	push   ecx
c0025e71:	6a 01                	push   0x1
c0025e73:	68 68 5c 02 c0       	push   0xc0025c68
c0025e78:	52                   	push   edx
c0025e79:	50                   	push   eax
c0025e7a:	e8 3b e0 fe ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025e7f:	83 c4 20             	add    esp,0x20
c0025e82:	89 c2                	mov    edx,eax
c0025e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e88:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025e8e:	b8 00 00 00 00       	mov    eax,0x0
c0025e93:	5b                   	pop    ebx
c0025e94:	5e                   	pop    esi
c0025e95:	5f                   	pop    edi
c0025e96:	c3                   	ret    
c0025e97:	90                   	nop

c0025e98 <APICTimer::APICTimer()>:
c0025e98:	83 ec 0c             	sub    esp,0xc
c0025e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e9f:	83 ec 08             	sub    esp,0x8
c0025ea2:	68 a4 cb 02 c0       	push   0xc002cba4
c0025ea7:	50                   	push   eax
c0025ea8:	e8 4d 09 ff ff       	call   c00167fa <Timer::Timer(char const*)>
c0025ead:	83 c4 10             	add    esp,0x10
c0025eb0:	ba b8 cb 02 c0       	mov    edx,0xc002cbb8
c0025eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb9:	89 10                	mov    DWORD PTR [eax],edx
c0025ebb:	90                   	nop
c0025ebc:	83 c4 0c             	add    esp,0xc
c0025ebf:	c3                   	ret    

c0025ec0 <PIT::write(int)>:
c0025ec0:	83 ec 10             	sub    esp,0x10
c0025ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ec7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025ecb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ed1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025ed5:	a3 c4 20 03 c0       	mov    ds:0xc00320c4,eax
c0025eda:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025edf:	99                   	cdq    
c0025ee0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025ee4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025ee8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025eef:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025ef4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025ef8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025efd:	ee                   	out    dx,al
c0025efe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f02:	0f b6 c0             	movzx  eax,al
c0025f05:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025f0c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025f10:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025f14:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025f19:	ee                   	out    dx,al
c0025f1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f1e:	c1 f8 08             	sar    eax,0x8
c0025f21:	0f b6 c0             	movzx  eax,al
c0025f24:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025f2b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025f2f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025f33:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025f38:	ee                   	out    dx,al
c0025f39:	90                   	nop
c0025f3a:	83 c4 10             	add    esp,0x10
c0025f3d:	c3                   	ret    

c0025f3e <pitHandler(regs*, void*)>:
c0025f3e:	83 ec 0c             	sub    esp,0xc
c0025f41:	a1 c4 20 03 c0       	mov    eax,ds:0xc00320c4
c0025f46:	99                   	cdq    
c0025f47:	52                   	push   edx
c0025f48:	50                   	push   eax
c0025f49:	6a 00                	push   0x0
c0025f4b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f50:	e8 b7 04 00 00       	call   c002640c <__udivdi3>
c0025f55:	83 c4 10             	add    esp,0x10
c0025f58:	83 ec 08             	sub    esp,0x8
c0025f5b:	52                   	push   edx
c0025f5c:	50                   	push   eax
c0025f5d:	e8 27 09 ff ff       	call   c0016889 <timerHandler(unsigned long long)>
c0025f62:	83 c4 10             	add    esp,0x10
c0025f65:	90                   	nop
c0025f66:	83 c4 0c             	add    esp,0xc
c0025f69:	c3                   	ret    

c0025f6a <PIT::open(int, int, void*)>:
c0025f6a:	83 ec 0c             	sub    esp,0xc
c0025f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f73:	83 c0 24             	add    eax,0x24
c0025f76:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f78:	83 ec 08             	sub    esp,0x8
c0025f7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f83:	ff d0                	call   eax
c0025f85:	83 c4 10             	add    esp,0x10
c0025f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f8c:	83 ec 0c             	sub    esp,0xc
c0025f8f:	6a 00                	push   0x0
c0025f91:	6a 01                	push   0x1
c0025f93:	68 3e 5f 02 c0       	push   0xc0025f3e
c0025f98:	6a 00                	push   0x0
c0025f9a:	50                   	push   eax
c0025f9b:	e8 1a df fe ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025fa0:	83 c4 20             	add    esp,0x20
c0025fa3:	89 c2                	mov    edx,eax
c0025fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025faf:	b8 00 00 00 00       	mov    eax,0x0
c0025fb4:	83 c4 0c             	add    esp,0xc
c0025fb7:	c3                   	ret    

c0025fb8 <PIT::close(int, int, void*)>:
c0025fb8:	83 ec 0c             	sub    esp,0xc
c0025fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcd:	6a 01                	push   0x1
c0025fcf:	68 3e 5f 02 c0       	push   0xc0025f3e
c0025fd4:	6a 00                	push   0x0
c0025fd6:	50                   	push   eax
c0025fd7:	e8 1c df fe ff       	call   c0013ef8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025fdc:	83 c4 10             	add    esp,0x10
c0025fdf:	b8 00 00 00 00       	mov    eax,0x0
c0025fe4:	83 c4 0c             	add    esp,0xc
c0025fe7:	c3                   	ret    

c0025fe8 <PIT::PIT()>:
c0025fe8:	83 ec 0c             	sub    esp,0xc
c0025feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fef:	83 ec 08             	sub    esp,0x8
c0025ff2:	68 e0 cb 02 c0       	push   0xc002cbe0
c0025ff7:	50                   	push   eax
c0025ff8:	e8 fd 07 ff ff       	call   c00167fa <Timer::Timer(char const*)>
c0025ffd:	83 c4 10             	add    esp,0x10
c0026000:	ba 08 cc 02 c0       	mov    edx,0xc002cc08
c0026005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026009:	89 10                	mov    DWORD PTR [eax],edx
c002600b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026015:	0f b6 d0             	movzx  edx,al
c0026018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002601c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026027:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002602d:	0f b6 d0             	movzx  edx,al
c0026030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026034:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026043:	8d 50 01             	lea    edx,[eax+0x1]
c0026046:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002604a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026050:	0f b6 d0             	movzx  edx,al
c0026053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026057:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002605b:	83 e1 3f             	and    ecx,0x3f
c002605e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026062:	90                   	nop
c0026063:	83 c4 0c             	add    esp,0xc
c0026066:	c3                   	ret    
c0026067:	66 90                	xchg   ax,ax
c0026069:	66 90                	xchg   ax,ax
c002606b:	66 90                	xchg   ax,ax
c002606d:	66 90                	xchg   ax,ax
c002606f:	90                   	nop

c0026070 <avxDetect>:
c0026070:	b8 00 00 00 00       	mov    eax,0x0
c0026075:	c3                   	ret    

c0026076 <avxSave>:
c0026076:	c3                   	ret    

c0026077 <avxLoad>:
c0026077:	c3                   	ret    

c0026078 <avxInit>:
c0026078:	c3                   	ret    

c0026079 <avxClose>:
c0026079:	c3                   	ret    

c002607a <wouldSheSayYes>:
c002607a:	c3                   	ret    
c002607b:	49                   	dec    ecx
c002607c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026080:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026084:	75 20                	jne    c00260a6 <sseDetect.noSSE+0x1>
c0026086:	4e                   	dec    esi
c0026087:	79 61                	jns    c00260ea <x87Detect+0x14>
c0026089:	68 2e 2e 2e 00       	push   0x2e2e2e
c002608e:	66 90                	xchg   ax,ax

c0026090 <absolutelyNoChanceInHell>:
c0026090:	b8 01 00 00 00       	mov    eax,0x1
c0026095:	0f a2                	cpuid  
c0026097:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002609d:	74 06                	je     c00260a5 <sseDetect.noSSE>
c002609f:	b8 01 00 00 00       	mov    eax,0x1
c00260a4:	c3                   	ret    

c00260a5 <sseDetect.noSSE>:
c00260a5:	31 c0                	xor    eax,eax
c00260a7:	c3                   	ret    

c00260a8 <sseSave>:
c00260a8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00260ad:	c3                   	ret    

c00260ae <sseLoad>:
c00260ae:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00260b3:	c3                   	ret    

c00260b4 <sseInit>:
c00260b4:	e8 43 00 00 00       	call   c00260fc <x87Init>
c00260b9:	0f 20 e0             	mov    eax,cr4
c00260bc:	66 0d 00 06          	or     ax,0x600
c00260c0:	0f 22 e0             	mov    cr4,eax
c00260c3:	c3                   	ret    

c00260c4 <sseClose>:
c00260c4:	c3                   	ret    
c00260c5:	66 90                	xchg   ax,ax
c00260c7:	66 90                	xchg   ax,ax
c00260c9:	66 90                	xchg   ax,ax
c00260cb:	66 90                	xchg   ax,ax
c00260cd:	66 90                	xchg   ax,ax
c00260cf:	90                   	nop

c00260d0 <value_37F>:
c00260d0:	7f 03                	jg     c00260d5 <value_37A+0x1>

c00260d2 <value_37E>:
c00260d2:	7e 03                	jle    c00260d7 <x87Detect+0x1>

c00260d4 <value_37A>:
c00260d4:	7a 03                	jp     c00260d9 <x87Detect+0x3>

c00260d6 <x87Detect>:
c00260d6:	b8 01 00 00 00       	mov    eax,0x1
c00260db:	0f a2                	cpuid  
c00260dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00260e3:	74 06                	je     c00260eb <x87Detect.nox87>
c00260e5:	b8 01 00 00 00       	mov    eax,0x1
c00260ea:	c3                   	ret    

c00260eb <x87Detect.nox87>:
c00260eb:	b8 00 00 00 00       	mov    eax,0x0
c00260f0:	c3                   	ret    

c00260f1 <x87Save>:
c00260f1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00260f6:	c3                   	ret    

c00260f7 <x87Load>:
c00260f7:	dd 64 24 08          	frstor [esp+0x8]
c00260fb:	c3                   	ret    

c00260fc <x87Init>:
c00260fc:	9b db e3             	finit  
c00260ff:	0f 20 c0             	mov    eax,cr0
c0026102:	66 25 fb ff          	and    ax,0xfffb
c0026106:	66 0d 22 00          	or     ax,0x22
c002610a:	0f 22 c0             	mov    cr0,eax
c002610d:	0f 06                	clts   
c002610f:	d9 2d d4 60 02 c0    	fldcw  WORD PTR ds:0xc00260d4
c0026115:	c3                   	ret    

c0026116 <x87Close>:
c0026116:	c3                   	ret    
c0026117:	90                   	nop

c0026118 <__do_global_ctors_aux>:
c0026118:	a1 5c 8c 02 c0       	mov    eax,ds:0xc0028c5c
c002611d:	83 f8 ff             	cmp    eax,0xffffffff
c0026120:	74 1a                	je     c002613c <__do_global_ctors_aux+0x24>
c0026122:	55                   	push   ebp
c0026123:	89 e5                	mov    ebp,esp
c0026125:	53                   	push   ebx
c0026126:	52                   	push   edx
c0026127:	bb 5c 8c 02 c0       	mov    ebx,0xc0028c5c
c002612c:	ff d0                	call   eax
c002612e:	83 eb 04             	sub    ebx,0x4
c0026131:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026133:	83 f8 ff             	cmp    eax,0xffffffff
c0026136:	75 f4                	jne    c002612c <__do_global_ctors_aux+0x14>
c0026138:	58                   	pop    eax
c0026139:	5b                   	pop    ebx
c002613a:	5d                   	pop    ebp
c002613b:	c3                   	ret    
c002613c:	c3                   	ret    
c002613d:	66 90                	xchg   ax,ax
c002613f:	90                   	nop

c0026140 <__divdi3>:
c0026140:	55                   	push   ebp
c0026141:	57                   	push   edi
c0026142:	56                   	push   esi
c0026143:	53                   	push   ebx
c0026144:	83 ec 1c             	sub    esp,0x1c
c0026147:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002614b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002614f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026152:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026156:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002615a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002615e:	85 db                	test   ebx,ebx
c0026160:	0f 88 8e 00 00 00    	js     c00261f4 <__divdi3+0xb4>
c0026166:	89 dd                	mov    ebp,ebx
c0026168:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026170:	89 d3                	mov    ebx,edx
c0026172:	85 d2                	test   edx,edx
c0026174:	79 0d                	jns    c0026183 <__divdi3+0x43>
c0026176:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002617a:	f7 d8                	neg    eax
c002617c:	83 d2 00             	adc    edx,0x0
c002617f:	f7 da                	neg    edx
c0026181:	89 d3                	mov    ebx,edx
c0026183:	89 c7                	mov    edi,eax
c0026185:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026188:	85 db                	test   ebx,ebx
c002618a:	75 48                	jne    c00261d4 <__divdi3+0x94>
c002618c:	39 ef                	cmp    edi,ebp
c002618e:	76 24                	jbe    c00261b4 <__divdi3+0x74>
c0026190:	89 ea                	mov    edx,ebp
c0026192:	f7 f7                	div    edi
c0026194:	89 c1                	mov    ecx,eax
c0026196:	31 f6                	xor    esi,esi
c0026198:	89 c8                	mov    eax,ecx
c002619a:	89 f2                	mov    edx,esi
c002619c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00261a0:	85 c9                	test   ecx,ecx
c00261a2:	74 07                	je     c00261ab <__divdi3+0x6b>
c00261a4:	f7 d8                	neg    eax
c00261a6:	83 d2 00             	adc    edx,0x0
c00261a9:	f7 da                	neg    edx
c00261ab:	83 c4 1c             	add    esp,0x1c
c00261ae:	5b                   	pop    ebx
c00261af:	5e                   	pop    esi
c00261b0:	5f                   	pop    edi
c00261b1:	5d                   	pop    ebp
c00261b2:	c3                   	ret    
c00261b3:	90                   	nop
c00261b4:	85 ff                	test   edi,edi
c00261b6:	75 0b                	jne    c00261c3 <__divdi3+0x83>
c00261b8:	b8 01 00 00 00       	mov    eax,0x1
c00261bd:	31 d2                	xor    edx,edx
c00261bf:	f7 f3                	div    ebx
c00261c1:	89 c7                	mov    edi,eax
c00261c3:	31 d2                	xor    edx,edx
c00261c5:	89 e8                	mov    eax,ebp
c00261c7:	f7 f7                	div    edi
c00261c9:	89 c6                	mov    esi,eax
c00261cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00261ce:	f7 f7                	div    edi
c00261d0:	89 c1                	mov    ecx,eax
c00261d2:	eb c4                	jmp    c0026198 <__divdi3+0x58>
c00261d4:	39 eb                	cmp    ebx,ebp
c00261d6:	77 3c                	ja     c0026214 <__divdi3+0xd4>
c00261d8:	0f bd f3             	bsr    esi,ebx
c00261db:	83 f6 1f             	xor    esi,0x1f
c00261de:	75 40                	jne    c0026220 <__divdi3+0xe0>
c00261e0:	39 eb                	cmp    ebx,ebp
c00261e2:	72 09                	jb     c00261ed <__divdi3+0xad>
c00261e4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00261e7:	0f 87 97 00 00 00    	ja     c0026284 <__divdi3+0x144>
c00261ed:	b9 01 00 00 00       	mov    ecx,0x1
c00261f2:	eb a4                	jmp    c0026198 <__divdi3+0x58>
c00261f4:	f7 d9                	neg    ecx
c00261f6:	83 d3 00             	adc    ebx,0x0
c00261f9:	f7 db                	neg    ebx
c00261fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00261fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026202:	89 dd                	mov    ebp,ebx
c0026204:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002620c:	e9 5f ff ff ff       	jmp    c0026170 <__divdi3+0x30>
c0026211:	8d 76 00             	lea    esi,[esi+0x0]
c0026214:	31 f6                	xor    esi,esi
c0026216:	31 c9                	xor    ecx,ecx
c0026218:	e9 7b ff ff ff       	jmp    c0026198 <__divdi3+0x58>
c002621d:	8d 76 00             	lea    esi,[esi+0x0]
c0026220:	b8 20 00 00 00       	mov    eax,0x20
c0026225:	29 f0                	sub    eax,esi
c0026227:	89 f1                	mov    ecx,esi
c0026229:	d3 e3                	shl    ebx,cl
c002622b:	89 fa                	mov    edx,edi
c002622d:	88 c1                	mov    cl,al
c002622f:	d3 ea                	shr    edx,cl
c0026231:	09 da                	or     edx,ebx
c0026233:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026237:	89 f1                	mov    ecx,esi
c0026239:	d3 e7                	shl    edi,cl
c002623b:	89 eb                	mov    ebx,ebp
c002623d:	88 c1                	mov    cl,al
c002623f:	d3 eb                	shr    ebx,cl
c0026241:	89 f1                	mov    ecx,esi
c0026243:	d3 e5                	shl    ebp,cl
c0026245:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026248:	88 c1                	mov    cl,al
c002624a:	d3 ea                	shr    edx,cl
c002624c:	09 d5                	or     ebp,edx
c002624e:	89 e8                	mov    eax,ebp
c0026250:	89 da                	mov    edx,ebx
c0026252:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026256:	89 d3                	mov    ebx,edx
c0026258:	89 c5                	mov    ebp,eax
c002625a:	f7 e7                	mul    edi
c002625c:	39 d3                	cmp    ebx,edx
c002625e:	72 18                	jb     c0026278 <__divdi3+0x138>
c0026260:	74 0a                	je     c002626c <__divdi3+0x12c>
c0026262:	89 e9                	mov    ecx,ebp
c0026264:	31 f6                	xor    esi,esi
c0026266:	e9 2d ff ff ff       	jmp    c0026198 <__divdi3+0x58>
c002626b:	90                   	nop
c002626c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002626f:	89 f1                	mov    ecx,esi
c0026271:	d3 e7                	shl    edi,cl
c0026273:	39 c7                	cmp    edi,eax
c0026275:	73 eb                	jae    c0026262 <__divdi3+0x122>
c0026277:	90                   	nop
c0026278:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002627b:	31 f6                	xor    esi,esi
c002627d:	e9 16 ff ff ff       	jmp    c0026198 <__divdi3+0x58>
c0026282:	66 90                	xchg   ax,ax
c0026284:	31 c9                	xor    ecx,ecx
c0026286:	e9 0d ff ff ff       	jmp    c0026198 <__divdi3+0x58>
c002628b:	90                   	nop

c002628c <__moddi3>:
c002628c:	55                   	push   ebp
c002628d:	57                   	push   edi
c002628e:	56                   	push   esi
c002628f:	53                   	push   ebx
c0026290:	83 ec 2c             	sub    esp,0x2c
c0026293:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026297:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002629b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002629f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00262a3:	85 db                	test   ebx,ebx
c00262a5:	0f 88 85 00 00 00    	js     c0026330 <__moddi3+0xa4>
c00262ab:	89 de                	mov    esi,ebx
c00262ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00262b5:	89 d7                	mov    edi,edx
c00262b7:	85 d2                	test   edx,edx
c00262b9:	79 09                	jns    c00262c4 <__moddi3+0x38>
c00262bb:	f7 d8                	neg    eax
c00262bd:	83 d2 00             	adc    edx,0x0
c00262c0:	f7 da                	neg    edx
c00262c2:	89 d7                	mov    edi,edx
c00262c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262c8:	89 cd                	mov    ebp,ecx
c00262ca:	85 ff                	test   edi,edi
c00262cc:	75 52                	jne    c0026320 <__moddi3+0x94>
c00262ce:	89 c3                	mov    ebx,eax
c00262d0:	39 f0                	cmp    eax,esi
c00262d2:	76 24                	jbe    c00262f8 <__moddi3+0x6c>
c00262d4:	89 c8                	mov    eax,ecx
c00262d6:	89 f2                	mov    edx,esi
c00262d8:	f7 f3                	div    ebx
c00262da:	89 d6                	mov    esi,edx
c00262dc:	89 f0                	mov    eax,esi
c00262de:	31 d2                	xor    edx,edx
c00262e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00262e4:	85 c9                	test   ecx,ecx
c00262e6:	74 07                	je     c00262ef <__moddi3+0x63>
c00262e8:	f7 d8                	neg    eax
c00262ea:	83 d2 00             	adc    edx,0x0
c00262ed:	f7 da                	neg    edx
c00262ef:	83 c4 2c             	add    esp,0x2c
c00262f2:	5b                   	pop    ebx
c00262f3:	5e                   	pop    esi
c00262f4:	5f                   	pop    edi
c00262f5:	5d                   	pop    ebp
c00262f6:	c3                   	ret    
c00262f7:	90                   	nop
c00262f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00262fc:	85 db                	test   ebx,ebx
c00262fe:	75 0d                	jne    c002630d <__moddi3+0x81>
c0026300:	b8 01 00 00 00       	mov    eax,0x1
c0026305:	31 d2                	xor    edx,edx
c0026307:	f7 f7                	div    edi
c0026309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002630d:	89 f0                	mov    eax,esi
c002630f:	31 d2                	xor    edx,edx
c0026311:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026315:	f7 f7                	div    edi
c0026317:	89 e8                	mov    eax,ebp
c0026319:	f7 f7                	div    edi
c002631b:	89 d6                	mov    esi,edx
c002631d:	eb bd                	jmp    c00262dc <__moddi3+0x50>
c002631f:	90                   	nop
c0026320:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026324:	39 f7                	cmp    edi,esi
c0026326:	76 20                	jbe    c0026348 <__moddi3+0xbc>
c0026328:	89 c8                	mov    eax,ecx
c002632a:	89 f2                	mov    edx,esi
c002632c:	eb b2                	jmp    c00262e0 <__moddi3+0x54>
c002632e:	66 90                	xchg   ax,ax
c0026330:	f7 d9                	neg    ecx
c0026332:	83 d3 00             	adc    ebx,0x0
c0026335:	f7 db                	neg    ebx
c0026337:	89 de                	mov    esi,ebx
c0026339:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026341:	e9 6f ff ff ff       	jmp    c00262b5 <__moddi3+0x29>
c0026346:	66 90                	xchg   ax,ax
c0026348:	0f bd c7             	bsr    eax,edi
c002634b:	83 f0 1f             	xor    eax,0x1f
c002634e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026352:	75 24                	jne    c0026378 <__moddi3+0xec>
c0026354:	39 f7                	cmp    edi,esi
c0026356:	72 06                	jb     c002635e <__moddi3+0xd2>
c0026358:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002635c:	77 0c                	ja     c002636a <__moddi3+0xde>
c002635e:	89 e9                	mov    ecx,ebp
c0026360:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026364:	19 fe                	sbb    esi,edi
c0026366:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002636a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002636e:	89 f2                	mov    edx,esi
c0026370:	e9 6b ff ff ff       	jmp    c00262e0 <__moddi3+0x54>
c0026375:	8d 76 00             	lea    esi,[esi+0x0]
c0026378:	b8 20 00 00 00       	mov    eax,0x20
c002637d:	89 c2                	mov    edx,eax
c002637f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026383:	29 da                	sub    edx,ebx
c0026385:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026389:	88 d9                	mov    cl,bl
c002638b:	d3 e7                	shl    edi,cl
c002638d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026391:	88 d1                	mov    cl,dl
c0026393:	d3 e8                	shr    eax,cl
c0026395:	09 c7                	or     edi,eax
c0026397:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002639b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002639f:	89 d8                	mov    eax,ebx
c00263a1:	88 d9                	mov    cl,bl
c00263a3:	d3 e7                	shl    edi,cl
c00263a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00263a9:	89 f3                	mov    ebx,esi
c00263ab:	88 d1                	mov    cl,dl
c00263ad:	d3 eb                	shr    ebx,cl
c00263af:	89 c7                	mov    edi,eax
c00263b1:	88 c1                	mov    cl,al
c00263b3:	d3 e6                	shl    esi,cl
c00263b5:	89 e8                	mov    eax,ebp
c00263b7:	88 d1                	mov    cl,dl
c00263b9:	d3 e8                	shr    eax,cl
c00263bb:	09 f0                	or     eax,esi
c00263bd:	89 f9                	mov    ecx,edi
c00263bf:	d3 e5                	shl    ebp,cl
c00263c1:	89 da                	mov    edx,ebx
c00263c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00263c7:	89 d3                	mov    ebx,edx
c00263c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00263cd:	89 c6                	mov    esi,eax
c00263cf:	89 d1                	mov    ecx,edx
c00263d1:	39 d3                	cmp    ebx,edx
c00263d3:	72 27                	jb     c00263fc <__moddi3+0x170>
c00263d5:	74 21                	je     c00263f8 <__moddi3+0x16c>
c00263d7:	29 f5                	sub    ebp,esi
c00263d9:	19 cb                	sbb    ebx,ecx
c00263db:	89 de                	mov    esi,ebx
c00263dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00263e1:	d3 e6                	shl    esi,cl
c00263e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00263e7:	89 f9                	mov    ecx,edi
c00263e9:	d3 ed                	shr    ebp,cl
c00263eb:	09 ee                	or     esi,ebp
c00263ed:	89 f0                	mov    eax,esi
c00263ef:	d3 eb                	shr    ebx,cl
c00263f1:	89 da                	mov    edx,ebx
c00263f3:	e9 e8 fe ff ff       	jmp    c00262e0 <__moddi3+0x54>
c00263f8:	39 c5                	cmp    ebp,eax
c00263fa:	73 db                	jae    c00263d7 <__moddi3+0x14b>
c00263fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026400:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026404:	89 d1                	mov    ecx,edx
c0026406:	89 c6                	mov    esi,eax
c0026408:	eb cd                	jmp    c00263d7 <__moddi3+0x14b>
c002640a:	66 90                	xchg   ax,ax

c002640c <__udivdi3>:
c002640c:	55                   	push   ebp
c002640d:	57                   	push   edi
c002640e:	56                   	push   esi
c002640f:	53                   	push   ebx
c0026410:	83 ec 1c             	sub    esp,0x1c
c0026413:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026417:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002641b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002641f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026423:	85 d2                	test   edx,edx
c0026425:	75 41                	jne    c0026468 <__udivdi3+0x5c>
c0026427:	39 f7                	cmp    edi,esi
c0026429:	76 15                	jbe    c0026440 <__udivdi3+0x34>
c002642b:	89 e8                	mov    eax,ebp
c002642d:	89 f2                	mov    edx,esi
c002642f:	f7 f7                	div    edi
c0026431:	31 db                	xor    ebx,ebx
c0026433:	89 da                	mov    edx,ebx
c0026435:	83 c4 1c             	add    esp,0x1c
c0026438:	5b                   	pop    ebx
c0026439:	5e                   	pop    esi
c002643a:	5f                   	pop    edi
c002643b:	5d                   	pop    ebp
c002643c:	c3                   	ret    
c002643d:	8d 76 00             	lea    esi,[esi+0x0]
c0026440:	89 f9                	mov    ecx,edi
c0026442:	85 ff                	test   edi,edi
c0026444:	75 0b                	jne    c0026451 <__udivdi3+0x45>
c0026446:	b8 01 00 00 00       	mov    eax,0x1
c002644b:	31 d2                	xor    edx,edx
c002644d:	f7 f7                	div    edi
c002644f:	89 c1                	mov    ecx,eax
c0026451:	31 d2                	xor    edx,edx
c0026453:	89 f0                	mov    eax,esi
c0026455:	f7 f1                	div    ecx
c0026457:	89 c3                	mov    ebx,eax
c0026459:	89 e8                	mov    eax,ebp
c002645b:	f7 f1                	div    ecx
c002645d:	89 da                	mov    edx,ebx
c002645f:	83 c4 1c             	add    esp,0x1c
c0026462:	5b                   	pop    ebx
c0026463:	5e                   	pop    esi
c0026464:	5f                   	pop    edi
c0026465:	5d                   	pop    ebp
c0026466:	c3                   	ret    
c0026467:	90                   	nop
c0026468:	39 f2                	cmp    edx,esi
c002646a:	77 1c                	ja     c0026488 <__udivdi3+0x7c>
c002646c:	0f bd da             	bsr    ebx,edx
c002646f:	83 f3 1f             	xor    ebx,0x1f
c0026472:	75 24                	jne    c0026498 <__udivdi3+0x8c>
c0026474:	39 f2                	cmp    edx,esi
c0026476:	72 08                	jb     c0026480 <__udivdi3+0x74>
c0026478:	39 ef                	cmp    edi,ebp
c002647a:	0f 87 84 00 00 00    	ja     c0026504 <__udivdi3+0xf8>
c0026480:	b8 01 00 00 00       	mov    eax,0x1
c0026485:	eb ac                	jmp    c0026433 <__udivdi3+0x27>
c0026487:	90                   	nop
c0026488:	31 db                	xor    ebx,ebx
c002648a:	31 c0                	xor    eax,eax
c002648c:	89 da                	mov    edx,ebx
c002648e:	83 c4 1c             	add    esp,0x1c
c0026491:	5b                   	pop    ebx
c0026492:	5e                   	pop    esi
c0026493:	5f                   	pop    edi
c0026494:	5d                   	pop    ebp
c0026495:	c3                   	ret    
c0026496:	66 90                	xchg   ax,ax
c0026498:	b8 20 00 00 00       	mov    eax,0x20
c002649d:	29 d8                	sub    eax,ebx
c002649f:	88 d9                	mov    cl,bl
c00264a1:	d3 e2                	shl    edx,cl
c00264a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00264a7:	89 fa                	mov    edx,edi
c00264a9:	88 c1                	mov    cl,al
c00264ab:	d3 ea                	shr    edx,cl
c00264ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00264b1:	09 d1                	or     ecx,edx
c00264b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00264b7:	88 d9                	mov    cl,bl
c00264b9:	d3 e7                	shl    edi,cl
c00264bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00264bf:	89 f7                	mov    edi,esi
c00264c1:	88 c1                	mov    cl,al
c00264c3:	d3 ef                	shr    edi,cl
c00264c5:	88 d9                	mov    cl,bl
c00264c7:	d3 e6                	shl    esi,cl
c00264c9:	89 ea                	mov    edx,ebp
c00264cb:	88 c1                	mov    cl,al
c00264cd:	d3 ea                	shr    edx,cl
c00264cf:	09 d6                	or     esi,edx
c00264d1:	89 f0                	mov    eax,esi
c00264d3:	89 fa                	mov    edx,edi
c00264d5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00264d9:	89 d7                	mov    edi,edx
c00264db:	89 c6                	mov    esi,eax
c00264dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00264e1:	39 d7                	cmp    edi,edx
c00264e3:	72 13                	jb     c00264f8 <__udivdi3+0xec>
c00264e5:	74 09                	je     c00264f0 <__udivdi3+0xe4>
c00264e7:	89 f0                	mov    eax,esi
c00264e9:	31 db                	xor    ebx,ebx
c00264eb:	e9 43 ff ff ff       	jmp    c0026433 <__udivdi3+0x27>
c00264f0:	88 d9                	mov    cl,bl
c00264f2:	d3 e5                	shl    ebp,cl
c00264f4:	39 c5                	cmp    ebp,eax
c00264f6:	73 ef                	jae    c00264e7 <__udivdi3+0xdb>
c00264f8:	8d 46 ff             	lea    eax,[esi-0x1]
c00264fb:	31 db                	xor    ebx,ebx
c00264fd:	e9 31 ff ff ff       	jmp    c0026433 <__udivdi3+0x27>
c0026502:	66 90                	xchg   ax,ax
c0026504:	31 c0                	xor    eax,eax
c0026506:	e9 28 ff ff ff       	jmp    c0026433 <__udivdi3+0x27>
c002650b:	90                   	nop

c002650c <__umoddi3>:
c002650c:	55                   	push   ebp
c002650d:	57                   	push   edi
c002650e:	56                   	push   esi
c002650f:	53                   	push   ebx
c0026510:	83 ec 1c             	sub    esp,0x1c
c0026513:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026517:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002651b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002651f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026523:	89 da                	mov    edx,ebx
c0026525:	85 c0                	test   eax,eax
c0026527:	75 37                	jne    c0026560 <__umoddi3+0x54>
c0026529:	39 df                	cmp    edi,ebx
c002652b:	76 13                	jbe    c0026540 <__umoddi3+0x34>
c002652d:	89 f0                	mov    eax,esi
c002652f:	f7 f7                	div    edi
c0026531:	89 d0                	mov    eax,edx
c0026533:	31 d2                	xor    edx,edx
c0026535:	83 c4 1c             	add    esp,0x1c
c0026538:	5b                   	pop    ebx
c0026539:	5e                   	pop    esi
c002653a:	5f                   	pop    edi
c002653b:	5d                   	pop    ebp
c002653c:	c3                   	ret    
c002653d:	8d 76 00             	lea    esi,[esi+0x0]
c0026540:	89 fd                	mov    ebp,edi
c0026542:	85 ff                	test   edi,edi
c0026544:	75 0b                	jne    c0026551 <__umoddi3+0x45>
c0026546:	b8 01 00 00 00       	mov    eax,0x1
c002654b:	31 d2                	xor    edx,edx
c002654d:	f7 f7                	div    edi
c002654f:	89 c5                	mov    ebp,eax
c0026551:	89 d8                	mov    eax,ebx
c0026553:	31 d2                	xor    edx,edx
c0026555:	f7 f5                	div    ebp
c0026557:	89 f0                	mov    eax,esi
c0026559:	f7 f5                	div    ebp
c002655b:	89 d0                	mov    eax,edx
c002655d:	eb d4                	jmp    c0026533 <__umoddi3+0x27>
c002655f:	90                   	nop
c0026560:	89 f1                	mov    ecx,esi
c0026562:	39 d8                	cmp    eax,ebx
c0026564:	76 0a                	jbe    c0026570 <__umoddi3+0x64>
c0026566:	89 f0                	mov    eax,esi
c0026568:	83 c4 1c             	add    esp,0x1c
c002656b:	5b                   	pop    ebx
c002656c:	5e                   	pop    esi
c002656d:	5f                   	pop    edi
c002656e:	5d                   	pop    ebp
c002656f:	c3                   	ret    
c0026570:	0f bd e8             	bsr    ebp,eax
c0026573:	83 f5 1f             	xor    ebp,0x1f
c0026576:	75 1c                	jne    c0026594 <__umoddi3+0x88>
c0026578:	39 d8                	cmp    eax,ebx
c002657a:	72 04                	jb     c0026580 <__umoddi3+0x74>
c002657c:	39 f7                	cmp    edi,esi
c002657e:	77 08                	ja     c0026588 <__umoddi3+0x7c>
c0026580:	89 da                	mov    edx,ebx
c0026582:	29 fe                	sub    esi,edi
c0026584:	19 c2                	sbb    edx,eax
c0026586:	89 f1                	mov    ecx,esi
c0026588:	89 c8                	mov    eax,ecx
c002658a:	83 c4 1c             	add    esp,0x1c
c002658d:	5b                   	pop    ebx
c002658e:	5e                   	pop    esi
c002658f:	5f                   	pop    edi
c0026590:	5d                   	pop    ebp
c0026591:	c3                   	ret    
c0026592:	66 90                	xchg   ax,ax
c0026594:	ba 20 00 00 00       	mov    edx,0x20
c0026599:	29 ea                	sub    edx,ebp
c002659b:	89 e9                	mov    ecx,ebp
c002659d:	d3 e0                	shl    eax,cl
c002659f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00265a3:	89 f8                	mov    eax,edi
c00265a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00265a9:	88 d1                	mov    cl,dl
c00265ab:	d3 e8                	shr    eax,cl
c00265ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00265b1:	09 c1                	or     ecx,eax
c00265b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00265b7:	89 e9                	mov    ecx,ebp
c00265b9:	d3 e7                	shl    edi,cl
c00265bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265bf:	89 d8                	mov    eax,ebx
c00265c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00265c5:	88 d1                	mov    cl,dl
c00265c7:	d3 e8                	shr    eax,cl
c00265c9:	89 c7                	mov    edi,eax
c00265cb:	89 e9                	mov    ecx,ebp
c00265cd:	d3 e3                	shl    ebx,cl
c00265cf:	89 f0                	mov    eax,esi
c00265d1:	88 d1                	mov    cl,dl
c00265d3:	d3 e8                	shr    eax,cl
c00265d5:	09 d8                	or     eax,ebx
c00265d7:	89 e9                	mov    ecx,ebp
c00265d9:	d3 e6                	shl    esi,cl
c00265db:	89 f3                	mov    ebx,esi
c00265dd:	89 fa                	mov    edx,edi
c00265df:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00265e3:	89 d1                	mov    ecx,edx
c00265e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00265e9:	89 c6                	mov    esi,eax
c00265eb:	89 d7                	mov    edi,edx
c00265ed:	39 d1                	cmp    ecx,edx
c00265ef:	72 27                	jb     c0026618 <__umoddi3+0x10c>
c00265f1:	74 21                	je     c0026614 <__umoddi3+0x108>
c00265f3:	89 ca                	mov    edx,ecx
c00265f5:	29 f3                	sub    ebx,esi
c00265f7:	19 fa                	sbb    edx,edi
c00265f9:	89 d0                	mov    eax,edx
c00265fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00265ff:	d3 e0                	shl    eax,cl
c0026601:	89 e9                	mov    ecx,ebp
c0026603:	d3 eb                	shr    ebx,cl
c0026605:	09 d8                	or     eax,ebx
c0026607:	d3 ea                	shr    edx,cl
c0026609:	83 c4 1c             	add    esp,0x1c
c002660c:	5b                   	pop    ebx
c002660d:	5e                   	pop    esi
c002660e:	5f                   	pop    edi
c002660f:	5d                   	pop    ebp
c0026610:	c3                   	ret    
c0026611:	8d 76 00             	lea    esi,[esi+0x0]
c0026614:	39 c3                	cmp    ebx,eax
c0026616:	73 db                	jae    c00265f3 <__umoddi3+0xe7>
c0026618:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002661c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026620:	89 d7                	mov    edi,edx
c0026622:	89 c6                	mov    esi,eax
c0026624:	eb cd                	jmp    c00265f3 <__umoddi3+0xe7>

c0026626 <__addsf3>:
c0026626:	55                   	push   ebp
c0026627:	89 e5                	mov    ebp,esp
c0026629:	57                   	push   edi
c002662a:	56                   	push   esi
c002662b:	53                   	push   ebx
c002662c:	83 ec 08             	sub    esp,0x8
c002662f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026632:	89 fa                	mov    edx,edi
c0026634:	89 f8                	mov    eax,edi
c0026636:	c1 f8 17             	sar    eax,0x17
c0026639:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002663c:	c1 e2 08             	shl    edx,0x8
c002663f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026645:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026648:	89 de                	mov    esi,ebx
c002664a:	c1 fe 17             	sar    esi,0x17
c002664d:	c1 e3 08             	shl    ebx,0x8
c0026650:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026656:	31 f0                	xor    eax,esi
c0026658:	0f 88 3b 01 00 00    	js     c0026799 <__addsf3+0x173>
c002665e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026661:	29 f1                	sub    ecx,esi
c0026663:	85 c9                	test   ecx,ecx
c0026665:	7e 54                	jle    c00266bb <__addsf3+0x95>
c0026667:	89 f0                	mov    eax,esi
c0026669:	84 c0                	test   al,al
c002666b:	75 10                	jne    c002667d <__addsf3+0x57>
c002666d:	85 db                	test   ebx,ebx
c002666f:	0f 84 aa 02 00 00    	je     c002691f <__addsf3+0x2f9>
c0026675:	49                   	dec    ecx
c0026676:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026679:	74 38                	je     c00266b3 <__addsf3+0x8d>
c002667b:	eb 13                	jmp    c0026690 <__addsf3+0x6a>
c002667d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026680:	f7 d0                	not    eax
c0026682:	84 c0                	test   al,al
c0026684:	0f 84 95 02 00 00    	je     c002691f <__addsf3+0x2f9>
c002668a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026690:	83 f9 1f             	cmp    ecx,0x1f
c0026693:	0f 8f 86 02 00 00    	jg     c002691f <__addsf3+0x2f9>
c0026699:	89 de                	mov    esi,ebx
c002669b:	d3 ee                	shr    esi,cl
c002669d:	b8 20 00 00 00       	mov    eax,0x20
c00266a2:	29 c8                	sub    eax,ecx
c00266a4:	89 c1                	mov    ecx,eax
c00266a6:	d3 e3                	shl    ebx,cl
c00266a8:	31 c0                	xor    eax,eax
c00266aa:	85 db                	test   ebx,ebx
c00266ac:	0f 95 c0             	setne  al
c00266af:	09 f0                	or     eax,esi
c00266b1:	01 d0                	add    eax,edx
c00266b3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00266b6:	e9 b6 00 00 00       	jmp    c0026771 <__addsf3+0x14b>
c00266bb:	74 5c                	je     c0026719 <__addsf3+0xf3>
c00266bd:	89 f1                	mov    ecx,esi
c00266bf:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00266c2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00266c5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00266c9:	75 14                	jne    c00266df <__addsf3+0xb9>
c00266cb:	85 d2                	test   edx,edx
c00266cd:	0f 84 4c 02 00 00    	je     c002691f <__addsf3+0x2f9>
c00266d3:	49                   	dec    ecx
c00266d4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00266d7:	0f 84 94 00 00 00    	je     c0026771 <__addsf3+0x14b>
c00266dd:	eb 12                	jmp    c00266f1 <__addsf3+0xcb>
c00266df:	89 f0                	mov    eax,esi
c00266e1:	f7 d0                	not    eax
c00266e3:	84 c0                	test   al,al
c00266e5:	0f 84 34 02 00 00    	je     c002691f <__addsf3+0x2f9>
c00266eb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00266f1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00266f4:	83 f9 1f             	cmp    ecx,0x1f
c00266f7:	0f 8f 22 02 00 00    	jg     c002691f <__addsf3+0x2f9>
c00266fd:	89 d7                	mov    edi,edx
c00266ff:	d3 ef                	shr    edi,cl
c0026701:	b8 20 00 00 00       	mov    eax,0x20
c0026706:	29 c8                	sub    eax,ecx
c0026708:	89 c1                	mov    ecx,eax
c002670a:	d3 e2                	shl    edx,cl
c002670c:	31 c0                	xor    eax,eax
c002670e:	85 d2                	test   edx,edx
c0026710:	0f 95 c0             	setne  al
c0026713:	09 f8                	or     eax,edi
c0026715:	01 d8                	add    eax,ebx
c0026717:	eb 58                	jmp    c0026771 <__addsf3+0x14b>
c0026719:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002671c:	8d 70 01             	lea    esi,[eax+0x1]
c002671f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026725:	75 32                	jne    c0026759 <__addsf3+0x133>
c0026727:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002672b:	75 1f                	jne    c002674c <__addsf3+0x126>
c002672d:	85 d2                	test   edx,edx
c002672f:	0f 84 e0 01 00 00    	je     c0026915 <__addsf3+0x2ef>
c0026735:	85 db                	test   ebx,ebx
c0026737:	0f 84 e2 01 00 00    	je     c002691f <__addsf3+0x2f9>
c002673d:	89 d0                	mov    eax,edx
c002673f:	01 d8                	add    eax,ebx
c0026741:	0f 89 a9 01 00 00    	jns    c00268f0 <__addsf3+0x2ca>
c0026747:	e9 9d 01 00 00       	jmp    c00268e9 <__addsf3+0x2c3>
c002674c:	85 d2                	test   edx,edx
c002674e:	0f 85 cb 01 00 00    	jne    c002691f <__addsf3+0x2f9>
c0026754:	e9 bc 01 00 00       	jmp    c0026915 <__addsf3+0x2ef>
c0026759:	31 c0                	xor    eax,eax
c002675b:	89 f1                	mov    ecx,esi
c002675d:	f7 d1                	not    ecx
c002675f:	84 c9                	test   cl,cl
c0026761:	0f 84 90 01 00 00    	je     c00268f7 <__addsf3+0x2d1>
c0026767:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002676a:	d1 e8                	shr    eax,1
c002676c:	e9 86 01 00 00       	jmp    c00268f7 <__addsf3+0x2d1>
c0026771:	85 c0                	test   eax,eax
c0026773:	0f 89 7e 01 00 00    	jns    c00268f7 <__addsf3+0x2d1>
c0026779:	46                   	inc    esi
c002677a:	89 f2                	mov    edx,esi
c002677c:	f7 d2                	not    edx
c002677e:	84 d2                	test   dl,dl
c0026780:	0f 84 6f 01 00 00    	je     c00268f5 <__addsf3+0x2cf>
c0026786:	89 c2                	mov    edx,eax
c0026788:	83 e2 01             	and    edx,0x1
c002678b:	d1 e8                	shr    eax,1
c002678d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026792:	09 d0                	or     eax,edx
c0026794:	e9 5e 01 00 00       	jmp    c00268f7 <__addsf3+0x2d1>
c0026799:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002679d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00267a0:	89 f0                	mov    eax,esi
c00267a2:	0f b6 c0             	movzx  eax,al
c00267a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00267a8:	29 c1                	sub    ecx,eax
c00267aa:	85 c9                	test   ecx,ecx
c00267ac:	7e 55                	jle    c0026803 <__addsf3+0x1dd>
c00267ae:	85 c0                	test   eax,eax
c00267b0:	75 11                	jne    c00267c3 <__addsf3+0x19d>
c00267b2:	85 db                	test   ebx,ebx
c00267b4:	0f 84 65 01 00 00    	je     c002691f <__addsf3+0x2f9>
c00267ba:	49                   	dec    ecx
c00267bb:	75 19                	jne    c00267d6 <__addsf3+0x1b0>
c00267bd:	89 d0                	mov    eax,edx
c00267bf:	29 d8                	sub    eax,ebx
c00267c1:	eb 38                	jmp    c00267fb <__addsf3+0x1d5>
c00267c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00267c6:	f7 d0                	not    eax
c00267c8:	84 c0                	test   al,al
c00267ca:	0f 84 4f 01 00 00    	je     c002691f <__addsf3+0x2f9>
c00267d0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00267d6:	83 f9 1f             	cmp    ecx,0x1f
c00267d9:	0f 8f 40 01 00 00    	jg     c002691f <__addsf3+0x2f9>
c00267df:	89 de                	mov    esi,ebx
c00267e1:	d3 ee                	shr    esi,cl
c00267e3:	b8 20 00 00 00       	mov    eax,0x20
c00267e8:	29 c8                	sub    eax,ecx
c00267ea:	89 c1                	mov    ecx,eax
c00267ec:	d3 e3                	shl    ebx,cl
c00267ee:	31 c0                	xor    eax,eax
c00267f0:	85 db                	test   ebx,ebx
c00267f2:	0f 95 c0             	setne  al
c00267f5:	09 f0                	or     eax,esi
c00267f7:	29 c2                	sub    edx,eax
c00267f9:	89 d0                	mov    eax,edx
c00267fb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00267fe:	e9 af 00 00 00       	jmp    c00268b2 <__addsf3+0x28c>
c0026803:	74 5c                	je     c0026861 <__addsf3+0x23b>
c0026805:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026808:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002680b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002680f:	75 14                	jne    c0026825 <__addsf3+0x1ff>
c0026811:	85 d2                	test   edx,edx
c0026813:	0f 84 06 01 00 00    	je     c002691f <__addsf3+0x2f9>
c0026819:	48                   	dec    eax
c002681a:	75 1b                	jne    c0026837 <__addsf3+0x211>
c002681c:	89 d8                	mov    eax,ebx
c002681e:	29 d0                	sub    eax,edx
c0026820:	e9 8d 00 00 00       	jmp    c00268b2 <__addsf3+0x28c>
c0026825:	89 f1                	mov    ecx,esi
c0026827:	f7 d1                	not    ecx
c0026829:	84 c9                	test   cl,cl
c002682b:	0f 84 ee 00 00 00    	je     c002691f <__addsf3+0x2f9>
c0026831:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026837:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002683a:	83 f8 1f             	cmp    eax,0x1f
c002683d:	0f 8f dc 00 00 00    	jg     c002691f <__addsf3+0x2f9>
c0026843:	89 d7                	mov    edi,edx
c0026845:	88 c1                	mov    cl,al
c0026847:	d3 ef                	shr    edi,cl
c0026849:	b9 20 00 00 00       	mov    ecx,0x20
c002684e:	29 c1                	sub    ecx,eax
c0026850:	d3 e2                	shl    edx,cl
c0026852:	31 c0                	xor    eax,eax
c0026854:	85 d2                	test   edx,edx
c0026856:	0f 95 c0             	setne  al
c0026859:	09 f8                	or     eax,edi
c002685b:	29 c3                	sub    ebx,eax
c002685d:	89 d8                	mov    eax,ebx
c002685f:	eb 51                	jmp    c00268b2 <__addsf3+0x28c>
c0026861:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026864:	40                   	inc    eax
c0026865:	a8 fe                	test   al,0xfe
c0026867:	75 3d                	jne    c00268a6 <__addsf3+0x280>
c0026869:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002686d:	0f 85 a7 00 00 00    	jne    c002691a <__addsf3+0x2f4>
c0026873:	85 d2                	test   edx,edx
c0026875:	75 12                	jne    c0026889 <__addsf3+0x263>
c0026877:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002687a:	85 db                	test   ebx,ebx
c002687c:	0f 85 9d 00 00 00    	jne    c002691f <__addsf3+0x2f9>
c0026882:	31 ff                	xor    edi,edi
c0026884:	e9 96 00 00 00       	jmp    c002691f <__addsf3+0x2f9>
c0026889:	85 db                	test   ebx,ebx
c002688b:	0f 84 8e 00 00 00    	je     c002691f <__addsf3+0x2f9>
c0026891:	89 d0                	mov    eax,edx
c0026893:	29 d8                	sub    eax,ebx
c0026895:	79 06                	jns    c002689d <__addsf3+0x277>
c0026897:	89 d8                	mov    eax,ebx
c0026899:	29 d0                	sub    eax,edx
c002689b:	eb 5a                	jmp    c00268f7 <__addsf3+0x2d1>
c002689d:	bf 00 00 00 00       	mov    edi,0x0
c00268a2:	74 7b                	je     c002691f <__addsf3+0x2f9>
c00268a4:	eb 4a                	jmp    c00268f0 <__addsf3+0x2ca>
c00268a6:	89 d0                	mov    eax,edx
c00268a8:	29 d8                	sub    eax,ebx
c00268aa:	79 12                	jns    c00268be <__addsf3+0x298>
c00268ac:	89 d8                	mov    eax,ebx
c00268ae:	29 d0                	sub    eax,edx
c00268b0:	eb 09                	jmp    c00268bb <__addsf3+0x295>
c00268b2:	85 c0                	test   eax,eax
c00268b4:	79 41                	jns    c00268f7 <__addsf3+0x2d1>
c00268b6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00268bb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00268be:	31 f6                	xor    esi,esi
c00268c0:	85 c0                	test   eax,eax
c00268c2:	74 33                	je     c00268f7 <__addsf3+0x2d1>
c00268c4:	0f bd c8             	bsr    ecx,eax
c00268c7:	83 f1 1f             	xor    ecx,0x1f
c00268ca:	d3 e0                	shl    eax,cl
c00268cc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00268d0:	39 ca                	cmp    edx,ecx
c00268d2:	7f 10                	jg     c00268e4 <__addsf3+0x2be>
c00268d4:	29 d1                	sub    ecx,edx
c00268d6:	41                   	inc    ecx
c00268d7:	d3 e8                	shr    eax,cl
c00268d9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268dc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00268e2:	eb 13                	jmp    c00268f7 <__addsf3+0x2d1>
c00268e4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268e7:	29 ce                	sub    esi,ecx
c00268e9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00268ee:	eb 07                	jmp    c00268f7 <__addsf3+0x2d1>
c00268f0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268f3:	eb 02                	jmp    c00268f7 <__addsf3+0x2d1>
c00268f5:	31 c0                	xor    eax,eax
c00268f7:	89 c2                	mov    edx,eax
c00268f9:	c1 ea 08             	shr    edx,0x8
c00268fc:	a8 7f                	test   al,0x7f
c00268fe:	0f 95 c1             	setne  cl
c0026901:	09 d1                	or     ecx,edx
c0026903:	83 e1 01             	and    ecx,0x1
c0026906:	c1 e8 07             	shr    eax,0x7
c0026909:	21 c8                	and    eax,ecx
c002690b:	c1 e6 17             	shl    esi,0x17
c002690e:	09 d6                	or     esi,edx
c0026910:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026913:	eb 0a                	jmp    c002691f <__addsf3+0x2f9>
c0026915:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026918:	eb 05                	jmp    c002691f <__addsf3+0x2f9>
c002691a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002691f:	89 f8                	mov    eax,edi
c0026921:	5a                   	pop    edx
c0026922:	59                   	pop    ecx
c0026923:	5b                   	pop    ebx
c0026924:	5e                   	pop    esi
c0026925:	5f                   	pop    edi
c0026926:	5d                   	pop    ebp
c0026927:	c3                   	ret    

c0026928 <__subsf3>:
c0026928:	55                   	push   ebp
c0026929:	89 e5                	mov    ebp,esp
c002692b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002692e:	05 00 00 00 80       	add    eax,0x80000000
c0026933:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026936:	5d                   	pop    ebp
c0026937:	e9 ea fc ff ff       	jmp    c0026626 <__addsf3>

c002693c <__negsf2>:
c002693c:	55                   	push   ebp
c002693d:	89 e5                	mov    ebp,esp
c002693f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026942:	05 00 00 00 80       	add    eax,0x80000000
c0026947:	5d                   	pop    ebp
c0026948:	c3                   	ret    

c0026949 <__mulsf3>:
c0026949:	55                   	push   ebp
c002694a:	89 e5                	mov    ebp,esp
c002694c:	57                   	push   edi
c002694d:	56                   	push   esi
c002694e:	53                   	push   ebx
c002694f:	83 ec 1c             	sub    esp,0x1c
c0026952:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026955:	89 f0                	mov    eax,esi
c0026957:	89 f1                	mov    ecx,esi
c0026959:	c1 f9 17             	sar    ecx,0x17
c002695c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002695f:	c1 e0 08             	shl    eax,0x8
c0026962:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026967:	89 c1                	mov    ecx,eax
c0026969:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002696c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002696f:	89 c7                	mov    edi,eax
c0026971:	c1 ff 17             	sar    edi,0x17
c0026974:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026978:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002697b:	89 f8                	mov    eax,edi
c002697d:	0f b6 c0             	movzx  eax,al
c0026980:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026983:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026987:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002698a:	42                   	inc    edx
c002698b:	80 e2 fe             	and    dl,0xfe
c002698e:	75 7b                	jne    c0026a0b <__mulsf3+0xc2>
c0026990:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026994:	74 54                	je     c00269ea <__mulsf3+0xa1>
c0026996:	85 c9                	test   ecx,ecx
c0026998:	0f 85 64 01 00 00    	jne    c0026b02 <__mulsf3+0x1b9>
c002699e:	8d 57 01             	lea    edx,[edi+0x1]
c00269a1:	80 e2 fe             	and    dl,0xfe
c00269a4:	75 1f                	jne    c00269c5 <__mulsf3+0x7c>
c00269a6:	85 c0                	test   eax,eax
c00269a8:	b8 00 00 00 00       	mov    eax,0x0
c00269ad:	74 29                	je     c00269d8 <__mulsf3+0x8f>
c00269af:	53                   	push   ebx
c00269b0:	53                   	push   ebx
c00269b1:	50                   	push   eax
c00269b2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00269b5:	e8 96 05 00 00       	call   c0026f50 <__nesf2>
c00269ba:	83 c4 10             	add    esp,0x10
c00269bd:	85 c0                	test   eax,eax
c00269bf:	0f 85 3a 01 00 00    	jne    c0026aff <__mulsf3+0x1b6>
c00269c5:	85 ff                	test   edi,edi
c00269c7:	0f 89 35 01 00 00    	jns    c0026b02 <__mulsf3+0x1b9>
c00269cd:	81 c6 00 00 00 80    	add    esi,0x80000000
c00269d3:	e9 2a 01 00 00       	jmp    c0026b02 <__mulsf3+0x1b9>
c00269d8:	51                   	push   ecx
c00269d9:	51                   	push   ecx
c00269da:	50                   	push   eax
c00269db:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00269de:	e8 6d 05 00 00       	call   c0026f50 <__nesf2>
c00269e3:	83 c4 10             	add    esp,0x10
c00269e6:	85 c0                	test   eax,eax
c00269e8:	eb 15                	jmp    c00269ff <__mulsf3+0xb6>
c00269ea:	85 c9                	test   ecx,ecx
c00269ec:	74 0b                	je     c00269f9 <__mulsf3+0xb0>
c00269ee:	8d 53 ff             	lea    edx,[ebx-0x1]
c00269f1:	01 c9                	add    ecx,ecx
c00269f3:	78 16                	js     c0026a0b <__mulsf3+0xc2>
c00269f5:	89 d3                	mov    ebx,edx
c00269f7:	eb f5                	jmp    c00269ee <__mulsf3+0xa5>
c00269f9:	89 f8                	mov    eax,edi
c00269fb:	f7 d0                	not    eax
c00269fd:	84 c0                	test   al,al
c00269ff:	75 c4                	jne    c00269c5 <__mulsf3+0x7c>
c0026a01:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026a06:	e9 f7 00 00 00       	jmp    c0026b02 <__mulsf3+0x1b9>
c0026a0b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026a0e:	c1 e6 08             	shl    esi,0x8
c0026a11:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026a17:	8d 57 01             	lea    edx,[edi+0x1]
c0026a1a:	80 e2 fe             	and    dl,0xfe
c0026a1d:	75 63                	jne    c0026a82 <__mulsf3+0x139>
c0026a1f:	85 c0                	test   eax,eax
c0026a21:	74 2f                	je     c0026a52 <__mulsf3+0x109>
c0026a23:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026a27:	0f 89 d2 00 00 00    	jns    c0026aff <__mulsf3+0x1b6>
c0026a2d:	52                   	push   edx
c0026a2e:	52                   	push   edx
c0026a2f:	6a 00                	push   0x0
c0026a31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a34:	e8 dc 04 00 00       	call   c0026f15 <__eqsf2>
c0026a39:	83 c4 10             	add    esp,0x10
c0026a3c:	85 c0                	test   eax,eax
c0026a3e:	0f 85 bb 00 00 00    	jne    c0026aff <__mulsf3+0x1b6>
c0026a44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a47:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026a4d:	e9 b0 00 00 00       	jmp    c0026b02 <__mulsf3+0x1b9>
c0026a52:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026a55:	50                   	push   eax
c0026a56:	50                   	push   eax
c0026a57:	6a 00                	push   0x0
c0026a59:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a5c:	e8 b4 04 00 00       	call   c0026f15 <__eqsf2>
c0026a61:	83 c4 10             	add    esp,0x10
c0026a64:	85 c0                	test   eax,eax
c0026a66:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026a69:	75 0c                	jne    c0026a77 <__mulsf3+0x12e>
c0026a6b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026a6f:	0f 89 8a 00 00 00    	jns    c0026aff <__mulsf3+0x1b6>
c0026a75:	eb cd                	jmp    c0026a44 <__mulsf3+0xfb>
c0026a77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026a7a:	01 f6                	add    esi,esi
c0026a7c:	78 04                	js     c0026a82 <__mulsf3+0x139>
c0026a7e:	89 c3                	mov    ebx,eax
c0026a80:	eb f5                	jmp    c0026a77 <__mulsf3+0x12e>
c0026a82:	89 c8                	mov    eax,ecx
c0026a84:	0d 00 00 00 80       	or     eax,0x80000000
c0026a89:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026a8f:	f7 e6                	mul    esi
c0026a91:	85 c0                	test   eax,eax
c0026a93:	0f 95 c0             	setne  al
c0026a96:	0f b6 c0             	movzx  eax,al
c0026a99:	09 c2                	or     edx,eax
c0026a9b:	78 03                	js     c0026aa0 <__mulsf3+0x157>
c0026a9d:	01 d2                	add    edx,edx
c0026a9f:	4b                   	dec    ebx
c0026aa0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026aa6:	7f 22                	jg     c0026aca <__mulsf3+0x181>
c0026aa8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026aae:	85 db                	test   ebx,ebx
c0026ab0:	7f 23                	jg     c0026ad5 <__mulsf3+0x18c>
c0026ab2:	83 fb e9             	cmp    ebx,0xffffffe9
c0026ab5:	7c 1a                	jl     c0026ad1 <__mulsf3+0x188>
c0026ab7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026abd:	b9 01 00 00 00       	mov    ecx,0x1
c0026ac2:	29 d9                	sub    ecx,ebx
c0026ac4:	d3 ea                	shr    edx,cl
c0026ac6:	31 db                	xor    ebx,ebx
c0026ac8:	eb 0b                	jmp    c0026ad5 <__mulsf3+0x18c>
c0026aca:	bb ff 00 00 00       	mov    ebx,0xff
c0026acf:	eb 02                	jmp    c0026ad3 <__mulsf3+0x18a>
c0026ad1:	31 db                	xor    ebx,ebx
c0026ad3:	31 d2                	xor    edx,edx
c0026ad5:	89 d0                	mov    eax,edx
c0026ad7:	c1 e8 08             	shr    eax,0x8
c0026ada:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026add:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026ae3:	09 fb                	or     ebx,edi
c0026ae5:	c1 e3 17             	shl    ebx,0x17
c0026ae8:	09 c3                	or     ebx,eax
c0026aea:	f6 c2 7f             	test   dl,0x7f
c0026aed:	0f 95 c1             	setne  cl
c0026af0:	09 c8                	or     eax,ecx
c0026af2:	83 e0 01             	and    eax,0x1
c0026af5:	c1 ea 07             	shr    edx,0x7
c0026af8:	21 c2                	and    edx,eax
c0026afa:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026afd:	eb 03                	jmp    c0026b02 <__mulsf3+0x1b9>
c0026aff:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026b02:	89 f0                	mov    eax,esi
c0026b04:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026b07:	5b                   	pop    ebx
c0026b08:	5e                   	pop    esi
c0026b09:	5f                   	pop    edi
c0026b0a:	5d                   	pop    ebp
c0026b0b:	c3                   	ret    

c0026b0c <__divsf3>:
c0026b0c:	55                   	push   ebp
c0026b0d:	89 e5                	mov    ebp,esp
c0026b0f:	57                   	push   edi
c0026b10:	56                   	push   esi
c0026b11:	53                   	push   ebx
c0026b12:	83 ec 1c             	sub    esp,0x1c
c0026b15:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026b18:	89 d8                	mov    eax,ebx
c0026b1a:	89 d9                	mov    ecx,ebx
c0026b1c:	c1 f9 17             	sar    ecx,0x17
c0026b1f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026b22:	c1 e0 08             	shl    eax,0x8
c0026b25:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026b2a:	89 c1                	mov    ecx,eax
c0026b2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b2f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026b32:	89 c7                	mov    edi,eax
c0026b34:	c1 ff 17             	sar    edi,0x17
c0026b37:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026b3b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026b3e:	89 f8                	mov    eax,edi
c0026b40:	0f b6 c0             	movzx  eax,al
c0026b43:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026b46:	29 c6                	sub    esi,eax
c0026b48:	83 c6 7f             	add    esi,0x7f
c0026b4b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026b4e:	42                   	inc    edx
c0026b4f:	80 e2 fe             	and    dl,0xfe
c0026b52:	0f 85 9c 00 00 00    	jne    c0026bf4 <__divsf3+0xe8>
c0026b58:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026b5c:	74 33                	je     c0026b91 <__divsf3+0x85>
c0026b5e:	85 c9                	test   ecx,ecx
c0026b60:	0f 85 c7 01 00 00    	jne    c0026d2d <__divsf3+0x221>
c0026b66:	8d 57 01             	lea    edx,[edi+0x1]
c0026b69:	80 e2 fe             	and    dl,0xfe
c0026b6c:	75 2f                	jne    c0026b9d <__divsf3+0x91>
c0026b6e:	85 c0                	test   eax,eax
c0026b70:	74 2b                	je     c0026b9d <__divsf3+0x91>
c0026b72:	51                   	push   ecx
c0026b73:	51                   	push   ecx
c0026b74:	6a 00                	push   0x0
c0026b76:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b79:	e8 d2 03 00 00       	call   c0026f50 <__nesf2>
c0026b7e:	83 c4 10             	add    esp,0x10
c0026b81:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026b84:	85 c0                	test   eax,eax
c0026b86:	0f 85 a1 01 00 00    	jne    c0026d2d <__divsf3+0x221>
c0026b8c:	e9 92 01 00 00       	jmp    c0026d23 <__divsf3+0x217>
c0026b91:	85 c9                	test   ecx,ecx
c0026b93:	75 1b                	jne    c0026bb0 <__divsf3+0xa4>
c0026b95:	8d 57 01             	lea    edx,[edi+0x1]
c0026b98:	80 e2 fe             	and    dl,0xfe
c0026b9b:	74 1e                	je     c0026bbb <__divsf3+0xaf>
c0026b9d:	85 ff                	test   edi,edi
c0026b9f:	0f 89 88 01 00 00    	jns    c0026d2d <__divsf3+0x221>
c0026ba5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026bab:	e9 7d 01 00 00       	jmp    c0026d2d <__divsf3+0x221>
c0026bb0:	8d 56 ff             	lea    edx,[esi-0x1]
c0026bb3:	01 c9                	add    ecx,ecx
c0026bb5:	78 3d                	js     c0026bf4 <__divsf3+0xe8>
c0026bb7:	89 d6                	mov    esi,edx
c0026bb9:	eb f5                	jmp    c0026bb0 <__divsf3+0xa4>
c0026bbb:	85 c0                	test   eax,eax
c0026bbd:	b8 00 00 00 00       	mov    eax,0x0
c0026bc2:	74 18                	je     c0026bdc <__divsf3+0xd0>
c0026bc4:	52                   	push   edx
c0026bc5:	52                   	push   edx
c0026bc6:	50                   	push   eax
c0026bc7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bca:	e8 81 03 00 00       	call   c0026f50 <__nesf2>
c0026bcf:	83 c4 10             	add    esp,0x10
c0026bd2:	85 c0                	test   eax,eax
c0026bd4:	0f 85 50 01 00 00    	jne    c0026d2a <__divsf3+0x21e>
c0026bda:	eb c1                	jmp    c0026b9d <__divsf3+0x91>
c0026bdc:	56                   	push   esi
c0026bdd:	56                   	push   esi
c0026bde:	50                   	push   eax
c0026bdf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026be2:	e8 69 03 00 00       	call   c0026f50 <__nesf2>
c0026be7:	83 c4 10             	add    esp,0x10
c0026bea:	85 c0                	test   eax,eax
c0026bec:	0f 84 31 01 00 00    	je     c0026d23 <__divsf3+0x217>
c0026bf2:	eb a9                	jmp    c0026b9d <__divsf3+0x91>
c0026bf4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026bf7:	c1 e3 08             	shl    ebx,0x8
c0026bfa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c00:	8d 57 01             	lea    edx,[edi+0x1]
c0026c03:	80 e2 fe             	and    dl,0xfe
c0026c06:	75 71                	jne    c0026c79 <__divsf3+0x16d>
c0026c08:	85 c0                	test   eax,eax
c0026c0a:	ba 00 00 00 00       	mov    edx,0x0
c0026c0f:	74 2f                	je     c0026c40 <__divsf3+0x134>
c0026c11:	51                   	push   ecx
c0026c12:	51                   	push   ecx
c0026c13:	52                   	push   edx
c0026c14:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c17:	e8 f9 02 00 00       	call   c0026f15 <__eqsf2>
c0026c1c:	83 c4 10             	add    esp,0x10
c0026c1f:	85 c0                	test   eax,eax
c0026c21:	0f 85 03 01 00 00    	jne    c0026d2a <__divsf3+0x21e>
c0026c27:	31 d2                	xor    edx,edx
c0026c29:	89 d3                	mov    ebx,edx
c0026c2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026c2e:	31 f8                	xor    eax,edi
c0026c30:	0f 89 f7 00 00 00    	jns    c0026d2d <__divsf3+0x221>
c0026c36:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026c3b:	e9 ed 00 00 00       	jmp    c0026d2d <__divsf3+0x221>
c0026c40:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026c43:	50                   	push   eax
c0026c44:	50                   	push   eax
c0026c45:	52                   	push   edx
c0026c46:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c49:	e8 c7 02 00 00       	call   c0026f15 <__eqsf2>
c0026c4e:	83 c4 10             	add    esp,0x10
c0026c51:	85 c0                	test   eax,eax
c0026c53:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026c56:	75 16                	jne    c0026c6e <__divsf3+0x162>
c0026c58:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026c5b:	31 fb                	xor    ebx,edi
c0026c5d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026c63:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026c69:	e9 bf 00 00 00       	jmp    c0026d2d <__divsf3+0x221>
c0026c6e:	8d 46 01             	lea    eax,[esi+0x1]
c0026c71:	01 db                	add    ebx,ebx
c0026c73:	78 04                	js     c0026c79 <__divsf3+0x16d>
c0026c75:	89 c6                	mov    esi,eax
c0026c77:	eb f5                	jmp    c0026c6e <__divsf3+0x162>
c0026c79:	89 c8                	mov    eax,ecx
c0026c7b:	0d 00 00 00 80       	or     eax,0x80000000
c0026c80:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c86:	31 d2                	xor    edx,edx
c0026c88:	39 d8                	cmp    eax,ebx
c0026c8a:	72 07                	jb     c0026c93 <__divsf3+0x187>
c0026c8c:	29 d8                	sub    eax,ebx
c0026c8e:	ba 01 00 00 00       	mov    edx,0x1
c0026c93:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026c9a:	01 d2                	add    edx,edx
c0026c9c:	89 c1                	mov    ecx,eax
c0026c9e:	01 c0                	add    eax,eax
c0026ca0:	85 c9                	test   ecx,ecx
c0026ca2:	78 04                	js     c0026ca8 <__divsf3+0x19c>
c0026ca4:	39 c3                	cmp    ebx,eax
c0026ca6:	77 05                	ja     c0026cad <__divsf3+0x1a1>
c0026ca8:	29 d8                	sub    eax,ebx
c0026caa:	83 ca 01             	or     edx,0x1
c0026cad:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026cb0:	75 e8                	jne    c0026c9a <__divsf3+0x18e>
c0026cb2:	85 c0                	test   eax,eax
c0026cb4:	0f 95 c0             	setne  al
c0026cb7:	0f b6 c0             	movzx  eax,al
c0026cba:	c1 e2 06             	shl    edx,0x6
c0026cbd:	09 c2                	or     edx,eax
c0026cbf:	78 03                	js     c0026cc4 <__divsf3+0x1b8>
c0026cc1:	01 d2                	add    edx,edx
c0026cc3:	4e                   	dec    esi
c0026cc4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026cca:	7f 22                	jg     c0026cee <__divsf3+0x1e2>
c0026ccc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026cd2:	85 f6                	test   esi,esi
c0026cd4:	7f 23                	jg     c0026cf9 <__divsf3+0x1ed>
c0026cd6:	83 fe e9             	cmp    esi,0xffffffe9
c0026cd9:	7c 1a                	jl     c0026cf5 <__divsf3+0x1e9>
c0026cdb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ce1:	b9 01 00 00 00       	mov    ecx,0x1
c0026ce6:	29 f1                	sub    ecx,esi
c0026ce8:	d3 ea                	shr    edx,cl
c0026cea:	31 f6                	xor    esi,esi
c0026cec:	eb 0b                	jmp    c0026cf9 <__divsf3+0x1ed>
c0026cee:	be ff 00 00 00       	mov    esi,0xff
c0026cf3:	eb 02                	jmp    c0026cf7 <__divsf3+0x1eb>
c0026cf5:	31 f6                	xor    esi,esi
c0026cf7:	31 d2                	xor    edx,edx
c0026cf9:	89 d0                	mov    eax,edx
c0026cfb:	c1 e8 08             	shr    eax,0x8
c0026cfe:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026d01:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026d07:	09 fe                	or     esi,edi
c0026d09:	c1 e6 17             	shl    esi,0x17
c0026d0c:	09 c6                	or     esi,eax
c0026d0e:	f6 c2 7f             	test   dl,0x7f
c0026d11:	0f 95 c1             	setne  cl
c0026d14:	09 c8                	or     eax,ecx
c0026d16:	83 e0 01             	and    eax,0x1
c0026d19:	c1 ea 07             	shr    edx,0x7
c0026d1c:	21 c2                	and    edx,eax
c0026d1e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026d21:	eb 0a                	jmp    c0026d2d <__divsf3+0x221>
c0026d23:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026d28:	eb 03                	jmp    c0026d2d <__divsf3+0x221>
c0026d2a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d2d:	89 d8                	mov    eax,ebx
c0026d2f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026d32:	5b                   	pop    ebx
c0026d33:	5e                   	pop    esi
c0026d34:	5f                   	pop    edi
c0026d35:	5d                   	pop    ebp
c0026d36:	c3                   	ret    

c0026d37 <__floatsisf>:
c0026d37:	55                   	push   ebp
c0026d38:	89 e5                	mov    ebp,esp
c0026d3a:	53                   	push   ebx
c0026d3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026d3e:	85 d2                	test   edx,edx
c0026d40:	7e 2b                	jle    c0026d6d <__floatsisf+0x36>
c0026d42:	0f bd ca             	bsr    ecx,edx
c0026d45:	83 f1 1f             	xor    ecx,0x1f
c0026d48:	d3 e2                	shl    edx,cl
c0026d4a:	89 d0                	mov    eax,edx
c0026d4c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d51:	89 c3                	mov    ebx,eax
c0026d53:	c1 eb 08             	shr    ebx,0x8
c0026d56:	80 e2 7f             	and    dl,0x7f
c0026d59:	0f 95 c2             	setne  dl
c0026d5c:	09 da                	or     edx,ebx
c0026d5e:	83 e2 01             	and    edx,0x1
c0026d61:	c1 e8 07             	shr    eax,0x7
c0026d64:	21 c2                	and    edx,eax
c0026d66:	b8 9e 00 00 00       	mov    eax,0x9e
c0026d6b:	eb 32                	jmp    c0026d9f <__floatsisf+0x68>
c0026d6d:	b8 00 00 00 00       	mov    eax,0x0
c0026d72:	74 34                	je     c0026da8 <__floatsisf+0x71>
c0026d74:	f7 da                	neg    edx
c0026d76:	0f bd ca             	bsr    ecx,edx
c0026d79:	83 f1 1f             	xor    ecx,0x1f
c0026d7c:	d3 e2                	shl    edx,cl
c0026d7e:	89 d0                	mov    eax,edx
c0026d80:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d85:	89 c3                	mov    ebx,eax
c0026d87:	c1 eb 08             	shr    ebx,0x8
c0026d8a:	80 e2 7f             	and    dl,0x7f
c0026d8d:	0f 95 c2             	setne  dl
c0026d90:	09 da                	or     edx,ebx
c0026d92:	83 e2 01             	and    edx,0x1
c0026d95:	c1 e8 07             	shr    eax,0x7
c0026d98:	21 c2                	and    edx,eax
c0026d9a:	b8 9e 01 00 00       	mov    eax,0x19e
c0026d9f:	29 c8                	sub    eax,ecx
c0026da1:	c1 e0 17             	shl    eax,0x17
c0026da4:	09 d8                	or     eax,ebx
c0026da6:	01 d0                	add    eax,edx
c0026da8:	5b                   	pop    ebx
c0026da9:	5d                   	pop    ebp
c0026daa:	c3                   	ret    

c0026dab <__floatunsisf>:
c0026dab:	55                   	push   ebp
c0026dac:	89 e5                	mov    ebp,esp
c0026dae:	53                   	push   ebx
c0026daf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026db2:	31 c0                	xor    eax,eax
c0026db4:	85 d2                	test   edx,edx
c0026db6:	74 32                	je     c0026dea <__floatunsisf+0x3f>
c0026db8:	0f bd ca             	bsr    ecx,edx
c0026dbb:	83 f1 1f             	xor    ecx,0x1f
c0026dbe:	d3 e2                	shl    edx,cl
c0026dc0:	89 d0                	mov    eax,edx
c0026dc2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026dc7:	89 c3                	mov    ebx,eax
c0026dc9:	c1 eb 08             	shr    ebx,0x8
c0026dcc:	80 e2 7f             	and    dl,0x7f
c0026dcf:	0f 95 c2             	setne  dl
c0026dd2:	09 da                	or     edx,ebx
c0026dd4:	83 e2 01             	and    edx,0x1
c0026dd7:	c1 e8 07             	shr    eax,0x7
c0026dda:	21 c2                	and    edx,eax
c0026ddc:	b8 9e 00 00 00       	mov    eax,0x9e
c0026de1:	29 c8                	sub    eax,ecx
c0026de3:	c1 e0 17             	shl    eax,0x17
c0026de6:	09 d8                	or     eax,ebx
c0026de8:	01 d0                	add    eax,edx
c0026dea:	5b                   	pop    ebx
c0026deb:	5d                   	pop    ebp
c0026dec:	c3                   	ret    

c0026ded <__fixsfsi>:
c0026ded:	55                   	push   ebp
c0026dee:	89 e5                	mov    ebp,esp
c0026df0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026df3:	89 d1                	mov    ecx,edx
c0026df5:	c1 e1 08             	shl    ecx,0x8
c0026df8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026dfe:	c1 fa 17             	sar    edx,0x17
c0026e01:	78 1c                	js     c0026e1f <__fixsfsi+0x32>
c0026e03:	83 ea 7f             	sub    edx,0x7f
c0026e06:	31 c0                	xor    eax,eax
c0026e08:	83 fa 1e             	cmp    edx,0x1e
c0026e0b:	77 40                	ja     c0026e4d <__fixsfsi+0x60>
c0026e0d:	89 c8                	mov    eax,ecx
c0026e0f:	0d 00 00 00 80       	or     eax,0x80000000
c0026e14:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026e19:	29 d1                	sub    ecx,edx
c0026e1b:	d3 e8                	shr    eax,cl
c0026e1d:	eb 2e                	jmp    c0026e4d <__fixsfsi+0x60>
c0026e1f:	31 c0                	xor    eax,eax
c0026e21:	81 c2 81 00 00 00    	add    edx,0x81
c0026e27:	78 24                	js     c0026e4d <__fixsfsi+0x60>
c0026e29:	83 fa 1e             	cmp    edx,0x1e
c0026e2c:	7e 09                	jle    c0026e37 <__fixsfsi+0x4a>
c0026e2e:	83 fa 1f             	cmp    edx,0x1f
c0026e31:	75 18                	jne    c0026e4b <__fixsfsi+0x5e>
c0026e33:	85 c9                	test   ecx,ecx
c0026e35:	75 14                	jne    c0026e4b <__fixsfsi+0x5e>
c0026e37:	89 c8                	mov    eax,ecx
c0026e39:	0d 00 00 00 80       	or     eax,0x80000000
c0026e3e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026e43:	29 d1                	sub    ecx,edx
c0026e45:	d3 e8                	shr    eax,cl
c0026e47:	f7 d8                	neg    eax
c0026e49:	eb 02                	jmp    c0026e4d <__fixsfsi+0x60>
c0026e4b:	31 c0                	xor    eax,eax
c0026e4d:	5d                   	pop    ebp
c0026e4e:	c3                   	ret    

c0026e4f <__fixunssfsi>:
c0026e4f:	55                   	push   ebp
c0026e50:	89 e5                	mov    ebp,esp
c0026e52:	53                   	push   ebx
c0026e53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026e56:	89 d3                	mov    ebx,edx
c0026e58:	c1 fb 17             	sar    ebx,0x17
c0026e5b:	83 eb 7f             	sub    ebx,0x7f
c0026e5e:	31 c0                	xor    eax,eax
c0026e60:	83 fb 1f             	cmp    ebx,0x1f
c0026e63:	77 18                	ja     c0026e7d <__fixunssfsi+0x2e>
c0026e65:	89 d0                	mov    eax,edx
c0026e67:	c1 e0 08             	shl    eax,0x8
c0026e6a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e6f:	0d 00 00 00 80       	or     eax,0x80000000
c0026e74:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026e79:	29 d9                	sub    ecx,ebx
c0026e7b:	d3 e8                	shr    eax,cl
c0026e7d:	5b                   	pop    ebx
c0026e7e:	5d                   	pop    ebp
c0026e7f:	c3                   	ret    

c0026e80 <__cmpsf2>:
c0026e80:	55                   	push   ebp
c0026e81:	89 e5                	mov    ebp,esp
c0026e83:	57                   	push   edi
c0026e84:	56                   	push   esi
c0026e85:	53                   	push   ebx
c0026e86:	83 ec 24             	sub    esp,0x24
c0026e89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e8f:	e8 4f 10 00 00       	call   c0027ee3 <__truncdfsf2>
c0026e94:	5a                   	pop    edx
c0026e95:	59                   	pop    ecx
c0026e96:	89 c3                	mov    ebx,eax
c0026e98:	c1 e8 17             	shr    eax,0x17
c0026e9b:	0f b6 f0             	movzx  esi,al
c0026e9e:	89 d8                	mov    eax,ebx
c0026ea0:	c1 e8 1f             	shr    eax,0x1f
c0026ea3:	31 c6                	xor    esi,eax
c0026ea5:	c1 e3 08             	shl    ebx,0x8
c0026ea8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026eab:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026eae:	e8 30 10 00 00       	call   c0027ee3 <__truncdfsf2>
c0026eb3:	83 c4 10             	add    esp,0x10
c0026eb6:	89 c1                	mov    ecx,eax
c0026eb8:	c1 e9 17             	shr    ecx,0x17
c0026ebb:	0f b6 c9             	movzx  ecx,cl
c0026ebe:	89 c7                	mov    edi,eax
c0026ec0:	c1 ef 1f             	shr    edi,0x1f
c0026ec3:	89 ca                	mov    edx,ecx
c0026ec5:	31 fa                	xor    edx,edi
c0026ec7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026eca:	c1 e0 08             	shl    eax,0x8
c0026ecd:	89 c2                	mov    edx,eax
c0026ecf:	89 d8                	mov    eax,ebx
c0026ed1:	09 d0                	or     eax,edx
c0026ed3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ed8:	09 f0                	or     eax,esi
c0026eda:	75 08                	jne    c0026ee4 <__cmpsf2+0x64>
c0026edc:	31 c0                	xor    eax,eax
c0026ede:	39 f9                	cmp    ecx,edi
c0026ee0:	75 0c                	jne    c0026eee <__cmpsf2+0x6e>
c0026ee2:	eb 29                	jmp    c0026f0d <__cmpsf2+0x8d>
c0026ee4:	b8 01 00 00 00       	mov    eax,0x1
c0026ee9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026eec:	7f 1f                	jg     c0026f0d <__cmpsf2+0x8d>
c0026eee:	83 c8 ff             	or     eax,0xffffffff
c0026ef1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026ef4:	7c 17                	jl     c0026f0d <__cmpsf2+0x8d>
c0026ef6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026efc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026f02:	b8 01 00 00 00       	mov    eax,0x1
c0026f07:	39 d3                	cmp    ebx,edx
c0026f09:	77 02                	ja     c0026f0d <__cmpsf2+0x8d>
c0026f0b:	19 c0                	sbb    eax,eax
c0026f0d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f10:	5b                   	pop    ebx
c0026f11:	5e                   	pop    esi
c0026f12:	5f                   	pop    edi
c0026f13:	5d                   	pop    ebp
c0026f14:	c3                   	ret    

c0026f15 <__eqsf2>:
c0026f15:	55                   	push   ebp
c0026f16:	89 e5                	mov    ebp,esp
c0026f18:	83 ec 24             	sub    esp,0x24
c0026f1b:	6a 01                	push   0x1
c0026f1d:	83 ec 0c             	sub    esp,0xc
c0026f20:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f23:	e8 df 10 00 00       	call   c0028007 <__extendsfdf2>
c0026f28:	83 c4 10             	add    esp,0x10
c0026f2b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026f2e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026f31:	52                   	push   edx
c0026f32:	50                   	push   eax
c0026f33:	50                   	push   eax
c0026f34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f37:	e8 cb 10 00 00       	call   c0028007 <__extendsfdf2>
c0026f3c:	59                   	pop    ecx
c0026f3d:	59                   	pop    ecx
c0026f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026f44:	52                   	push   edx
c0026f45:	50                   	push   eax
c0026f46:	e8 35 ff ff ff       	call   c0026e80 <__cmpsf2>
c0026f4b:	83 c4 20             	add    esp,0x20
c0026f4e:	c9                   	leave  
c0026f4f:	c3                   	ret    

c0026f50 <__nesf2>:
c0026f50:	eb c3                	jmp    c0026f15 <__eqsf2>

c0026f52 <__gtsf2>:
c0026f52:	55                   	push   ebp
c0026f53:	89 e5                	mov    ebp,esp
c0026f55:	83 ec 24             	sub    esp,0x24
c0026f58:	6a ff                	push   0xffffffff
c0026f5a:	83 ec 0c             	sub    esp,0xc
c0026f5d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f60:	e8 a2 10 00 00       	call   c0028007 <__extendsfdf2>
c0026f65:	83 c4 10             	add    esp,0x10
c0026f68:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026f6b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026f6e:	52                   	push   edx
c0026f6f:	50                   	push   eax
c0026f70:	50                   	push   eax
c0026f71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f74:	e8 8e 10 00 00       	call   c0028007 <__extendsfdf2>
c0026f79:	59                   	pop    ecx
c0026f7a:	59                   	pop    ecx
c0026f7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026f7e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026f81:	52                   	push   edx
c0026f82:	50                   	push   eax
c0026f83:	e8 f8 fe ff ff       	call   c0026e80 <__cmpsf2>
c0026f88:	83 c4 20             	add    esp,0x20
c0026f8b:	c9                   	leave  
c0026f8c:	c3                   	ret    

c0026f8d <__gesf2>:
c0026f8d:	eb c3                	jmp    c0026f52 <__gtsf2>

c0026f8f <__ltsf2>:
c0026f8f:	eb 84                	jmp    c0026f15 <__eqsf2>

c0026f91 <__lesf2>:
c0026f91:	eb 82                	jmp    c0026f15 <__eqsf2>

c0026f93 <__adddf3>:
c0026f93:	55                   	push   ebp
c0026f94:	89 e5                	mov    ebp,esp
c0026f96:	57                   	push   edi
c0026f97:	56                   	push   esi
c0026f98:	53                   	push   ebx
c0026f99:	83 ec 24             	sub    esp,0x24
c0026f9c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026f9f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026fa2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026fa5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fa8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026fab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026fae:	89 c8                	mov    eax,ecx
c0026fb0:	89 ce                	mov    esi,ecx
c0026fb2:	c1 fe 14             	sar    esi,0x14
c0026fb5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026fb8:	89 fb                	mov    ebx,edi
c0026fba:	89 fa                	mov    edx,edi
c0026fbc:	c1 e2 0b             	shl    edx,0xb
c0026fbf:	c1 e0 0b             	shl    eax,0xb
c0026fc2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026fc7:	c1 eb 15             	shr    ebx,0x15
c0026fca:	09 d8                	or     eax,ebx
c0026fcc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026fcf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026fd2:	c1 fe 14             	sar    esi,0x14
c0026fd5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026fd8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fdb:	89 f3                	mov    ebx,esi
c0026fdd:	c1 e3 0b             	shl    ebx,0xb
c0026fe0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026fe3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026fe6:	c1 e3 0b             	shl    ebx,0xb
c0026fe9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026fef:	c1 ee 15             	shr    esi,0x15
c0026ff2:	09 f3                	or     ebx,esi
c0026ff4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026ff7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026ffa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026ffd:	0f 88 5f 02 00 00    	js     c0027262 <__adddf3+0x2cf>
c0027003:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027006:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027009:	85 db                	test   ebx,ebx
c002700b:	0f 8e c7 00 00 00    	jle    c00270d8 <__adddf3+0x145>
c0027011:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027018:	75 1a                	jne    c0027034 <__adddf3+0xa1>
c002701a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002701d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027020:	0f 84 b2 05 00 00    	je     c00275d8 <__adddf3+0x645>
c0027026:	4b                   	dec    ebx
c0027027:	75 23                	jne    c002704c <__adddf3+0xb9>
c0027029:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002702c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002702f:	e9 99 00 00 00       	jmp    c00270cd <__adddf3+0x13a>
c0027034:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027037:	f7 d6                	not    esi
c0027039:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002703f:	0f 84 93 05 00 00    	je     c00275d8 <__adddf3+0x645>
c0027045:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002704c:	83 fb 1f             	cmp    ebx,0x1f
c002704f:	7e 42                	jle    c0027093 <__adddf3+0x100>
c0027051:	83 fb 3f             	cmp    ebx,0x3f
c0027054:	0f 8f 7e 05 00 00    	jg     c00275d8 <__adddf3+0x645>
c002705a:	83 e3 1f             	and    ebx,0x1f
c002705d:	89 d9                	mov    ecx,ebx
c002705f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027062:	d3 ef                	shr    edi,cl
c0027064:	31 db                	xor    ebx,ebx
c0027066:	85 c9                	test   ecx,ecx
c0027068:	74 15                	je     c002707f <__adddf3+0xec>
c002706a:	be 20 00 00 00       	mov    esi,0x20
c002706f:	29 ce                	sub    esi,ecx
c0027071:	89 f1                	mov    ecx,esi
c0027073:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027076:	d3 e6                	shl    esi,cl
c0027078:	31 db                	xor    ebx,ebx
c002707a:	85 f6                	test   esi,esi
c002707c:	0f 95 c3             	setne  bl
c002707f:	31 c9                	xor    ecx,ecx
c0027081:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027085:	0f 95 c1             	setne  cl
c0027088:	09 cf                	or     edi,ecx
c002708a:	09 fb                	or     ebx,edi
c002708c:	01 da                	add    edx,ebx
c002708e:	83 d0 00             	adc    eax,0x0
c0027091:	eb 3a                	jmp    c00270cd <__adddf3+0x13a>
c0027093:	bf 20 00 00 00       	mov    edi,0x20
c0027098:	29 df                	sub    edi,ebx
c002709a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002709d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00270a0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00270a3:	d3 e6                	shl    esi,cl
c00270a5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00270a8:	88 d9                	mov    cl,bl
c00270aa:	d3 ef                	shr    edi,cl
c00270ac:	09 fe                	or     esi,edi
c00270ae:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00270b1:	88 d9                	mov    cl,bl
c00270b3:	d3 ef                	shr    edi,cl
c00270b5:	89 fb                	mov    ebx,edi
c00270b7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00270ba:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00270bd:	d3 e7                	shl    edi,cl
c00270bf:	85 ff                	test   edi,edi
c00270c1:	0f 95 c1             	setne  cl
c00270c4:	0f b6 c9             	movzx  ecx,cl
c00270c7:	09 ce                	or     esi,ecx
c00270c9:	01 f2                	add    edx,esi
c00270cb:	11 d8                	adc    eax,ebx
c00270cd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00270d0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00270d3:	e9 52 01 00 00       	jmp    c002722a <__adddf3+0x297>
c00270d8:	0f 84 d5 00 00 00    	je     c00271b3 <__adddf3+0x220>
c00270de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00270e1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00270e4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00270e7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00270ea:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00270f1:	75 20                	jne    c0027113 <__adddf3+0x180>
c00270f3:	89 d6                	mov    esi,edx
c00270f5:	09 c6                	or     esi,eax
c00270f7:	0f 84 db 04 00 00    	je     c00275d8 <__adddf3+0x645>
c00270fd:	4b                   	dec    ebx
c00270fe:	75 29                	jne    c0027129 <__adddf3+0x196>
c0027100:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027103:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027106:	01 d1                	add    ecx,edx
c0027108:	11 c6                	adc    esi,eax
c002710a:	89 f0                	mov    eax,esi
c002710c:	89 ca                	mov    edx,ecx
c002710e:	e9 17 01 00 00       	jmp    c002722a <__adddf3+0x297>
c0027113:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027116:	f7 d6                	not    esi
c0027118:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002711e:	0f 84 b4 04 00 00    	je     c00275d8 <__adddf3+0x645>
c0027124:	0d 00 00 00 80       	or     eax,0x80000000
c0027129:	83 fb 1f             	cmp    ebx,0x1f
c002712c:	7e 48                	jle    c0027176 <__adddf3+0x1e3>
c002712e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027131:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027134:	83 fb 3f             	cmp    ebx,0x3f
c0027137:	0f 8f 9b 04 00 00    	jg     c00275d8 <__adddf3+0x645>
c002713d:	83 e3 1f             	and    ebx,0x1f
c0027140:	89 d9                	mov    ecx,ebx
c0027142:	89 c7                	mov    edi,eax
c0027144:	d3 ef                	shr    edi,cl
c0027146:	31 db                	xor    ebx,ebx
c0027148:	85 c9                	test   ecx,ecx
c002714a:	74 12                	je     c002715e <__adddf3+0x1cb>
c002714c:	be 20 00 00 00       	mov    esi,0x20
c0027151:	29 ce                	sub    esi,ecx
c0027153:	89 f1                	mov    ecx,esi
c0027155:	d3 e0                	shl    eax,cl
c0027157:	31 db                	xor    ebx,ebx
c0027159:	85 c0                	test   eax,eax
c002715b:	0f 95 c3             	setne  bl
c002715e:	31 c0                	xor    eax,eax
c0027160:	85 d2                	test   edx,edx
c0027162:	0f 95 c0             	setne  al
c0027165:	09 c7                	or     edi,eax
c0027167:	09 fb                	or     ebx,edi
c0027169:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002716c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002716f:	01 da                	add    edx,ebx
c0027171:	83 d6 00             	adc    esi,0x0
c0027174:	eb 39                	jmp    c00271af <__adddf3+0x21c>
c0027176:	be 20 00 00 00       	mov    esi,0x20
c002717b:	29 de                	sub    esi,ebx
c002717d:	89 c7                	mov    edi,eax
c002717f:	89 f1                	mov    ecx,esi
c0027181:	d3 e7                	shl    edi,cl
c0027183:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027186:	89 d7                	mov    edi,edx
c0027188:	88 d9                	mov    cl,bl
c002718a:	d3 ef                	shr    edi,cl
c002718c:	89 f9                	mov    ecx,edi
c002718e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027191:	09 cf                	or     edi,ecx
c0027193:	88 d9                	mov    cl,bl
c0027195:	d3 e8                	shr    eax,cl
c0027197:	89 f1                	mov    ecx,esi
c0027199:	d3 e2                	shl    edx,cl
c002719b:	85 d2                	test   edx,edx
c002719d:	0f 95 c2             	setne  dl
c00271a0:	0f b6 d2             	movzx  edx,dl
c00271a3:	09 d7                	or     edi,edx
c00271a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271a8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00271ab:	01 fa                	add    edx,edi
c00271ad:	11 c6                	adc    esi,eax
c00271af:	89 f0                	mov    eax,esi
c00271b1:	eb 77                	jmp    c002722a <__adddf3+0x297>
c00271b3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00271b6:	46                   	inc    esi
c00271b7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00271ba:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00271c0:	75 41                	jne    c0027203 <__adddf3+0x270>
c00271c2:	89 d3                	mov    ebx,edx
c00271c4:	09 c3                	or     ebx,eax
c00271c6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00271cd:	75 27                	jne    c00271f6 <__adddf3+0x263>
c00271cf:	85 db                	test   ebx,ebx
c00271d1:	0f 84 fb 03 00 00    	je     c00275d2 <__adddf3+0x63f>
c00271d7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271da:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00271dd:	0f 84 f5 03 00 00    	je     c00275d8 <__adddf3+0x645>
c00271e3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00271e6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00271e9:	85 c0                	test   eax,eax
c00271eb:	0f 89 91 03 00 00    	jns    c0027582 <__adddf3+0x5ef>
c00271f1:	e9 85 03 00 00       	jmp    c002757b <__adddf3+0x5e8>
c00271f6:	85 db                	test   ebx,ebx
c00271f8:	0f 85 da 03 00 00    	jne    c00275d8 <__adddf3+0x645>
c00271fe:	e9 cf 03 00 00       	jmp    c00275d2 <__adddf3+0x63f>
c0027203:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027206:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027209:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002720c:	f7 d1                	not    ecx
c002720e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027214:	0f 84 70 03 00 00    	je     c002758a <__adddf3+0x5f7>
c002721a:	d1 ea                	shr    edx,1
c002721c:	89 c1                	mov    ecx,eax
c002721e:	c1 e1 1f             	shl    ecx,0x1f
c0027221:	09 ca                	or     edx,ecx
c0027223:	d1 e8                	shr    eax,1
c0027225:	e9 6f 03 00 00       	jmp    c0027599 <__adddf3+0x606>
c002722a:	85 c0                	test   eax,eax
c002722c:	0f 89 67 03 00 00    	jns    c0027599 <__adddf3+0x606>
c0027232:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027235:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027238:	f7 d1                	not    ecx
c002723a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027240:	0f 84 44 03 00 00    	je     c002758a <__adddf3+0x5f7>
c0027246:	89 d1                	mov    ecx,edx
c0027248:	d1 e9                	shr    ecx,1
c002724a:	83 e2 01             	and    edx,0x1
c002724d:	09 ca                	or     edx,ecx
c002724f:	89 c1                	mov    ecx,eax
c0027251:	c1 e1 1f             	shl    ecx,0x1f
c0027254:	09 ca                	or     edx,ecx
c0027256:	d1 e8                	shr    eax,1
c0027258:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002725d:	e9 37 03 00 00       	jmp    c0027599 <__adddf3+0x606>
c0027262:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027265:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002726b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002726e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027271:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027277:	29 de                	sub    esi,ebx
c0027279:	85 f6                	test   esi,esi
c002727b:	0f 8e bd 00 00 00    	jle    c002733e <__adddf3+0x3ab>
c0027281:	85 db                	test   ebx,ebx
c0027283:	75 17                	jne    c002729c <__adddf3+0x309>
c0027285:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027288:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002728b:	0f 84 47 03 00 00    	je     c00275d8 <__adddf3+0x645>
c0027291:	4e                   	dec    esi
c0027292:	75 20                	jne    c00272b4 <__adddf3+0x321>
c0027294:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027297:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002729a:	eb 5b                	jmp    c00272f7 <__adddf3+0x364>
c002729c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002729f:	f7 d3                	not    ebx
c00272a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00272a7:	0f 84 2b 03 00 00    	je     c00275d8 <__adddf3+0x645>
c00272ad:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00272b4:	83 fe 1f             	cmp    esi,0x1f
c00272b7:	7e 49                	jle    c0027302 <__adddf3+0x36f>
c00272b9:	83 fe 3f             	cmp    esi,0x3f
c00272bc:	0f 8f 16 03 00 00    	jg     c00275d8 <__adddf3+0x645>
c00272c2:	83 e6 1f             	and    esi,0x1f
c00272c5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00272c8:	89 f1                	mov    ecx,esi
c00272ca:	d3 ef                	shr    edi,cl
c00272cc:	31 db                	xor    ebx,ebx
c00272ce:	85 f6                	test   esi,esi
c00272d0:	74 13                	je     c00272e5 <__adddf3+0x352>
c00272d2:	b9 20 00 00 00       	mov    ecx,0x20
c00272d7:	29 f1                	sub    ecx,esi
c00272d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272dc:	d3 e6                	shl    esi,cl
c00272de:	31 db                	xor    ebx,ebx
c00272e0:	85 f6                	test   esi,esi
c00272e2:	0f 95 c3             	setne  bl
c00272e5:	31 c9                	xor    ecx,ecx
c00272e7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00272eb:	0f 95 c1             	setne  cl
c00272ee:	09 cf                	or     edi,ecx
c00272f0:	09 fb                	or     ebx,edi
c00272f2:	29 da                	sub    edx,ebx
c00272f4:	83 d8 00             	sbb    eax,0x0
c00272f7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272fa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272fd:	e9 aa 01 00 00       	jmp    c00274ac <__adddf3+0x519>
c0027302:	bf 20 00 00 00       	mov    edi,0x20
c0027307:	29 f7                	sub    edi,esi
c0027309:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002730c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002730f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027312:	d3 e3                	shl    ebx,cl
c0027314:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027317:	89 f1                	mov    ecx,esi
c0027319:	d3 ef                	shr    edi,cl
c002731b:	09 fb                	or     ebx,edi
c002731d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027320:	89 f1                	mov    ecx,esi
c0027322:	d3 ef                	shr    edi,cl
c0027324:	89 fe                	mov    esi,edi
c0027326:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027329:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002732c:	d3 e7                	shl    edi,cl
c002732e:	85 ff                	test   edi,edi
c0027330:	0f 95 c1             	setne  cl
c0027333:	0f b6 c9             	movzx  ecx,cl
c0027336:	09 cb                	or     ebx,ecx
c0027338:	29 da                	sub    edx,ebx
c002733a:	19 f0                	sbb    eax,esi
c002733c:	eb b9                	jmp    c00272f7 <__adddf3+0x364>
c002733e:	0f 84 cd 00 00 00    	je     c0027411 <__adddf3+0x47e>
c0027344:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027347:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002734a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002734d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027351:	75 1b                	jne    c002736e <__adddf3+0x3db>
c0027353:	89 d6                	mov    esi,edx
c0027355:	09 c6                	or     esi,eax
c0027357:	0f 84 7b 02 00 00    	je     c00275d8 <__adddf3+0x645>
c002735d:	4b                   	dec    ebx
c002735e:	75 24                	jne    c0027384 <__adddf3+0x3f1>
c0027360:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027363:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027366:	29 d1                	sub    ecx,edx
c0027368:	19 c6                	sbb    esi,eax
c002736a:	89 ca                	mov    edx,ecx
c002736c:	eb 61                	jmp    c00273cf <__adddf3+0x43c>
c002736e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027371:	f7 d6                	not    esi
c0027373:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027379:	0f 84 59 02 00 00    	je     c00275d8 <__adddf3+0x645>
c002737f:	0d 00 00 00 80       	or     eax,0x80000000
c0027384:	83 fb 1f             	cmp    ebx,0x1f
c0027387:	7e 4d                	jle    c00273d6 <__adddf3+0x443>
c0027389:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002738c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002738f:	83 fb 3f             	cmp    ebx,0x3f
c0027392:	0f 8f 40 02 00 00    	jg     c00275d8 <__adddf3+0x645>
c0027398:	83 e3 1f             	and    ebx,0x1f
c002739b:	89 d9                	mov    ecx,ebx
c002739d:	89 c7                	mov    edi,eax
c002739f:	d3 ef                	shr    edi,cl
c00273a1:	31 db                	xor    ebx,ebx
c00273a3:	85 c9                	test   ecx,ecx
c00273a5:	74 12                	je     c00273b9 <__adddf3+0x426>
c00273a7:	be 20 00 00 00       	mov    esi,0x20
c00273ac:	29 ce                	sub    esi,ecx
c00273ae:	89 f1                	mov    ecx,esi
c00273b0:	d3 e0                	shl    eax,cl
c00273b2:	31 db                	xor    ebx,ebx
c00273b4:	85 c0                	test   eax,eax
c00273b6:	0f 95 c3             	setne  bl
c00273b9:	31 c0                	xor    eax,eax
c00273bb:	85 d2                	test   edx,edx
c00273bd:	0f 95 c0             	setne  al
c00273c0:	09 c7                	or     edi,eax
c00273c2:	09 fb                	or     ebx,edi
c00273c4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273c7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00273ca:	29 da                	sub    edx,ebx
c00273cc:	83 de 00             	sbb    esi,0x0
c00273cf:	89 f0                	mov    eax,esi
c00273d1:	e9 d6 00 00 00       	jmp    c00274ac <__adddf3+0x519>
c00273d6:	be 20 00 00 00       	mov    esi,0x20
c00273db:	29 de                	sub    esi,ebx
c00273dd:	89 c7                	mov    edi,eax
c00273df:	89 f1                	mov    ecx,esi
c00273e1:	d3 e7                	shl    edi,cl
c00273e3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00273e6:	89 d7                	mov    edi,edx
c00273e8:	88 d9                	mov    cl,bl
c00273ea:	d3 ef                	shr    edi,cl
c00273ec:	89 f9                	mov    ecx,edi
c00273ee:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273f1:	09 cf                	or     edi,ecx
c00273f3:	88 d9                	mov    cl,bl
c00273f5:	d3 e8                	shr    eax,cl
c00273f7:	89 f1                	mov    ecx,esi
c00273f9:	d3 e2                	shl    edx,cl
c00273fb:	85 d2                	test   edx,edx
c00273fd:	0f 95 c2             	setne  dl
c0027400:	0f b6 d2             	movzx  edx,dl
c0027403:	09 d7                	or     edi,edx
c0027405:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027408:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002740b:	29 fa                	sub    edx,edi
c002740d:	19 c6                	sbb    esi,eax
c002740f:	eb be                	jmp    c00273cf <__adddf3+0x43c>
c0027411:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027414:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027417:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002741d:	75 6a                	jne    c0027489 <__adddf3+0x4f6>
c002741f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027423:	75 58                	jne    c002747d <__adddf3+0x4ea>
c0027425:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027428:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002742b:	89 d6                	mov    esi,edx
c002742d:	09 c6                	or     esi,eax
c002742f:	75 17                	jne    c0027448 <__adddf3+0x4b5>
c0027431:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027434:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027437:	85 db                	test   ebx,ebx
c0027439:	0f 85 99 01 00 00    	jne    c00275d8 <__adddf3+0x645>
c002743f:	31 ff                	xor    edi,edi
c0027441:	31 c9                	xor    ecx,ecx
c0027443:	e9 90 01 00 00       	jmp    c00275d8 <__adddf3+0x645>
c0027448:	85 db                	test   ebx,ebx
c002744a:	0f 84 88 01 00 00    	je     c00275d8 <__adddf3+0x645>
c0027450:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027453:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027456:	85 c0                	test   eax,eax
c0027458:	79 10                	jns    c002746a <__adddf3+0x4d7>
c002745a:	31 c9                	xor    ecx,ecx
c002745c:	f7 da                	neg    edx
c002745e:	0f 95 c1             	setne  cl
c0027461:	01 c8                	add    eax,ecx
c0027463:	f7 d8                	neg    eax
c0027465:	e9 2f 01 00 00       	jmp    c0027599 <__adddf3+0x606>
c002746a:	31 ff                	xor    edi,edi
c002746c:	31 c9                	xor    ecx,ecx
c002746e:	89 c3                	mov    ebx,eax
c0027470:	09 d3                	or     ebx,edx
c0027472:	0f 84 60 01 00 00    	je     c00275d8 <__adddf3+0x645>
c0027478:	e9 05 01 00 00       	jmp    c0027582 <__adddf3+0x5ef>
c002747d:	31 ff                	xor    edi,edi
c002747f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027484:	e9 4f 01 00 00       	jmp    c00275d8 <__adddf3+0x645>
c0027489:	89 c1                	mov    ecx,eax
c002748b:	89 d0                	mov    eax,edx
c002748d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027490:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027493:	89 ca                	mov    edx,ecx
c0027495:	85 c9                	test   ecx,ecx
c0027497:	79 2c                	jns    c00274c5 <__adddf3+0x532>
c0027499:	31 c9                	xor    ecx,ecx
c002749b:	f7 d8                	neg    eax
c002749d:	0f 95 c1             	setne  cl
c00274a0:	01 ca                	add    edx,ecx
c00274a2:	f7 da                	neg    edx
c00274a4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00274a7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00274aa:	eb 19                	jmp    c00274c5 <__adddf3+0x532>
c00274ac:	85 c0                	test   eax,eax
c00274ae:	0f 89 e5 00 00 00    	jns    c0027599 <__adddf3+0x606>
c00274b4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00274b9:	89 c1                	mov    ecx,eax
c00274bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00274be:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00274c1:	89 d0                	mov    eax,edx
c00274c3:	89 ca                	mov    edx,ecx
c00274c5:	85 d2                	test   edx,edx
c00274c7:	74 59                	je     c0027522 <__adddf3+0x58f>
c00274c9:	0f bd da             	bsr    ebx,edx
c00274cc:	83 f3 1f             	xor    ebx,0x1f
c00274cf:	88 d9                	mov    cl,bl
c00274d1:	d3 e2                	shl    edx,cl
c00274d3:	bf 20 00 00 00       	mov    edi,0x20
c00274d8:	89 f9                	mov    ecx,edi
c00274da:	29 d9                	sub    ecx,ebx
c00274dc:	89 c6                	mov    esi,eax
c00274de:	d3 ee                	shr    esi,cl
c00274e0:	09 d6                	or     esi,edx
c00274e2:	88 d9                	mov    cl,bl
c00274e4:	d3 e0                	shl    eax,cl
c00274e6:	89 c2                	mov    edx,eax
c00274e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00274eb:	25 ff 07 00 00       	and    eax,0x7ff
c00274f0:	39 d8                	cmp    eax,ebx
c00274f2:	7f 22                	jg     c0027516 <__adddf3+0x583>
c00274f4:	29 c3                	sub    ebx,eax
c00274f6:	43                   	inc    ebx
c00274f7:	88 d9                	mov    cl,bl
c00274f9:	d3 ea                	shr    edx,cl
c00274fb:	29 df                	sub    edi,ebx
c00274fd:	89 f9                	mov    ecx,edi
c00274ff:	89 f0                	mov    eax,esi
c0027501:	d3 e0                	shl    eax,cl
c0027503:	09 c2                	or     edx,eax
c0027505:	89 f0                	mov    eax,esi
c0027507:	88 d9                	mov    cl,bl
c0027509:	d3 e8                	shr    eax,cl
c002750b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002750e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027514:	eb 6f                	jmp    c0027585 <__adddf3+0x5f2>
c0027516:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027519:	29 d8                	sub    eax,ebx
c002751b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002751e:	89 f0                	mov    eax,esi
c0027520:	eb 59                	jmp    c002757b <__adddf3+0x5e8>
c0027522:	85 c0                	test   eax,eax
c0027524:	74 6a                	je     c0027590 <__adddf3+0x5fd>
c0027526:	0f bd c8             	bsr    ecx,eax
c0027529:	83 f1 1f             	xor    ecx,0x1f
c002752c:	d3 e0                	shl    eax,cl
c002752e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027531:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027537:	83 c1 20             	add    ecx,0x20
c002753a:	39 cb                	cmp    ebx,ecx
c002753c:	7f 35                	jg     c0027573 <__adddf3+0x5e0>
c002753e:	29 d9                	sub    ecx,ebx
c0027540:	8d 71 01             	lea    esi,[ecx+0x1]
c0027543:	83 fe 1f             	cmp    esi,0x1f
c0027546:	7e 09                	jle    c0027551 <__adddf3+0x5be>
c0027548:	83 e9 1f             	sub    ecx,0x1f
c002754b:	d3 e8                	shr    eax,cl
c002754d:	89 c3                	mov    ebx,eax
c002754f:	eb 11                	jmp    c0027562 <__adddf3+0x5cf>
c0027551:	b9 20 00 00 00       	mov    ecx,0x20
c0027556:	29 f1                	sub    ecx,esi
c0027558:	89 c3                	mov    ebx,eax
c002755a:	d3 e3                	shl    ebx,cl
c002755c:	89 f1                	mov    ecx,esi
c002755e:	d3 e8                	shr    eax,cl
c0027560:	89 c2                	mov    edx,eax
c0027562:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027565:	25 00 f8 ff ff       	and    eax,0xfffff800
c002756a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002756d:	89 d0                	mov    eax,edx
c002756f:	89 da                	mov    edx,ebx
c0027571:	eb 26                	jmp    c0027599 <__adddf3+0x606>
c0027573:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027576:	29 cf                	sub    edi,ecx
c0027578:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002757b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027580:	eb 17                	jmp    c0027599 <__adddf3+0x606>
c0027582:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027585:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027588:	eb 0f                	jmp    c0027599 <__adddf3+0x606>
c002758a:	31 d2                	xor    edx,edx
c002758c:	31 c0                	xor    eax,eax
c002758e:	eb 09                	jmp    c0027599 <__adddf3+0x606>
c0027590:	89 c2                	mov    edx,eax
c0027592:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027599:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002759c:	c1 e1 14             	shl    ecx,0x14
c002759f:	89 c3                	mov    ebx,eax
c00275a1:	c1 eb 0b             	shr    ebx,0xb
c00275a4:	09 d9                	or     ecx,ebx
c00275a6:	89 d3                	mov    ebx,edx
c00275a8:	c1 eb 0b             	shr    ebx,0xb
c00275ab:	c1 e0 15             	shl    eax,0x15
c00275ae:	09 d8                	or     eax,ebx
c00275b0:	89 c7                	mov    edi,eax
c00275b2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00275b8:	0f 95 c0             	setne  al
c00275bb:	89 c6                	mov    esi,eax
c00275bd:	09 f3                	or     ebx,esi
c00275bf:	83 e3 01             	and    ebx,0x1
c00275c2:	c1 ea 0a             	shr    edx,0xa
c00275c5:	21 da                	and    edx,ebx
c00275c7:	89 f8                	mov    eax,edi
c00275c9:	01 d0                	add    eax,edx
c00275cb:	83 d1 00             	adc    ecx,0x0
c00275ce:	89 c7                	mov    edi,eax
c00275d0:	eb 06                	jmp    c00275d8 <__adddf3+0x645>
c00275d2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275d5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275d8:	89 f8                	mov    eax,edi
c00275da:	89 ca                	mov    edx,ecx
c00275dc:	83 c4 24             	add    esp,0x24
c00275df:	5b                   	pop    ebx
c00275e0:	5e                   	pop    esi
c00275e1:	5f                   	pop    edi
c00275e2:	5d                   	pop    ebp
c00275e3:	c3                   	ret    

c00275e4 <__subdf3>:
c00275e4:	55                   	push   ebp
c00275e5:	89 e5                	mov    ebp,esp
c00275e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00275ea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00275ed:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00275f3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00275f6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00275f9:	5d                   	pop    ebp
c00275fa:	e9 94 f9 ff ff       	jmp    c0026f93 <__adddf3>

c00275ff <__negdf2>:
c00275ff:	55                   	push   ebp
c0027600:	89 e5                	mov    ebp,esp
c0027602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027605:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027608:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002760e:	5d                   	pop    ebp
c002760f:	c3                   	ret    

c0027610 <__muldf3>:
c0027610:	55                   	push   ebp
c0027611:	89 e5                	mov    ebp,esp
c0027613:	57                   	push   edi
c0027614:	56                   	push   esi
c0027615:	53                   	push   ebx
c0027616:	83 ec 24             	sub    esp,0x24
c0027619:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002761c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002761f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027622:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027625:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027628:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002762b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002762e:	89 c8                	mov    eax,ecx
c0027630:	c1 f8 14             	sar    eax,0x14
c0027633:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027636:	89 f8                	mov    eax,edi
c0027638:	89 fb                	mov    ebx,edi
c002763a:	c1 e3 0b             	shl    ebx,0xb
c002763d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027640:	c1 e1 0b             	shl    ecx,0xb
c0027643:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027649:	c1 e8 15             	shr    eax,0x15
c002764c:	09 c1                	or     ecx,eax
c002764e:	89 d6                	mov    esi,edx
c0027650:	89 d0                	mov    eax,edx
c0027652:	c1 f8 14             	sar    eax,0x14
c0027655:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027658:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002765b:	89 c3                	mov    ebx,eax
c002765d:	c1 e3 0b             	shl    ebx,0xb
c0027660:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027663:	c1 e6 0b             	shl    esi,0xb
c0027666:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002766c:	c1 e8 15             	shr    eax,0x15
c002766f:	09 c6                	or     esi,eax
c0027671:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027674:	25 ff 07 00 00       	and    eax,0x7ff
c0027679:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002767c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002767f:	25 ff 07 00 00       	and    eax,0x7ff
c0027684:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027687:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002768a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002768d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027694:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027697:	40                   	inc    eax
c0027698:	a9 fe 07 00 00       	test   eax,0x7fe
c002769d:	0f 85 8d 00 00 00    	jne    c0027730 <__muldf3+0x120>
c00276a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276a6:	09 c8                	or     eax,ecx
c00276a8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00276ac:	74 44                	je     c00276f2 <__muldf3+0xe2>
c00276ae:	85 c0                	test   eax,eax
c00276b0:	0f 85 31 02 00 00    	jne    c00278e7 <__muldf3+0x2d7>
c00276b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00276b9:	40                   	inc    eax
c00276ba:	a9 fe 07 00 00       	test   eax,0x7fe
c00276bf:	75 13                	jne    c00276d4 <__muldf3+0xc4>
c00276c1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276c4:	09 f1                	or     ecx,esi
c00276c6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00276ca:	74 22                	je     c00276ee <__muldf3+0xde>
c00276cc:	85 c9                	test   ecx,ecx
c00276ce:	0f 85 0d 02 00 00    	jne    c00278e1 <__muldf3+0x2d1>
c00276d4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00276d8:	0f 89 09 02 00 00    	jns    c00278e7 <__muldf3+0x2d7>
c00276de:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00276e1:	05 00 00 00 80       	add    eax,0x80000000
c00276e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00276e9:	e9 f9 01 00 00       	jmp    c00278e7 <__muldf3+0x2d7>
c00276ee:	85 c9                	test   ecx,ecx
c00276f0:	eb 2e                	jmp    c0027720 <__muldf3+0x110>
c00276f2:	85 c0                	test   eax,eax
c00276f4:	74 20                	je     c0027716 <__muldf3+0x106>
c00276f6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00276f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00276fc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276ff:	c1 ef 1f             	shr    edi,0x1f
c0027702:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027705:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027708:	8d 43 ff             	lea    eax,[ebx-0x1]
c002770b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002770e:	09 f9                	or     ecx,edi
c0027710:	78 1e                	js     c0027730 <__muldf3+0x120>
c0027712:	89 c3                	mov    ebx,eax
c0027714:	eb e0                	jmp    c00276f6 <__muldf3+0xe6>
c0027716:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027719:	f7 d0                	not    eax
c002771b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027720:	75 b2                	jne    c00276d4 <__muldf3+0xc4>
c0027722:	31 ff                	xor    edi,edi
c0027724:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002772b:	e9 b7 01 00 00       	jmp    c00278e7 <__muldf3+0x2d7>
c0027730:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027733:	40                   	inc    eax
c0027734:	a9 fe 07 00 00       	test   eax,0x7fe
c0027739:	75 57                	jne    c0027792 <__muldf3+0x182>
c002773b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002773e:	09 f0                	or     eax,esi
c0027740:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027744:	74 23                	je     c0027769 <__muldf3+0x159>
c0027746:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002774a:	0f 89 91 01 00 00    	jns    c00278e1 <__muldf3+0x2d1>
c0027750:	85 c0                	test   eax,eax
c0027752:	0f 85 89 01 00 00    	jne    c00278e1 <__muldf3+0x2d1>
c0027758:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002775b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027761:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027764:	e9 7e 01 00 00       	jmp    c00278e7 <__muldf3+0x2d7>
c0027769:	85 c0                	test   eax,eax
c002776b:	75 0c                	jne    c0027779 <__muldf3+0x169>
c002776d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027771:	0f 89 6a 01 00 00    	jns    c00278e1 <__muldf3+0x2d1>
c0027777:	eb df                	jmp    c0027758 <__muldf3+0x148>
c0027779:	01 f6                	add    esi,esi
c002777b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002777e:	c1 ea 1f             	shr    edx,0x1f
c0027781:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027784:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027787:	8d 43 ff             	lea    eax,[ebx-0x1]
c002778a:	09 d6                	or     esi,edx
c002778c:	78 04                	js     c0027792 <__muldf3+0x182>
c002778e:	89 c3                	mov    ebx,eax
c0027790:	eb e7                	jmp    c0027779 <__muldf3+0x169>
c0027792:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027798:	81 ce 00 00 00 80    	or     esi,0x80000000
c002779e:	89 c8                	mov    eax,ecx
c00277a0:	f7 e6                	mul    esi
c00277a2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00277a5:	89 c7                	mov    edi,eax
c00277a7:	89 c8                	mov    eax,ecx
c00277a9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00277ac:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00277af:	89 c1                	mov    ecx,eax
c00277b1:	89 f0                	mov    eax,esi
c00277b3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00277b6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00277b9:	89 c6                	mov    esi,eax
c00277bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277be:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00277c1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00277c4:	31 c0                	xor    eax,eax
c00277c6:	01 f1                	add    ecx,esi
c00277c8:	0f 92 c0             	setb   al
c00277cb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00277ce:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00277d1:	83 d6 00             	adc    esi,0x0
c00277d4:	01 c7                	add    edi,eax
c00277d6:	83 d6 00             	adc    esi,0x0
c00277d9:	01 ca                	add    edx,ecx
c00277db:	0f 92 c1             	setb   cl
c00277de:	0f b6 c9             	movzx  ecx,cl
c00277e1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00277e4:	83 d6 00             	adc    esi,0x0
c00277e7:	01 cf                	add    edi,ecx
c00277e9:	83 d6 00             	adc    esi,0x0
c00277ec:	31 c9                	xor    ecx,ecx
c00277ee:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00277f1:	0f 95 c1             	setne  cl
c00277f4:	09 cf                	or     edi,ecx
c00277f6:	85 f6                	test   esi,esi
c00277f8:	78 0c                	js     c0027806 <__muldf3+0x1f6>
c00277fa:	01 f6                	add    esi,esi
c00277fc:	89 f8                	mov    eax,edi
c00277fe:	c1 e8 1f             	shr    eax,0x1f
c0027801:	09 c6                	or     esi,eax
c0027803:	01 ff                	add    edi,edi
c0027805:	4b                   	dec    ebx
c0027806:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002780c:	0f 8f 85 00 00 00    	jg     c0027897 <__muldf3+0x287>
c0027812:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027818:	85 db                	test   ebx,ebx
c002781a:	0f 8f 84 00 00 00    	jg     c00278a4 <__muldf3+0x294>
c0027820:	83 fb cc             	cmp    ebx,0xffffffcc
c0027823:	7c 79                	jl     c002789e <__muldf3+0x28e>
c0027825:	ba 01 00 00 00       	mov    edx,0x1
c002782a:	29 da                	sub    edx,ebx
c002782c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027832:	83 fa 1f             	cmp    edx,0x1f
c0027835:	7e 30                	jle    c0027867 <__muldf3+0x257>
c0027837:	83 fa 20             	cmp    edx,0x20
c002783a:	75 0b                	jne    c0027847 <__muldf3+0x237>
c002783c:	31 c0                	xor    eax,eax
c002783e:	85 ff                	test   edi,edi
c0027840:	0f 95 c0             	setne  al
c0027843:	89 c7                	mov    edi,eax
c0027845:	eb 1a                	jmp    c0027861 <__muldf3+0x251>
c0027847:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002784a:	89 f0                	mov    eax,esi
c002784c:	d3 e0                	shl    eax,cl
c002784e:	09 f8                	or     eax,edi
c0027850:	0f 95 c0             	setne  al
c0027853:	0f b6 c0             	movzx  eax,al
c0027856:	89 c7                	mov    edi,eax
c0027858:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002785d:	29 d9                	sub    ecx,ebx
c002785f:	d3 ee                	shr    esi,cl
c0027861:	09 f7                	or     edi,esi
c0027863:	31 db                	xor    ebx,ebx
c0027865:	eb 3b                	jmp    c00278a2 <__muldf3+0x292>
c0027867:	83 c3 1f             	add    ebx,0x1f
c002786a:	89 f0                	mov    eax,esi
c002786c:	88 d9                	mov    cl,bl
c002786e:	d3 e0                	shl    eax,cl
c0027870:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027873:	89 f8                	mov    eax,edi
c0027875:	88 d1                	mov    cl,dl
c0027877:	d3 e8                	shr    eax,cl
c0027879:	89 c1                	mov    ecx,eax
c002787b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002787e:	09 c8                	or     eax,ecx
c0027880:	88 d9                	mov    cl,bl
c0027882:	d3 e7                	shl    edi,cl
c0027884:	31 db                	xor    ebx,ebx
c0027886:	85 ff                	test   edi,edi
c0027888:	0f 95 c3             	setne  bl
c002788b:	89 df                	mov    edi,ebx
c002788d:	09 c7                	or     edi,eax
c002788f:	88 d1                	mov    cl,dl
c0027891:	d3 ee                	shr    esi,cl
c0027893:	31 db                	xor    ebx,ebx
c0027895:	eb 0d                	jmp    c00278a4 <__muldf3+0x294>
c0027897:	bb ff 07 00 00       	mov    ebx,0x7ff
c002789c:	eb 02                	jmp    c00278a0 <__muldf3+0x290>
c002789e:	31 db                	xor    ebx,ebx
c00278a0:	31 ff                	xor    edi,edi
c00278a2:	31 f6                	xor    esi,esi
c00278a4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278a7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00278aa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00278af:	09 c3                	or     ebx,eax
c00278b1:	c1 e3 14             	shl    ebx,0x14
c00278b4:	89 f0                	mov    eax,esi
c00278b6:	c1 e8 0b             	shr    eax,0xb
c00278b9:	09 c3                	or     ebx,eax
c00278bb:	89 f8                	mov    eax,edi
c00278bd:	c1 e8 0b             	shr    eax,0xb
c00278c0:	c1 e6 15             	shl    esi,0x15
c00278c3:	09 c6                	or     esi,eax
c00278c5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00278cb:	0f 95 c1             	setne  cl
c00278ce:	09 c8                	or     eax,ecx
c00278d0:	83 e0 01             	and    eax,0x1
c00278d3:	c1 ef 0a             	shr    edi,0xa
c00278d6:	21 c7                	and    edi,eax
c00278d8:	01 f7                	add    edi,esi
c00278da:	83 d3 00             	adc    ebx,0x0
c00278dd:	89 da                	mov    edx,ebx
c00278df:	eb 03                	jmp    c00278e4 <__muldf3+0x2d4>
c00278e1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00278e4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00278e7:	89 f8                	mov    eax,edi
c00278e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00278ec:	83 c4 24             	add    esp,0x24
c00278ef:	5b                   	pop    ebx
c00278f0:	5e                   	pop    esi
c00278f1:	5f                   	pop    edi
c00278f2:	5d                   	pop    ebp
c00278f3:	c3                   	ret    

c00278f4 <__divdf3>:
c00278f4:	55                   	push   ebp
c00278f5:	89 e5                	mov    ebp,esp
c00278f7:	57                   	push   edi
c00278f8:	56                   	push   esi
c00278f9:	53                   	push   ebx
c00278fa:	83 ec 2c             	sub    esp,0x2c
c00278fd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027900:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027903:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027906:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027909:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002790c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002790f:	89 ce                	mov    esi,ecx
c0027911:	89 c8                	mov    eax,ecx
c0027913:	c1 f8 14             	sar    eax,0x14
c0027916:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027919:	89 f8                	mov    eax,edi
c002791b:	89 fb                	mov    ebx,edi
c002791d:	c1 e3 0b             	shl    ebx,0xb
c0027920:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027923:	c1 e6 0b             	shl    esi,0xb
c0027926:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002792c:	c1 e8 15             	shr    eax,0x15
c002792f:	09 c6                	or     esi,eax
c0027931:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027934:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027937:	89 c2                	mov    edx,eax
c0027939:	c1 fa 14             	sar    edx,0x14
c002793c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002793f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027942:	89 de                	mov    esi,ebx
c0027944:	c1 e6 0b             	shl    esi,0xb
c0027947:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002794a:	c1 e0 0b             	shl    eax,0xb
c002794d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027952:	c1 eb 15             	shr    ebx,0x15
c0027955:	09 d8                	or     eax,ebx
c0027957:	89 c2                	mov    edx,eax
c0027959:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002795c:	25 ff 07 00 00       	and    eax,0x7ff
c0027961:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027964:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027967:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002796d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027970:	29 d8                	sub    eax,ebx
c0027972:	05 ff 03 00 00       	add    eax,0x3ff
c0027977:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002797a:	46                   	inc    esi
c002797b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027981:	0f 85 a5 00 00 00    	jne    c0027a2c <__divdf3+0x138>
c0027987:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002798a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002798d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027991:	74 2a                	je     c00279bd <__divdf3+0xc9>
c0027993:	85 f6                	test   esi,esi
c0027995:	0f 85 cc 02 00 00    	jne    c0027c67 <__divdf3+0x373>
c002799b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002799e:	40                   	inc    eax
c002799f:	a9 fe 07 00 00       	test   eax,0x7fe
c00279a4:	75 26                	jne    c00279cc <__divdf3+0xd8>
c00279a6:	85 db                	test   ebx,ebx
c00279a8:	74 22                	je     c00279cc <__divdf3+0xd8>
c00279aa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00279ad:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00279b0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279b3:	09 d0                	or     eax,edx
c00279b5:	0f 85 ac 02 00 00    	jne    c0027c67 <__divdf3+0x373>
c00279bb:	eb 63                	jmp    c0027a20 <__divdf3+0x12c>
c00279bd:	85 f6                	test   esi,esi
c00279bf:	75 22                	jne    c00279e3 <__divdf3+0xef>
c00279c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279c4:	40                   	inc    eax
c00279c5:	a9 fe 07 00 00       	test   eax,0x7fe
c00279ca:	74 36                	je     c0027a02 <__divdf3+0x10e>
c00279cc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00279d0:	0f 89 91 02 00 00    	jns    c0027c67 <__divdf3+0x373>
c00279d6:	89 f8                	mov    eax,edi
c00279d8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00279de:	e9 80 02 00 00       	jmp    c0027c63 <__divdf3+0x36f>
c00279e3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00279e6:	01 f6                	add    esi,esi
c00279e8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00279eb:	c1 ef 1f             	shr    edi,0x1f
c00279ee:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00279f1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00279f4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00279f7:	09 f7                	or     edi,esi
c00279f9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00279fc:	78 2e                	js     c0027a2c <__divdf3+0x138>
c00279fe:	89 c8                	mov    eax,ecx
c0027a00:	eb e1                	jmp    c00279e3 <__divdf3+0xef>
c0027a02:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a05:	09 d0                	or     eax,edx
c0027a07:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027a0b:	74 0f                	je     c0027a1c <__divdf3+0x128>
c0027a0d:	85 c0                	test   eax,eax
c0027a0f:	74 bb                	je     c00279cc <__divdf3+0xd8>
c0027a11:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027a14:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027a17:	e9 4b 02 00 00       	jmp    c0027c67 <__divdf3+0x373>
c0027a1c:	85 c0                	test   eax,eax
c0027a1e:	75 ac                	jne    c00279cc <__divdf3+0xd8>
c0027a20:	31 ff                	xor    edi,edi
c0027a22:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a27:	e9 3b 02 00 00       	jmp    c0027c67 <__divdf3+0x373>
c0027a2c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a2f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027a32:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027a38:	75 6b                	jne    c0027aa5 <__divdf3+0x1b1>
c0027a3a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a3d:	09 d6                	or     esi,edx
c0027a3f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027a43:	74 28                	je     c0027a6d <__divdf3+0x179>
c0027a45:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027a48:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027a4b:	85 f6                	test   esi,esi
c0027a4d:	0f 85 14 02 00 00    	jne    c0027c67 <__divdf3+0x373>
c0027a53:	31 ff                	xor    edi,edi
c0027a55:	31 c9                	xor    ecx,ecx
c0027a57:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a5a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027a5d:	0f 89 04 02 00 00    	jns    c0027c67 <__divdf3+0x373>
c0027a63:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027a68:	e9 fa 01 00 00       	jmp    c0027c67 <__divdf3+0x373>
c0027a6d:	85 f6                	test   esi,esi
c0027a6f:	75 1b                	jne    c0027a8c <__divdf3+0x198>
c0027a71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a74:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027a77:	25 00 00 00 80       	and    eax,0x80000000
c0027a7c:	31 c9                	xor    ecx,ecx
c0027a7e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027a83:	89 cf                	mov    edi,ecx
c0027a85:	89 c1                	mov    ecx,eax
c0027a87:	e9 db 01 00 00       	jmp    c0027c67 <__divdf3+0x373>
c0027a8c:	01 d2                	add    edx,edx
c0027a8e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027a91:	c1 eb 1f             	shr    ebx,0x1f
c0027a94:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a97:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027a9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0027a9d:	09 da                	or     edx,ebx
c0027a9f:	78 04                	js     c0027aa5 <__divdf3+0x1b1>
c0027aa1:	89 c8                	mov    eax,ecx
c0027aa3:	eb e7                	jmp    c0027a8c <__divdf3+0x198>
c0027aa5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027aa8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027aae:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ab4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027ab7:	39 d6                	cmp    esi,edx
c0027ab9:	77 0d                	ja     c0027ac8 <__divdf3+0x1d4>
c0027abb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027abe:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027ac1:	72 1b                	jb     c0027ade <__divdf3+0x1ea>
c0027ac3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027ac6:	75 16                	jne    c0027ade <__divdf3+0x1ea>
c0027ac8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027acb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ace:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027ad1:	83 de 00             	sbb    esi,0x0
c0027ad4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027ad7:	ba 01 00 00 00       	mov    edx,0x1
c0027adc:	eb 02                	jmp    c0027ae0 <__divdf3+0x1ec>
c0027ade:	31 d2                	xor    edx,edx
c0027ae0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027ae7:	31 ff                	xor    edi,edi
c0027ae9:	01 ff                	add    edi,edi
c0027aeb:	89 d1                	mov    ecx,edx
c0027aed:	c1 e9 1f             	shr    ecx,0x1f
c0027af0:	09 cf                	or     edi,ecx
c0027af2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027af5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027af8:	89 da                	mov    edx,ebx
c0027afa:	89 f3                	mov    ebx,esi
c0027afc:	8d 34 36             	lea    esi,[esi+esi*1]
c0027aff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b02:	c1 e9 1f             	shr    ecx,0x1f
c0027b05:	09 ce                	or     esi,ecx
c0027b07:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b0a:	01 c9                	add    ecx,ecx
c0027b0c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027b0f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027b12:	85 db                	test   ebx,ebx
c0027b14:	78 29                	js     c0027b3f <__divdf3+0x24b>
c0027b16:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027b19:	72 07                	jb     c0027b22 <__divdf3+0x22e>
c0027b1b:	75 3c                	jne    c0027b59 <__divdf3+0x265>
c0027b1d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027b20:	77 37                	ja     c0027b59 <__divdf3+0x265>
c0027b22:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027b25:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027b28:	31 d2                	xor    edx,edx
c0027b2a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027b2d:	0f 97 c2             	seta   dl
c0027b30:	29 d6                	sub    esi,edx
c0027b32:	89 d9                	mov    ecx,ebx
c0027b34:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027b37:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027b3a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027b3d:	eb 17                	jmp    c0027b56 <__divdf3+0x262>
c0027b3f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027b42:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b45:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027b48:	0f 97 c1             	seta   cl
c0027b4b:	0f b6 c9             	movzx  ecx,cl
c0027b4e:	29 ce                	sub    esi,ecx
c0027b50:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027b53:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027b56:	83 ca 01             	or     edx,0x1
c0027b59:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027b5c:	75 8b                	jne    c0027ae9 <__divdf3+0x1f5>
c0027b5e:	c1 e7 09             	shl    edi,0x9
c0027b61:	89 d1                	mov    ecx,edx
c0027b63:	c1 e9 17             	shr    ecx,0x17
c0027b66:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b69:	09 f3                	or     ebx,esi
c0027b6b:	0f 95 c3             	setne  bl
c0027b6e:	0f b6 db             	movzx  ebx,bl
c0027b71:	c1 e2 09             	shl    edx,0x9
c0027b74:	09 d3                	or     ebx,edx
c0027b76:	89 ca                	mov    edx,ecx
c0027b78:	09 fa                	or     edx,edi
c0027b7a:	78 0c                	js     c0027b88 <__divdf3+0x294>
c0027b7c:	01 d2                	add    edx,edx
c0027b7e:	89 d9                	mov    ecx,ebx
c0027b80:	c1 e9 1f             	shr    ecx,0x1f
c0027b83:	09 ca                	or     edx,ecx
c0027b85:	01 db                	add    ebx,ebx
c0027b87:	48                   	dec    eax
c0027b88:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027b8d:	0f 8f 83 00 00 00    	jg     c0027c16 <__divdf3+0x322>
c0027b93:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027b99:	85 c0                	test   eax,eax
c0027b9b:	0f 8f 82 00 00 00    	jg     c0027c23 <__divdf3+0x32f>
c0027ba1:	83 f8 cc             	cmp    eax,0xffffffcc
c0027ba4:	7c 77                	jl     c0027c1d <__divdf3+0x329>
c0027ba6:	be 01 00 00 00       	mov    esi,0x1
c0027bab:	29 c6                	sub    esi,eax
c0027bad:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027bb3:	83 fe 1f             	cmp    esi,0x1f
c0027bb6:	7e 2f                	jle    c0027be7 <__divdf3+0x2f3>
c0027bb8:	83 fe 20             	cmp    esi,0x20
c0027bbb:	75 0a                	jne    c0027bc7 <__divdf3+0x2d3>
c0027bbd:	85 db                	test   ebx,ebx
c0027bbf:	0f 95 c3             	setne  bl
c0027bc2:	0f b6 db             	movzx  ebx,bl
c0027bc5:	eb 1a                	jmp    c0027be1 <__divdf3+0x2ed>
c0027bc7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027bca:	89 d7                	mov    edi,edx
c0027bcc:	d3 e7                	shl    edi,cl
c0027bce:	89 f9                	mov    ecx,edi
c0027bd0:	09 d9                	or     ecx,ebx
c0027bd2:	0f 95 c3             	setne  bl
c0027bd5:	0f b6 db             	movzx  ebx,bl
c0027bd8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027bdd:	29 c1                	sub    ecx,eax
c0027bdf:	d3 ea                	shr    edx,cl
c0027be1:	09 d3                	or     ebx,edx
c0027be3:	31 c0                	xor    eax,eax
c0027be5:	eb 3a                	jmp    c0027c21 <__divdf3+0x32d>
c0027be7:	83 c0 1f             	add    eax,0x1f
c0027bea:	89 d7                	mov    edi,edx
c0027bec:	88 c1                	mov    cl,al
c0027bee:	d3 e7                	shl    edi,cl
c0027bf0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bf3:	89 df                	mov    edi,ebx
c0027bf5:	89 f1                	mov    ecx,esi
c0027bf7:	d3 ef                	shr    edi,cl
c0027bf9:	89 f9                	mov    ecx,edi
c0027bfb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027bfe:	09 cf                	or     edi,ecx
c0027c00:	88 c1                	mov    cl,al
c0027c02:	d3 e3                	shl    ebx,cl
c0027c04:	85 db                	test   ebx,ebx
c0027c06:	0f 95 c3             	setne  bl
c0027c09:	0f b6 db             	movzx  ebx,bl
c0027c0c:	09 fb                	or     ebx,edi
c0027c0e:	89 f1                	mov    ecx,esi
c0027c10:	d3 ea                	shr    edx,cl
c0027c12:	31 c0                	xor    eax,eax
c0027c14:	eb 0d                	jmp    c0027c23 <__divdf3+0x32f>
c0027c16:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027c1b:	eb 02                	jmp    c0027c1f <__divdf3+0x32b>
c0027c1d:	31 c0                	xor    eax,eax
c0027c1f:	31 db                	xor    ebx,ebx
c0027c21:	31 d2                	xor    edx,edx
c0027c23:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027c26:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027c29:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027c2f:	09 c8                	or     eax,ecx
c0027c31:	c1 e0 14             	shl    eax,0x14
c0027c34:	89 d1                	mov    ecx,edx
c0027c36:	c1 e9 0b             	shr    ecx,0xb
c0027c39:	09 c8                	or     eax,ecx
c0027c3b:	89 c6                	mov    esi,eax
c0027c3d:	89 d9                	mov    ecx,ebx
c0027c3f:	c1 e9 0b             	shr    ecx,0xb
c0027c42:	c1 e2 15             	shl    edx,0x15
c0027c45:	09 ca                	or     edx,ecx
c0027c47:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027c4d:	0f 95 c0             	setne  al
c0027c50:	09 c1                	or     ecx,eax
c0027c52:	83 e1 01             	and    ecx,0x1
c0027c55:	c1 eb 0a             	shr    ebx,0xa
c0027c58:	21 cb                	and    ebx,ecx
c0027c5a:	01 d3                	add    ebx,edx
c0027c5c:	89 d8                	mov    eax,ebx
c0027c5e:	83 d6 00             	adc    esi,0x0
c0027c61:	89 f2                	mov    edx,esi
c0027c63:	89 c7                	mov    edi,eax
c0027c65:	89 d1                	mov    ecx,edx
c0027c67:	89 f8                	mov    eax,edi
c0027c69:	89 ca                	mov    edx,ecx
c0027c6b:	83 c4 2c             	add    esp,0x2c
c0027c6e:	5b                   	pop    ebx
c0027c6f:	5e                   	pop    esi
c0027c70:	5f                   	pop    edi
c0027c71:	5d                   	pop    ebp
c0027c72:	c3                   	ret    

c0027c73 <__floatsidf>:
c0027c73:	55                   	push   ebp
c0027c74:	89 e5                	mov    ebp,esp
c0027c76:	56                   	push   esi
c0027c77:	53                   	push   ebx
c0027c78:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027c7b:	85 db                	test   ebx,ebx
c0027c7d:	7e 15                	jle    c0027c94 <__floatsidf+0x21>
c0027c7f:	0f bd cb             	bsr    ecx,ebx
c0027c82:	83 f1 1f             	xor    ecx,0x1f
c0027c85:	d3 e3                	shl    ebx,cl
c0027c87:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027c8d:	b8 1e 04 00 00       	mov    eax,0x41e
c0027c92:	eb 21                	jmp    c0027cb5 <__floatsidf+0x42>
c0027c94:	b8 00 00 00 00       	mov    eax,0x0
c0027c99:	ba 00 00 00 00       	mov    edx,0x0
c0027c9e:	74 2a                	je     c0027cca <__floatsidf+0x57>
c0027ca0:	f7 db                	neg    ebx
c0027ca2:	0f bd cb             	bsr    ecx,ebx
c0027ca5:	83 f1 1f             	xor    ecx,0x1f
c0027ca8:	d3 e3                	shl    ebx,cl
c0027caa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027cb0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027cb5:	29 c8                	sub    eax,ecx
c0027cb7:	c1 e0 14             	shl    eax,0x14
c0027cba:	89 c1                	mov    ecx,eax
c0027cbc:	89 de                	mov    esi,ebx
c0027cbe:	c1 ee 0b             	shr    esi,0xb
c0027cc1:	09 f1                	or     ecx,esi
c0027cc3:	89 ca                	mov    edx,ecx
c0027cc5:	c1 e3 15             	shl    ebx,0x15
c0027cc8:	89 d8                	mov    eax,ebx
c0027cca:	5b                   	pop    ebx
c0027ccb:	5e                   	pop    esi
c0027ccc:	5d                   	pop    ebp
c0027ccd:	c3                   	ret    

c0027cce <__floatunsidf>:
c0027cce:	55                   	push   ebp
c0027ccf:	89 e5                	mov    ebp,esp
c0027cd1:	56                   	push   esi
c0027cd2:	53                   	push   ebx
c0027cd3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027cd6:	85 db                	test   ebx,ebx
c0027cd8:	74 2a                	je     c0027d04 <__floatunsidf+0x36>
c0027cda:	0f bd cb             	bsr    ecx,ebx
c0027cdd:	83 f1 1f             	xor    ecx,0x1f
c0027ce0:	d3 e3                	shl    ebx,cl
c0027ce2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ce8:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ced:	29 c8                	sub    eax,ecx
c0027cef:	c1 e0 14             	shl    eax,0x14
c0027cf2:	89 c1                	mov    ecx,eax
c0027cf4:	89 de                	mov    esi,ebx
c0027cf6:	c1 ee 0b             	shr    esi,0xb
c0027cf9:	09 f1                	or     ecx,esi
c0027cfb:	89 ca                	mov    edx,ecx
c0027cfd:	c1 e3 15             	shl    ebx,0x15
c0027d00:	89 d8                	mov    eax,ebx
c0027d02:	eb 04                	jmp    c0027d08 <__floatunsidf+0x3a>
c0027d04:	31 c0                	xor    eax,eax
c0027d06:	31 d2                	xor    edx,edx
c0027d08:	5b                   	pop    ebx
c0027d09:	5e                   	pop    esi
c0027d0a:	5d                   	pop    ebp
c0027d0b:	c3                   	ret    

c0027d0c <__fixdfsi>:
c0027d0c:	55                   	push   ebp
c0027d0d:	89 e5                	mov    ebp,esp
c0027d0f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027d12:	89 d1                	mov    ecx,edx
c0027d14:	c1 e1 0b             	shl    ecx,0xb
c0027d17:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027d1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027d20:	c1 e8 15             	shr    eax,0x15
c0027d23:	09 c1                	or     ecx,eax
c0027d25:	c1 fa 14             	sar    edx,0x14
c0027d28:	78 1f                	js     c0027d49 <__fixdfsi+0x3d>
c0027d2a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027d30:	31 c0                	xor    eax,eax
c0027d32:	83 fa 1e             	cmp    edx,0x1e
c0027d35:	77 40                	ja     c0027d77 <__fixdfsi+0x6b>
c0027d37:	89 c8                	mov    eax,ecx
c0027d39:	0d 00 00 00 80       	or     eax,0x80000000
c0027d3e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d43:	29 d1                	sub    ecx,edx
c0027d45:	d3 e8                	shr    eax,cl
c0027d47:	eb 2e                	jmp    c0027d77 <__fixdfsi+0x6b>
c0027d49:	31 c0                	xor    eax,eax
c0027d4b:	81 c2 01 04 00 00    	add    edx,0x401
c0027d51:	78 24                	js     c0027d77 <__fixdfsi+0x6b>
c0027d53:	83 fa 1e             	cmp    edx,0x1e
c0027d56:	7e 09                	jle    c0027d61 <__fixdfsi+0x55>
c0027d58:	83 fa 1f             	cmp    edx,0x1f
c0027d5b:	75 18                	jne    c0027d75 <__fixdfsi+0x69>
c0027d5d:	85 c9                	test   ecx,ecx
c0027d5f:	75 14                	jne    c0027d75 <__fixdfsi+0x69>
c0027d61:	89 c8                	mov    eax,ecx
c0027d63:	0d 00 00 00 80       	or     eax,0x80000000
c0027d68:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d6d:	29 d1                	sub    ecx,edx
c0027d6f:	d3 e8                	shr    eax,cl
c0027d71:	f7 d8                	neg    eax
c0027d73:	eb 02                	jmp    c0027d77 <__fixdfsi+0x6b>
c0027d75:	31 c0                	xor    eax,eax
c0027d77:	5d                   	pop    ebp
c0027d78:	c3                   	ret    

c0027d79 <__fixunsdfsi>:
c0027d79:	55                   	push   ebp
c0027d7a:	89 e5                	mov    ebp,esp
c0027d7c:	53                   	push   ebx
c0027d7d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027d80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027d83:	89 d3                	mov    ebx,edx
c0027d85:	c1 fb 14             	sar    ebx,0x14
c0027d88:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027d8e:	31 c0                	xor    eax,eax
c0027d90:	83 fb 1f             	cmp    ebx,0x1f
c0027d93:	77 1d                	ja     c0027db2 <__fixunsdfsi+0x39>
c0027d95:	89 d0                	mov    eax,edx
c0027d97:	c1 e0 0b             	shl    eax,0xb
c0027d9a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d9f:	c1 e9 15             	shr    ecx,0x15
c0027da2:	09 c8                	or     eax,ecx
c0027da4:	0d 00 00 00 80       	or     eax,0x80000000
c0027da9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027dae:	29 d9                	sub    ecx,ebx
c0027db0:	d3 e8                	shr    eax,cl
c0027db2:	5b                   	pop    ebx
c0027db3:	5d                   	pop    ebp
c0027db4:	c3                   	ret    

c0027db5 <__cmpdf2>:
c0027db5:	55                   	push   ebp
c0027db6:	89 e5                	mov    ebp,esp
c0027db8:	57                   	push   edi
c0027db9:	56                   	push   esi
c0027dba:	53                   	push   ebx
c0027dbb:	83 ec 0c             	sub    esp,0xc
c0027dbe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027dc1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027dc4:	89 ca                	mov    edx,ecx
c0027dc6:	c1 ea 14             	shr    edx,0x14
c0027dc9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027dcf:	89 cb                	mov    ebx,ecx
c0027dd1:	c1 fb 1f             	sar    ebx,0x1f
c0027dd4:	31 da                	xor    edx,ebx
c0027dd6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027dd9:	89 df                	mov    edi,ebx
c0027ddb:	c1 e7 0b             	shl    edi,0xb
c0027dde:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027de1:	c1 e1 0b             	shl    ecx,0xb
c0027de4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027dea:	c1 eb 15             	shr    ebx,0x15
c0027ded:	09 d9                	or     ecx,ebx
c0027def:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027df2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027df5:	89 ce                	mov    esi,ecx
c0027df7:	c1 ee 14             	shr    esi,0x14
c0027dfa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e00:	89 cb                	mov    ebx,ecx
c0027e02:	c1 fb 1f             	sar    ebx,0x1f
c0027e05:	31 de                	xor    esi,ebx
c0027e07:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027e0a:	89 df                	mov    edi,ebx
c0027e0c:	c1 e7 0b             	shl    edi,0xb
c0027e0f:	c1 e1 0b             	shl    ecx,0xb
c0027e12:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027e18:	c1 eb 15             	shr    ebx,0x15
c0027e1b:	09 d9                	or     ecx,ebx
c0027e1d:	89 d3                	mov    ebx,edx
c0027e1f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027e25:	43                   	inc    ebx
c0027e26:	83 fb 01             	cmp    ebx,0x1
c0027e29:	77 08                	ja     c0027e33 <__cmpdf2+0x7e>
c0027e2b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e2e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027e31:	75 68                	jne    c0027e9b <__cmpdf2+0xe6>
c0027e33:	89 f3                	mov    ebx,esi
c0027e35:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027e3b:	43                   	inc    ebx
c0027e3c:	83 fb 01             	cmp    ebx,0x1
c0027e3f:	77 06                	ja     c0027e47 <__cmpdf2+0x92>
c0027e41:	89 fb                	mov    ebx,edi
c0027e43:	09 cb                	or     ebx,ecx
c0027e45:	75 54                	jne    c0027e9b <__cmpdf2+0xe6>
c0027e47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e4a:	09 f8                	or     eax,edi
c0027e4c:	09 c8                	or     eax,ecx
c0027e4e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027e51:	75 12                	jne    c0027e65 <__cmpdf2+0xb0>
c0027e53:	8d 42 01             	lea    eax,[edx+0x1]
c0027e56:	83 f8 01             	cmp    eax,0x1
c0027e59:	77 0a                	ja     c0027e65 <__cmpdf2+0xb0>
c0027e5b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027e5e:	31 c0                	xor    eax,eax
c0027e60:	83 fb 01             	cmp    ebx,0x1
c0027e63:	76 36                	jbe    c0027e9b <__cmpdf2+0xe6>
c0027e65:	b8 01 00 00 00       	mov    eax,0x1
c0027e6a:	39 f2                	cmp    edx,esi
c0027e6c:	7f 2d                	jg     c0027e9b <__cmpdf2+0xe6>
c0027e6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027e73:	7c 26                	jl     c0027e9b <__cmpdf2+0xe6>
c0027e75:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e78:	77 07                	ja     c0027e81 <__cmpdf2+0xcc>
c0027e7a:	72 16                	jb     c0027e92 <__cmpdf2+0xdd>
c0027e7c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027e7f:	76 0a                	jbe    c0027e8b <__cmpdf2+0xd6>
c0027e81:	89 d0                	mov    eax,edx
c0027e83:	c1 f8 1f             	sar    eax,0x1f
c0027e86:	83 c8 01             	or     eax,0x1
c0027e89:	eb 10                	jmp    c0027e9b <__cmpdf2+0xe6>
c0027e8b:	b8 00 00 00 00       	mov    eax,0x0
c0027e90:	73 09                	jae    c0027e9b <__cmpdf2+0xe6>
c0027e92:	89 d0                	mov    eax,edx
c0027e94:	c1 f8 1f             	sar    eax,0x1f
c0027e97:	83 e0 02             	and    eax,0x2
c0027e9a:	48                   	dec    eax
c0027e9b:	83 c4 0c             	add    esp,0xc
c0027e9e:	5b                   	pop    ebx
c0027e9f:	5e                   	pop    esi
c0027ea0:	5f                   	pop    edi
c0027ea1:	5d                   	pop    ebp
c0027ea2:	c3                   	ret    

c0027ea3 <__eqdf2>:
c0027ea3:	55                   	push   ebp
c0027ea4:	89 e5                	mov    ebp,esp
c0027ea6:	50                   	push   eax
c0027ea7:	6a 01                	push   0x1
c0027ea9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027eac:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027eaf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027eb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027eb5:	e8 fb fe ff ff       	call   c0027db5 <__cmpdf2>
c0027eba:	83 c4 18             	add    esp,0x18
c0027ebd:	c9                   	leave  
c0027ebe:	c3                   	ret    

c0027ebf <__nedf2>:
c0027ebf:	eb e2                	jmp    c0027ea3 <__eqdf2>

c0027ec1 <__gtdf2>:
c0027ec1:	55                   	push   ebp
c0027ec2:	89 e5                	mov    ebp,esp
c0027ec4:	50                   	push   eax
c0027ec5:	6a ff                	push   0xffffffff
c0027ec7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027eca:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027ecd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ed0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ed3:	e8 dd fe ff ff       	call   c0027db5 <__cmpdf2>
c0027ed8:	83 c4 18             	add    esp,0x18
c0027edb:	c9                   	leave  
c0027edc:	c3                   	ret    

c0027edd <__gedf2>:
c0027edd:	eb e2                	jmp    c0027ec1 <__gtdf2>

c0027edf <__ltdf2>:
c0027edf:	eb c2                	jmp    c0027ea3 <__eqdf2>

c0027ee1 <__ledf2>:
c0027ee1:	eb c0                	jmp    c0027ea3 <__eqdf2>

c0027ee3 <__truncdfsf2>:
c0027ee3:	55                   	push   ebp
c0027ee4:	89 e5                	mov    ebp,esp
c0027ee6:	57                   	push   edi
c0027ee7:	56                   	push   esi
c0027ee8:	53                   	push   ebx
c0027ee9:	83 ec 0c             	sub    esp,0xc
c0027eec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027eef:	89 d1                	mov    ecx,edx
c0027ef1:	c1 f9 14             	sar    ecx,0x14
c0027ef4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027ef7:	89 df                	mov    edi,ebx
c0027ef9:	c1 e7 0b             	shl    edi,0xb
c0027efc:	89 d0                	mov    eax,edx
c0027efe:	c1 e0 0b             	shl    eax,0xb
c0027f01:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f06:	c1 eb 15             	shr    ebx,0x15
c0027f09:	09 d8                	or     eax,ebx
c0027f0b:	89 cb                	mov    ebx,ecx
c0027f0d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f13:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027f19:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027f1f:	0f 86 9e 00 00 00    	jbe    c0027fc3 <__truncdfsf2+0xe0>
c0027f25:	85 db                	test   ebx,ebx
c0027f27:	75 0a                	jne    c0027f33 <__truncdfsf2+0x50>
c0027f29:	c1 fa 17             	sar    edx,0x17
c0027f2c:	30 d2                	xor    dl,dl
c0027f2e:	e9 84 00 00 00       	jmp    c0027fb7 <__truncdfsf2+0xd4>
c0027f33:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027f39:	83 fe 83             	cmp    esi,0xffffff83
c0027f3c:	7d 4b                	jge    c0027f89 <__truncdfsf2+0xa6>
c0027f3e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027f43:	29 f1                	sub    ecx,esi
c0027f45:	83 f9 1f             	cmp    ecx,0x1f
c0027f48:	7f 6b                	jg     c0027fb5 <__truncdfsf2+0xd2>
c0027f4a:	0d 00 00 00 80       	or     eax,0x80000000
c0027f4f:	89 c3                	mov    ebx,eax
c0027f51:	d3 eb                	shr    ebx,cl
c0027f53:	be 01 00 00 00       	mov    esi,0x1
c0027f58:	d3 e6                	shl    esi,cl
c0027f5a:	4e                   	dec    esi
c0027f5b:	21 f0                	and    eax,esi
c0027f5d:	09 f8                	or     eax,edi
c0027f5f:	0f 95 c0             	setne  al
c0027f62:	0f b6 c0             	movzx  eax,al
c0027f65:	09 c3                	or     ebx,eax
c0027f67:	89 d9                	mov    ecx,ebx
c0027f69:	c1 e9 08             	shr    ecx,0x8
c0027f6c:	f6 c3 7f             	test   bl,0x7f
c0027f6f:	0f 95 c0             	setne  al
c0027f72:	09 c8                	or     eax,ecx
c0027f74:	83 e0 01             	and    eax,0x1
c0027f77:	c1 eb 07             	shr    ebx,0x7
c0027f7a:	21 c3                	and    ebx,eax
c0027f7c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027f82:	09 d1                	or     ecx,edx
c0027f84:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027f87:	eb 76                	jmp    c0027fff <__truncdfsf2+0x11c>
c0027f89:	83 c6 80             	add    esi,0xffffff80
c0027f8c:	7e 1d                	jle    c0027fab <__truncdfsf2+0xc8>
c0027f8e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027f94:	75 0b                	jne    c0027fa1 <__truncdfsf2+0xbe>
c0027f96:	09 f8                	or     eax,edi
c0027f98:	74 09                	je     c0027fa3 <__truncdfsf2+0xc0>
c0027f9a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0027f9f:	eb 02                	jmp    c0027fa3 <__truncdfsf2+0xc0>
c0027fa1:	31 c0                	xor    eax,eax
c0027fa3:	c1 fa 17             	sar    edx,0x17
c0027fa6:	80 ca ff             	or     dl,0xff
c0027fa9:	eb 0e                	jmp    c0027fb9 <__truncdfsf2+0xd6>
c0027fab:	c1 fa 1f             	sar    edx,0x1f
c0027fae:	c1 e2 08             	shl    edx,0x8
c0027fb1:	09 ca                	or     edx,ecx
c0027fb3:	eb 04                	jmp    c0027fb9 <__truncdfsf2+0xd6>
c0027fb5:	31 d2                	xor    edx,edx
c0027fb7:	31 c0                	xor    eax,eax
c0027fb9:	c1 e2 17             	shl    edx,0x17
c0027fbc:	c1 e8 08             	shr    eax,0x8
c0027fbf:	09 d0                	or     eax,edx
c0027fc1:	eb 3c                	jmp    c0027fff <__truncdfsf2+0x11c>
c0027fc3:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027fc9:	89 ca                	mov    edx,ecx
c0027fcb:	c1 fa 0b             	sar    edx,0xb
c0027fce:	c1 e2 08             	shl    edx,0x8
c0027fd1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027fd4:	31 db                	xor    ebx,ebx
c0027fd6:	85 ff                	test   edi,edi
c0027fd8:	0f 95 c3             	setne  bl
c0027fdb:	09 d8                	or     eax,ebx
c0027fdd:	89 c3                	mov    ebx,eax
c0027fdf:	c1 eb 08             	shr    ebx,0x8
c0027fe2:	a8 7f                	test   al,0x7f
c0027fe4:	0f 95 c2             	setne  dl
c0027fe7:	89 d6                	mov    esi,edx
c0027fe9:	09 de                	or     esi,ebx
c0027feb:	83 e6 01             	and    esi,0x1
c0027fee:	c1 e8 07             	shr    eax,0x7
c0027ff1:	21 f0                	and    eax,esi
c0027ff3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ff6:	09 ca                	or     edx,ecx
c0027ff8:	c1 e2 17             	shl    edx,0x17
c0027ffb:	09 da                	or     edx,ebx
c0027ffd:	01 d0                	add    eax,edx
c0027fff:	83 c4 0c             	add    esp,0xc
c0028002:	5b                   	pop    ebx
c0028003:	5e                   	pop    esi
c0028004:	5f                   	pop    edi
c0028005:	5d                   	pop    ebp
c0028006:	c3                   	ret    

c0028007 <__extendsfdf2>:
c0028007:	55                   	push   ebp
c0028008:	89 e5                	mov    ebp,esp
c002800a:	57                   	push   edi
c002800b:	56                   	push   esi
c002800c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002800f:	89 d1                	mov    ecx,edx
c0028011:	c1 f9 17             	sar    ecx,0x17
c0028014:	c1 e2 08             	shl    edx,0x8
c0028017:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002801d:	89 c8                	mov    eax,ecx
c002801f:	80 e4 f8             	and    ah,0xf8
c0028022:	8d 71 01             	lea    esi,[ecx+0x1]
c0028025:	81 e6 fe 00 00 00    	and    esi,0xfe
c002802b:	75 27                	jne    c0028054 <__extendsfdf2+0x4d>
c002802d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028033:	75 18                	jne    c002804d <__extendsfdf2+0x46>
c0028035:	85 d2                	test   edx,edx
c0028037:	74 20                	je     c0028059 <__extendsfdf2+0x52>
c0028039:	41                   	inc    ecx
c002803a:	01 d2                	add    edx,edx
c002803c:	79 fb                	jns    c0028039 <__extendsfdf2+0x32>
c002803e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028044:	29 c8                	sub    eax,ecx
c0028046:	05 81 03 00 00       	add    eax,0x381
c002804b:	eb 0c                	jmp    c0028059 <__extendsfdf2+0x52>
c002804d:	05 00 07 00 00       	add    eax,0x700
c0028052:	eb 05                	jmp    c0028059 <__extendsfdf2+0x52>
c0028054:	05 80 03 00 00       	add    eax,0x380
c0028059:	c1 e0 14             	shl    eax,0x14
c002805c:	89 c1                	mov    ecx,eax
c002805e:	89 d0                	mov    eax,edx
c0028060:	c1 e8 0b             	shr    eax,0xb
c0028063:	09 c1                	or     ecx,eax
c0028065:	c1 e2 15             	shl    edx,0x15
c0028068:	89 d0                	mov    eax,edx
c002806a:	89 ca                	mov    edx,ecx
c002806c:	5e                   	pop    esi
c002806d:	5f                   	pop    edi
c002806e:	5d                   	pop    ebp
c002806f:	c3                   	ret    

c0028070 <fabs>:
c0028070:	83 ec 0c             	sub    esp,0xc
c0028073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028077:	89 04 24             	mov    DWORD PTR [esp],eax
c002807a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002807e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028083:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028087:	dd 04 24             	fld    QWORD PTR [esp]
c002808a:	83 c4 0c             	add    esp,0xc
c002808d:	c3                   	ret    
c002808e:	66 90                	xchg   ax,ax

c0028090 <lrint>:
c0028090:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028094:	83 ec 04             	sub    esp,0x4
c0028097:	db 1c 24             	fistp  DWORD PTR [esp]
c002809a:	58                   	pop    eax
c002809b:	c3                   	ret    

c002809c <lrintf>:
c002809c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00280a0:	83 ec 04             	sub    esp,0x4
c00280a3:	db 1c 24             	fistp  DWORD PTR [esp]
c00280a6:	58                   	pop    eax
c00280a7:	c3                   	ret    

Disassembly of section .init:

c00280a8 <_init>:
c00280a8:	55                   	push   ebp
c00280a9:	89 e5                	mov    ebp,esp
c00280ab:	e8 68 80 fd ff       	call   c0000118 <frame_dummy>
c00280b0:	e8 63 e0 ff ff       	call   c0026118 <__do_global_ctors_aux>
c00280b5:	5d                   	pop    ebp
c00280b6:	c3                   	ret    

Disassembly of section .fini:

c00280b7 <_fini>:
c00280b7:	55                   	push   ebp
c00280b8:	89 e5                	mov    ebp,esp
c00280ba:	e8 e9 7f fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00280bf:	5d                   	pop    ebp
c00280c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00280c2 <Computer::~Computer()>:
c00280c2:	83 ec 0c             	sub    esp,0xc
c00280c5:	ba 08 9c 02 c0       	mov    edx,0xc0029c08
c00280ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ce:	89 10                	mov    DWORD PTR [eax],edx
c00280d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280d4:	83 ec 0c             	sub    esp,0xc
c00280d7:	50                   	push   eax
c00280d8:	e8 2b bd fe ff       	call   c0013e08 <Device::~Device()>
c00280dd:	83 c4 10             	add    esp,0x10
c00280e0:	90                   	nop
c00280e1:	83 c4 0c             	add    esp,0xc
c00280e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00280e6 <Computer::~Computer()>:
c00280e6:	83 ec 0c             	sub    esp,0xc
c00280e9:	83 ec 0c             	sub    esp,0xc
c00280ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280f0:	e8 cd ff ff ff       	call   c00280c2 <Computer::~Computer()>
c00280f5:	83 c4 10             	add    esp,0x10
c00280f8:	83 ec 08             	sub    esp,0x8
c00280fb:	68 ec 01 00 00       	push   0x1ec
c0028100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028104:	e8 26 a9 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028109:	83 c4 10             	add    esp,0x10
c002810c:	83 c4 0c             	add    esp,0xc
c002810f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028110 <idleCommon()>:
c0028110:	83 ec 0c             	sub    esp,0xc
c0028113:	e8 16 57 ff ff       	call   c001d82e <lockScheduler()>
c0028118:	e8 4d 5a ff ff       	call   c001db6a <schedule()>
c002811d:	83 c4 0c             	add    esp,0xc
c0028120:	e9 0b 57 ff ff       	jmp    c001d830 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028126 <LinkedList<UnixFile>::~LinkedList()>:
c0028126:	90                   	nop
c0028127:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028128 <LinkedList<UnixFile>::LinkedList()>:
c0028128:	83 ec 0c             	sub    esp,0xc
c002812b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002812f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028139:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028144:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002814b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002814f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028159:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028164:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002816b:	83 ec 0c             	sub    esp,0xc
c002816e:	68 c6 9e 02 c0       	push   0xc0029ec6
c0028173:	e8 97 a9 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0028178:	83 c4 10             	add    esp,0x10
c002817b:	90                   	nop
c002817c:	83 c4 0c             	add    esp,0xc
c002817f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028180 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028180:	83 ec 0c             	sub    esp,0xc
c0028183:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028188:	75 10                	jne    c002819a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002818a:	83 ec 0c             	sub    esp,0xc
c002818d:	68 e0 9e 02 c0       	push   0xc0029ee0
c0028192:	e8 08 20 ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0028197:	83 c4 10             	add    esp,0x10
c002819a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002819e:	8b 00                	mov    eax,DWORD PTR [eax]
c00281a0:	85 c0                	test   eax,eax
c00281a2:	74 34                	je     c00281d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00281a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281ab:	85 c0                	test   eax,eax
c00281ad:	74 29                	je     c00281d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00281af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00281ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00281bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00281c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00281c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00281d6:	eb 65                	jmp    c002823d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00281d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00281de:	85 c0                	test   eax,eax
c00281e0:	75 4b                	jne    c002822d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00281e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281e9:	85 c0                	test   eax,eax
c00281eb:	75 40                	jne    c002822d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00281ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00281f5:	89 10                	mov    DWORD PTR [eax],edx
c00281f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00281ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028209:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028214:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028217:	85 c0                	test   eax,eax
c0028219:	74 22                	je     c002823d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002821b:	83 ec 0c             	sub    esp,0xc
c002821e:	68 02 9f 02 c0       	push   0xc0029f02
c0028223:	e8 77 1f ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0028228:	83 c4 10             	add    esp,0x10
c002822b:	eb 10                	jmp    c002823d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002822d:	83 ec 0c             	sub    esp,0xc
c0028230:	68 0c 9f 02 c0       	push   0xc0029f0c
c0028235:	e8 65 1f ff ff       	call   c001a19f <Krnl::panic(char const*)>
c002823a:	83 c4 10             	add    esp,0x10
c002823d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028241:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028244:	8d 50 01             	lea    edx,[eax+0x1]
c0028247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002824b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002824e:	90                   	nop
c002824f:	83 c4 0c             	add    esp,0xc
c0028252:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028254 <LinkedList<UnixFile>::getFirstElement()>:
c0028254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028258:	8b 00                	mov    eax,DWORD PTR [eax]
c002825a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002825c <LinkedList<UnixFile>::removeFirst()>:
c002825c:	83 ec 0c             	sub    esp,0xc
c002825f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028263:	8b 00                	mov    eax,DWORD PTR [eax]
c0028265:	85 c0                	test   eax,eax
c0028267:	75 12                	jne    c002827b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028269:	83 ec 0c             	sub    esp,0xc
c002826c:	68 18 9f 02 c0       	push   0xc0029f18
c0028271:	e8 29 1f ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0028276:	83 c4 10             	add    esp,0x10
c0028279:	eb 7e                	jmp    c00282f9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002827b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002827f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028282:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028285:	85 c0                	test   eax,eax
c0028287:	74 10                	je     c0028299 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028289:	83 ec 0c             	sub    esp,0xc
c002828c:	68 63 9f 02 c0       	push   0xc0029f63
c0028291:	e8 09 1f ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0028296:	83 c4 10             	add    esp,0x10
c0028299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002829d:	8b 00                	mov    eax,DWORD PTR [eax]
c002829f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00282a2:	85 c0                	test   eax,eax
c00282a4:	75 33                	jne    c00282d9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00282a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00282b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00282c2:	83 f8 01             	cmp    eax,0x1
c00282c5:	74 21                	je     c00282e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00282c7:	83 ec 0c             	sub    esp,0xc
c00282ca:	68 3c 9f 02 c0       	push   0xc0029f3c
c00282cf:	e8 cb 1e ff ff       	call   c001a19f <Krnl::panic(char const*)>
c00282d4:	83 c4 10             	add    esp,0x10
c00282d7:	eb 0f                	jmp    c00282e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00282d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00282df:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00282e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e6:	89 10                	mov    DWORD PTR [eax],edx
c00282e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00282ef:	8d 50 ff             	lea    edx,[eax-0x1]
c00282f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00282f9:	83 c4 0c             	add    esp,0xc
c00282fc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00282fe <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00282fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028302:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028305:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028306 <DriverlessDevice::~DriverlessDevice()>:
c0028306:	ba 44 a6 02 c0       	mov    edx,0xc002a644
c002830b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002830f:	89 10                	mov    DWORD PTR [eax],edx
c0028311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028315:	50                   	push   eax
c0028316:	e8 ed ba fe ff       	call   c0013e08 <Device::~Device()>
c002831b:	83 c4 04             	add    esp,0x4
c002831e:	90                   	nop
c002831f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028320 <DriverlessDevice::~DriverlessDevice()>:
c0028320:	83 ec 0c             	sub    esp,0xc
c0028323:	83 ec 0c             	sub    esp,0xc
c0028326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002832a:	e8 d7 ff ff ff       	call   c0028306 <DriverlessDevice::~DriverlessDevice()>
c002832f:	83 c4 10             	add    esp,0x10
c0028332:	83 ec 08             	sub    esp,0x8
c0028335:	68 58 01 00 00       	push   0x158
c002833a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002833e:	e8 ec a6 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028343:	83 c4 10             	add    esp,0x10
c0028346:	83 c4 0c             	add    esp,0xc
c0028349:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002834a <LinkedList<Device>::addElement(Device*)>:
c002834a:	83 ec 0c             	sub    esp,0xc
c002834d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028352:	75 10                	jne    c0028364 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028354:	83 ec 0c             	sub    esp,0xc
c0028357:	68 e0 9e 02 c0       	push   0xc0029ee0
c002835c:	e8 3e 1e ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0028361:	83 c4 10             	add    esp,0x10
c0028364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028368:	8b 00                	mov    eax,DWORD PTR [eax]
c002836a:	85 c0                	test   eax,eax
c002836c:	74 3a                	je     c00283a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002836e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028372:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028375:	85 c0                	test   eax,eax
c0028377:	74 2f                	je     c00283a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002837d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028384:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002838a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002838e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028392:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028399:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002839c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00283a6:	eb 68                	jmp    c0028410 <LinkedList<Device>::addElement(Device*)+0xc6>
c00283a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00283ae:	85 c0                	test   eax,eax
c00283b0:	75 4e                	jne    c0028400 <LinkedList<Device>::addElement(Device*)+0xb6>
c00283b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283b9:	85 c0                	test   eax,eax
c00283bb:	75 43                	jne    c0028400 <LinkedList<Device>::addElement(Device*)+0xb6>
c00283bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283c5:	89 10                	mov    DWORD PTR [eax],edx
c00283c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283d9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00283e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283ea:	85 c0                	test   eax,eax
c00283ec:	74 22                	je     c0028410 <LinkedList<Device>::addElement(Device*)+0xc6>
c00283ee:	83 ec 0c             	sub    esp,0xc
c00283f1:	68 02 9f 02 c0       	push   0xc0029f02
c00283f6:	e8 a4 1d ff ff       	call   c001a19f <Krnl::panic(char const*)>
c00283fb:	83 c4 10             	add    esp,0x10
c00283fe:	eb 10                	jmp    c0028410 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028400:	83 ec 0c             	sub    esp,0xc
c0028403:	68 0c 9f 02 c0       	push   0xc0029f0c
c0028408:	e8 92 1d ff ff       	call   c001a19f <Krnl::panic(char const*)>
c002840d:	83 c4 10             	add    esp,0x10
c0028410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028414:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028417:	8d 50 01             	lea    edx,[eax+0x1]
c002841a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002841e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028421:	90                   	nop
c0028422:	83 c4 0c             	add    esp,0xc
c0028425:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028426 <LinkedList<Device>::LinkedList()>:
c0028426:	83 ec 0c             	sub    esp,0xc
c0028429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002842d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028437:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002843e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028442:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002844d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028457:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028462:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028469:	83 ec 0c             	sub    esp,0xc
c002846c:	68 c6 9e 02 c0       	push   0xc0029ec6
c0028471:	e8 99 a6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0028476:	83 c4 10             	add    esp,0x10
c0028479:	90                   	nop
c002847a:	83 c4 0c             	add    esp,0xc
c002847d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002847e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002847e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028482:	8b 00                	mov    eax,DWORD PTR [eax]
c0028484:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028486 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002848a:	8b 00                	mov    eax,DWORD PTR [eax]
c002848c:	85 c0                	test   eax,eax
c002848e:	75 0e                	jne    c002849e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028497:	85 c0                	test   eax,eax
c0028499:	75 03                	jne    c002849e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002849b:	b0 01                	mov    al,0x1
c002849d:	c3                   	ret    
c002849e:	b0 00                	mov    al,0x0
c00284a0:	90                   	nop
c00284a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00284a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00284a2:	83 ec 0c             	sub    esp,0xc
c00284a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00284ab:	85 c0                	test   eax,eax
c00284ad:	75 15                	jne    c00284c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00284af:	83 ec 0c             	sub    esp,0xc
c00284b2:	68 18 9f 02 c0       	push   0xc0029f18
c00284b7:	e8 e3 1c ff ff       	call   c001a19f <Krnl::panic(char const*)>
c00284bc:	83 c4 10             	add    esp,0x10
c00284bf:	e9 88 00 00 00       	jmp    c002854c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00284c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00284ce:	85 c0                	test   eax,eax
c00284d0:	0f 95 c0             	setne  al
c00284d3:	84 c0                	test   al,al
c00284d5:	74 10                	je     c00284e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00284d7:	83 ec 0c             	sub    esp,0xc
c00284da:	68 63 9f 02 c0       	push   0xc0029f63
c00284df:	e8 bb 1c ff ff       	call   c001a19f <Krnl::panic(char const*)>
c00284e4:	83 c4 10             	add    esp,0x10
c00284e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00284ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00284f0:	85 c0                	test   eax,eax
c00284f2:	0f 94 c0             	sete   al
c00284f5:	84 c0                	test   al,al
c00284f7:	74 33                	je     c002852c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00284f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028507:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002850e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028512:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028515:	83 f8 01             	cmp    eax,0x1
c0028518:	74 21                	je     c002853b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002851a:	83 ec 0c             	sub    esp,0xc
c002851d:	68 3c 9f 02 c0       	push   0xc0029f3c
c0028522:	e8 78 1c ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0028527:	83 c4 10             	add    esp,0x10
c002852a:	eb 0f                	jmp    c002853b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002852c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028530:	8b 00                	mov    eax,DWORD PTR [eax]
c0028532:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028539:	89 10                	mov    DWORD PTR [eax],edx
c002853b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028542:	8d 50 ff             	lea    edx,[eax-0x1]
c0028545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028549:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002854c:	83 c4 0c             	add    esp,0xc
c002854f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028550:	83 ec 0c             	sub    esp,0xc
c0028553:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028558:	75 10                	jne    c002856a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002855a:	83 ec 0c             	sub    esp,0xc
c002855d:	68 e0 9e 02 c0       	push   0xc0029ee0
c0028562:	e8 38 1c ff ff       	call   c001a19f <Krnl::panic(char const*)>
c0028567:	83 c4 10             	add    esp,0x10
c002856a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028570:	85 c0                	test   eax,eax
c0028572:	74 34                	je     c00285a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002857b:	85 c0                	test   eax,eax
c002857d:	74 29                	je     c00285a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002857f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028583:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028586:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002858a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002858d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028591:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028595:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002859f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00285a6:	eb 65                	jmp    c002860d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00285a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00285ae:	85 c0                	test   eax,eax
c00285b0:	75 4b                	jne    c00285fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00285b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285b9:	85 c0                	test   eax,eax
c00285bb:	75 40                	jne    c00285fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00285bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285c5:	89 10                	mov    DWORD PTR [eax],edx
c00285c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00285e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285e7:	85 c0                	test   eax,eax
c00285e9:	74 22                	je     c002860d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00285eb:	83 ec 0c             	sub    esp,0xc
c00285ee:	68 02 9f 02 c0       	push   0xc0029f02
c00285f3:	e8 a7 1b ff ff       	call   c001a19f <Krnl::panic(char const*)>
c00285f8:	83 c4 10             	add    esp,0x10
c00285fb:	eb 10                	jmp    c002860d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00285fd:	83 ec 0c             	sub    esp,0xc
c0028600:	68 0c 9f 02 c0       	push   0xc0029f0c
c0028605:	e8 95 1b ff ff       	call   c001a19f <Krnl::panic(char const*)>
c002860a:	83 c4 10             	add    esp,0x10
c002860d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028611:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028614:	8d 50 01             	lea    edx,[eax+0x1]
c0028617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002861e:	90                   	nop
c002861f:	83 c4 0c             	add    esp,0xc
c0028622:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028624 <ACPI::~ACPI()>:
c0028624:	83 ec 0c             	sub    esp,0xc
c0028627:	ba 8c af 02 c0       	mov    edx,0xc002af8c
c002862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028630:	89 10                	mov    DWORD PTR [eax],edx
c0028632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028636:	83 ec 0c             	sub    esp,0xc
c0028639:	50                   	push   eax
c002863a:	e8 c9 b7 fe ff       	call   c0013e08 <Device::~Device()>
c002863f:	83 c4 10             	add    esp,0x10
c0028642:	90                   	nop
c0028643:	83 c4 0c             	add    esp,0xc
c0028646:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028648 <ACPI::~ACPI()>:
c0028648:	83 ec 0c             	sub    esp,0xc
c002864b:	83 ec 0c             	sub    esp,0xc
c002864e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028652:	e8 cd ff ff ff       	call   c0028624 <ACPI::~ACPI()>
c0028657:	83 c4 10             	add    esp,0x10
c002865a:	83 ec 08             	sub    esp,0x8
c002865d:	68 68 12 00 00       	push   0x1268
c0028662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028666:	e8 c4 a3 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c002866b:	83 c4 10             	add    esp,0x10
c002866e:	83 c4 0c             	add    esp,0xc
c0028671:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028672 <CPU::~CPU()>:
c0028672:	83 ec 0c             	sub    esp,0xc
c0028675:	ba 7c b3 02 c0       	mov    edx,0xc002b37c
c002867a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867e:	89 10                	mov    DWORD PTR [eax],edx
c0028680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028684:	83 ec 0c             	sub    esp,0xc
c0028687:	50                   	push   eax
c0028688:	e8 7b b7 fe ff       	call   c0013e08 <Device::~Device()>
c002868d:	83 c4 10             	add    esp,0x10
c0028690:	90                   	nop
c0028691:	83 c4 0c             	add    esp,0xc
c0028694:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028696 <CPU::~CPU()>:
c0028696:	83 ec 0c             	sub    esp,0xc
c0028699:	83 ec 0c             	sub    esp,0xc
c002869c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286a0:	e8 cd ff ff ff       	call   c0028672 <CPU::~CPU()>
c00286a5:	83 c4 10             	add    esp,0x10
c00286a8:	83 ec 08             	sub    esp,0x8
c00286ab:	68 98 11 00 00       	push   0x1198
c00286b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b4:	e8 76 a3 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00286b9:	83 c4 10             	add    esp,0x10
c00286bc:	83 c4 0c             	add    esp,0xc
c00286bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00286c0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00286c0:	90                   	nop
c00286c1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00286c2 <ThreadControlBlock::ThreadControlBlock()>:
c00286c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286c6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00286cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286d1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00286d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286dc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00286e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286e7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00286ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286f2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00286f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286fa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00286fe:	90                   	nop
c00286ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028700 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028700:	83 ec 0c             	sub    esp,0xc
c0028703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028707:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028711:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028727:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002872d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028731:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028743:	83 ec 0c             	sub    esp,0xc
c0028746:	68 c6 9e 02 c0       	push   0xc0029ec6
c002874b:	e8 bf a3 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0028750:	83 c4 10             	add    esp,0x10
c0028753:	90                   	nop
c0028754:	83 c4 0c             	add    esp,0xc
c0028757:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028758 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028758:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002875c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002875f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028760 <Vm::_FPUState::_FPUState()>:
c0028760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028764:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002876b:	90                   	nop
c002876c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002876e <PCI::~PCI()>:
c002876e:	83 ec 0c             	sub    esp,0xc
c0028771:	ba 64 c3 02 c0       	mov    edx,0xc002c364
c0028776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877a:	89 10                	mov    DWORD PTR [eax],edx
c002877c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028780:	83 ec 0c             	sub    esp,0xc
c0028783:	50                   	push   eax
c0028784:	e8 57 b0 fe ff       	call   c00137e0 <Bus::~Bus()>
c0028789:	83 c4 10             	add    esp,0x10
c002878c:	90                   	nop
c002878d:	83 c4 0c             	add    esp,0xc
c0028790:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028792 <PCI::~PCI()>:
c0028792:	83 ec 0c             	sub    esp,0xc
c0028795:	83 ec 0c             	sub    esp,0xc
c0028798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002879c:	e8 cd ff ff ff       	call   c002876e <PCI::~PCI()>
c00287a1:	83 c4 10             	add    esp,0x10
c00287a4:	83 ec 08             	sub    esp,0x8
c00287a7:	68 58 01 00 00       	push   0x158
c00287ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287b0:	e8 7a a2 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00287b5:	83 c4 10             	add    esp,0x10
c00287b8:	83 c4 0c             	add    esp,0xc
c00287bb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00287bc <IDE::~IDE()>:
c00287bc:	83 ec 0c             	sub    esp,0xc
c00287bf:	ba c8 c5 02 c0       	mov    edx,0xc002c5c8
c00287c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c8:	89 10                	mov    DWORD PTR [eax],edx
c00287ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ce:	83 ec 0c             	sub    esp,0xc
c00287d1:	50                   	push   eax
c00287d2:	e8 21 bb fe ff       	call   c00142f8 <HardDiskController::~HardDiskController()>
c00287d7:	83 c4 10             	add    esp,0x10
c00287da:	90                   	nop
c00287db:	83 c4 0c             	add    esp,0xc
c00287de:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00287e0 <IDE::~IDE()>:
c00287e0:	83 ec 0c             	sub    esp,0xc
c00287e3:	83 ec 0c             	sub    esp,0xc
c00287e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ea:	e8 cd ff ff ff       	call   c00287bc <IDE::~IDE()>
c00287ef:	83 c4 10             	add    esp,0x10
c00287f2:	83 ec 08             	sub    esp,0x8
c00287f5:	68 70 02 00 00       	push   0x270
c00287fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287fe:	e8 2c a2 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028803:	83 c4 10             	add    esp,0x10
c0028806:	83 c4 0c             	add    esp,0xc
c0028809:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002880a <SATABus::~SATABus()>:
c002880a:	83 ec 0c             	sub    esp,0xc
c002880d:	ba a8 c6 02 c0       	mov    edx,0xc002c6a8
c0028812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028816:	89 10                	mov    DWORD PTR [eax],edx
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	83 ec 0c             	sub    esp,0xc
c002881f:	50                   	push   eax
c0028820:	e8 d3 ba fe ff       	call   c00142f8 <HardDiskController::~HardDiskController()>
c0028825:	83 c4 10             	add    esp,0x10
c0028828:	90                   	nop
c0028829:	83 c4 0c             	add    esp,0xc
c002882c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002882e <SATABus::~SATABus()>:
c002882e:	83 ec 0c             	sub    esp,0xc
c0028831:	83 ec 0c             	sub    esp,0xc
c0028834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028838:	e8 cd ff ff ff       	call   c002880a <SATABus::~SATABus()>
c002883d:	83 c4 10             	add    esp,0x10
c0028840:	83 ec 08             	sub    esp,0x8
c0028843:	68 64 01 00 00       	push   0x164
c0028848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002884c:	e8 de a1 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028851:	83 c4 10             	add    esp,0x10
c0028854:	83 c4 0c             	add    esp,0xc
c0028857:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028858 <ATA::~ATA()>:
c0028858:	83 ec 0c             	sub    esp,0xc
c002885b:	ba f4 c6 02 c0       	mov    edx,0xc002c6f4
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	89 10                	mov    DWORD PTR [eax],edx
c0028866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886a:	83 ec 0c             	sub    esp,0xc
c002886d:	50                   	push   eax
c002886e:	e8 77 bb fe ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c0028873:	83 c4 10             	add    esp,0x10
c0028876:	90                   	nop
c0028877:	83 c4 0c             	add    esp,0xc
c002887a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002887c <ATA::~ATA()>:
c002887c:	83 ec 0c             	sub    esp,0xc
c002887f:	83 ec 0c             	sub    esp,0xc
c0028882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028886:	e8 cd ff ff ff       	call   c0028858 <ATA::~ATA()>
c002888b:	83 c4 10             	add    esp,0x10
c002888e:	83 ec 08             	sub    esp,0x8
c0028891:	68 7c 01 00 00       	push   0x17c
c0028896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002889a:	e8 90 a1 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c002889f:	83 c4 10             	add    esp,0x10
c00288a2:	83 c4 0c             	add    esp,0xc
c00288a5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00288a6 <ATAPI::~ATAPI()>:
c00288a6:	83 ec 0c             	sub    esp,0xc
c00288a9:	ba 2c c7 02 c0       	mov    edx,0xc002c72c
c00288ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b2:	89 10                	mov    DWORD PTR [eax],edx
c00288b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b8:	83 ec 0c             	sub    esp,0xc
c00288bb:	50                   	push   eax
c00288bc:	e8 29 bb fe ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c00288c1:	83 c4 10             	add    esp,0x10
c00288c4:	90                   	nop
c00288c5:	83 c4 0c             	add    esp,0xc
c00288c8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00288ca <ATAPI::~ATAPI()>:
c00288ca:	83 ec 0c             	sub    esp,0xc
c00288cd:	83 ec 0c             	sub    esp,0xc
c00288d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288d4:	e8 cd ff ff ff       	call   c00288a6 <ATAPI::~ATAPI()>
c00288d9:	83 c4 10             	add    esp,0x10
c00288dc:	83 ec 08             	sub    esp,0x8
c00288df:	68 80 01 00 00       	push   0x180
c00288e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288e8:	e8 42 a1 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00288ed:	83 c4 10             	add    esp,0x10
c00288f0:	83 c4 0c             	add    esp,0xc
c00288f3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00288f4 <SATA::~SATA()>:
c00288f4:	83 ec 0c             	sub    esp,0xc
c00288f7:	ba e0 c7 02 c0       	mov    edx,0xc002c7e0
c00288fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028900:	89 10                	mov    DWORD PTR [eax],edx
c0028902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028906:	83 ec 0c             	sub    esp,0xc
c0028909:	50                   	push   eax
c002890a:	e8 db ba fe ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c002890f:	83 c4 10             	add    esp,0x10
c0028912:	90                   	nop
c0028913:	83 c4 0c             	add    esp,0xc
c0028916:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028918 <SATA::~SATA()>:
c0028918:	83 ec 0c             	sub    esp,0xc
c002891b:	83 ec 0c             	sub    esp,0xc
c002891e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028922:	e8 cd ff ff ff       	call   c00288f4 <SATA::~SATA()>
c0028927:	83 c4 10             	add    esp,0x10
c002892a:	83 ec 08             	sub    esp,0x8
c002892d:	68 7c 01 00 00       	push   0x17c
c0028932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028936:	e8 f4 a0 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c002893b:	83 c4 10             	add    esp,0x10
c002893e:	83 c4 0c             	add    esp,0xc
c0028941:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028942 <SATAPI::~SATAPI()>:
c0028942:	83 ec 0c             	sub    esp,0xc
c0028945:	ba bc c8 02 c0       	mov    edx,0xc002c8bc
c002894a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894e:	89 10                	mov    DWORD PTR [eax],edx
c0028950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028954:	83 ec 0c             	sub    esp,0xc
c0028957:	50                   	push   eax
c0028958:	e8 8d ba fe ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c002895d:	83 c4 10             	add    esp,0x10
c0028960:	90                   	nop
c0028961:	83 c4 0c             	add    esp,0xc
c0028964:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028966 <SATAPI::~SATAPI()>:
c0028966:	83 ec 0c             	sub    esp,0xc
c0028969:	83 ec 0c             	sub    esp,0xc
c002896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028970:	e8 cd ff ff ff       	call   c0028942 <SATAPI::~SATAPI()>
c0028975:	83 c4 10             	add    esp,0x10
c0028978:	83 ec 08             	sub    esp,0x8
c002897b:	68 80 01 00 00       	push   0x180
c0028980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028984:	e8 a6 a0 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028989:	83 c4 10             	add    esp,0x10
c002898c:	83 c4 0c             	add    esp,0xc
c002898f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028990 <AVX::~AVX()>:
c0028990:	83 ec 0c             	sub    esp,0xc
c0028993:	ba fc c8 02 c0       	mov    edx,0xc002c8fc
c0028998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899c:	89 10                	mov    DWORD PTR [eax],edx
c002899e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a2:	83 ec 0c             	sub    esp,0xc
c00289a5:	50                   	push   eax
c00289a6:	e8 c3 ba fe ff       	call   c001446e <FPU::~FPU()>
c00289ab:	83 c4 10             	add    esp,0x10
c00289ae:	90                   	nop
c00289af:	83 c4 0c             	add    esp,0xc
c00289b2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00289b4 <AVX::~AVX()>:
c00289b4:	83 ec 0c             	sub    esp,0xc
c00289b7:	83 ec 0c             	sub    esp,0xc
c00289ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289be:	e8 cd ff ff ff       	call   c0028990 <AVX::~AVX()>
c00289c3:	83 c4 10             	add    esp,0x10
c00289c6:	83 ec 08             	sub    esp,0x8
c00289c9:	68 58 01 00 00       	push   0x158
c00289ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289d2:	e8 58 a0 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00289d7:	83 c4 10             	add    esp,0x10
c00289da:	83 c4 0c             	add    esp,0xc
c00289dd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00289de <MMX::~MMX()>:
c00289de:	83 ec 0c             	sub    esp,0xc
c00289e1:	ba 3c c9 02 c0       	mov    edx,0xc002c93c
c00289e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ea:	89 10                	mov    DWORD PTR [eax],edx
c00289ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f0:	83 ec 0c             	sub    esp,0xc
c00289f3:	50                   	push   eax
c00289f4:	e8 75 ba fe ff       	call   c001446e <FPU::~FPU()>
c00289f9:	83 c4 10             	add    esp,0x10
c00289fc:	90                   	nop
c00289fd:	83 c4 0c             	add    esp,0xc
c0028a00:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028a02 <MMX::~MMX()>:
c0028a02:	83 ec 0c             	sub    esp,0xc
c0028a05:	83 ec 0c             	sub    esp,0xc
c0028a08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a0c:	e8 cd ff ff ff       	call   c00289de <MMX::~MMX()>
c0028a11:	83 c4 10             	add    esp,0x10
c0028a14:	83 ec 08             	sub    esp,0x8
c0028a17:	68 58 01 00 00       	push   0x158
c0028a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a20:	e8 0a a0 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028a25:	83 c4 10             	add    esp,0x10
c0028a28:	83 c4 0c             	add    esp,0xc
c0028a2b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028a2c <SSE::~SSE()>:
c0028a2c:	83 ec 0c             	sub    esp,0xc
c0028a2f:	ba 7c c9 02 c0       	mov    edx,0xc002c97c
c0028a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a38:	89 10                	mov    DWORD PTR [eax],edx
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	83 ec 0c             	sub    esp,0xc
c0028a41:	50                   	push   eax
c0028a42:	e8 27 ba fe ff       	call   c001446e <FPU::~FPU()>
c0028a47:	83 c4 10             	add    esp,0x10
c0028a4a:	90                   	nop
c0028a4b:	83 c4 0c             	add    esp,0xc
c0028a4e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028a50 <SSE::~SSE()>:
c0028a50:	83 ec 0c             	sub    esp,0xc
c0028a53:	83 ec 0c             	sub    esp,0xc
c0028a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a5a:	e8 cd ff ff ff       	call   c0028a2c <SSE::~SSE()>
c0028a5f:	83 c4 10             	add    esp,0x10
c0028a62:	83 ec 08             	sub    esp,0x8
c0028a65:	68 58 01 00 00       	push   0x158
c0028a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a6e:	e8 bc 9f fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028a73:	83 c4 10             	add    esp,0x10
c0028a76:	83 c4 0c             	add    esp,0xc
c0028a79:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028a7a <x87::~x87()>:
c0028a7a:	83 ec 0c             	sub    esp,0xc
c0028a7d:	ba bc c9 02 c0       	mov    edx,0xc002c9bc
c0028a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a86:	89 10                	mov    DWORD PTR [eax],edx
c0028a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8c:	83 ec 0c             	sub    esp,0xc
c0028a8f:	50                   	push   eax
c0028a90:	e8 d9 b9 fe ff       	call   c001446e <FPU::~FPU()>
c0028a95:	83 c4 10             	add    esp,0x10
c0028a98:	90                   	nop
c0028a99:	83 c4 0c             	add    esp,0xc
c0028a9c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028a9e <x87::~x87()>:
c0028a9e:	83 ec 0c             	sub    esp,0xc
c0028aa1:	83 ec 0c             	sub    esp,0xc
c0028aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa8:	e8 cd ff ff ff       	call   c0028a7a <x87::~x87()>
c0028aad:	83 c4 10             	add    esp,0x10
c0028ab0:	83 ec 08             	sub    esp,0x8
c0028ab3:	68 58 01 00 00       	push   0x158
c0028ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028abc:	e8 6e 9f fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028ac1:	83 c4 10             	add    esp,0x10
c0028ac4:	83 c4 0c             	add    esp,0xc
c0028ac7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028ac8 <IOAPIC::~IOAPIC()>:
c0028ac8:	83 ec 0c             	sub    esp,0xc
c0028acb:	ba 14 cb 02 c0       	mov    edx,0xc002cb14
c0028ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad4:	89 10                	mov    DWORD PTR [eax],edx
c0028ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ada:	83 ec 0c             	sub    esp,0xc
c0028add:	50                   	push   eax
c0028ade:	e8 25 b3 fe ff       	call   c0013e08 <Device::~Device()>
c0028ae3:	83 c4 10             	add    esp,0x10
c0028ae6:	90                   	nop
c0028ae7:	83 c4 0c             	add    esp,0xc
c0028aea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028aec <IOAPIC::~IOAPIC()>:
c0028aec:	83 ec 0c             	sub    esp,0xc
c0028aef:	83 ec 0c             	sub    esp,0xc
c0028af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af6:	e8 cd ff ff ff       	call   c0028ac8 <IOAPIC::~IOAPIC()>
c0028afb:	83 c4 10             	add    esp,0x10
c0028afe:	83 ec 08             	sub    esp,0x8
c0028b01:	68 68 01 00 00       	push   0x168
c0028b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b0a:	e8 20 9f fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028b0f:	83 c4 10             	add    esp,0x10
c0028b12:	83 c4 0c             	add    esp,0xc
c0028b15:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028b16 <APIC::~APIC()>:
c0028b16:	83 ec 0c             	sub    esp,0xc
c0028b19:	ba cc ca 02 c0       	mov    edx,0xc002cacc
c0028b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b22:	89 10                	mov    DWORD PTR [eax],edx
c0028b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b28:	83 ec 0c             	sub    esp,0xc
c0028b2b:	50                   	push   eax
c0028b2c:	e8 07 be fe ff       	call   c0014938 <InterruptController::~InterruptController()>
c0028b31:	83 c4 10             	add    esp,0x10
c0028b34:	90                   	nop
c0028b35:	83 c4 0c             	add    esp,0xc
c0028b38:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028b3a <APIC::~APIC()>:
c0028b3a:	83 ec 0c             	sub    esp,0xc
c0028b3d:	83 ec 0c             	sub    esp,0xc
c0028b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b44:	e8 cd ff ff ff       	call   c0028b16 <APIC::~APIC()>
c0028b49:	83 c4 10             	add    esp,0x10
c0028b4c:	83 ec 08             	sub    esp,0x8
c0028b4f:	68 58 21 00 00       	push   0x2158
c0028b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b58:	e8 d2 9e fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028b5d:	83 c4 10             	add    esp,0x10
c0028b60:	83 c4 0c             	add    esp,0xc
c0028b63:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028b64 <PIC::~PIC()>:
c0028b64:	83 ec 0c             	sub    esp,0xc
c0028b67:	ba 64 cb 02 c0       	mov    edx,0xc002cb64
c0028b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b70:	89 10                	mov    DWORD PTR [eax],edx
c0028b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b76:	83 ec 0c             	sub    esp,0xc
c0028b79:	50                   	push   eax
c0028b7a:	e8 b9 bd fe ff       	call   c0014938 <InterruptController::~InterruptController()>
c0028b7f:	83 c4 10             	add    esp,0x10
c0028b82:	90                   	nop
c0028b83:	83 c4 0c             	add    esp,0xc
c0028b86:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028b88 <PIC::~PIC()>:
c0028b88:	83 ec 0c             	sub    esp,0xc
c0028b8b:	83 ec 0c             	sub    esp,0xc
c0028b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b92:	e8 cd ff ff ff       	call   c0028b64 <PIC::~PIC()>
c0028b97:	83 c4 10             	add    esp,0x10
c0028b9a:	83 ec 08             	sub    esp,0x8
c0028b9d:	68 58 21 00 00       	push   0x2158
c0028ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba6:	e8 84 9e fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028bab:	83 c4 10             	add    esp,0x10
c0028bae:	83 c4 0c             	add    esp,0xc
c0028bb1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028bb2 <APICTimer::~APICTimer()>:
c0028bb2:	83 ec 0c             	sub    esp,0xc
c0028bb5:	ba b8 cb 02 c0       	mov    edx,0xc002cbb8
c0028bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbe:	89 10                	mov    DWORD PTR [eax],edx
c0028bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc4:	83 ec 0c             	sub    esp,0xc
c0028bc7:	50                   	push   eax
c0028bc8:	e8 63 dc fe ff       	call   c0016830 <Timer::~Timer()>
c0028bcd:	83 c4 10             	add    esp,0x10
c0028bd0:	90                   	nop
c0028bd1:	83 c4 0c             	add    esp,0xc
c0028bd4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028bd6 <APICTimer::~APICTimer()>:
c0028bd6:	83 ec 0c             	sub    esp,0xc
c0028bd9:	83 ec 0c             	sub    esp,0xc
c0028bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be0:	e8 cd ff ff ff       	call   c0028bb2 <APICTimer::~APICTimer()>
c0028be5:	83 c4 10             	add    esp,0x10
c0028be8:	83 ec 08             	sub    esp,0x8
c0028beb:	68 60 01 00 00       	push   0x160
c0028bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf4:	e8 36 9e fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028bf9:	83 c4 10             	add    esp,0x10
c0028bfc:	83 c4 0c             	add    esp,0xc
c0028bff:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028c00 <PIT::~PIT()>:
c0028c00:	83 ec 0c             	sub    esp,0xc
c0028c03:	ba 08 cc 02 c0       	mov    edx,0xc002cc08
c0028c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0c:	89 10                	mov    DWORD PTR [eax],edx
c0028c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c12:	83 ec 0c             	sub    esp,0xc
c0028c15:	50                   	push   eax
c0028c16:	e8 15 dc fe ff       	call   c0016830 <Timer::~Timer()>
c0028c1b:	83 c4 10             	add    esp,0x10
c0028c1e:	90                   	nop
c0028c1f:	83 c4 0c             	add    esp,0xc
c0028c22:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028c24 <PIT::~PIT()>:
c0028c24:	83 ec 0c             	sub    esp,0xc
c0028c27:	83 ec 0c             	sub    esp,0xc
c0028c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2e:	e8 cd ff ff ff       	call   c0028c00 <PIT::~PIT()>
c0028c33:	83 c4 10             	add    esp,0x10
c0028c36:	83 ec 08             	sub    esp,0x8
c0028c39:	68 5c 01 00 00       	push   0x15c
c0028c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c42:	e8 e8 9d fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028c47:	83 c4 10             	add    esp,0x10
c0028c4a:	83 c4 0c             	add    esp,0xc
c0028c4d:	c3                   	ret    
