
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a3 86 02 00       	call   c00286c8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 72 92 02 c0       	mov    ebx,0xc0029272
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 80 92 02 c0    	cmp    ebx,0xc0029280
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 db 02 c0       	mov    eax,0xc002dbf8
c0000049:	3d f8 db 02 c0       	cmp    eax,0xc002dbf8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 db 02 c0       	push   0xc002dbf8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 db 02 c0       	mov    eax,0xc002dbf8
c0000075:	2d f8 db 02 c0       	sub    eax,0xc002dbf8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 db 02 c0       	push   0xc002dbf8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e228,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 88 92 02 c0       	mov    ebx,0xc0029288
c00000bb:	81 eb 84 92 02 c0    	sub    ebx,0xc0029284
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 84 92 02 c0       	mov    esi,0xc0029284
c00000ca:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c e2 02 c0       	mov    ds:0xc002e22c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 db 02 c0       	push   0xc002dbf8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e228,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 e2 02 c0       	push   0xc002e230
c000012c:	68 f8 db 02 c0       	push   0xc002dbf8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 7f d6 01 00       	call   c001da1a <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 a8 29 01 00       	call   c0012d5b <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 5d d6 01 00       	call   c001da1a <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 ab da 01 00       	call   c001de87 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 59 e0 01 00       	call   c001e43e <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 70 e6 02 c0 	lgdtd  ds:0xc002e670
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 86 46 01 00       	call   c0014c5f <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 a0 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d60],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 a0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d60],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 a0 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d60],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 a0 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d60],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 a0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d60],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 60 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e260
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 64 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1d9c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 64 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d9c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 9c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e29c
c0000e60:	c7 42 0c 94 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e294
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 9c e2 02 c0    	mov    DWORD PTR ds:0xc002e29c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 8c e2 02 c0    	mov    DWORD PTR ds:0xc002e28c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 60 e2 02 c0 02 	test   BYTE PTR ds:0xc002e260,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 60 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e260
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 64 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1d9c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 64 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1d9c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 94 e2 02 c0 	lea    edx,[eax*8-0x3ffd1d6c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d a0 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2a0
c00011e2:	81 fb 94 e2 02 c0    	cmp    ebx,0xc002e294
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 94 e2 02 c0       	cmp    eax,0xc002e294
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 90 e2 02 c0    	cmp    DWORD PTR ds:0xc002e290,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 9c e2 02 c0       	mov    ds:0xc002e29c,eax
c000121e:	a3 a0 e2 02 c0       	mov    ds:0xc002e2a0,eax
c0001223:	a3 90 e2 02 c0       	mov    ds:0xc002e290,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 94 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e294
c0001231:	c7 40 0c 94 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e294
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 a0 e2 02 c0       	mov    ds:0xc002e2a0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 94 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e294
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 58 e2 02 c0 	lea    ebp,[edx*4-0x3ffd1da8]
c0001282:	8b 14 95 60 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1da0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 60 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1da0]
c000129d:	8b 14 95 60 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1da0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 94 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1a6c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 94 e2 02 c0 	lea    eax,[eax*8-0x3ffd1d6c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 9c e2 02 c0    	mov    DWORD PTR ds:0xc002e29c,ecx
c0001357:	89 0d a0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a0,ecx
c000135d:	c7 41 08 94 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e294
c0001364:	c7 41 0c 94 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e294
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 8c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1d74]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 94 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a6c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 94 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a6c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 8c e2 02 c0 	lea    edx,[eax*4-0x3ffd1d74]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 94 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1a6c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 9c e2 02 c0    	mov    DWORD PTR ds:0xc002e29c,edi
c000142a:	89 3d a0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a0,edi
c0001430:	c7 47 08 94 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e294
c0001437:	c7 47 0c 94 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e294
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 90 e2 02 c0    	mov    DWORD PTR ds:0xc002e290,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 8c e2 02 c0       	mov    eax,ds:0xc002e28c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 8c e2 02 c0    	mov    DWORD PTR ds:0xc002e28c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 60 e2 02 c0       	mov    edx,0xc002e260
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 60 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e260,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d b4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5b4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 b4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5b4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d b4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5b4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 8c e2 02 c0    	mov    DWORD PTR ds:0xc002e28c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 60 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e260,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 bc e5 02 c0    	push   DWORD PTR ds:0xc002e5bc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 60 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e260,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 bc e5 02 c0       	mov    eax,ds:0xc002e5bc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 8c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e28c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 8c e2 02 c0       	mov    eax,ds:0xc002e28c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 64 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1d9c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 94 e2 02 c0       	mov    eax,0xc002e294
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 8c e5 02 c0       	cmp    eax,0xc002e58c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 b0 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5b0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 c4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5c4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 d4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5d4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 a4 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c5c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 60 e2 02 c0       	mov    ds:0xc002e260,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d a4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d a8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ac e5 02 c0    	mov    DWORD PTR ds:0xc002e5ac,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 b4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5b4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 40 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2c0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 0a f2 01 00       	jmp    c0020e36 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 40 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2c0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 3b f2 01 00       	jmp    c0020e7d <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 40 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2c0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 63 f2 01 00       	jmp    c0020ec4 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 e8 4a 02 00       	call   c0026a2c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 c0 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b40]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 c0 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b40]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba c0 93 02 c0       	mov    edx,0xc00293c0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 78 ca 02 c0       	mov    edx,0xc002ca78
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ec 94 02 c0       	mov    edx,0xc00294ec
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 00 e6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a00]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 e0 e5 02 c0    	mov    ax,ds:0xc002e5e0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 e0 e5 02 c0    	mov    ds:0xc002e5e0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 e5 38 02 00       	call   c0026a2c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 f2 94 02 c0       	mov    eax,0xc00294f2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 40 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6bc0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 fb 94 02 c0       	mov    eax,0xc00294fb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 c0 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b40]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 b0 22 02 00       	call   c0026a2c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba c0 93 02 c0       	mov    edx,0xc00293c0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 00 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a00]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 00 e6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a00],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 77 0c 02 00       	call   c0026a2c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 5d 0c 02 00       	call   c0026a2c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 17 94 02 c0       	mov    eax,0xc0029417
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 10 94 02 c0       	mov    eax,0xc0029410
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 00 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a00]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 00 94 02 c0       	mov    esi,0xc0029400
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 a0 f3 01 00       	call   c0026a2c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba e0 93 02 c0       	mov    edx,0xc00293e0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 02 95 02 c0       	mov    edx,0xc0029502
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 0e 95 02 c0       	mov    edx,0xc002950e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 22 95 02 c0       	mov    edx,0xc0029522
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 40 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029840
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 40 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029840
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 40 96 02 c0       	mov    eax,0xc0029640
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 80 95 02 c0       	mov    eax,0xc0029580
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 f4 fc 01 00       	call   c00284ff <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 b7 fc 01 00       	call   c00284e1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 8b fc 01 00       	call   c00284ff <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 3e f3 01 00       	call   c0027c04 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 b8 fd 01 00       	call   c0028690 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 05 fc 01 00       	call   c00284ff <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 47 fb 01 00       	call   c00284ff <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 14 fb 01 00       	call   c00284e1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 01 fa 01 00       	call   c00284ff <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 c9 f9 01 00       	call   c00284e1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 40 99 02 c0       	mov    eax,0xc0029940
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 d5 f7 01 00       	call   c00284ff <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 9a f7 01 00       	call   c00284e1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 a0 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6260]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 aa f4 01 00       	call   c0028293 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 28 ee 01 00       	call   c0027c30 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 e4 f6 01 00       	call   c0028503 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 d2 f7 01 00       	call   c0028627 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 bc ed 01 00       	call   c0027c30 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 67 f6 01 00       	call   c00284fd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 48 f6 01 00       	call   c0028501 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 d6 f7 01 00       	call   c00286b0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 88 f3 01 00       	call   c0028293 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 06 ed 01 00       	call   c0027c30 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 c2 f5 01 00       	call   c0028503 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 b0 f6 01 00       	call   c0028627 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 9a ec 01 00       	call   c0027c30 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 45 f5 01 00       	call   c00284fd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 25 f5 01 00       	call   c0028501 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 b2 f6 01 00       	call   c00286b0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 60 f4 01 00       	call   c00284ff <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 1e f4 01 00       	call   c00284e1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 06 f4 01 00       	call   c00284ff <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 78 f1 01 00       	call   c0028293 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 7a e4 01 00       	call   c00275b3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 dd ea 01 00       	call   c0027c30 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 2f f1 01 00       	call   c0028293 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 35 e4 01 00       	call   c00275b3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 04 f1 01 00       	call   c0028293 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 54 f3 01 00       	call   c00284fd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 31 ea 01 00       	call   c0027c04 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 ab f4 01 00       	call   c0028690 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 da f2 01 00       	call   c00284e1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 d5 e9 01 00       	call   c0027c04 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 53 f0 01 00       	call   c0028293 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 d6 e9 01 00       	call   c0027c30 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 28 f0 01 00       	call   c0028293 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 8f ec 01 00       	call   c0027f14 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 0e e3 01 00       	call   c00275b3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 6e dc 01 00       	call   c0026f48 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 45 f3 01 00       	call   c0028627 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 2e e9 01 00       	call   c0027c30 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 15 f3 01 00       	call   c0028627 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 87 e2 01 00       	call   c00275b3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 c0 f1 01 00       	call   c0028503 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 a8 eb 01 00       	call   c0027f14 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 2e e2 01 00       	call   c00275b3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 14 f3 01 00       	call   c00286b0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 ee ee 01 00       	call   c0028293 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 45 e8 01 00       	call   c0027c04 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 24 f1 01 00       	call   c00284ff <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 bd e1 01 00       	call   c00275b3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 e9 e7 01 00       	call   c0027c04 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 83 f2 01 00       	call   c00286b0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 3c ee 01 00       	call   c0028293 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 b9 e7 01 00       	call   c0027c30 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 0c ee 01 00       	call   c0028293 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 12 e1 01 00       	call   c00275b3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 e2 ed 01 00       	call   c0028293 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 34 f0 01 00       	call   c00284ff <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 0b e7 01 00       	call   c0027c04 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 85 f1 01 00       	call   c0028690 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 b4 ef 01 00       	call   c00284e1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 ae e6 01 00       	call   c0027c04 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 2c ed 01 00       	call   c0028293 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 af e6 01 00       	call   c0027c30 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 01 ed 01 00       	call   c0028293 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 68 e9 01 00       	call   c0027f14 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 e7 df 01 00       	call   c00275b3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 37 d9 01 00       	call   c0026f48 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 0e f0 01 00       	call   c0028627 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 f7 e5 01 00       	call   c0027c30 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 de ef 01 00       	call   c0028627 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 50 df 01 00       	call   c00275b3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 89 ee 01 00       	call   c0028503 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 70 e8 01 00       	call   c0027f14 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 ef de 01 00       	call   c00275b3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 d5 ef 01 00       	call   c00286b0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 af eb 01 00       	call   c0028293 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 06 e5 01 00       	call   c0027c04 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 e5 ed 01 00       	call   c00284ff <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 7e de 01 00       	call   c00275b3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 aa e4 01 00       	call   c0027c04 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 1f eb 01 00       	call   c0028293 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 25 de 01 00       	call   c00275b3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 00 9e 02 c0       	mov    eax,0xc0029e00
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 14 9e 02 c0       	mov    eax,0xc0029e14
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 9a e9 01 00       	call   c0028293 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 18 e3 01 00       	call   c0027c30 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 aa d5 01 00       	call   c0026f48 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 81 ec 01 00       	call   c0028627 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 6a e2 01 00       	call   c0027c30 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 4d ec 01 00       	call   c0028627 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 bf db 01 00       	call   c00275b3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 1f ec 01 00       	call   c0028627 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 0e e2 01 00       	call   c0027c30 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 77 db 01 00       	call   c00275b3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 98 d4 01 00       	call   c0026f48 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 6f eb 01 00       	call   c0028627 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 58 e1 01 00       	call   c0027c30 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 3b eb 01 00       	call   c0028627 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 ad da 01 00       	call   c00275b3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 0d eb 01 00       	call   c0028627 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 fc e0 01 00       	call   c0027c30 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 65 da 01 00       	call   c00275b3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 43 da 01 00       	call   c00275b3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 1f d3 01 00       	call   c0026f48 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 f6 e9 01 00       	call   c0028627 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 df df 01 00       	call   c0027c30 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 c2 e9 01 00       	call   c0028627 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 34 d9 01 00       	call   c00275b3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 94 e9 01 00       	call   c0028627 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 7d df 01 00       	call   c0027c30 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 e6 d8 01 00       	call   c00275b3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 46 e9 01 00       	call   c0028627 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 2f df 01 00       	call   c0027c30 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 98 d8 01 00       	call   c00275b3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 ad d1 01 00       	call   c0026f48 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 84 e8 01 00       	call   c0028627 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 6d de 01 00       	call   c0027c30 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 54 e8 01 00       	call   c0028627 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 c6 d7 01 00       	call   c00275b3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 26 e8 01 00       	call   c0028627 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 0f de 01 00       	call   c0027c30 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 78 d7 01 00       	call   c00275b3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 d8 e7 01 00       	call   c0028627 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 c1 dd 01 00       	call   c0027c30 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 2a d7 01 00       	call   c00275b3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 fe d6 01 00       	call   c00275b3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 5b dd 01 00       	call   c0027c30 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 17 e6 01 00       	call   c0028503 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 a6 d6 01 00       	call   c00275b3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 03 dd 01 00       	call   c0027c30 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 bf e5 01 00       	call   c0028503 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 39 cf 01 00       	call   c0026f48 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 10 e6 01 00       	call   c0028627 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 f9 db 01 00       	call   c0027c30 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 dc e5 01 00       	call   c0028627 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 4e d5 01 00       	call   c00275b3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 ae e5 01 00       	call   c0028627 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 97 db 01 00       	call   c0027c30 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 00 d5 01 00       	call   c00275b3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 60 e5 01 00       	call   c0028627 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 49 db 01 00       	call   c0027c30 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 b2 d4 01 00       	call   c00275b3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 12 e5 01 00       	call   c0028627 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 fb da 01 00       	call   c0027c30 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 64 d4 01 00       	call   c00275b3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 c4 e4 01 00       	call   c0028627 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 ad da 01 00       	call   c0027c30 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 16 d4 01 00       	call   c00275b3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 18 cd 01 00       	call   c0026f48 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 ef e3 01 00       	call   c0028627 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 d8 d9 01 00       	call   c0027c30 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 bf e3 01 00       	call   c0028627 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 31 d3 01 00       	call   c00275b3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 91 e3 01 00       	call   c0028627 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 7a d9 01 00       	call   c0027c30 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 e3 d2 01 00       	call   c00275b3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 43 e3 01 00       	call   c0028627 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 2c d9 01 00       	call   c0027c30 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 95 d2 01 00       	call   c00275b3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 f5 e2 01 00       	call   c0028627 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 de d8 01 00       	call   c0027c30 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 47 d2 01 00       	call   c00275b3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 a7 e2 01 00       	call   c0028627 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 90 d8 01 00       	call   c0027c30 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 f9 d1 01 00       	call   c00275b3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 cd d1 01 00       	call   c00275b3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 2a d8 01 00       	call   c0027c30 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 e6 e0 01 00       	call   c0028503 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 75 d1 01 00       	call   c00275b3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 d2 d7 01 00       	call   c0027c30 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 8e e0 01 00       	call   c0028503 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 1c d1 01 00       	call   c00275b3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 79 d7 01 00       	call   c0027c30 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 35 e0 01 00       	call   c0028503 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 c3 d0 01 00       	call   c00275b3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 20 d7 01 00       	call   c0027c30 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 dc df 01 00       	call   c0028503 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 3a c9 01 00       	call   c0026f48 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 11 e0 01 00       	call   c0028627 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 fa d5 01 00       	call   c0027c30 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 dd df 01 00       	call   c0028627 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 4f cf 01 00       	call   c00275b3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 af df 01 00       	call   c0028627 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 98 d5 01 00       	call   c0027c30 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 01 cf 01 00       	call   c00275b3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 61 df 01 00       	call   c0028627 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 4a d5 01 00       	call   c0027c30 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 b3 ce 01 00       	call   c00275b3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 13 df 01 00       	call   c0028627 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 fc d4 01 00       	call   c0027c30 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 65 ce 01 00       	call   c00275b3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 c5 de 01 00       	call   c0028627 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 ae d4 01 00       	call   c0027c30 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 17 ce 01 00       	call   c00275b3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 77 de 01 00       	call   c0028627 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 60 d4 01 00       	call   c0027c30 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 c6 cd 01 00       	call   c00275b3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 26 de 01 00       	call   c0028627 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 0f d4 01 00       	call   c0027c30 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 78 cd 01 00       	call   c00275b3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 72 c6 01 00       	call   c0026f48 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 49 dd 01 00       	call   c0028627 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 32 d3 01 00       	call   c0027c30 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 12 dd 01 00       	call   c0028627 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 84 cc 01 00       	call   c00275b3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 e4 dc 01 00       	call   c0028627 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 cd d2 01 00       	call   c0027c30 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 36 cc 01 00       	call   c00275b3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 96 dc 01 00       	call   c0028627 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 7f d2 01 00       	call   c0027c30 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 e8 cb 01 00       	call   c00275b3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 48 dc 01 00       	call   c0028627 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 31 d2 01 00       	call   c0027c30 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 9a cb 01 00       	call   c00275b3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 fa db 01 00       	call   c0028627 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 e3 d1 01 00       	call   c0027c30 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 4c cb 01 00       	call   c00275b3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 ac db 01 00       	call   c0028627 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 95 d1 01 00       	call   c0027c30 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 fb ca 01 00       	call   c00275b3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 5b db 01 00       	call   c0028627 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 44 d1 01 00       	call   c0027c30 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 b3 ca 01 00       	call   c00275b3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 8c ca 01 00       	call   c00275b3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 ea d0 01 00       	call   c0027c30 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 a6 d9 01 00       	call   c0028503 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 35 ca 01 00       	call   c00275b3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 93 d0 01 00       	call   c0027c30 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 4f d9 01 00       	call   c0028503 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 dd c9 01 00       	call   c00275b3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 3b d0 01 00       	call   c0027c30 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 f7 d8 01 00       	call   c0028503 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 85 c9 01 00       	call   c00275b3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 e3 cf 01 00       	call   c0027c30 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 9f d8 01 00       	call   c0028503 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 2d c9 01 00       	call   c00275b3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 8b cf 01 00       	call   c0027c30 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 47 d8 01 00       	call   c0028503 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 db c8 01 00       	call   c00275b3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 39 cf 01 00       	call   c0027c30 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 f5 d7 01 00       	call   c0028503 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 09 c1 01 00       	call   c0026f48 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 e0 d7 01 00       	call   c0028627 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 c9 cd 01 00       	call   c0027c30 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 b0 d7 01 00       	call   c0028627 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 22 c7 01 00       	call   c00275b3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 44 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61bc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 56 d7 01 00       	call   c0028627 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 3f cd 01 00       	call   c0027c30 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 aa c6 01 00       	call   c00275b3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 f7 d6 01 00       	call   c0028627 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 e0 cc 01 00       	call   c0027c30 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 4b c6 01 00       	call   c00275b3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 98 d6 01 00       	call   c0028627 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 81 cc 01 00       	call   c0027c30 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 ec c5 01 00       	call   c00275b3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 39 d6 01 00       	call   c0028627 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 22 cc 01 00       	call   c0027c30 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 8d c5 01 00       	call   c00275b3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 da d5 01 00       	call   c0028627 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 c3 cb 01 00       	call   c0027c30 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 2e c5 01 00       	call   c00275b3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 7b d5 01 00       	call   c0028627 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 64 cb 01 00       	call   c0027c30 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 cf c4 01 00       	call   c00275b3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 1c d5 01 00       	call   c0028627 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 05 cb 01 00       	call   c0027c30 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 70 c4 01 00       	call   c00275b3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 bd d4 01 00       	call   c0028627 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 a6 ca 01 00       	call   c0027c30 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 11 c4 01 00       	call   c00275b3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 1b bd 01 00       	call   c0026f48 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 f2 d3 01 00       	call   c0028627 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 db c9 01 00       	call   c0027c30 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 c2 d3 01 00       	call   c0028627 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 34 c3 01 00       	call   c00275b3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 60 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61a0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 67 d3 01 00       	call   c0028627 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 50 c9 01 00       	call   c0027c30 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 bb c2 01 00       	call   c00275b3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 07 d3 01 00       	call   c0028627 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 f0 c8 01 00       	call   c0027c30 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 5b c2 01 00       	call   c00275b3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 a7 d2 01 00       	call   c0028627 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 90 c8 01 00       	call   c0027c30 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 fb c1 01 00       	call   c00275b3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 47 d2 01 00       	call   c0028627 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 30 c8 01 00       	call   c0027c30 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 9b c1 01 00       	call   c00275b3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 e7 d1 01 00       	call   c0028627 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 d0 c7 01 00       	call   c0027c30 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 3b c1 01 00       	call   c00275b3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 87 d1 01 00       	call   c0028627 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 70 c7 01 00       	call   c0027c30 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 db c0 01 00       	call   c00275b3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 27 d1 01 00       	call   c0028627 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 10 c7 01 00       	call   c0027c30 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 7b c0 01 00       	call   c00275b3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 c7 d0 01 00       	call   c0028627 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 b0 c6 01 00       	call   c0027c30 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 1b c0 01 00       	call   c00275b3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 7c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6184]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 c0 bf 01 00       	call   c00275b3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 1d c6 01 00       	call   c0027c30 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 d9 ce 01 00       	call   c0028503 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 63 bf 01 00       	call   c00275b3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 c0 c5 01 00       	call   c0027c30 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 7c ce 01 00       	call   c0028503 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 06 bf 01 00       	call   c00275b3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 63 c5 01 00       	call   c0027c30 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 1f ce 01 00       	call   c0028503 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 a9 be 01 00       	call   c00275b3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 06 c5 01 00       	call   c0027c30 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 c2 cd 01 00       	call   c0028503 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 4c be 01 00       	call   c00275b3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 a9 c4 01 00       	call   c0027c30 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 65 cd 01 00       	call   c0028503 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 ef bd 01 00       	call   c00275b3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 4c c4 01 00       	call   c0027c30 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 08 cd 01 00       	call   c0028503 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 92 bd 01 00       	call   c00275b3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 ef c3 01 00       	call   c0027c30 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 ab cc 01 00       	call   c0028503 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 35 bd 01 00       	call   c00275b3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 92 c3 01 00       	call   c0027c30 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 4e cc 01 00       	call   c0028503 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 4a c3 01 00       	call   c0027c30 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ba cd 01 00       	jmp    c00286b0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 2c ca 01 00       	call   c00284ff <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 ea c9 01 00       	call   c00284e1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 81 c7 01 00       	call   c0028293 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 82 ba 01 00       	call   c00275b3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 51 c7 01 00       	call   c0028293 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 b8 c3 01 00       	call   c0027f14 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 57 c9 01 00       	call   c00284e1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 5a c9 01 00       	call   c00284ff <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 2d c9 01 00       	call   c00284ff <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 26 c3 01 00       	call   c0027f14 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 a8 ca 01 00       	call   c00286b0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 83 ca 01 00       	call   c00286b0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 5d c6 01 00       	call   c0028293 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 b4 bf 01 00       	call   c0027c04 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 93 c8 01 00       	call   c00284ff <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 2c b9 01 00       	call   c00275b3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 50 bf 01 00       	call   c0027c04 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 ea c9 01 00       	call   c00286b0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 2a c2 01 00       	call   c0027f14 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 a7 b8 01 00       	call   c00275b3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 d3 c4 01 00       	call   c0028293 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 d3 b7 01 00       	call   c00275b3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 b3 b7 01 00       	call   c00275b3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 83 c4 01 00       	call   c0028293 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 d3 c6 01 00       	call   c00284fd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 b2 bd 01 00       	call   c0027c04 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 2c c8 01 00       	call   c0028690 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 5b c6 01 00       	call   c00284e1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 59 bd 01 00       	call   c0027c04 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 d7 c3 01 00       	call   c0028293 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 5a bd 01 00       	call   c0027c30 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 ac c3 01 00       	call   c0028293 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 13 c0 01 00       	call   c0027f14 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 92 b6 01 00       	call   c00275b3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 5c c3 01 00       	call   c0028293 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 a8 c5 01 00       	call   c00284ff <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 9d bc 01 00       	call   c0027c30 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 6f bc 01 00       	call   c0027c30 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 a8 c2 01 00       	call   c0028293 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 0c bf 01 00       	call   c0027f14 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 d4 be 01 00       	call   c0027f14 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 53 b5 01 00       	call   c00275b3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 38 c6 01 00       	call   c00286b0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 12 c2 01 00       	call   c0028293 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 69 bb 01 00       	call   c0027c04 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 48 c4 01 00       	call   c00284ff <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 e0 b4 01 00       	call   c00275b3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 04 bb 01 00       	call   c0027c04 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 9e c5 01 00       	call   c00286b0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 67 c3 01 00       	call   c00284ff <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 25 c3 01 00       	call   c00284e1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 bc c0 01 00       	call   c0028293 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 bd b3 01 00       	call   c00275b3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 8c c0 01 00       	call   c0028293 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 f3 bc 01 00       	call   c0027f14 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 92 c2 01 00       	call   c00284e1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 95 c2 01 00       	call   c00284ff <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 68 c2 01 00       	call   c00284ff <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 61 bc 01 00       	call   c0027f14 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 e3 c3 01 00       	call   c00286b0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 be c3 01 00       	call   c00286b0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 98 bf 01 00       	call   c0028293 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 ef b8 01 00       	call   c0027c04 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 ce c1 01 00       	call   c00284ff <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 67 b2 01 00       	call   c00275b3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 8b b8 01 00       	call   c0027c04 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 25 c3 01 00       	call   c00286b0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 65 bb 01 00       	call   c0027f14 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 e2 b1 01 00       	call   c00275b3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 0d be 01 00       	call   c0028293 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 0d b1 01 00       	call   c00275b3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 ed b0 01 00       	call   c00275b3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 bd bd 01 00       	call   c0028293 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 0d c0 01 00       	call   c00284fd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 eb b6 01 00       	call   c0027c04 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 65 c1 01 00       	call   c0028690 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 94 bf 01 00       	call   c00284e1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 91 b6 01 00       	call   c0027c04 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 0f bd 01 00       	call   c0028293 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 92 b6 01 00       	call   c0027c30 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 e4 bc 01 00       	call   c0028293 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 4b b9 01 00       	call   c0027f14 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 ca af 01 00       	call   c00275b3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 94 bc 01 00       	call   c0028293 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 e0 be 01 00       	call   c00284ff <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 d5 b5 01 00       	call   c0027c30 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 a7 b5 01 00       	call   c0027c30 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 de bb 01 00       	call   c0028293 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 42 b8 01 00       	call   c0027f14 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 0f b8 01 00       	call   c0027f14 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 8e ae 01 00       	call   c00275b3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 73 bf 01 00       	call   c00286b0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 4d bb 01 00       	call   c0028293 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 a4 b4 01 00       	call   c0027c04 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 83 bd 01 00       	call   c00284ff <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 1b ae 01 00       	call   c00275b3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 3f b4 01 00       	call   c0027c04 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 d9 be 01 00       	call   c00286b0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 a2 bc 01 00       	call   c00284ff <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 60 bc 01 00       	call   c00284e1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 f7 b9 01 00       	call   c0028293 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 f8 ac 01 00       	call   c00275b3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 c7 b9 01 00       	call   c0028293 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 2e b6 01 00       	call   c0027f14 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 cd bb 01 00       	call   c00284e1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 d0 bb 01 00       	call   c00284ff <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 a3 bb 01 00       	call   c00284ff <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 9c b5 01 00       	call   c0027f14 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 1e bd 01 00       	call   c00286b0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 f9 bc 01 00       	call   c00286b0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 d3 b8 01 00       	call   c0028293 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 2a b2 01 00       	call   c0027c04 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 09 bb 01 00       	call   c00284ff <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 a2 ab 01 00       	call   c00275b3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 c6 b1 01 00       	call   c0027c04 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 60 bc 01 00       	call   c00286b0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 a0 b4 01 00       	call   c0027f14 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 1d ab 01 00       	call   c00275b3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 48 b7 01 00       	call   c0028293 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 48 aa 01 00       	call   c00275b3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 28 aa 01 00       	call   c00275b3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 f8 b6 01 00       	call   c0028293 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 48 b9 01 00       	call   c00284fd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 26 b0 01 00       	call   c0027c04 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 a0 ba 01 00       	call   c0028690 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 cf b8 01 00       	call   c00284e1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 cc af 01 00       	call   c0027c04 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 4a b6 01 00       	call   c0028293 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 cd af 01 00       	call   c0027c30 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 1f b6 01 00       	call   c0028293 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 86 b2 01 00       	call   c0027f14 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 05 a9 01 00       	call   c00275b3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 cf b5 01 00       	call   c0028293 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 1b b8 01 00       	call   c00284ff <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 10 af 01 00       	call   c0027c30 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 e2 ae 01 00       	call   c0027c30 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 19 b5 01 00       	call   c0028293 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 7d b1 01 00       	call   c0027f14 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 4a b1 01 00       	call   c0027f14 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 c9 a7 01 00       	call   c00275b3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 ae b8 01 00       	call   c00286b0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 88 b4 01 00       	call   c0028293 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 df ad 01 00       	call   c0027c04 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 be b6 01 00       	call   c00284ff <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 56 a7 01 00       	call   c00275b3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 7a ad 01 00       	call   c0027c04 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 14 b8 01 00       	call   c00286b0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 dd b5 01 00       	call   c00284ff <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 9b b5 01 00       	call   c00284e1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 32 b3 01 00       	call   c0028293 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 33 a6 01 00       	call   c00275b3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 02 b3 01 00       	call   c0028293 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 69 af 01 00       	call   c0027f14 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 08 b5 01 00       	call   c00284e1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 0b b5 01 00       	call   c00284ff <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 de b4 01 00       	call   c00284ff <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 d7 ae 01 00       	call   c0027f14 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 59 b6 01 00       	call   c00286b0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 34 b6 01 00       	call   c00286b0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 0e b2 01 00       	call   c0028293 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 65 ab 01 00       	call   c0027c04 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 44 b4 01 00       	call   c00284ff <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 dd a4 01 00       	call   c00275b3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 01 ab 01 00       	call   c0027c04 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 9b b5 01 00       	call   c00286b0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 db ad 01 00       	call   c0027f14 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 58 a4 01 00       	call   c00275b3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 83 b0 01 00       	call   c0028293 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 83 a3 01 00       	call   c00275b3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 63 a3 01 00       	call   c00275b3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 33 b0 01 00       	call   c0028293 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 83 b2 01 00       	call   c00284fd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 61 a9 01 00       	call   c0027c04 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 db b3 01 00       	call   c0028690 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 0a b2 01 00       	call   c00284e1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 07 a9 01 00       	call   c0027c04 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 85 af 01 00       	call   c0028293 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 08 a9 01 00       	call   c0027c30 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 5a af 01 00       	call   c0028293 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 c1 ab 01 00       	call   c0027f14 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 40 a2 01 00       	call   c00275b3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 0a af 01 00       	call   c0028293 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 56 b1 01 00       	call   c00284ff <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 4b a8 01 00       	call   c0027c30 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 1d a8 01 00       	call   c0027c30 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 54 ae 01 00       	call   c0028293 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 b8 aa 01 00       	call   c0027f14 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 85 aa 01 00       	call   c0027f14 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 04 a1 01 00       	call   c00275b3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 e9 b1 01 00       	call   c00286b0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 c3 ad 01 00       	call   c0028293 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 1a a7 01 00       	call   c0027c04 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 f9 af 01 00       	call   c00284ff <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 91 a0 01 00       	call   c00275b3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 b5 a6 01 00       	call   c0027c04 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 4f b1 01 00       	call   c00286b0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 15 af 01 00       	call   c00284ff <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 d3 ae 01 00       	call   c00284e1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 6a ac 01 00       	call   c0028293 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 6b 9f 01 00       	call   c00275b3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 3a ac 01 00       	call   c0028293 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 a1 a8 01 00       	call   c0027f14 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 40 ae 01 00       	call   c00284e1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 43 ae 01 00       	call   c00284ff <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 16 ae 01 00       	call   c00284ff <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 0f a8 01 00       	call   c0027f14 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 91 af 01 00       	call   c00286b0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 68 af 01 00       	call   c00286b0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 42 ab 01 00       	call   c0028293 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 99 a4 01 00       	call   c0027c04 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 78 ad 01 00       	call   c00284ff <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 11 9e 01 00       	call   c00275b3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 39 a4 01 00       	call   c0027c04 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 d3 ae 01 00       	call   c00286b0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 14 a7 01 00       	call   c0027f14 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 91 9d 01 00       	call   c00275b3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 bd a9 01 00       	call   c0028293 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 bd 9c 01 00       	call   c00275b3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 9d 9c 01 00       	call   c00275b3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 6d a9 01 00       	call   c0028293 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 a1 ab 01 00       	call   c00284e1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 98 a2 01 00       	call   c0027c04 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 12 ad 01 00       	call   c0028690 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 41 ab 01 00       	call   c00284e1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 3b a2 01 00       	call   c0027c04 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 b9 a8 01 00       	call   c0028293 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 3c a2 01 00       	call   c0027c30 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 8e a8 01 00       	call   c0028293 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 f5 a4 01 00       	call   c0027f14 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 74 9b 01 00       	call   c00275b3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 3e a8 01 00       	call   c0028293 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 8a aa 01 00       	call   c00284ff <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 7f a1 01 00       	call   c0027c30 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 51 a1 01 00       	call   c0027c30 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 95 a7 01 00       	call   c0028293 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 fc a3 01 00       	call   c0027f14 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 e5 a0 01 00       	call   c0027c30 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 a1 a9 01 00       	call   c0028503 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 94 a3 01 00       	call   c0027f14 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 13 9a 01 00       	call   c00275b3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 f8 aa 01 00       	call   c00286b0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 d2 a6 01 00       	call   c0028293 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 29 a0 01 00       	call   c0027c04 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 08 a9 01 00       	call   c00284ff <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 a0 99 01 00       	call   c00275b3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 c8 9f 01 00       	call   c0027c04 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 62 aa 01 00       	call   c00286b0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 a4 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd615c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 98 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6168]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 1d a7 01 00       	call   c00284ff <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 db a6 01 00       	call   c00284e1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 c7 a6 01 00       	call   c00284ff <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 39 a4 01 00       	call   c0028293 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 b7 9d 01 00       	call   c0027c30 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 09 a4 01 00       	call   c0028293 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 0f 97 01 00       	call   c00275b3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 de a3 01 00       	call   c0028293 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 2e a6 01 00       	call   c00284fd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 0f 9d 01 00       	call   c0027c04 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 89 a7 01 00       	call   c0028690 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 b8 a5 01 00       	call   c00284e1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 b7 9c 01 00       	call   c0027c04 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 35 a3 01 00       	call   c0028293 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 b8 9c 01 00       	call   c0027c30 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 0a a3 01 00       	call   c0028293 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 71 9f 01 00       	call   c0027f14 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 f0 95 01 00       	call   c00275b3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 18 9f 01 00       	call   c0027f14 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 9e 95 01 00       	call   c00275b3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 84 a6 01 00       	call   c00286b0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 5e a2 01 00       	call   c0028293 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 b5 9b 01 00       	call   c0027c04 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 94 a4 01 00       	call   c00284ff <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 2d 95 01 00       	call   c00275b3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 59 9b 01 00       	call   c0027c04 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 f3 a5 01 00       	call   c00286b0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 a8 a1 01 00       	call   c0028293 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 25 9b 01 00       	call   c0027c30 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 76 a1 01 00       	call   c0028293 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 7c 94 01 00       	call   c00275b3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 4c a1 01 00       	call   c0028293 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 a0 a3 01 00       	call   c0028501 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 79 9a 01 00       	call   c0027c04 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 f3 a4 01 00       	call   c0028690 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 22 a3 01 00       	call   c00284e1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 20 9a 01 00       	call   c0027c04 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 9e a0 01 00       	call   c0028293 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 21 9a 01 00       	call   c0027c30 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 73 a0 01 00       	call   c0028293 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 da 9c 01 00       	call   c0027f14 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 59 93 01 00       	call   c00275b3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 75 9c 01 00       	call   c0027f14 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 f4 92 01 00       	call   c00275b3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 da a3 01 00       	call   c00286b0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 b4 9f 01 00       	call   c0028293 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 0b 99 01 00       	call   c0027c04 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 ea a1 01 00       	call   c00284ff <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 83 92 01 00       	call   c00275b3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 af 98 01 00       	call   c0027c04 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 20 9f 01 00       	call   c0028293 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 26 92 01 00       	call   c00275b3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 be 9f 02 c0       	mov    eax,0xc0029fbe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 cf 9f 02 c0       	mov    eax,0xc0029fcf
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 06 a0 02 c0       	push   0xc002a006
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 68 e6 02 c0       	mov    eax,0xc002e668
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 0f a0 02 c0       	push   0xc002a00f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 2c 6a 02 c0       	mov    eax,0xc0026a2c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 19 a0 02 c0       	push   0xc002a019
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 60 67 02 c0       	mov    eax,0xc0026760
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 22 a0 02 c0       	push   0xc002a022
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 2c 6b 02 c0       	mov    eax,0xc0026b2c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 2c a0 02 c0       	push   0xc002a02c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 ac 68 02 c0       	mov    eax,0xc00268ac
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 35 a0 02 c0       	push   0xc002a035
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 6c e6 02 c0       	mov    eax,0xc002e66c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 42 a0 02 c0       	push   0xc002a042
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 6d e6 02 c0       	mov    eax,0xc002e66d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 f7 5e 00 00       	call   c001451a <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c000e668:	68 4f a0 02 c0       	push   0xc002a04f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 13 f6 00 00       	call   c001dc88 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 fc f8 00 00       	call   c001df86 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 e4 e7 01 c0       	push   0xc001e7e4
c000e693:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c000e699:	e8 e8 f8 00 00       	call   c001df86 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 88 1b 03 c0       	mov    ds:0xc0031b88,eax
c000e6a6:	c6 05 6d e6 02 c0 01 	mov    BYTE PTR ds:0xc002e66d,0x1
c000e6ad:	e8 b3 04 01 00       	call   c001eb65 <Vm::initialise8086()>
c000e6b2:	e8 4b 4c 00 00       	call   c0013302 <Fs::initVFS()>
c000e6b7:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 45 df 00 00       	call   c001c618 <Sys::loadSyscalls()>
c000e6d3:	e8 1e be 00 00       	call   c001a4f6 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 5c a0 02 c0       	push   0xc002a05c
c000e6e2:	68 65 a0 02 c0       	push   0xc002a065
c000e6e7:	e8 30 cb 00 00       	call   c001b21c <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 f6 56 00 00       	call   c0013dea <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 e9 5d 00 00       	call   c00144ee <Device::loadDriversForAll()>
c000e705:	e8 32 b9 00 00       	call   c001a03c <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 6d a0 02 c0       	push   0xc002a06d
c000e719:	e8 8e f0 00 00       	call   c001d7ac <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 b9 f2 00 00       	call   c001d9e0 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 b6 fb 00 00       	call   c001e2ea <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 89 a0 02 c0       	push   0xc002a089
c000e749:	50                   	push   eax
c000e74a:	e8 45 5e 00 00       	call   c0014594 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 28 a2 02 c0       	mov    edx,0xc002a228
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 81 e6 02 c0 04 	test   BYTE PTR ds:0xc002e681,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 13 7e 01 00       	call   c00266f6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 30 a4 00 00       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 09 a4 00 00       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 e7 a3 00 00       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 c5 a3 00 00       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 80 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e680,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 d3 a2 00 00       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 ae a2 00 00       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 7d 7c 01 00       	call   c00266b0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 3a 7c 01 00       	call   c0026690 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 ca a2 00 00       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 99 a0 02 c0       	push   0xc002a099
c000eaaf:	e8 c9 44 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ac a0 02 c0       	push   0xc002a0ac
c000ead2:	e8 a6 44 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 bd a0 02 c0       	push   0xc002a0bd
c000eaf5:	e8 83 44 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ce a0 02 c0       	push   0xc002a0ce
c000eb18:	e8 60 44 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 df a0 02 c0       	push   0xc002a0df
c000eb3b:	e8 3d 44 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 f0 a0 02 c0       	push   0xc002a0f0
c000eb5e:	e8 1a 44 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 01 a1 02 c0       	push   0xc002a101
c000eb81:	e8 f7 43 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 12 a1 02 c0       	push   0xc002a112
c000eba4:	e8 d4 43 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 23 a1 02 c0       	push   0xc002a123
c000ebc7:	e8 b1 43 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 34 a1 02 c0       	push   0xc002a134
c000ebea:	e8 8e 43 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 45 a1 02 c0       	push   0xc002a145
c000ec0d:	e8 6b 43 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 56 a1 02 c0       	push   0xc002a156
c000ec30:	e8 48 43 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 67 a1 02 c0       	push   0xc002a167
c000ec53:	e8 25 43 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 78 a1 02 c0       	push   0xc002a178
c000ec76:	e8 02 43 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 89 a1 02 c0       	push   0xc002a189
c000ec99:	e8 df 42 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 9a a1 02 c0       	push   0xc002a19a
c000ecbc:	e8 bc 42 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 ab a1 02 c0       	push   0xc002a1ab
c000ecdf:	e8 99 42 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 bc a1 02 c0       	push   0xc002a1bc
c000ed02:	e8 76 42 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 cd a1 02 c0       	push   0xc002a1cd
c000ed21:	e8 57 42 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 dc bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bcdc
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 46 42 00 00       	jmp    c0012f7d <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 de a1 02 c0       	push   0xc002a1de
c000ee0a:	e8 20 b8 00 00       	call   c001a62f <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 e4 a1 02 c0       	push   0xc002a1e4
c000ee42:	e8 e8 b7 00 00       	call   c001a62f <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 80 e6 02 c0 04 	test   BYTE PTR ds:0xc002e680,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 a4 d5 02 c0 	sete   BYTE PTR ds:0xc002d5a4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 69 93 00 00       	call   c001821e <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 e0 54 00 00       	call   c00143a4 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 12 9f 00 00       	call   c0018e06 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 a1 54 00 00       	call   c00143a4 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 0b 5a 00 00       	call   c001492a <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 71 54 00 00       	call   c00143a4 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 31 f1 00 00       	call   c001e086 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 ea a1 02 c0       	push   0xc002a1ea
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 da 3f 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 fb a1 02 c0       	push   0xc002a1fb
c000efc0:	e8 6a b6 00 00       	call   c001a62f <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 08 a2 02 c0       	push   0xc002a208
c000efd5:	e8 55 b6 00 00       	call   c001a62f <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 12 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a212
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 3e b6 00 00       	jmp    c001a62f <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 4c a2 02 c0       	push   0xc002a24c
c000f086:	e8 f2 3e 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 72 e6 02 c0       	mov    ds:0xc002e672,eax
c000f0c7:	66 89 15 70 e6 02 c0 	mov    WORD PTR ds:0xc002e670,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 78 ec 00 00       	call   c001de56 <unlockScheduler()>
c000f1de:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 04 95 01 00       	call   c0028730 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 fb 94 01 00       	call   c0028730 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 78 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e678,0x7ff
c000f323:	a3 7a e6 02 c0       	mov    ds:0xc002e67a,eax
c000f328:	0f 01 1d 78 e6 02 c0 	lidtd  ds:0xc002e678
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 1d 28 00 00       	call   c0011e32 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 4e 2e 00 00       	call   c001246e <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 8a 1e 00 00       	call   c00114c8 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 bb 1e 00 00       	call   c0011508 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 8c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d58c
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 68 a2 02 c0       	push   0xc002a268
c000f6f4:	e8 84 38 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 8c d5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d58c,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 13 27 00 00       	call   c0011e32 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 8c d5 02 c0    	mov    ebp,DWORD PTR ds:0xc002d58c
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 35 2c 00 00       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 8c d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d58c
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 98 a2 02 c0       	push   0xc002a298
c000f7ad:	e8 7d ae 00 00       	call   c001a62f <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 9d a2 02 c0       	push   0xc002a29d
c000f7c3:	e8 67 ae 00 00       	call   c001a62f <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 7b e6 00 00       	call   c001de54 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 6c e6 00 00       	call   c001de56 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 37 26 00 00       	call   c0011e32 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 64 2c 00 00       	call   c001246e <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 1c 26 00 00       	call   c0011e32 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 07 29 00 00       	call   c001212a <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 00 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e700,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 a0 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 00 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e700,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 00 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e700,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 00 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e700,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 00 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e700,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 aa 0c 00 00       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 00 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e700,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 6c 0c 00 00       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 03 0d 00 00       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 a0 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5a0
c000fb46:	80 3d 00 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e700,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d a0 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d5a0,0x8000
c000fba0:	c6 05 00 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e700,0x1
c000fba7:	c7 05 38 e7 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e738,0xc000fa13
c000fbb1:	c7 05 24 e7 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e724,0xc000f89a
c000fbbb:	c7 05 20 e7 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e720,0xc000f8e5
c000fbc5:	c7 05 2c e7 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e72c,0xc000fa59
c000fbcf:	c7 05 34 e7 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e734,0xc000f963
c000fbd9:	c7 05 28 e7 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e728,0xc000f9c1
c000fbe3:	c7 05 30 e7 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e730,0xc000f9c2
c000fbed:	c7 05 3c e7 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e73c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 ea 09 00 00       	call   c00105f4 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 a4 a2 02 c0       	push   0xc002a2a4
c000fc4a:	e8 2e 33 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 4a 04 00 00       	call   c00100b0 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 eb 20 00 00       	call   c0011d56 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 dd bc 02 c0       	push   0xc002bcdd
c000fc92:	e8 98 a9 00 00       	call   c001a62f <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 80 e6 02 c0    	mov    DWORD PTR ds:0xc002e680,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 bb 22 00 00       	call   c0011f68 <VAS::VAS()>
c000fcad:	89 1d e8 e7 02 c0    	mov    DWORD PTR ds:0xc002e7e8,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 bb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2bb
c000fcbf:	e8 b9 32 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 0c 21 00 00       	call   c0011dd5 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 68 e6 02 c0    	mov    DWORD PTR ds:0xc002e668,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 d8 a2 02 c0       	push   0xc002a2d8
c000fced:	e8 8b 32 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 f6 24 00 00       	call   c0012202 <VAS::~VAS()>
c000fd0c:	c7 04 24 eb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2eb
c000fd13:	e8 17 a9 00 00       	call   c001a62f <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba c0 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1940],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be c0 e6 02 c0       	mov    esi,0xc002e6c0
c000fd89:	8d 90 c0 e6 02 c0    	lea    edx,[eax-0x3ffd1940]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 c0 e6 02 c0    	lea    eax,[edx-0x3ffd1940]
c000fdef:	8d 94 11 c0 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1940]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 90 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d590
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 90 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d590
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 90 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d590
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 ac e6 02 c0       	mov    eax,ds:0xc002e6ac
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 ac e6 02 c0       	mov    ds:0xc002e6ac,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d b0 e6 02 c0    	idiv   DWORD PTR ds:0xc002e6b0
c000fe91:	39 05 a8 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a8,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 a8 e6 02 c0       	mov    ds:0xc002e6a8,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 ce 0a 00 00       	call   c0010988 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 06 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a306
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 4d a7 00 00       	jmp    c001a62f <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	55                   	push   ebp
c000fee3:	89 e5                	mov    ebp,esp
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	83 ec 10             	sub    esp,0x10
c000feea:	8b 35 a0 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6a0
c000fef0:	89 f3                	mov    ebx,esi
c000fef2:	eb 0a                	jmp    c000fefe <Phys::allocatePage()+0x1c>
c000fef4:	89 1d a0 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a0,ebx
c000fefa:	39 de                	cmp    esi,ebx
c000fefc:	74 24                	je     c000ff22 <Phys::allocatePage()+0x40>
c000fefe:	53                   	push   ebx
c000feff:	e8 38 ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff04:	5a                   	pop    edx
c000ff05:	84 c0                	test   al,al
c000ff07:	74 5e                	je     c000ff67 <Phys::allocatePage()+0x85>
c000ff09:	43                   	inc    ebx
c000ff0a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff10:	75 e2                	jne    c000fef4 <Phys::allocatePage()+0x12>
c000ff12:	31 db                	xor    ebx,ebx
c000ff14:	c7 05 a0 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6a0,0x0
c000ff1e:	39 de                	cmp    esi,ebx
c000ff20:	75 dc                	jne    c000fefe <Phys::allocatePage()+0x1c>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	68 30 a3 02 c0       	push   0xc002a330
c000ff2a:	e8 4e 30 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ff2f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff36:	e8 e4 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	85 c0                	test   eax,eax
c000ff40:	0f 85 b0 00 00 00    	jne    c000fff6 <Phys::allocatePage()+0x114>
c000ff46:	83 ec 0c             	sub    esp,0xc
c000ff49:	68 41 a3 02 c0       	push   0xc002a341
c000ff4e:	e8 dc a6 00 00       	call   c001a62f <Krnl::panic(char const*)>
c000ff53:	83 c4 10             	add    esp,0x10
c000ff56:	8b 1d a0 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6a0
c000ff5c:	53                   	push   ebx
c000ff5d:	e8 da fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff62:	5a                   	pop    edx
c000ff63:	84 c0                	test   al,al
c000ff65:	75 a2                	jne    c000ff09 <Phys::allocatePage()+0x27>
c000ff67:	6a 01                	push   0x1
c000ff69:	53                   	push   ebx
c000ff6a:	e8 9b fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6f:	a1 ac e6 02 c0       	mov    eax,ds:0xc002e6ac
c000ff74:	40                   	inc    eax
c000ff75:	a3 ac e6 02 c0       	mov    ds:0xc002e6ac,eax
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff80:	c1 e0 02             	shl    eax,0x2
c000ff83:	99                   	cdq    
c000ff84:	f7 3d b0 e6 02 c0    	idiv   DWORD PTR ds:0xc002e6b0
c000ff8a:	5a                   	pop    edx
c000ff8b:	39 05 a8 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a8,eax
c000ff91:	59                   	pop    ecx
c000ff92:	75 69                	jne    c000fffd <Phys::allocatePage()+0x11b>
c000ff94:	83 f8 46             	cmp    eax,0x46
c000ff97:	7e 55                	jle    c000ffee <Phys::allocatePage()+0x10c>
c000ff99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff9e:	85 c0                	test   eax,eax
c000ffa0:	74 4c                	je     c000ffee <Phys::allocatePage()+0x10c>
c000ffa2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffa5:	85 c0                	test   eax,eax
c000ffa7:	74 45                	je     c000ffee <Phys::allocatePage()+0x10c>
c000ffa9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffaf:	85 c0                	test   eax,eax
c000ffb1:	74 3b                	je     c000ffee <Phys::allocatePage()+0x10c>
c000ffb3:	83 ec 0c             	sub    esp,0xc
c000ffb6:	68 1c a3 02 c0       	push   0xc002a31c
c000ffbb:	e8 bd 2f 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c000ffc0:	83 c4 0c             	add    esp,0xc
c000ffc3:	a1 ac e6 02 c0       	mov    eax,ds:0xc002e6ac
c000ffc8:	85 c0                	test   eax,eax
c000ffca:	79 03                	jns    c000ffcf <Phys::allocatePage()+0xed>
c000ffcc:	83 c0 1f             	add    eax,0x1f
c000ffcf:	c1 f8 05             	sar    eax,0x5
c000ffd2:	83 c0 02             	add    eax,0x2
c000ffd5:	50                   	push   eax
c000ffd6:	6a 04                	push   0x4
c000ffd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffdd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffe0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffe6:	e8 6f 2c 00 00       	call   c0012c5a <VAS::scanForEviction(int, int)>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	a1 a0 e6 02 c0       	mov    eax,ds:0xc002e6a0
c000fff3:	c1 e0 0c             	shl    eax,0xc
c000fff6:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fff9:	5b                   	pop    ebx
c000fffa:	5e                   	pop    esi
c000fffb:	5d                   	pop    ebp
c000fffc:	c3                   	ret    
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	a3 a8 e6 02 c0       	mov    ds:0xc002e6a8,eax
c0010005:	50                   	push   eax
c0010006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0010009:	e8 7a 09 00 00       	call   c0010988 <VgaText::updateRAMUsageDisplay(int)>
c001000e:	83 c4 10             	add    esp,0x10
c0010011:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010014:	83 f8 46             	cmp    eax,0x46
c0010017:	7e d5                	jle    c000ffee <Phys::allocatePage()+0x10c>
c0010019:	e9 7b ff ff ff       	jmp    c000ff99 <Phys::allocatePage()+0xb7>

c001001e <Phys::allocateContiguousPages(int)>:
c001001e:	57                   	push   edi
c001001f:	56                   	push   esi
c0010020:	53                   	push   ebx
c0010021:	31 db                	xor    ebx,ebx
c0010023:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010027:	e8 28 de 00 00       	call   c001de54 <lockScheduler()>
c001002c:	85 db                	test   ebx,ebx
c001002e:	75 11                	jne    c0010041 <Phys::allocateContiguousPages(int)+0x23>
c0010030:	e8 ad fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010035:	83 ff 01             	cmp    edi,0x1
c0010038:	89 c6                	mov    esi,eax
c001003a:	74 21                	je     c001005d <Phys::allocateContiguousPages(int)+0x3f>
c001003c:	bb 01 00 00 00       	mov    ebx,0x1
c0010041:	e8 9c fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010046:	89 da                	mov    edx,ebx
c0010048:	c1 e2 0c             	shl    edx,0xc
c001004b:	01 f2                	add    edx,esi
c001004d:	39 c2                	cmp    edx,eax
c001004f:	74 17                	je     c0010068 <Phys::allocateContiguousPages(int)+0x4a>
c0010051:	bb 01 00 00 00       	mov    ebx,0x1
c0010056:	89 c6                	mov    esi,eax
c0010058:	83 ff 01             	cmp    edi,0x1
c001005b:	75 e4                	jne    c0010041 <Phys::allocateContiguousPages(int)+0x23>
c001005d:	e8 f4 dd 00 00       	call   c001de56 <unlockScheduler()>
c0010062:	89 f0                	mov    eax,esi
c0010064:	5b                   	pop    ebx
c0010065:	5e                   	pop    esi
c0010066:	5f                   	pop    edi
c0010067:	c3                   	ret    
c0010068:	43                   	inc    ebx
c0010069:	39 fb                	cmp    ebx,edi
c001006b:	75 bf                	jne    c001002c <Phys::allocateContiguousPages(int)+0xe>
c001006d:	e8 e4 dd 00 00       	call   c001de56 <unlockScheduler()>
c0010072:	89 f0                	mov    eax,esi
c0010074:	5b                   	pop    ebx
c0010075:	5e                   	pop    esi
c0010076:	5f                   	pop    edi
c0010077:	c3                   	ret    

c0010078 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010078:	56                   	push   esi
c0010079:	53                   	push   ebx
c001007a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001007e:	39 1d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebx
c0010084:	73 06                	jae    c001008c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010086:	89 1d a4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a4,ebx
c001008c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010090:	c1 eb 0c             	shr    ebx,0xc
c0010093:	c1 e8 0c             	shr    eax,0xc
c0010096:	39 d8                	cmp    eax,ebx
c0010098:	73 13                	jae    c00100ad <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001009a:	6a 00                	push   0x0
c001009c:	8d 70 01             	lea    esi,[eax+0x1]
c001009f:	50                   	push   eax
c00100a0:	e8 65 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100a5:	5a                   	pop    edx
c00100a6:	89 f0                	mov    eax,esi
c00100a8:	59                   	pop    ecx
c00100a9:	39 f3                	cmp    ebx,esi
c00100ab:	75 ed                	jne    c001009a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100ad:	5b                   	pop    ebx
c00100ae:	5e                   	pop    esi
c00100af:	c3                   	ret    

c00100b0 <Phys::physicalMemorySetup(unsigned int)>:
c00100b0:	55                   	push   ebp
c00100b1:	57                   	push   edi
c00100b2:	56                   	push   esi
c00100b3:	53                   	push   ebx
c00100b4:	31 db                	xor    ebx,ebx
c00100b6:	83 ec 40             	sub    esp,0x40
c00100b9:	6a 30                	push   0x30
c00100bb:	6a 00                	push   0x0
c00100bd:	68 c0 e6 02 c0       	push   0xc002e6c0
c00100c2:	e8 b1 06 ff ff       	call   c0000778 <memset>
c00100c7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100d0:	05 00 10 00 00       	add    eax,0x1000
c00100d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100d9:	83 c4 10             	add    esp,0x10
c00100dc:	83 ec 08             	sub    esp,0x8
c00100df:	6a 01                	push   0x1
c00100e1:	53                   	push   ebx
c00100e2:	43                   	inc    ebx
c00100e3:	e8 22 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100e8:	83 c4 10             	add    esp,0x10
c00100eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100f1:	75 e9                	jne    c00100dc <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100f3:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100fa:	66 85 c0             	test   ax,ax
c00100fd:	0f 84 8e 01 00 00    	je     c0010291 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010103:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010107:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001010f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010113:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010118:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001011c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010124:	eb 15                	jmp    c001013b <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010126:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001012a:	83 c3 18             	add    ebx,0x18
c001012d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010131:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010135:	0f 84 66 01 00 00    	je     c00102a1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001013b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001013e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010141:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001014c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001014e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010151:	01 f0                	add    eax,esi
c0010153:	55                   	push   ebp
c0010154:	11 fa                	adc    edx,edi
c0010156:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001015a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001015e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010162:	56                   	push   esi
c0010163:	68 7c a3 02 c0       	push   0xc002a37c
c0010168:	e8 10 2e 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001016d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010171:	83 c4 10             	add    esp,0x10
c0010174:	09 f8                	or     eax,edi
c0010176:	0f 85 25 01 00 00    	jne    c00102a1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001017c:	4d                   	dec    ebp
c001017d:	75 a7                	jne    c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001017f:	ba 00 00 08 00       	mov    edx,0x80000
c0010184:	89 c1                	mov    ecx,eax
c0010186:	39 f2                	cmp    edx,esi
c0010188:	19 f9                	sbb    ecx,edi
c001018a:	0f 82 a7 00 00 00    	jb     c0010237 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010190:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010194:	89 c1                	mov    ecx,eax
c0010196:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001019a:	0f 83 97 00 00 00    	jae    c0010237 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101a0:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101a5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101a9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101ad:	39 fa                	cmp    edx,edi
c00101af:	19 e8                	sbb    eax,ebp
c00101b1:	0f 82 14 01 00 00    	jb     c00102cb <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101bb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101bf:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101c5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101ca:	83 d5 ff             	adc    ebp,0xffffffff
c00101cd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101d1:	31 c0                	xor    eax,eax
c00101d3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101d7:	39 fa                	cmp    edx,edi
c00101d9:	89 c1                	mov    ecx,eax
c00101db:	19 e9                	sbb    ecx,ebp
c00101dd:	0f 83 43 ff ff ff    	jae    c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e3:	be 00 00 08 00       	mov    esi,0x80000
c00101e8:	50                   	push   eax
c00101e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101ed:	57                   	push   edi
c00101ee:	56                   	push   esi
c00101ef:	68 a0 a3 02 c0       	push   0xc002a3a0
c00101f4:	e8 84 2d 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00101f9:	5a                   	pop    edx
c00101fa:	59                   	pop    ecx
c00101fb:	57                   	push   edi
c00101fc:	56                   	push   esi
c00101fd:	e8 76 fe ff ff       	call   c0010078 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010202:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010206:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001020a:	83 c4 0c             	add    esp,0xc
c001020d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010211:	03 05 b0 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e6b0
c0010217:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001021e:	a3 b0 e6 02 c0       	mov    ds:0xc002e6b0,eax
c0010223:	52                   	push   edx
c0010224:	50                   	push   eax
c0010225:	68 5d a3 02 c0       	push   0xc002a35d
c001022a:	e8 4e 2d 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001022f:	83 c4 10             	add    esp,0x10
c0010232:	e9 ef fe ff ff       	jmp    c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010237:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001023b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001023f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010243:	39 ea                	cmp    edx,ebp
c0010245:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010249:	0f 82 d7 fe ff ff    	jb     c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001024f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010254:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010258:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001025c:	0f 83 c4 fe ff ff    	jae    c0010126 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010262:	39 ee                	cmp    esi,ebp
c0010264:	89 f8                	mov    eax,edi
c0010266:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001026a:	0f 83 78 ff ff ff    	jae    c00101e8 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010274:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010278:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001027c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010280:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001028c:	e9 57 ff ff ff       	jmp    c00101e8 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010291:	83 ec 0c             	sub    esp,0xc
c0010294:	68 4f a3 02 c0       	push   0xc002a34f
c0010299:	e8 91 a3 00 00       	call   c001a62f <Krnl::panic(char const*)>
c001029e:	83 c4 10             	add    esp,0x10
c00102a1:	bb 40 01 00 00       	mov    ebx,0x140
c00102a6:	83 ec 08             	sub    esp,0x8
c00102a9:	6a 00                	push   0x0
c00102ab:	53                   	push   ebx
c00102ac:	43                   	inc    ebx
c00102ad:	e8 58 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102b2:	ff 05 b0 e6 02 c0    	inc    DWORD PTR ds:0xc002e6b0
c00102b8:	83 c4 10             	add    esp,0x10
c00102bb:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102c1:	75 e3                	jne    c00102a6 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102c3:	83 c4 3c             	add    esp,0x3c
c00102c6:	5b                   	pop    ebx
c00102c7:	5e                   	pop    esi
c00102c8:	5f                   	pop    edi
c00102c9:	5d                   	pop    ebp
c00102ca:	c3                   	ret    
c00102cb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102db:	e9 d7 fe ff ff       	jmp    c00101b7 <Phys::physicalMemorySetup(unsigned int)+0x107>

c00102e0 <Pipe::isAtty()>:
c00102e0:	31 c0                	xor    eax,eax
c00102e2:	c3                   	ret    
c00102e3:	90                   	nop

c00102e4 <Pipe::~Pipe()>:
c00102e4:	83 ec 0c             	sub    esp,0xc
c00102e7:	ba 0c a4 02 c0       	mov    edx,0xc002a40c
c00102ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f0:	89 10                	mov    DWORD PTR [eax],edx
c00102f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	50                   	push   eax
c00102fa:	e8 37 16 00 00       	call   c0011936 <UnixFile::~UnixFile()>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	90                   	nop
c0010303:	83 c4 0c             	add    esp,0xc
c0010306:	c3                   	ret    
c0010307:	90                   	nop

c0010308 <Pipe::~Pipe()>:
c0010308:	83 ec 0c             	sub    esp,0xc
c001030b:	83 ec 0c             	sub    esp,0xc
c001030e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010312:	e8 cd ff ff ff       	call   c00102e4 <Pipe::~Pipe()>
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	83 ec 08             	sub    esp,0x8
c001031d:	6a 20                	push   0x20
c001031f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010323:	e8 75 2b 00 00       	call   c0012e9d <operator delete(void*, unsigned long)>
c0010328:	83 c4 10             	add    esp,0x10
c001032b:	83 c4 0c             	add    esp,0xc
c001032e:	c3                   	ret    
c001032f:	90                   	nop

c0010330 <Pipe::read(unsigned long long, void*, int*)>:
c0010330:	55                   	push   ebp
c0010331:	57                   	push   edi
c0010332:	56                   	push   esi
c0010333:	53                   	push   ebx
c0010334:	83 ec 1c             	sub    esp,0x1c
c0010337:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001033b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001033f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010343:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010346:	89 c8                	mov    eax,ecx
c0010348:	99                   	cdq    
c0010349:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001034d:	74 19                	je     c0010368 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001034f:	39 f9                	cmp    ecx,edi
c0010351:	89 d1                	mov    ecx,edx
c0010353:	19 f1                	sbb    ecx,esi
c0010355:	73 11                	jae    c0010368 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010357:	e8 f8 da 00 00       	call   c001de54 <lockScheduler()>
c001035c:	e8 2f de 00 00       	call   c001e190 <schedule()>
c0010361:	e8 f0 da 00 00       	call   c001de56 <unlockScheduler()>
c0010366:	eb db                	jmp    c0010343 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010368:	39 f8                	cmp    eax,edi
c001036a:	89 d1                	mov    ecx,edx
c001036c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010370:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010374:	19 f1                	sbb    ecx,esi
c0010376:	73 08                	jae    c0010380 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001037c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010380:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010383:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010386:	29 c6                	sub    esi,eax
c0010388:	89 f1                	mov    ecx,esi
c001038a:	c1 f9 1f             	sar    ecx,0x1f
c001038d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010391:	89 ca                	mov    edx,ecx
c0010393:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010397:	19 d1                	sbb    ecx,edx
c0010399:	73 04                	jae    c001039f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001039b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001039f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103a3:	89 fd                	mov    ebp,edi
c00103a5:	29 f5                	sub    ebp,esi
c00103a7:	85 f6                	test   esi,esi
c00103a9:	74 12                	je     c00103bd <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103ab:	52                   	push   edx
c00103ac:	56                   	push   esi
c00103ad:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103b0:	50                   	push   eax
c00103b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103b5:	e8 8a 03 ff ff       	call   c0000744 <memcpy>
c00103ba:	83 c4 10             	add    esp,0x10
c00103bd:	85 ed                	test   ebp,ebp
c00103bf:	74 12                	je     c00103d3 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103c1:	50                   	push   eax
c00103c2:	55                   	push   ebp
c00103c3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103c6:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103ca:	56                   	push   esi
c00103cb:	e8 74 03 ff ff       	call   c0000744 <memcpy>
c00103d0:	83 c4 10             	add    esp,0x10
c00103d3:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103d9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103dc:	99                   	cdq    
c00103dd:	89 f7                	mov    edi,esi
c00103df:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103e3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103e7:	c1 ff 1f             	sar    edi,0x1f
c00103ea:	57                   	push   edi
c00103eb:	56                   	push   esi
c00103ec:	52                   	push   edx
c00103ed:	50                   	push   eax
c00103ee:	e8 39 67 01 00       	call   c0026b2c <__umoddi3>
c00103f3:	83 c4 10             	add    esp,0x10
c00103f6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103f9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103fe:	75 10                	jne    c0010410 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010400:	83 ec 0c             	sub    esp,0xc
c0010403:	68 c9 a3 02 c0       	push   0xc002a3c9
c0010408:	e8 22 a2 00 00       	call   c001a62f <Krnl::panic(char const*)>
c001040d:	83 c4 10             	add    esp,0x10
c0010410:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010414:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010418:	89 10                	mov    DWORD PTR [eax],edx
c001041a:	83 c4 1c             	add    esp,0x1c
c001041d:	31 c0                	xor    eax,eax
c001041f:	5b                   	pop    ebx
c0010420:	5e                   	pop    esi
c0010421:	5f                   	pop    edi
c0010422:	5d                   	pop    ebp
c0010423:	c3                   	ret    

c0010424 <Pipe::write(unsigned long long, void*, int*)>:
c0010424:	55                   	push   ebp
c0010425:	57                   	push   edi
c0010426:	56                   	push   esi
c0010427:	53                   	push   ebx
c0010428:	83 ec 1c             	sub    esp,0x1c
c001042b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001042f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010433:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010437:	89 04 24             	mov    DWORD PTR [esp],eax
c001043a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001043d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010440:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010444:	89 de                	mov    esi,ebx
c0010446:	89 df                	mov    edi,ebx
c0010448:	c1 ff 1f             	sar    edi,0x1f
c001044b:	01 c6                	add    esi,eax
c001044d:	89 c8                	mov    eax,ecx
c001044f:	11 d7                	adc    edi,edx
c0010451:	99                   	cdq    
c0010452:	39 f1                	cmp    ecx,esi
c0010454:	89 d0                	mov    eax,edx
c0010456:	19 f8                	sbb    eax,edi
c0010458:	b8 01 00 00 00       	mov    eax,0x1
c001045d:	0f 82 80 00 00 00    	jb     c00104e3 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010463:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010466:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010469:	01 d8                	add    eax,ebx
c001046b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001046f:	99                   	cdq    
c0010470:	f7 f9                	idiv   ecx
c0010472:	29 d1                	sub    ecx,edx
c0010474:	89 d7                	mov    edi,edx
c0010476:	89 c8                	mov    eax,ecx
c0010478:	99                   	cdq    
c0010479:	39 ce                	cmp    esi,ecx
c001047b:	19 d3                	sbb    ebx,edx
c001047d:	bb 00 00 00 00       	mov    ebx,0x0
c0010482:	72 04                	jb     c0010488 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010484:	89 f3                	mov    ebx,esi
c0010486:	29 cb                	sub    ebx,ecx
c0010488:	89 f1                	mov    ecx,esi
c001048a:	29 d9                	sub    ecx,ebx
c001048c:	74 1a                	je     c00104a8 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001048e:	52                   	push   edx
c001048f:	51                   	push   ecx
c0010490:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010494:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010498:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001049b:	57                   	push   edi
c001049c:	e8 a3 02 ff ff       	call   c0000744 <memcpy>
c00104a1:	83 c4 10             	add    esp,0x10
c00104a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104a8:	85 db                	test   ebx,ebx
c00104aa:	74 12                	je     c00104be <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104ac:	50                   	push   eax
c00104ad:	53                   	push   ebx
c00104ae:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104b2:	51                   	push   ecx
c00104b3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104b6:	e8 89 02 ff ff       	call   c0000744 <memcpy>
c00104bb:	83 c4 10             	add    esp,0x10
c00104be:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104c1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104c6:	75 10                	jne    c00104d8 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104c8:	83 ec 0c             	sub    esp,0xc
c00104cb:	68 e5 a3 02 c0       	push   0xc002a3e5
c00104d0:	e8 5a a1 00 00       	call   c001a62f <Krnl::panic(char const*)>
c00104d5:	83 c4 10             	add    esp,0x10
c00104d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104df:	89 38                	mov    DWORD PTR [eax],edi
c00104e1:	31 c0                	xor    eax,eax
c00104e3:	83 c4 1c             	add    esp,0x1c
c00104e6:	5b                   	pop    ebx
c00104e7:	5e                   	pop    esi
c00104e8:	5f                   	pop    edi
c00104e9:	5d                   	pop    ebp
c00104ea:	c3                   	ret    
c00104eb:	90                   	nop

c00104ec <Pipe::Pipe(int)>:
c00104ec:	83 ec 0c             	sub    esp,0xc
c00104ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f3:	83 ec 08             	sub    esp,0x8
c00104f6:	6a 00                	push   0x0
c00104f8:	50                   	push   eax
c00104f9:	e8 56 12 00 00       	call   c0011754 <UnixFile::UnixFile(int)>
c00104fe:	83 c4 10             	add    esp,0x10
c0010501:	ba 0c a4 02 c0       	mov    edx,0xc002a40c
c0010506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050a:	89 10                	mov    DWORD PTR [eax],edx
c001050c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010510:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010514:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010526:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001052d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010531:	83 ec 0c             	sub    esp,0xc
c0010534:	50                   	push   eax
c0010535:	e8 06 f3 ff ff       	call   c000f840 <malloc>
c001053a:	83 c4 10             	add    esp,0x10
c001053d:	89 c2                	mov    edx,eax
c001053f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010543:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001054e:	90                   	nop
c001054f:	83 c4 0c             	add    esp,0xc
c0010552:	c3                   	ret    
c0010553:	90                   	nop

c0010554 <VgaText::isAtty()>:
c0010554:	b0 01                	mov    al,0x1
c0010556:	c3                   	ret    
c0010557:	90                   	nop

c0010558 <VgaText::~VgaText()>:
c0010558:	83 ec 0c             	sub    esp,0xc
c001055b:	ba c8 a4 02 c0       	mov    edx,0xc002a4c8
c0010560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010564:	89 10                	mov    DWORD PTR [eax],edx
c0010566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056a:	83 ec 0c             	sub    esp,0xc
c001056d:	50                   	push   eax
c001056e:	e8 c3 13 00 00       	call   c0011936 <UnixFile::~UnixFile()>
c0010573:	83 c4 10             	add    esp,0x10
c0010576:	90                   	nop
c0010577:	83 c4 0c             	add    esp,0xc
c001057a:	c3                   	ret    
c001057b:	90                   	nop

c001057c <VgaText::~VgaText()>:
c001057c:	83 ec 0c             	sub    esp,0xc
c001057f:	83 ec 0c             	sub    esp,0xc
c0010582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010586:	e8 cd ff ff ff       	call   c0010558 <VgaText::~VgaText()>
c001058b:	83 c4 10             	add    esp,0x10
c001058e:	83 ec 08             	sub    esp,0x8
c0010591:	68 60 12 00 00       	push   0x1260
c0010596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059a:	e8 fe 28 00 00       	call   c0012e9d <operator delete(void*, unsigned long)>
c001059f:	83 c4 10             	add    esp,0x10
c00105a2:	83 c4 0c             	add    esp,0xc
c00105a5:	c3                   	ret    

c00105a6 <VgaText::read(unsigned long long, void*, int*)>:
c00105a6:	83 ec 10             	sub    esp,0x10
c00105a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b5:	e8 76 5d 00 00       	call   c0016330 <readKeyboard(VgaText*, char*, unsigned long)>
c00105ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105be:	89 02                	mov    DWORD PTR [edx],eax
c00105c0:	31 c0                	xor    eax,eax
c00105c2:	83 c4 1c             	add    esp,0x1c
c00105c5:	c3                   	ret    

c00105c6 <setTerminalScrollLock(bool)>:
c00105c6:	c3                   	ret    

c00105c7 <addToTerminalCycle(VgaText*)>:
c00105c7:	8b 15 40 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e740
c00105cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d1:	85 d2                	test   edx,edx
c00105d3:	75 0c                	jne    c00105e1 <addToTerminalCycle(VgaText*)+0x1a>
c00105d5:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105db:	a3 40 e7 02 c0       	mov    ds:0xc002e740,eax
c00105e0:	c3                   	ret    
c00105e1:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105e7:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105ed:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105f3:	c3                   	ret    

c00105f4 <installVgaTextImplementation()>:
c00105f4:	83 ec 10             	sub    esp,0x10
c00105f7:	6a 20                	push   0x20
c00105f9:	6a 00                	push   0x0
c00105fb:	68 20 e7 02 c0       	push   0xc002e720
c0010600:	e8 73 01 ff ff       	call   c0000778 <memset>
c0010605:	83 c4 1c             	add    esp,0x1c
c0010608:	c3                   	ret    

c0010609 <scrollTerminalScrollLock(int)>:
c0010609:	c3                   	ret    

c001060a <VgaText::load()>:
c001060a:	53                   	push   ebx
c001060b:	31 c0                	xor    eax,eax
c001060d:	83 ec 58             	sub    esp,0x58
c0010610:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010614:	89 e2                	mov    edx,esp
c0010616:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001061a:	40                   	inc    eax
c001061b:	83 f8 50             	cmp    eax,0x50
c001061e:	75 f6                	jne    c0010616 <VgaText::load()+0xc>
c0010620:	31 c0                	xor    eax,eax
c0010622:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010629:	84 c9                	test   cl,cl
c001062b:	74 06                	je     c0010633 <VgaText::load()+0x29>
c001062d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010630:	40                   	inc    eax
c0010631:	eb ef                	jmp    c0010622 <VgaText::load()+0x18>
c0010633:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010639:	85 c0                	test   eax,eax
c001063b:	74 09                	je     c0010646 <VgaText::load()+0x3c>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	52                   	push   edx
c0010640:	53                   	push   ebx
c0010641:	ff d0                	call   eax
c0010643:	83 c4 10             	add    esp,0x10
c0010646:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001064c:	85 c0                	test   eax,eax
c001064e:	74 09                	je     c0010659 <VgaText::load()+0x4f>
c0010650:	83 ec 0c             	sub    esp,0xc
c0010653:	53                   	push   ebx
c0010654:	ff d0                	call   eax
c0010656:	83 c4 10             	add    esp,0x10
c0010659:	83 c4 58             	add    esp,0x58
c001065c:	5b                   	pop    ebx
c001065d:	c3                   	ret    

c001065e <VgaText::updateCursor()>:
c001065e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010662:	39 05 44 e7 02 c0    	cmp    DWORD PTR ds:0xc002e744,eax
c0010668:	75 0c                	jne    c0010676 <VgaText::updateCursor()+0x18>
c001066a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010670:	85 c0                	test   eax,eax
c0010672:	74 02                	je     c0010676 <VgaText::updateCursor()+0x18>
c0010674:	ff e0                	jmp    eax
c0010676:	c3                   	ret    
c0010677:	90                   	nop

c0010678 <VgaText::showCursor(bool)>:
c0010678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010680:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010686:	c3                   	ret    
c0010687:	90                   	nop

c0010688 <VgaText::disableBlink(bool)>:
c0010688:	56                   	push   esi
c0010689:	53                   	push   ebx
c001068a:	51                   	push   ecx
c001068b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001068f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010693:	39 1d 44 e7 02 c0    	cmp    DWORD PTR ds:0xc002e744,ebx
c0010699:	75 18                	jne    c00106b3 <VgaText::disableBlink(bool)+0x2b>
c001069b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106a1:	85 c0                	test   eax,eax
c00106a3:	74 0e                	je     c00106b3 <VgaText::disableBlink(bool)+0x2b>
c00106a5:	89 f1                	mov    ecx,esi
c00106a7:	52                   	push   edx
c00106a8:	52                   	push   edx
c00106a9:	0f b6 d1             	movzx  edx,cl
c00106ac:	52                   	push   edx
c00106ad:	53                   	push   ebx
c00106ae:	ff d0                	call   eax
c00106b0:	83 c4 10             	add    esp,0x10
c00106b3:	89 f0                	mov    eax,esi
c00106b5:	83 f0 01             	xor    eax,0x1
c00106b8:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106be:	58                   	pop    eax
c00106bf:	5b                   	pop    ebx
c00106c0:	5e                   	pop    esi
c00106c1:	c3                   	ret    

c00106c2 <VgaText::doANSI_SGR(int)>:
c00106c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ca:	85 d2                	test   edx,edx
c00106cc:	75 14                	jne    c00106e2 <VgaText::doANSI_SGR(int)+0x20>
c00106ce:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106d4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106da:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106e0:	eb 65                	jmp    c0010747 <VgaText::doANSI_SGR(int)+0x85>
c00106e2:	83 fa 07             	cmp    edx,0x7
c00106e5:	75 14                	jne    c00106fb <VgaText::doANSI_SGR(int)+0x39>
c00106e7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106ed:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106f3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106f9:	eb 4c                	jmp    c0010747 <VgaText::doANSI_SGR(int)+0x85>
c00106fb:	83 fa 1b             	cmp    edx,0x1b
c00106fe:	74 ce                	je     c00106ce <VgaText::doANSI_SGR(int)+0xc>
c0010700:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010703:	83 f9 07             	cmp    ecx,0x7
c0010706:	77 09                	ja     c0010711 <VgaText::doANSI_SGR(int)+0x4f>
c0010708:	8b 14 8d c0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a40]
c001070f:	eb 20                	jmp    c0010731 <VgaText::doANSI_SGR(int)+0x6f>
c0010711:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010714:	83 f9 07             	cmp    ecx,0x7
c0010717:	77 09                	ja     c0010722 <VgaText::doANSI_SGR(int)+0x60>
c0010719:	8b 14 8d c0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a40]
c0010720:	eb 25                	jmp    c0010747 <VgaText::doANSI_SGR(int)+0x85>
c0010722:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010725:	83 f9 07             	cmp    ecx,0x7
c0010728:	77 0e                	ja     c0010738 <VgaText::doANSI_SGR(int)+0x76>
c001072a:	8b 14 95 78 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2b88]
c0010731:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010737:	c3                   	ret    
c0010738:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001073b:	83 f9 07             	cmp    ecx,0x7
c001073e:	77 0d                	ja     c001074d <VgaText::doANSI_SGR(int)+0x8b>
c0010740:	8b 14 95 50 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2bb0]
c0010747:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001074d:	c3                   	ret    

c001074e <VgaText::setDefaultBgColour(VgaColour)>:
c001074e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010752:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010756:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001075c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010762:	c3                   	ret    
c0010763:	90                   	nop

c0010764 <VgaText::setDefaultFgColour(VgaColour)>:
c0010764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010768:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001076c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010772:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010778:	c3                   	ret    
c0010779:	90                   	nop

c001077a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001077a:	53                   	push   ebx
c001077b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001077f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010783:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010787:	51                   	push   ecx
c0010788:	e8 c1 ff ff ff       	call   c001074e <VgaText::setDefaultBgColour(VgaColour)>
c001078d:	58                   	pop    eax
c001078e:	5a                   	pop    edx
c001078f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010793:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010797:	5b                   	pop    ebx
c0010798:	eb ca                	jmp    c0010764 <VgaText::setDefaultFgColour(VgaColour)>

c001079a <VgaText::combineColours(unsigned char, unsigned char)>:
c001079a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001079e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107a3:	83 e0 0f             	and    eax,0xf
c00107a6:	c1 e2 04             	shl    edx,0x4
c00107a9:	09 d0                	or     eax,edx
c00107ab:	c3                   	ret    

c00107ac <VgaText::scrollScreen()>:
c00107ac:	57                   	push   edi
c00107ad:	56                   	push   esi
c00107ae:	be 01 00 00 00       	mov    esi,0x1
c00107b3:	53                   	push   ebx
c00107b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107b8:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107be:	31 ff                	xor    edi,edi
c00107c0:	01 d9                	add    ecx,ebx
c00107c2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107c5:	83 fe 17             	cmp    esi,0x17
c00107c8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107ce:	75 28                	jne    c00107f8 <VgaText::scrollScreen()+0x4c>
c00107d0:	f7 c7 01 00 00 00    	test   edi,0x1
c00107d6:	74 1c                	je     c00107f4 <VgaText::scrollScreen()+0x48>
c00107d8:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107df:	50                   	push   eax
c00107e0:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107e7:	50                   	push   eax
c00107e8:	e8 ad ff ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c00107ed:	5a                   	pop    edx
c00107ee:	5a                   	pop    edx
c00107ef:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107f2:	eb 04                	jmp    c00107f8 <VgaText::scrollScreen()+0x4c>
c00107f4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107f8:	47                   	inc    edi
c00107f9:	41                   	inc    ecx
c00107fa:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010800:	75 c0                	jne    c00107c2 <VgaText::scrollScreen()+0x16>
c0010802:	46                   	inc    esi
c0010803:	83 fe 18             	cmp    esi,0x18
c0010806:	75 b0                	jne    c00107b8 <VgaText::scrollScreen()+0xc>
c0010808:	39 1d 44 e7 02 c0    	cmp    DWORD PTR ds:0xc002e744,ebx
c001080e:	75 24                	jne    c0010834 <VgaText::scrollScreen()+0x88>
c0010810:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010817:	74 08                	je     c0010821 <VgaText::scrollScreen()+0x75>
c0010819:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001081f:	eb 13                	jmp    c0010834 <VgaText::scrollScreen()+0x88>
c0010821:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010827:	85 c0                	test   eax,eax
c0010829:	74 09                	je     c0010834 <VgaText::scrollScreen()+0x88>
c001082b:	83 ec 0c             	sub    esp,0xc
c001082e:	53                   	push   ebx
c001082f:	ff d0                	call   eax
c0010831:	83 c4 10             	add    esp,0x10
c0010834:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010838:	5b                   	pop    ebx
c0010839:	5e                   	pop    esi
c001083a:	5f                   	pop    edi
c001083b:	e9 1e fe ff ff       	jmp    c001065e <VgaText::updateCursor()>

c0010840 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010840:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010845:	c1 e0 08             	shl    eax,0x8
c0010848:	89 c2                	mov    edx,eax
c001084a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001084f:	09 d0                	or     eax,edx
c0010851:	c3                   	ret    

c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010852:	53                   	push   ebx
c0010853:	83 ec 08             	sub    esp,0x8
c0010856:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001085a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001085f:	50                   	push   eax
c0010860:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010865:	50                   	push   eax
c0010866:	e8 2f ff ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c001086b:	5a                   	pop    edx
c001086c:	0f b6 c0             	movzx  eax,al
c001086f:	5b                   	pop    ebx
c0010870:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010875:	50                   	push   eax
c0010876:	53                   	push   ebx
c0010877:	e8 c4 ff ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c001087c:	5a                   	pop    edx
c001087d:	5a                   	pop    edx
c001087e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010884:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010888:	0f b7 d2             	movzx  edx,dx
c001088b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010890:	39 0d 44 e7 02 c0    	cmp    DWORD PTR ds:0xc002e744,ecx
c0010896:	75 14                	jne    c00108ac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010898:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001089e:	85 c0                	test   eax,eax
c00108a0:	74 0a                	je     c00108ac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108a6:	83 c4 08             	add    esp,0x8
c00108a9:	5b                   	pop    ebx
c00108aa:	ff e0                	jmp    eax
c00108ac:	83 c4 08             	add    esp,0x8
c00108af:	5b                   	pop    ebx
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <VgaText::getCursorX()>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108bc:	c3                   	ret    
c00108bd:	90                   	nop

c00108be <VgaText::getCursorY()>:
c00108be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108c8:	c3                   	ret    
c00108c9:	90                   	nop

c00108ca <VgaText::setCursor(int, int)>:
c00108ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108d2:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108dc:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108e2:	e9 77 fd ff ff       	jmp    c001065e <VgaText::updateCursor()>
c00108e7:	90                   	nop

c00108e8 <VgaText::setCursorX(int)>:
c00108e8:	83 ec 10             	sub    esp,0x10
c00108eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ef:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f9:	50                   	push   eax
c00108fa:	e8 cb ff ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c00108ff:	83 c4 1c             	add    esp,0x1c
c0010902:	c3                   	ret    
c0010903:	90                   	nop

c0010904 <VgaText::setCursorY(int)>:
c0010904:	83 ec 10             	sub    esp,0x10
c0010907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001090b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001090f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010915:	50                   	push   eax
c0010916:	e8 af ff ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c001091b:	83 c4 1c             	add    esp,0x1c
c001091e:	c3                   	ret    
c001091f:	90                   	nop

c0010920 <VgaText::incrementCursor(bool)>:
c0010920:	56                   	push   esi
c0010921:	53                   	push   ebx
c0010922:	51                   	push   ecx
c0010923:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010927:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001092b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010931:	40                   	inc    eax
c0010932:	83 f8 50             	cmp    eax,0x50
c0010935:	74 08                	je     c001093f <VgaText::incrementCursor(bool)+0x1f>
c0010937:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001093d:	eb 33                	jmp    c0010972 <VgaText::incrementCursor(bool)+0x52>
c001093f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010945:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001094f:	8d 50 01             	lea    edx,[eax+0x1]
c0010952:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010958:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001095e:	75 12                	jne    c0010972 <VgaText::incrementCursor(bool)+0x52>
c0010960:	83 ec 0c             	sub    esp,0xc
c0010963:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010969:	53                   	push   ebx
c001096a:	e8 3d fe ff ff       	call   c00107ac <VgaText::scrollScreen()>
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	89 f0                	mov    eax,esi
c0010974:	84 c0                	test   al,al
c0010976:	74 0c                	je     c0010984 <VgaText::incrementCursor(bool)+0x64>
c0010978:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001097c:	5a                   	pop    edx
c001097d:	5b                   	pop    ebx
c001097e:	5e                   	pop    esi
c001097f:	e9 da fc ff ff       	jmp    c001065e <VgaText::updateCursor()>
c0010984:	58                   	pop    eax
c0010985:	5b                   	pop    ebx
c0010986:	5e                   	pop    esi
c0010987:	c3                   	ret    

c0010988 <VgaText::updateRAMUsageDisplay(int)>:
c0010988:	56                   	push   esi
c0010989:	8b 35 a0 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5a0
c001098f:	53                   	push   ebx
c0010990:	bb 0a 00 00 00       	mov    ebx,0xa
c0010995:	6a 0f                	push   0xf
c0010997:	6a 00                	push   0x0
c0010999:	e8 fc fd ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c001099e:	5a                   	pop    edx
c001099f:	59                   	pop    ecx
c00109a0:	0f b6 c8             	movzx  ecx,al
c00109a3:	51                   	push   ecx
c00109a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a8:	99                   	cdq    
c00109a9:	f7 fb                	idiv   ebx
c00109ab:	89 d3                	mov    ebx,edx
c00109ad:	83 c0 30             	add    eax,0x30
c00109b0:	83 c3 30             	add    ebx,0x30
c00109b3:	0f be c0             	movsx  eax,al
c00109b6:	0f b6 db             	movzx  ebx,bl
c00109b9:	50                   	push   eax
c00109ba:	e8 81 fe ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c00109bf:	5a                   	pop    edx
c00109c0:	5a                   	pop    edx
c00109c1:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109c8:	51                   	push   ecx
c00109c9:	53                   	push   ebx
c00109ca:	e8 71 fe ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c00109cf:	5b                   	pop    ebx
c00109d0:	5a                   	pop    edx
c00109d1:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109d8:	51                   	push   ecx
c00109d9:	6a 25                	push   0x25
c00109db:	e8 60 fe ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e0:	59                   	pop    ecx
c00109e1:	5b                   	pop    ebx
c00109e2:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109e9:	5b                   	pop    ebx
c00109ea:	5e                   	pop    esi
c00109eb:	c3                   	ret    

c00109ec <VgaText::updateDiskUsage()>:
c00109ec:	55                   	push   ebp
c00109ed:	bd 10 27 00 00       	mov    ebp,0x2710
c00109f2:	57                   	push   edi
c00109f3:	8b 3d a0 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a0
c00109f9:	56                   	push   esi
c00109fa:	53                   	push   ebx
c00109fb:	6a 0f                	push   0xf
c00109fd:	6a 00                	push   0x0
c00109ff:	e8 96 fd ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c0010a04:	5a                   	pop    edx
c0010a05:	0f b6 d8             	movzx  ebx,al
c0010a08:	59                   	pop    ecx
c0010a09:	8b 35 c8 29 03 c0    	mov    esi,DWORD PTR ds:0xc00329c8
c0010a0f:	53                   	push   ebx
c0010a10:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a15:	89 f0                	mov    eax,esi
c0010a17:	99                   	cdq    
c0010a18:	f7 fd                	idiv   ebp
c0010a1a:	99                   	cdq    
c0010a1b:	f7 f9                	idiv   ecx
c0010a1d:	8d 42 30             	lea    eax,[edx+0x30]
c0010a20:	0f b6 c0             	movzx  eax,al
c0010a23:	50                   	push   eax
c0010a24:	e8 17 fe ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a29:	5d                   	pop    ebp
c0010a2a:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a2f:	5a                   	pop    edx
c0010a30:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a34:	53                   	push   ebx
c0010a35:	89 f0                	mov    eax,esi
c0010a37:	99                   	cdq    
c0010a38:	f7 fd                	idiv   ebp
c0010a3a:	99                   	cdq    
c0010a3b:	f7 f9                	idiv   ecx
c0010a3d:	8d 42 30             	lea    eax,[edx+0x30]
c0010a40:	0f b6 c0             	movzx  eax,al
c0010a43:	50                   	push   eax
c0010a44:	e8 f7 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a49:	5d                   	pop    ebp
c0010a4a:	bd 64 00 00 00       	mov    ebp,0x64
c0010a4f:	5a                   	pop    edx
c0010a50:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a57:	53                   	push   ebx
c0010a58:	89 f0                	mov    eax,esi
c0010a5a:	99                   	cdq    
c0010a5b:	f7 fd                	idiv   ebp
c0010a5d:	99                   	cdq    
c0010a5e:	f7 f9                	idiv   ecx
c0010a60:	8d 42 30             	lea    eax,[edx+0x30]
c0010a63:	0f b6 c0             	movzx  eax,al
c0010a66:	50                   	push   eax
c0010a67:	e8 d4 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6c:	5d                   	pop    ebp
c0010a6d:	5a                   	pop    edx
c0010a6e:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a75:	53                   	push   ebx
c0010a76:	89 f0                	mov    eax,esi
c0010a78:	99                   	cdq    
c0010a79:	f7 f9                	idiv   ecx
c0010a7b:	89 d6                	mov    esi,edx
c0010a7d:	99                   	cdq    
c0010a7e:	f7 f9                	idiv   ecx
c0010a80:	8d 42 30             	lea    eax,[edx+0x30]
c0010a83:	0f b6 c0             	movzx  eax,al
c0010a86:	50                   	push   eax
c0010a87:	e8 b4 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8c:	5d                   	pop    ebp
c0010a8d:	5a                   	pop    edx
c0010a8e:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a95:	53                   	push   ebx
c0010a96:	8d 46 30             	lea    eax,[esi+0x30]
c0010a99:	0f b6 f0             	movzx  esi,al
c0010a9c:	56                   	push   esi
c0010a9d:	e8 9e fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa2:	5e                   	pop    esi
c0010aa3:	8b 35 c4 29 03 c0    	mov    esi,DWORD PTR ds:0xc00329c4
c0010aa9:	5d                   	pop    ebp
c0010aaa:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010ab1:	bd 10 27 00 00       	mov    ebp,0x2710
c0010ab6:	53                   	push   ebx
c0010ab7:	89 f0                	mov    eax,esi
c0010ab9:	99                   	cdq    
c0010aba:	f7 fd                	idiv   ebp
c0010abc:	99                   	cdq    
c0010abd:	f7 f9                	idiv   ecx
c0010abf:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac2:	0f b6 c0             	movzx  eax,al
c0010ac5:	50                   	push   eax
c0010ac6:	e8 75 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010acb:	5a                   	pop    edx
c0010acc:	5d                   	pop    ebp
c0010acd:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ad4:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ad9:	53                   	push   ebx
c0010ada:	89 f0                	mov    eax,esi
c0010adc:	99                   	cdq    
c0010add:	f7 fd                	idiv   ebp
c0010adf:	99                   	cdq    
c0010ae0:	f7 f9                	idiv   ecx
c0010ae2:	8d 42 30             	lea    eax,[edx+0x30]
c0010ae5:	0f b6 c0             	movzx  eax,al
c0010ae8:	50                   	push   eax
c0010ae9:	e8 52 fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aee:	5a                   	pop    edx
c0010aef:	5d                   	pop    ebp
c0010af0:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010af7:	bd 64 00 00 00       	mov    ebp,0x64
c0010afc:	53                   	push   ebx
c0010afd:	89 f0                	mov    eax,esi
c0010aff:	99                   	cdq    
c0010b00:	f7 fd                	idiv   ebp
c0010b02:	99                   	cdq    
c0010b03:	f7 f9                	idiv   ecx
c0010b05:	83 c2 30             	add    edx,0x30
c0010b08:	0f b6 d2             	movzx  edx,dl
c0010b0b:	52                   	push   edx
c0010b0c:	e8 2f fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b11:	5a                   	pop    edx
c0010b12:	5d                   	pop    ebp
c0010b13:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b1a:	53                   	push   ebx
c0010b1b:	89 f0                	mov    eax,esi
c0010b1d:	99                   	cdq    
c0010b1e:	f7 f9                	idiv   ecx
c0010b20:	89 d6                	mov    esi,edx
c0010b22:	99                   	cdq    
c0010b23:	f7 f9                	idiv   ecx
c0010b25:	8d 42 30             	lea    eax,[edx+0x30]
c0010b28:	0f b6 c0             	movzx  eax,al
c0010b2b:	50                   	push   eax
c0010b2c:	e8 0f fd ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b31:	5a                   	pop    edx
c0010b32:	59                   	pop    ecx
c0010b33:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b3a:	53                   	push   ebx
c0010b3b:	8d 46 30             	lea    eax,[esi+0x30]
c0010b3e:	0f b6 f0             	movzx  esi,al
c0010b41:	56                   	push   esi
c0010b42:	e8 f9 fc ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b47:	5b                   	pop    ebx
c0010b48:	5e                   	pop    esi
c0010b49:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b50:	5b                   	pop    ebx
c0010b51:	5e                   	pop    esi
c0010b52:	5f                   	pop    edi
c0010b53:	5d                   	pop    ebp
c0010b54:	c3                   	ret    
c0010b55:	90                   	nop

c0010b56 <VgaText::updateTitle()>:
c0010b56:	53                   	push   ebx
c0010b57:	31 c0                	xor    eax,eax
c0010b59:	83 ec 58             	sub    esp,0x58
c0010b5c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b60:	89 e1                	mov    ecx,esp
c0010b62:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b66:	40                   	inc    eax
c0010b67:	83 f8 50             	cmp    eax,0x50
c0010b6a:	75 f6                	jne    c0010b62 <VgaText::updateTitle()+0xc>
c0010b6c:	31 c0                	xor    eax,eax
c0010b6e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b75:	84 db                	test   bl,bl
c0010b77:	74 06                	je     c0010b7f <VgaText::updateTitle()+0x29>
c0010b79:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b7c:	40                   	inc    eax
c0010b7d:	eb ef                	jmp    c0010b6e <VgaText::updateTitle()+0x18>
c0010b7f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b85:	85 c0                	test   eax,eax
c0010b87:	74 09                	je     c0010b92 <VgaText::updateTitle()+0x3c>
c0010b89:	53                   	push   ebx
c0010b8a:	53                   	push   ebx
c0010b8b:	51                   	push   ecx
c0010b8c:	52                   	push   edx
c0010b8d:	ff d0                	call   eax
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	e8 55 fe ff ff       	call   c00109ec <VgaText::updateDiskUsage()>
c0010b97:	83 c4 58             	add    esp,0x58
c0010b9a:	5b                   	pop    ebx
c0010b9b:	c3                   	ret    

c0010b9c <VgaText::setTitleTextColour(VgaColour)>:
c0010b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba4:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010baa:	eb aa                	jmp    c0010b56 <VgaText::updateTitle()>

c0010bac <VgaText::setTitleColour(VgaColour)>:
c0010bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bb4:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bba:	eb 9a                	jmp    c0010b56 <VgaText::updateTitle()>

c0010bbc <VgaText::setTitle(char*)>:
c0010bbc:	53                   	push   ebx
c0010bbd:	83 ec 10             	sub    esp,0x10
c0010bc0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc8:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bce:	50                   	push   eax
c0010bcf:	e8 60 fc fe ff       	call   c0000834 <strcpy>
c0010bd4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bd8:	83 c4 18             	add    esp,0x18
c0010bdb:	5b                   	pop    ebx
c0010bdc:	e9 75 ff ff ff       	jmp    c0010b56 <VgaText::updateTitle()>
c0010be1:	90                   	nop

c0010be2 <VgaText::decrementCursor(bool)>:
c0010be2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010be6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bea:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	74 07                	je     c0010bfb <VgaText::decrementCursor(bool)+0x19>
c0010bf4:	48                   	dec    eax
c0010bf5:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bfb:	84 c9                	test   cl,cl
c0010bfd:	74 09                	je     c0010c08 <VgaText::decrementCursor(bool)+0x26>
c0010bff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c03:	e9 56 fa ff ff       	jmp    c001065e <VgaText::updateCursor()>
c0010c08:	c3                   	ret    
c0010c09:	90                   	nop

c0010c0a <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c0a:	53                   	push   ebx
c0010c0b:	83 ec 08             	sub    esp,0x8
c0010c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c1a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c1e:	3c 07                	cmp    al,0x7
c0010c20:	75 2a                	jne    c0010c4c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c22:	a1 f0 e7 02 c0       	mov    eax,ds:0xc002e7f0
c0010c27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c2f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c37:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c43:	83 c4 08             	add    esp,0x8
c0010c46:	5b                   	pop    ebx
c0010c47:	e9 30 31 00 00       	jmp    c0013d7c <Buzzer::beep(int, int, bool)>
c0010c4c:	3c 0d                	cmp    al,0xd
c0010c4e:	75 0c                	jne    c0010c5c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c50:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c5a:	eb 3b                	jmp    c0010c97 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c5c:	3c 0a                	cmp    al,0xa
c0010c5e:	75 40                	jne    c0010ca0 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c60:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c66:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c70:	8d 50 01             	lea    edx,[eax+0x1]
c0010c73:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c79:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c7f:	75 12                	jne    c0010c93 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c81:	83 ec 0c             	sub    esp,0xc
c0010c84:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c8a:	53                   	push   ebx
c0010c8b:	e8 1c fb ff ff       	call   c00107ac <VgaText::scrollScreen()>
c0010c90:	83 c4 10             	add    esp,0x10
c0010c93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c97:	83 c4 08             	add    esp,0x8
c0010c9a:	5b                   	pop    ebx
c0010c9b:	e9 be f9 ff ff       	jmp    c001065e <VgaText::updateCursor()>
c0010ca0:	3c 08                	cmp    al,0x8
c0010ca2:	75 31                	jne    c0010cd5 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010ca4:	50                   	push   eax
c0010ca5:	50                   	push   eax
c0010ca6:	6a 01                	push   0x1
c0010ca8:	53                   	push   ebx
c0010ca9:	e8 34 ff ff ff       	call   c0010be2 <VgaText::decrementCursor(bool)>
c0010cae:	5a                   	pop    edx
c0010caf:	59                   	pop    ecx
c0010cb0:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cb6:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cbc:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cc2:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cc8:	6a 20                	push   0x20
c0010cca:	53                   	push   ebx
c0010ccb:	e8 82 fb ff ff       	call   c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd0:	83 c4 28             	add    esp,0x28
c0010cd3:	5b                   	pop    ebx
c0010cd4:	c3                   	ret    
c0010cd5:	83 ec 08             	sub    esp,0x8
c0010cd8:	0f be c0             	movsx  eax,al
c0010cdb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ce1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ce7:	51                   	push   ecx
c0010ce8:	52                   	push   edx
c0010ce9:	50                   	push   eax
c0010cea:	53                   	push   ebx
c0010ceb:	e8 62 fb ff ff       	call   c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cf0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cf4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cfc:	83 c4 28             	add    esp,0x28
c0010cff:	5b                   	pop    ebx
c0010d00:	e9 1b fc ff ff       	jmp    c0010920 <VgaText::incrementCursor(bool)>
c0010d05:	90                   	nop

c0010d06 <VgaText::isShowingCursor()>:
c0010d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0a:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d10:	c3                   	ret    
c0010d11:	90                   	nop

c0010d12 <VgaText::isBlinkDisabled()>:
c0010d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d16:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d1c:	83 f0 01             	xor    eax,0x1
c0010d1f:	c3                   	ret    

c0010d20 <VgaText::setCursorHeight(int)>:
c0010d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d28:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d2e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d39:	e9 3a f9 ff ff       	jmp    c0010678 <VgaText::showCursor(bool)>

c0010d3e <VgaText::getCursorHeight()>:
c0010d3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d42:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d48:	c3                   	ret    

c0010d49 <setActiveTerminal(VgaText*)>:
c0010d49:	53                   	push   ebx
c0010d4a:	83 ec 08             	sub    esp,0x8
c0010d4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d51:	85 db                	test   ebx,ebx
c0010d53:	75 11                	jne    c0010d66 <setActiveTerminal(VgaText*)+0x1d>
c0010d55:	c7 44 24 10 20 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a420
c0010d5d:	83 c4 08             	add    esp,0x8
c0010d60:	5b                   	pop    ebx
c0010d61:	e9 c9 98 00 00       	jmp    c001a62f <Krnl::panic(char const*)>
c0010d66:	50                   	push   eax
c0010d67:	50                   	push   eax
c0010d68:	53                   	push   ebx
c0010d69:	68 2e a4 02 c0       	push   0xc002a42e
c0010d6e:	e8 0a 22 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0010d73:	a1 44 e7 02 c0       	mov    eax,ds:0xc002e744
c0010d78:	83 c4 10             	add    esp,0x10
c0010d7b:	85 c0                	test   eax,eax
c0010d7d:	74 0c                	je     c0010d8b <setActiveTerminal(VgaText*)+0x42>
c0010d7f:	83 ec 0c             	sub    esp,0xc
c0010d82:	50                   	push   eax
c0010d83:	e8 d6 f8 ff ff       	call   c001065e <VgaText::updateCursor()>
c0010d88:	83 c4 10             	add    esp,0x10
c0010d8b:	89 1d 44 e7 02 c0    	mov    DWORD PTR ds:0xc002e744,ebx
c0010d91:	51                   	push   ecx
c0010d92:	51                   	push   ecx
c0010d93:	53                   	push   ebx
c0010d94:	68 46 a4 02 c0       	push   0xc002a446
c0010d99:	e8 df 21 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0010d9e:	83 c4 0c             	add    esp,0xc
c0010da1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010da7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010dad:	53                   	push   ebx
c0010dae:	e8 17 fb ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c0010db3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db6:	e8 57 ff ff ff       	call   c0010d12 <VgaText::isBlinkDisabled()>
c0010dbb:	5a                   	pop    edx
c0010dbc:	0f b6 c0             	movzx  eax,al
c0010dbf:	59                   	pop    ecx
c0010dc0:	50                   	push   eax
c0010dc1:	53                   	push   ebx
c0010dc2:	e8 c1 f8 ff ff       	call   c0010688 <VgaText::disableBlink(bool)>
c0010dc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dca:	e8 6f ff ff ff       	call   c0010d3e <VgaText::getCursorHeight()>
c0010dcf:	5a                   	pop    edx
c0010dd0:	59                   	pop    ecx
c0010dd1:	50                   	push   eax
c0010dd2:	53                   	push   ebx
c0010dd3:	e8 48 ff ff ff       	call   c0010d20 <VgaText::setCursorHeight(int)>
c0010dd8:	83 c4 10             	add    esp,0x10
c0010ddb:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010de2:	75 0a                	jne    c0010dee <setActiveTerminal(VgaText*)+0xa5>
c0010de4:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dee:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010df2:	83 c4 08             	add    esp,0x8
c0010df5:	5b                   	pop    ebx
c0010df6:	e9 0f f8 ff ff       	jmp    c001060a <VgaText::load()>

c0010dfb <doTerminalCycle()>:
c0010dfb:	83 ec 18             	sub    esp,0x18
c0010dfe:	a1 40 e7 02 c0       	mov    eax,ds:0xc002e740
c0010e03:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e09:	50                   	push   eax
c0010e0a:	a3 40 e7 02 c0       	mov    ds:0xc002e740,eax
c0010e0f:	e8 35 ff ff ff       	call   c0010d49 <setActiveTerminal(VgaText*)>
c0010e14:	83 c4 1c             	add    esp,0x1c
c0010e17:	c3                   	ret    

c0010e18 <VgaText::doUpdate()>:
c0010e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e1c:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e22:	85 c0                	test   eax,eax
c0010e24:	74 02                	je     c0010e28 <VgaText::doUpdate()+0x10>
c0010e26:	ff e0                	jmp    eax
c0010e28:	c3                   	ret    
c0010e29:	90                   	nop

c0010e2a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e2a:	55                   	push   ebp
c0010e2b:	57                   	push   edi
c0010e2c:	56                   	push   esi
c0010e2d:	53                   	push   ebx
c0010e2e:	83 ec 1c             	sub    esp,0x1c
c0010e31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e35:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e3a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e41:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e44:	50                   	push   eax
c0010e45:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e4a:	50                   	push   eax
c0010e4b:	e8 4a f9 ff ff       	call   c001079a <VgaText::combineColours(unsigned char, unsigned char)>
c0010e50:	59                   	pop    ecx
c0010e51:	0f b6 c0             	movzx  eax,al
c0010e54:	5b                   	pop    ebx
c0010e55:	31 c9                	xor    ecx,ecx
c0010e57:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e5f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e63:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e6d:	0f b7 db             	movzx  ebx,bx
c0010e70:	01 db                	add    ebx,ebx
c0010e72:	01 fb                	add    ebx,edi
c0010e74:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e77:	84 c0                	test   al,al
c0010e79:	0f 84 38 01 00 00    	je     c0010fb7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e7f:	3c 0d                	cmp    al,0xd
c0010e81:	75 0f                	jne    c0010e92 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e83:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e8d:	e9 1f 01 00 00       	jmp    c0010fb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e92:	3c 0a                	cmp    al,0xa
c0010e94:	75 5b                	jne    c0010ef1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e96:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e9c:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ea6:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ea9:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010eaf:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010eb5:	75 12                	jne    c0010ec9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010eb7:	83 ec 0c             	sub    esp,0xc
c0010eba:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ec0:	55                   	push   ebp
c0010ec1:	e8 e6 f8 ff ff       	call   c00107ac <VgaText::scrollScreen()>
c0010ec6:	83 c4 10             	add    esp,0x10
c0010ec9:	83 ec 0c             	sub    esp,0xc
c0010ecc:	55                   	push   ebp
c0010ecd:	e8 8c f7 ff ff       	call   c001065e <VgaText::updateCursor()>
c0010ed2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eda:	83 c4 10             	add    esp,0x10
c0010edd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ee3:	31 c9                	xor    ecx,ecx
c0010ee5:	0f b7 db             	movzx  ebx,bx
c0010ee8:	01 db                	add    ebx,ebx
c0010eea:	01 fb                	add    ebx,edi
c0010eec:	e9 c0 00 00 00       	jmp    c0010fb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef1:	3c 08                	cmp    al,0x8
c0010ef3:	75 4e                	jne    c0010f43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ef5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ef9:	53                   	push   ebx
c0010efa:	53                   	push   ebx
c0010efb:	6a 01                	push   0x1
c0010efd:	55                   	push   ebp
c0010efe:	e8 df fc ff ff       	call   c0010be2 <VgaText::decrementCursor(bool)>
c0010f03:	58                   	pop    eax
c0010f04:	5a                   	pop    edx
c0010f05:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f0b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f11:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f17:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f1d:	6a 20                	push   0x20
c0010f1f:	55                   	push   ebp
c0010f20:	e8 2d f9 ff ff       	call   c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f25:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f2d:	83 c4 20             	add    esp,0x20
c0010f30:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f36:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f3a:	0f b7 db             	movzx  ebx,bx
c0010f3d:	01 db                	add    ebx,ebx
c0010f3f:	01 fb                	add    ebx,edi
c0010f41:	eb 6e                	jmp    c0010fb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f43:	51                   	push   ecx
c0010f44:	51                   	push   ecx
c0010f45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f49:	50                   	push   eax
c0010f4a:	e8 f1 f8 ff ff       	call   c0010840 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f4f:	83 c4 10             	add    esp,0x10
c0010f52:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f55:	39 2d 44 e7 02 c0    	cmp    DWORD PTR ds:0xc002e744,ebp
c0010f5b:	75 2a                	jne    c0010f87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f5d:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f63:	85 c0                	test   eax,eax
c0010f65:	74 20                	je     c0010f87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f67:	52                   	push   edx
c0010f68:	52                   	push   edx
c0010f69:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f6f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f7d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f80:	51                   	push   ecx
c0010f81:	55                   	push   ebp
c0010f82:	ff d0                	call   eax
c0010f84:	83 c4 20             	add    esp,0x20
c0010f87:	83 c3 02             	add    ebx,0x2
c0010f8a:	50                   	push   eax
c0010f8b:	50                   	push   eax
c0010f8c:	6a 00                	push   0x0
c0010f8e:	55                   	push   ebp
c0010f8f:	e8 8c f9 ff ff       	call   c0010920 <VgaText::incrementCursor(bool)>
c0010f94:	83 c4 10             	add    esp,0x10
c0010f97:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f9e:	75 0f                	jne    c0010faf <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fa0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fa8:	0f b7 db             	movzx  ebx,bx
c0010fab:	01 db                	add    ebx,ebx
c0010fad:	01 fb                	add    ebx,edi
c0010faf:	b1 01                	mov    cl,0x1
c0010fb1:	46                   	inc    esi
c0010fb2:	e9 bd fe ff ff       	jmp    c0010e74 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fb7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fbb:	83 ec 0c             	sub    esp,0xc
c0010fbe:	55                   	push   ebp
c0010fbf:	e8 9a f6 ff ff       	call   c001065e <VgaText::updateCursor()>
c0010fc4:	83 c4 10             	add    esp,0x10
c0010fc7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fcb:	84 c9                	test   cl,cl
c0010fcd:	74 0c                	je     c0010fdb <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fcf:	83 ec 0c             	sub    esp,0xc
c0010fd2:	55                   	push   ebp
c0010fd3:	e8 40 fe ff ff       	call   c0010e18 <VgaText::doUpdate()>
c0010fd8:	83 c4 10             	add    esp,0x10
c0010fdb:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fe2:	83 c4 1c             	add    esp,0x1c
c0010fe5:	5b                   	pop    ebx
c0010fe6:	5e                   	pop    esi
c0010fe7:	5f                   	pop    edi
c0010fe8:	5d                   	pop    ebp
c0010fe9:	c3                   	ret    

c0010fea <VgaText::clearScreen()>:
c0010fea:	57                   	push   edi
c0010feb:	56                   	push   esi
c0010fec:	31 f6                	xor    esi,esi
c0010fee:	53                   	push   ebx
c0010fef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ff3:	52                   	push   edx
c0010ff4:	6a 00                	push   0x0
c0010ff6:	6a 00                	push   0x0
c0010ff8:	53                   	push   ebx
c0010ff9:	e8 cc f8 ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c0010ffe:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011005:	83 c4 10             	add    esp,0x10
c0011008:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001100e:	7e 26                	jle    c0011036 <VgaText::clearScreen()+0x4c>
c0011010:	31 ff                	xor    edi,edi
c0011012:	50                   	push   eax
c0011013:	50                   	push   eax
c0011014:	56                   	push   esi
c0011015:	57                   	push   edi
c0011016:	47                   	inc    edi
c0011017:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001101d:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011023:	6a 20                	push   0x20
c0011025:	53                   	push   ebx
c0011026:	e8 27 f8 ff ff       	call   c0010852 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001102b:	83 c4 20             	add    esp,0x20
c001102e:	83 ff 50             	cmp    edi,0x50
c0011031:	75 df                	jne    c0011012 <VgaText::clearScreen()+0x28>
c0011033:	46                   	inc    esi
c0011034:	eb d2                	jmp    c0011008 <VgaText::clearScreen()+0x1e>
c0011036:	83 ec 0c             	sub    esp,0xc
c0011039:	53                   	push   ebx
c001103a:	e8 d9 fd ff ff       	call   c0010e18 <VgaText::doUpdate()>
c001103f:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011046:	83 c4 10             	add    esp,0x10
c0011049:	5b                   	pop    ebx
c001104a:	5e                   	pop    esi
c001104b:	5f                   	pop    edi
c001104c:	c3                   	ret    
c001104d:	90                   	nop

c001104e <VgaText::putchar(char)>:
c001104e:	56                   	push   esi
c001104f:	53                   	push   ebx
c0011050:	83 ec 14             	sub    esp,0x14
c0011053:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011057:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001105b:	3c 5b                	cmp    al,0x5b
c001105d:	75 21                	jne    c0011080 <VgaText::putchar(char)+0x32>
c001105f:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011066:	74 28                	je     c0011090 <VgaText::putchar(char)+0x42>
c0011068:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011071:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001107b:	e9 e2 00 00 00       	jmp    c0011162 <VgaText::putchar(char)+0x114>
c0011080:	3c 1b                	cmp    al,0x1b
c0011082:	75 0c                	jne    c0011090 <VgaText::putchar(char)+0x42>
c0011084:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001108b:	e9 d2 00 00 00       	jmp    c0011162 <VgaText::putchar(char)+0x114>
c0011090:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011096:	84 c9                	test   cl,cl
c0011098:	0f 84 ab 00 00 00    	je     c0011149 <VgaText::putchar(char)+0xfb>
c001109e:	8d 50 c0             	lea    edx,[eax-0x40]
c00110a1:	80 fa 3e             	cmp    dl,0x3e
c00110a4:	0f 87 82 00 00 00    	ja     c001112c <VgaText::putchar(char)+0xde>
c00110aa:	3c 6d                	cmp    al,0x6d
c00110ac:	75 4d                	jne    c00110fb <VgaText::putchar(char)+0xad>
c00110ae:	31 f6                	xor    esi,esi
c00110b0:	31 d2                	xor    edx,edx
c00110b2:	31 c0                	xor    eax,eax
c00110b4:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110ba:	7e 30                	jle    c00110ec <VgaText::putchar(char)+0x9e>
c00110bc:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110c4:	80 fa 3b             	cmp    dl,0x3b
c00110c7:	75 17                	jne    c00110e0 <VgaText::putchar(char)+0x92>
c00110c9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110cd:	50                   	push   eax
c00110ce:	53                   	push   ebx
c00110cf:	e8 ee f5 ff ff       	call   c00106c2 <VgaText::doANSI_SGR(int)>
c00110d4:	59                   	pop    ecx
c00110d5:	31 d2                	xor    edx,edx
c00110d7:	58                   	pop    eax
c00110d8:	31 c0                	xor    eax,eax
c00110da:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110de:	eb 09                	jmp    c00110e9 <VgaText::putchar(char)+0x9b>
c00110e0:	6b c0 0a             	imul   eax,eax,0xa
c00110e3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110e7:	88 ca                	mov    dl,cl
c00110e9:	46                   	inc    esi
c00110ea:	eb c8                	jmp    c00110b4 <VgaText::putchar(char)+0x66>
c00110ec:	84 d2                	test   dl,dl
c00110ee:	74 31                	je     c0011121 <VgaText::putchar(char)+0xd3>
c00110f0:	50                   	push   eax
c00110f1:	53                   	push   ebx
c00110f2:	e8 cb f5 ff ff       	call   c00106c2 <VgaText::doANSI_SGR(int)>
c00110f7:	58                   	pop    eax
c00110f8:	5a                   	pop    edx
c00110f9:	eb 26                	jmp    c0011121 <VgaText::putchar(char)+0xd3>
c00110fb:	3c 4a                	cmp    al,0x4a
c00110fd:	75 22                	jne    c0011121 <VgaText::putchar(char)+0xd3>
c00110ff:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011106:	75 19                	jne    c0011121 <VgaText::putchar(char)+0xd3>
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	53                   	push   ebx
c001110c:	e8 d9 fe ff ff       	call   c0010fea <VgaText::clearScreen()>
c0011111:	83 c4 0c             	add    esp,0xc
c0011114:	6a 00                	push   0x0
c0011116:	6a 00                	push   0x0
c0011118:	53                   	push   ebx
c0011119:	e8 ac f7 ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c001111e:	83 c4 10             	add    esp,0x10
c0011121:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001112a:	eb 36                	jmp    c0011162 <VgaText::putchar(char)+0x114>
c001112c:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011132:	83 fa 0e             	cmp    edx,0xe
c0011135:	7f 2b                	jg     c0011162 <VgaText::putchar(char)+0x114>
c0011137:	8d 4a 01             	lea    ecx,[edx+0x1]
c001113a:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011140:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011147:	eb 19                	jmp    c0011162 <VgaText::putchar(char)+0x114>
c0011149:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001114f:	0f be c0             	movsx  eax,al
c0011152:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011158:	50                   	push   eax
c0011159:	53                   	push   ebx
c001115a:	e8 ab fa ff ff       	call   c0010c0a <VgaText::putchar(char, VgaColour, VgaColour)>
c001115f:	83 c4 10             	add    esp,0x10
c0011162:	83 c4 14             	add    esp,0x14
c0011165:	5b                   	pop    ebx
c0011166:	5e                   	pop    esi
c0011167:	c3                   	ret    

c0011168 <VgaText::puts(char const*)>:
c0011168:	53                   	push   ebx
c0011169:	83 ec 08             	sub    esp,0x8
c001116c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011170:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011173:	84 c0                	test   al,al
c0011175:	74 12                	je     c0011189 <VgaText::puts(char const*)+0x21>
c0011177:	43                   	inc    ebx
c0011178:	51                   	push   ecx
c0011179:	51                   	push   ecx
c001117a:	50                   	push   eax
c001117b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001117f:	e8 ca fe ff ff       	call   c001104e <VgaText::putchar(char)>
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	eb e7                	jmp    c0011170 <VgaText::puts(char const*)+0x8>
c0011189:	83 c4 08             	add    esp,0x8
c001118c:	5b                   	pop    ebx
c001118d:	c3                   	ret    

c001118e <VgaText::putx(unsigned int)>:
c001118e:	57                   	push   edi
c001118f:	b9 11 00 00 00       	mov    ecx,0x11
c0011194:	56                   	push   esi
c0011195:	be 62 a4 02 c0       	mov    esi,0xc002a462
c001119a:	53                   	push   ebx
c001119b:	83 ec 20             	sub    esp,0x20
c001119e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111a2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111a6:	fc                   	cld    
c00111a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111a9:	be 08 00 00 00       	mov    esi,0x8
c00111ae:	50                   	push   eax
c00111af:	50                   	push   eax
c00111b0:	89 d8                	mov    eax,ebx
c00111b2:	c1 e3 04             	shl    ebx,0x4
c00111b5:	c1 e8 1c             	shr    eax,0x1c
c00111b8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111bd:	50                   	push   eax
c00111be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111c2:	e8 87 fe ff ff       	call   c001104e <VgaText::putchar(char)>
c00111c7:	83 c4 10             	add    esp,0x10
c00111ca:	4e                   	dec    esi
c00111cb:	75 e1                	jne    c00111ae <VgaText::putx(unsigned int)+0x20>
c00111cd:	83 c4 20             	add    esp,0x20
c00111d0:	5b                   	pop    ebx
c00111d1:	5e                   	pop    esi
c00111d2:	5f                   	pop    edi
c00111d3:	c3                   	ret    

c00111d4 <VgaText::VgaText(char const*)>:
c00111d4:	57                   	push   edi
c00111d5:	56                   	push   esi
c00111d6:	53                   	push   ebx
c00111d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111db:	83 ec 08             	sub    esp,0x8
c00111de:	6a 00                	push   0x0
c00111e0:	50                   	push   eax
c00111e1:	e8 6e 05 00 00       	call   c0011754 <UnixFile::UnixFile(int)>
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	ba c8 a4 02 c0       	mov    edx,0xc002a4c8
c00111ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f2:	89 10                	mov    DWORD PTR [eax],edx
c00111f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f8:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011206:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011214:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001121b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121f:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122a:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011238:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001124d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011251:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125c:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011262:	bb 20 e7 02 c0       	mov    ebx,0xc002e720
c0011267:	b8 08 00 00 00       	mov    eax,0x8
c001126c:	fc                   	cld    
c001126d:	89 d7                	mov    edi,edx
c001126f:	89 de                	mov    esi,ebx
c0011271:	89 c1                	mov    ecx,eax
c0011273:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011279:	05 1e 10 00 00       	add    eax,0x101e
c001127e:	83 ec 08             	sub    esp,0x8
c0011281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011285:	50                   	push   eax
c0011286:	e8 a9 f5 fe ff       	call   c0000834 <strcpy>
c001128b:	83 c4 10             	add    esp,0x10
c001128e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011292:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001129c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a0:	83 c0 0c             	add    eax,0xc
c00112a3:	83 ec 04             	sub    esp,0x4
c00112a6:	68 00 0f 00 00       	push   0xf00
c00112ab:	6a 00                	push   0x0
c00112ad:	50                   	push   eax
c00112ae:	e8 c5 f4 fe ff       	call   c0000778 <memset>
c00112b3:	83 c4 10             	add    esp,0x10
c00112b6:	83 ec 04             	sub    esp,0x4
c00112b9:	6a 00                	push   0x0
c00112bb:	6a 07                	push   0x7
c00112bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c1:	e8 b4 f4 ff ff       	call   c001077a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112c6:	83 c4 10             	add    esp,0x10
c00112c9:	83 ec 08             	sub    esp,0x8
c00112cc:	6a 02                	push   0x2
c00112ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d2:	e8 49 fa ff ff       	call   c0010d20 <VgaText::setCursorHeight(int)>
c00112d7:	83 c4 10             	add    esp,0x10
c00112da:	83 ec 04             	sub    esp,0x4
c00112dd:	6a 00                	push   0x0
c00112df:	6a 00                	push   0x0
c00112e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e5:	e8 e0 f5 ff ff       	call   c00108ca <VgaText::setCursor(int, int)>
c00112ea:	83 c4 10             	add    esp,0x10
c00112ed:	83 ec 08             	sub    esp,0x8
c00112f0:	6a 01                	push   0x1
c00112f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f6:	e8 7d f3 ff ff       	call   c0010678 <VgaText::showCursor(bool)>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	83 ec 08             	sub    esp,0x8
c0011301:	6a 01                	push   0x1
c0011303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011307:	e8 7c f3 ff ff       	call   c0010688 <VgaText::disableBlink(bool)>
c001130c:	83 c4 10             	add    esp,0x10
c001130f:	83 ec 0c             	sub    esp,0xc
c0011312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011316:	e8 cf fc ff ff       	call   c0010fea <VgaText::clearScreen()>
c001131b:	83 c4 10             	add    esp,0x10
c001131e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011322:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132d:	05 9e 10 00 00       	add    eax,0x109e
c0011332:	83 ec 04             	sub    esp,0x4
c0011335:	68 96 00 00 00       	push   0x96
c001133a:	6a 00                	push   0x0
c001133c:	50                   	push   eax
c001133d:	e8 36 f4 fe ff       	call   c0000778 <memset>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011349:	05 34 11 00 00       	add    eax,0x1134
c001134e:	83 ec 04             	sub    esp,0x4
c0011351:	68 2c 01 00 00       	push   0x12c
c0011356:	6a 00                	push   0x0
c0011358:	50                   	push   eax
c0011359:	e8 1a f4 fe ff       	call   c0000778 <memset>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	90                   	nop
c0011362:	5b                   	pop    ebx
c0011363:	5e                   	pop    esi
c0011364:	5f                   	pop    edi
c0011365:	c3                   	ret    

c0011366 <VgaText::receiveKey(unsigned char)>:
c0011366:	55                   	push   ebp
c0011367:	57                   	push   edi
c0011368:	56                   	push   esi
c0011369:	53                   	push   ebx
c001136a:	83 ec 1c             	sub    esp,0x1c
c001136d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011371:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011375:	84 db                	test   bl,bl
c0011377:	0f 84 c9 00 00 00    	je     c0011446 <VgaText::receiveKey(unsigned char)+0xe0>
c001137d:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011383:	80 fb 08             	cmp    bl,0x8
c0011386:	75 2c                	jne    c00113b4 <VgaText::receiveKey(unsigned char)+0x4e>
c0011388:	83 ec 0c             	sub    esp,0xc
c001138b:	57                   	push   edi
c001138c:	e8 03 f4 fe ff       	call   c0000794 <strlen>
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	85 c0                	test   eax,eax
c0011396:	74 41                	je     c00113d9 <VgaText::receiveKey(unsigned char)+0x73>
c0011398:	50                   	push   eax
c0011399:	50                   	push   eax
c001139a:	6a 08                	push   0x8
c001139c:	56                   	push   esi
c001139d:	e8 ac fc ff ff       	call   c001104e <VgaText::putchar(char)>
c00113a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113a5:	e8 ea f3 fe ff       	call   c0000794 <strlen>
c00113aa:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113b2:	eb 22                	jmp    c00113d6 <VgaText::receiveKey(unsigned char)+0x70>
c00113b4:	0f be c3             	movsx  eax,bl
c00113b7:	52                   	push   edx
c00113b8:	52                   	push   edx
c00113b9:	50                   	push   eax
c00113ba:	56                   	push   esi
c00113bb:	e8 8e fc ff ff       	call   c001104e <VgaText::putchar(char)>
c00113c0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113c9:	59                   	pop    ecx
c00113ca:	5d                   	pop    ebp
c00113cb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113cf:	50                   	push   eax
c00113d0:	57                   	push   edi
c00113d1:	e8 9e f5 fe ff       	call   c0000974 <strcat>
c00113d6:	83 c4 10             	add    esp,0x10
c00113d9:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113e0:	75 05                	jne    c00113e7 <VgaText::receiveKey(unsigned char)+0x81>
c00113e2:	80 fb 0a             	cmp    bl,0xa
c00113e5:	75 53                	jne    c001143a <VgaText::receiveKey(unsigned char)+0xd4>
c00113e7:	83 ec 0c             	sub    esp,0xc
c00113ea:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113f0:	53                   	push   ebx
c00113f1:	e8 9e f3 fe ff       	call   c0000794 <strlen>
c00113f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113f9:	89 c5                	mov    ebp,eax
c00113fb:	e8 94 f3 fe ff       	call   c0000794 <strlen>
c0011400:	83 c4 10             	add    esp,0x10
c0011403:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011407:	3d 2c 01 00 00       	cmp    eax,0x12c
c001140c:	76 10                	jbe    c001141e <VgaText::receiveKey(unsigned char)+0xb8>
c001140e:	83 ec 0c             	sub    esp,0xc
c0011411:	68 73 a4 02 c0       	push   0xc002a473
c0011416:	e8 14 92 00 00       	call   c001a62f <Krnl::panic(char const*)>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	50                   	push   eax
c001141f:	50                   	push   eax
c0011420:	57                   	push   edi
c0011421:	53                   	push   ebx
c0011422:	e8 4d f5 fe ff       	call   c0000974 <strcat>
c0011427:	83 c4 0c             	add    esp,0xc
c001142a:	68 96 00 00 00       	push   0x96
c001142f:	6a 00                	push   0x0
c0011431:	57                   	push   edi
c0011432:	e8 41 f3 fe ff       	call   c0000778 <memset>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	83 ec 0c             	sub    esp,0xc
c001143d:	56                   	push   esi
c001143e:	e8 d5 f9 ff ff       	call   c0010e18 <VgaText::doUpdate()>
c0011443:	83 c4 10             	add    esp,0x10
c0011446:	83 c4 1c             	add    esp,0x1c
c0011449:	5b                   	pop    ebx
c001144a:	5e                   	pop    esi
c001144b:	5f                   	pop    edi
c001144c:	5d                   	pop    ebp
c001144d:	c3                   	ret    

c001144e <VgaText::write(unsigned long long, void*, int*)>:
c001144e:	55                   	push   ebp
c001144f:	57                   	push   edi
c0011450:	56                   	push   esi
c0011451:	53                   	push   ebx
c0011452:	83 ec 0c             	sub    esp,0xc
c0011455:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011459:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001145d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011461:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011468:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001146b:	39 eb                	cmp    ebx,ebp
c001146d:	74 13                	je     c0011482 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001146f:	43                   	inc    ebx
c0011470:	50                   	push   eax
c0011471:	50                   	push   eax
c0011472:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011476:	50                   	push   eax
c0011477:	56                   	push   esi
c0011478:	e8 d1 fb ff ff       	call   c001104e <VgaText::putchar(char)>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	eb e9                	jmp    c001146b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011482:	83 ec 0c             	sub    esp,0xc
c0011485:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001148c:	56                   	push   esi
c001148d:	e8 86 f9 ff ff       	call   c0010e18 <VgaText::doUpdate()>
c0011492:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011496:	89 38                	mov    DWORD PTR [eax],edi
c0011498:	83 c4 1c             	add    esp,0x1c
c001149b:	31 c0                	xor    eax,eax
c001149d:	5b                   	pop    ebx
c001149e:	5e                   	pop    esi
c001149f:	5f                   	pop    edi
c00114a0:	5d                   	pop    ebp
c00114a1:	c3                   	ret    

c00114a2 <newTerminal(char*)>:
c00114a2:	83 ec 28             	sub    esp,0x28
c00114a5:	68 60 12 00 00       	push   0x1260
c00114aa:	e8 91 e3 ff ff       	call   c000f840 <malloc>
c00114af:	5a                   	pop    edx
c00114b0:	59                   	pop    ecx
c00114b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114b5:	50                   	push   eax
c00114b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114ba:	e8 15 fd ff ff       	call   c00111d4 <VgaText::VgaText(char const*)>
c00114bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114c3:	83 c4 2c             	add    esp,0x2c
c00114c6:	c3                   	ret    
c00114c7:	90                   	nop

c00114c8 <TSS::TSS()>:
c00114c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114d3:	90                   	nop
c00114d4:	c3                   	ret    
c00114d5:	90                   	nop

c00114d6 <TSS::setESP(unsigned long)>:
c00114d6:	55                   	push   ebp
c00114d7:	89 e5                	mov    ebp,esp
c00114d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114e5:	90                   	nop
c00114e6:	5d                   	pop    ebp
c00114e7:	c3                   	ret    

c00114e8 <TSS::flush()>:
c00114e8:	55                   	push   ebp
c00114e9:	89 e5                	mov    ebp,esp
c00114eb:	83 ec 10             	sub    esp,0x10
c00114ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00114f3:	83 c8 03             	or     eax,0x3
c00114f6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114fa:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114fe:	66 89 d0             	mov    ax,dx
c0011501:	0f 00 d8             	ltr    ax
c0011504:	90                   	nop
c0011505:	c9                   	leave  
c0011506:	c3                   	ret    
c0011507:	90                   	nop

c0011508 <TSS::setup(unsigned long, unsigned long)>:
c0011508:	55                   	push   ebp
c0011509:	89 e5                	mov    ebp,esp
c001150b:	83 ec 18             	sub    esp,0x18
c001150e:	83 ec 0c             	sub    esp,0xc
c0011511:	6a 68                	push   0x68
c0011513:	e8 28 e3 ff ff       	call   c000f840 <malloc>
c0011518:	83 c4 10             	add    esp,0x10
c001151b:	89 c2                	mov    edx,eax
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011526:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011529:	83 ec 04             	sub    esp,0x4
c001152c:	6a 68                	push   0x68
c001152e:	6a 00                	push   0x0
c0011530:	50                   	push   eax
c0011531:	e8 42 f2 fe ff       	call   c0000778 <memset>
c0011536:	83 c4 10             	add    esp,0x10
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001155a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115ae:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d0:	0f 20 da             	mov    edx,cr3
c00115d3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115d9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115e2:	83 ec 08             	sub    esp,0x8
c00115e5:	50                   	push   eax
c00115e6:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115e9:	50                   	push   eax
c00115ea:	e8 2f da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115ef:	83 c4 10             	add    esp,0x10
c00115f2:	83 ec 08             	sub    esp,0x8
c00115f5:	6a 68                	push   0x68
c00115f7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115fa:	50                   	push   eax
c00115fb:	e8 3a da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011600:	83 c4 10             	add    esp,0x10
c0011603:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011607:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001160a:	83 e0 0f             	and    eax,0xf
c001160d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011610:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011613:	83 c8 40             	or     eax,0x40
c0011616:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011619:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001161e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011624:	05 78 01 00 00       	add    eax,0x178
c0011629:	83 ec 04             	sub    esp,0x4
c001162c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001162f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011632:	50                   	push   eax
c0011633:	e8 36 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011638:	83 c4 10             	add    esp,0x10
c001163b:	89 c2                	mov    edx,eax
c001163d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011640:	89 10                	mov    DWORD PTR [eax],edx
c0011642:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011647:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001164d:	05 78 01 00 00       	add    eax,0x178
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	50                   	push   eax
c0011656:	e8 57 da ff ff       	call   c000f0b2 <GDT::flush()>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011661:	8b 00                	mov    eax,DWORD PTR [eax]
c0011663:	83 ec 08             	sub    esp,0x8
c0011666:	50                   	push   eax
c0011667:	68 dc a4 02 c0       	push   0xc002a4dc
c001166c:	e8 0c 19 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011677:	8b 00                	mov    eax,DWORD PTR [eax]
c0011679:	c9                   	leave  
c001167a:	c3                   	ret    
c001167b:	90                   	nop

c001167c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001167c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011680:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011687:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001168c:	75 08                	jne    c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001168e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011694:	eb 38                	jmp    c00116ce <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011696:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001169b:	75 17                	jne    c00116b4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001169d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00116ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116b4:	89 c1                	mov    ecx,eax
c00116b6:	83 e1 fd             	and    ecx,0xfffffffd
c00116b9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116bf:	74 cd                	je     c001168e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116c6:	83 e0 ef             	and    eax,0xffffffef
c00116c9:	83 f8 08             	cmp    eax,0x8
c00116cc:	76 c0                	jbe    c001168e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116ce:	31 c0                	xor    eax,eax
c00116d0:	c3                   	ret    
c00116d1:	90                   	nop

c00116d2 <ReservedFilename::isAtty()>:
c00116d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116d9:	31 c0                	xor    eax,eax
c00116db:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116e1:	74 09                	je     c00116ec <ReservedFilename::isAtty()+0x1a>
c00116e3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116e9:	0f 94 c0             	sete   al
c00116ec:	c3                   	ret    
c00116ed:	90                   	nop

c00116ee <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116fd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011702:	75 08                	jne    c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011704:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001170a:	eb 3d                	jmp    c0011749 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001170c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011711:	75 17                	jne    c001172a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011718:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001171b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011721:	8b 10                	mov    edx,DWORD PTR [eax]
c0011723:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011727:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001172a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001172f:	75 04                	jne    c0011735 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011731:	89 0a                	mov    DWORD PTR [edx],ecx
c0011733:	eb 14                	jmp    c0011749 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011735:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001173a:	74 c8                	je     c0011704 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001173c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011741:	83 e0 ef             	and    eax,0xffffffef
c0011744:	83 f8 08             	cmp    eax,0x8
c0011747:	76 bb                	jbe    c0011704 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011749:	31 c0                	xor    eax,eax
c001174b:	c3                   	ret    

c001174c <UnixFile::getFileDescriptor()>:
c001174c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011750:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011753:	c3                   	ret    

c0011754 <UnixFile::UnixFile(int)>:
c0011754:	53                   	push   ebx
c0011755:	83 ec 28             	sub    esp,0x28
c0011758:	ba c8 a5 02 c0       	mov    edx,0xc002a5c8
c001175d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011761:	89 10                	mov    DWORD PTR [eax],edx
c0011763:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001176b:	0f 8f 8c 01 00 00    	jg     c00118fd <UnixFile::UnixFile(int)+0x1a9>
c0011771:	a1 00 d6 02 c0       	mov    eax,ds:0xc002d600
c0011776:	8d 50 01             	lea    edx,[eax+0x1]
c0011779:	89 15 00 d6 02 c0    	mov    DWORD PTR ds:0xc002d600,edx
c001177f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011783:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011786:	83 ec 08             	sub    esp,0x8
c0011789:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001178d:	68 d8 e7 02 c0       	push   0xc002e7d8
c0011792:	e8 09 70 01 00       	call   c00287a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	a0 d4 e7 02 c0       	mov    al,ds:0xc002e7d4
c001179f:	83 f0 01             	xor    eax,0x1
c00117a2:	84 c0                	test   al,al
c00117a4:	0f 84 54 01 00 00    	je     c00118fe <UnixFile::UnixFile(int)+0x1aa>
c00117aa:	c6 05 d4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7d4,0x1
c00117b1:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117b9:	83 ec 0c             	sub    esp,0xc
c00117bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117c0:	e8 7b e0 ff ff       	call   c000f840 <malloc>
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	89 c3                	mov    ebx,eax
c00117ca:	83 ec 08             	sub    esp,0x8
c00117cd:	68 03 ff ff 0f       	push   0xfffff03
c00117d2:	53                   	push   ebx
c00117d3:	e8 2c 01 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	89 1d cc e7 02 c0    	mov    DWORD PTR ds:0xc002e7cc,ebx
c00117e1:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117e9:	83 ec 0c             	sub    esp,0xc
c00117ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117f0:	e8 4b e0 ff ff       	call   c000f840 <malloc>
c00117f5:	83 c4 10             	add    esp,0x10
c00117f8:	89 c3                	mov    ebx,eax
c00117fa:	83 ec 08             	sub    esp,0x8
c00117fd:	68 01 ff ff 0f       	push   0xfffff01
c0011802:	53                   	push   ebx
c0011803:	e8 fc 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c0011808:	83 c4 10             	add    esp,0x10
c001180b:	89 1d d0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7d0,ebx
c0011811:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011819:	83 ec 0c             	sub    esp,0xc
c001181c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011820:	e8 1b e0 ff ff       	call   c000f840 <malloc>
c0011825:	83 c4 10             	add    esp,0x10
c0011828:	89 c3                	mov    ebx,eax
c001182a:	83 ec 08             	sub    esp,0x8
c001182d:	68 00 ff ff 0f       	push   0xfffff00
c0011832:	53                   	push   ebx
c0011833:	e8 cc 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c0011838:	83 c4 10             	add    esp,0x10
c001183b:	89 1d c4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7c4,ebx
c0011841:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011849:	83 ec 0c             	sub    esp,0xc
c001184c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011850:	e8 eb df ff ff       	call   c000f840 <malloc>
c0011855:	83 c4 10             	add    esp,0x10
c0011858:	89 c3                	mov    ebx,eax
c001185a:	83 ec 08             	sub    esp,0x8
c001185d:	68 02 ff ff 0f       	push   0xfffff02
c0011862:	53                   	push   ebx
c0011863:	e8 9c 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c0011868:	83 c4 10             	add    esp,0x10
c001186b:	89 1d c8 e7 02 c0    	mov    DWORD PTR ds:0xc002e7c8,ebx
c0011871:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011879:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001187e:	7f 7e                	jg     c00118fe <UnixFile::UnixFile(int)+0x1aa>
c0011880:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011888:	83 ec 0c             	sub    esp,0xc
c001188b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001188f:	e8 ac df ff ff       	call   c000f840 <malloc>
c0011894:	83 c4 10             	add    esp,0x10
c0011897:	89 c3                	mov    ebx,eax
c0011899:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001189d:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118a2:	83 ec 08             	sub    esp,0x8
c00118a5:	50                   	push   eax
c00118a6:	53                   	push   ebx
c00118a7:	e8 58 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c00118ac:	83 c4 10             	add    esp,0x10
c00118af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118b3:	89 1c 85 a0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1860],ebx
c00118ba:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118c2:	83 ec 0c             	sub    esp,0xc
c00118c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118c9:	e8 72 df ff ff       	call   c000f840 <malloc>
c00118ce:	83 c4 10             	add    esp,0x10
c00118d1:	89 c3                	mov    ebx,eax
c00118d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d7:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	50                   	push   eax
c00118e0:	53                   	push   ebx
c00118e1:	e8 1e 00 00 00       	call   c0011904 <ReservedFilename::ReservedFilename(int)>
c00118e6:	83 c4 10             	add    esp,0x10
c00118e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118ed:	89 1c 85 60 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18a0],ebx
c00118f4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f8:	e9 7c ff ff ff       	jmp    c0011879 <UnixFile::UnixFile(int)+0x125>
c00118fd:	90                   	nop
c00118fe:	83 c4 28             	add    esp,0x28
c0011901:	5b                   	pop    ebx
c0011902:	c3                   	ret    
c0011903:	90                   	nop

c0011904 <ReservedFilename::ReservedFilename(int)>:
c0011904:	83 ec 0c             	sub    esp,0xc
c0011907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190b:	83 ec 08             	sub    esp,0x8
c001190e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011912:	50                   	push   eax
c0011913:	e8 3c fe ff ff       	call   c0011754 <UnixFile::UnixFile(int)>
c0011918:	83 c4 10             	add    esp,0x10
c001191b:	ba e4 a5 02 c0       	mov    edx,0xc002a5e4
c0011920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011924:	89 10                	mov    DWORD PTR [eax],edx
c0011926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001192e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011931:	90                   	nop
c0011932:	83 c4 0c             	add    esp,0xc
c0011935:	c3                   	ret    

c0011936 <UnixFile::~UnixFile()>:
c0011936:	83 ec 1c             	sub    esp,0x1c
c0011939:	ba c8 a5 02 c0       	mov    edx,0xc002a5c8
c001193e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011942:	89 10                	mov    DWORD PTR [eax],edx
c0011944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011948:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001194b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011950:	7f 73                	jg     c00119c5 <UnixFile::~UnixFile()+0x8f>
c0011952:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001195a:	83 ec 0c             	sub    esp,0xc
c001195d:	68 d8 e7 02 c0       	push   0xc002e7d8
c0011962:	e8 0d 6f 01 00       	call   c0028874 <LinkedList<UnixFile>::getFirstElement()>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	68 d8 e7 02 c0       	push   0xc002e7d8
c0011976:	e8 01 6f 01 00       	call   c002887c <LinkedList<UnixFile>::removeFirst()>
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011982:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011986:	74 40                	je     c00119c8 <UnixFile::~UnixFile()+0x92>
c0011988:	83 ec 08             	sub    esp,0x8
c001198b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001198f:	68 d8 e7 02 c0       	push   0xc002e7d8
c0011994:	e8 07 6e 01 00       	call   c00287a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a0:	8d 50 01             	lea    edx,[eax+0x1]
c00119a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119a7:	3d 88 13 00 00       	cmp    eax,0x1388
c00119ac:	0f 94 c0             	sete   al
c00119af:	84 c0                	test   al,al
c00119b1:	74 a7                	je     c001195a <UnixFile::~UnixFile()+0x24>
c00119b3:	83 ec 0c             	sub    esp,0xc
c00119b6:	68 a0 a5 02 c0       	push   0xc002a5a0
c00119bb:	e8 6f 8c 00 00       	call   c001a62f <Krnl::panic(char const*)>
c00119c0:	83 c4 10             	add    esp,0x10
c00119c3:	eb 95                	jmp    c001195a <UnixFile::~UnixFile()+0x24>
c00119c5:	90                   	nop
c00119c6:	eb 01                	jmp    c00119c9 <UnixFile::~UnixFile()+0x93>
c00119c8:	90                   	nop
c00119c9:	90                   	nop
c00119ca:	83 c4 1c             	add    esp,0x1c
c00119cd:	c3                   	ret    

c00119ce <UnixFile::~UnixFile()>:
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	83 ec 0c             	sub    esp,0xc
c00119d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d8:	e8 59 ff ff ff       	call   c0011936 <UnixFile::~UnixFile()>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	83 ec 08             	sub    esp,0x8
c00119e3:	6a 0c                	push   0xc
c00119e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e9:	e8 af 14 00 00       	call   c0012e9d <operator delete(void*, unsigned long)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	83 c4 0c             	add    esp,0xc
c00119f4:	c3                   	ret    
c00119f5:	90                   	nop

c00119f6 <ReservedFilename::~ReservedFilename()>:
c00119f6:	83 ec 0c             	sub    esp,0xc
c00119f9:	ba e4 a5 02 c0       	mov    edx,0xc002a5e4
c00119fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a02:	89 10                	mov    DWORD PTR [eax],edx
c0011a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a08:	83 ec 0c             	sub    esp,0xc
c0011a0b:	50                   	push   eax
c0011a0c:	e8 25 ff ff ff       	call   c0011936 <UnixFile::~UnixFile()>
c0011a11:	83 c4 10             	add    esp,0x10
c0011a14:	90                   	nop
c0011a15:	83 c4 0c             	add    esp,0xc
c0011a18:	c3                   	ret    
c0011a19:	90                   	nop

c0011a1a <ReservedFilename::~ReservedFilename()>:
c0011a1a:	83 ec 0c             	sub    esp,0xc
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a24:	e8 cd ff ff ff       	call   c00119f6 <ReservedFilename::~ReservedFilename()>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	83 ec 08             	sub    esp,0x8
c0011a2f:	6a 0c                	push   0xc
c0011a31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a35:	e8 63 14 00 00       	call   c0012e9d <operator delete(void*, unsigned long)>
c0011a3a:	83 c4 10             	add    esp,0x10
c0011a3d:	83 c4 0c             	add    esp,0xc
c0011a40:	c3                   	ret    

c0011a41 <getFromFileDescriptor(int)>:
c0011a41:	53                   	push   ebx
c0011a42:	83 ec 08             	sub    esp,0x8
c0011a45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a49:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a4f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a55:	7f 2c                	jg     c0011a83 <getFromFileDescriptor(int)+0x42>
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	68 d8 e7 02 c0       	push   0xc002e7d8
c0011a5f:	e8 10 6e 01 00       	call   c0028874 <LinkedList<UnixFile>::getFirstElement()>
c0011a64:	83 c4 10             	add    esp,0x10
c0011a67:	85 c0                	test   eax,eax
c0011a69:	75 04                	jne    c0011a6f <getFromFileDescriptor(int)+0x2e>
c0011a6b:	31 c0                	xor    eax,eax
c0011a6d:	eb 6e                	jmp    c0011add <getFromFileDescriptor(int)+0x9c>
c0011a6f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a72:	74 69                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011a74:	52                   	push   edx
c0011a75:	52                   	push   edx
c0011a76:	50                   	push   eax
c0011a77:	68 d8 e7 02 c0       	push   0xc002e7d8
c0011a7c:	e8 9d 6e 01 00       	call   c002891e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a81:	eb e1                	jmp    c0011a64 <getFromFileDescriptor(int)+0x23>
c0011a83:	a1 cc e7 02 c0       	mov    eax,ds:0xc002e7cc
c0011a88:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a8e:	74 4d                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011a90:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c0011a95:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a9b:	74 40                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011a9d:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c0011aa2:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011aa8:	74 33                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011aaa:	a1 c4 e7 02 c0       	mov    eax,ds:0xc002e7c4
c0011aaf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011ab5:	74 26                	je     c0011add <getFromFileDescriptor(int)+0x9c>
c0011ab7:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011abd:	83 f8 08             	cmp    eax,0x8
c0011ac0:	77 09                	ja     c0011acb <getFromFileDescriptor(int)+0x8a>
c0011ac2:	8b 04 85 a0 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1860]
c0011ac9:	eb 12                	jmp    c0011add <getFromFileDescriptor(int)+0x9c>
c0011acb:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ad1:	83 fb 08             	cmp    ebx,0x8
c0011ad4:	77 95                	ja     c0011a6b <getFromFileDescriptor(int)+0x2a>
c0011ad6:	8b 04 9d 60 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd18a0]
c0011add:	83 c4 08             	add    esp,0x8
c0011ae0:	5b                   	pop    ebx
c0011ae1:	c3                   	ret    

c0011ae2 <__static_initialization_and_destruction_0(int, int)>:
c0011ae2:	83 ec 0c             	sub    esp,0xc
c0011ae5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011aea:	75 34                	jne    c0011b20 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011af4:	75 2a                	jne    c0011b20 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011af6:	83 ec 0c             	sub    esp,0xc
c0011af9:	68 d8 e7 02 c0       	push   0xc002e7d8
c0011afe:	e8 45 6c 01 00       	call   c0028748 <LinkedList<UnixFile>::LinkedList()>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	83 ec 04             	sub    esp,0x4
c0011b09:	68 88 d5 02 c0       	push   0xc002d588
c0011b0e:	68 d8 e7 02 c0       	push   0xc002e7d8
c0011b13:	68 46 87 02 c0       	push   0xc0028746
c0011b18:	e8 fa 12 00 00       	call   c0012e17 <__cxa_atexit>
c0011b1d:	83 c4 10             	add    esp,0x10
c0011b20:	90                   	nop
c0011b21:	83 c4 0c             	add    esp,0xc
c0011b24:	c3                   	ret    

c0011b25 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b25:	83 ec 0c             	sub    esp,0xc
c0011b28:	83 ec 08             	sub    esp,0x8
c0011b2b:	68 ff ff 00 00       	push   0xffff
c0011b30:	6a 01                	push   0x1
c0011b32:	e8 ab ff ff ff       	call   c0011ae2 <__static_initialization_and_destruction_0(int, int)>
c0011b37:	83 c4 10             	add    esp,0x10
c0011b3a:	83 c4 0c             	add    esp,0xc
c0011b3d:	c3                   	ret    

c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b3e:	53                   	push   ebx
c0011b3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b43:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b47:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b4d:	89 c8                	mov    eax,ecx
c0011b4f:	d1 e8                	shr    eax,1
c0011b51:	03 05 08 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d608
c0011b57:	83 e1 01             	and    ecx,0x1
c0011b5a:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b5c:	75 09                	jne    c0011b67 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b5e:	83 e2 f0             	and    edx,0xfffffff0
c0011b61:	09 da                	or     edx,ebx
c0011b63:	88 10                	mov    BYTE PTR [eax],dl
c0011b65:	5b                   	pop    ebx
c0011b66:	c3                   	ret    
c0011b67:	c1 e3 04             	shl    ebx,0x4
c0011b6a:	83 e2 0f             	and    edx,0xf
c0011b6d:	09 da                	or     edx,ebx
c0011b6f:	88 10                	mov    BYTE PTR [eax],dl
c0011b71:	5b                   	pop    ebx
c0011b72:	c3                   	ret    

c0011b73 <Virt::getPageState(unsigned long)>:
c0011b73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b77:	8b 0d 08 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d608
c0011b7d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b83:	89 d0                	mov    eax,edx
c0011b85:	d1 e8                	shr    eax,1
c0011b87:	83 e2 01             	and    edx,0x1
c0011b8a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b8d:	75 04                	jne    c0011b93 <Virt::getPageState(unsigned long)+0x20>
c0011b8f:	83 e0 0f             	and    eax,0xf
c0011b92:	c3                   	ret    
c0011b93:	c0 e8 04             	shr    al,0x4
c0011b96:	c3                   	ret    

c0011b97 <Virt::allocateKernelVirtualPages(int)>:
c0011b97:	55                   	push   ebp
c0011b98:	31 ed                	xor    ebp,ebp
c0011b9a:	57                   	push   edi
c0011b9b:	56                   	push   esi
c0011b9c:	53                   	push   ebx
c0011b9d:	31 db                	xor    ebx,ebx
c0011b9f:	83 ec 1c             	sub    esp,0x1c
c0011ba2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011ba6:	8b 3d 04 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d604
c0011bac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bb1:	57                   	push   edi
c0011bb2:	e8 bc ff ff ff       	call   c0011b73 <Virt::getPageState(unsigned long)>
c0011bb7:	5a                   	pop    edx
c0011bb8:	84 c0                	test   al,al
c0011bba:	75 3a                	jne    c0011bf6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bbc:	85 db                	test   ebx,ebx
c0011bbe:	75 02                	jne    c0011bc2 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bc0:	89 fd                	mov    ebp,edi
c0011bc2:	43                   	inc    ebx
c0011bc3:	39 f3                	cmp    ebx,esi
c0011bc5:	74 5a                	je     c0011c21 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bc7:	47                   	inc    edi
c0011bc8:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bce:	76 31                	jbe    c0011c01 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bd0:	c7 05 04 d6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d604,0xc8000
c0011bda:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bdf:	75 28                	jne    c0011c09 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011be1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011be6:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011beb:	57                   	push   edi
c0011bec:	e8 82 ff ff ff       	call   c0011b73 <Virt::getPageState(unsigned long)>
c0011bf1:	5a                   	pop    edx
c0011bf2:	84 c0                	test   al,al
c0011bf4:	74 c6                	je     c0011bbc <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bf6:	31 db                	xor    ebx,ebx
c0011bf8:	47                   	inc    edi
c0011bf9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bff:	77 cf                	ja     c0011bd0 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c01:	89 3d 04 d6 02 c0    	mov    DWORD PTR ds:0xc002d604,edi
c0011c07:	eb a8                	jmp    c0011bb1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c09:	83 ec 0c             	sub    esp,0xc
c0011c0c:	68 f8 a5 02 c0       	push   0xc002a5f8
c0011c11:	e8 19 8a 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0011c16:	8b 3d 04 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d604
c0011c1c:	83 c4 10             	add    esp,0x10
c0011c1f:	eb 90                	jmp    c0011bb1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c21:	89 2d 04 d6 02 c0    	mov    DWORD PTR ds:0xc002d604,ebp
c0011c27:	4b                   	dec    ebx
c0011c28:	74 5f                	je     c0011c89 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c2a:	85 f6                	test   esi,esi
c0011c2c:	74 3d                	je     c0011c6b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c2e:	89 e8                	mov    eax,ebp
c0011c30:	31 db                	xor    ebx,ebx
c0011c32:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c35:	eb 14                	jmp    c0011c4b <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c37:	6a 01                	push   0x1
c0011c39:	43                   	inc    ebx
c0011c3a:	50                   	push   eax
c0011c3b:	e8 fe fe ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c40:	58                   	pop    eax
c0011c41:	39 f3                	cmp    ebx,esi
c0011c43:	5a                   	pop    edx
c0011c44:	74 25                	je     c0011c6b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c46:	a1 04 d6 02 c0       	mov    eax,ds:0xc002d604
c0011c4b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c4e:	85 db                	test   ebx,ebx
c0011c50:	89 15 04 d6 02 c0    	mov    DWORD PTR ds:0xc002d604,edx
c0011c56:	74 20                	je     c0011c78 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c58:	39 df                	cmp    edi,ebx
c0011c5a:	75 db                	jne    c0011c37 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c5c:	6a 03                	push   0x3
c0011c5e:	43                   	inc    ebx
c0011c5f:	50                   	push   eax
c0011c60:	e8 d9 fe ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c65:	59                   	pop    ecx
c0011c66:	39 f3                	cmp    ebx,esi
c0011c68:	58                   	pop    eax
c0011c69:	75 db                	jne    c0011c46 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c6b:	83 c4 1c             	add    esp,0x1c
c0011c6e:	89 e8                	mov    eax,ebp
c0011c70:	5b                   	pop    ebx
c0011c71:	c1 e0 0c             	shl    eax,0xc
c0011c74:	5e                   	pop    esi
c0011c75:	5f                   	pop    edi
c0011c76:	5d                   	pop    ebp
c0011c77:	c3                   	ret    
c0011c78:	6a 02                	push   0x2
c0011c7a:	bb 01 00 00 00       	mov    ebx,0x1
c0011c7f:	50                   	push   eax
c0011c80:	e8 b9 fe ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c85:	58                   	pop    eax
c0011c86:	5a                   	pop    edx
c0011c87:	eb bd                	jmp    c0011c46 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c89:	6a 04                	push   0x4
c0011c8b:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c8e:	55                   	push   ebp
c0011c8f:	a3 04 d6 02 c0       	mov    ds:0xc002d604,eax
c0011c94:	e8 a5 fe ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c99:	59                   	pop    ecx
c0011c9a:	89 e8                	mov    eax,ebp
c0011c9c:	5b                   	pop    ebx
c0011c9d:	c1 e0 0c             	shl    eax,0xc
c0011ca0:	83 c4 1c             	add    esp,0x1c
c0011ca3:	5b                   	pop    ebx
c0011ca4:	5e                   	pop    esi
c0011ca5:	5f                   	pop    edi
c0011ca6:	5d                   	pop    ebp
c0011ca7:	c3                   	ret    

c0011ca8 <Virt::freeSwapfilePage(unsigned long)>:
c0011ca8:	53                   	push   ebx
c0011ca9:	8b 15 e4 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7e4
c0011caf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cb3:	b8 01 00 00 00       	mov    eax,0x1
c0011cb8:	89 cb                	mov    ebx,ecx
c0011cba:	d3 e0                	shl    eax,cl
c0011cbc:	c1 eb 05             	shr    ebx,0x5
c0011cbf:	f7 d0                	not    eax
c0011cc1:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cc4:	5b                   	pop    ebx
c0011cc5:	c3                   	ret    

c0011cc6 <Virt::swapIDToSector(unsigned long)>:
c0011cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cca:	0f af 05 0c d6 02 c0 	imul   eax,DWORD PTR ds:0xc002d60c
c0011cd1:	03 05 14 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d614
c0011cd7:	c3                   	ret    

c0011cd8 <Virt::allocateSwapfilePage()>:
c0011cd8:	55                   	push   ebp
c0011cd9:	31 d2                	xor    edx,edx
c0011cdb:	57                   	push   edi
c0011cdc:	56                   	push   esi
c0011cdd:	53                   	push   ebx
c0011cde:	83 ec 0c             	sub    esp,0xc
c0011ce1:	8b 0d 0c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d60c
c0011ce7:	a1 10 d6 02 c0       	mov    eax,ds:0xc002d610
c0011cec:	f7 f1                	div    ecx
c0011cee:	39 0d 10 d6 02 c0    	cmp    DWORD PTR ds:0xc002d610,ecx
c0011cf4:	72 2d                	jb     c0011d23 <Virt::allocateSwapfilePage()+0x4b>
c0011cf6:	8b 35 e4 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e7e4
c0011cfc:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cfe:	f6 c2 01             	test   dl,0x1
c0011d01:	74 3c                	je     c0011d3f <Virt::allocateSwapfilePage()+0x67>
c0011d03:	31 c9                	xor    ecx,ecx
c0011d05:	bf 01 00 00 00       	mov    edi,0x1
c0011d0a:	eb 12                	jmp    c0011d1e <Virt::allocateSwapfilePage()+0x46>
c0011d0c:	89 fd                	mov    ebp,edi
c0011d0e:	89 ca                	mov    edx,ecx
c0011d10:	d3 e5                	shl    ebp,cl
c0011d12:	c1 ea 05             	shr    edx,0x5
c0011d15:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d18:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d1a:	85 ea                	test   edx,ebp
c0011d1c:	74 2a                	je     c0011d48 <Virt::allocateSwapfilePage()+0x70>
c0011d1e:	41                   	inc    ecx
c0011d1f:	39 c8                	cmp    eax,ecx
c0011d21:	77 e9                	ja     c0011d0c <Virt::allocateSwapfilePage()+0x34>
c0011d23:	83 ec 0c             	sub    esp,0xc
c0011d26:	68 6a a8 02 c0       	push   0xc002a86a
c0011d2b:	e8 ff 88 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0011d30:	83 c4 10             	add    esp,0x10
c0011d33:	31 c9                	xor    ecx,ecx
c0011d35:	83 c4 0c             	add    esp,0xc
c0011d38:	89 c8                	mov    eax,ecx
c0011d3a:	5b                   	pop    ebx
c0011d3b:	5e                   	pop    esi
c0011d3c:	5f                   	pop    edi
c0011d3d:	5d                   	pop    ebp
c0011d3e:	c3                   	ret    
c0011d3f:	89 f3                	mov    ebx,esi
c0011d41:	bd 01 00 00 00       	mov    ebp,0x1
c0011d46:	31 c9                	xor    ecx,ecx
c0011d48:	09 ea                	or     edx,ebp
c0011d4a:	89 c8                	mov    eax,ecx
c0011d4c:	89 13                	mov    DWORD PTR [ebx],edx
c0011d4e:	83 c4 0c             	add    esp,0xc
c0011d51:	5b                   	pop    ebx
c0011d52:	5e                   	pop    esi
c0011d53:	5f                   	pop    edi
c0011d54:	5d                   	pop    ebp
c0011d55:	c3                   	ret    

c0011d56 <Virt::virtualMemorySetup()>:
c0011d56:	53                   	push   ebx
c0011d57:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d5c:	83 ec 08             	sub    esp,0x8
c0011d5f:	6a 0f                	push   0xf
c0011d61:	53                   	push   ebx
c0011d62:	43                   	inc    ebx
c0011d63:	e8 d6 fd ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d68:	59                   	pop    ecx
c0011d69:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d6f:	58                   	pop    eax
c0011d70:	75 ed                	jne    c0011d5f <Virt::virtualMemorySetup()+0x9>
c0011d72:	83 ec 08             	sub    esp,0x8
c0011d75:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d7a:	68 00 00 00 c8       	push   0xc8000000
c0011d7f:	68 81 a8 02 c0       	push   0xc002a881
c0011d84:	e8 f4 11 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0011d89:	58                   	pop    eax
c0011d8a:	5a                   	pop    edx
c0011d8b:	68 00 f0 ff ef       	push   0xeffff000
c0011d90:	68 95 a8 02 c0       	push   0xc002a895
c0011d95:	e8 e3 11 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	83 ec 08             	sub    esp,0x8
c0011da0:	6a 00                	push   0x0
c0011da2:	53                   	push   ebx
c0011da3:	43                   	inc    ebx
c0011da4:	e8 95 fd ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011db2:	75 e9                	jne    c0011d9d <Virt::virtualMemorySetup()+0x47>
c0011db4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011db9:	83 ec 08             	sub    esp,0x8
c0011dbc:	6a 0f                	push   0xf
c0011dbe:	53                   	push   ebx
c0011dbf:	43                   	inc    ebx
c0011dc0:	e8 79 fd ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dc5:	83 c4 10             	add    esp,0x10
c0011dc8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dce:	75 e9                	jne    c0011db9 <Virt::virtualMemorySetup()+0x63>
c0011dd0:	83 c4 08             	add    esp,0x8
c0011dd3:	5b                   	pop    ebx
c0011dd4:	c3                   	ret    

c0011dd5 <Virt::swappingSetup()>:
c0011dd5:	83 ec 14             	sub    esp,0x14
c0011dd8:	31 d2                	xor    edx,edx
c0011dda:	a1 10 d6 02 c0       	mov    eax,ds:0xc002d610
c0011ddf:	f7 35 0c d6 02 c0    	div    DWORD PTR ds:0xc002d60c
c0011de5:	c1 e8 05             	shr    eax,0x5
c0011de8:	50                   	push   eax
c0011de9:	68 a9 a8 02 c0       	push   0xc002a8a9
c0011dee:	e8 8a 11 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0011df3:	a1 10 d6 02 c0       	mov    eax,ds:0xc002d610
c0011df8:	31 d2                	xor    edx,edx
c0011dfa:	f7 35 0c d6 02 c0    	div    DWORD PTR ds:0xc002d60c
c0011e00:	c1 e8 05             	shr    eax,0x5
c0011e03:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e06:	e8 35 da ff ff       	call   c000f840 <malloc>
c0011e0b:	83 c4 0c             	add    esp,0xc
c0011e0e:	89 c1                	mov    ecx,eax
c0011e10:	a3 e4 e7 02 c0       	mov    ds:0xc002e7e4,eax
c0011e15:	31 d2                	xor    edx,edx
c0011e17:	a1 10 d6 02 c0       	mov    eax,ds:0xc002d610
c0011e1c:	f7 35 0c d6 02 c0    	div    DWORD PTR ds:0xc002d60c
c0011e22:	c1 e8 05             	shr    eax,0x5
c0011e25:	50                   	push   eax
c0011e26:	6a 00                	push   0x0
c0011e28:	51                   	push   ecx
c0011e29:	e8 4a e9 fe ff       	call   c0000778 <memset>
c0011e2e:	83 c4 1c             	add    esp,0x1c
c0011e31:	c3                   	ret    

c0011e32 <Virt::getAKernelVAS()>:
c0011e32:	a1 e8 e7 02 c0       	mov    eax,ds:0xc002e7e8
c0011e37:	c3                   	ret    

c0011e38 <Virt::setupPageSwapping(int)>:
c0011e38:	57                   	push   edi
c0011e39:	56                   	push   esi
c0011e3a:	53                   	push   ebx
c0011e3b:	83 ec 1c             	sub    esp,0x1c
c0011e3e:	68 14 01 00 00       	push   0x114
c0011e43:	e8 f8 d9 ff ff       	call   c000f840 <malloc>
c0011e48:	83 c4 0c             	add    esp,0xc
c0011e4b:	89 c6                	mov    esi,eax
c0011e4d:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c0011e53:	68 c4 a8 02 c0       	push   0xc002a8c4
c0011e58:	50                   	push   eax
c0011e59:	e8 78 16 00 00       	call   c00134d6 <File::File(char const*, Process*)>
c0011e5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e61:	e8 4c 18 00 00       	call   c00136b2 <File::unlink()>
c0011e66:	58                   	pop    eax
c0011e67:	5a                   	pop    edx
c0011e68:	6a 12                	push   0x12
c0011e6a:	56                   	push   esi
c0011e6b:	e8 ca 16 00 00       	call   c001353a <File::open(FileOpenMode)>
c0011e70:	83 c4 10             	add    esp,0x10
c0011e73:	85 c0                	test   eax,eax
c0011e75:	0f 85 ca 00 00 00    	jne    c0011f45 <Virt::setupPageSwapping(int)+0x10d>
c0011e7b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e87:	c1 e3 08             	shl    ebx,0x8
c0011e8a:	83 ec 0c             	sub    esp,0xc
c0011e8d:	68 00 00 01 00       	push   0x10000
c0011e92:	e8 a9 d9 ff ff       	call   c000f840 <malloc>
c0011e97:	83 c4 0c             	add    esp,0xc
c0011e9a:	89 c7                	mov    edi,eax
c0011e9c:	68 00 00 01 00       	push   0x10000
c0011ea1:	6a 00                	push   0x0
c0011ea3:	50                   	push   eax
c0011ea4:	e8 cf e8 fe ff       	call   c0000778 <memset>
c0011ea9:	83 c4 10             	add    esp,0x10
c0011eac:	85 db                	test   ebx,ebx
c0011eae:	79 03                	jns    c0011eb3 <Virt::setupPageSwapping(int)+0x7b>
c0011eb0:	83 c3 0f             	add    ebx,0xf
c0011eb3:	c1 fb 04             	sar    ebx,0x4
c0011eb6:	4b                   	dec    ebx
c0011eb7:	83 fb ff             	cmp    ebx,0xffffffff
c0011eba:	74 4b                	je     c0011f07 <Virt::setupPageSwapping(int)+0xcf>
c0011ebc:	83 ec 0c             	sub    esp,0xc
c0011ebf:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ec1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ec5:	52                   	push   edx
c0011ec6:	57                   	push   edi
c0011ec7:	6a 00                	push   0x0
c0011ec9:	68 00 00 01 00       	push   0x10000
c0011ece:	56                   	push   esi
c0011ecf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ed2:	83 c4 20             	add    esp,0x20
c0011ed5:	85 c0                	test   eax,eax
c0011ed7:	75 59                	jne    c0011f32 <Virt::setupPageSwapping(int)+0xfa>
c0011ed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011edd:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ee2:	74 d2                	je     c0011eb6 <Virt::setupPageSwapping(int)+0x7e>
c0011ee4:	83 ec 08             	sub    esp,0x8
c0011ee7:	4b                   	dec    ebx
c0011ee8:	50                   	push   eax
c0011ee9:	68 17 a9 02 c0       	push   0xc002a917
c0011eee:	e8 8a 10 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0011ef3:	c7 04 24 20 a9 02 c0 	mov    DWORD PTR [esp],0xc002a920
c0011efa:	e8 30 87 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0011eff:	83 c4 10             	add    esp,0x10
c0011f02:	83 fb ff             	cmp    ebx,0xffffffff
c0011f05:	75 b5                	jne    c0011ebc <Virt::setupPageSwapping(int)+0x84>
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	56                   	push   esi
c0011f0b:	e8 88 16 00 00       	call   c0013598 <File::close()>
c0011f10:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f13:	e8 48 d9 ff ff       	call   c000f860 <rfree>
c0011f18:	83 c4 10             	add    esp,0x10
c0011f1b:	85 f6                	test   esi,esi
c0011f1d:	74 0c                	je     c0011f2b <Virt::setupPageSwapping(int)+0xf3>
c0011f1f:	83 ec 0c             	sub    esp,0xc
c0011f22:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f24:	56                   	push   esi
c0011f25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f28:	83 c4 10             	add    esp,0x10
c0011f2b:	83 c4 10             	add    esp,0x10
c0011f2e:	5b                   	pop    ebx
c0011f2f:	5e                   	pop    esi
c0011f30:	5f                   	pop    edi
c0011f31:	c3                   	ret    
c0011f32:	83 ec 08             	sub    esp,0x8
c0011f35:	50                   	push   eax
c0011f36:	68 ff a8 02 c0       	push   0xc002a8ff
c0011f3b:	e8 3d 10 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0011f40:	83 c4 10             	add    esp,0x10
c0011f43:	eb 94                	jmp    c0011ed9 <Virt::setupPageSwapping(int)+0xa1>
c0011f45:	83 ec 08             	sub    esp,0x8
c0011f48:	50                   	push   eax
c0011f49:	68 db a8 02 c0       	push   0xc002a8db
c0011f4e:	e8 2a 10 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0011f53:	c7 04 24 e4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e4
c0011f5a:	e8 d0 86 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	e9 14 ff ff ff       	jmp    c0011e7b <Virt::setupPageSwapping(int)+0x43>
c0011f67:	90                   	nop

c0011f68 <VAS::VAS()>:
c0011f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f77:	a3 e8 e7 02 c0       	mov    ds:0xc002e7e8,eax
c0011f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f80:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f88:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f8f:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f96:	90                   	nop
c0011f97:	c3                   	ret    

c0011f98 <VAS::VAS(VAS*)>:
c0011f98:	83 ec 0c             	sub    esp,0xc
c0011f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	68 18 a6 02 c0       	push   0xc002a618
c0011fae:	e8 7c 86 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	90                   	nop
c0011fb7:	83 c4 0c             	add    esp,0xc
c0011fba:	c3                   	ret    
c0011fbb:	90                   	nop

c0011fbc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc0:	89 c2                	mov    edx,eax
c0011fc2:	c1 e8 0a             	shr    eax,0xa
c0011fc5:	c1 ea 16             	shr    edx,0x16
c0011fc8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fcd:	19 c9                	sbb    ecx,ecx
c0011fcf:	c1 e2 0c             	shl    edx,0xc
c0011fd2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fd8:	25 fc 0f 00 00       	and    eax,0xffc
c0011fdd:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fe4:	01 d0                	add    eax,edx
c0011fe6:	c3                   	ret    
c0011fe7:	90                   	nop

c0011fe8 <VAS::getPageTableEntry(unsigned long)>:
c0011fe8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fec:	89 ca                	mov    edx,ecx
c0011fee:	c1 e9 0a             	shr    ecx,0xa
c0011ff1:	c1 ea 16             	shr    edx,0x16
c0011ff4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ffa:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012000:	c1 e0 0c             	shl    eax,0xc
c0012003:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012006:	c3                   	ret    

c0012007 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012007:	57                   	push   edi
c0012008:	56                   	push   esi
c0012009:	be 01 00 00 00       	mov    esi,0x1
c001200e:	53                   	push   ebx
c001200f:	83 ec 10             	sub    esp,0x10
c0012012:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012016:	c1 eb 0c             	shr    ebx,0xc
c0012019:	eb 3f                	jmp    c001205a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001201b:	e8 12 fe ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0012020:	83 ec 08             	sub    esp,0x8
c0012023:	57                   	push   edi
c0012024:	50                   	push   eax
c0012025:	e8 be ff ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c001202a:	83 c4 10             	add    esp,0x10
c001202d:	8b 00                	mov    eax,DWORD PTR [eax]
c001202f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012033:	f6 c4 04             	test   ah,0x4
c0012036:	75 5f                	jne    c0012097 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012038:	80 fa 04             	cmp    dl,0x4
c001203b:	74 78                	je     c00120b5 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001203d:	80 fa 02             	cmp    dl,0x2
c0012040:	0f 84 88 00 00 00    	je     c00120ce <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012046:	80 fa 03             	cmp    dl,0x3
c0012049:	0f 84 ad 00 00 00    	je     c00120fc <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001204f:	fe ca                	dec    dl
c0012051:	0f 84 92 00 00 00    	je     c00120e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012057:	43                   	inc    ebx
c0012058:	31 f6                	xor    esi,esi
c001205a:	53                   	push   ebx
c001205b:	e8 13 fb ff ff       	call   c0011b73 <Virt::getPageState(unsigned long)>
c0012060:	5f                   	pop    edi
c0012061:	89 df                	mov    edi,ebx
c0012063:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012067:	c1 e7 0c             	shl    edi,0xc
c001206a:	84 c0                	test   al,al
c001206c:	75 ad                	jne    c001201b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001206e:	83 ec 0c             	sub    esp,0xc
c0012071:	68 26 a9 02 c0       	push   0xc002a926
c0012076:	e8 b4 85 00 00       	call   c001a62f <Krnl::panic(char const*)>
c001207b:	e8 b2 fd ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0012080:	5a                   	pop    edx
c0012081:	59                   	pop    ecx
c0012082:	57                   	push   edi
c0012083:	50                   	push   eax
c0012084:	e8 5f ff ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	8b 00                	mov    eax,DWORD PTR [eax]
c001208e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012092:	f6 c4 04             	test   ah,0x4
c0012095:	74 c0                	je     c0012057 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012097:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001209b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a0:	83 ec 0c             	sub    esp,0xc
c00120a3:	50                   	push   eax
c00120a4:	e8 af dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120a9:	83 c4 10             	add    esp,0x10
c00120ac:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120b0:	80 fa 04             	cmp    dl,0x4
c00120b3:	75 88                	jne    c001203d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120b5:	89 f0                	mov    eax,esi
c00120b7:	84 c0                	test   al,al
c00120b9:	75 47                	jne    c0012102 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120bb:	c7 44 24 20 3c a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a63c
c00120c3:	83 c4 10             	add    esp,0x10
c00120c6:	5b                   	pop    ebx
c00120c7:	5e                   	pop    esi
c00120c8:	5f                   	pop    edi
c00120c9:	e9 61 85 00 00       	jmp    c001a62f <Krnl::panic(char const*)>
c00120ce:	89 f0                	mov    eax,esi
c00120d0:	84 c0                	test   al,al
c00120d2:	75 15                	jne    c00120e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120d4:	83 ec 0c             	sub    esp,0xc
c00120d7:	68 42 a9 02 c0       	push   0xc002a942
c00120dc:	e8 4e 85 00 00       	call   c001a62f <Krnl::panic(char const*)>
c00120e1:	83 c4 10             	add    esp,0x10
c00120e4:	e9 6e ff ff ff       	jmp    c0012057 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120e9:	83 ec 08             	sub    esp,0x8
c00120ec:	6a 00                	push   0x0
c00120ee:	53                   	push   ebx
c00120ef:	e8 4a fa ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120f4:	83 c4 10             	add    esp,0x10
c00120f7:	e9 5b ff ff ff       	jmp    c0012057 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120fc:	89 f0                	mov    eax,esi
c00120fe:	84 c0                	test   al,al
c0012100:	75 15                	jne    c0012117 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012102:	83 ec 08             	sub    esp,0x8
c0012105:	6a 00                	push   0x0
c0012107:	53                   	push   ebx
c0012108:	e8 31 fa ff ff       	call   c0011b3e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001210d:	83 c4 10             	add    esp,0x10
c0012110:	83 c4 10             	add    esp,0x10
c0012113:	5b                   	pop    ebx
c0012114:	5e                   	pop    esi
c0012115:	5f                   	pop    edi
c0012116:	c3                   	ret    
c0012117:	c7 44 24 20 5e a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a95e
c001211f:	83 c4 10             	add    esp,0x10
c0012122:	5b                   	pop    ebx
c0012123:	5e                   	pop    esi
c0012124:	5f                   	pop    edi
c0012125:	e9 05 85 00 00       	jmp    c001a62f <Krnl::panic(char const*)>

c001212a <VAS::freeAllocatedPages(unsigned long)>:
c001212a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001212e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012132:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012136:	74 09                	je     c0012141 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001213c:	e9 c6 fe ff ff       	jmp    c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c0012141:	c7 44 24 04 60 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a660
c0012149:	e9 2f 0e 00 00       	jmp    c0012f7d <Dbg::kprintf(char const*, ...)>

c001214e <VAS::virtualToPhysical(unsigned long)>:
c001214e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012152:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012156:	e8 8d fe ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c001215b:	5a                   	pop    edx
c001215c:	8b 00                	mov    eax,DWORD PTR [eax]
c001215e:	59                   	pop    ecx
c001215f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012164:	c3                   	ret    
c0012165:	90                   	nop

c0012166 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012166:	55                   	push   ebp
c0012167:	57                   	push   edi
c0012168:	56                   	push   esi
c0012169:	53                   	push   ebx
c001216a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001216e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012172:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012176:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001217a:	85 db                	test   ebx,ebx
c001217c:	7e 22                	jle    c00121a0 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001217e:	c1 e3 0c             	shl    ebx,0xc
c0012181:	01 f3                	add    ebx,esi
c0012183:	56                   	push   esi
c0012184:	81 c6 00 10 00 00    	add    esi,0x1000
c001218a:	55                   	push   ebp
c001218b:	e8 58 fe ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012190:	5a                   	pop    edx
c0012191:	59                   	pop    ecx
c0012192:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012194:	21 f9                	and    ecx,edi
c0012196:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001219a:	39 f3                	cmp    ebx,esi
c001219c:	89 08                	mov    DWORD PTR [eax],ecx
c001219e:	75 e3                	jne    c0012183 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121a0:	5b                   	pop    ebx
c00121a1:	5e                   	pop    esi
c00121a2:	5f                   	pop    edi
c00121a3:	5d                   	pop    ebp
c00121a4:	c3                   	ret    
c00121a5:	90                   	nop

c00121a6 <VAS::setToWriteCombining(unsigned long, int)>:
c00121a6:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00121ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121b1:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121b8:	75 01                	jne    c00121bb <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121ba:	c3                   	ret    
c00121bb:	68 80 00 00 00       	push   0x80
c00121c0:	6a ff                	push   0xffffffff
c00121c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ce:	e8 93 ff ff ff       	call   c0012166 <VAS::reflagRange(unsigned long, int, int, int)>
c00121d3:	83 c4 14             	add    esp,0x14
c00121d6:	c3                   	ret    
c00121d7:	90                   	nop

c00121d8 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121d8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e8:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121eb:	19 c0                	sbb    eax,eax
c00121ed:	83 ca 03             	or     edx,0x3
c00121f0:	83 e0 fc             	and    eax,0xfffffffc
c00121f3:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121fa:	0f 20 d8             	mov    eax,cr3
c00121fd:	0f 22 d8             	mov    cr3,eax
c0012200:	c3                   	ret    
c0012201:	90                   	nop

c0012202 <VAS::~VAS()>:
c0012202:	83 ec 2c             	sub    esp,0x2c
c0012205:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001220d:	e8 42 bc 00 00       	call   c001de54 <lockScheduler()>
c0012212:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012217:	8b 00                	mov    eax,DWORD PTR [eax]
c0012219:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001221c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012222:	83 ec 04             	sub    esp,0x4
c0012225:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012229:	6a 01                	push   0x1
c001222b:	50                   	push   eax
c001222c:	e8 a7 ff ff ff       	call   c00121d8 <VAS::mapOtherVASIn(bool, VAS*)>
c0012231:	83 c4 10             	add    esp,0x10
c0012234:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001223c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012244:	0f 8f d7 00 00 00    	jg     c0012321 <VAS::~VAS()+0x11f>
c001224a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001224e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012251:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012255:	c1 e2 02             	shl    edx,0x2
c0012258:	01 d0                	add    eax,edx
c001225a:	8b 00                	mov    eax,DWORD PTR [eax]
c001225c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012264:	83 e0 01             	and    eax,0x1
c0012267:	0f 84 ab 00 00 00    	je     c0012318 <VAS::~VAS()+0x116>
c001226d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012275:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001227d:	7f 75                	jg     c00122f4 <VAS::~VAS()+0xf2>
c001227f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012283:	c1 e0 0a             	shl    eax,0xa
c0012286:	89 c2                	mov    edx,eax
c0012288:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001228c:	01 d0                	add    eax,edx
c001228e:	c1 e0 0c             	shl    eax,0xc
c0012291:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012295:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001229a:	8b 00                	mov    eax,DWORD PTR [eax]
c001229c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001229f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122a5:	83 ec 04             	sub    esp,0x4
c00122a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122ac:	6a 01                	push   0x1
c00122ae:	50                   	push   eax
c00122af:	e8 08 fd ff ff       	call   c0011fbc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122b4:	83 c4 10             	add    esp,0x10
c00122b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122c9:	25 01 04 00 00       	and    eax,0x401
c00122ce:	3d 01 04 00 00       	cmp    eax,0x401
c00122d3:	75 19                	jne    c00122ee <VAS::~VAS()+0xec>
c00122d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122de:	83 ec 0c             	sub    esp,0xc
c00122e1:	50                   	push   eax
c00122e2:	e8 71 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122e7:	83 c4 10             	add    esp,0x10
c00122ea:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122ee:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122f2:	eb 81                	jmp    c0012275 <VAS::~VAS()+0x73>
c00122f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f8:	25 00 04 00 00       	and    eax,0x400
c00122fd:	74 19                	je     c0012318 <VAS::~VAS()+0x116>
c00122ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012303:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012308:	83 ec 0c             	sub    esp,0xc
c001230b:	50                   	push   eax
c001230c:	e8 47 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012311:	83 c4 10             	add    esp,0x10
c0012314:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012318:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001231c:	e9 1b ff ff ff       	jmp    c001223c <VAS::~VAS()+0x3a>
c0012321:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012325:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012328:	83 ec 0c             	sub    esp,0xc
c001232b:	50                   	push   eax
c001232c:	e8 d6 fc ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012338:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001233b:	83 ec 0c             	sub    esp,0xc
c001233e:	50                   	push   eax
c001233f:	e8 14 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012344:	83 c4 10             	add    esp,0x10
c0012347:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001234b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001234f:	c1 e0 02             	shl    eax,0x2
c0012352:	83 ec 08             	sub    esp,0x8
c0012355:	50                   	push   eax
c0012356:	68 84 a6 02 c0       	push   0xc002a684
c001235b:	e8 1d 0c 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012360:	83 c4 10             	add    esp,0x10
c0012363:	e8 ee ba 00 00       	call   c001de56 <unlockScheduler()>
c0012368:	90                   	nop
c0012369:	83 c4 2c             	add    esp,0x2c
c001236c:	c3                   	ret    
c001236d:	90                   	nop

c001236e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001236e:	55                   	push   ebp
c001236f:	57                   	push   edi
c0012370:	56                   	push   esi
c0012371:	53                   	push   ebx
c0012372:	83 ec 1c             	sub    esp,0x1c
c0012375:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012379:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001237d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012383:	77 08                	ja     c001238d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012385:	0f 20 d8             	mov    eax,cr3
c0012388:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001238b:	75 47                	jne    c00123d4 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001238d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012391:	09 d8                	or     eax,ebx
c0012393:	a9 ff 0f 00 00       	test   eax,0xfff
c0012398:	75 57                	jne    c00123f1 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001239a:	89 de                	mov    esi,ebx
c001239c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001239f:	c1 ee 16             	shr    esi,0x16
c00123a2:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123a9:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123ad:	74 54                	je     c0012403 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123b3:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123b9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123bd:	c1 e6 0c             	shl    esi,0xc
c00123c0:	c1 eb 0a             	shr    ebx,0xa
c00123c3:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123c9:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123cc:	83 c4 1c             	add    esp,0x1c
c00123cf:	5b                   	pop    ebx
c00123d0:	5e                   	pop    esi
c00123d1:	5f                   	pop    edi
c00123d2:	5d                   	pop    ebp
c00123d3:	c3                   	ret    
c00123d4:	83 ec 0c             	sub    esp,0xc
c00123d7:	68 a4 a6 02 c0       	push   0xc002a6a4
c00123dc:	e8 9c 0b 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123e8:	09 d8                	or     eax,ebx
c00123ea:	a9 ff 0f 00 00       	test   eax,0xfff
c00123ef:	74 a9                	je     c001239a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f1:	83 ec 0c             	sub    esp,0xc
c00123f4:	68 0c a7 02 c0       	push   0xc002a70c
c00123f9:	e8 31 82 00 00       	call   c001a62f <Krnl::panic(char const*)>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	eb 97                	jmp    c001239a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012403:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012407:	e8 d6 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c001240c:	89 c5                	mov    ebp,eax
c001240e:	e8 1f fa ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0012413:	83 ec 0c             	sub    esp,0xc
c0012416:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001241a:	6a 01                	push   0x1
c001241c:	e8 76 f7 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0012421:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012428:	6a 01                	push   0x1
c001242a:	50                   	push   eax
c001242b:	55                   	push   ebp
c001242c:	81 cd 07 04 00 00    	or     ebp,0x407
c0012432:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012436:	51                   	push   ecx
c0012437:	e8 26 02 00 00       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001243c:	83 c4 1c             	add    esp,0x1c
c001243f:	68 00 10 00 00       	push   0x1000
c0012444:	6a 00                	push   0x0
c0012446:	50                   	push   eax
c0012447:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001244b:	e8 28 e3 fe ff       	call   c0000778 <memset>
c0012450:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012454:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012457:	e8 ab fb ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c001245c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012460:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012463:	83 c4 10             	add    esp,0x10
c0012466:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012469:	e9 41 ff ff ff       	jmp    c00123af <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001246e <VAS::allocatePages(int, int)>:
c001246e:	55                   	push   ebp
c001246f:	57                   	push   edi
c0012470:	56                   	push   esi
c0012471:	53                   	push   ebx
c0012472:	83 ec 1c             	sub    esp,0x1c
c0012475:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012479:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001247e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012484:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001248a:	83 e0 01             	and    eax,0x1
c001248d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012491:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012495:	0f 85 cc 00 00 00    	jne    c0012567 <VAS::allocatePages(int, int)+0xf9>
c001249b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001249e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124a2:	85 c0                	test   eax,eax
c00124a4:	0f 84 a1 00 00 00    	je     c001254b <VAS::allocatePages(int, int)+0xdd>
c00124aa:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124b2:	c1 e6 0c             	shl    esi,0xc
c00124b5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124b9:	85 c0                	test   eax,eax
c00124bb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124be:	7e 33                	jle    c00124f3 <VAS::allocatePages(int, int)+0x85>
c00124c0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124c4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124c8:	81 cd 00 04 00 00    	or     ebp,0x400
c00124ce:	e8 0f da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124d3:	55                   	push   ebp
c00124d4:	53                   	push   ebx
c00124d5:	50                   	push   eax
c00124d6:	57                   	push   edi
c00124d7:	e8 92 fe ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c00124dc:	83 c4 10             	add    esp,0x10
c00124df:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124e4:	74 03                	je     c00124e9 <VAS::allocatePages(int, int)+0x7b>
c00124e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124ef:	39 de                	cmp    esi,ebx
c00124f1:	75 db                	jne    c00124ce <VAS::allocatePages(int, int)+0x60>
c00124f3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f8:	75 12                	jne    c001250c <VAS::allocatePages(int, int)+0x9e>
c00124fa:	0f 20 d8             	mov    eax,cr3
c00124fd:	0f 22 d8             	mov    cr3,eax
c0012500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012504:	83 c4 1c             	add    esp,0x1c
c0012507:	5b                   	pop    ebx
c0012508:	5e                   	pop    esi
c0012509:	5f                   	pop    edi
c001250a:	5d                   	pop    ebp
c001250b:	c3                   	ret    
c001250c:	c1 ee 0a             	shr    esi,0xa
c001250f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012513:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012519:	c1 eb 0a             	shr    ebx,0xa
c001251c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012522:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012528:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001252e:	39 c3                	cmp    ebx,eax
c0012530:	77 ce                	ja     c0012500 <VAS::allocatePages(int, int)+0x92>
c0012532:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012535:	81 c3 00 10 00 00    	add    ebx,0x1000
c001253b:	39 d8                	cmp    eax,ebx
c001253d:	73 f3                	jae    c0012532 <VAS::allocatePages(int, int)+0xc4>
c001253f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012543:	83 c4 1c             	add    esp,0x1c
c0012546:	5b                   	pop    ebx
c0012547:	5e                   	pop    esi
c0012548:	5f                   	pop    edi
c0012549:	5d                   	pop    ebp
c001254a:	c3                   	ret    
c001254b:	83 ec 0c             	sub    esp,0xc
c001254e:	68 30 a7 02 c0       	push   0xc002a730
c0012553:	e8 d7 80 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0012558:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001255b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001255f:	83 c4 10             	add    esp,0x10
c0012562:	e9 43 ff ff ff       	jmp    c00124aa <VAS::allocatePages(int, int)+0x3c>
c0012567:	83 ec 0c             	sub    esp,0xc
c001256a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001256e:	e8 24 f6 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0012573:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012577:	83 c4 10             	add    esp,0x10
c001257a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001257f:	0f 87 9b 00 00 00    	ja     c0012620 <VAS::allocatePages(int, int)+0x1b2>
c0012585:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012589:	85 d2                	test   edx,edx
c001258b:	7e 3c                	jle    c00125c9 <VAS::allocatePages(int, int)+0x15b>
c001258d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012591:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012595:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012599:	c1 e5 0c             	shl    ebp,0xc
c001259c:	81 ce 00 04 00 00    	or     esi,0x400
c00125a2:	01 dd                	add    ebp,ebx
c00125a4:	e8 39 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125a9:	56                   	push   esi
c00125aa:	53                   	push   ebx
c00125ab:	50                   	push   eax
c00125ac:	57                   	push   edi
c00125ad:	e8 bc fd ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c00125b2:	83 c4 10             	add    esp,0x10
c00125b5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ba:	74 03                	je     c00125bf <VAS::allocatePages(int, int)+0x151>
c00125bc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125bf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c5:	39 dd                	cmp    ebp,ebx
c00125c7:	75 db                	jne    c00125a4 <VAS::allocatePages(int, int)+0x136>
c00125c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ce:	0f 84 26 ff ff ff    	je     c00124fa <VAS::allocatePages(int, int)+0x8c>
c00125d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125dc:	89 d3                	mov    ebx,edx
c00125de:	c1 e0 0c             	shl    eax,0xc
c00125e1:	c1 eb 0a             	shr    ebx,0xa
c00125e4:	01 d0                	add    eax,edx
c00125e6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125ec:	c1 e8 0a             	shr    eax,0xa
c00125ef:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125fa:	2d 00 00 40 00       	sub    eax,0x400000
c00125ff:	39 c3                	cmp    ebx,eax
c0012601:	0f 87 f9 fe ff ff    	ja     c0012500 <VAS::allocatePages(int, int)+0x92>
c0012607:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001260a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012610:	39 d8                	cmp    eax,ebx
c0012612:	73 f3                	jae    c0012607 <VAS::allocatePages(int, int)+0x199>
c0012614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012618:	83 c4 1c             	add    esp,0x1c
c001261b:	5b                   	pop    ebx
c001261c:	5e                   	pop    esi
c001261d:	5f                   	pop    edi
c001261e:	5d                   	pop    ebp
c001261f:	c3                   	ret    
c0012620:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012625:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001262b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012632:	0f 84 4d ff ff ff    	je     c0012585 <VAS::allocatePages(int, int)+0x117>
c0012638:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012640:	e9 40 ff ff ff       	jmp    c0012585 <VAS::allocatePages(int, int)+0x117>
c0012645:	90                   	nop

c0012646 <VAS::setCPUSpecific(unsigned long)>:
c0012646:	83 ec 0c             	sub    esp,0xc
c0012649:	6a 05                	push   0x5
c001264b:	68 00 00 40 c2       	push   0xc2400000
c0012650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012658:	e8 11 fd ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c001265d:	83 c4 1c             	add    esp,0x1c
c0012660:	c3                   	ret    
c0012661:	90                   	nop

c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012662:	55                   	push   ebp
c0012663:	57                   	push   edi
c0012664:	56                   	push   esi
c0012665:	53                   	push   ebx
c0012666:	83 ec 1c             	sub    esp,0x1c
c0012669:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001266e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012672:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012678:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001267c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012682:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012686:	83 e0 01             	and    eax,0x1
c0012689:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001268d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012691:	85 c0                	test   eax,eax
c0012693:	7e 39                	jle    c00126ce <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012695:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012699:	89 f3                	mov    ebx,esi
c001269b:	c1 e0 0c             	shl    eax,0xc
c001269e:	01 f0                	add    eax,esi
c00126a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126a4:	55                   	push   ebp
c00126a5:	53                   	push   ebx
c00126a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126aa:	29 f0                	sub    eax,esi
c00126ac:	01 d8                	add    eax,ebx
c00126ae:	50                   	push   eax
c00126af:	57                   	push   edi
c00126b0:	e8 b9 fc ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c00126b5:	83 c4 10             	add    esp,0x10
c00126b8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126bd:	74 03                	je     c00126c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126bf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126c2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126c8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126cc:	75 d6                	jne    c00126a4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126ce:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126d3:	75 10                	jne    c00126e5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126d5:	0f 20 d8             	mov    eax,cr3
c00126d8:	0f 22 d8             	mov    cr3,eax
c00126db:	83 c4 1c             	add    esp,0x1c
c00126de:	89 f0                	mov    eax,esi
c00126e0:	5b                   	pop    ebx
c00126e1:	5e                   	pop    esi
c00126e2:	5f                   	pop    edi
c00126e3:	5d                   	pop    ebp
c00126e4:	c3                   	ret    
c00126e5:	89 f3                	mov    ebx,esi
c00126e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126eb:	c1 eb 0a             	shr    ebx,0xa
c00126ee:	c1 e0 0c             	shl    eax,0xc
c00126f1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126f7:	01 f0                	add    eax,esi
c00126f9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126ff:	c1 e8 0a             	shr    eax,0xa
c0012702:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012707:	2d 00 00 40 00       	sub    eax,0x400000
c001270c:	39 c3                	cmp    ebx,eax
c001270e:	77 cb                	ja     c00126db <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012710:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012713:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012719:	39 d8                	cmp    eax,ebx
c001271b:	73 f3                	jae    c0012710 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001271d:	83 c4 1c             	add    esp,0x1c
c0012720:	89 f0                	mov    eax,esi
c0012722:	5b                   	pop    ebx
c0012723:	5e                   	pop    esi
c0012724:	5f                   	pop    edi
c0012725:	5d                   	pop    ebp
c0012726:	c3                   	ret    
c0012727:	90                   	nop

c0012728 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012728:	55                   	push   ebp
c0012729:	57                   	push   edi
c001272a:	56                   	push   esi
c001272b:	53                   	push   ebx
c001272c:	83 ec 1c             	sub    esp,0x1c
c001272f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012733:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012737:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001273b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001273f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012744:	75 4a                	jne    c0012790 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012746:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001274a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001274d:	c1 eb 16             	shr    ebx,0x16
c0012750:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012757:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001275b:	74 4d                	je     c00127aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001275d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012761:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012765:	c1 e8 0a             	shr    eax,0xa
c0012768:	80 fa 01             	cmp    dl,0x1
c001276b:	19 d2                	sbb    edx,edx
c001276d:	c1 e3 0c             	shl    ebx,0xc
c0012770:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012774:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001277a:	25 fc 0f 00 00       	and    eax,0xffc
c001277f:	01 d8                	add    eax,ebx
c0012781:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012788:	83 c4 1c             	add    esp,0x1c
c001278b:	5b                   	pop    ebx
c001278c:	5e                   	pop    esi
c001278d:	5f                   	pop    edi
c001278e:	5d                   	pop    ebp
c001278f:	c3                   	ret    
c0012790:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012794:	83 ec 0c             	sub    esp,0xc
c0012797:	68 5c a7 02 c0       	push   0xc002a75c
c001279c:	e8 8e 7e 00 00       	call   c001a62f <Krnl::panic(char const*)>
c00127a1:	83 c4 10             	add    esp,0x10
c00127a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127a8:	eb 9c                	jmp    c0012746 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ae:	e8 2f d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127b3:	89 c5                	mov    ebp,eax
c00127b5:	e8 78 f6 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c00127ba:	83 ec 0c             	sub    esp,0xc
c00127bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127c1:	6a 01                	push   0x1
c00127c3:	e8 cf f3 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c00127c8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127cf:	6a 01                	push   0x1
c00127d1:	50                   	push   eax
c00127d2:	55                   	push   ebp
c00127d3:	81 cd 07 04 00 00    	or     ebp,0x407
c00127d9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127dd:	51                   	push   ecx
c00127de:	e8 7f fe ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127e3:	83 c4 1c             	add    esp,0x1c
c00127e6:	68 00 10 00 00       	push   0x1000
c00127eb:	6a 00                	push   0x0
c00127ed:	50                   	push   eax
c00127ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127f2:	e8 81 df fe ff       	call   c0000778 <memset>
c00127f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127fe:	e8 04 f8 ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c0012803:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012806:	83 c4 10             	add    esp,0x10
c0012809:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001280c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012810:	e9 48 ff ff ff       	jmp    c001275d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012815:	90                   	nop

c0012816 <VAS::VAS(bool)>:
c0012816:	53                   	push   ebx
c0012817:	83 ec 28             	sub    esp,0x28
c001281a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001281e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012822:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012826:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001282d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012831:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012835:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012838:	e8 a5 d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001283d:	89 c2                	mov    edx,eax
c001283f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012843:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012846:	e8 e7 f5 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c001284b:	89 c3                	mov    ebx,eax
c001284d:	83 ec 0c             	sub    esp,0xc
c0012850:	6a 01                	push   0x1
c0012852:	e8 40 f3 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0012857:	83 c4 10             	add    esp,0x10
c001285a:	89 c2                	mov    edx,eax
c001285c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012860:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012863:	83 ec 0c             	sub    esp,0xc
c0012866:	6a 03                	push   0x3
c0012868:	6a 01                	push   0x1
c001286a:	52                   	push   edx
c001286b:	50                   	push   eax
c001286c:	53                   	push   ebx
c001286d:	e8 f0 fd ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012872:	83 c4 20             	add    esp,0x20
c0012875:	89 c2                	mov    edx,eax
c0012877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001287b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001287e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012886:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001288e:	7f 1c                	jg     c00128ac <VAS::VAS(bool)+0x96>
c0012890:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012894:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012897:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001289b:	c1 e2 02             	shl    edx,0x2
c001289e:	01 d0                	add    eax,edx
c00128a0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128a6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128aa:	eb da                	jmp    c0012886 <VAS::VAS(bool)+0x70>
c00128ac:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128b4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128bc:	7f 7a                	jg     c0012938 <VAS::VAS(bool)+0x122>
c00128be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128c2:	2d 00 02 00 00       	sub    eax,0x200
c00128c7:	c1 e0 0c             	shl    eax,0xc
c00128ca:	83 c8 03             	or     eax,0x3
c00128cd:	89 c2                	mov    edx,eax
c00128cf:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00128d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128da:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e0:	83 e0 10             	and    eax,0x10
c00128e3:	84 c0                	test   al,al
c00128e5:	74 07                	je     c00128ee <VAS::VAS(bool)+0xd8>
c00128e7:	b8 00 01 00 00       	mov    eax,0x100
c00128ec:	eb 05                	jmp    c00128f3 <VAS::VAS(bool)+0xdd>
c00128ee:	b8 00 00 00 00       	mov    eax,0x0
c00128f3:	09 d0                	or     eax,edx
c00128f5:	89 c1                	mov    ecx,eax
c00128f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012902:	c1 e2 02             	shl    edx,0x2
c0012905:	01 d0                	add    eax,edx
c0012907:	89 ca                	mov    edx,ecx
c0012909:	89 10                	mov    DWORD PTR [eax],edx
c001290b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290f:	2d 40 03 00 00       	sub    eax,0x340
c0012914:	83 f8 7f             	cmp    eax,0x7f
c0012917:	77 16                	ja     c001292f <VAS::VAS(bool)+0x119>
c0012919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001291d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012924:	c1 e2 02             	shl    edx,0x2
c0012927:	01 d0                	add    eax,edx
c0012929:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001292f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012933:	e9 7c ff ff ff       	jmp    c00128b4 <VAS::VAS(bool)+0x9e>
c0012938:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001293d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012943:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012949:	83 e0 10             	and    eax,0x10
c001294c:	84 c0                	test   al,al
c001294e:	74 07                	je     c0012957 <VAS::VAS(bool)+0x141>
c0012950:	b8 03 41 00 00       	mov    eax,0x4103
c0012955:	eb 05                	jmp    c001295c <VAS::VAS(bool)+0x146>
c0012957:	b8 03 40 00 00       	mov    eax,0x4003
c001295c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012960:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012963:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012969:	89 02                	mov    DWORD PTR [edx],eax
c001296b:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012970:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012976:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001297c:	83 ec 08             	sub    esp,0x8
c001297f:	50                   	push   eax
c0012980:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012984:	e8 bd fc ff ff       	call   c0012646 <VAS::setCPUSpecific(unsigned long)>
c0012989:	83 c4 10             	add    esp,0x10
c001298c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012990:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012993:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012998:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001299e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129a4:	83 e0 10             	and    eax,0x10
c00129a7:	84 c0                	test   al,al
c00129a9:	74 07                	je     c00129b2 <VAS::VAS(bool)+0x19c>
c00129ab:	b8 00 01 00 00       	mov    eax,0x100
c00129b0:	eb 05                	jmp    c00129b7 <VAS::VAS(bool)+0x1a1>
c00129b2:	b8 00 00 00 00       	mov    eax,0x0
c00129b7:	09 c2                	or     edx,eax
c00129b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c0:	05 fc 0f 00 00       	add    eax,0xffc
c00129c5:	83 ca 03             	or     edx,0x3
c00129c8:	89 10                	mov    DWORD PTR [eax],edx
c00129ca:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00129cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d5:	83 ec 0c             	sub    esp,0xc
c00129d8:	50                   	push   eax
c00129d9:	e8 b2 1c 00 00       	call   c0014690 <Device::getName()>
c00129de:	83 c4 10             	add    esp,0x10
c00129e1:	83 ec 08             	sub    esp,0x8
c00129e4:	68 78 a9 02 c0       	push   0xc002a978
c00129e9:	50                   	push   eax
c00129ea:	e8 d1 de fe ff       	call   c00008c0 <strcmp>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	85 c0                	test   eax,eax
c00129f4:	0f 94 c0             	sete   al
c00129f7:	84 c0                	test   al,al
c00129f9:	74 70                	je     c0012a6b <VAS::VAS(bool)+0x255>
c00129fb:	e8 37 b4 00 00       	call   c001de37 <disableIRQs()>
c0012a00:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012a05:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a0b:	05 7c 09 00 00       	add    eax,0x97c
c0012a10:	83 ec 0c             	sub    esp,0xc
c0012a13:	50                   	push   eax
c0012a14:	e8 a3 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a21:	89 c3                	mov    ebx,eax
c0012a23:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0012a28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a2e:	05 7c 09 00 00       	add    eax,0x97c
c0012a33:	83 ec 0c             	sub    esp,0xc
c0012a36:	50                   	push   eax
c0012a37:	e8 80 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a3c:	83 c4 10             	add    esp,0x10
c0012a3f:	83 ec 08             	sub    esp,0x8
c0012a42:	50                   	push   eax
c0012a43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a47:	e8 9c f5 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012a4c:	83 c4 10             	add    esp,0x10
c0012a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a51:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a56:	6a 11                	push   0x11
c0012a58:	53                   	push   ebx
c0012a59:	50                   	push   eax
c0012a5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a5e:	e8 0b f9 ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a63:	83 c4 10             	add    esp,0x10
c0012a66:	e8 da b3 00 00       	call   c001de45 <enableIRQs()>
c0012a6b:	90                   	nop
c0012a6c:	83 c4 28             	add    esp,0x28
c0012a6f:	5b                   	pop    ebx
c0012a70:	c3                   	ret    
c0012a71:	90                   	nop

c0012a72 <VAS::evict(unsigned long)>:
c0012a72:	57                   	push   edi
c0012a73:	56                   	push   esi
c0012a74:	53                   	push   ebx
c0012a75:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012a79:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a7d:	e8 d2 b3 00 00       	call   c001de54 <lockScheduler()>
c0012a82:	83 ec 08             	sub    esp,0x8
c0012a85:	53                   	push   ebx
c0012a86:	68 80 a7 02 c0       	push   0xc002a780
c0012a8b:	e8 ed 04 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012a90:	e8 43 f2 ff ff       	call   c0011cd8 <Virt::allocateSwapfilePage()>
c0012a95:	83 c4 0c             	add    esp,0xc
c0012a98:	89 c6                	mov    esi,eax
c0012a9a:	50                   	push   eax
c0012a9b:	50                   	push   eax
c0012a9c:	68 86 a9 02 c0       	push   0xc002a986
c0012aa1:	e8 d7 04 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012aa6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa9:	e8 18 f2 ff ff       	call   c0011cc6 <Virt::swapIDToSector(unsigned long)>
c0012aae:	c1 e6 0b             	shl    esi,0xb
c0012ab1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ab4:	31 d2                	xor    edx,edx
c0012ab6:	6a 08                	push   0x8
c0012ab8:	52                   	push   edx
c0012ab9:	50                   	push   eax
c0012aba:	0f be 05 18 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d618
c0012ac1:	ff 34 85 7c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1484]
c0012ac8:	e8 3d 3d 00 00       	call   c001680a <LogicalDisk::write(unsigned long long, int, void*)>
c0012acd:	83 c4 18             	add    esp,0x18
c0012ad0:	53                   	push   ebx
c0012ad1:	57                   	push   edi
c0012ad2:	e8 11 f5 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012ad7:	5a                   	pop    edx
c0012ad8:	89 c3                	mov    ebx,eax
c0012ada:	59                   	pop    ecx
c0012adb:	ff 30                	push   DWORD PTR [eax]
c0012add:	68 96 a9 02 c0       	push   0xc002a996
c0012ae2:	e8 96 04 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012ae7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ae9:	c1 e8 0c             	shr    eax,0xc
c0012aec:	89 04 24             	mov    DWORD PTR [esp],eax
c0012aef:	e8 64 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012af4:	5f                   	pop    edi
c0012af5:	58                   	pop    eax
c0012af6:	ff 33                	push   DWORD PTR [ebx]
c0012af8:	68 a8 a9 02 c0       	push   0xc002a9a8
c0012afd:	e8 7b 04 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012b02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b04:	83 e0 fe             	and    eax,0xfffffffe
c0012b07:	89 03                	mov    DWORD PTR [ebx],eax
c0012b09:	5a                   	pop    edx
c0012b0a:	59                   	pop    ecx
c0012b0b:	50                   	push   eax
c0012b0c:	68 ba a9 02 c0       	push   0xc002a9ba
c0012b11:	e8 67 04 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b18:	80 e4 f7             	and    ah,0xf7
c0012b1b:	89 03                	mov    DWORD PTR [ebx],eax
c0012b1d:	5f                   	pop    edi
c0012b1e:	5a                   	pop    edx
c0012b1f:	50                   	push   eax
c0012b20:	68 cc a9 02 c0       	push   0xc002a9cc
c0012b25:	e8 53 04 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012b2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b2c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b31:	89 03                	mov    DWORD PTR [ebx],eax
c0012b33:	59                   	pop    ecx
c0012b34:	5f                   	pop    edi
c0012b35:	50                   	push   eax
c0012b36:	68 de a9 02 c0       	push   0xc002a9de
c0012b3b:	e8 3d 04 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012b40:	0b 33                	or     esi,DWORD PTR [ebx]
c0012b42:	89 33                	mov    DWORD PTR [ebx],esi
c0012b44:	58                   	pop    eax
c0012b45:	5a                   	pop    edx
c0012b46:	56                   	push   esi
c0012b47:	68 f0 a9 02 c0       	push   0xc002a9f0
c0012b4c:	e8 2c 04 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012b51:	c7 04 24 02 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa02
c0012b58:	e8 20 04 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	5b                   	pop    ebx
c0012b61:	5e                   	pop    esi
c0012b62:	5f                   	pop    edi
c0012b63:	e9 ee b2 00 00       	jmp    c001de56 <unlockScheduler()>

c0012b68 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b68:	55                   	push   ebp
c0012b69:	57                   	push   edi
c0012b6a:	56                   	push   esi
c0012b6b:	53                   	push   ebx
c0012b6c:	83 ec 14             	sub    esp,0x14
c0012b6f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0012b73:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0012b77:	57                   	push   edi
c0012b78:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012b7e:	68 a0 a7 02 c0       	push   0xc002a7a0
c0012b83:	e8 f5 03 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012b88:	5b                   	pop    ebx
c0012b89:	5d                   	pop    ebp
c0012b8a:	57                   	push   edi
c0012b8b:	56                   	push   esi
c0012b8c:	e8 57 f4 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012b91:	5a                   	pop    edx
c0012b92:	89 c3                	mov    ebx,eax
c0012b94:	59                   	pop    ecx
c0012b95:	ff 30                	push   DWORD PTR [eax]
c0012b97:	68 12 aa 02 c0       	push   0xc002aa12
c0012b9c:	e8 dc 03 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012ba1:	5d                   	pop    ebp
c0012ba2:	58                   	pop    eax
c0012ba3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ba5:	c1 e8 0b             	shr    eax,0xb
c0012ba8:	50                   	push   eax
c0012ba9:	68 23 aa 02 c0       	push   0xc002aa23
c0012bae:	e8 ca 03 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400
c0012bbc:	75 1a                	jne    c0012bd8 <VAS::tryLoadBackOffDisk(unsigned long)+0x70>
c0012bbe:	83 ec 0c             	sub    esp,0xc
c0012bc1:	68 58 aa 02 c0       	push   0xc002aa58
c0012bc6:	e8 b2 03 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012bcb:	83 c4 10             	add    esp,0x10
c0012bce:	31 c0                	xor    eax,eax
c0012bd0:	83 c4 0c             	add    esp,0xc
c0012bd3:	5b                   	pop    ebx
c0012bd4:	5e                   	pop    esi
c0012bd5:	5f                   	pop    edi
c0012bd6:	5d                   	pop    ebp
c0012bd7:	c3                   	ret    
c0012bd8:	83 ec 0c             	sub    esp,0xc
c0012bdb:	68 40 aa 02 c0       	push   0xc002aa40
c0012be0:	e8 98 03 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012be5:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012be7:	e8 f6 d2 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012bec:	c1 ed 0b             	shr    ebp,0xb
c0012bef:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bf1:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012bf7:	81 ca 01 08 00 00    	or     edx,0x801
c0012bfd:	52                   	push   edx
c0012bfe:	57                   	push   edi
c0012bff:	50                   	push   eax
c0012c00:	56                   	push   esi
c0012c01:	e8 68 f7 ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012c06:	83 c4 14             	add    esp,0x14
c0012c09:	55                   	push   ebp
c0012c0a:	e8 b7 f0 ff ff       	call   c0011cc6 <Virt::swapIDToSector(unsigned long)>
c0012c0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c12:	31 d2                	xor    edx,edx
c0012c14:	ff 35 0c d6 02 c0    	push   DWORD PTR ds:0xc002d60c
c0012c1a:	52                   	push   edx
c0012c1b:	50                   	push   eax
c0012c1c:	0f be 05 18 d6 02 c0 	movsx  eax,BYTE PTR ds:0xc002d618
c0012c23:	ff 34 85 7c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1484]
c0012c2a:	e8 6f 3b 00 00       	call   c001679e <LogicalDisk::read(unsigned long long, int, void*)>
c0012c2f:	83 c4 14             	add    esp,0x14
c0012c32:	55                   	push   ebp
c0012c33:	e8 70 f0 ff ff       	call   c0011ca8 <Virt::freeSwapfilePage(unsigned long)>
c0012c38:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c3b:	e8 86 f0 ff ff       	call   c0011cc6 <Virt::swapIDToSector(unsigned long)>
c0012c40:	5a                   	pop    edx
c0012c41:	59                   	pop    ecx
c0012c42:	50                   	push   eax
c0012c43:	68 cc a7 02 c0       	push   0xc002a7cc
c0012c48:	e8 30 03 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012c4d:	83 c4 10             	add    esp,0x10
c0012c50:	b0 01                	mov    al,0x1
c0012c52:	83 c4 0c             	add    esp,0xc
c0012c55:	5b                   	pop    ebx
c0012c56:	5e                   	pop    esi
c0012c57:	5f                   	pop    edi
c0012c58:	5d                   	pop    ebp
c0012c59:	c3                   	ret    

c0012c5a <VAS::scanForEviction(int, int)>:
c0012c5a:	55                   	push   ebp
c0012c5b:	57                   	push   edi
c0012c5c:	56                   	push   esi
c0012c5d:	53                   	push   ebx
c0012c5e:	83 ec 1c             	sub    esp,0x1c
c0012c61:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012c65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c69:	85 c9                	test   ecx,ecx
c0012c6b:	75 08                	jne    c0012c75 <VAS::scanForEviction(int, int)+0x1b>
c0012c6d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012c75:	83 ec 0c             	sub    esp,0xc
c0012c78:	bb 00 00 40 00       	mov    ebx,0x400000
c0012c7d:	68 ec a7 02 c0       	push   0xc002a7ec
c0012c82:	31 ff                	xor    edi,edi
c0012c84:	e8 f4 02 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012c89:	83 c4 10             	add    esp,0x10
c0012c8c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c94:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c9c:	eb 17                	jmp    c0012cb5 <VAS::scanForEviction(int, int)+0x5b>
c0012c9e:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012ca3:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012ca9:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012caf:	0f 84 88 00 00 00    	je     c0012d3d <VAS::scanForEviction(int, int)+0xe3>
c0012cb5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012cb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012cbc:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012cc0:	74 dc                	je     c0012c9e <VAS::scanForEviction(int, int)+0x44>
c0012cc2:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012cc8:	eb 0a                	jmp    c0012cd4 <VAS::scanForEviction(int, int)+0x7a>
c0012cca:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012cd0:	39 eb                	cmp    ebx,ebp
c0012cd2:	74 ca                	je     c0012c9e <VAS::scanForEviction(int, int)+0x44>
c0012cd4:	83 ec 08             	sub    esp,0x8
c0012cd7:	55                   	push   ebp
c0012cd8:	56                   	push   esi
c0012cd9:	e8 0a f3 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c0012cde:	83 c4 10             	add    esp,0x10
c0012ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ce3:	89 c2                	mov    edx,eax
c0012ce5:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012ceb:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012cf1:	75 d7                	jne    c0012cca <VAS::scanForEviction(int, int)+0x70>
c0012cf3:	a8 01                	test   al,0x1
c0012cf5:	74 4e                	je     c0012d45 <VAS::scanForEviction(int, int)+0xeb>
c0012cf7:	83 ec 08             	sub    esp,0x8
c0012cfa:	55                   	push   ebp
c0012cfb:	68 10 a8 02 c0       	push   0xc002a810
c0012d00:	e8 78 02 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012d05:	89 f8                	mov    eax,edi
c0012d07:	99                   	cdq    
c0012d08:	f7 7c 24 44          	idiv   DWORD PTR [esp+0x44]
c0012d0c:	83 c4 10             	add    esp,0x10
c0012d0f:	85 d2                	test   edx,edx
c0012d11:	74 03                	je     c0012d16 <VAS::scanForEviction(int, int)+0xbc>
c0012d13:	47                   	inc    edi
c0012d14:	eb b4                	jmp    c0012cca <VAS::scanForEviction(int, int)+0x70>
c0012d16:	83 ec 0c             	sub    esp,0xc
c0012d19:	68 71 aa 02 c0       	push   0xc002aa71
c0012d1e:	e8 5a 02 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012d23:	58                   	pop    eax
c0012d24:	5a                   	pop    edx
c0012d25:	55                   	push   ebp
c0012d26:	56                   	push   esi
c0012d27:	e8 46 fd ff ff       	call   c0012a72 <VAS::evict(unsigned long)>
c0012d2c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012d30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012d3b:	75 d6                	jne    c0012d13 <VAS::scanForEviction(int, int)+0xb9>
c0012d3d:	83 c4 1c             	add    esp,0x1c
c0012d40:	5b                   	pop    ebx
c0012d41:	5e                   	pop    esi
c0012d42:	5f                   	pop    edi
c0012d43:	5d                   	pop    ebp
c0012d44:	c3                   	ret    
c0012d45:	83 ec 08             	sub    esp,0x8
c0012d48:	55                   	push   ebp
c0012d49:	68 3c a8 02 c0       	push   0xc002a83c
c0012d4e:	e8 2a 02 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012d53:	83 c4 10             	add    esp,0x10
c0012d56:	e9 6f ff ff ff       	jmp    c0012cca <VAS::scanForEviction(int, int)+0x70>

c0012d5b <mapVASFirstTime>:
c0012d5b:	55                   	push   ebp
c0012d5c:	57                   	push   edi
c0012d5d:	56                   	push   esi
c0012d5e:	53                   	push   ebx
c0012d5f:	83 ec 0c             	sub    esp,0xc
c0012d62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d67:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d6a:	4a                   	dec    edx
c0012d6b:	0f 84 8e 00 00 00    	je     c0012dff <mapVASFirstTime+0xa4>
c0012d71:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d74:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d77:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d7c:	c1 e5 15             	shl    ebp,0x15
c0012d7f:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d84:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d8a:	29 eb                	sub    ebx,ebp
c0012d8c:	29 ee                	sub    esi,ebp
c0012d8e:	e8 4f d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d93:	83 ec 0c             	sub    esp,0xc
c0012d96:	68 03 04 00 00       	push   0x403
c0012d9b:	6a 01                	push   0x1
c0012d9d:	53                   	push   ebx
c0012d9e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012da4:	50                   	push   eax
c0012da5:	57                   	push   edi
c0012da6:	e8 b7 f8 ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dab:	83 c4 20             	add    esp,0x20
c0012dae:	39 f3                	cmp    ebx,esi
c0012db0:	75 dc                	jne    c0012d8e <mapVASFirstTime+0x33>
c0012db2:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012db7:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012dbc:	29 ee                	sub    esi,ebp
c0012dbe:	29 e8                	sub    eax,ebp
c0012dc0:	89 c5                	mov    ebp,eax
c0012dc2:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012dc6:	19 db                	sbb    ebx,ebx
c0012dc8:	e8 15 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012dcd:	83 e3 04             	and    ebx,0x4
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	81 c3 03 04 00 00    	add    ebx,0x403
c0012dd9:	53                   	push   ebx
c0012dda:	6a 01                	push   0x1
c0012ddc:	56                   	push   esi
c0012ddd:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012de3:	50                   	push   eax
c0012de4:	57                   	push   edi
c0012de5:	e8 78 f8 ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dea:	83 c4 20             	add    esp,0x20
c0012ded:	39 f5                	cmp    ebp,esi
c0012def:	75 d1                	jne    c0012dc2 <mapVASFirstTime+0x67>
c0012df1:	0f 20 d8             	mov    eax,cr3
c0012df4:	0f 22 d8             	mov    cr3,eax
c0012df7:	83 c4 0c             	add    esp,0xc
c0012dfa:	5b                   	pop    ebx
c0012dfb:	5e                   	pop    esi
c0012dfc:	5f                   	pop    edi
c0012dfd:	5d                   	pop    ebp
c0012dfe:	c3                   	ret    
c0012dff:	83 ec 0c             	sub    esp,0xc
c0012e02:	68 7c aa 02 c0       	push   0xc002aa7c
c0012e07:	e8 71 01 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012e0c:	83 c4 10             	add    esp,0x10
c0012e0f:	83 c4 0c             	add    esp,0xc
c0012e12:	5b                   	pop    ebx
c0012e13:	5e                   	pop    esi
c0012e14:	5f                   	pop    edi
c0012e15:	5d                   	pop    ebp
c0012e16:	c3                   	ret    

c0012e17 <__cxa_atexit>:
c0012e17:	31 c0                	xor    eax,eax
c0012e19:	c3                   	ret    

c0012e1a <__cxa_finalize>:
c0012e1a:	c3                   	ret    

c0012e1b <__stack_chk_fail>:
c0012e1b:	55                   	push   ebp
c0012e1c:	89 e5                	mov    ebp,esp
c0012e1e:	83 ec 14             	sub    esp,0x14
c0012e21:	68 95 aa 02 c0       	push   0xc002aa95
c0012e26:	e8 52 01 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012e2b:	58                   	pop    eax
c0012e2c:	5a                   	pop    edx
c0012e2d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e30:	68 e5 aa 02 c0       	push   0xc002aae5
c0012e35:	e8 43 01 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012e3a:	59                   	pop    ecx
c0012e3b:	58                   	pop    eax
c0012e3c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e3f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e42:	68 e5 aa 02 c0       	push   0xc002aae5
c0012e47:	e8 31 01 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012e4c:	5a                   	pop    edx
c0012e4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e50:	59                   	pop    ecx
c0012e51:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e53:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e56:	68 e5 aa 02 c0       	push   0xc002aae5
c0012e5b:	e8 1d 01 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012e60:	5a                   	pop    edx
c0012e61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e64:	59                   	pop    ecx
c0012e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e67:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e69:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e6c:	68 e5 aa 02 c0       	push   0xc002aae5
c0012e71:	e8 07 01 00 00       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0012e76:	c7 04 24 ed aa 02 c0 	mov    DWORD PTR [esp],0xc002aaed
c0012e7d:	e8 ad 77 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0012e82:	83 c4 10             	add    esp,0x10
c0012e85:	c9                   	leave  
c0012e86:	c3                   	ret    

c0012e87 <__cxa_pure_virtual>:
c0012e87:	83 ec 18             	sub    esp,0x18
c0012e8a:	68 05 ab 02 c0       	push   0xc002ab05
c0012e8f:	e8 9b 77 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0012e94:	83 c4 1c             	add    esp,0x1c
c0012e97:	c3                   	ret    

c0012e98 <operator new[](unsigned long)>:
c0012e98:	e9 a3 c9 ff ff       	jmp    c000f840 <malloc>

c0012e9d <operator delete(void*, unsigned long)>:
c0012e9d:	e9 be c9 ff ff       	jmp    c000f860 <rfree>

c0012ea2 <operator delete[](void*)>:
c0012ea2:	e9 b9 c9 ff ff       	jmp    c000f860 <rfree>

c0012ea7 <operator delete[](void*, unsigned long)>:
c0012ea7:	e9 b4 c9 ff ff       	jmp    c000f860 <rfree>

c0012eac <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012eac:	57                   	push   edi
c0012ead:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012eb2:	56                   	push   esi
c0012eb3:	be 18 ab 02 c0       	mov    esi,0xc002ab18
c0012eb8:	53                   	push   ebx
c0012eb9:	83 ec 40             	sub    esp,0x40
c0012ebc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012ec0:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012ec4:	fc                   	cld    
c0012ec5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ec7:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ecb:	83 f9 3e             	cmp    ecx,0x3e
c0012ece:	7e 05                	jle    c0012ed5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ed0:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012ed5:	89 df                	mov    edi,ebx
c0012ed7:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012edb:	eb 02                	jmp    c0012edf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012edd:	89 c7                	mov    edi,eax
c0012edf:	31 d2                	xor    edx,edx
c0012ee1:	46                   	inc    esi
c0012ee2:	89 f8                	mov    eax,edi
c0012ee4:	f7 f1                	div    ecx
c0012ee6:	39 cf                	cmp    edi,ecx
c0012ee8:	73 f3                	jae    c0012edd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012eea:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012eed:	eb 02                	jmp    c0012ef1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012eef:	89 c3                	mov    ebx,eax
c0012ef1:	31 d2                	xor    edx,edx
c0012ef3:	4e                   	dec    esi
c0012ef4:	89 d8                	mov    eax,ebx
c0012ef6:	f7 f1                	div    ecx
c0012ef8:	39 cb                	cmp    ebx,ecx
c0012efa:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012efe:	88 16                	mov    BYTE PTR [esi],dl
c0012f00:	73 ed                	jae    c0012eef <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f02:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f06:	83 c4 40             	add    esp,0x40
c0012f09:	5b                   	pop    ebx
c0012f0a:	5e                   	pop    esi
c0012f0b:	5f                   	pop    edi
c0012f0c:	c3                   	ret    

c0012f0d <Dbg::logc(char)>:
c0012f0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f11:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f16:	ec                   	in     al,dx
c0012f17:	a8 20                	test   al,0x20
c0012f19:	74 fb                	je     c0012f16 <Dbg::logc(char)+0x9>
c0012f1b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f20:	88 c8                	mov    al,cl
c0012f22:	ee                   	out    dx,al
c0012f23:	c3                   	ret    

c0012f24 <Dbg::logs(char*)>:
c0012f24:	53                   	push   ebx
c0012f25:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f29:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f2c:	84 c0                	test   al,al
c0012f2e:	74 0f                	je     c0012f3f <Dbg::logs(char*)+0x1b>
c0012f30:	50                   	push   eax
c0012f31:	43                   	inc    ebx
c0012f32:	e8 d6 ff ff ff       	call   c0012f0d <Dbg::logc(char)>
c0012f37:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f3a:	5a                   	pop    edx
c0012f3b:	84 c0                	test   al,al
c0012f3d:	75 f1                	jne    c0012f30 <Dbg::logs(char*)+0xc>
c0012f3f:	5b                   	pop    ebx
c0012f40:	c3                   	ret    

c0012f41 <Dbg::logWriteInt(unsigned int)>:
c0012f41:	83 ec 10             	sub    esp,0x10
c0012f44:	6a 0a                	push   0xa
c0012f46:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f4a:	50                   	push   eax
c0012f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4f:	e8 58 ff ff ff       	call   c0012eac <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f54:	50                   	push   eax
c0012f55:	e8 ca ff ff ff       	call   c0012f24 <Dbg::logs(char*)>
c0012f5a:	83 c4 20             	add    esp,0x20
c0012f5d:	c3                   	ret    

c0012f5e <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f5e:	83 ec 10             	sub    esp,0x10
c0012f61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f65:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f69:	50                   	push   eax
c0012f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6e:	e8 39 ff ff ff       	call   c0012eac <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f73:	50                   	push   eax
c0012f74:	e8 ab ff ff ff       	call   c0012f24 <Dbg::logs(char*)>
c0012f79:	83 c4 20             	add    esp,0x20
c0012f7c:	c3                   	ret    

c0012f7d <Dbg::kprintf(char const*, ...)>:
c0012f7d:	55                   	push   ebp
c0012f7e:	57                   	push   edi
c0012f7f:	56                   	push   esi
c0012f80:	53                   	push   ebx
c0012f81:	83 ec 0c             	sub    esp,0xc
c0012f84:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f88:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f90:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f93:	84 c0                	test   al,al
c0012f95:	74 4a                	je     c0012fe1 <Dbg::kprintf(char const*, ...)+0x64>
c0012f97:	31 db                	xor    ebx,ebx
c0012f99:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f9c:	3c 25                	cmp    al,0x25
c0012f9e:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012fa1:	0f 85 e4 00 00 00    	jne    c001308b <Dbg::kprintf(char const*, ...)+0x10e>
c0012fa7:	83 c3 02             	add    ebx,0x2
c0012faa:	8a 07                	mov    al,BYTE PTR [edi]
c0012fac:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012faf:	83 e8 25             	sub    eax,0x25
c0012fb2:	3c 53                	cmp    al,0x53
c0012fb4:	0f 87 ba 00 00 00    	ja     c0013074 <Dbg::kprintf(char const*, ...)+0xf7>
c0012fba:	0f b6 c0             	movzx  eax,al
c0012fbd:	ff 24 85 58 ab 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd54a8]
c0012fc4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fc8:	89 c8                	mov    eax,ecx
c0012fca:	83 c1 04             	add    ecx,0x4
c0012fcd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fd1:	ff 30                	push   DWORD PTR [eax]
c0012fd3:	e8 4c ff ff ff       	call   c0012f24 <Dbg::logs(char*)>
c0012fd8:	58                   	pop    eax
c0012fd9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012fdd:	84 c0                	test   al,al
c0012fdf:	75 b8                	jne    c0012f99 <Dbg::kprintf(char const*, ...)+0x1c>
c0012fe1:	83 c4 0c             	add    esp,0xc
c0012fe4:	5b                   	pop    ebx
c0012fe5:	5e                   	pop    esi
c0012fe6:	5f                   	pop    edi
c0012fe7:	5d                   	pop    ebp
c0012fe8:	c3                   	ret    
c0012fe9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fed:	89 d0                	mov    eax,edx
c0012fef:	83 c2 04             	add    edx,0x4
c0012ff2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ff6:	ff 30                	push   DWORD PTR [eax]
c0012ff8:	e8 44 ff ff ff       	call   c0012f41 <Dbg::logWriteInt(unsigned int)>
c0012ffd:	58                   	pop    eax
c0012ffe:	eb d9                	jmp    c0012fd9 <Dbg::kprintf(char const*, ...)+0x5c>
c0013000:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013004:	89 d0                	mov    eax,edx
c0013006:	83 c2 04             	add    edx,0x4
c0013009:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001300c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013010:	50                   	push   eax
c0013011:	e8 f7 fe ff ff       	call   c0012f0d <Dbg::logc(char)>
c0013016:	58                   	pop    eax
c0013017:	eb c0                	jmp    c0012fd9 <Dbg::kprintf(char const*, ...)+0x5c>
c0013019:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001301d:	89 c8                	mov    eax,ecx
c001301f:	83 c1 04             	add    ecx,0x4
c0013022:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013026:	ff 30                	push   DWORD PTR [eax]
c0013028:	e8 14 ff ff ff       	call   c0012f41 <Dbg::logWriteInt(unsigned int)>
c001302d:	5f                   	pop    edi
c001302e:	eb a9                	jmp    c0012fd9 <Dbg::kprintf(char const*, ...)+0x5c>
c0013030:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013034:	89 c8                	mov    eax,ecx
c0013036:	83 c1 04             	add    ecx,0x4
c0013039:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001303d:	6a 10                	push   0x10
c001303f:	ff 30                	push   DWORD PTR [eax]
c0013041:	e8 18 ff ff ff       	call   c0012f5e <Dbg::logWriteIntBase(unsigned int, int)>
c0013046:	59                   	pop    ecx
c0013047:	5f                   	pop    edi
c0013048:	eb 8f                	jmp    c0012fd9 <Dbg::kprintf(char const*, ...)+0x5c>
c001304a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001304e:	89 d0                	mov    eax,edx
c0013050:	83 c2 08             	add    edx,0x8
c0013053:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013057:	6a 10                	push   0x10
c0013059:	ff 30                	push   DWORD PTR [eax]
c001305b:	e8 fe fe ff ff       	call   c0012f5e <Dbg::logWriteIntBase(unsigned int, int)>
c0013060:	58                   	pop    eax
c0013061:	5a                   	pop    edx
c0013062:	e9 72 ff ff ff       	jmp    c0012fd9 <Dbg::kprintf(char const*, ...)+0x5c>
c0013067:	6a 25                	push   0x25
c0013069:	e8 9f fe ff ff       	call   c0012f0d <Dbg::logc(char)>
c001306e:	58                   	pop    eax
c001306f:	e9 65 ff ff ff       	jmp    c0012fd9 <Dbg::kprintf(char const*, ...)+0x5c>
c0013074:	6a 25                	push   0x25
c0013076:	e8 92 fe ff ff       	call   c0012f0d <Dbg::logc(char)>
c001307b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001307e:	50                   	push   eax
c001307f:	e8 89 fe ff ff       	call   c0012f0d <Dbg::logc(char)>
c0013084:	5a                   	pop    edx
c0013085:	59                   	pop    ecx
c0013086:	e9 4e ff ff ff       	jmp    c0012fd9 <Dbg::kprintf(char const*, ...)+0x5c>
c001308b:	50                   	push   eax
c001308c:	89 eb                	mov    ebx,ebp
c001308e:	e8 7a fe ff ff       	call   c0012f0d <Dbg::logc(char)>
c0013093:	89 fd                	mov    ebp,edi
c0013095:	58                   	pop    eax
c0013096:	e9 3e ff ff ff       	jmp    c0012fd9 <Dbg::kprintf(char const*, ...)+0x5c>
c001309b:	90                   	nop

c001309c <File::read(unsigned long long, void*, int*)>:
c001309c:	53                   	push   ebx
c001309d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130ac:	3c 19                	cmp    al,0x19
c00130ae:	77 35                	ja     c00130e5 <File::read(unsigned long long, void*, int*)+0x49>
c00130b0:	8b 04 85 80 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1380]
c00130b7:	85 c0                	test   eax,eax
c00130b9:	74 2a                	je     c00130e5 <File::read(unsigned long long, void*, int*)+0x49>
c00130bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130c1:	85 c0                	test   eax,eax
c00130c3:	74 20                	je     c00130e5 <File::read(unsigned long long, void*, int*)+0x49>
c00130c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130c9:	74 21                	je     c00130ec <File::read(unsigned long long, void*, int*)+0x50>
c00130cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130df:	5b                   	pop    ebx
c00130e0:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130e3:	ff e0                	jmp    eax
c00130e5:	b8 0b 00 00 00       	mov    eax,0xb
c00130ea:	eb 05                	jmp    c00130f1 <File::read(unsigned long long, void*, int*)+0x55>
c00130ec:	b8 05 00 00 00       	mov    eax,0x5
c00130f1:	5b                   	pop    ebx
c00130f2:	c3                   	ret    
c00130f3:	90                   	nop

c00130f4 <File::write(unsigned long long, void*, int*)>:
c00130f4:	53                   	push   ebx
c00130f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013104:	3c 19                	cmp    al,0x19
c0013106:	77 35                	ja     c001313d <File::write(unsigned long long, void*, int*)+0x49>
c0013108:	8b 04 85 80 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1380]
c001310f:	85 c0                	test   eax,eax
c0013111:	74 2a                	je     c001313d <File::write(unsigned long long, void*, int*)+0x49>
c0013113:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013119:	85 c0                	test   eax,eax
c001311b:	74 20                	je     c001313d <File::write(unsigned long long, void*, int*)+0x49>
c001311d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013121:	74 21                	je     c0013144 <File::write(unsigned long long, void*, int*)+0x50>
c0013123:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013125:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013129:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001312f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013133:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013137:	5b                   	pop    ebx
c0013138:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001313b:	ff e0                	jmp    eax
c001313d:	b8 0b 00 00 00       	mov    eax,0xb
c0013142:	eb 05                	jmp    c0013149 <File::write(unsigned long long, void*, int*)+0x55>
c0013144:	b8 05 00 00 00       	mov    eax,0x5
c0013149:	5b                   	pop    ebx
c001314a:	c3                   	ret    
c001314b:	90                   	nop

c001314c <Directory::read(unsigned long long, void*, int*)>:
c001314c:	53                   	push   ebx
c001314d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013151:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013155:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001315c:	3c 19                	cmp    al,0x19
c001315e:	77 35                	ja     c0013195 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013160:	8b 04 85 80 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1380]
c0013167:	85 c0                	test   eax,eax
c0013169:	74 2a                	je     c0013195 <Directory::read(unsigned long long, void*, int*)+0x49>
c001316b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013171:	85 c0                	test   eax,eax
c0013173:	74 20                	je     c0013195 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013175:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013179:	74 21                	je     c001319c <Directory::read(unsigned long long, void*, int*)+0x50>
c001317b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001317d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013181:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013187:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001318b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001318f:	5b                   	pop    ebx
c0013190:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013193:	ff e0                	jmp    eax
c0013195:	b8 0b 00 00 00       	mov    eax,0xb
c001319a:	eb 05                	jmp    c00131a1 <Directory::read(unsigned long long, void*, int*)+0x55>
c001319c:	b8 05 00 00 00       	mov    eax,0x5
c00131a1:	5b                   	pop    ebx
c00131a2:	c3                   	ret    
c00131a3:	90                   	nop

c00131a4 <Directory::write(unsigned long long, void*, int*)>:
c00131a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131a8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00131af:	b8 0b 00 00 00       	mov    eax,0xb
c00131b4:	80 fa 19             	cmp    dl,0x19
c00131b7:	77 18                	ja     c00131d1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131b9:	8b 14 95 80 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1380]
c00131c0:	85 d2                	test   edx,edx
c00131c2:	74 0d                	je     c00131d1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131c4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00131cb:	19 c0                	sbb    eax,eax
c00131cd:	83 e0 0a             	and    eax,0xa
c00131d0:	40                   	inc    eax
c00131d1:	c3                   	ret    

c00131d2 <File::isAtty()>:
c00131d2:	31 c0                	xor    eax,eax
c00131d4:	c3                   	ret    
c00131d5:	90                   	nop

c00131d6 <Directory::isAtty()>:
c00131d6:	31 c0                	xor    eax,eax
c00131d8:	c3                   	ret    
c00131d9:	90                   	nop

c00131da <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131da:	b8 0a 00 00 00       	mov    eax,0xa
c00131df:	c3                   	ret    

c00131e0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131e0:	b8 0a 00 00 00       	mov    eax,0xa
c00131e5:	c3                   	ret    

c00131e6 <File::~File()>:
c00131e6:	83 ec 0c             	sub    esp,0xc
c00131e9:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c00131ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f2:	89 10                	mov    DWORD PTR [eax],edx
c00131f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f8:	83 ec 0c             	sub    esp,0xc
c00131fb:	50                   	push   eax
c00131fc:	e8 35 e7 ff ff       	call   c0011936 <UnixFile::~UnixFile()>
c0013201:	83 c4 10             	add    esp,0x10
c0013204:	90                   	nop
c0013205:	83 c4 0c             	add    esp,0xc
c0013208:	c3                   	ret    
c0013209:	90                   	nop

c001320a <File::~File()>:
c001320a:	83 ec 0c             	sub    esp,0xc
c001320d:	83 ec 0c             	sub    esp,0xc
c0013210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013214:	e8 cd ff ff ff       	call   c00131e6 <File::~File()>
c0013219:	83 c4 10             	add    esp,0x10
c001321c:	83 ec 08             	sub    esp,0x8
c001321f:	68 14 01 00 00       	push   0x114
c0013224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013228:	e8 70 fc ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c001322d:	83 c4 10             	add    esp,0x10
c0013230:	83 c4 0c             	add    esp,0xc
c0013233:	c3                   	ret    

c0013234 <Directory::~Directory()>:
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	ba 30 ad 02 c0       	mov    edx,0xc002ad30
c001323c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013240:	89 10                	mov    DWORD PTR [eax],edx
c0013242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013246:	83 ec 0c             	sub    esp,0xc
c0013249:	50                   	push   eax
c001324a:	e8 e7 e6 ff ff       	call   c0011936 <UnixFile::~UnixFile()>
c001324f:	83 c4 10             	add    esp,0x10
c0013252:	90                   	nop
c0013253:	83 c4 0c             	add    esp,0xc
c0013256:	c3                   	ret    
c0013257:	90                   	nop

c0013258 <Directory::~Directory()>:
c0013258:	83 ec 0c             	sub    esp,0xc
c001325b:	83 ec 0c             	sub    esp,0xc
c001325e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013262:	e8 cd ff ff ff       	call   c0013234 <Directory::~Directory()>
c0013267:	83 c4 10             	add    esp,0x10
c001326a:	83 ec 08             	sub    esp,0x8
c001326d:	68 14 01 00 00       	push   0x114
c0013272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013276:	e8 22 fc ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c001327b:	83 c4 10             	add    esp,0x10
c001327e:	83 c4 0c             	add    esp,0xc
c0013281:	c3                   	ret    

c0013282 <Filesystem::Filesystem()>:
c0013282:	ba b0 ac 02 c0       	mov    edx,0xc002acb0
c0013287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001328b:	89 10                	mov    DWORD PTR [eax],edx
c001328d:	8b 15 ec e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7ec
c0013293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013297:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001329a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001329e:	a3 ec e7 02 c0       	mov    ds:0xc002e7ec,eax
c00132a3:	90                   	nop
c00132a4:	c3                   	ret    
c00132a5:	90                   	nop

c00132a6 <Filesystem::~Filesystem()>:
c00132a6:	ba b0 ac 02 c0       	mov    edx,0xc002acb0
c00132ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132af:	89 10                	mov    DWORD PTR [eax],edx
c00132b1:	90                   	nop
c00132b2:	c3                   	ret    
c00132b3:	90                   	nop

c00132b4 <Filesystem::~Filesystem()>:
c00132b4:	83 ec 0c             	sub    esp,0xc
c00132b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132bb:	e8 e6 ff ff ff       	call   c00132a6 <Filesystem::~Filesystem()>
c00132c0:	83 c4 04             	add    esp,0x4
c00132c3:	83 ec 08             	sub    esp,0x8
c00132c6:	6a 08                	push   0x8
c00132c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132cc:	e8 cc fb ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00132d1:	83 c4 10             	add    esp,0x10
c00132d4:	83 c4 0c             	add    esp,0xc
c00132d7:	c3                   	ret    

c00132d8 <Fs::getcwd(Process*, char*, int)>:
c00132d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132dc:	31 c0                	xor    eax,eax
c00132de:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132e1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132e5:	7d 15                	jge    c00132fc <Fs::getcwd(Process*, char*, int)+0x24>
c00132e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132eb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132f2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132f5:	84 c9                	test   cl,cl
c00132f7:	74 06                	je     c00132ff <Fs::getcwd(Process*, char*, int)+0x27>
c00132f9:	40                   	inc    eax
c00132fa:	eb e2                	jmp    c00132de <Fs::getcwd(Process*, char*, int)+0x6>
c00132fc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132ff:	31 c0                	xor    eax,eax
c0013301:	c3                   	ret    

c0013302 <Fs::initVFS()>:
c0013302:	83 ec 18             	sub    esp,0x18
c0013305:	6a 08                	push   0x8
c0013307:	e8 34 c5 ff ff       	call   c000f840 <malloc>
c001330c:	89 04 24             	mov    DWORD PTR [esp],eax
c001330f:	e8 b4 dc 00 00       	call   c0020fc8 <FAT::FAT()>
c0013314:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001331b:	e8 20 c5 ff ff       	call   c000f840 <malloc>
c0013320:	89 04 24             	mov    DWORD PTR [esp],eax
c0013323:	e8 f8 ee 00 00       	call   c0022220 <ISO9660::ISO9660()>
c0013328:	83 c4 1c             	add    esp,0x1c
c001332b:	c3                   	ret    

c001332c <Fs::standardiseFiles(char*, char const*, char const*)>:
c001332c:	55                   	push   ebp
c001332d:	57                   	push   edi
c001332e:	56                   	push   esi
c001332f:	53                   	push   ebx
c0013330:	81 ec 10 04 00 00    	sub    esp,0x410
c0013336:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001333d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013344:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001334b:	68 00 04 00 00       	push   0x400
c0013350:	6a 00                	push   0x0
c0013352:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013356:	56                   	push   esi
c0013357:	e8 1c d4 fe ff       	call   c0000778 <memset>
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013363:	75 0b                	jne    c0013370 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013365:	50                   	push   eax
c0013366:	50                   	push   eax
c0013367:	57                   	push   edi
c0013368:	56                   	push   esi
c0013369:	e8 c6 d4 fe ff       	call   c0000834 <strcpy>
c001336e:	eb 41                	jmp    c00133b1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013370:	8a 07                	mov    al,BYTE PTR [edi]
c0013372:	3c 5c                	cmp    al,0x5c
c0013374:	74 04                	je     c001337a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013376:	3c 2f                	cmp    al,0x2f
c0013378:	75 18                	jne    c0013392 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001337a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001337d:	3c 60                	cmp    al,0x60
c001337f:	7e 03                	jle    c0013384 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013381:	83 e8 20             	sub    eax,0x20
c0013384:	88 04 24             	mov    BYTE PTR [esp],al
c0013387:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001338e:	50                   	push   eax
c001338f:	50                   	push   eax
c0013390:	eb 18                	jmp    c00133aa <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013392:	50                   	push   eax
c0013393:	50                   	push   eax
c0013394:	55                   	push   ebp
c0013395:	56                   	push   esi
c0013396:	e8 99 d4 fe ff       	call   c0000834 <strcpy>
c001339b:	5a                   	pop    edx
c001339c:	59                   	pop    ecx
c001339d:	68 4d c4 02 c0       	push   0xc002c44d
c00133a2:	56                   	push   esi
c00133a3:	e8 cc d5 fe ff       	call   c0000974 <strcat>
c00133a8:	5d                   	pop    ebp
c00133a9:	58                   	pop    eax
c00133aa:	57                   	push   edi
c00133ab:	56                   	push   esi
c00133ac:	e8 c3 d5 fe ff       	call   c0000974 <strcat>
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	8a 04 24             	mov    al,BYTE PTR [esp]
c00133b7:	3c 60                	cmp    al,0x60
c00133b9:	7e 03                	jle    c00133be <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00133bb:	83 e8 20             	sub    eax,0x20
c00133be:	88 04 24             	mov    BYTE PTR [esp],al
c00133c1:	88 03                	mov    BYTE PTR [ebx],al
c00133c3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133ca:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00133d0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133d4:	bf 03 00 00 00       	mov    edi,0x3
c00133d9:	b8 03 00 00 00       	mov    eax,0x3
c00133de:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133e1:	84 d2                	test   dl,dl
c00133e3:	0f 84 91 00 00 00    	je     c001347a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133e9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133ec:	80 fa 5c             	cmp    dl,0x5c
c00133ef:	74 05                	je     c00133f6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133f1:	80 fa 2f             	cmp    dl,0x2f
c00133f4:	75 12                	jne    c0013408 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133f6:	89 c5                	mov    ebp,eax
c00133f8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133fd:	74 09                	je     c0013408 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133ff:	40                   	inc    eax
c0013400:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013404:	89 cf                	mov    edi,ecx
c0013406:	eb d6                	jmp    c00133de <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013408:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001340d:	75 5b                	jne    c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001340f:	80 fa 2e             	cmp    dl,0x2e
c0013412:	75 56                	jne    c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013414:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013418:	74 19                	je     c0013433 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001341a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001341f:	74 53                	je     c0013474 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013421:	89 f9                	mov    ecx,edi
c0013423:	41                   	inc    ecx
c0013424:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013427:	80 fa 2f             	cmp    dl,0x2f
c001342a:	74 f7                	je     c0013423 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001342c:	80 fa 5c             	cmp    dl,0x5c
c001342f:	74 f2                	je     c0013423 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013431:	eb d1                	jmp    c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013433:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013438:	74 3a                	je     c0013474 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001343a:	83 f8 03             	cmp    eax,0x3
c001343d:	74 c5                	je     c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001343f:	41                   	inc    ecx
c0013440:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013443:	80 fa 2f             	cmp    dl,0x2f
c0013446:	74 f7                	je     c001343f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013448:	80 fa 5c             	cmp    dl,0x5c
c001344b:	74 f2                	je     c001343f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001344d:	48                   	dec    eax
c001344e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013452:	75 06                	jne    c001345a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013454:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013458:	eb f3                	jmp    c001344d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001345a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001345e:	74 07                	je     c0013467 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013460:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013464:	48                   	dec    eax
c0013465:	eb f3                	jmp    c001345a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013467:	40                   	inc    eax
c0013468:	eb 9a                	jmp    c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001346a:	80 fa 2f             	cmp    dl,0x2f
c001346d:	74 95                	je     c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001346f:	80 fa 5c             	cmp    dl,0x5c
c0013472:	74 90                	je     c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013474:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013477:	40                   	inc    eax
c0013478:	eb 8a                	jmp    c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001347a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001347e:	83 ec 0c             	sub    esp,0xc
c0013481:	53                   	push   ebx
c0013482:	e8 0d d3 fe ff       	call   c0000794 <strlen>
c0013487:	83 c4 10             	add    esp,0x10
c001348a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001348f:	75 26                	jne    c00134b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013491:	83 ec 0c             	sub    esp,0xc
c0013494:	53                   	push   ebx
c0013495:	e8 fa d2 fe ff       	call   c0000794 <strlen>
c001349a:	83 c4 10             	add    esp,0x10
c001349d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00134a2:	74 26                	je     c00134ca <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00134a4:	83 ec 0c             	sub    esp,0xc
c00134a7:	53                   	push   ebx
c00134a8:	e8 e7 d2 fe ff       	call   c0000794 <strlen>
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00134b5:	eb c7                	jmp    c001347e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00134b7:	83 ec 0c             	sub    esp,0xc
c00134ba:	53                   	push   ebx
c00134bb:	e8 d4 d2 fe ff       	call   c0000794 <strlen>
c00134c0:	83 c4 10             	add    esp,0x10
c00134c3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134c8:	74 c7                	je     c0013491 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00134ca:	81 c4 0c 04 00 00    	add    esp,0x40c
c00134d0:	5b                   	pop    ebx
c00134d1:	5e                   	pop    esi
c00134d2:	5f                   	pop    edi
c00134d3:	5d                   	pop    ebp
c00134d4:	c3                   	ret    
c00134d5:	90                   	nop

c00134d6 <File::File(char const*, Process*)>:
c00134d6:	83 ec 0c             	sub    esp,0xc
c00134d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134dd:	83 ec 08             	sub    esp,0x8
c00134e0:	6a 00                	push   0x0
c00134e2:	50                   	push   eax
c00134e3:	e8 6c e2 ff ff       	call   c0011754 <UnixFile::UnixFile(int)>
c00134e8:	83 c4 10             	add    esp,0x10
c00134eb:	ba 14 ad 02 c0       	mov    edx,0xc002ad14
c00134f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f4:	89 10                	mov    DWORD PTR [eax],edx
c00134f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134fa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013504:	83 c0 0d             	add    eax,0xd
c0013507:	83 ec 04             	sub    esp,0x4
c001350a:	52                   	push   edx
c001350b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001350f:	50                   	push   eax
c0013510:	e8 17 fe ff ff       	call   c001332c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013515:	83 c4 10             	add    esp,0x10
c0013518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001351c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001351f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013526:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001352c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013530:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013534:	90                   	nop
c0013535:	83 c4 0c             	add    esp,0xc
c0013538:	c3                   	ret    
c0013539:	90                   	nop

c001353a <File::open(FileOpenMode)>:
c001353a:	53                   	push   ebx
c001353b:	b8 0b 00 00 00       	mov    eax,0xb
c0013540:	83 ec 08             	sub    esp,0x8
c0013543:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013547:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001354e:	80 fa 19             	cmp    dl,0x19
c0013551:	77 40                	ja     c0013593 <File::open(FileOpenMode)+0x59>
c0013553:	8b 14 95 80 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1380]
c001355a:	85 d2                	test   edx,edx
c001355c:	74 35                	je     c0013593 <File::open(FileOpenMode)+0x59>
c001355e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013564:	85 d2                	test   edx,edx
c0013566:	74 2b                	je     c0013593 <File::open(FileOpenMode)+0x59>
c0013568:	b8 06 00 00 00       	mov    eax,0x6
c001356d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013571:	75 20                	jne    c0013593 <File::open(FileOpenMode)+0x59>
c0013573:	8b 02                	mov    eax,DWORD PTR [edx]
c0013575:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001357b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001357f:	51                   	push   ecx
c0013580:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013583:	51                   	push   ecx
c0013584:	52                   	push   edx
c0013585:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013588:	83 c4 10             	add    esp,0x10
c001358b:	85 c0                	test   eax,eax
c001358d:	75 04                	jne    c0013593 <File::open(FileOpenMode)+0x59>
c001358f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013593:	83 c4 08             	add    esp,0x8
c0013596:	5b                   	pop    ebx
c0013597:	c3                   	ret    

c0013598 <File::close()>:
c0013598:	53                   	push   ebx
c0013599:	b8 0b 00 00 00       	mov    eax,0xb
c001359e:	83 ec 08             	sub    esp,0x8
c00135a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135a5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135ac:	80 fa 19             	cmp    dl,0x19
c00135af:	77 41                	ja     c00135f2 <File::close()+0x5a>
c00135b1:	8b 1c 95 80 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1380]
c00135b8:	85 db                	test   ebx,ebx
c00135ba:	74 36                	je     c00135f2 <File::close()+0x5a>
c00135bc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135c3:	74 2d                	je     c00135f2 <File::close()+0x5a>
c00135c5:	b8 05 00 00 00       	mov    eax,0x5
c00135ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135ce:	74 22                	je     c00135f2 <File::close()+0x5a>
c00135d0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135d4:	8b 04 95 80 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1380]
c00135db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135e1:	53                   	push   ebx
c00135e2:	53                   	push   ebx
c00135e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00135e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135eb:	50                   	push   eax
c00135ec:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135ef:	83 c4 10             	add    esp,0x10
c00135f2:	83 c4 08             	add    esp,0x8
c00135f5:	5b                   	pop    ebx
c00135f6:	c3                   	ret    
c00135f7:	90                   	nop

c00135f8 <File::seek(unsigned long long)>:
c00135f8:	56                   	push   esi
c00135f9:	53                   	push   ebx
c00135fa:	b8 0b 00 00 00       	mov    eax,0xb
c00135ff:	51                   	push   ecx
c0013600:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013604:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013608:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001360f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013613:	80 fa 19             	cmp    dl,0x19
c0013616:	77 31                	ja     c0013649 <File::seek(unsigned long long)+0x51>
c0013618:	8b 14 95 80 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1380]
c001361f:	85 d2                	test   edx,edx
c0013621:	74 26                	je     c0013649 <File::seek(unsigned long long)+0x51>
c0013623:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013629:	85 d2                	test   edx,edx
c001362b:	74 1c                	je     c0013649 <File::seek(unsigned long long)+0x51>
c001362d:	b8 05 00 00 00       	mov    eax,0x5
c0013632:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013636:	74 11                	je     c0013649 <File::seek(unsigned long long)+0x51>
c0013638:	8b 02                	mov    eax,DWORD PTR [edx]
c001363a:	53                   	push   ebx
c001363b:	51                   	push   ecx
c001363c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013642:	52                   	push   edx
c0013643:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013646:	83 c4 10             	add    esp,0x10
c0013649:	5a                   	pop    edx
c001364a:	5b                   	pop    ebx
c001364b:	5e                   	pop    esi
c001364c:	c3                   	ret    
c001364d:	90                   	nop

c001364e <File::tell(unsigned long long*)>:
c001364e:	83 ec 0c             	sub    esp,0xc
c0013651:	b8 0b 00 00 00       	mov    eax,0xb
c0013656:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001365a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013661:	80 fa 19             	cmp    dl,0x19
c0013664:	77 34                	ja     c001369a <File::tell(unsigned long long*)+0x4c>
c0013666:	8b 14 95 80 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1380]
c001366d:	85 d2                	test   edx,edx
c001366f:	74 29                	je     c001369a <File::tell(unsigned long long*)+0x4c>
c0013671:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013677:	85 d2                	test   edx,edx
c0013679:	74 1f                	je     c001369a <File::tell(unsigned long long*)+0x4c>
c001367b:	b8 05 00 00 00       	mov    eax,0x5
c0013680:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013684:	74 14                	je     c001369a <File::tell(unsigned long long*)+0x4c>
c0013686:	50                   	push   eax
c0013687:	8b 02                	mov    eax,DWORD PTR [edx]
c0013689:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001368d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013693:	52                   	push   edx
c0013694:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013697:	83 c4 10             	add    esp,0x10
c001369a:	83 c4 0c             	add    esp,0xc
c001369d:	c3                   	ret    

c001369e <File::rewind()>:
c001369e:	83 ec 10             	sub    esp,0x10
c00136a1:	6a 00                	push   0x0
c00136a3:	6a 00                	push   0x0
c00136a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136a9:	e8 4a ff ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c00136ae:	83 c4 1c             	add    esp,0x1c
c00136b1:	c3                   	ret    

c00136b2 <File::unlink()>:
c00136b2:	83 ec 0c             	sub    esp,0xc
c00136b5:	b8 0b 00 00 00       	mov    eax,0xb
c00136ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136c5:	80 f9 19             	cmp    cl,0x19
c00136c8:	77 2f                	ja     c00136f9 <File::unlink()+0x47>
c00136ca:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c00136d1:	85 c9                	test   ecx,ecx
c00136d3:	74 24                	je     c00136f9 <File::unlink()+0x47>
c00136d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136db:	85 c9                	test   ecx,ecx
c00136dd:	74 1a                	je     c00136f9 <File::unlink()+0x47>
c00136df:	b8 06 00 00 00       	mov    eax,0x6
c00136e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136e8:	75 0f                	jne    c00136f9 <File::unlink()+0x47>
c00136ea:	83 c2 0d             	add    edx,0xd
c00136ed:	50                   	push   eax
c00136ee:	50                   	push   eax
c00136ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f1:	52                   	push   edx
c00136f2:	51                   	push   ecx
c00136f3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	83 c4 0c             	add    esp,0xc
c00136fc:	c3                   	ret    
c00136fd:	90                   	nop

c00136fe <File::rename(char const*)>:
c00136fe:	83 ec 0c             	sub    esp,0xc
c0013701:	b8 0b 00 00 00       	mov    eax,0xb
c0013706:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001370a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013711:	80 f9 19             	cmp    cl,0x19
c0013714:	77 32                	ja     c0013748 <File::rename(char const*)+0x4a>
c0013716:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c001371d:	85 c9                	test   ecx,ecx
c001371f:	74 27                	je     c0013748 <File::rename(char const*)+0x4a>
c0013721:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013727:	85 c9                	test   ecx,ecx
c0013729:	74 1d                	je     c0013748 <File::rename(char const*)+0x4a>
c001372b:	b8 06 00 00 00       	mov    eax,0x6
c0013730:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013734:	75 12                	jne    c0013748 <File::rename(char const*)+0x4a>
c0013736:	83 c2 0d             	add    edx,0xd
c0013739:	50                   	push   eax
c001373a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001373c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013740:	52                   	push   edx
c0013741:	51                   	push   ecx
c0013742:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013745:	83 c4 10             	add    esp,0x10
c0013748:	83 c4 0c             	add    esp,0xc
c001374b:	c3                   	ret    

c001374c <File::chfatattr(unsigned char, unsigned char)>:
c001374c:	57                   	push   edi
c001374d:	b8 0b 00 00 00       	mov    eax,0xb
c0013752:	56                   	push   esi
c0013753:	53                   	push   ebx
c0013754:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013758:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001375c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013763:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013767:	80 f9 19             	cmp    cl,0x19
c001376a:	77 37                	ja     c00137a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001376c:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c0013773:	85 c9                	test   ecx,ecx
c0013775:	74 2c                	je     c00137a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013777:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001377d:	85 c9                	test   ecx,ecx
c001377f:	74 22                	je     c00137a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013781:	b8 06 00 00 00       	mov    eax,0x6
c0013786:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001378a:	75 17                	jne    c00137a3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001378c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001378e:	89 f0                	mov    eax,esi
c0013790:	83 c2 0d             	add    edx,0xd
c0013793:	0f b6 f0             	movzx  esi,al
c0013796:	0f b6 db             	movzx  ebx,bl
c0013799:	56                   	push   esi
c001379a:	53                   	push   ebx
c001379b:	52                   	push   edx
c001379c:	51                   	push   ecx
c001379d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00137a0:	83 c4 10             	add    esp,0x10
c00137a3:	5b                   	pop    ebx
c00137a4:	5e                   	pop    esi
c00137a5:	5f                   	pop    edi
c00137a6:	c3                   	ret    
c00137a7:	90                   	nop

c00137a8 <File::exists()>:
c00137a8:	83 ec 0c             	sub    esp,0xc
c00137ab:	31 c0                	xor    eax,eax
c00137ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137b1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137b8:	80 f9 19             	cmp    cl,0x19
c00137bb:	77 24                	ja     c00137e1 <File::exists()+0x39>
c00137bd:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c00137c4:	85 c9                	test   ecx,ecx
c00137c6:	74 19                	je     c00137e1 <File::exists()+0x39>
c00137c8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137ce:	85 c9                	test   ecx,ecx
c00137d0:	74 0f                	je     c00137e1 <File::exists()+0x39>
c00137d2:	83 c2 0d             	add    edx,0xd
c00137d5:	50                   	push   eax
c00137d6:	50                   	push   eax
c00137d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137d9:	52                   	push   edx
c00137da:	51                   	push   ecx
c00137db:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137de:	83 c4 10             	add    esp,0x10
c00137e1:	83 c4 0c             	add    esp,0xc
c00137e4:	c3                   	ret    
c00137e5:	90                   	nop

c00137e6 <File::stat(unsigned long long*, bool*)>:
c00137e6:	56                   	push   esi
c00137e7:	53                   	push   ebx
c00137e8:	50                   	push   eax
c00137e9:	b8 0b 00 00 00       	mov    eax,0xb
c00137ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013801:	80 f9 19             	cmp    cl,0x19
c0013804:	77 3d                	ja     c0013843 <File::stat(unsigned long long*, bool*)+0x5d>
c0013806:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c001380d:	85 c9                	test   ecx,ecx
c001380f:	74 32                	je     c0013843 <File::stat(unsigned long long*, bool*)+0x5d>
c0013811:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013817:	85 c9                	test   ecx,ecx
c0013819:	74 28                	je     c0013843 <File::stat(unsigned long long*, bool*)+0x5d>
c001381b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001381d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013821:	74 13                	je     c0013836 <File::stat(unsigned long long*, bool*)+0x50>
c0013823:	83 ec 04             	sub    esp,0x4
c0013826:	56                   	push   esi
c0013827:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001382d:	51                   	push   ecx
c001382e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013831:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013834:	eb 0a                	jmp    c0013840 <File::stat(unsigned long long*, bool*)+0x5a>
c0013836:	53                   	push   ebx
c0013837:	83 c2 0d             	add    edx,0xd
c001383a:	56                   	push   esi
c001383b:	52                   	push   edx
c001383c:	51                   	push   ecx
c001383d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	5a                   	pop    edx
c0013844:	5b                   	pop    ebx
c0013845:	5e                   	pop    esi
c0013846:	c3                   	ret    

c0013847 <Fs::setcwd(Process*, char*)>:
c0013847:	55                   	push   ebp
c0013848:	57                   	push   edi
c0013849:	56                   	push   esi
c001384a:	53                   	push   ebx
c001384b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013851:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013858:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001385e:	57                   	push   edi
c001385f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013866:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001386a:	56                   	push   esi
c001386b:	e8 bc fa ff ff       	call   c001332c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013870:	89 34 24             	mov    DWORD PTR [esp],esi
c0013873:	e8 1c cf fe ff       	call   c0000794 <strlen>
c0013878:	83 c4 10             	add    esp,0x10
c001387b:	83 f8 02             	cmp    eax,0x2
c001387e:	77 17                	ja     c0013897 <Fs::setcwd(Process*, char*)+0x50>
c0013880:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013885:	83 e8 41             	sub    eax,0x41
c0013888:	83 f8 19             	cmp    eax,0x19
c001388b:	76 24                	jbe    c00138b1 <Fs::setcwd(Process*, char*)+0x6a>
c001388d:	b8 03 00 00 00       	mov    eax,0x3
c0013892:	e9 e0 00 00 00       	jmp    c0013977 <Fs::setcwd(Process*, char*)+0x130>
c0013897:	83 ec 0c             	sub    esp,0xc
c001389a:	56                   	push   esi
c001389b:	e8 f4 ce fe ff       	call   c0000794 <strlen>
c00138a0:	83 c4 10             	add    esp,0x10
c00138a3:	83 f8 03             	cmp    eax,0x3
c00138a6:	75 34                	jne    c00138dc <Fs::setcwd(Process*, char*)+0x95>
c00138a8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00138ad:	75 2d                	jne    c00138dc <Fs::setcwd(Process*, char*)+0x95>
c00138af:	eb cf                	jmp    c0013880 <Fs::setcwd(Process*, char*)+0x39>
c00138b1:	8b 14 85 80 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1380]
c00138b8:	b8 05 00 00 00       	mov    eax,0x5
c00138bd:	85 d2                	test   edx,edx
c00138bf:	0f 84 b2 00 00 00    	je     c0013977 <Fs::setcwd(Process*, char*)+0x130>
c00138c5:	b8 06 00 00 00       	mov    eax,0x6
c00138ca:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00138d1:	0f 85 92 00 00 00    	jne    c0013969 <Fs::setcwd(Process*, char*)+0x122>
c00138d7:	e9 9b 00 00 00       	jmp    c0013977 <Fs::setcwd(Process*, char*)+0x130>
c00138dc:	83 ec 0c             	sub    esp,0xc
c00138df:	68 14 01 00 00       	push   0x114
c00138e4:	e8 57 bf ff ff       	call   c000f840 <malloc>
c00138e9:	83 c4 0c             	add    esp,0xc
c00138ec:	89 c3                	mov    ebx,eax
c00138ee:	55                   	push   ebp
c00138ef:	56                   	push   esi
c00138f0:	50                   	push   eax
c00138f1:	e8 e0 fb ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c00138f6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138fb:	83 c4 0c             	add    esp,0xc
c00138fe:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013902:	50                   	push   eax
c0013903:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013907:	50                   	push   eax
c0013908:	53                   	push   ebx
c0013909:	e8 d8 fe ff ff       	call   c00137e6 <File::stat(unsigned long long*, bool*)>
c001390e:	83 c4 10             	add    esp,0x10
c0013911:	83 f8 02             	cmp    eax,0x2
c0013914:	74 04                	je     c001391a <Fs::setcwd(Process*, char*)+0xd3>
c0013916:	85 c0                	test   eax,eax
c0013918:	74 1c                	je     c0013936 <Fs::setcwd(Process*, char*)+0xef>
c001391a:	b8 01 00 00 00       	mov    eax,0x1
c001391f:	85 db                	test   ebx,ebx
c0013921:	74 54                	je     c0013977 <Fs::setcwd(Process*, char*)+0x130>
c0013923:	83 ec 0c             	sub    esp,0xc
c0013926:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013928:	53                   	push   ebx
c0013929:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001392c:	83 c4 10             	add    esp,0x10
c001392f:	b8 01 00 00 00       	mov    eax,0x1
c0013934:	eb 41                	jmp    c0013977 <Fs::setcwd(Process*, char*)+0x130>
c0013936:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001393b:	75 1c                	jne    c0013959 <Fs::setcwd(Process*, char*)+0x112>
c001393d:	b8 02 00 00 00       	mov    eax,0x2
c0013942:	85 db                	test   ebx,ebx
c0013944:	74 31                	je     c0013977 <Fs::setcwd(Process*, char*)+0x130>
c0013946:	83 ec 0c             	sub    esp,0xc
c0013949:	8b 03                	mov    eax,DWORD PTR [ebx]
c001394b:	53                   	push   ebx
c001394c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001394f:	83 c4 10             	add    esp,0x10
c0013952:	b8 02 00 00 00       	mov    eax,0x2
c0013957:	eb 1e                	jmp    c0013977 <Fs::setcwd(Process*, char*)+0x130>
c0013959:	85 db                	test   ebx,ebx
c001395b:	74 0c                	je     c0013969 <Fs::setcwd(Process*, char*)+0x122>
c001395d:	83 ec 0c             	sub    esp,0xc
c0013960:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013962:	53                   	push   ebx
c0013963:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013966:	83 c4 10             	add    esp,0x10
c0013969:	50                   	push   eax
c001396a:	50                   	push   eax
c001396b:	56                   	push   esi
c001396c:	57                   	push   edi
c001396d:	e8 c2 ce fe ff       	call   c0000834 <strcpy>
c0013972:	83 c4 10             	add    esp,0x10
c0013975:	31 c0                	xor    eax,eax
c0013977:	81 c4 1c 02 00 00    	add    esp,0x21c
c001397d:	5b                   	pop    ebx
c001397e:	5e                   	pop    esi
c001397f:	5f                   	pop    edi
c0013980:	5d                   	pop    ebp
c0013981:	c3                   	ret    

c0013982 <Directory::Directory(char const*, Process*)>:
c0013982:	83 ec 0c             	sub    esp,0xc
c0013985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013989:	83 ec 08             	sub    esp,0x8
c001398c:	6a 00                	push   0x0
c001398e:	50                   	push   eax
c001398f:	e8 c0 dd ff ff       	call   c0011754 <UnixFile::UnixFile(int)>
c0013994:	83 c4 10             	add    esp,0x10
c0013997:	ba 30 ad 02 c0       	mov    edx,0xc002ad30
c001399c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a0:	89 10                	mov    DWORD PTR [eax],edx
c00139a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00139ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b0:	83 c0 0d             	add    eax,0xd
c00139b3:	83 ec 04             	sub    esp,0x4
c00139b6:	52                   	push   edx
c00139b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139bb:	50                   	push   eax
c00139bc:	e8 6b f9 ff ff       	call   c001332c <Fs::standardiseFiles(char*, char const*, char const*)>
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00139cb:	8d 50 bf             	lea    edx,[eax-0x41]
c00139ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139dc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139e0:	90                   	nop
c00139e1:	83 c4 0c             	add    esp,0xc
c00139e4:	c3                   	ret    
c00139e5:	90                   	nop

c00139e6 <Directory::open()>:
c00139e6:	53                   	push   ebx
c00139e7:	b8 0b 00 00 00       	mov    eax,0xb
c00139ec:	83 ec 08             	sub    esp,0x8
c00139ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139f3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139fa:	80 fa 19             	cmp    dl,0x19
c00139fd:	77 3d                	ja     c0013a3c <Directory::open()+0x56>
c00139ff:	8b 14 95 80 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1380]
c0013a06:	85 d2                	test   edx,edx
c0013a08:	74 32                	je     c0013a3c <Directory::open()+0x56>
c0013a0a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a10:	85 d2                	test   edx,edx
c0013a12:	74 28                	je     c0013a3c <Directory::open()+0x56>
c0013a14:	b8 06 00 00 00       	mov    eax,0x6
c0013a19:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a1d:	75 1d                	jne    c0013a3c <Directory::open()+0x56>
c0013a1f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a25:	50                   	push   eax
c0013a26:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a28:	51                   	push   ecx
c0013a29:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a2c:	51                   	push   ecx
c0013a2d:	52                   	push   edx
c0013a2e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a31:	83 c4 10             	add    esp,0x10
c0013a34:	85 c0                	test   eax,eax
c0013a36:	75 04                	jne    c0013a3c <Directory::open()+0x56>
c0013a38:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a3c:	83 c4 08             	add    esp,0x8
c0013a3f:	5b                   	pop    ebx
c0013a40:	c3                   	ret    
c0013a41:	90                   	nop

c0013a42 <Directory::close()>:
c0013a42:	53                   	push   ebx
c0013a43:	b8 0b 00 00 00       	mov    eax,0xb
c0013a48:	83 ec 08             	sub    esp,0x8
c0013a4b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a4f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a56:	80 fa 19             	cmp    dl,0x19
c0013a59:	77 41                	ja     c0013a9c <Directory::close()+0x5a>
c0013a5b:	8b 1c 95 80 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1380]
c0013a62:	85 db                	test   ebx,ebx
c0013a64:	74 36                	je     c0013a9c <Directory::close()+0x5a>
c0013a66:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a6d:	74 2d                	je     c0013a9c <Directory::close()+0x5a>
c0013a6f:	b8 05 00 00 00       	mov    eax,0x5
c0013a74:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a78:	74 22                	je     c0013a9c <Directory::close()+0x5a>
c0013a7a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a7e:	8b 04 95 80 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1380]
c0013a85:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a8b:	53                   	push   ebx
c0013a8c:	53                   	push   ebx
c0013a8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a8f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a95:	50                   	push   eax
c0013a96:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a99:	83 c4 10             	add    esp,0x10
c0013a9c:	83 c4 08             	add    esp,0x8
c0013a9f:	5b                   	pop    ebx
c0013aa0:	c3                   	ret    
c0013aa1:	90                   	nop

c0013aa2 <Directory::unlink()>:
c0013aa2:	83 ec 0c             	sub    esp,0xc
c0013aa5:	b8 0b 00 00 00       	mov    eax,0xb
c0013aaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ab5:	80 f9 19             	cmp    cl,0x19
c0013ab8:	77 2f                	ja     c0013ae9 <Directory::unlink()+0x47>
c0013aba:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c0013ac1:	85 c9                	test   ecx,ecx
c0013ac3:	74 24                	je     c0013ae9 <Directory::unlink()+0x47>
c0013ac5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013acb:	85 c9                	test   ecx,ecx
c0013acd:	74 1a                	je     c0013ae9 <Directory::unlink()+0x47>
c0013acf:	b8 06 00 00 00       	mov    eax,0x6
c0013ad4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ad8:	75 0f                	jne    c0013ae9 <Directory::unlink()+0x47>
c0013ada:	83 c2 0d             	add    edx,0xd
c0013add:	50                   	push   eax
c0013ade:	50                   	push   eax
c0013adf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ae1:	52                   	push   edx
c0013ae2:	51                   	push   ecx
c0013ae3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013ae6:	83 c4 10             	add    esp,0x10
c0013ae9:	83 c4 0c             	add    esp,0xc
c0013aec:	c3                   	ret    
c0013aed:	90                   	nop

c0013aee <Directory::rename(char const*)>:
c0013aee:	83 ec 0c             	sub    esp,0xc
c0013af1:	b8 0b 00 00 00       	mov    eax,0xb
c0013af6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013afa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b01:	80 f9 19             	cmp    cl,0x19
c0013b04:	77 32                	ja     c0013b38 <Directory::rename(char const*)+0x4a>
c0013b06:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c0013b0d:	85 c9                	test   ecx,ecx
c0013b0f:	74 27                	je     c0013b38 <Directory::rename(char const*)+0x4a>
c0013b11:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b17:	85 c9                	test   ecx,ecx
c0013b19:	74 1d                	je     c0013b38 <Directory::rename(char const*)+0x4a>
c0013b1b:	b8 06 00 00 00       	mov    eax,0x6
c0013b20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b24:	75 12                	jne    c0013b38 <Directory::rename(char const*)+0x4a>
c0013b26:	83 c2 0d             	add    edx,0xd
c0013b29:	50                   	push   eax
c0013b2a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b30:	52                   	push   edx
c0013b31:	51                   	push   ecx
c0013b32:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b35:	83 c4 10             	add    esp,0x10
c0013b38:	83 c4 0c             	add    esp,0xc
c0013b3b:	c3                   	ret    

c0013b3c <Directory::exists()>:
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	31 c0                	xor    eax,eax
c0013b41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b45:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b4c:	80 f9 19             	cmp    cl,0x19
c0013b4f:	77 24                	ja     c0013b75 <Directory::exists()+0x39>
c0013b51:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c0013b58:	85 c9                	test   ecx,ecx
c0013b5a:	74 19                	je     c0013b75 <Directory::exists()+0x39>
c0013b5c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b62:	85 c9                	test   ecx,ecx
c0013b64:	74 0f                	je     c0013b75 <Directory::exists()+0x39>
c0013b66:	83 c2 0d             	add    edx,0xd
c0013b69:	50                   	push   eax
c0013b6a:	50                   	push   eax
c0013b6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b6d:	52                   	push   edx
c0013b6e:	51                   	push   ecx
c0013b6f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b72:	83 c4 10             	add    esp,0x10
c0013b75:	83 c4 0c             	add    esp,0xc
c0013b78:	c3                   	ret    
c0013b79:	90                   	nop

c0013b7a <Directory::read(dirent*)>:
c0013b7a:	83 ec 1c             	sub    esp,0x1c
c0013b7d:	b8 0b 00 00 00       	mov    eax,0xb
c0013b82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b86:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b8d:	80 fa 19             	cmp    dl,0x19
c0013b90:	77 30                	ja     c0013bc2 <Directory::read(dirent*)+0x48>
c0013b92:	8b 14 95 80 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1380]
c0013b99:	85 d2                	test   edx,edx
c0013b9b:	74 25                	je     c0013bc2 <Directory::read(dirent*)+0x48>
c0013b9d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013ba4:	74 1c                	je     c0013bc2 <Directory::read(dirent*)+0x48>
c0013ba6:	83 ec 0c             	sub    esp,0xc
c0013ba9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bab:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013baf:	52                   	push   edx
c0013bb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013bb4:	6a 00                	push   0x0
c0013bb6:	68 10 01 00 00       	push   0x110
c0013bbb:	51                   	push   ecx
c0013bbc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bbf:	83 c4 20             	add    esp,0x20
c0013bc2:	83 c4 1c             	add    esp,0x1c
c0013bc5:	c3                   	ret    

c0013bc6 <Directory::create()>:
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	b8 0b 00 00 00       	mov    eax,0xb
c0013bce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bd2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bd9:	80 f9 19             	cmp    cl,0x19
c0013bdc:	77 2f                	ja     c0013c0d <Directory::create()+0x47>
c0013bde:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c0013be5:	85 c9                	test   ecx,ecx
c0013be7:	74 24                	je     c0013c0d <Directory::create()+0x47>
c0013be9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bef:	85 c9                	test   ecx,ecx
c0013bf1:	74 1a                	je     c0013c0d <Directory::create()+0x47>
c0013bf3:	b8 06 00 00 00       	mov    eax,0x6
c0013bf8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bfc:	75 0f                	jne    c0013c0d <Directory::create()+0x47>
c0013bfe:	83 c2 0d             	add    edx,0xd
c0013c01:	50                   	push   eax
c0013c02:	50                   	push   eax
c0013c03:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c05:	52                   	push   edx
c0013c06:	51                   	push   ecx
c0013c07:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	83 c4 0c             	add    esp,0xc
c0013c10:	c3                   	ret    
c0013c11:	90                   	nop

c0013c12 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c12:	b8 0a 00 00 00       	mov    eax,0xa
c0013c17:	c3                   	ret    

c0013c18 <Bus::Bus(char const*)>:
c0013c18:	83 ec 0c             	sub    esp,0xc
c0013c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1f:	83 ec 08             	sub    esp,0x8
c0013c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c26:	50                   	push   eax
c0013c27:	e8 68 09 00 00       	call   c0014594 <Device::Device(char const*)>
c0013c2c:	83 c4 10             	add    esp,0x10
c0013c2f:	ba 4c ad 02 c0       	mov    edx,0xc002ad4c
c0013c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c38:	89 10                	mov    DWORD PTR [eax],edx
c0013c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c3e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c48:	90                   	nop
c0013c49:	83 c4 0c             	add    esp,0xc
c0013c4c:	c3                   	ret    
c0013c4d:	90                   	nop

c0013c4e <Bus::~Bus()>:
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	ba 4c ad 02 c0       	mov    edx,0xc002ad4c
c0013c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c5a:	89 10                	mov    DWORD PTR [eax],edx
c0013c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c60:	83 ec 0c             	sub    esp,0xc
c0013c63:	50                   	push   eax
c0013c64:	e8 0d 06 00 00       	call   c0014276 <Device::~Device()>
c0013c69:	83 c4 10             	add    esp,0x10
c0013c6c:	90                   	nop
c0013c6d:	83 c4 0c             	add    esp,0xc
c0013c70:	c3                   	ret    
c0013c71:	90                   	nop

c0013c72 <Bus::~Bus()>:
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	83 ec 0c             	sub    esp,0xc
c0013c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c7c:	e8 cd ff ff ff       	call   c0013c4e <Bus::~Bus()>
c0013c81:	83 c4 10             	add    esp,0x10
c0013c84:	83 ec 08             	sub    esp,0x8
c0013c87:	68 58 01 00 00       	push   0x158
c0013c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c90:	e8 08 f2 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0013c95:	83 c4 10             	add    esp,0x10
c0013c98:	83 c4 0c             	add    esp,0xc
c0013c9b:	c3                   	ret    

c0013c9c <Buzzer::Buzzer(char const*)>:
c0013c9c:	83 ec 0c             	sub    esp,0xc
c0013c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca3:	83 ec 08             	sub    esp,0x8
c0013ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013caa:	50                   	push   eax
c0013cab:	e8 e4 08 00 00       	call   c0014594 <Device::Device(char const*)>
c0013cb0:	83 c4 10             	add    esp,0x10
c0013cb3:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c0013cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cbc:	89 10                	mov    DWORD PTR [eax],edx
c0013cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013cda:	90                   	nop
c0013cdb:	83 c4 0c             	add    esp,0xc
c0013cde:	c3                   	ret    
c0013cdf:	90                   	nop

c0013ce0 <Buzzer::~Buzzer()>:
c0013ce0:	83 ec 0c             	sub    esp,0xc
c0013ce3:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c0013ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cec:	89 10                	mov    DWORD PTR [eax],edx
c0013cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf2:	83 ec 0c             	sub    esp,0xc
c0013cf5:	50                   	push   eax
c0013cf6:	e8 7b 05 00 00       	call   c0014276 <Device::~Device()>
c0013cfb:	83 c4 10             	add    esp,0x10
c0013cfe:	90                   	nop
c0013cff:	83 c4 0c             	add    esp,0xc
c0013d02:	c3                   	ret    
c0013d03:	90                   	nop

c0013d04 <Buzzer::~Buzzer()>:
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	83 ec 0c             	sub    esp,0xc
c0013d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d0e:	e8 cd ff ff ff       	call   c0013ce0 <Buzzer::~Buzzer()>
c0013d13:	83 c4 10             	add    esp,0x10
c0013d16:	83 ec 08             	sub    esp,0x8
c0013d19:	68 5c 01 00 00       	push   0x15c
c0013d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d22:	e8 76 f1 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0013d27:	83 c4 10             	add    esp,0x10
c0013d2a:	83 c4 0c             	add    esp,0xc
c0013d2d:	c3                   	ret    

c0013d2e <Buzzer::stop()>:
c0013d2e:	83 ec 14             	sub    esp,0x14
c0013d31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d35:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d37:	6a 00                	push   0x0
c0013d39:	50                   	push   eax
c0013d3a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d3d:	83 c4 1c             	add    esp,0x1c
c0013d40:	c3                   	ret    

c0013d41 <beepThread(void*)>:
c0013d41:	53                   	push   ebx
c0013d42:	83 ec 08             	sub    esp,0x8
c0013d45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d49:	e8 08 a1 00 00       	call   c001de56 <unlockScheduler()>
c0013d4e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d53:	52                   	push   edx
c0013d54:	52                   	push   edx
c0013d55:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d5b:	52                   	push   edx
c0013d5c:	50                   	push   eax
c0013d5d:	e8 42 a6 00 00       	call   c001e3a4 <nanoSleep(unsigned long long)>
c0013d62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d65:	e8 c4 ff ff ff       	call   c0013d2e <Buzzer::stop()>
c0013d6a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d72:	83 c4 18             	add    esp,0x18
c0013d75:	5b                   	pop    ebx
c0013d76:	e9 6f a5 00 00       	jmp    c001e2ea <blockTask(TaskState)>
c0013d7b:	90                   	nop

c0013d7c <Buzzer::beep(int, int, bool)>:
c0013d7c:	57                   	push   edi
c0013d7d:	56                   	push   esi
c0013d7e:	53                   	push   ebx
c0013d7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d83:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d8b:	52                   	push   edx
c0013d8c:	52                   	push   edx
c0013d8d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d93:	56                   	push   esi
c0013d94:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d97:	83 c4 10             	add    esp,0x10
c0013d9a:	89 f8                	mov    eax,edi
c0013d9c:	84 c0                	test   al,al
c0013d9e:	74 1f                	je     c0013dbf <Buzzer::beep(int, int, bool)+0x43>
c0013da0:	50                   	push   eax
c0013da1:	50                   	push   eax
c0013da2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013da8:	99                   	cdq    
c0013da9:	52                   	push   edx
c0013daa:	50                   	push   eax
c0013dab:	e8 f4 a5 00 00       	call   c001e3a4 <nanoSleep(unsigned long long)>
c0013db0:	83 c4 10             	add    esp,0x10
c0013db3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013db7:	5b                   	pop    ebx
c0013db8:	5e                   	pop    esi
c0013db9:	5f                   	pop    edi
c0013dba:	e9 6f ff ff ff       	jmp    c0013d2e <Buzzer::stop()>
c0013dbf:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013dc5:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0013dca:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013dd2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013dd6:	c7 44 24 14 41 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d41
c0013dde:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013de2:	5b                   	pop    ebx
c0013de3:	5e                   	pop    esi
c0013de4:	5f                   	pop    edi
c0013de5:	e9 9c a1 00 00       	jmp    c001df86 <Process::createThread(void (*)(void*), void*, int)>

c0013dea <User::loadClockSettings(int)>:
c0013dea:	53                   	push   ebx
c0013deb:	83 ec 14             	sub    esp,0x14
c0013dee:	68 14 01 00 00       	push   0x114
c0013df3:	e8 48 ba ff ff       	call   c000f840 <malloc>
c0013df8:	83 c4 0c             	add    esp,0xc
c0013dfb:	89 c3                	mov    ebx,eax
c0013dfd:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c0013e03:	68 a0 ad 02 c0       	push   0xc002ada0
c0013e08:	50                   	push   eax
c0013e09:	e8 c8 f6 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c0013e0e:	58                   	pop    eax
c0013e0f:	5a                   	pop    edx
c0013e10:	6a 01                	push   0x1
c0013e12:	53                   	push   ebx
c0013e13:	e8 22 f7 ff ff       	call   c001353a <File::open(FileOpenMode)>
c0013e18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e1b:	e8 78 f7 ff ff       	call   c0013598 <File::close()>
c0013e20:	83 c4 10             	add    esp,0x10
c0013e23:	85 db                	test   ebx,ebx
c0013e25:	74 0f                	je     c0013e36 <User::loadClockSettings(int)+0x4c>
c0013e27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e29:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e2d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e30:	83 c4 08             	add    esp,0x8
c0013e33:	5b                   	pop    ebx
c0013e34:	ff e0                	jmp    eax
c0013e36:	83 c4 08             	add    esp,0x8
c0013e39:	5b                   	pop    ebx
c0013e3a:	c3                   	ret    
c0013e3b:	90                   	nop

c0013e3c <Clock::Clock(char const*)>:
c0013e3c:	83 ec 0c             	sub    esp,0xc
c0013e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e43:	83 ec 08             	sub    esp,0x8
c0013e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e4a:	50                   	push   eax
c0013e4b:	e8 44 07 00 00       	call   c0014594 <Device::Device(char const*)>
c0013e50:	83 c4 10             	add    esp,0x10
c0013e53:	ba c8 ad 02 c0       	mov    edx,0xc002adc8
c0013e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5c:	89 10                	mov    DWORD PTR [eax],edx
c0013e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e62:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e6c:	90                   	nop
c0013e6d:	83 c4 0c             	add    esp,0xc
c0013e70:	c3                   	ret    
c0013e71:	90                   	nop

c0013e72 <Clock::~Clock()>:
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	ba c8 ad 02 c0       	mov    edx,0xc002adc8
c0013e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7e:	89 10                	mov    DWORD PTR [eax],edx
c0013e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	50                   	push   eax
c0013e88:	e8 e9 03 00 00       	call   c0014276 <Device::~Device()>
c0013e8d:	83 c4 10             	add    esp,0x10
c0013e90:	90                   	nop
c0013e91:	83 c4 0c             	add    esp,0xc
c0013e94:	c3                   	ret    
c0013e95:	90                   	nop

c0013e96 <Clock::~Clock()>:
c0013e96:	83 ec 0c             	sub    esp,0xc
c0013e99:	83 ec 0c             	sub    esp,0xc
c0013e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea0:	e8 cd ff ff ff       	call   c0013e72 <Clock::~Clock()>
c0013ea5:	83 c4 10             	add    esp,0x10
c0013ea8:	83 ec 08             	sub    esp,0x8
c0013eab:	68 58 01 00 00       	push   0x158
c0013eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb4:	e8 e4 ef ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0013eb9:	83 c4 10             	add    esp,0x10
c0013ebc:	83 c4 0c             	add    esp,0xc
c0013ebf:	c3                   	ret    

c0013ec0 <Clock::timeInSecondsLocal()>:
c0013ec0:	53                   	push   ebx
c0013ec1:	83 ec 14             	sub    esp,0x14
c0013ec4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ec8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013eca:	50                   	push   eax
c0013ecb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ece:	0f b6 0d f4 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7f4
c0013ed5:	03 0d f8 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7f8
c0013edb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ee1:	89 cb                	mov    ebx,ecx
c0013ee3:	c1 fb 1f             	sar    ebx,0x1f
c0013ee6:	01 c8                	add    eax,ecx
c0013ee8:	11 da                	adc    edx,ebx
c0013eea:	83 c4 10             	add    esp,0x10
c0013eed:	31 c9                	xor    ecx,ecx
c0013eef:	80 3d f5 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7f5,0x0
c0013ef6:	74 05                	je     c0013efd <Clock::timeInSecondsLocal()+0x3d>
c0013ef8:	b9 08 07 00 00       	mov    ecx,0x708
c0013efd:	31 db                	xor    ebx,ebx
c0013eff:	01 c8                	add    eax,ecx
c0013f01:	11 da                	adc    edx,ebx
c0013f03:	83 c4 08             	add    esp,0x8
c0013f06:	5b                   	pop    ebx
c0013f07:	c3                   	ret    

c0013f08 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f08:	57                   	push   edi
c0013f09:	56                   	push   esi
c0013f0a:	53                   	push   ebx
c0013f0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f13:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f15:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f19:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f1c:	0f b6 05 f4 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e7f4
c0013f23:	03 05 f8 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e7f8
c0013f29:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f2f:	99                   	cdq    
c0013f30:	29 c6                	sub    esi,eax
c0013f32:	19 d7                	sbb    edi,edx
c0013f34:	89 f0                	mov    eax,esi
c0013f36:	89 fa                	mov    edx,edi
c0013f38:	31 f6                	xor    esi,esi
c0013f3a:	80 3d f5 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7f5,0x0
c0013f41:	74 05                	je     c0013f48 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f43:	be 08 07 00 00       	mov    esi,0x708
c0013f48:	31 ff                	xor    edi,edi
c0013f4a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f4e:	29 f0                	sub    eax,esi
c0013f50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f54:	19 fa                	sbb    edx,edi
c0013f56:	89 d8                	mov    eax,ebx
c0013f58:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f5c:	5b                   	pop    ebx
c0013f5d:	5e                   	pop    esi
c0013f5e:	5f                   	pop    edi
c0013f5f:	ff e0                	jmp    eax

c0013f61 <datetimeToSeconds(datetime_t)>:
c0013f61:	55                   	push   ebp
c0013f62:	57                   	push   edi
c0013f63:	56                   	push   esi
c0013f64:	53                   	push   ebx
c0013f65:	83 ec 14             	sub    esp,0x14
c0013f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f6c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f70:	89 d3                	mov    ebx,edx
c0013f72:	0f b6 c6             	movzx  eax,dh
c0013f75:	c1 eb 10             	shr    ebx,0x10
c0013f78:	48                   	dec    eax
c0013f79:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f7e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f82:	0f b6 f5             	movzx  esi,ch
c0013f85:	89 cf                	mov    edi,ecx
c0013f87:	6b f6 3c             	imul   esi,esi,0x3c
c0013f8a:	c1 ef 10             	shr    edi,0x10
c0013f8d:	0f b6 c9             	movzx  ecx,cl
c0013f90:	89 f8                	mov    eax,edi
c0013f92:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f98:	0f b6 f8             	movzx  edi,al
c0013f9b:	0f b6 d2             	movzx  edx,dl
c0013f9e:	01 fe                	add    esi,edi
c0013fa0:	01 f1                	add    ecx,esi
c0013fa2:	0f b7 f3             	movzx  esi,bx
c0013fa5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013fa9:	c1 f9 1f             	sar    ecx,0x1f
c0013fac:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013fb1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fb5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013fba:	8b 0c 8d 00 ae 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5200]
c0013fc1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013fc5:	76 29                	jbe    c0013ff0 <datetimeToSeconds(datetime_t)+0x8f>
c0013fc7:	f6 c3 03             	test   bl,0x3
c0013fca:	75 24                	jne    c0013ff0 <datetimeToSeconds(datetime_t)+0x8f>
c0013fcc:	31 d2                	xor    edx,edx
c0013fce:	bf 64 00 00 00       	mov    edi,0x64
c0013fd3:	89 d8                	mov    eax,ebx
c0013fd5:	66 f7 f7             	div    di
c0013fd8:	66 85 d2             	test   dx,dx
c0013fdb:	75 12                	jne    c0013fef <datetimeToSeconds(datetime_t)+0x8e>
c0013fdd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013fe3:	bf 90 01 00 00       	mov    edi,0x190
c0013fe8:	99                   	cdq    
c0013fe9:	f7 ff                	idiv   edi
c0013feb:	85 d2                	test   edx,edx
c0013fed:	75 01                	jne    c0013ff0 <datetimeToSeconds(datetime_t)+0x8f>
c0013fef:	41                   	inc    ecx
c0013ff0:	66 83 fb 46          	cmp    bx,0x46
c0013ff4:	76 45                	jbe    c001403b <datetimeToSeconds(datetime_t)+0xda>
c0013ff6:	bb 46 00 00 00       	mov    ebx,0x46
c0013ffb:	bf 64 00 00 00       	mov    edi,0x64
c0014000:	bd 90 01 00 00       	mov    ebp,0x190
c0014005:	b8 6d 01 00 00       	mov    eax,0x16d
c001400a:	f6 c3 03             	test   bl,0x3
c001400d:	75 23                	jne    c0014032 <datetimeToSeconds(datetime_t)+0xd1>
c001400f:	89 d8                	mov    eax,ebx
c0014011:	99                   	cdq    
c0014012:	f7 ff                	idiv   edi
c0014014:	b8 6e 01 00 00       	mov    eax,0x16e
c0014019:	85 d2                	test   edx,edx
c001401b:	75 15                	jne    c0014032 <datetimeToSeconds(datetime_t)+0xd1>
c001401d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014023:	99                   	cdq    
c0014024:	f7 fd                	idiv   ebp
c0014026:	83 fa 01             	cmp    edx,0x1
c0014029:	19 c0                	sbb    eax,eax
c001402b:	f7 d0                	not    eax
c001402d:	05 6e 01 00 00       	add    eax,0x16e
c0014032:	01 c1                	add    ecx,eax
c0014034:	43                   	inc    ebx
c0014035:	39 f3                	cmp    ebx,esi
c0014037:	7c cc                	jl     c0014005 <datetimeToSeconds(datetime_t)+0xa4>
c0014039:	eb 35                	jmp    c0014070 <datetimeToSeconds(datetime_t)+0x10f>
c001403b:	74 33                	je     c0014070 <datetimeToSeconds(datetime_t)+0x10f>
c001403d:	b8 45 00 00 00       	mov    eax,0x45
c0014042:	89 c2                	mov    edx,eax
c0014044:	83 e2 03             	and    edx,0x3
c0014047:	39 f0                	cmp    eax,esi
c0014049:	7e 0f                	jle    c001405a <datetimeToSeconds(datetime_t)+0xf9>
c001404b:	83 fa 01             	cmp    edx,0x1
c001404e:	19 d2                	sbb    edx,edx
c0014050:	48                   	dec    eax
c0014051:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014058:	eb e8                	jmp    c0014042 <datetimeToSeconds(datetime_t)+0xe1>
c001405a:	b8 6d 01 00 00       	mov    eax,0x16d
c001405f:	85 d2                	test   edx,edx
c0014061:	75 0b                	jne    c001406e <datetimeToSeconds(datetime_t)+0x10d>
c0014063:	66 83 fb 01          	cmp    bx,0x1
c0014067:	19 c0                	sbb    eax,eax
c0014069:	05 6e 01 00 00       	add    eax,0x16e
c001406e:	29 c1                	sub    ecx,eax
c0014070:	b8 80 51 01 00       	mov    eax,0x15180
c0014075:	f7 e9                	imul   ecx
c0014077:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001407b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001407f:	83 c4 14             	add    esp,0x14
c0014082:	5b                   	pop    ebx
c0014083:	5e                   	pop    esi
c0014084:	5f                   	pop    edi
c0014085:	5d                   	pop    ebp
c0014086:	c3                   	ret    
c0014087:	90                   	nop

c0014088 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014088:	57                   	push   edi
c0014089:	56                   	push   esi
c001408a:	53                   	push   ebx
c001408b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001408f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014091:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014094:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014098:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001409c:	e8 c0 fe ff ff       	call   c0013f61 <datetimeToSeconds(datetime_t)>
c00140a1:	59                   	pop    ecx
c00140a2:	0f b6 0d f4 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7f4
c00140a9:	5b                   	pop    ebx
c00140aa:	03 0d f8 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7f8
c00140b0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00140b6:	89 cb                	mov    ebx,ecx
c00140b8:	c1 fb 1f             	sar    ebx,0x1f
c00140bb:	29 c8                	sub    eax,ecx
c00140bd:	19 da                	sbb    edx,ebx
c00140bf:	31 c9                	xor    ecx,ecx
c00140c1:	80 3d f5 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7f5,0x0
c00140c8:	74 05                	je     c00140cf <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00140ca:	b9 08 07 00 00       	mov    ecx,0x708
c00140cf:	31 db                	xor    ebx,ebx
c00140d1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140d5:	29 c8                	sub    eax,ecx
c00140d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140db:	19 da                	sbb    edx,ebx
c00140dd:	89 f8                	mov    eax,edi
c00140df:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140e3:	5b                   	pop    ebx
c00140e4:	5e                   	pop    esi
c00140e5:	5f                   	pop    edi
c00140e6:	ff e0                	jmp    eax

c00140e8 <secondsToDatetime(unsigned long long)>:
c00140e8:	55                   	push   ebp
c00140e9:	57                   	push   edi
c00140ea:	56                   	push   esi
c00140eb:	53                   	push   ebx
c00140ec:	83 ec 1c             	sub    esp,0x1c
c00140ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140f3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140f7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140fb:	6a 00                	push   0x0
c00140fd:	68 80 51 01 00       	push   0x15180
c0014102:	55                   	push   ebp
c0014103:	57                   	push   edi
c0014104:	e8 23 29 01 00       	call   c0026a2c <__udivdi3>
c0014109:	83 c4 10             	add    esp,0x10
c001410c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014112:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014116:	6a 00                	push   0x0
c0014118:	68 80 51 01 00       	push   0x15180
c001411d:	55                   	push   ebp
c001411e:	57                   	push   edi
c001411f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014124:	e8 03 2a 01 00       	call   c0026b2c <__umoddi3>
c0014129:	83 c4 10             	add    esp,0x10
c001412c:	99                   	cdq    
c001412d:	f7 ff                	idiv   edi
c001412f:	bf 3c 00 00 00       	mov    edi,0x3c
c0014134:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014137:	89 d0                	mov    eax,edx
c0014139:	99                   	cdq    
c001413a:	f7 ff                	idiv   edi
c001413c:	85 db                	test   ebx,ebx
c001413e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014141:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014144:	79 11                	jns    c0014157 <secondsToDatetime(unsigned long long)+0x6f>
c0014146:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001414a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014150:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014155:	eb 07                	jmp    c001415e <secondsToDatetime(unsigned long long)+0x76>
c0014157:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001415c:	89 d8                	mov    eax,ebx
c001415e:	bf b4 05 00 00       	mov    edi,0x5b4
c0014163:	99                   	cdq    
c0014164:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014169:	f7 f9                	idiv   ecx
c001416b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014170:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014174:	31 d2                	xor    edx,edx
c0014176:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001417e:	01 c3                	add    ebx,eax
c0014180:	89 d8                	mov    eax,ebx
c0014182:	f7 f1                	div    ecx
c0014184:	31 d2                	xor    edx,edx
c0014186:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014189:	89 d8                	mov    eax,ebx
c001418b:	f7 f7                	div    edi
c001418d:	31 d2                	xor    edx,edx
c001418f:	29 c1                	sub    ecx,eax
c0014191:	89 d8                	mov    eax,ebx
c0014193:	f7 f5                	div    ebp
c0014195:	bd 6d 01 00 00       	mov    ebp,0x16d
c001419a:	29 c1                	sub    ecx,eax
c001419c:	31 d2                	xor    edx,edx
c001419e:	89 c8                	mov    eax,ecx
c00141a0:	f7 f5                	div    ebp
c00141a2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00141a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00141ab:	31 d2                	xor    edx,edx
c00141ad:	89 c8                	mov    eax,ecx
c00141af:	f7 f5                	div    ebp
c00141b1:	31 d2                	xor    edx,edx
c00141b3:	01 c3                	add    ebx,eax
c00141b5:	89 c8                	mov    eax,ecx
c00141b7:	f7 f7                	div    edi
c00141b9:	bf 99 00 00 00       	mov    edi,0x99
c00141be:	29 c3                	sub    ebx,eax
c00141c0:	31 d2                	xor    edx,edx
c00141c2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00141ca:	29 c3                	sub    ebx,eax
c00141cc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00141cf:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00141d2:	bb 05 00 00 00       	mov    ebx,0x5
c00141d7:	83 c1 02             	add    ecx,0x2
c00141da:	89 c8                	mov    eax,ecx
c00141dc:	f7 f7                	div    edi
c00141de:	31 d2                	xor    edx,edx
c00141e0:	89 c7                	mov    edi,eax
c00141e2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141e8:	83 c0 02             	add    eax,0x2
c00141eb:	f7 f3                	div    ebx
c00141ed:	89 eb                	mov    ebx,ebp
c00141ef:	29 c3                	sub    ebx,eax
c00141f1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141f7:	88 1e                	mov    BYTE PTR [esi],bl
c00141f9:	19 c0                	sbb    eax,eax
c00141fb:	31 d2                	xor    edx,edx
c00141fd:	83 e0 0c             	and    eax,0xc
c0014200:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014204:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001420c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014210:	83 f9 01             	cmp    ecx,0x1
c0014213:	0f 96 c2             	setbe  dl
c0014216:	41                   	inc    ecx
c0014217:	01 d0                	add    eax,edx
c0014219:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001421c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014220:	83 c4 1c             	add    esp,0x1c
c0014223:	89 f0                	mov    eax,esi
c0014225:	5b                   	pop    ebx
c0014226:	5e                   	pop    esi
c0014227:	5f                   	pop    edi
c0014228:	5d                   	pop    ebp
c0014229:	c2 04 00             	ret    0x4

c001422c <Clock::timeInDatetimeLocal()>:
c001422c:	53                   	push   ebx
c001422d:	83 ec 14             	sub    esp,0x14
c0014230:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014234:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014238:	e8 83 fc ff ff       	call   c0013ec0 <Clock::timeInSecondsLocal()>
c001423d:	83 c4 0c             	add    esp,0xc
c0014240:	52                   	push   edx
c0014241:	50                   	push   eax
c0014242:	53                   	push   ebx
c0014243:	e8 a0 fe ff ff       	call   c00140e8 <secondsToDatetime(unsigned long long)>
c0014248:	89 d8                	mov    eax,ebx
c001424a:	83 c4 14             	add    esp,0x14
c001424d:	5b                   	pop    ebx
c001424e:	c2 04 00             	ret    0x4
c0014251:	90                   	nop

c0014252 <Device::hibernate()>:
c0014252:	c3                   	ret    
c0014253:	90                   	nop

c0014254 <Device::wake()>:
c0014254:	c3                   	ret    
c0014255:	90                   	nop

c0014256 <Device::detect()>:
c0014256:	c3                   	ret    
c0014257:	90                   	nop

c0014258 <Device::disableLegacy()>:
c0014258:	c3                   	ret    
c0014259:	90                   	nop

c001425a <Device::powerSaving(PowerSavingLevel)>:
c001425a:	c3                   	ret    
c001425b:	90                   	nop

c001425c <DriverlessDevice::close(int, int, void*)>:
c001425c:	31 c0                	xor    eax,eax
c001425e:	c3                   	ret    
c001425f:	90                   	nop

c0014260 <DriverlessDevice::detect()>:
c0014260:	c3                   	ret    
c0014261:	90                   	nop

c0014262 <DriverlessDevice::open(int, int, void*)>:
c0014262:	83 ec 18             	sub    esp,0x18
c0014265:	68 30 ae 02 c0       	push   0xc002ae30
c001426a:	e8 c0 63 00 00       	call   c001a62f <Krnl::panic(char const*)>
c001426f:	83 c8 ff             	or     eax,0xffffffff
c0014272:	83 c4 1c             	add    esp,0x1c
c0014275:	c3                   	ret    

c0014276 <Device::~Device()>:
c0014276:	ba 58 ae 02 c0       	mov    edx,0xc002ae58
c001427b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001427f:	89 10                	mov    DWORD PTR [eax],edx
c0014281:	90                   	nop
c0014282:	c3                   	ret    
c0014283:	90                   	nop

c0014284 <Device::~Device()>:
c0014284:	83 ec 0c             	sub    esp,0xc
c0014287:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001428b:	e8 e6 ff ff ff       	call   c0014276 <Device::~Device()>
c0014290:	83 c4 04             	add    esp,0x4
c0014293:	83 ec 08             	sub    esp,0x8
c0014296:	68 58 01 00 00       	push   0x158
c001429b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001429f:	e8 f9 eb ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00142a4:	83 c4 10             	add    esp,0x10
c00142a7:	83 c4 0c             	add    esp,0xc
c00142aa:	c3                   	ret    
c00142ab:	90                   	nop

c00142ac <Device::findAndLoadDriver()>:
c00142ac:	c3                   	ret    
c00142ad:	90                   	nop

c00142ae <Device::preOpenPCI(PCIDeviceInfo)>:
c00142ae:	57                   	push   edi
c00142af:	b9 09 00 00 00       	mov    ecx,0x9
c00142b4:	56                   	push   esi
c00142b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00142b9:	8d 74 24 10          	lea    esi,[esp+0x10]
c00142bd:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00142c7:	81 c7 18 01 00 00    	add    edi,0x118
c00142cd:	fc                   	cld    
c00142ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142d0:	5e                   	pop    esi
c00142d1:	5f                   	pop    edi
c00142d2:	c3                   	ret    
c00142d3:	90                   	nop

c00142d4 <Device::preOpenACPI(void*, char*, char*)>:
c00142d4:	56                   	push   esi
c00142d5:	53                   	push   ebx
c00142d6:	83 ec 08             	sub    esp,0x8
c00142d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142dd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142e1:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142ef:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142f5:	6a 1e                	push   0x1e
c00142f7:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014301:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014307:	50                   	push   eax
c0014308:	e8 37 c4 fe ff       	call   c0000744 <memcpy>
c001430d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014311:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014315:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001431d:	83 c4 14             	add    esp,0x14
c0014320:	5b                   	pop    ebx
c0014321:	5e                   	pop    esi
c0014322:	e9 1d c4 fe ff       	jmp    c0000744 <memcpy>
c0014327:	90                   	nop

c0014328 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001432c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014331:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014338:	75 0b                	jne    c0014345 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001433a:	8b 00                	mov    eax,DWORD PTR [eax]
c001433c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014340:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014343:	eb 1e                	jmp    c0014363 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014345:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001434a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014350:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014356:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014358:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001435c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014360:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014363:	ff e0                	jmp    eax
c0014365:	90                   	nop

c0014366 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001436a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001436f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014376:	75 0b                	jne    c0014383 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014378:	8b 00                	mov    eax,DWORD PTR [eax]
c001437a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001437e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014381:	eb 1e                	jmp    c00143a1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014383:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014388:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001438e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014394:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014396:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001439a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001439e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00143a1:	ff e0                	jmp    eax
c00143a3:	90                   	nop

c00143a4 <Device::addChild(Device*)>:
c00143a4:	53                   	push   ebx
c00143a5:	83 ec 08             	sub    esp,0x8
c00143a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143b0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00143b6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00143bc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00143be:	85 d2                	test   edx,edx
c00143c0:	74 04                	je     c00143c6 <Device::addChild(Device*)+0x22>
c00143c2:	89 d3                	mov    ebx,edx
c00143c4:	eb f6                	jmp    c00143bc <Device::addChild(Device*)+0x18>
c00143c6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00143c9:	83 ec 0c             	sub    esp,0xc
c00143cc:	6a 08                	push   0x8
c00143ce:	e8 6d b4 ff ff       	call   c000f840 <malloc>
c00143d3:	89 03                	mov    DWORD PTR [ebx],eax
c00143d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143e2:	83 c4 18             	add    esp,0x18
c00143e5:	5b                   	pop    ebx
c00143e6:	c3                   	ret    
c00143e7:	90                   	nop

c00143e8 <Device::removeAllChildren()>:
c00143e8:	56                   	push   esi
c00143e9:	53                   	push   ebx
c00143ea:	52                   	push   edx
c00143eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143ef:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143f8:	74 17                	je     c0014411 <Device::removeAllChildren()+0x29>
c00143fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143fd:	85 c0                	test   eax,eax
c00143ff:	74 0c                	je     c001440d <Device::removeAllChildren()+0x25>
c0014401:	83 ec 0c             	sub    esp,0xc
c0014404:	8b 10                	mov    edx,DWORD PTR [eax]
c0014406:	50                   	push   eax
c0014407:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001440a:	83 c4 10             	add    esp,0x10
c001440d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001440f:	eb e4                	jmp    c00143f5 <Device::removeAllChildren()+0xd>
c0014411:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014417:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001441d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014423:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001442a:	58                   	pop    eax
c001442b:	5b                   	pop    ebx
c001442c:	5e                   	pop    esi
c001442d:	c3                   	ret    

c001442e <Device::hibernateAll()>:
c001442e:	53                   	push   ebx
c001442f:	83 ec 14             	sub    esp,0x14
c0014432:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014436:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014438:	53                   	push   ebx
c0014439:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001443c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014442:	83 c4 10             	add    esp,0x10
c0014445:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014448:	74 0f                	je     c0014459 <Device::hibernateAll()+0x2b>
c001444a:	83 ec 0c             	sub    esp,0xc
c001444d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014450:	e8 d9 ff ff ff       	call   c001442e <Device::hibernateAll()>
c0014455:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014457:	eb e9                	jmp    c0014442 <Device::hibernateAll()+0x14>
c0014459:	83 c4 08             	add    esp,0x8
c001445c:	5b                   	pop    ebx
c001445d:	c3                   	ret    

c001445e <Device::wakeAll()>:
c001445e:	53                   	push   ebx
c001445f:	83 ec 14             	sub    esp,0x14
c0014462:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014466:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014468:	53                   	push   ebx
c0014469:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001446c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014472:	83 c4 10             	add    esp,0x10
c0014475:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014478:	74 0f                	je     c0014489 <Device::wakeAll()+0x2b>
c001447a:	83 ec 0c             	sub    esp,0xc
c001447d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014480:	e8 d9 ff ff ff       	call   c001445e <Device::wakeAll()>
c0014485:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014487:	eb e9                	jmp    c0014472 <Device::wakeAll()+0x14>
c0014489:	83 c4 08             	add    esp,0x8
c001448c:	5b                   	pop    ebx
c001448d:	c3                   	ret    

c001448e <Device::detectAll()>:
c001448e:	53                   	push   ebx
c001448f:	83 ec 14             	sub    esp,0x14
c0014492:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014496:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014498:	53                   	push   ebx
c0014499:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001449c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144a2:	83 c4 10             	add    esp,0x10
c00144a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144a8:	74 0f                	je     c00144b9 <Device::detectAll()+0x2b>
c00144aa:	83 ec 0c             	sub    esp,0xc
c00144ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144b0:	e8 d9 ff ff ff       	call   c001448e <Device::detectAll()>
c00144b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144b7:	eb e9                	jmp    c00144a2 <Device::detectAll()+0x14>
c00144b9:	83 c4 08             	add    esp,0x8
c00144bc:	5b                   	pop    ebx
c00144bd:	c3                   	ret    

c00144be <Device::disableLegacyAll()>:
c00144be:	53                   	push   ebx
c00144bf:	83 ec 14             	sub    esp,0x14
c00144c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144c8:	53                   	push   ebx
c00144c9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00144cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144d2:	83 c4 10             	add    esp,0x10
c00144d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144d8:	74 0f                	je     c00144e9 <Device::disableLegacyAll()+0x2b>
c00144da:	83 ec 0c             	sub    esp,0xc
c00144dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144e0:	e8 d9 ff ff ff       	call   c00144be <Device::disableLegacyAll()>
c00144e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144e7:	eb e9                	jmp    c00144d2 <Device::disableLegacyAll()+0x14>
c00144e9:	83 c4 08             	add    esp,0x8
c00144ec:	5b                   	pop    ebx
c00144ed:	c3                   	ret    

c00144ee <Device::loadDriversForAll()>:
c00144ee:	53                   	push   ebx
c00144ef:	83 ec 08             	sub    esp,0x8
c00144f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144f6:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144fc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144fe:	85 db                	test   ebx,ebx
c0014500:	74 12                	je     c0014514 <Device::loadDriversForAll()+0x26>
c0014502:	83 ec 0c             	sub    esp,0xc
c0014505:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014508:	e8 e1 ff ff ff       	call   c00144ee <Device::loadDriversForAll()>
c001450d:	83 c4 10             	add    esp,0x10
c0014510:	89 d8                	mov    eax,ebx
c0014512:	eb e8                	jmp    c00144fc <Device::loadDriversForAll()+0xe>
c0014514:	83 c4 08             	add    esp,0x8
c0014517:	5b                   	pop    ebx
c0014518:	c3                   	ret    
c0014519:	90                   	nop

c001451a <Device::closeAll()>:
c001451a:	53                   	push   ebx
c001451b:	83 ec 08             	sub    esp,0x8
c001451e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014522:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014524:	6a 00                	push   0x0
c0014526:	6a 00                	push   0x0
c0014528:	6a 00                	push   0x0
c001452a:	53                   	push   ebx
c001452b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001452e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014534:	83 c4 10             	add    esp,0x10
c0014537:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001453a:	74 0f                	je     c001454b <Device::closeAll()+0x31>
c001453c:	83 ec 0c             	sub    esp,0xc
c001453f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014542:	e8 d3 ff ff ff       	call   c001451a <Device::closeAll()>
c0014547:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014549:	eb e9                	jmp    c0014534 <Device::closeAll()+0x1a>
c001454b:	83 c4 08             	add    esp,0x8
c001454e:	5b                   	pop    ebx
c001454f:	c3                   	ret    

c0014550 <Device::powerSavingAll(PowerSavingLevel)>:
c0014550:	56                   	push   esi
c0014551:	53                   	push   ebx
c0014552:	83 ec 0c             	sub    esp,0xc
c0014555:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014559:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001455d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001455f:	56                   	push   esi
c0014560:	53                   	push   ebx
c0014561:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014564:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001456a:	83 c4 10             	add    esp,0x10
c001456d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014570:	74 0f                	je     c0014581 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014572:	52                   	push   edx
c0014573:	52                   	push   edx
c0014574:	56                   	push   esi
c0014575:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014578:	e8 d3 ff ff ff       	call   c0014550 <Device::powerSavingAll(PowerSavingLevel)>
c001457d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001457f:	eb e9                	jmp    c001456a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014581:	58                   	pop    eax
c0014582:	5b                   	pop    ebx
c0014583:	5e                   	pop    esi
c0014584:	c3                   	ret    
c0014585:	90                   	nop

c0014586 <Device::setName(char const*)>:
c0014586:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001458e:	e9 a1 c2 fe ff       	jmp    c0000834 <strcpy>
c0014593:	90                   	nop

c0014594 <Device::Device(char const*)>:
c0014594:	83 ec 1c             	sub    esp,0x1c
c0014597:	ba 58 ae 02 c0       	mov    edx,0xc002ae58
c001459c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a0:	89 10                	mov    DWORD PTR [eax],edx
c00145a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00145b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145da:	83 ec 08             	sub    esp,0x8
c00145dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145e5:	e8 9c ff ff ff       	call   c0014586 <Device::setName(char const*)>
c00145ea:	83 c4 10             	add    esp,0x10
c00145ed:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145f5:	83 ec 0c             	sub    esp,0xc
c00145f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145fc:	e8 3f b2 ff ff       	call   c000f840 <malloc>
c0014601:	83 c4 10             	add    esp,0x10
c0014604:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001460a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014611:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014615:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001461b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014625:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001462b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014635:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001463c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014640:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014656:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014664:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001466e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014672:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001467c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014680:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001468a:	90                   	nop
c001468b:	83 c4 1c             	add    esp,0x1c
c001468e:	c3                   	ret    
c001468f:	90                   	nop

c0014690 <Device::getName()>:
c0014690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014694:	05 d0 00 00 00       	add    eax,0xd0
c0014699:	c3                   	ret    

c001469a <DriverlessDevice::DriverlessDevice(char const*)>:
c001469a:	83 ec 0c             	sub    esp,0xc
c001469d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a1:	83 ec 08             	sub    esp,0x8
c00146a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a8:	50                   	push   eax
c00146a9:	e8 e6 fe ff ff       	call   c0014594 <Device::Device(char const*)>
c00146ae:	83 c4 10             	add    esp,0x10
c00146b1:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c00146b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ba:	89 10                	mov    DWORD PTR [eax],edx
c00146bc:	90                   	nop
c00146bd:	83 c4 0c             	add    esp,0xc
c00146c0:	c3                   	ret    
c00146c1:	90                   	nop

c00146c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00146c2:	57                   	push   edi
c00146c3:	56                   	push   esi
c00146c4:	53                   	push   ebx
c00146c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146c9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00146cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146d1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146d7:	75 0c                	jne    c00146e5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146d9:	52                   	push   edx
c00146da:	52                   	push   edx
c00146db:	53                   	push   ebx
c00146dc:	56                   	push   esi
c00146dd:	e8 88 42 01 00       	call   c002896a <LinkedList<Device>::addElement(Device*)>
c00146e2:	83 c4 10             	add    esp,0x10
c00146e5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146ee:	74 12                	je     c0014702 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146f0:	50                   	push   eax
c00146f1:	57                   	push   edi
c00146f2:	56                   	push   esi
c00146f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146f6:	e8 c7 ff ff ff       	call   c00146c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146fd:	83 c4 10             	add    esp,0x10
c0014700:	eb e9                	jmp    c00146eb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014702:	5b                   	pop    ebx
c0014703:	5e                   	pop    esi
c0014704:	5f                   	pop    edi
c0014705:	c3                   	ret    

c0014706 <getDevicesOfType(DeviceType)>:
c0014706:	53                   	push   ebx
c0014707:	83 ec 14             	sub    esp,0x14
c001470a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001470e:	53                   	push   ebx
c001470f:	e8 32 43 01 00       	call   c0028a46 <LinkedList<Device>::LinkedList()>
c0014714:	83 c4 0c             	add    esp,0xc
c0014717:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001471b:	53                   	push   ebx
c001471c:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0014722:	e8 9b ff ff ff       	call   c00146c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014727:	89 d8                	mov    eax,ebx
c0014729:	83 c4 18             	add    esp,0x18
c001472c:	5b                   	pop    ebx
c001472d:	c2 04 00             	ret    0x4

c0014730 <HardDiskController::HardDiskController(char const*)>:
c0014730:	83 ec 0c             	sub    esp,0xc
c0014733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014737:	83 ec 08             	sub    esp,0x8
c001473a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001473e:	50                   	push   eax
c001473f:	e8 50 fe ff ff       	call   c0014594 <Device::Device(char const*)>
c0014744:	83 c4 10             	add    esp,0x10
c0014747:	ba b0 ae 02 c0       	mov    edx,0xc002aeb0
c001474c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014750:	89 10                	mov    DWORD PTR [eax],edx
c0014752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014756:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014760:	90                   	nop
c0014761:	83 c4 0c             	add    esp,0xc
c0014764:	c3                   	ret    
c0014765:	90                   	nop

c0014766 <HardDiskController::~HardDiskController()>:
c0014766:	83 ec 0c             	sub    esp,0xc
c0014769:	ba b0 ae 02 c0       	mov    edx,0xc002aeb0
c001476e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014772:	89 10                	mov    DWORD PTR [eax],edx
c0014774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	50                   	push   eax
c001477c:	e8 f5 fa ff ff       	call   c0014276 <Device::~Device()>
c0014781:	83 c4 10             	add    esp,0x10
c0014784:	90                   	nop
c0014785:	83 c4 0c             	add    esp,0xc
c0014788:	c3                   	ret    
c0014789:	90                   	nop

c001478a <HardDiskController::~HardDiskController()>:
c001478a:	83 ec 0c             	sub    esp,0xc
c001478d:	83 ec 0c             	sub    esp,0xc
c0014790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014794:	e8 cd ff ff ff       	call   c0014766 <HardDiskController::~HardDiskController()>
c0014799:	83 c4 10             	add    esp,0x10
c001479c:	83 ec 08             	sub    esp,0x8
c001479f:	68 58 01 00 00       	push   0x158
c00147a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a8:	e8 f0 e6 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00147ad:	83 c4 10             	add    esp,0x10
c00147b0:	83 c4 0c             	add    esp,0xc
c00147b3:	c3                   	ret    

c00147b4 <PhysicalDisk::eject()>:
c00147b4:	83 ec 18             	sub    esp,0x18
c00147b7:	68 d4 ae 02 c0       	push   0xc002aed4
c00147bc:	e8 bc e7 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00147c1:	83 c8 ff             	or     eax,0xffffffff
c00147c4:	83 c4 1c             	add    esp,0x1c
c00147c7:	c3                   	ret    

c00147c8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00147c8:	83 ec 0c             	sub    esp,0xc
c00147cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147cf:	83 ec 08             	sub    esp,0x8
c00147d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147d6:	50                   	push   eax
c00147d7:	e8 b8 fd ff ff       	call   c0014594 <Device::Device(char const*)>
c00147dc:	83 c4 10             	add    esp,0x10
c00147df:	ba 04 af 02 c0       	mov    edx,0xc002af04
c00147e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e8:	89 10                	mov    DWORD PTR [eax],edx
c00147ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ee:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014804:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001480e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014812:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014816:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001481c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014820:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001482a:	90                   	nop
c001482b:	83 c4 0c             	add    esp,0xc
c001482e:	c3                   	ret    
c001482f:	90                   	nop

c0014830 <PhysicalDisk::startCache()>:
c0014830:	56                   	push   esi
c0014831:	53                   	push   ebx
c0014832:	83 ec 10             	sub    esp,0x10
c0014835:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014839:	6a 44                	push   0x44
c001483b:	e8 00 b0 ff ff       	call   c000f840 <malloc>
c0014840:	89 c6                	mov    esi,eax
c0014842:	58                   	pop    eax
c0014843:	5a                   	pop    edx
c0014844:	53                   	push   ebx
c0014845:	56                   	push   esi
c0014846:	e8 39 27 00 00       	call   c0016f84 <VCache::VCache(PhysicalDisk*)>
c001484b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014851:	83 c4 14             	add    esp,0x14
c0014854:	5b                   	pop    ebx
c0014855:	5e                   	pop    esi
c0014856:	c3                   	ret    
c0014857:	90                   	nop

c0014858 <PhysicalDisk::~PhysicalDisk()>:
c0014858:	83 ec 0c             	sub    esp,0xc
c001485b:	ba 04 af 02 c0       	mov    edx,0xc002af04
c0014860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014864:	89 10                	mov    DWORD PTR [eax],edx
c0014866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486a:	83 ec 0c             	sub    esp,0xc
c001486d:	50                   	push   eax
c001486e:	e8 03 fa ff ff       	call   c0014276 <Device::~Device()>
c0014873:	83 c4 10             	add    esp,0x10
c0014876:	90                   	nop
c0014877:	83 c4 0c             	add    esp,0xc
c001487a:	c3                   	ret    
c001487b:	90                   	nop

c001487c <PhysicalDisk::~PhysicalDisk()>:
c001487c:	83 ec 0c             	sub    esp,0xc
c001487f:	83 ec 0c             	sub    esp,0xc
c0014882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014886:	e8 cd ff ff ff       	call   c0014858 <PhysicalDisk::~PhysicalDisk()>
c001488b:	83 c4 10             	add    esp,0x10
c001488e:	83 ec 08             	sub    esp,0x8
c0014891:	68 6c 01 00 00       	push   0x16c
c0014896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001489a:	e8 fe e5 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	83 c4 0c             	add    esp,0xc
c00148a5:	c3                   	ret    

c00148a6 <FPU::FPU(char const*)>:
c00148a6:	83 ec 0c             	sub    esp,0xc
c00148a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ad:	83 ec 08             	sub    esp,0x8
c00148b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148b4:	50                   	push   eax
c00148b5:	e8 da fc ff ff       	call   c0014594 <Device::Device(char const*)>
c00148ba:	83 c4 10             	add    esp,0x10
c00148bd:	ba 48 af 02 c0       	mov    edx,0xc002af48
c00148c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c6:	89 10                	mov    DWORD PTR [eax],edx
c00148c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148cc:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148d6:	90                   	nop
c00148d7:	83 c4 0c             	add    esp,0xc
c00148da:	c3                   	ret    
c00148db:	90                   	nop

c00148dc <FPU::~FPU()>:
c00148dc:	83 ec 0c             	sub    esp,0xc
c00148df:	ba 48 af 02 c0       	mov    edx,0xc002af48
c00148e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148e8:	89 10                	mov    DWORD PTR [eax],edx
c00148ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ee:	83 ec 0c             	sub    esp,0xc
c00148f1:	50                   	push   eax
c00148f2:	e8 7f f9 ff ff       	call   c0014276 <Device::~Device()>
c00148f7:	83 c4 10             	add    esp,0x10
c00148fa:	90                   	nop
c00148fb:	83 c4 0c             	add    esp,0xc
c00148fe:	c3                   	ret    
c00148ff:	90                   	nop

c0014900 <FPU::~FPU()>:
c0014900:	83 ec 0c             	sub    esp,0xc
c0014903:	83 ec 0c             	sub    esp,0xc
c0014906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001490a:	e8 cd ff ff ff       	call   c00148dc <FPU::~FPU()>
c001490f:	83 c4 10             	add    esp,0x10
c0014912:	83 ec 08             	sub    esp,0x8
c0014915:	68 58 01 00 00       	push   0x158
c001491a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001491e:	e8 7a e5 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0014923:	83 c4 10             	add    esp,0x10
c0014926:	83 c4 0c             	add    esp,0xc
c0014929:	c3                   	ret    

c001492a <setupFPU()>:
c001492a:	53                   	push   ebx
c001492b:	83 ec 08             	sub    esp,0x8
c001492e:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c0014934:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001493b:	74 19                	je     c0014956 <setupFPU()+0x2c>
c001493d:	83 ec 0c             	sub    esp,0xc
c0014940:	68 58 01 00 00       	push   0x158
c0014945:	e8 f6 ae ff ff       	call   c000f840 <malloc>
c001494a:	89 c3                	mov    ebx,eax
c001494c:	89 04 24             	mov    DWORD PTR [esp],eax
c001494f:	e8 66 0c 01 00       	call   c00255ba <AVX::AVX()>
c0014954:	eb 5b                	jmp    c00149b1 <setupFPU()+0x87>
c0014956:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001495c:	84 c0                	test   al,al
c001495e:	79 19                	jns    c0014979 <setupFPU()+0x4f>
c0014960:	83 ec 0c             	sub    esp,0xc
c0014963:	68 58 01 00 00       	push   0x158
c0014968:	e8 d3 ae ff ff       	call   c000f840 <malloc>
c001496d:	89 c3                	mov    ebx,eax
c001496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014972:	e8 69 0d 01 00       	call   c00256e0 <SSE::SSE()>
c0014977:	eb 38                	jmp    c00149b1 <setupFPU()+0x87>
c0014979:	a8 20                	test   al,0x20
c001497b:	74 19                	je     c0014996 <setupFPU()+0x6c>
c001497d:	83 ec 0c             	sub    esp,0xc
c0014980:	68 58 01 00 00       	push   0x158
c0014985:	e8 b6 ae ff ff       	call   c000f840 <malloc>
c001498a:	89 c3                	mov    ebx,eax
c001498c:	89 04 24             	mov    DWORD PTR [esp],eax
c001498f:	e8 b6 0c 01 00       	call   c002564a <MMX::MMX()>
c0014994:	eb 1b                	jmp    c00149b1 <setupFPU()+0x87>
c0014996:	a8 10                	test   al,0x10
c0014998:	74 1c                	je     c00149b6 <setupFPU()+0x8c>
c001499a:	83 ec 0c             	sub    esp,0xc
c001499d:	68 58 01 00 00       	push   0x158
c00149a2:	e8 99 ae ff ff       	call   c000f840 <malloc>
c00149a7:	89 c3                	mov    ebx,eax
c00149a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00149ac:	e8 bd 0d 01 00       	call   c002576e <x87::x87()>
c00149b1:	83 c4 10             	add    esp,0x10
c00149b4:	eb 24                	jmp    c00149da <setupFPU()+0xb0>
c00149b6:	83 e0 ef             	and    eax,0xffffffef
c00149b9:	83 ec 0c             	sub    esp,0xc
c00149bc:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00149c2:	68 34 af 02 c0       	push   0xc002af34
c00149c7:	e8 b1 e5 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00149cc:	0f 20 c0             	mov    eax,cr0
c00149cf:	83 c8 04             	or     eax,0x4
c00149d2:	0f 22 c0             	mov    cr0,eax
c00149d5:	31 db                	xor    ebx,ebx
c00149d7:	83 c4 10             	add    esp,0x10
c00149da:	89 d8                	mov    eax,ebx
c00149dc:	83 c4 08             	add    esp,0x8
c00149df:	5b                   	pop    ebx
c00149e0:	c3                   	ret    
c00149e1:	90                   	nop

c00149e2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149ea:	c1 e0 04             	shl    eax,0x4
c00149ed:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149f1:	8d 50 10             	lea    edx,[eax+0x10]
c00149f4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149fa:	74 08                	je     c0014a04 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149fc:	83 c0 04             	add    eax,0x4
c00149ff:	39 d0                	cmp    eax,edx
c0014a01:	75 f1                	jne    c00149f4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a03:	c3                   	ret    
c0014a04:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a0e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a18:	eb e2                	jmp    c00149fc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a1a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a1a:	57                   	push   edi
c0014a1b:	31 c0                	xor    eax,eax
c0014a1d:	56                   	push   esi
c0014a1e:	53                   	push   ebx
c0014a1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a23:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a27:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a2b:	89 da                	mov    edx,ebx
c0014a2d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a31:	c1 e2 04             	shl    edx,0x4
c0014a34:	01 ca                	add    edx,ecx
c0014a36:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a3e:	74 16                	je     c0014a56 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a40:	40                   	inc    eax
c0014a41:	83 f8 04             	cmp    eax,0x4
c0014a44:	75 f0                	jne    c0014a36 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a46:	c7 44 24 10 78 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af78
c0014a4e:	5b                   	pop    ebx
c0014a4f:	5e                   	pop    esi
c0014a50:	5f                   	pop    edi
c0014a51:	e9 d9 5b 00 00       	jmp    c001a62f <Krnl::panic(char const*)>
c0014a56:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a59:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a5c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a62:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a68:	5b                   	pop    ebx
c0014a69:	5e                   	pop    esi
c0014a6a:	5f                   	pop    edi
c0014a6b:	c3                   	ret    

c0014a6c <doubleFault(regs*, void*)>:
c0014a6c:	55                   	push   ebp
c0014a6d:	89 e5                	mov    ebp,esp
c0014a6f:	83 ec 08             	sub    esp,0x8
c0014a72:	83 ec 0c             	sub    esp,0xc
c0014a75:	68 b3 af 02 c0       	push   0xc002afb3
c0014a7a:	e8 b0 5b 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0014a7f:	83 c4 10             	add    esp,0x10
c0014a82:	90                   	nop
c0014a83:	c9                   	leave  
c0014a84:	c3                   	ret    
c0014a85:	90                   	nop

c0014a86 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a86:	56                   	push   esi
c0014a87:	53                   	push   ebx
c0014a88:	50                   	push   eax
c0014a89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a91:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a96:	75 35                	jne    c0014acd <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a98:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a9b:	31 d2                	xor    edx,edx
c0014a9d:	89 c1                	mov    ecx,eax
c0014a9f:	c1 e1 04             	shl    ecx,0x4
c0014aa2:	01 f1                	add    ecx,esi
c0014aa4:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014aac:	74 3e                	je     c0014aec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014aae:	42                   	inc    edx
c0014aaf:	83 fa 04             	cmp    edx,0x4
c0014ab2:	75 f0                	jne    c0014aa4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014ab4:	83 ec 0c             	sub    esp,0xc
c0014ab7:	68 f8 af 02 c0       	push   0xc002aff8
c0014abc:	e8 6e 5b 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0014ac1:	83 c4 10             	add    esp,0x10
c0014ac4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014ac9:	5a                   	pop    edx
c0014aca:	5b                   	pop    ebx
c0014acb:	5e                   	pop    esi
c0014acc:	c3                   	ret    
c0014acd:	83 ec 0c             	sub    esp,0xc
c0014ad0:	56                   	push   esi
c0014ad1:	e8 ba fb ff ff       	call   c0014690 <Device::getName()>
c0014ad6:	83 c4 10             	add    esp,0x10
c0014ad9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014adc:	75 ba                	jne    c0014a98 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ade:	83 fb 0f             	cmp    ebx,0xf
c0014ae1:	7f 29                	jg     c0014b0c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014ae3:	0f b6 9b c0 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2740]
c0014aea:	eb ac                	jmp    c0014a98 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014aec:	8d 04 82             	lea    eax,[edx+eax*4]
c0014aef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014af3:	8d 04 86             	lea    eax,[esi+eax*4]
c0014af6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014afc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b00:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b06:	89 d8                	mov    eax,ebx
c0014b08:	5a                   	pop    edx
c0014b09:	5b                   	pop    ebx
c0014b0a:	5e                   	pop    esi
c0014b0b:	c3                   	ret    
c0014b0c:	83 ec 0c             	sub    esp,0xc
c0014b0f:	68 c0 af 02 c0       	push   0xc002afc0
c0014b14:	e8 16 5b 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0014b19:	83 c4 10             	add    esp,0x10
c0014b1c:	e9 77 ff ff ff       	jmp    c0014a98 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b21:	90                   	nop

c0014b22 <InterruptController::clearAllHandlers(int, bool)>:
c0014b22:	56                   	push   esi
c0014b23:	53                   	push   ebx
c0014b24:	52                   	push   edx
c0014b25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b2d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b32:	75 61                	jne    c0014b95 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b34:	8d 46 20             	lea    eax,[esi+0x20]
c0014b37:	c1 e6 04             	shl    esi,0x4
c0014b3a:	c1 e0 04             	shl    eax,0x4
c0014b3d:	01 de                	add    esi,ebx
c0014b3f:	01 d8                	add    eax,ebx
c0014b41:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b4b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b55:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b5f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b69:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b73:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b7d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b87:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b91:	58                   	pop    eax
c0014b92:	5b                   	pop    ebx
c0014b93:	5e                   	pop    esi
c0014b94:	c3                   	ret    
c0014b95:	83 ec 0c             	sub    esp,0xc
c0014b98:	53                   	push   ebx
c0014b99:	e8 f2 fa ff ff       	call   c0014690 <Device::getName()>
c0014b9e:	83 c4 10             	add    esp,0x10
c0014ba1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ba4:	75 8e                	jne    c0014b34 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ba6:	83 fe 0f             	cmp    esi,0xf
c0014ba9:	7f 09                	jg     c0014bb4 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014bab:	0f b6 b6 c0 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2740]
c0014bb2:	eb 80                	jmp    c0014b34 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bb4:	83 ec 0c             	sub    esp,0xc
c0014bb7:	68 34 b0 02 c0       	push   0xc002b034
c0014bbc:	e8 6e 5a 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0014bc1:	83 c4 10             	add    esp,0x10
c0014bc4:	e9 6b ff ff ff       	jmp    c0014b34 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bc9:	90                   	nop

c0014bca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014bca:	56                   	push   esi
c0014bcb:	53                   	push   ebx
c0014bcc:	52                   	push   edx
c0014bcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bd1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014bd5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014bda:	75 3a                	jne    c0014c16 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014bdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014be0:	8d 50 20             	lea    edx,[eax+0x20]
c0014be3:	c1 e2 04             	shl    edx,0x4
c0014be6:	8d 04 16             	lea    eax,[esi+edx*1]
c0014be9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014bed:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014bf3:	74 0b                	je     c0014c00 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014bf5:	83 c0 04             	add    eax,0x4
c0014bf8:	39 d0                	cmp    eax,edx
c0014bfa:	75 f1                	jne    c0014bed <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bfc:	58                   	pop    eax
c0014bfd:	5b                   	pop    ebx
c0014bfe:	5e                   	pop    esi
c0014bff:	c3                   	ret    
c0014c00:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c0a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c14:	eb df                	jmp    c0014bf5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c16:	83 ec 0c             	sub    esp,0xc
c0014c19:	56                   	push   esi
c0014c1a:	e8 71 fa ff ff       	call   c0014690 <Device::getName()>
c0014c1f:	83 c4 10             	add    esp,0x10
c0014c22:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c25:	75 b5                	jne    c0014bdc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c27:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c2c:	7f 11                	jg     c0014c3f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c32:	0f b6 80 c0 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2740]
c0014c39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c3d:	eb 9d                	jmp    c0014bdc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c3f:	83 ec 0c             	sub    esp,0xc
c0014c42:	68 34 b0 02 c0       	push   0xc002b034
c0014c47:	e8 e3 59 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0014c4c:	83 c4 10             	add    esp,0x10
c0014c4f:	eb 8b                	jmp    c0014bdc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c51 <nmiHandler(regs*, void*)>:
c0014c51:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014c56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c5a:	e9 2d a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c5f <int_handler>:
c0014c5f:	55                   	push   ebp
c0014c60:	57                   	push   edi
c0014c61:	56                   	push   esi
c0014c62:	53                   	push   ebx
c0014c63:	83 ec 0c             	sub    esp,0xc
c0014c66:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c6a:	80 3d c4 11 03 c0 00 	cmp    BYTE PTR ds:0xc00311c4,0x0
c0014c71:	74 0b                	je     c0014c7e <int_handler+0x1f>
c0014c73:	fa                   	cli    
c0014c74:	f4                   	hlt    
c0014c75:	80 3d c4 11 03 c0 00 	cmp    BYTE PTR ds:0xc00311c4,0x0
c0014c7c:	75 f5                	jne    c0014c73 <int_handler+0x14>
c0014c7e:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0014c83:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c8c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c92:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c95:	83 f8 17             	cmp    eax,0x17
c0014c98:	77 13                	ja     c0014cad <int_handler+0x4e>
c0014c9a:	83 ec 08             	sub    esp,0x8
c0014c9d:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c9f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ca2:	0f b6 c0             	movzx  eax,al
c0014ca5:	50                   	push   eax
c0014ca6:	57                   	push   edi
c0014ca7:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014caa:	83 c4 10             	add    esp,0x10
c0014cad:	83 c3 15             	add    ebx,0x15
c0014cb0:	c1 e3 04             	shl    ebx,0x4
c0014cb3:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014cb7:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014cbe:	31 db                	xor    ebx,ebx
c0014cc0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014cc4:	85 c0                	test   eax,eax
c0014cc6:	74 13                	je     c0014cdb <int_handler+0x7c>
c0014cc8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ccb:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014ccf:	74 1c                	je     c0014ced <int_handler+0x8e>
c0014cd1:	83 ec 08             	sub    esp,0x8
c0014cd4:	52                   	push   edx
c0014cd5:	56                   	push   esi
c0014cd6:	ff d0                	call   eax
c0014cd8:	83 c4 10             	add    esp,0x10
c0014cdb:	43                   	inc    ebx
c0014cdc:	83 fb 04             	cmp    ebx,0x4
c0014cdf:	75 df                	jne    c0014cc0 <int_handler+0x61>
c0014ce1:	83 c4 0c             	add    esp,0xc
c0014ce4:	31 c0                	xor    eax,eax
c0014ce6:	5b                   	pop    ebx
c0014ce7:	31 d2                	xor    edx,edx
c0014ce9:	5e                   	pop    esi
c0014cea:	5f                   	pop    edi
c0014ceb:	5d                   	pop    ebp
c0014cec:	c3                   	ret    
c0014ced:	83 ec 08             	sub    esp,0x8
c0014cf0:	52                   	push   edx
c0014cf1:	56                   	push   esi
c0014cf2:	ff d0                	call   eax
c0014cf4:	83 c4 10             	add    esp,0x10
c0014cf7:	83 c4 0c             	add    esp,0xc
c0014cfa:	5b                   	pop    ebx
c0014cfb:	5e                   	pop    esi
c0014cfc:	5f                   	pop    edi
c0014cfd:	5d                   	pop    ebp
c0014cfe:	c3                   	ret    
c0014cff:	90                   	nop

c0014d00 <InterruptController::InterruptController(char const*)>:
c0014d00:	83 ec 1c             	sub    esp,0x1c
c0014d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d07:	83 ec 08             	sub    esp,0x8
c0014d0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d0e:	50                   	push   eax
c0014d0f:	e8 80 f8 ff ff       	call   c0014594 <Device::Device(char const*)>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	ba dc b2 02 c0       	mov    edx,0xc002b2dc
c0014d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d20:	89 10                	mov    DWORD PTR [eax],edx
c0014d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d26:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d30:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d38:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d40:	7f 5e                	jg     c0014da0 <InterruptController::InterruptController(char const*)+0xa0>
c0014d42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d4a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d4f:	7f 49                	jg     c0014d9a <InterruptController::InterruptController(char const*)+0x9a>
c0014d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d59:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d64:	01 ca                	add    edx,ecx
c0014d66:	83 c2 54             	add    edx,0x54
c0014d69:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d79:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d84:	01 ca                	add    edx,ecx
c0014d86:	81 c2 54 04 00 00    	add    edx,0x454
c0014d8c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d94:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d98:	eb b0                	jmp    c0014d4a <InterruptController::InterruptController(char const*)+0x4a>
c0014d9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d9e:	eb 98                	jmp    c0014d38 <InterruptController::InterruptController(char const*)+0x38>
c0014da0:	90                   	nop
c0014da1:	83 c4 1c             	add    esp,0x1c
c0014da4:	c3                   	ret    
c0014da5:	90                   	nop

c0014da6 <InterruptController::~InterruptController()>:
c0014da6:	83 ec 0c             	sub    esp,0xc
c0014da9:	ba dc b2 02 c0       	mov    edx,0xc002b2dc
c0014dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014db2:	89 10                	mov    DWORD PTR [eax],edx
c0014db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014db8:	83 ec 0c             	sub    esp,0xc
c0014dbb:	50                   	push   eax
c0014dbc:	e8 b5 f4 ff ff       	call   c0014276 <Device::~Device()>
c0014dc1:	83 c4 10             	add    esp,0x10
c0014dc4:	90                   	nop
c0014dc5:	83 c4 0c             	add    esp,0xc
c0014dc8:	c3                   	ret    
c0014dc9:	90                   	nop

c0014dca <InterruptController::~InterruptController()>:
c0014dca:	83 ec 0c             	sub    esp,0xc
c0014dcd:	83 ec 0c             	sub    esp,0xc
c0014dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dd4:	e8 cd ff ff ff       	call   c0014da6 <InterruptController::~InterruptController()>
c0014dd9:	83 c4 10             	add    esp,0x10
c0014ddc:	83 ec 08             	sub    esp,0x8
c0014ddf:	68 58 21 00 00       	push   0x2158
c0014de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014de8:	e8 b0 e0 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0014ded:	83 c4 10             	add    esp,0x10
c0014df0:	83 c4 0c             	add    esp,0xc
c0014df3:	c3                   	ret    

c0014df4 <displayDebugInfo(regs*)>:
c0014df4:	55                   	push   ebp
c0014df5:	57                   	push   edi
c0014df6:	56                   	push   esi
c0014df7:	53                   	push   ebx
c0014df8:	83 ec 24             	sub    esp,0x24
c0014dfb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014dff:	0f 20 c2             	mov    edx,cr0
c0014e02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e06:	0f 20 d7             	mov    edi,cr2
c0014e09:	0f 20 de             	mov    esi,cr3
c0014e0c:	0f 20 e5             	mov    ebp,cr4
c0014e0f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e12:	68 6e b0 02 c0       	push   0xc002b06e
c0014e17:	e8 61 e1 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014e1c:	59                   	pop    ecx
c0014e1d:	58                   	pop    eax
c0014e1e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e21:	68 79 b0 02 c0       	push   0xc002b079
c0014e26:	e8 52 e1 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014e2b:	58                   	pop    eax
c0014e2c:	5a                   	pop    edx
c0014e2d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e30:	68 84 b0 02 c0       	push   0xc002b084
c0014e35:	e8 43 e1 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014e3a:	59                   	pop    ecx
c0014e3b:	58                   	pop    eax
c0014e3c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e3f:	68 8f b0 02 c0       	push   0xc002b08f
c0014e44:	e8 34 e1 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014e49:	58                   	pop    eax
c0014e4a:	5a                   	pop    edx
c0014e4b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e4e:	68 9a b0 02 c0       	push   0xc002b09a
c0014e53:	e8 25 e1 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014e58:	59                   	pop    ecx
c0014e59:	58                   	pop    eax
c0014e5a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e5d:	68 a5 b0 02 c0       	push   0xc002b0a5
c0014e62:	e8 16 e1 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014e67:	58                   	pop    eax
c0014e68:	5a                   	pop    edx
c0014e69:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e6c:	68 b0 b0 02 c0       	push   0xc002b0b0
c0014e71:	e8 07 e1 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014e76:	59                   	pop    ecx
c0014e77:	58                   	pop    eax
c0014e78:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e7b:	68 bb b0 02 c0       	push   0xc002b0bb
c0014e80:	e8 f8 e0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014e85:	58                   	pop    eax
c0014e86:	5a                   	pop    edx
c0014e87:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e8a:	68 c6 b0 02 c0       	push   0xc002b0c6
c0014e8f:	e8 e9 e0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014e94:	59                   	pop    ecx
c0014e95:	58                   	pop    eax
c0014e96:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e99:	68 d5 b0 02 c0       	push   0xc002b0d5
c0014e9e:	e8 da e0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014ea3:	58                   	pop    eax
c0014ea4:	5a                   	pop    edx
c0014ea5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ea8:	68 e0 b0 02 c0       	push   0xc002b0e0
c0014ead:	e8 cb e0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014eb2:	59                   	pop    ecx
c0014eb3:	58                   	pop    eax
c0014eb4:	57                   	push   edi
c0014eb5:	68 eb b0 02 c0       	push   0xc002b0eb
c0014eba:	e8 be e0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014ebf:	58                   	pop    eax
c0014ec0:	5a                   	pop    edx
c0014ec1:	56                   	push   esi
c0014ec2:	68 f6 b0 02 c0       	push   0xc002b0f6
c0014ec7:	e8 b1 e0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0014ecc:	59                   	pop    ecx
c0014ecd:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014ed2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed8:	e8 6c be ff ff       	call   c0010d49 <setActiveTerminal(VgaText*)>
c0014edd:	58                   	pop    eax
c0014ede:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ee1:	5a                   	pop    edx
c0014ee2:	c1 e0 05             	shl    eax,0x5
c0014ee5:	05 20 d6 02 c0       	add    eax,0xc002d620
c0014eea:	50                   	push   eax
c0014eeb:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014ef0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef6:	e8 6d c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014efb:	59                   	pop    ecx
c0014efc:	58                   	pop    eax
c0014efd:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014f02:	68 01 b1 02 c0       	push   0xc002b101
c0014f07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0d:	e8 56 c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014f12:	58                   	pop    eax
c0014f13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f18:	5a                   	pop    edx
c0014f19:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f1c:	83 c0 0c             	add    eax,0xc
c0014f1f:	50                   	push   eax
c0014f20:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014f25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2b:	e8 38 c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014f30:	59                   	pop    ecx
c0014f31:	58                   	pop    eax
c0014f32:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014f37:	68 0a b1 02 c0       	push   0xc002b10a
c0014f3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f42:	e8 21 c2 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014f47:	58                   	pop    eax
c0014f48:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014f4d:	5a                   	pop    edx
c0014f4e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f57:	e8 32 c2 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014f5c:	59                   	pop    ecx
c0014f5d:	58                   	pop    eax
c0014f5e:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014f63:	68 12 b1 02 c0       	push   0xc002b112
c0014f68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6e:	e8 f5 c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014f73:	58                   	pop    eax
c0014f74:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014f79:	5a                   	pop    edx
c0014f7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f83:	e8 06 c2 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014f88:	59                   	pop    ecx
c0014f89:	58                   	pop    eax
c0014f8a:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014f8f:	68 1a b1 02 c0       	push   0xc002b11a
c0014f94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9a:	e8 c9 c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014f9f:	58                   	pop    eax
c0014fa0:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014fa5:	5a                   	pop    edx
c0014fa6:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014fa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014faf:	e8 da c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014fb4:	59                   	pop    ecx
c0014fb5:	58                   	pop    eax
c0014fb6:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014fbb:	68 22 b1 02 c0       	push   0xc002b122
c0014fc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc6:	e8 9d c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014fcb:	58                   	pop    eax
c0014fcc:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014fd1:	5a                   	pop    edx
c0014fd2:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fd5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fdb:	e8 ae c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0014fe0:	59                   	pop    ecx
c0014fe1:	58                   	pop    eax
c0014fe2:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014fe7:	68 2a b1 02 c0       	push   0xc002b12a
c0014fec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff2:	e8 71 c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0014ff7:	58                   	pop    eax
c0014ff8:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0014ffd:	5a                   	pop    edx
c0014ffe:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0015001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015007:	e8 82 c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001500c:	59                   	pop    ecx
c001500d:	58                   	pop    eax
c001500e:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015013:	68 32 b1 02 c0       	push   0xc002b132
c0015018:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501e:	e8 45 c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015023:	58                   	pop    eax
c0015024:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015029:	5a                   	pop    edx
c001502a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001502d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015033:	e8 56 c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0015038:	59                   	pop    ecx
c0015039:	58                   	pop    eax
c001503a:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001503f:	68 3a b1 02 c0       	push   0xc002b13a
c0015044:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504a:	e8 19 c1 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001504f:	58                   	pop    eax
c0015050:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015055:	5a                   	pop    edx
c0015056:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001505a:	52                   	push   edx
c001505b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015061:	e8 28 c1 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0015066:	59                   	pop    ecx
c0015067:	58                   	pop    eax
c0015068:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001506d:	68 43 b1 02 c0       	push   0xc002b143
c0015072:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015078:	e8 eb c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001507d:	58                   	pop    eax
c001507e:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015083:	5a                   	pop    edx
c0015084:	57                   	push   edi
c0015085:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508b:	e8 fe c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0015090:	59                   	pop    ecx
c0015091:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015096:	5f                   	pop    edi
c0015097:	68 4b b1 02 c0       	push   0xc002b14b
c001509c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a2:	e8 c1 c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c00150a7:	58                   	pop    eax
c00150a8:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c00150ad:	5a                   	pop    edx
c00150ae:	56                   	push   esi
c00150af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b5:	e8 d4 c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c00150ba:	59                   	pop    ecx
c00150bb:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c00150c0:	5e                   	pop    esi
c00150c1:	68 53 b1 02 c0       	push   0xc002b153
c00150c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cc:	e8 97 c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c00150d1:	5f                   	pop    edi
c00150d2:	58                   	pop    eax
c00150d3:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c00150d8:	55                   	push   ebp
c00150d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150df:	e8 aa c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c00150e4:	58                   	pop    eax
c00150e5:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c00150ea:	5a                   	pop    edx
c00150eb:	68 5b b1 02 c0       	push   0xc002b15b
c00150f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f6:	e8 6d c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c00150fb:	0f 21 c0             	mov    eax,db0
c00150fe:	59                   	pop    ecx
c00150ff:	5e                   	pop    esi
c0015100:	50                   	push   eax
c0015101:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015106:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510c:	e8 7d c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0015111:	5f                   	pop    edi
c0015112:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015117:	5d                   	pop    ebp
c0015118:	68 64 b1 02 c0       	push   0xc002b164
c001511d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015123:	e8 40 c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015128:	0f 21 c8             	mov    eax,db1
c001512b:	5a                   	pop    edx
c001512c:	59                   	pop    ecx
c001512d:	50                   	push   eax
c001512e:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015133:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015139:	e8 50 c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001513e:	5e                   	pop    esi
c001513f:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015144:	5f                   	pop    edi
c0015145:	68 6c b1 02 c0       	push   0xc002b16c
c001514a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015150:	e8 13 c0 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015155:	0f 21 d0             	mov    eax,db2
c0015158:	5d                   	pop    ebp
c0015159:	5a                   	pop    edx
c001515a:	50                   	push   eax
c001515b:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015160:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015166:	e8 23 c0 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001516b:	59                   	pop    ecx
c001516c:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015171:	5e                   	pop    esi
c0015172:	68 74 b1 02 c0       	push   0xc002b174
c0015177:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001517d:	e8 e6 bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015182:	0f 21 d8             	mov    eax,db3
c0015185:	5f                   	pop    edi
c0015186:	5d                   	pop    ebp
c0015187:	50                   	push   eax
c0015188:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001518d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015193:	e8 f6 bf ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c0015198:	58                   	pop    eax
c0015199:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001519e:	5a                   	pop    edx
c001519f:	68 7c b1 02 c0       	push   0xc002b17c
c00151a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151aa:	e8 b9 bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c00151af:	0f 21 f0             	mov    eax,db6
c00151b2:	59                   	pop    ecx
c00151b3:	5e                   	pop    esi
c00151b4:	50                   	push   eax
c00151b5:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c00151ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c0:	e8 c9 bf ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c00151c5:	5f                   	pop    edi
c00151c6:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c00151cb:	5d                   	pop    ebp
c00151cc:	68 84 b1 02 c0       	push   0xc002b184
c00151d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151d7:	e8 8c bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c00151dc:	0f 21 f8             	mov    eax,db7
c00151df:	5a                   	pop    edx
c00151e0:	59                   	pop    ecx
c00151e1:	50                   	push   eax
c00151e2:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c00151e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ed:	e8 9c bf ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c00151f2:	5e                   	pop    esi
c00151f3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151f6:	e8 60 85 00 00       	call   c001d75b <Thr::getDriverNameFromAddress(unsigned long)>
c00151fb:	83 c4 10             	add    esp,0x10
c00151fe:	85 c0                	test   eax,eax
c0015200:	74 7d                	je     c001527f <displayDebugInfo(regs*)+0x48b>
c0015202:	89 c6                	mov    esi,eax
c0015204:	50                   	push   eax
c0015205:	50                   	push   eax
c0015206:	56                   	push   esi
c0015207:	68 8c b1 02 c0       	push   0xc002b18c
c001520c:	e8 6c dd ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0015211:	5a                   	pop    edx
c0015212:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015217:	59                   	pop    ecx
c0015218:	68 9a b1 02 c0       	push   0xc002b19a
c001521d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015223:	e8 40 bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015228:	5f                   	pop    edi
c0015229:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001522e:	5d                   	pop    ebp
c001522f:	56                   	push   esi
c0015230:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015236:	e8 2d bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001523b:	58                   	pop    eax
c001523c:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015241:	5a                   	pop    edx
c0015242:	68 a6 b1 02 c0       	push   0xc002b1a6
c0015247:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001524d:	e8 16 bf ff ff       	call   c0011168 <VgaText::puts(char const*)>
c0015252:	59                   	pop    ecx
c0015253:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0015258:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001525e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015261:	e8 2c 85 00 00       	call   c001d792 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015266:	5b                   	pop    ebx
c0015267:	5d                   	pop    ebp
c0015268:	50                   	push   eax
c0015269:	57                   	push   edi
c001526a:	e8 1f bf ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001526f:	58                   	pop    eax
c0015270:	5a                   	pop    edx
c0015271:	56                   	push   esi
c0015272:	68 b2 b1 02 c0       	push   0xc002b1b2
c0015277:	e8 01 dd ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001527c:	83 c4 10             	add    esp,0x10
c001527f:	fa                   	cli    
c0015280:	f4                   	hlt    
c0015281:	eb fe                	jmp    c0015281 <displayDebugInfo(regs*)+0x48d>

c0015283 <x87EmulHandler(regs*, void*)>:
c0015283:	53                   	push   ebx
c0015284:	83 ec 14             	sub    esp,0x14
c0015287:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001528b:	53                   	push   ebx
c001528c:	e8 57 a8 00 00       	call   c001fae8 <Vm::x87Handler(regs*)>
c0015291:	83 c4 10             	add    esp,0x10
c0015294:	84 c0                	test   al,al
c0015296:	74 05                	je     c001529d <x87EmulHandler(regs*, void*)+0x1a>
c0015298:	83 c4 08             	add    esp,0x8
c001529b:	5b                   	pop    ebx
c001529c:	c3                   	ret    
c001529d:	83 ec 0c             	sub    esp,0xc
c00152a0:	68 c2 b1 02 c0       	push   0xc002b1c2
c00152a5:	e8 d3 dc ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00152aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152ad:	e8 42 fb ff ff       	call   c0014df4 <displayDebugInfo(regs*)>

c00152b2 <gpFault(regs*, void*)>:
c00152b2:	53                   	push   ebx
c00152b3:	83 ec 14             	sub    esp,0x14
c00152b6:	c7 05 14 e8 02 c0 65 ee 01 c0 	mov    DWORD PTR ds:0xc002e814,0xc001ee65
c00152c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152c4:	53                   	push   ebx
c00152c5:	e8 9b 9b 00 00       	call   c001ee65 <Vm::faultHandler(regs*)>
c00152ca:	83 c4 10             	add    esp,0x10
c00152cd:	84 c0                	test   al,al
c00152cf:	74 05                	je     c00152d6 <gpFault(regs*, void*)+0x24>
c00152d1:	83 c4 08             	add    esp,0x8
c00152d4:	5b                   	pop    ebx
c00152d5:	c3                   	ret    
c00152d6:	83 ec 0c             	sub    esp,0xc
c00152d9:	68 d8 b1 02 c0       	push   0xc002b1d8
c00152de:	e8 9a dc ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00152e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152e6:	e8 09 fb ff ff       	call   c0014df4 <displayDebugInfo(regs*)>

c00152eb <pgFault(regs*, void*)>:
c00152eb:	53                   	push   ebx
c00152ec:	83 ec 14             	sub    esp,0x14
c00152ef:	68 f3 b1 02 c0       	push   0xc002b1f3
c00152f4:	e8 84 dc ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00152f9:	0f 20 d3             	mov    ebx,cr2
c00152fc:	58                   	pop    eax
c00152fd:	5a                   	pop    edx
c00152fe:	53                   	push   ebx
c00152ff:	68 00 b2 02 c0       	push   0xc002b200
c0015304:	e8 74 dc ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0015309:	59                   	pop    ecx
c001530a:	58                   	pop    eax
c001530b:	53                   	push   ebx
c001530c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015311:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015314:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001531a:	e8 49 d8 ff ff       	call   c0012b68 <VAS::tryLoadBackOffDisk(unsigned long)>
c001531f:	83 c4 10             	add    esp,0x10
c0015322:	84 c0                	test   al,al
c0015324:	74 05                	je     c001532b <pgFault(regs*, void*)+0x40>
c0015326:	83 c4 08             	add    esp,0x8
c0015329:	5b                   	pop    ebx
c001532a:	c3                   	ret    
c001532b:	83 ec 0c             	sub    esp,0xc
c001532e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015332:	e8 bd fa ff ff       	call   c0014df4 <displayDebugInfo(regs*)>

c0015337 <otherISRHandler(regs*, void*)>:
c0015337:	53                   	push   ebx
c0015338:	83 ec 0c             	sub    esp,0xc
c001533b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001533f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015342:	50                   	push   eax
c0015343:	50                   	push   eax
c0015344:	68 0c b2 02 c0       	push   0xc002b20c
c0015349:	e8 2f dc ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001534e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015351:	e8 9e fa ff ff       	call   c0014df4 <displayDebugInfo(regs*)>

c0015356 <opcodeFault(regs*, void*)>:
c0015356:	55                   	push   ebp
c0015357:	89 e5                	mov    ebp,esp
c0015359:	56                   	push   esi
c001535a:	53                   	push   ebx
c001535b:	83 ec 40             	sub    esp,0x40
c001535e:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0015363:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015369:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001536f:	84 c0                	test   al,al
c0015371:	74 24                	je     c0015397 <opcodeFault(regs*, void*)+0x41>
c0015373:	83 ec 0c             	sub    esp,0xc
c0015376:	68 2c b2 02 c0       	push   0xc002b22c
c001537b:	e8 fd db ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0015380:	83 c4 10             	add    esp,0x10
c0015383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015386:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015389:	8d 50 19             	lea    edx,[eax+0x19]
c001538c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015392:	e9 be 05 00 00       	jmp    c0015955 <opcodeFault(regs*, void*)+0x5ff>
c0015397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001539d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153a0:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00153a4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00153a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ae:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00153b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b4:	8a 00                	mov    al,BYTE PTR [eax]
c00153b6:	3c f0                	cmp    al,0xf0
c00153b8:	75 17                	jne    c00153d1 <opcodeFault(regs*, void*)+0x7b>
c00153ba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c3:	8d 50 01             	lea    edx,[eax+0x1]
c00153c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153cc:	e9 da 00 00 00       	jmp    c00154ab <opcodeFault(regs*, void*)+0x155>
c00153d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d4:	8a 00                	mov    al,BYTE PTR [eax]
c00153d6:	3c f2                	cmp    al,0xf2
c00153d8:	74 09                	je     c00153e3 <opcodeFault(regs*, void*)+0x8d>
c00153da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dd:	8a 00                	mov    al,BYTE PTR [eax]
c00153df:	3c f3                	cmp    al,0xf3
c00153e1:	75 1b                	jne    c00153fe <opcodeFault(regs*, void*)+0xa8>
c00153e3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f0:	8d 50 01             	lea    edx,[eax+0x1]
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f9:	e9 ad 00 00 00       	jmp    c00154ab <opcodeFault(regs*, void*)+0x155>
c00153fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015401:	8a 00                	mov    al,BYTE PTR [eax]
c0015403:	3c 66                	cmp    al,0x66
c0015405:	75 1f                	jne    c0015426 <opcodeFault(regs*, void*)+0xd0>
c0015407:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001540b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001540f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015415:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015418:	8d 50 01             	lea    edx,[eax+0x1]
c001541b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015421:	e9 85 00 00 00       	jmp    c00154ab <opcodeFault(regs*, void*)+0x155>
c0015426:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015429:	8a 00                	mov    al,BYTE PTR [eax]
c001542b:	3c 67                	cmp    al,0x67
c001542d:	75 18                	jne    c0015447 <opcodeFault(regs*, void*)+0xf1>
c001542f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015433:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015439:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001543c:	8d 50 01             	lea    edx,[eax+0x1]
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015445:	eb 64                	jmp    c00154ab <opcodeFault(regs*, void*)+0x155>
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	8a 00                	mov    al,BYTE PTR [eax]
c001544c:	3c 2e                	cmp    al,0x2e
c001544e:	74 09                	je     c0015459 <opcodeFault(regs*, void*)+0x103>
c0015450:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015453:	8a 00                	mov    al,BYTE PTR [eax]
c0015455:	3c 3e                	cmp    al,0x3e
c0015457:	75 18                	jne    c0015471 <opcodeFault(regs*, void*)+0x11b>
c0015459:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001545d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015466:	8d 50 01             	lea    edx,[eax+0x1]
c0015469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001546f:	eb 3a                	jmp    c00154ab <opcodeFault(regs*, void*)+0x155>
c0015471:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015474:	8a 00                	mov    al,BYTE PTR [eax]
c0015476:	3c 36                	cmp    al,0x36
c0015478:	74 1b                	je     c0015495 <opcodeFault(regs*, void*)+0x13f>
c001547a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547d:	8a 00                	mov    al,BYTE PTR [eax]
c001547f:	3c 26                	cmp    al,0x26
c0015481:	74 12                	je     c0015495 <opcodeFault(regs*, void*)+0x13f>
c0015483:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015486:	8a 00                	mov    al,BYTE PTR [eax]
c0015488:	3c 64                	cmp    al,0x64
c001548a:	74 09                	je     c0015495 <opcodeFault(regs*, void*)+0x13f>
c001548c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548f:	8a 00                	mov    al,BYTE PTR [eax]
c0015491:	3c 65                	cmp    al,0x65
c0015493:	75 16                	jne    c00154ab <opcodeFault(regs*, void*)+0x155>
c0015495:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015499:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001549c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a2:	8d 50 01             	lea    edx,[eax+0x1]
c00154a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ae:	8a 00                	mov    al,BYTE PTR [eax]
c00154b0:	3c 0f                	cmp    al,0xf
c00154b2:	0f 85 ad 00 00 00    	jne    c0015565 <opcodeFault(regs*, void*)+0x20f>
c00154b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bb:	40                   	inc    eax
c00154bc:	8a 00                	mov    al,BYTE PTR [eax]
c00154be:	3c c2                	cmp    al,0xc2
c00154c0:	74 0e                	je     c00154d0 <opcodeFault(regs*, void*)+0x17a>
c00154c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c5:	40                   	inc    eax
c00154c6:	8a 00                	mov    al,BYTE PTR [eax]
c00154c8:	3c c3                	cmp    al,0xc3
c00154ca:	0f 85 95 00 00 00    	jne    c0015565 <opcodeFault(regs*, void*)+0x20f>
c00154d0:	83 ec 0c             	sub    esp,0xc
c00154d3:	68 4f b2 02 c0       	push   0xc002b24f
c00154d8:	e8 a0 da ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e6:	8d 50 01             	lea    edx,[eax+0x1]
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154ef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f5:	8a 00                	mov    al,BYTE PTR [eax]
c00154f7:	8d 50 fe             	lea    edx,[eax-0x2]
c00154fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fd:	88 10                	mov    BYTE PTR [eax],dl
c00154ff:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015502:	50                   	push   eax
c0015503:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015506:	50                   	push   eax
c0015507:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001550a:	50                   	push   eax
c001550b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001550e:	e8 e3 47 00 00       	call   c0019cf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015513:	83 c4 10             	add    esp,0x10
c0015516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015519:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001551c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001551f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015522:	01 d0                	add    eax,edx
c0015524:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015530:	48                   	dec    eax
c0015531:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015537:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001553a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001553d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015540:	83 ec 04             	sub    esp,0x4
c0015543:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015546:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015549:	50                   	push   eax
c001554a:	e8 65 ac fe ff       	call   c00001b4 <voodooXADD>
c001554f:	83 c4 10             	add    esp,0x10
c0015552:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015555:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015558:	01 c2                	add    edx,eax
c001555a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015560:	e9 f0 03 00 00       	jmp    c0015955 <opcodeFault(regs*, void*)+0x5ff>
c0015565:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015568:	8a 00                	mov    al,BYTE PTR [eax]
c001556a:	3c 0f                	cmp    al,0xf
c001556c:	0f 85 8b 01 00 00    	jne    c00156fd <opcodeFault(regs*, void*)+0x3a7>
c0015572:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015575:	40                   	inc    eax
c0015576:	8a 00                	mov    al,BYTE PTR [eax]
c0015578:	3c c7                	cmp    al,0xc7
c001557a:	0f 86 7d 01 00 00    	jbe    c00156fd <opcodeFault(regs*, void*)+0x3a7>
c0015580:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015583:	40                   	inc    eax
c0015584:	8a 00                	mov    al,BYTE PTR [eax]
c0015586:	3c cf                	cmp    al,0xcf
c0015588:	0f 87 6f 01 00 00    	ja     c00156fd <opcodeFault(regs*, void*)+0x3a7>
c001558e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015591:	40                   	inc    eax
c0015592:	8a 00                	mov    al,BYTE PTR [eax]
c0015594:	83 c0 38             	add    eax,0x38
c0015597:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001559a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001559e:	75 0b                	jne    c00155ab <opcodeFault(regs*, void*)+0x255>
c00155a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a9:	eb 75                	jmp    c0015620 <opcodeFault(regs*, void*)+0x2ca>
c00155ab:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155af:	75 0b                	jne    c00155bc <opcodeFault(regs*, void*)+0x266>
c00155b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ba:	eb 64                	jmp    c0015620 <opcodeFault(regs*, void*)+0x2ca>
c00155bc:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155c0:	75 0b                	jne    c00155cd <opcodeFault(regs*, void*)+0x277>
c00155c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155cb:	eb 53                	jmp    c0015620 <opcodeFault(regs*, void*)+0x2ca>
c00155cd:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155d1:	75 0b                	jne    c00155de <opcodeFault(regs*, void*)+0x288>
c00155d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155dc:	eb 42                	jmp    c0015620 <opcodeFault(regs*, void*)+0x2ca>
c00155de:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155e2:	75 0b                	jne    c00155ef <opcodeFault(regs*, void*)+0x299>
c00155e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ed:	eb 31                	jmp    c0015620 <opcodeFault(regs*, void*)+0x2ca>
c00155ef:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155f3:	75 0b                	jne    c0015600 <opcodeFault(regs*, void*)+0x2aa>
c00155f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155fe:	eb 20                	jmp    c0015620 <opcodeFault(regs*, void*)+0x2ca>
c0015600:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015604:	75 0b                	jne    c0015611 <opcodeFault(regs*, void*)+0x2bb>
c0015606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015609:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001560c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001560f:	eb 0f                	jmp    c0015620 <opcodeFault(regs*, void*)+0x2ca>
c0015611:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015615:	75 09                	jne    c0015620 <opcodeFault(regs*, void*)+0x2ca>
c0015617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001561d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015620:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015624:	74 10                	je     c0015636 <opcodeFault(regs*, void*)+0x2e0>
c0015626:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001562d:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015634:	eb 2d                	jmp    c0015663 <opcodeFault(regs*, void*)+0x30d>
c0015636:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015639:	c1 e0 18             	shl    eax,0x18
c001563c:	89 c2                	mov    edx,eax
c001563e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015641:	c1 e0 08             	shl    eax,0x8
c0015644:	25 00 00 ff 00       	and    eax,0xff0000
c0015649:	09 c2                	or     edx,eax
c001564b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001564e:	c1 e8 08             	shr    eax,0x8
c0015651:	25 00 ff 00 00       	and    eax,0xff00
c0015656:	09 c2                	or     edx,eax
c0015658:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001565b:	c1 e8 18             	shr    eax,0x18
c001565e:	09 d0                	or     eax,edx
c0015660:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015663:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015667:	75 0b                	jne    c0015674 <opcodeFault(regs*, void*)+0x31e>
c0015669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001566f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015672:	eb 75                	jmp    c00156e9 <opcodeFault(regs*, void*)+0x393>
c0015674:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015678:	75 0b                	jne    c0015685 <opcodeFault(regs*, void*)+0x32f>
c001567a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015680:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015683:	eb 64                	jmp    c00156e9 <opcodeFault(regs*, void*)+0x393>
c0015685:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015689:	75 0b                	jne    c0015696 <opcodeFault(regs*, void*)+0x340>
c001568b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015691:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015694:	eb 53                	jmp    c00156e9 <opcodeFault(regs*, void*)+0x393>
c0015696:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001569a:	75 0b                	jne    c00156a7 <opcodeFault(regs*, void*)+0x351>
c001569c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156a2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00156a5:	eb 42                	jmp    c00156e9 <opcodeFault(regs*, void*)+0x393>
c00156a7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00156ab:	75 0b                	jne    c00156b8 <opcodeFault(regs*, void*)+0x362>
c00156ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b3:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00156b6:	eb 31                	jmp    c00156e9 <opcodeFault(regs*, void*)+0x393>
c00156b8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00156bc:	75 0b                	jne    c00156c9 <opcodeFault(regs*, void*)+0x373>
c00156be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00156c7:	eb 20                	jmp    c00156e9 <opcodeFault(regs*, void*)+0x393>
c00156c9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156cd:	75 0b                	jne    c00156da <opcodeFault(regs*, void*)+0x384>
c00156cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156d5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156d8:	eb 0f                	jmp    c00156e9 <opcodeFault(regs*, void*)+0x393>
c00156da:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156de:	75 09                	jne    c00156e9 <opcodeFault(regs*, void*)+0x393>
c00156e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156e6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156ef:	8d 50 02             	lea    edx,[eax+0x2]
c00156f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156f8:	e9 58 02 00 00       	jmp    c0015955 <opcodeFault(regs*, void*)+0x5ff>
c00156fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015700:	8a 00                	mov    al,BYTE PTR [eax]
c0015702:	3c 0f                	cmp    al,0xf
c0015704:	0f 85 76 01 00 00    	jne    c0015880 <opcodeFault(regs*, void*)+0x52a>
c001570a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001570d:	40                   	inc    eax
c001570e:	8a 00                	mov    al,BYTE PTR [eax]
c0015710:	3c c7                	cmp    al,0xc7
c0015712:	0f 85 68 01 00 00    	jne    c0015880 <opcodeFault(regs*, void*)+0x52a>
c0015718:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001571b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015721:	8d 50 01             	lea    edx,[eax+0x1]
c0015724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015727:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001572a:	8d 45 ba             	lea    eax,[ebp-0x46]
c001572d:	50                   	push   eax
c001572e:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015731:	50                   	push   eax
c0015732:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015735:	50                   	push   eax
c0015736:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015739:	e8 b8 45 00 00       	call   c0019cf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001573e:	83 c4 10             	add    esp,0x10
c0015741:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015744:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015747:	83 f0 01             	xor    eax,0x1
c001574a:	84 c0                	test   al,al
c001574c:	0f 84 2e 01 00 00    	je     c0015880 <opcodeFault(regs*, void*)+0x52a>
c0015752:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015755:	3c 01                	cmp    al,0x1
c0015757:	0f 85 23 01 00 00    	jne    c0015880 <opcodeFault(regs*, void*)+0x52a>
c001575d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015760:	83 f0 01             	xor    eax,0x1
c0015763:	84 c0                	test   al,al
c0015765:	0f 84 15 01 00 00    	je     c0015880 <opcodeFault(regs*, void*)+0x52a>
c001576b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015771:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015774:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001577b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001577e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015781:	89 c2                	mov    edx,eax
c0015783:	b8 00 00 00 00       	mov    eax,0x0
c0015788:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001578b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015791:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015794:	ba 00 00 00 00       	mov    edx,0x0
c0015799:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001579c:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001579f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157a5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157a8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00157af:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157b2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157b5:	89 c2                	mov    edx,eax
c00157b7:	b8 00 00 00 00       	mov    eax,0x0
c00157bc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157bf:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00157c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157c8:	ba 00 00 00 00       	mov    edx,0x0
c00157cd:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00157d0:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00157d3:	e8 7c 86 00 00       	call   c001de54 <lockScheduler()>
c00157d8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157db:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157de:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e0:	89 c1                	mov    ecx,eax
c00157e2:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157e5:	89 cb                	mov    ebx,ecx
c00157e7:	89 d0                	mov    eax,edx
c00157e9:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157ec:	89 c6                	mov    esi,eax
c00157ee:	89 f0                	mov    eax,esi
c00157f0:	09 d8                	or     eax,ebx
c00157f2:	85 c0                	test   eax,eax
c00157f4:	75 21                	jne    c0015817 <opcodeFault(regs*, void*)+0x4c1>
c00157f6:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157f9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157fc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157ff:	89 01                	mov    DWORD PTR [ecx],eax
c0015801:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015807:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001580a:	83 c8 40             	or     eax,0x40
c001580d:	89 c2                	mov    edx,eax
c001580f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015812:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015815:	eb 3e                	jmp    c0015855 <opcodeFault(regs*, void*)+0x4ff>
c0015817:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001581a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001581d:	8b 00                	mov    eax,DWORD PTR [eax]
c001581f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015822:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015825:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001582e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015831:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015834:	89 d0                	mov    eax,edx
c0015836:	31 d2                	xor    edx,edx
c0015838:	89 c3                	mov    ebx,eax
c001583a:	89 d6                	mov    esi,edx
c001583c:	89 da                	mov    edx,ebx
c001583e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015841:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015847:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001584a:	83 e0 bf             	and    eax,0xffffffbf
c001584d:	89 c2                	mov    edx,eax
c001584f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015852:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015855:	e8 fc 85 00 00       	call   c001de56 <unlockScheduler()>
c001585a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015860:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015863:	01 c2                	add    edx,eax
c0015865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015868:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001586b:	83 ec 0c             	sub    esp,0xc
c001586e:	68 5e b2 02 c0       	push   0xc002b25e
c0015873:	e8 05 d7 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	e9 d5 00 00 00       	jmp    c0015955 <opcodeFault(regs*, void*)+0x5ff>
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	68 71 b2 02 c0       	push   0xc002b271
c0015888:	e8 f0 d6 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001588d:	83 c4 10             	add    esp,0x10
c0015890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015893:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015899:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001589c:	c1 e0 04             	shl    eax,0x4
c001589f:	01 d0                	add    eax,edx
c00158a1:	83 c0 03             	add    eax,0x3
c00158a4:	8a 00                	mov    al,BYTE PTR [eax]
c00158a6:	0f b6 d8             	movzx  ebx,al
c00158a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158b5:	c1 e0 04             	shl    eax,0x4
c00158b8:	01 d0                	add    eax,edx
c00158ba:	83 c0 02             	add    eax,0x2
c00158bd:	8a 00                	mov    al,BYTE PTR [eax]
c00158bf:	0f b6 c8             	movzx  ecx,al
c00158c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158ce:	c1 e0 04             	shl    eax,0x4
c00158d1:	01 d0                	add    eax,edx
c00158d3:	40                   	inc    eax
c00158d4:	8a 00                	mov    al,BYTE PTR [eax]
c00158d6:	0f b6 d0             	movzx  edx,al
c00158d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158dc:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158e5:	c1 e0 04             	shl    eax,0x4
c00158e8:	01 f0                	add    eax,esi
c00158ea:	8a 00                	mov    al,BYTE PTR [eax]
c00158ec:	0f b6 c0             	movzx  eax,al
c00158ef:	83 ec 0c             	sub    esp,0xc
c00158f2:	53                   	push   ebx
c00158f3:	51                   	push   ecx
c00158f4:	52                   	push   edx
c00158f5:	50                   	push   eax
c00158f6:	68 84 b2 02 c0       	push   0xc002b284
c00158fb:	e8 7d d6 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0015900:	83 c4 20             	add    esp,0x20
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015909:	83 c0 03             	add    eax,0x3
c001590c:	8a 00                	mov    al,BYTE PTR [eax]
c001590e:	0f b6 d8             	movzx  ebx,al
c0015911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015914:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015917:	83 c0 02             	add    eax,0x2
c001591a:	8a 00                	mov    al,BYTE PTR [eax]
c001591c:	0f b6 c8             	movzx  ecx,al
c001591f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015922:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015925:	40                   	inc    eax
c0015926:	8a 00                	mov    al,BYTE PTR [eax]
c0015928:	0f b6 d0             	movzx  edx,al
c001592b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015931:	8a 00                	mov    al,BYTE PTR [eax]
c0015933:	0f b6 c0             	movzx  eax,al
c0015936:	83 ec 0c             	sub    esp,0xc
c0015939:	53                   	push   ebx
c001593a:	51                   	push   ecx
c001593b:	52                   	push   edx
c001593c:	50                   	push   eax
c001593d:	68 ac b2 02 c0       	push   0xc002b2ac
c0015942:	e8 36 d6 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0015947:	83 c4 20             	add    esp,0x20
c001594a:	83 ec 0c             	sub    esp,0xc
c001594d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015950:	e8 9f f4 ff ff       	call   c0014df4 <displayDebugInfo(regs*)>
c0015955:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015958:	5b                   	pop    ebx
c0015959:	5e                   	pop    esi
c001595a:	5d                   	pop    ebp
c001595b:	c3                   	ret    

c001595c <displayProgramFault(char const*)>:
c001595c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015961:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015964:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001596a:	85 c0                	test   eax,eax
c001596c:	74 15                	je     c0015983 <displayProgramFault(char const*)+0x27>
c001596e:	83 ec 0c             	sub    esp,0xc
c0015971:	6a 04                	push   0x4
c0015973:	6a 0f                	push   0xf
c0015975:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015979:	50                   	push   eax
c001597a:	e8 ab b4 ff ff       	call   c0010e2a <VgaText::puts(char const*, VgaColour, VgaColour)>
c001597f:	83 c4 1c             	add    esp,0x1c
c0015982:	c3                   	ret    
c0015983:	c3                   	ret    

c0015984 <setupInterruptController()>:
c0015984:	55                   	push   ebp
c0015985:	89 e5                	mov    ebp,esp
c0015987:	53                   	push   ebx
c0015988:	83 ec 24             	sub    esp,0x24
c001598b:	b8 00 00 00 00       	mov    eax,0x0
c0015990:	85 c0                	test   eax,eax
c0015992:	0f 95 c0             	setne  al
c0015995:	84 c0                	test   al,al
c0015997:	74 5b                	je     c00159f4 <setupInterruptController()+0x70>
c0015999:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00159a0:	83 ec 0c             	sub    esp,0xc
c00159a3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00159a6:	e8 95 9e ff ff       	call   c000f840 <malloc>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	89 c3                	mov    ebx,eax
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	53                   	push   ebx
c00159b4:	e8 f3 ff 00 00       	call   c00259ac <APIC::APIC()>
c00159b9:	83 c4 10             	add    esp,0x10
c00159bc:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00159bf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00159c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c7:	83 c0 08             	add    eax,0x8
c00159ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00159cc:	6a 00                	push   0x0
c00159ce:	6a 00                	push   0x0
c00159d0:	6a 00                	push   0x0
c00159d2:	52                   	push   edx
c00159d3:	ff d0                	call   eax
c00159d5:	83 c4 10             	add    esp,0x10
c00159d8:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00159dd:	83 ec 08             	sub    esp,0x8
c00159e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159e3:	50                   	push   eax
c00159e4:	e8 bb e9 ff ff       	call   c00143a4 <Device::addChild(Device*)>
c00159e9:	83 c4 10             	add    esp,0x10
c00159ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159ef:	e9 52 03 00 00       	jmp    c0015d46 <setupInterruptController()+0x3c2>
c00159f4:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00159f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159ff:	83 e0 01             	and    eax,0x1
c0015a02:	84 c0                	test   al,al
c0015a04:	0f 95 c0             	setne  al
c0015a07:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a0a:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a11:	83 ec 0c             	sub    esp,0xc
c0015a14:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a17:	e8 24 9e ff ff       	call   c000f840 <malloc>
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	89 c3                	mov    ebx,eax
c0015a21:	83 ec 0c             	sub    esp,0xc
c0015a24:	53                   	push   ebx
c0015a25:	e8 da 04 01 00       	call   c0025f04 <PIC::PIC()>
c0015a2a:	83 c4 10             	add    esp,0x10
c0015a2d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a30:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a38:	83 c0 08             	add    eax,0x8
c0015a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3d:	6a 00                	push   0x0
c0015a3f:	6a 00                	push   0x0
c0015a41:	6a 00                	push   0x0
c0015a43:	52                   	push   edx
c0015a44:	ff d0                	call   eax
c0015a46:	83 c4 10             	add    esp,0x10
c0015a49:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a4d:	74 73                	je     c0015ac2 <setupInterruptController()+0x13e>
c0015a4f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a57:	83 c0 0c             	add    eax,0xc
c0015a5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5c:	6a 00                	push   0x0
c0015a5e:	6a 00                	push   0x0
c0015a60:	6a 00                	push   0x0
c0015a62:	52                   	push   edx
c0015a63:	ff d0                	call   eax
c0015a65:	83 c4 10             	add    esp,0x10
c0015a68:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a6c:	74 15                	je     c0015a83 <setupInterruptController()+0xff>
c0015a6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a73:	83 c0 04             	add    eax,0x4
c0015a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a78:	83 ec 0c             	sub    esp,0xc
c0015a7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a7e:	ff d0                	call   eax
c0015a80:	83 c4 10             	add    esp,0x10
c0015a83:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a8a:	83 ec 0c             	sub    esp,0xc
c0015a8d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a90:	e8 ab 9d ff ff       	call   c000f840 <malloc>
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	89 c3                	mov    ebx,eax
c0015a9a:	83 ec 0c             	sub    esp,0xc
c0015a9d:	53                   	push   ebx
c0015a9e:	e8 09 ff 00 00       	call   c00259ac <APIC::APIC()>
c0015aa3:	83 c4 10             	add    esp,0x10
c0015aa6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015aa9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015aac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab1:	83 c0 08             	add    eax,0x8
c0015ab4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab6:	6a 00                	push   0x0
c0015ab8:	6a 00                	push   0x0
c0015aba:	6a 00                	push   0x0
c0015abc:	52                   	push   edx
c0015abd:	ff d0                	call   eax
c0015abf:	83 c4 10             	add    esp,0x10
c0015ac2:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0015ac7:	83 ec 08             	sub    esp,0x8
c0015aca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015acd:	50                   	push   eax
c0015ace:	e8 d1 e8 ff ff       	call   c00143a4 <Device::addChild(Device*)>
c0015ad3:	83 c4 10             	add    esp,0x10
c0015ad6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adb:	83 c0 24             	add    eax,0x24
c0015ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae0:	6a 00                	push   0x0
c0015ae2:	68 37 53 01 c0       	push   0xc0015337
c0015ae7:	6a 00                	push   0x0
c0015ae9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aec:	ff d0                	call   eax
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af6:	83 c0 24             	add    eax,0x24
c0015af9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afb:	6a 00                	push   0x0
c0015afd:	68 37 53 01 c0       	push   0xc0015337
c0015b02:	6a 01                	push   0x1
c0015b04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b07:	ff d0                	call   eax
c0015b09:	83 c4 10             	add    esp,0x10
c0015b0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b11:	83 c0 24             	add    eax,0x24
c0015b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b16:	6a 00                	push   0x0
c0015b18:	68 51 4c 01 c0       	push   0xc0014c51
c0015b1d:	6a 02                	push   0x2
c0015b1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b22:	ff d0                	call   eax
c0015b24:	83 c4 10             	add    esp,0x10
c0015b27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2c:	83 c0 24             	add    eax,0x24
c0015b2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b31:	6a 00                	push   0x0
c0015b33:	68 37 53 01 c0       	push   0xc0015337
c0015b38:	6a 03                	push   0x3
c0015b3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3d:	ff d0                	call   eax
c0015b3f:	83 c4 10             	add    esp,0x10
c0015b42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b47:	83 c0 24             	add    eax,0x24
c0015b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4c:	6a 00                	push   0x0
c0015b4e:	68 37 53 01 c0       	push   0xc0015337
c0015b53:	6a 04                	push   0x4
c0015b55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b58:	ff d0                	call   eax
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b62:	83 c0 24             	add    eax,0x24
c0015b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b67:	6a 00                	push   0x0
c0015b69:	68 37 53 01 c0       	push   0xc0015337
c0015b6e:	6a 05                	push   0x5
c0015b70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b73:	ff d0                	call   eax
c0015b75:	83 c4 10             	add    esp,0x10
c0015b78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7d:	83 c0 24             	add    eax,0x24
c0015b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b82:	6a 00                	push   0x0
c0015b84:	68 56 53 01 c0       	push   0xc0015356
c0015b89:	6a 06                	push   0x6
c0015b8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8e:	ff d0                	call   eax
c0015b90:	83 c4 10             	add    esp,0x10
c0015b93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b98:	83 c0 24             	add    eax,0x24
c0015b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9d:	6a 00                	push   0x0
c0015b9f:	68 83 52 01 c0       	push   0xc0015283
c0015ba4:	6a 07                	push   0x7
c0015ba6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba9:	ff d0                	call   eax
c0015bab:	83 c4 10             	add    esp,0x10
c0015bae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb3:	83 c0 24             	add    eax,0x24
c0015bb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb8:	6a 00                	push   0x0
c0015bba:	68 6c 4a 01 c0       	push   0xc0014a6c
c0015bbf:	6a 08                	push   0x8
c0015bc1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc4:	ff d0                	call   eax
c0015bc6:	83 c4 10             	add    esp,0x10
c0015bc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bce:	83 c0 24             	add    eax,0x24
c0015bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd3:	6a 00                	push   0x0
c0015bd5:	68 37 53 01 c0       	push   0xc0015337
c0015bda:	6a 09                	push   0x9
c0015bdc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bdf:	ff d0                	call   eax
c0015be1:	83 c4 10             	add    esp,0x10
c0015be4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be9:	83 c0 24             	add    eax,0x24
c0015bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bee:	6a 00                	push   0x0
c0015bf0:	68 37 53 01 c0       	push   0xc0015337
c0015bf5:	6a 0a                	push   0xa
c0015bf7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfa:	ff d0                	call   eax
c0015bfc:	83 c4 10             	add    esp,0x10
c0015bff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c04:	83 c0 24             	add    eax,0x24
c0015c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c09:	6a 00                	push   0x0
c0015c0b:	68 37 53 01 c0       	push   0xc0015337
c0015c10:	6a 0b                	push   0xb
c0015c12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c15:	ff d0                	call   eax
c0015c17:	83 c4 10             	add    esp,0x10
c0015c1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1f:	83 c0 24             	add    eax,0x24
c0015c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c24:	6a 00                	push   0x0
c0015c26:	68 37 53 01 c0       	push   0xc0015337
c0015c2b:	6a 0c                	push   0xc
c0015c2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c30:	ff d0                	call   eax
c0015c32:	83 c4 10             	add    esp,0x10
c0015c35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3a:	83 c0 24             	add    eax,0x24
c0015c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3f:	6a 00                	push   0x0
c0015c41:	68 b2 52 01 c0       	push   0xc00152b2
c0015c46:	6a 0d                	push   0xd
c0015c48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4b:	ff d0                	call   eax
c0015c4d:	83 c4 10             	add    esp,0x10
c0015c50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c55:	83 c0 24             	add    eax,0x24
c0015c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5a:	6a 00                	push   0x0
c0015c5c:	68 eb 52 01 c0       	push   0xc00152eb
c0015c61:	6a 0e                	push   0xe
c0015c63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c66:	ff d0                	call   eax
c0015c68:	83 c4 10             	add    esp,0x10
c0015c6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c70:	83 c0 24             	add    eax,0x24
c0015c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c75:	6a 00                	push   0x0
c0015c77:	68 37 53 01 c0       	push   0xc0015337
c0015c7c:	6a 0f                	push   0xf
c0015c7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c81:	ff d0                	call   eax
c0015c83:	83 c4 10             	add    esp,0x10
c0015c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8b:	83 c0 24             	add    eax,0x24
c0015c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c90:	6a 00                	push   0x0
c0015c92:	68 37 53 01 c0       	push   0xc0015337
c0015c97:	6a 10                	push   0x10
c0015c99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9c:	ff d0                	call   eax
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca6:	83 c0 24             	add    eax,0x24
c0015ca9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cab:	6a 00                	push   0x0
c0015cad:	68 37 53 01 c0       	push   0xc0015337
c0015cb2:	6a 11                	push   0x11
c0015cb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb7:	ff d0                	call   eax
c0015cb9:	83 c4 10             	add    esp,0x10
c0015cbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc1:	83 c0 24             	add    eax,0x24
c0015cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc6:	6a 00                	push   0x0
c0015cc8:	68 37 53 01 c0       	push   0xc0015337
c0015ccd:	6a 12                	push   0x12
c0015ccf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd2:	ff d0                	call   eax
c0015cd4:	83 c4 10             	add    esp,0x10
c0015cd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdc:	83 c0 24             	add    eax,0x24
c0015cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce1:	6a 00                	push   0x0
c0015ce3:	68 37 53 01 c0       	push   0xc0015337
c0015ce8:	6a 13                	push   0x13
c0015cea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ced:	ff d0                	call   eax
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf7:	83 c0 24             	add    eax,0x24
c0015cfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfc:	6a 00                	push   0x0
c0015cfe:	68 37 53 01 c0       	push   0xc0015337
c0015d03:	6a 14                	push   0x14
c0015d05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d08:	ff d0                	call   eax
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d12:	83 c0 24             	add    eax,0x24
c0015d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d17:	6a 00                	push   0x0
c0015d19:	68 37 53 01 c0       	push   0xc0015337
c0015d1e:	6a 1e                	push   0x1e
c0015d20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d23:	ff d0                	call   eax
c0015d25:	83 c4 10             	add    esp,0x10
c0015d28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2d:	83 c0 24             	add    eax,0x24
c0015d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d32:	6a 00                	push   0x0
c0015d34:	68 03 c8 01 c0       	push   0xc001c803
c0015d39:	6a 60                	push   0x60
c0015d3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d3e:	ff d0                	call   eax
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d46:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d49:	c9                   	leave  
c0015d4a:	c3                   	ret    
c0015d4b:	90                   	nop

c0015d4c <InterruptController::convertLegacyIRQNumber(int)>:
c0015d4c:	55                   	push   ebp
c0015d4d:	89 e5                	mov    ebp,esp
c0015d4f:	83 ec 08             	sub    esp,0x8
c0015d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d55:	83 ec 0c             	sub    esp,0xc
c0015d58:	50                   	push   eax
c0015d59:	e8 32 e9 ff ff       	call   c0014690 <Device::getName()>
c0015d5e:	83 c4 10             	add    esp,0x10
c0015d61:	8a 00                	mov    al,BYTE PTR [eax]
c0015d63:	3c 41                	cmp    al,0x41
c0015d65:	0f 94 c0             	sete   al
c0015d68:	84 c0                	test   al,al
c0015d6a:	74 28                	je     c0015d94 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d6c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d70:	7f 12                	jg     c0015d84 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d75:	05 c0 d8 02 c0       	add    eax,0xc002d8c0
c0015d7a:	8a 00                	mov    al,BYTE PTR [eax]
c0015d7c:	0f b6 c0             	movzx  eax,al
c0015d7f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d82:	eb 10                	jmp    c0015d94 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d84:	83 ec 0c             	sub    esp,0xc
c0015d87:	68 c0 af 02 c0       	push   0xc002afc0
c0015d8c:	e8 9e 48 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0015d91:	83 c4 10             	add    esp,0x10
c0015d94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d97:	c9                   	leave  
c0015d98:	c3                   	ret    
c0015d99:	90                   	nop

c0015d9a <startGUI(void*)>:
c0015d9a:	55                   	push   ebp
c0015d9b:	89 e5                	mov    ebp,esp
c0015d9d:	53                   	push   ebx
c0015d9e:	83 ec 04             	sub    esp,0x4
c0015da1:	e8 b0 80 00 00       	call   c001de56 <unlockScheduler()>
c0015da6:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0015dac:	83 ec 08             	sub    esp,0x8
c0015daf:	6a 01                	push   0x1
c0015db1:	68 1c b3 02 c0       	push   0xc002b31c
c0015db6:	e8 f1 79 00 00       	call   c001d7ac <Thr::loadDLL(char const*, bool)>
c0015dbb:	83 c4 10             	add    esp,0x10
c0015dbe:	83 ec 08             	sub    esp,0x8
c0015dc1:	53                   	push   ebx
c0015dc2:	50                   	push   eax
c0015dc3:	e8 18 7c 00 00       	call   c001d9e0 <Thr::executeDLL(unsigned long, void*)>
c0015dc8:	83 c4 10             	add    esp,0x10
c0015dcb:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0015dd1:	83 ec 08             	sub    esp,0x8
c0015dd4:	6a 01                	push   0x1
c0015dd6:	68 36 b3 02 c0       	push   0xc002b336
c0015ddb:	e8 cc 79 00 00       	call   c001d7ac <Thr::loadDLL(char const*, bool)>
c0015de0:	83 c4 10             	add    esp,0x10
c0015de3:	83 ec 08             	sub    esp,0x8
c0015de6:	53                   	push   ebx
c0015de7:	50                   	push   eax
c0015de8:	e8 f3 7b 00 00       	call   c001d9e0 <Thr::executeDLL(unsigned long, void*)>
c0015ded:	83 c4 10             	add    esp,0x10
c0015df0:	90                   	nop
c0015df1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015df4:	c9                   	leave  
c0015df5:	c3                   	ret    

c0015df6 <startGUIVESA(void*)>:
c0015df6:	55                   	push   ebp
c0015df7:	89 e5                	mov    ebp,esp
c0015df9:	53                   	push   ebx
c0015dfa:	83 ec 04             	sub    esp,0x4
c0015dfd:	e8 54 80 00 00       	call   c001de56 <unlockScheduler()>
c0015e02:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0015e08:	83 ec 08             	sub    esp,0x8
c0015e0b:	6a 01                	push   0x1
c0015e0d:	68 50 b3 02 c0       	push   0xc002b350
c0015e12:	e8 95 79 00 00       	call   c001d7ac <Thr::loadDLL(char const*, bool)>
c0015e17:	83 c4 10             	add    esp,0x10
c0015e1a:	83 ec 08             	sub    esp,0x8
c0015e1d:	53                   	push   ebx
c0015e1e:	50                   	push   eax
c0015e1f:	e8 bc 7b 00 00       	call   c001d9e0 <Thr::executeDLL(unsigned long, void*)>
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c0015e2d:	83 ec 08             	sub    esp,0x8
c0015e30:	6a 01                	push   0x1
c0015e32:	68 36 b3 02 c0       	push   0xc002b336
c0015e37:	e8 70 79 00 00       	call   c001d7ac <Thr::loadDLL(char const*, bool)>
c0015e3c:	83 c4 10             	add    esp,0x10
c0015e3f:	83 ec 08             	sub    esp,0x8
c0015e42:	53                   	push   ebx
c0015e43:	50                   	push   eax
c0015e44:	e8 97 7b 00 00       	call   c001d9e0 <Thr::executeDLL(unsigned long, void*)>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	90                   	nop
c0015e4d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e50:	c9                   	leave  
c0015e51:	c3                   	ret    

c0015e52 <sendKeyToTerminal(unsigned char)>:
c0015e52:	55                   	push   ebp
c0015e53:	89 e5                	mov    ebp,esp
c0015e55:	83 ec 28             	sub    esp,0x28
c0015e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e5b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e5e:	a1 44 e7 02 c0       	mov    eax,ds:0xc002e744
c0015e63:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e67:	83 ec 08             	sub    esp,0x8
c0015e6a:	52                   	push   edx
c0015e6b:	50                   	push   eax
c0015e6c:	e8 f5 b4 ff ff       	call   c0011366 <VgaText::receiveKey(unsigned char)>
c0015e71:	83 c4 10             	add    esp,0x10
c0015e74:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e78:	75 41                	jne    c0015ebb <sendKeyToTerminal(unsigned char)+0x69>
c0015e7a:	e8 fc 7f 00 00       	call   c001de7b <lockStuff()>
c0015e7f:	a1 20 e8 02 c0       	mov    eax,ds:0xc002e820
c0015e84:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e87:	c7 05 20 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e820,0x0
c0015e91:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e95:	74 1f                	je     c0015eb6 <sendKeyToTerminal(unsigned char)+0x64>
c0015e97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e9a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ea0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ea3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ea6:	83 ec 0c             	sub    esp,0xc
c0015ea9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015eac:	e8 bb 85 00 00       	call   c001e46c <unblockTask(ThreadControlBlock*)>
c0015eb1:	83 c4 10             	add    esp,0x10
c0015eb4:	eb db                	jmp    c0015e91 <sendKeyToTerminal(unsigned char)+0x3f>
c0015eb6:	e8 5a 83 00 00       	call   c001e215 <unlockStuff()>
c0015ebb:	90                   	nop
c0015ebc:	c9                   	leave  
c0015ebd:	c3                   	ret    

c0015ebe <sendKeyboardToken(KeyboardToken)>:
c0015ebe:	55                   	push   ebp
c0015ebf:	89 e5                	mov    ebp,esp
c0015ec1:	83 ec 18             	sub    esp,0x18
c0015ec4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eca:	0f b7 c0             	movzx  eax,ax
c0015ecd:	83 f2 01             	xor    edx,0x1
c0015ed0:	88 90 40 e8 02 c0    	mov    BYTE PTR [eax-0x3ffd17c0],dl
c0015ed6:	a1 28 e8 02 c0       	mov    eax,ds:0xc002e828
c0015edb:	85 c0                	test   eax,eax
c0015edd:	74 24                	je     c0015f03 <sendKeyboardToken(KeyboardToken)+0x45>
c0015edf:	8b 0d 28 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e828
c0015ee5:	83 ec 04             	sub    esp,0x4
c0015ee8:	68 40 e8 02 c0       	push   0xc002e840
c0015eed:	83 ec 08             	sub    esp,0x8
c0015ef0:	89 e2                	mov    edx,esp
c0015ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef5:	89 02                	mov    DWORD PTR [edx],eax
c0015ef7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015efa:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015efe:	ff d1                	call   ecx
c0015f00:	83 c4 10             	add    esp,0x10
c0015f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f06:	66 3d 03 02          	cmp    ax,0x203
c0015f0a:	75 07                	jne    c0015f13 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f0c:	a0 40 e9 02 c0       	mov    al,ds:0xc002e940
c0015f11:	84 c0                	test   al,al
c0015f13:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f17:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f1a:	a0 48 ec 02 c0       	mov    al,ds:0xc002ec48
c0015f1f:	38 c2                	cmp    dl,al
c0015f21:	74 1c                	je     c0015f3f <sendKeyboardToken(KeyboardToken)+0x81>
c0015f23:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f26:	a2 48 ec 02 c0       	mov    ds:0xc002ec48,al
c0015f2b:	a0 48 ec 02 c0       	mov    al,ds:0xc002ec48
c0015f30:	0f b6 c0             	movzx  eax,al
c0015f33:	83 ec 0c             	sub    esp,0xc
c0015f36:	50                   	push   eax
c0015f37:	e8 8a a6 ff ff       	call   c00105c6 <setTerminalScrollLock(bool)>
c0015f3c:	83 c4 10             	add    esp,0x10
c0015f3f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f42:	84 c0                	test   al,al
c0015f44:	0f 84 ae 00 00 00    	je     c0015ff8 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4d:	66 3d 10 03          	cmp    ax,0x310
c0015f51:	75 06                	jne    c0015f59 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f53:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5c:	66 3d 11 03          	cmp    ax,0x311
c0015f60:	75 06                	jne    c0015f68 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f62:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6b:	66 3d 12 03          	cmp    ax,0x312
c0015f6f:	75 06                	jne    c0015f77 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f71:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7a:	66 3d 13 03          	cmp    ax,0x313
c0015f7e:	75 06                	jne    c0015f86 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f80:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f89:	66 3d 14 03          	cmp    ax,0x314
c0015f8d:	75 06                	jne    c0015f95 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f8f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f98:	66 3d 15 03          	cmp    ax,0x315
c0015f9c:	75 06                	jne    c0015fa4 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f9e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa7:	66 3d 16 03          	cmp    ax,0x316
c0015fab:	75 06                	jne    c0015fb3 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fad:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb6:	66 3d 17 03          	cmp    ax,0x317
c0015fba:	75 06                	jne    c0015fc2 <sendKeyboardToken(KeyboardToken)+0x104>
c0015fbc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc5:	66 3d 18 03          	cmp    ax,0x318
c0015fc9:	75 06                	jne    c0015fd1 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fcb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd4:	66 3d 19 03          	cmp    ax,0x319
c0015fd8:	75 06                	jne    c0015fe0 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fda:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe3:	66 3d 1a 03          	cmp    ax,0x31a
c0015fe7:	0f 85 c9 00 00 00    	jne    c00160b6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fed:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015ff3:	e9 be 00 00 00       	jmp    c00160b6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffb:	66 3d 10 03          	cmp    ax,0x310
c0015fff:	75 0a                	jne    c001600b <sendKeyboardToken(KeyboardToken)+0x14d>
c0016001:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016007:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600e:	66 3d 11 03          	cmp    ax,0x311
c0016012:	75 0a                	jne    c001601e <sendKeyboardToken(KeyboardToken)+0x160>
c0016014:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001601a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016021:	66 3d 12 03          	cmp    ax,0x312
c0016025:	75 0a                	jne    c0016031 <sendKeyboardToken(KeyboardToken)+0x173>
c0016027:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001602d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016034:	66 3d 13 03          	cmp    ax,0x313
c0016038:	75 0a                	jne    c0016044 <sendKeyboardToken(KeyboardToken)+0x186>
c001603a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016040:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016047:	66 3d 14 03          	cmp    ax,0x314
c001604b:	75 0a                	jne    c0016057 <sendKeyboardToken(KeyboardToken)+0x199>
c001604d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016053:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605a:	66 3d 15 03          	cmp    ax,0x315
c001605e:	75 0a                	jne    c001606a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016060:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016066:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606d:	66 3d 16 03          	cmp    ax,0x316
c0016071:	75 0a                	jne    c001607d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016073:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016079:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001607d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016080:	66 3d 17 03          	cmp    ax,0x317
c0016084:	75 0a                	jne    c0016090 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016086:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001608c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016093:	66 3d 18 03          	cmp    ax,0x318
c0016097:	75 0a                	jne    c00160a3 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016099:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001609f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a6:	66 3d 19 03          	cmp    ax,0x319
c00160aa:	75 0a                	jne    c00160b6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160ac:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b9:	66 3d 00 02          	cmp    ax,0x200
c00160bd:	75 2c                	jne    c00160eb <sendKeyboardToken(KeyboardToken)+0x22d>
c00160bf:	a0 40 ec 02 c0       	mov    al,ds:0xc002ec40
c00160c4:	83 f0 01             	xor    eax,0x1
c00160c7:	84 c0                	test   al,al
c00160c9:	74 20                	je     c00160eb <sendKeyboardToken(KeyboardToken)+0x22d>
c00160cb:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c00160d0:	6a 01                	push   0x1
c00160d2:	6a 00                	push   0x0
c00160d4:	68 9a 5d 01 c0       	push   0xc0015d9a
c00160d9:	50                   	push   eax
c00160da:	e8 a7 7e 00 00       	call   c001df86 <Process::createThread(void (*)(void*), void*, int)>
c00160df:	83 c4 10             	add    esp,0x10
c00160e2:	c6 05 40 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec40,0x1
c00160e9:	eb 33                	jmp    c001611e <sendKeyboardToken(KeyboardToken)+0x260>
c00160eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ee:	66 3d 01 02          	cmp    ax,0x201
c00160f2:	75 2a                	jne    c001611e <sendKeyboardToken(KeyboardToken)+0x260>
c00160f4:	a0 40 ec 02 c0       	mov    al,ds:0xc002ec40
c00160f9:	83 f0 01             	xor    eax,0x1
c00160fc:	84 c0                	test   al,al
c00160fe:	74 1e                	je     c001611e <sendKeyboardToken(KeyboardToken)+0x260>
c0016100:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0016105:	6a 01                	push   0x1
c0016107:	6a 00                	push   0x0
c0016109:	68 f6 5d 01 c0       	push   0xc0015df6
c001610e:	50                   	push   eax
c001610f:	e8 72 7e 00 00       	call   c001df86 <Process::createThread(void (*)(void*), void*, int)>
c0016114:	83 c4 10             	add    esp,0x10
c0016117:	c6 05 40 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec40,0x1
c001611e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016121:	66 3d 1d 03          	cmp    ax,0x31d
c0016125:	75 06                	jne    c001612d <sendKeyboardToken(KeyboardToken)+0x26f>
c0016127:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001612d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016130:	66 3d 1c 03          	cmp    ax,0x31c
c0016134:	75 06                	jne    c001613c <sendKeyboardToken(KeyboardToken)+0x27e>
c0016136:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001613c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613f:	66 3d 1b 03          	cmp    ax,0x31b
c0016143:	75 06                	jne    c001614b <sendKeyboardToken(KeyboardToken)+0x28d>
c0016145:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001614b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614e:	66 3d 1e 03          	cmp    ax,0x31e
c0016152:	75 06                	jne    c001615a <sendKeyboardToken(KeyboardToken)+0x29c>
c0016154:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001615a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615d:	66 3d 1f 03          	cmp    ax,0x31f
c0016161:	75 06                	jne    c0016169 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016163:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616c:	66 3d 1a 03          	cmp    ax,0x31a
c0016170:	75 06                	jne    c0016178 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016172:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016178:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001617c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001617f:	83 f0 01             	xor    eax,0x1
c0016182:	84 c0                	test   al,al
c0016184:	74 77                	je     c00161fd <sendKeyboardToken(KeyboardToken)+0x33f>
c0016186:	a0 41 e9 02 c0       	mov    al,ds:0xc002e941
c001618b:	84 c0                	test   al,al
c001618d:	74 41                	je     c00161d0 <sendKeyboardToken(KeyboardToken)+0x312>
c001618f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016193:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016197:	74 2b                	je     c00161c4 <sendKeyboardToken(KeyboardToken)+0x306>
c0016199:	8b 15 44 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec44
c001619f:	89 d0                	mov    eax,edx
c00161a1:	c1 e0 02             	shl    eax,0x2
c00161a4:	01 d0                	add    eax,edx
c00161a6:	01 c0                	add    eax,eax
c00161a8:	a3 44 ec 02 c0       	mov    ds:0xc002ec44,eax
c00161ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b0:	0f b7 c0             	movzx  eax,ax
c00161b3:	8d 50 d0             	lea    edx,[eax-0x30]
c00161b6:	a1 44 ec 02 c0       	mov    eax,ds:0xc002ec44
c00161bb:	01 d0                	add    eax,edx
c00161bd:	a3 44 ec 02 c0       	mov    ds:0xc002ec44,eax
c00161c2:	eb 6d                	jmp    c0016231 <sendKeyboardToken(KeyboardToken)+0x373>
c00161c4:	c7 05 44 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec44,0x0
c00161ce:	eb 61                	jmp    c0016231 <sendKeyboardToken(KeyboardToken)+0x373>
c00161d0:	a1 44 ec 02 c0       	mov    eax,ds:0xc002ec44
c00161d5:	85 c0                	test   eax,eax
c00161d7:	74 18                	je     c00161f1 <sendKeyboardToken(KeyboardToken)+0x333>
c00161d9:	a1 44 ec 02 c0       	mov    eax,ds:0xc002ec44
c00161de:	0f b6 c0             	movzx  eax,al
c00161e1:	83 ec 0c             	sub    esp,0xc
c00161e4:	50                   	push   eax
c00161e5:	e8 68 fc ff ff       	call   c0015e52 <sendKeyToTerminal(unsigned char)>
c00161ea:	83 c4 10             	add    esp,0x10
c00161ed:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f1:	c7 05 44 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec44,0x0
c00161fb:	eb 34                	jmp    c0016231 <sendKeyboardToken(KeyboardToken)+0x373>
c00161fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016200:	66 3d 01 01          	cmp    ax,0x101
c0016204:	75 2b                	jne    c0016231 <sendKeyboardToken(KeyboardToken)+0x373>
c0016206:	a1 44 ec 02 c0       	mov    eax,ds:0xc002ec44
c001620b:	85 c0                	test   eax,eax
c001620d:	74 18                	je     c0016227 <sendKeyboardToken(KeyboardToken)+0x369>
c001620f:	a1 44 ec 02 c0       	mov    eax,ds:0xc002ec44
c0016214:	0f b6 c0             	movzx  eax,al
c0016217:	83 ec 0c             	sub    esp,0xc
c001621a:	50                   	push   eax
c001621b:	e8 32 fc ff ff       	call   c0015e52 <sendKeyToTerminal(unsigned char)>
c0016220:	83 c4 10             	add    esp,0x10
c0016223:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016227:	c7 05 44 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec44,0x0
c0016231:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016234:	83 f0 01             	xor    eax,0x1
c0016237:	84 c0                	test   al,al
c0016239:	74 4c                	je     c0016287 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001623b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001623e:	83 f0 01             	xor    eax,0x1
c0016241:	84 c0                	test   al,al
c0016243:	74 42                	je     c0016287 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016245:	a0 40 e9 02 c0       	mov    al,ds:0xc002e940
c001624a:	83 f0 01             	xor    eax,0x1
c001624d:	84 c0                	test   al,al
c001624f:	74 36                	je     c0016287 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016254:	66 83 f8 1f          	cmp    ax,0x1f
c0016258:	76 09                	jbe    c0016263 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001625a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625d:	66 83 f8 7e          	cmp    ax,0x7e
c0016261:	76 12                	jbe    c0016275 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016266:	66 83 f8 0a          	cmp    ax,0xa
c001626a:	74 09                	je     c0016275 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001626c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626f:	66 83 f8 08          	cmp    ax,0x8
c0016273:	75 12                	jne    c0016287 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016278:	0f b6 c0             	movzx  eax,al
c001627b:	83 ec 0c             	sub    esp,0xc
c001627e:	50                   	push   eax
c001627f:	e8 ce fb ff ff       	call   c0015e52 <sendKeyToTerminal(unsigned char)>
c0016284:	83 c4 10             	add    esp,0x10
c0016287:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001628a:	83 f0 01             	xor    eax,0x1
c001628d:	84 c0                	test   al,al
c001628f:	74 4f                	je     c00162e0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016291:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016294:	83 f0 01             	xor    eax,0x1
c0016297:	84 c0                	test   al,al
c0016299:	74 45                	je     c00162e0 <sendKeyboardToken(KeyboardToken)+0x422>
c001629b:	a0 40 e9 02 c0       	mov    al,ds:0xc002e940
c00162a0:	84 c0                	test   al,al
c00162a2:	74 3c                	je     c00162e0 <sendKeyboardToken(KeyboardToken)+0x422>
c00162a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a7:	66 83 f8 3f          	cmp    ax,0x3f
c00162ab:	76 33                	jbe    c00162e0 <sendKeyboardToken(KeyboardToken)+0x422>
c00162ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b0:	66 83 f8 7f          	cmp    ax,0x7f
c00162b4:	77 2a                	ja     c00162e0 <sendKeyboardToken(KeyboardToken)+0x422>
c00162b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b9:	88 c2                	mov    dl,al
c00162bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162be:	66 83 f8 5f          	cmp    ax,0x5f
c00162c2:	76 04                	jbe    c00162c8 <sendKeyboardToken(KeyboardToken)+0x40a>
c00162c4:	b0 20                	mov    al,0x20
c00162c6:	eb 02                	jmp    c00162ca <sendKeyboardToken(KeyboardToken)+0x40c>
c00162c8:	b0 00                	mov    al,0x0
c00162ca:	29 c2                	sub    edx,eax
c00162cc:	88 d0                	mov    al,dl
c00162ce:	83 e8 40             	sub    eax,0x40
c00162d1:	0f b6 c0             	movzx  eax,al
c00162d4:	83 ec 0c             	sub    esp,0xc
c00162d7:	50                   	push   eax
c00162d8:	e8 75 fb ff ff       	call   c0015e52 <sendKeyToTerminal(unsigned char)>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e3:	66 3d 00 03          	cmp    ax,0x300
c00162e7:	75 0f                	jne    c00162f8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162e9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ec:	83 f0 01             	xor    eax,0x1
c00162ef:	84 c0                	test   al,al
c00162f1:	74 05                	je     c00162f8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162f3:	e8 03 ab ff ff       	call   c0010dfb <doTerminalCycle()>
c00162f8:	90                   	nop
c00162f9:	c9                   	leave  
c00162fa:	c3                   	ret    

c00162fb <clearInternalKeybuffer(VgaText*)>:
c00162fb:	55                   	push   ebp
c00162fc:	89 e5                	mov    ebp,esp
c00162fe:	83 ec 08             	sub    esp,0x8
c0016301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016304:	05 34 11 00 00       	add    eax,0x1134
c0016309:	83 ec 0c             	sub    esp,0xc
c001630c:	50                   	push   eax
c001630d:	e8 82 a4 fe ff       	call   c0000794 <strlen>
c0016312:	83 c4 10             	add    esp,0x10
c0016315:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016318:	81 c2 34 11 00 00    	add    edx,0x1134
c001631e:	83 ec 04             	sub    esp,0x4
c0016321:	50                   	push   eax
c0016322:	6a 00                	push   0x0
c0016324:	52                   	push   edx
c0016325:	e8 4e a4 fe ff       	call   c0000778 <memset>
c001632a:	83 c4 10             	add    esp,0x10
c001632d:	90                   	nop
c001632e:	c9                   	leave  
c001632f:	c3                   	ret    

c0016330 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016330:	55                   	push   ebp
c0016331:	89 e5                	mov    ebp,esp
c0016333:	83 ec 18             	sub    esp,0x18
c0016336:	fb                   	sti    
c0016337:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001633e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016342:	0f 84 8a 00 00 00    	je     c00163d2 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001634b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016351:	84 c0                	test   al,al
c0016353:	75 11                	jne    c0016366 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016355:	e8 fa 7a 00 00       	call   c001de54 <lockScheduler()>
c001635a:	e8 31 7e 00 00       	call   c001e190 <schedule()>
c001635f:	e8 f2 7a 00 00       	call   c001de56 <unlockScheduler()>
c0016364:	eb e2                	jmp    c0016348 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016366:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016369:	8d 50 01             	lea    edx,[eax+0x1]
c001636c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001636f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016372:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016378:	88 10                	mov    BYTE PTR [eax],dl
c001637a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001637d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016383:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016389:	05 34 11 00 00       	add    eax,0x1134
c001638e:	83 ec 0c             	sub    esp,0xc
c0016391:	50                   	push   eax
c0016392:	e8 fd a3 fe ff       	call   c0000794 <strlen>
c0016397:	83 c4 10             	add    esp,0x10
c001639a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001639d:	81 c2 34 11 00 00    	add    edx,0x1134
c00163a3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163a6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163a9:	81 c2 34 11 00 00    	add    edx,0x1134
c00163af:	83 ec 04             	sub    esp,0x4
c00163b2:	50                   	push   eax
c00163b3:	51                   	push   ecx
c00163b4:	52                   	push   edx
c00163b5:	e8 c2 a2 fe ff       	call   c000067c <memmove>
c00163ba:	83 c4 10             	add    esp,0x10
c00163bd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163c0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163c3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163c7:	0f 85 71 ff ff ff    	jne    c001633e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00163cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163d0:	eb 03                	jmp    c00163d5 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00163d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163d5:	c9                   	leave  
c00163d6:	c3                   	ret    
c00163d7:	90                   	nop

c00163d8 <Keyboard::Keyboard(char const*)>:
c00163d8:	83 ec 0c             	sub    esp,0xc
c00163db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163df:	83 ec 08             	sub    esp,0x8
c00163e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e6:	50                   	push   eax
c00163e7:	e8 a8 e1 ff ff       	call   c0014594 <Device::Device(char const*)>
c00163ec:	83 c4 10             	add    esp,0x10
c00163ef:	ba 74 b3 02 c0       	mov    edx,0xc002b374
c00163f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f8:	89 10                	mov    DWORD PTR [eax],edx
c00163fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fe:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016408:	c6 05 24 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e824,0x1
c001640f:	90                   	nop
c0016410:	83 c4 0c             	add    esp,0xc
c0016413:	c3                   	ret    

c0016414 <Keyboard::~Keyboard()>:
c0016414:	83 ec 0c             	sub    esp,0xc
c0016417:	ba 74 b3 02 c0       	mov    edx,0xc002b374
c001641c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016420:	89 10                	mov    DWORD PTR [eax],edx
c0016422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016426:	83 ec 0c             	sub    esp,0xc
c0016429:	50                   	push   eax
c001642a:	e8 47 de ff ff       	call   c0014276 <Device::~Device()>
c001642f:	83 c4 10             	add    esp,0x10
c0016432:	90                   	nop
c0016433:	83 c4 0c             	add    esp,0xc
c0016436:	c3                   	ret    
c0016437:	90                   	nop

c0016438 <Keyboard::~Keyboard()>:
c0016438:	83 ec 0c             	sub    esp,0xc
c001643b:	83 ec 0c             	sub    esp,0xc
c001643e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016442:	e8 cd ff ff ff       	call   c0016414 <Keyboard::~Keyboard()>
c0016447:	83 c4 10             	add    esp,0x10
c001644a:	83 ec 08             	sub    esp,0x8
c001644d:	68 5c 01 00 00       	push   0x15c
c0016452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016456:	e8 42 ca ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c001645b:	83 c4 10             	add    esp,0x10
c001645e:	83 c4 0c             	add    esp,0xc
c0016461:	c3                   	ret    

c0016462 <LogicalDisk::close(int, int, void*)>:
c0016462:	83 c8 ff             	or     eax,0xffffffff
c0016465:	c3                   	ret    

c0016466 <LogicalDisk::~LogicalDisk()>:
c0016466:	83 ec 0c             	sub    esp,0xc
c0016469:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c001646e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016472:	89 10                	mov    DWORD PTR [eax],edx
c0016474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	50                   	push   eax
c001647c:	e8 f5 dd ff ff       	call   c0014276 <Device::~Device()>
c0016481:	83 c4 10             	add    esp,0x10
c0016484:	90                   	nop
c0016485:	83 c4 0c             	add    esp,0xc
c0016488:	c3                   	ret    
c0016489:	90                   	nop

c001648a <LogicalDisk::~LogicalDisk()>:
c001648a:	83 ec 0c             	sub    esp,0xc
c001648d:	83 ec 0c             	sub    esp,0xc
c0016490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016494:	e8 cd ff ff ff       	call   c0016466 <LogicalDisk::~LogicalDisk()>
c0016499:	83 c4 10             	add    esp,0x10
c001649c:	83 ec 08             	sub    esp,0x8
c001649f:	68 74 01 00 00       	push   0x174
c00164a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a8:	e8 f0 c9 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00164ad:	83 c4 10             	add    esp,0x10
c00164b0:	83 c4 0c             	add    esp,0xc
c00164b3:	c3                   	ret    

c00164b4 <LogicalDisk::open(int, int, void*)>:
c00164b4:	83 ec 18             	sub    esp,0x18
c00164b7:	68 a0 b3 02 c0       	push   0xc002b3a0
c00164bc:	e8 6e 41 00 00       	call   c001a62f <Krnl::panic(char const*)>
c00164c1:	83 c8 ff             	or     eax,0xffffffff
c00164c4:	83 c4 1c             	add    esp,0x1c
c00164c7:	c3                   	ret    

c00164c8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164c8:	53                   	push   ebx
c00164c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164d5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164db:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164e1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164e7:	77 10                	ja     c00164f9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164e9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164ef:	89 d3                	mov    ebx,edx
c00164f1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164f7:	72 05                	jb     c00164fe <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164f9:	83 c8 ff             	or     eax,0xffffffff
c00164fc:	89 c2                	mov    edx,eax
c00164fe:	5b                   	pop    ebx
c00164ff:	c3                   	ret    

c0016500 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016500:	56                   	push   esi
c0016501:	83 c8 ff             	or     eax,0xffffffff
c0016504:	53                   	push   ebx
c0016505:	89 c2                	mov    edx,eax
c0016507:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001650b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001650f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016513:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016519:	77 27                	ja     c0016542 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001651b:	89 d8                	mov    eax,ebx
c001651d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016523:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016529:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001652e:	89 c2                	mov    edx,eax
c0016530:	73 10                	jae    c0016542 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016532:	89 c8                	mov    eax,ecx
c0016534:	89 da                	mov    edx,ebx
c0016536:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001653c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016542:	5b                   	pop    ebx
c0016543:	5e                   	pop    esi
c0016544:	c3                   	ret    
c0016545:	90                   	nop

c0016546 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016546:	83 ec 1c             	sub    esp,0x1c
c0016549:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001654d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016555:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016559:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001655d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016560:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016564:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656c:	83 ec 08             	sub    esp,0x8
c001656f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016573:	50                   	push   eax
c0016574:	e8 1b e0 ff ff       	call   c0014594 <Device::Device(char const*)>
c0016579:	83 c4 10             	add    esp,0x10
c001657c:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c0016581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016585:	89 10                	mov    DWORD PTR [eax],edx
c0016587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001658b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016596:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001659d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165ab:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165b7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165bd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165c3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165ce:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165d4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165e2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ec:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165f6:	90                   	nop
c00165f7:	83 c4 1c             	add    esp,0x1c
c00165fa:	c3                   	ret    
c00165fb:	90                   	nop

c00165fc <LogicalDisk::assignDriveLetter()>:
c00165fc:	55                   	push   ebp
c00165fd:	57                   	push   edi
c00165fe:	56                   	push   esi
c00165ff:	53                   	push   ebx
c0016600:	83 ec 14             	sub    esp,0x14
c0016603:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016607:	8b 3d 60 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec60
c001660d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016613:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016617:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001661d:	8b 3d 64 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec64
c0016623:	3c 01                	cmp    al,0x1
c0016625:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016629:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001662d:	19 c0                	sbb    eax,eax
c001662f:	83 e0 02             	and    eax,0x2
c0016632:	83 c0 41             	add    eax,0x41
c0016635:	0f be e8             	movsx  ebp,al
c0016638:	3c 43                	cmp    al,0x43
c001663a:	75 10                	jne    c001664c <LogicalDisk::assignDriveLetter()+0x50>
c001663c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016643:	75 5d                	jne    c00166a2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016645:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001664a:	75 56                	jne    c00166a2 <LogicalDisk::assignDriveLetter()+0xa6>
c001664c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001664f:	ba 01 00 00 00       	mov    edx,0x1
c0016654:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016658:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001665c:	d3 e2                	shl    edx,cl
c001665e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016662:	89 d7                	mov    edi,edx
c0016664:	89 d6                	mov    esi,edx
c0016666:	c1 ff 1f             	sar    edi,0x1f
c0016669:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001666d:	21 f9                	and    ecx,edi
c001666f:	09 d1                	or     ecx,edx
c0016671:	75 2f                	jne    c00166a2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016673:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016677:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001667b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016681:	09 f2                	or     edx,esi
c0016683:	89 15 60 ec 02 c0    	mov    DWORD PTR ds:0xc002ec60,edx
c0016689:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001668d:	09 fa                	or     edx,edi
c001668f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016693:	89 15 64 ec 02 c0    	mov    DWORD PTR ds:0xc002ec64,edx
c0016699:	89 1c bd 80 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1380],ebx
c00166a0:	eb 08                	jmp    c00166aa <LogicalDisk::assignDriveLetter()+0xae>
c00166a2:	45                   	inc    ebp
c00166a3:	40                   	inc    eax
c00166a4:	3c 5b                	cmp    al,0x5b
c00166a6:	75 90                	jne    c0016638 <LogicalDisk::assignDriveLetter()+0x3c>
c00166a8:	31 c0                	xor    eax,eax
c00166aa:	83 c4 14             	add    esp,0x14
c00166ad:	5b                   	pop    ebx
c00166ae:	5e                   	pop    esi
c00166af:	5f                   	pop    edi
c00166b0:	5d                   	pop    ebp
c00166b1:	c3                   	ret    

c00166b2 <LogicalDisk::mount()>:
c00166b2:	56                   	push   esi
c00166b3:	53                   	push   ebx
c00166b4:	51                   	push   ecx
c00166b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166b9:	8b 1d ec e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7ec
c00166bf:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166c9:	85 db                	test   ebx,ebx
c00166cb:	74 50                	je     c001671d <LogicalDisk::mount()+0x6b>
c00166cd:	e8 6d 77 00 00       	call   c001de3f <getIRQNestingLevel()>
c00166d2:	52                   	push   edx
c00166d3:	52                   	push   edx
c00166d4:	50                   	push   eax
c00166d5:	68 c4 b3 02 c0       	push   0xc002b3c4
c00166da:	e8 9e c8 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00166df:	83 c4 0c             	add    esp,0xc
c00166e2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166eb:	83 e8 41             	sub    eax,0x41
c00166ee:	50                   	push   eax
c00166ef:	56                   	push   esi
c00166f0:	53                   	push   ebx
c00166f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166f4:	83 c4 10             	add    esp,0x10
c00166f7:	84 c0                	test   al,al
c00166f9:	74 08                	je     c0016703 <LogicalDisk::mount()+0x51>
c00166fb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016701:	eb 1c                	jmp    c001671f <LogicalDisk::mount()+0x6d>
c0016703:	e8 37 77 00 00       	call   c001de3f <getIRQNestingLevel()>
c0016708:	51                   	push   ecx
c0016709:	51                   	push   ecx
c001670a:	50                   	push   eax
c001670b:	68 df b3 02 c0       	push   0xc002b3df
c0016710:	e8 68 c8 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0016715:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016718:	83 c4 10             	add    esp,0x10
c001671b:	eb ac                	jmp    c00166c9 <LogicalDisk::mount()+0x17>
c001671d:	31 c0                	xor    eax,eax
c001671f:	5a                   	pop    edx
c0016720:	5b                   	pop    ebx
c0016721:	5e                   	pop    esi
c0016722:	c3                   	ret    
c0016723:	90                   	nop

c0016724 <LogicalDisk::unmount()>:
c0016724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016728:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016732:	c3                   	ret    
c0016733:	90                   	nop

c0016734 <LogicalDisk::eject()>:
c0016734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016738:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001673e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016740:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016744:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016747:	90                   	nop

c0016748 <LogicalDisk::unassignDriveLetter()>:
c0016748:	57                   	push   edi
c0016749:	56                   	push   esi
c001674a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001674e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016755:	84 c9                	test   cl,cl
c0016757:	75 0f                	jne    c0016768 <LogicalDisk::unassignDriveLetter()+0x20>
c0016759:	c7 44 24 0c fa b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b3fa
c0016761:	5e                   	pop    esi
c0016762:	5f                   	pop    edi
c0016763:	e9 c7 3e 00 00       	jmp    c001a62f <Krnl::panic(char const*)>
c0016768:	83 e9 41             	sub    ecx,0x41
c001676b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016772:	b8 01 00 00 00       	mov    eax,0x1
c0016777:	c7 04 8d 80 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1380],0x0
c0016782:	d3 e0                	shl    eax,cl
c0016784:	89 c7                	mov    edi,eax
c0016786:	f7 d0                	not    eax
c0016788:	c1 ff 1f             	sar    edi,0x1f
c001678b:	21 05 60 ec 02 c0    	and    DWORD PTR ds:0xc002ec60,eax
c0016791:	89 fe                	mov    esi,edi
c0016793:	f7 d6                	not    esi
c0016795:	21 35 64 ec 02 c0    	and    DWORD PTR ds:0xc002ec64,esi
c001679b:	5e                   	pop    esi
c001679c:	5f                   	pop    edi
c001679d:	c3                   	ret    

c001679e <LogicalDisk::read(unsigned long long, int, void*)>:
c001679e:	57                   	push   edi
c001679f:	56                   	push   esi
c00167a0:	53                   	push   ebx
c00167a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167b1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167b7:	77 41                	ja     c00167fa <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167b9:	99                   	cdq    
c00167ba:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167c0:	01 c8                	add    eax,ecx
c00167c2:	11 da                	adc    edx,ebx
c00167c4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167ca:	19 d7                	sbb    edi,edx
c00167cc:	72 33                	jb     c0016801 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167ce:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167d4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167de:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167e2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167f2:	5b                   	pop    ebx
c00167f3:	5e                   	pop    esi
c00167f4:	5f                   	pop    edi
c00167f5:	e9 b0 0a 00 00       	jmp    c00172aa <VCache::read(unsigned long long, int, void*)>
c00167fa:	b8 05 00 00 00       	mov    eax,0x5
c00167ff:	eb 05                	jmp    c0016806 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016801:	b8 07 00 00 00       	mov    eax,0x7
c0016806:	5b                   	pop    ebx
c0016807:	5e                   	pop    esi
c0016808:	5f                   	pop    edi
c0016809:	c3                   	ret    

c001680a <LogicalDisk::write(unsigned long long, int, void*)>:
c001680a:	57                   	push   edi
c001680b:	56                   	push   esi
c001680c:	53                   	push   ebx
c001680d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016811:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016815:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016819:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001681d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016823:	77 41                	ja     c0016866 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016825:	99                   	cdq    
c0016826:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001682c:	01 c8                	add    eax,ecx
c001682e:	11 da                	adc    edx,ebx
c0016830:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016836:	19 d7                	sbb    edi,edx
c0016838:	72 33                	jb     c001686d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001683a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016840:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016846:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001684a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001684e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016854:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001685a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001685e:	5b                   	pop    ebx
c001685f:	5e                   	pop    esi
c0016860:	5f                   	pop    edi
c0016861:	e9 4e 09 00 00       	jmp    c00171b4 <VCache::write(unsigned long long, int, void*)>
c0016866:	b8 05 00 00 00       	mov    eax,0x5
c001686b:	eb 05                	jmp    c0016872 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001686d:	b8 07 00 00 00       	mov    eax,0x7
c0016872:	5b                   	pop    ebx
c0016873:	5e                   	pop    esi
c0016874:	5f                   	pop    edi
c0016875:	c3                   	ret    

c0016876 <Mouse::Mouse(char const*)>:
c0016876:	83 ec 0c             	sub    esp,0xc
c0016879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001687d:	83 ec 08             	sub    esp,0x8
c0016880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016884:	50                   	push   eax
c0016885:	e8 0a dd ff ff       	call   c0014594 <Device::Device(char const*)>
c001688a:	83 c4 10             	add    esp,0x10
c001688d:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c0016892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016896:	89 10                	mov    DWORD PTR [eax],edx
c0016898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001689c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168a6:	90                   	nop
c00168a7:	83 c4 0c             	add    esp,0xc
c00168aa:	c3                   	ret    
c00168ab:	90                   	nop

c00168ac <Mouse::~Mouse()>:
c00168ac:	83 ec 0c             	sub    esp,0xc
c00168af:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c00168b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b8:	89 10                	mov    DWORD PTR [eax],edx
c00168ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168be:	83 ec 0c             	sub    esp,0xc
c00168c1:	50                   	push   eax
c00168c2:	e8 af d9 ff ff       	call   c0014276 <Device::~Device()>
c00168c7:	83 c4 10             	add    esp,0x10
c00168ca:	90                   	nop
c00168cb:	83 c4 0c             	add    esp,0xc
c00168ce:	c3                   	ret    
c00168cf:	90                   	nop

c00168d0 <Mouse::~Mouse()>:
c00168d0:	83 ec 0c             	sub    esp,0xc
c00168d3:	83 ec 0c             	sub    esp,0xc
c00168d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168da:	e8 cd ff ff ff       	call   c00168ac <Mouse::~Mouse()>
c00168df:	83 c4 10             	add    esp,0x10
c00168e2:	83 ec 08             	sub    esp,0x8
c00168e5:	68 58 01 00 00       	push   0x158
c00168ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ee:	e8 aa c5 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00168f3:	83 c4 10             	add    esp,0x10
c00168f6:	83 c4 0c             	add    esp,0xc
c00168f9:	c3                   	ret    

c00168fa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168fa:	55                   	push   ebp
c00168fb:	57                   	push   edi
c00168fc:	56                   	push   esi
c00168fd:	53                   	push   ebx
c00168fe:	81 ec 28 01 00 00    	sub    esp,0x128
c0016904:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001690b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016912:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016919:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016924:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016928:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001692f:	e8 5c dd ff ff       	call   c0014690 <Device::getName()>
c0016934:	5a                   	pop    edx
c0016935:	59                   	pop    ecx
c0016936:	50                   	push   eax
c0016937:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001693b:	55                   	push   ebp
c001693c:	e8 f3 9e fe ff       	call   c0000834 <strcpy>
c0016941:	5b                   	pop    ebx
c0016942:	58                   	pop    eax
c0016943:	68 74 b4 02 c0       	push   0xc002b474
c0016948:	55                   	push   ebp
c0016949:	e8 26 a0 fe ff       	call   c0000974 <strcat>
c001694e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016955:	e8 e6 8e ff ff       	call   c000f840 <malloc>
c001695a:	83 c4 0c             	add    esp,0xc
c001695d:	89 c3                	mov    ebx,eax
c001695f:	57                   	push   edi
c0016960:	56                   	push   esi
c0016961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016969:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016970:	55                   	push   ebp
c0016971:	50                   	push   eax
c0016972:	e8 cf fb ff ff       	call   c0016546 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016977:	83 c4 14             	add    esp,0x14
c001697a:	53                   	push   ebx
c001697b:	e8 7c fc ff ff       	call   c00165fc <LogicalDisk::assignDriveLetter()>
c0016980:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016983:	89 c6                	mov    esi,eax
c0016985:	e8 28 fd ff ff       	call   c00166b2 <LogicalDisk::mount()>
c001698a:	58                   	pop    eax
c001698b:	5a                   	pop    edx
c001698c:	53                   	push   ebx
c001698d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016994:	e8 0b da ff ff       	call   c00143a4 <Device::addChild(Device*)>
c0016999:	59                   	pop    ecx
c001699a:	89 f0                	mov    eax,esi
c001699c:	5b                   	pop    ebx
c001699d:	0f be f0             	movsx  esi,al
c00169a0:	56                   	push   esi
c00169a1:	68 7f b4 02 c0       	push   0xc002b47f
c00169a6:	e8 d2 c5 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00169ab:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169b1:	5b                   	pop    ebx
c00169b2:	5e                   	pop    esi
c00169b3:	5f                   	pop    edi
c00169b4:	5d                   	pop    ebp
c00169b5:	c3                   	ret    

c00169b6 <createPartitionsForDisk(PhysicalDisk*)>:
c00169b6:	55                   	push   ebp
c00169b7:	57                   	push   edi
c00169b8:	56                   	push   esi
c00169b9:	53                   	push   ebx
c00169ba:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169c0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169c7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169cd:	3d 00 02 00 00       	cmp    eax,0x200
c00169d2:	74 27                	je     c00169fb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169d4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169da:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169e0:	83 ec 10             	sub    esp,0x10
c00169e3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169e7:	99                   	cdq    
c00169e8:	c1 e6 0a             	shl    esi,0xa
c00169eb:	52                   	push   edx
c00169ec:	89 fd                	mov    ebp,edi
c00169ee:	50                   	push   eax
c00169ef:	55                   	push   ebp
c00169f0:	56                   	push   esi
c00169f1:	e8 36 00 01 00       	call   c0026a2c <__udivdi3>
c00169f6:	e9 b1 00 00 00       	jmp    c0016aac <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169fb:	83 ec 0c             	sub    esp,0xc
c00169fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a00:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a04:	56                   	push   esi
c0016a05:	6a 01                	push   0x1
c0016a07:	6a 00                	push   0x0
c0016a09:	6a 00                	push   0x0
c0016a0b:	53                   	push   ebx
c0016a0c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a0f:	83 c4 20             	add    esp,0x20
c0016a12:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a1a:	75 0a                	jne    c0016a26 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a1c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a24:	74 2c                	je     c0016a52 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a26:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a2c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a32:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a38:	83 ec 10             	sub    esp,0x10
c0016a3b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a3f:	89 f7                	mov    edi,esi
c0016a41:	c1 e0 0a             	shl    eax,0xa
c0016a44:	c1 ff 1f             	sar    edi,0x1f
c0016a47:	57                   	push   edi
c0016a48:	56                   	push   esi
c0016a49:	52                   	push   edx
c0016a4a:	50                   	push   eax
c0016a4b:	e8 dc ff 00 00       	call   c0026a2c <__udivdi3>
c0016a50:	eb 5a                	jmp    c0016aac <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a52:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a59:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a60:	83 e1 7f             	and    ecx,0x7f
c0016a63:	83 e0 7f             	and    eax,0x7f
c0016a66:	01 c1                	add    ecx,eax
c0016a68:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a6f:	83 e0 7f             	and    eax,0x7f
c0016a72:	01 c1                	add    ecx,eax
c0016a74:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a7b:	83 e0 7f             	and    eax,0x7f
c0016a7e:	00 c1                	add    cl,al
c0016a80:	74 41                	je     c0016ac3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a82:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a88:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a8e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a94:	83 ec 10             	sub    esp,0x10
c0016a97:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a9b:	89 f7                	mov    edi,esi
c0016a9d:	c1 e0 0a             	shl    eax,0xa
c0016aa0:	c1 ff 1f             	sar    edi,0x1f
c0016aa3:	57                   	push   edi
c0016aa4:	56                   	push   esi
c0016aa5:	52                   	push   edx
c0016aa6:	50                   	push   eax
c0016aa7:	e8 80 ff 00 00       	call   c0026a2c <__udivdi3>
c0016aac:	83 c4 14             	add    esp,0x14
c0016aaf:	52                   	push   edx
c0016ab0:	50                   	push   eax
c0016ab1:	6a 00                	push   0x0
c0016ab3:	6a 00                	push   0x0
c0016ab5:	53                   	push   ebx
c0016ab6:	e8 3f fe ff ff       	call   c00168fa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016abb:	83 c4 20             	add    esp,0x20
c0016abe:	e9 79 01 00 00       	jmp    c0016c3c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016ac3:	89 f0                	mov    eax,esi
c0016ac5:	31 f6                	xor    esi,esi
c0016ac7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016ace:	75 02                	jne    c0016ad2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016ad0:	89 f1                	mov    ecx,esi
c0016ad2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016ad9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016ae0:	c1 e2 08             	shl    edx,0x8
c0016ae3:	c1 e7 10             	shl    edi,0x10
c0016ae6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016aee:	09 fa                	or     edx,edi
c0016af0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016af8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016aff:	83 c0 10             	add    eax,0x10
c0016b02:	09 fa                	or     edx,edi
c0016b04:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b0b:	c1 e7 18             	shl    edi,0x18
c0016b0e:	09 fa                	or     edx,edi
c0016b10:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b17:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b1b:	c1 e7 10             	shl    edi,0x10
c0016b1e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b25:	c1 e2 08             	shl    edx,0x8
c0016b28:	09 fa                	or     edx,edi
c0016b2a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b31:	09 fa                	or     edx,edi
c0016b33:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b3a:	c1 e7 18             	shl    edi,0x18
c0016b3d:	09 fa                	or     edx,edi
c0016b3f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b43:	46                   	inc    esi
c0016b44:	83 fe 04             	cmp    esi,0x4
c0016b47:	0f 85 7a ff ff ff    	jne    c0016ac7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b51:	83 f0 01             	xor    eax,0x1
c0016b54:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b58:	75 57                	jne    c0016bb1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b5e:	83 f0 01             	xor    eax,0x1
c0016b61:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b65:	75 4a                	jne    c0016bb1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b67:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b6b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b7b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b81:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b87:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b8d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b91:	89 f7                	mov    edi,esi
c0016b93:	c1 e0 0a             	shl    eax,0xa
c0016b96:	c1 ff 1f             	sar    edi,0x1f
c0016b99:	57                   	push   edi
c0016b9a:	56                   	push   esi
c0016b9b:	52                   	push   edx
c0016b9c:	50                   	push   eax
c0016b9d:	e8 8a fe 00 00       	call   c0026a2c <__udivdi3>
c0016ba2:	83 c4 10             	add    esp,0x10
c0016ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bad:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bb1:	84 c9                	test   cl,cl
c0016bb3:	74 53                	je     c0016c08 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bb5:	0f b6 c9             	movzx  ecx,cl
c0016bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bc0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bc4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bcc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bd0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bd4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bdc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016be0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016be8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bec:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bf0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bf4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c00:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c04:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c08:	31 ed                	xor    ebp,ebp
c0016c0a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c0e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c12:	89 f8                	mov    eax,edi
c0016c14:	09 f0                	or     eax,esi
c0016c16:	74 1e                	je     c0016c36 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c18:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c1c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c20:	89 d1                	mov    ecx,edx
c0016c22:	09 c1                	or     ecx,eax
c0016c24:	74 10                	je     c0016c36 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c26:	83 ec 0c             	sub    esp,0xc
c0016c29:	57                   	push   edi
c0016c2a:	56                   	push   esi
c0016c2b:	52                   	push   edx
c0016c2c:	50                   	push   eax
c0016c2d:	53                   	push   ebx
c0016c2e:	e8 c7 fc ff ff       	call   c00168fa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c33:	83 c4 20             	add    esp,0x20
c0016c36:	45                   	inc    ebp
c0016c37:	83 fd 04             	cmp    ebp,0x4
c0016c3a:	75 ce                	jne    c0016c0a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c3c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c42:	5b                   	pop    ebx
c0016c43:	5e                   	pop    esi
c0016c44:	5f                   	pop    edi
c0016c45:	5d                   	pop    ebp
c0016c46:	c3                   	ret    
c0016c47:	90                   	nop

c0016c48 <Serial::Serial(char const*)>:
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4f:	83 ec 08             	sub    esp,0x8
c0016c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c56:	50                   	push   eax
c0016c57:	e8 38 d9 ff ff       	call   c0014594 <Device::Device(char const*)>
c0016c5c:	83 c4 10             	add    esp,0x10
c0016c5f:	ba ac b4 02 c0       	mov    edx,0xc002b4ac
c0016c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c68:	89 10                	mov    DWORD PTR [eax],edx
c0016c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c78:	90                   	nop
c0016c79:	83 c4 0c             	add    esp,0xc
c0016c7c:	c3                   	ret    
c0016c7d:	90                   	nop

c0016c7e <Serial::~Serial()>:
c0016c7e:	83 ec 0c             	sub    esp,0xc
c0016c81:	ba ac b4 02 c0       	mov    edx,0xc002b4ac
c0016c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8a:	89 10                	mov    DWORD PTR [eax],edx
c0016c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	50                   	push   eax
c0016c94:	e8 dd d5 ff ff       	call   c0014276 <Device::~Device()>
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	90                   	nop
c0016c9d:	83 c4 0c             	add    esp,0xc
c0016ca0:	c3                   	ret    
c0016ca1:	90                   	nop

c0016ca2 <Serial::~Serial()>:
c0016ca2:	83 ec 0c             	sub    esp,0xc
c0016ca5:	83 ec 0c             	sub    esp,0xc
c0016ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cac:	e8 cd ff ff ff       	call   c0016c7e <Serial::~Serial()>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	83 ec 08             	sub    esp,0x8
c0016cb7:	68 58 01 00 00       	push   0x158
c0016cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc0:	e8 d8 c1 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0016cc5:	83 c4 10             	add    esp,0x10
c0016cc8:	83 c4 0c             	add    esp,0xc
c0016ccb:	c3                   	ret    

c0016ccc <Timer::Timer(char const*)>:
c0016ccc:	83 ec 0c             	sub    esp,0xc
c0016ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd3:	83 ec 08             	sub    esp,0x8
c0016cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cda:	50                   	push   eax
c0016cdb:	e8 b4 d8 ff ff       	call   c0014594 <Device::Device(char const*)>
c0016ce0:	83 c4 10             	add    esp,0x10
c0016ce3:	ba f0 b4 02 c0       	mov    edx,0xc002b4f0
c0016ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cec:	89 10                	mov    DWORD PTR [eax],edx
c0016cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cfc:	90                   	nop
c0016cfd:	83 c4 0c             	add    esp,0xc
c0016d00:	c3                   	ret    
c0016d01:	90                   	nop

c0016d02 <Timer::~Timer()>:
c0016d02:	83 ec 0c             	sub    esp,0xc
c0016d05:	ba f0 b4 02 c0       	mov    edx,0xc002b4f0
c0016d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0e:	89 10                	mov    DWORD PTR [eax],edx
c0016d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d14:	83 ec 0c             	sub    esp,0xc
c0016d17:	50                   	push   eax
c0016d18:	e8 59 d5 ff ff       	call   c0014276 <Device::~Device()>
c0016d1d:	83 c4 10             	add    esp,0x10
c0016d20:	90                   	nop
c0016d21:	83 c4 0c             	add    esp,0xc
c0016d24:	c3                   	ret    
c0016d25:	90                   	nop

c0016d26 <Timer::~Timer()>:
c0016d26:	83 ec 0c             	sub    esp,0xc
c0016d29:	83 ec 0c             	sub    esp,0xc
c0016d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d30:	e8 cd ff ff ff       	call   c0016d02 <Timer::~Timer()>
c0016d35:	83 c4 10             	add    esp,0x10
c0016d38:	83 ec 08             	sub    esp,0x8
c0016d3b:	68 5c 01 00 00       	push   0x15c
c0016d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d44:	e8 54 c1 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0016d49:	83 c4 10             	add    esp,0x10
c0016d4c:	83 c4 0c             	add    esp,0xc
c0016d4f:	c3                   	ret    

c0016d50 <Timer::read()>:
c0016d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d54:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d5a:	c3                   	ret    

c0016d5b <timerHandler(unsigned long long)>:
c0016d5b:	55                   	push   ebp
c0016d5c:	57                   	push   edi
c0016d5d:	56                   	push   esi
c0016d5e:	53                   	push   ebx
c0016d5f:	83 ec 0c             	sub    esp,0xc
c0016d62:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d66:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d6a:	01 35 f0 ec 02 c0    	add    DWORD PTR ds:0xc002ecf0,esi
c0016d70:	11 3d f4 ec 02 c0    	adc    DWORD PTR ds:0xc002ecf4,edi
c0016d76:	80 3d 6d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e66d,0x0
c0016d7d:	0f 84 07 01 00 00    	je     c0016e8a <timerHandler(unsigned long long)+0x12f>
c0016d83:	e8 f3 70 00 00       	call   c001de7b <lockStuff()>
c0016d88:	83 ec 0c             	sub    esp,0xc
c0016d8b:	68 bc 1b 03 c0       	push   0xc0031bbc
c0016d90:	e8 09 1d 01 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d95:	c7 04 24 bc 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bbc
c0016d9c:	89 c3                	mov    ebx,eax
c0016d9e:	e8 03 1d 01 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	84 c0                	test   al,al
c0016da8:	74 60                	je     c0016e0a <timerHandler(unsigned long long)+0xaf>
c0016daa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016db0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016db3:	85 c0                	test   eax,eax
c0016db5:	0f 85 91 00 00 00    	jne    c0016e4c <timerHandler(unsigned long long)+0xf1>
c0016dbb:	e9 be 00 00 00       	jmp    c0016e7e <timerHandler(unsigned long long)+0x123>
c0016dc0:	83 ec 0c             	sub    esp,0xc
c0016dc3:	55                   	push   ebp
c0016dc4:	e8 a3 76 00 00       	call   c001e46c <unblockTask(ThreadControlBlock*)>
c0016dc9:	83 c4 10             	add    esp,0x10
c0016dcc:	39 eb                	cmp    ebx,ebp
c0016dce:	75 12                	jne    c0016de2 <timerHandler(unsigned long long)+0x87>
c0016dd0:	83 ec 0c             	sub    esp,0xc
c0016dd3:	68 bc 1b 03 c0       	push   0xc0031bbc
c0016dd8:	e8 c1 1c 01 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ddd:	89 c3                	mov    ebx,eax
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	83 ec 0c             	sub    esp,0xc
c0016de5:	68 bc 1b 03 c0       	push   0xc0031bbc
c0016dea:	e8 b7 1c 01 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016def:	83 c4 10             	add    esp,0x10
c0016df2:	84 c0                	test   al,al
c0016df4:	75 b4                	jne    c0016daa <timerHandler(unsigned long long)+0x4f>
c0016df6:	83 ec 0c             	sub    esp,0xc
c0016df9:	68 bc 1b 03 c0       	push   0xc0031bbc
c0016dfe:	e8 9b 1c 01 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e03:	83 c4 10             	add    esp,0x10
c0016e06:	39 d8                	cmp    eax,ebx
c0016e08:	74 a0                	je     c0016daa <timerHandler(unsigned long long)+0x4f>
c0016e0a:	83 ec 0c             	sub    esp,0xc
c0016e0d:	68 bc 1b 03 c0       	push   0xc0031bbc
c0016e12:	e8 87 1c 01 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e17:	c7 04 24 bc 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bbc
c0016e1e:	89 c5                	mov    ebp,eax
c0016e20:	e8 9d 1c 01 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e25:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e28:	83 c4 10             	add    esp,0x10
c0016e2b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e2e:	39 15 f0 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecf0,edx
c0016e34:	a1 f4 ec 02 c0       	mov    eax,ds:0xc002ecf4
c0016e39:	19 c8                	sbb    eax,ecx
c0016e3b:	73 83                	jae    c0016dc0 <timerHandler(unsigned long long)+0x65>
c0016e3d:	50                   	push   eax
c0016e3e:	50                   	push   eax
c0016e3f:	55                   	push   ebp
c0016e40:	68 bc 1b 03 c0       	push   0xc0031bbc
c0016e45:	e8 26 1d 01 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e4a:	eb 93                	jmp    c0016ddf <timerHandler(unsigned long long)+0x84>
c0016e4c:	80 3d 6c e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e66c,0x0
c0016e53:	74 29                	je     c0016e7e <timerHandler(unsigned long long)+0x123>
c0016e55:	39 c6                	cmp    esi,eax
c0016e57:	bb 00 00 00 00       	mov    ebx,0x0
c0016e5c:	19 df                	sbb    edi,ebx
c0016e5e:	72 19                	jb     c0016e79 <timerHandler(unsigned long long)+0x11e>
c0016e60:	e8 ef 6f 00 00       	call   c001de54 <lockScheduler()>
c0016e65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e6a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e6d:	e8 1e 73 00 00       	call   c001e190 <schedule()>
c0016e72:	e8 df 6f 00 00       	call   c001de56 <unlockScheduler()>
c0016e77:	eb 05                	jmp    c0016e7e <timerHandler(unsigned long long)+0x123>
c0016e79:	29 f0                	sub    eax,esi
c0016e7b:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e7e:	83 c4 0c             	add    esp,0xc
c0016e81:	5b                   	pop    ebx
c0016e82:	5e                   	pop    esi
c0016e83:	5f                   	pop    edi
c0016e84:	5d                   	pop    ebp
c0016e85:	e9 8b 73 00 00       	jmp    c001e215 <unlockStuff()>
c0016e8a:	83 c4 0c             	add    esp,0xc
c0016e8d:	5b                   	pop    ebx
c0016e8e:	5e                   	pop    esi
c0016e8f:	5f                   	pop    edi
c0016e90:	5d                   	pop    ebp
c0016e91:	c3                   	ret    

c0016e92 <setupTimer(int)>:
c0016e92:	57                   	push   edi
c0016e93:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0016e98:	56                   	push   esi
c0016e99:	53                   	push   ebx
c0016e9a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ea4:	83 ec 0c             	sub    esp,0xc
c0016ea7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ead:	e8 de d7 ff ff       	call   c0014690 <Device::getName()>
c0016eb2:	83 c4 10             	add    esp,0x10
c0016eb5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016eb8:	0f 85 8d 00 00 00    	jne    c0016f4b <setupTimer(int)+0xb9>
c0016ebe:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0016ec3:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016eca:	74 7f                	je     c0016f4b <setupTimer(int)+0xb9>
c0016ecc:	83 ec 0c             	sub    esp,0xc
c0016ecf:	68 5c 01 00 00       	push   0x15c
c0016ed4:	e8 67 89 ff ff       	call   c000f840 <malloc>
c0016ed9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016edc:	89 c3                	mov    ebx,eax
c0016ede:	e8 2b f7 00 00       	call   c002660e <PIT::PIT()>
c0016ee3:	59                   	pop    ecx
c0016ee4:	5f                   	pop    edi
c0016ee5:	53                   	push   ebx
c0016ee6:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0016eec:	e8 b3 d4 ff ff       	call   c00143a4 <Device::addChild(Device*)>
c0016ef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ef3:	6a 00                	push   0x0
c0016ef5:	6a 00                	push   0x0
c0016ef7:	56                   	push   esi
c0016ef8:	53                   	push   ebx
c0016ef9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016efc:	83 c4 14             	add    esp,0x14
c0016eff:	68 60 01 00 00       	push   0x160
c0016f04:	e8 37 89 ff ff       	call   c000f840 <malloc>
c0016f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f0c:	89 c7                	mov    edi,eax
c0016f0e:	e8 ab f5 00 00       	call   c00264be <APICTimer::APICTimer()>
c0016f13:	6a 00                	push   0x0
c0016f15:	6a 00                	push   0x0
c0016f17:	56                   	push   esi
c0016f18:	57                   	push   edi
c0016f19:	e8 a2 f4 00 00       	call   c00263c0 <APICTimer::open(int, int, void*)>
c0016f1e:	83 c4 20             	add    esp,0x20
c0016f21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f23:	6a 00                	push   0x0
c0016f25:	6a 00                	push   0x0
c0016f27:	6a 00                	push   0x0
c0016f29:	53                   	push   ebx
c0016f2a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f2d:	58                   	pop    eax
c0016f2e:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0016f33:	5a                   	pop    edx
c0016f34:	57                   	push   edi
c0016f35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f3b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f41:	e8 5e d4 ff ff       	call   c00143a4 <Device::addChild(Device*)>
c0016f46:	83 c4 10             	add    esp,0x10
c0016f49:	eb 33                	jmp    c0016f7e <setupTimer(int)+0xec>
c0016f4b:	83 ec 0c             	sub    esp,0xc
c0016f4e:	68 5c 01 00 00       	push   0x15c
c0016f53:	e8 e8 88 ff ff       	call   c000f840 <malloc>
c0016f58:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f5b:	89 c3                	mov    ebx,eax
c0016f5d:	e8 ac f6 00 00       	call   c002660e <PIT::PIT()>
c0016f62:	58                   	pop    eax
c0016f63:	5a                   	pop    edx
c0016f64:	53                   	push   ebx
c0016f65:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0016f6b:	e8 34 d4 ff ff       	call   c00143a4 <Device::addChild(Device*)>
c0016f70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f72:	6a 00                	push   0x0
c0016f74:	6a 00                	push   0x0
c0016f76:	56                   	push   esi
c0016f77:	53                   	push   ebx
c0016f78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f7b:	83 c4 20             	add    esp,0x20
c0016f7e:	89 d8                	mov    eax,ebx
c0016f80:	5b                   	pop    ebx
c0016f81:	5e                   	pop    esi
c0016f82:	5f                   	pop    edi
c0016f83:	c3                   	ret    

c0016f84 <VCache::VCache(PhysicalDisk*)>:
c0016f84:	53                   	push   ebx
c0016f85:	83 ec 18             	sub    esp,0x18
c0016f88:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c0016f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f91:	89 10                	mov    DWORD PTR [eax],edx
c0016f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f97:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fad:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016fb4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016fbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016fc6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fdc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016feb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffe:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017006:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001700a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017015:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001701d:	83 ec 0c             	sub    esp,0xc
c0017020:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017024:	e8 17 88 ff ff       	call   c000f840 <malloc>
c0017029:	83 c4 10             	add    esp,0x10
c001702c:	89 c3                	mov    ebx,eax
c001702e:	83 ec 0c             	sub    esp,0xc
c0017031:	53                   	push   ebx
c0017032:	e8 3d 6f 00 00       	call   c001df74 <Mutex::Mutex()>
c0017037:	83 c4 10             	add    esp,0x10
c001703a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017041:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017045:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017049:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001704c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017050:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017057:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001705b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017065:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017068:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001706c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017072:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017078:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001707c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001707f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017086:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001708a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001708e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017094:	05 00 01 00 00       	add    eax,0x100
c0017099:	c1 e0 04             	shl    eax,0x4
c001709c:	83 ec 0c             	sub    esp,0xc
c001709f:	50                   	push   eax
c00170a0:	e8 9b 87 ff ff       	call   c000f840 <malloc>
c00170a5:	83 c4 10             	add    esp,0x10
c00170a8:	89 c2                	mov    edx,eax
c00170aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ce:	c1 e0 07             	shl    eax,0x7
c00170d1:	83 ec 0c             	sub    esp,0xc
c00170d4:	50                   	push   eax
c00170d5:	e8 66 87 ff ff       	call   c000f840 <malloc>
c00170da:	83 c4 10             	add    esp,0x10
c00170dd:	89 c2                	mov    edx,eax
c00170df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170e6:	90                   	nop
c00170e7:	83 c4 18             	add    esp,0x18
c00170ea:	5b                   	pop    ebx
c00170eb:	c3                   	ret    

c00170ec <VCache::invalidateReadBuffer()>:
c00170ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170f0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170f6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170fa:	c3                   	ret    
c00170fb:	90                   	nop

c00170fc <VCache::writeWriteBuffer()>:
c00170fc:	53                   	push   ebx
c00170fd:	83 ec 14             	sub    esp,0x14
c0017100:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017104:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017107:	8b 10                	mov    edx,DWORD PTR [eax]
c0017109:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001710c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001710f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017112:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017115:	50                   	push   eax
c0017116:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017119:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017120:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017127:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001712b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017132:	83 c4 28             	add    esp,0x28
c0017135:	5b                   	pop    ebx
c0017136:	c3                   	ret    
c0017137:	90                   	nop

c0017138 <VCache::~VCache()>:
c0017138:	83 ec 0c             	sub    esp,0xc
c001713b:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c0017140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017144:	89 10                	mov    DWORD PTR [eax],edx
c0017146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001714a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001714d:	84 c0                	test   al,al
c001714f:	74 0f                	je     c0017160 <VCache::~VCache()+0x28>
c0017151:	83 ec 0c             	sub    esp,0xc
c0017154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017158:	e8 9f ff ff ff       	call   c00170fc <VCache::writeWriteBuffer()>
c001715d:	83 c4 10             	add    esp,0x10
c0017160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017164:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017167:	83 ec 0c             	sub    esp,0xc
c001716a:	50                   	push   eax
c001716b:	e8 e0 86 ff ff       	call   c000f850 <free>
c0017170:	83 c4 10             	add    esp,0x10
c0017173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017177:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001717a:	83 ec 0c             	sub    esp,0xc
c001717d:	50                   	push   eax
c001717e:	e8 cd 86 ff ff       	call   c000f850 <free>
c0017183:	83 c4 10             	add    esp,0x10
c0017186:	90                   	nop
c0017187:	83 c4 0c             	add    esp,0xc
c001718a:	c3                   	ret    
c001718b:	90                   	nop

c001718c <VCache::~VCache()>:
c001718c:	83 ec 0c             	sub    esp,0xc
c001718f:	83 ec 0c             	sub    esp,0xc
c0017192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017196:	e8 9d ff ff ff       	call   c0017138 <VCache::~VCache()>
c001719b:	83 c4 10             	add    esp,0x10
c001719e:	83 ec 08             	sub    esp,0x8
c00171a1:	6a 44                	push   0x44
c00171a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171a7:	e8 f1 bc ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00171ac:	83 c4 10             	add    esp,0x10
c00171af:	83 c4 0c             	add    esp,0xc
c00171b2:	c3                   	ret    
c00171b3:	90                   	nop

c00171b4 <VCache::write(unsigned long long, int, void*)>:
c00171b4:	55                   	push   ebp
c00171b5:	57                   	push   edi
c00171b6:	56                   	push   esi
c00171b7:	53                   	push   ebx
c00171b8:	83 ec 28             	sub    esp,0x28
c00171bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00171cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171ce:	e8 03 72 00 00       	call   c001e3d6 <Semaphore::acquire()>
c00171d3:	83 c4 10             	add    esp,0x10
c00171d6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171da:	74 0c                	je     c00171e8 <VCache::write(unsigned long long, int, void*)+0x34>
c00171dc:	83 ec 0c             	sub    esp,0xc
c00171df:	53                   	push   ebx
c00171e0:	e8 07 ff ff ff       	call   c00170ec <VCache::invalidateReadBuffer()>
c00171e5:	83 c4 10             	add    esp,0x10
c00171e8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171ec:	74 66                	je     c0017254 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171f1:	99                   	cdq    
c00171f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171f6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171f9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171fc:	89 c1                	mov    ecx,eax
c00171fe:	89 d0                	mov    eax,edx
c0017200:	31 f1                	xor    ecx,esi
c0017202:	31 f8                	xor    eax,edi
c0017204:	89 ca                	mov    edx,ecx
c0017206:	09 c2                	or     edx,eax
c0017208:	75 3e                	jne    c0017248 <VCache::write(unsigned long long, int, void*)+0x94>
c001720a:	83 fd 01             	cmp    ebp,0x1
c001720d:	75 39                	jne    c0017248 <VCache::write(unsigned long long, int, void*)+0x94>
c001720f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017212:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017218:	51                   	push   ecx
c0017219:	50                   	push   eax
c001721a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001721e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017222:	0f af c8             	imul   ecx,eax
c0017225:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017228:	51                   	push   ecx
c0017229:	e8 16 95 fe ff       	call   c0000744 <memcpy>
c001722e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017231:	83 c4 10             	add    esp,0x10
c0017234:	40                   	inc    eax
c0017235:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017238:	83 c0 80             	add    eax,0xffffff80
c001723b:	75 57                	jne    c0017294 <VCache::write(unsigned long long, int, void*)+0xe0>
c001723d:	83 ec 0c             	sub    esp,0xc
c0017240:	53                   	push   ebx
c0017241:	e8 b6 fe ff ff       	call   c00170fc <VCache::writeWriteBuffer()>
c0017246:	eb 34                	jmp    c001727c <VCache::write(unsigned long long, int, void*)+0xc8>
c0017248:	83 ec 0c             	sub    esp,0xc
c001724b:	53                   	push   ebx
c001724c:	e8 ab fe ff ff       	call   c00170fc <VCache::writeWriteBuffer()>
c0017251:	83 c4 10             	add    esp,0x10
c0017254:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017257:	83 fd 7f             	cmp    ebp,0x7f
c001725a:	7f 25                	jg     c0017281 <VCache::write(unsigned long long, int, void*)+0xcd>
c001725c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001725f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017262:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017265:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017269:	52                   	push   edx
c001726a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017270:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017274:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017277:	e8 c8 94 fe ff       	call   c0000744 <memcpy>
c001727c:	83 c4 10             	add    esp,0x10
c001727f:	eb 13                	jmp    c0017294 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017281:	83 ec 0c             	sub    esp,0xc
c0017284:	8b 10                	mov    edx,DWORD PTR [eax]
c0017286:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001728a:	55                   	push   ebp
c001728b:	57                   	push   edi
c001728c:	56                   	push   esi
c001728d:	50                   	push   eax
c001728e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017291:	83 c4 20             	add    esp,0x20
c0017294:	83 ec 0c             	sub    esp,0xc
c0017297:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001729a:	e8 e5 76 00 00       	call   c001e984 <Semaphore::release()>
c001729f:	83 c4 2c             	add    esp,0x2c
c00172a2:	31 c0                	xor    eax,eax
c00172a4:	5b                   	pop    ebx
c00172a5:	5e                   	pop    esi
c00172a6:	5f                   	pop    edi
c00172a7:	5d                   	pop    ebp
c00172a8:	c3                   	ret    
c00172a9:	90                   	nop

c00172aa <VCache::read(unsigned long long, int, void*)>:
c00172aa:	55                   	push   ebp
c00172ab:	57                   	push   edi
c00172ac:	56                   	push   esi
c00172ad:	53                   	push   ebx
c00172ae:	83 ec 28             	sub    esp,0x28
c00172b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172b9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00172bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00172c5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172c9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00172cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172d0:	e8 01 71 00 00       	call   c001e3d6 <Semaphore::acquire()>
c00172d5:	83 c4 10             	add    esp,0x10
c00172d8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172dc:	74 0c                	je     c00172ea <VCache::read(unsigned long long, int, void*)+0x40>
c00172de:	83 ec 0c             	sub    esp,0xc
c00172e1:	53                   	push   ebx
c00172e2:	e8 15 fe ff ff       	call   c00170fc <VCache::writeWriteBuffer()>
c00172e7:	83 c4 10             	add    esp,0x10
c00172ea:	83 fe 01             	cmp    esi,0x1
c00172ed:	0f 85 80 00 00 00    	jne    c0017373 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172f3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172f6:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172fd:	75 74                	jne    c0017373 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172ff:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017302:	89 d1                	mov    ecx,edx
c0017304:	f7 d9                	neg    ecx
c0017306:	89 cf                	mov    edi,ecx
c0017308:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001730c:	c1 ff 1f             	sar    edi,0x1f
c001730f:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017312:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017316:	89 ce                	mov    esi,ecx
c0017318:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001731c:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017320:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017324:	89 cf                	mov    edi,ecx
c0017326:	74 0a                	je     c0017332 <VCache::read(unsigned long long, int, void*)+0x88>
c0017328:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001732b:	75 05                	jne    c0017332 <VCache::read(unsigned long long, int, void*)+0x88>
c001732d:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017330:	74 1c                	je     c001734e <VCache::read(unsigned long long, int, void*)+0xa4>
c0017332:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017336:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017339:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017341:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017344:	52                   	push   edx
c0017345:	57                   	push   edi
c0017346:	56                   	push   esi
c0017347:	50                   	push   eax
c0017348:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001734b:	83 c4 20             	add    esp,0x20
c001734e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017351:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017357:	50                   	push   eax
c0017358:	52                   	push   edx
c0017359:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001735c:	48                   	dec    eax
c001735d:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017361:	0f af c2             	imul   eax,edx
c0017364:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017367:	50                   	push   eax
c0017368:	55                   	push   ebp
c0017369:	e8 d6 93 fe ff       	call   c0000744 <memcpy>
c001736e:	83 c4 10             	add    esp,0x10
c0017371:	eb 21                	jmp    c0017394 <VCache::read(unsigned long long, int, void*)+0xea>
c0017373:	83 ec 0c             	sub    esp,0xc
c0017376:	53                   	push   ebx
c0017377:	e8 70 fd ff ff       	call   c00170ec <VCache::invalidateReadBuffer()>
c001737c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001737f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017381:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017384:	56                   	push   esi
c0017385:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017389:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001738d:	50                   	push   eax
c001738e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017391:	83 c4 20             	add    esp,0x20
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001739a:	e8 e5 75 00 00       	call   c001e984 <Semaphore::release()>
c001739f:	83 c4 2c             	add    esp,0x2c
c00173a2:	31 c0                	xor    eax,eax
c00173a4:	5b                   	pop    ebx
c00173a5:	5e                   	pop    esi
c00173a6:	5f                   	pop    edi
c00173a7:	5d                   	pop    ebp
c00173a8:	c3                   	ret    
c00173a9:	90                   	nop

c00173aa <Video::putrect(int, int, int, int, unsigned int)>:
c00173aa:	55                   	push   ebp
c00173ab:	57                   	push   edi
c00173ac:	56                   	push   esi
c00173ad:	53                   	push   ebx
c00173ae:	83 ec 1c             	sub    esp,0x1c
c00173b1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173b9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173bd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173c9:	01 df                	add    edi,ebx
c00173cb:	39 fb                	cmp    ebx,edi
c00173cd:	7d 1f                	jge    c00173ee <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00173cf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173d3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173d7:	7d 12                	jge    c00173eb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173d9:	8b 16                	mov    edx,DWORD PTR [esi]
c00173db:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173df:	53                   	push   ebx
c00173e0:	55                   	push   ebp
c00173e1:	45                   	inc    ebp
c00173e2:	56                   	push   esi
c00173e3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173e6:	83 c4 10             	add    esp,0x10
c00173e9:	eb e8                	jmp    c00173d3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173eb:	43                   	inc    ebx
c00173ec:	eb dd                	jmp    c00173cb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173ee:	83 c4 1c             	add    esp,0x1c
c00173f1:	5b                   	pop    ebx
c00173f2:	5e                   	pop    esi
c00173f3:	5f                   	pop    edi
c00173f4:	5d                   	pop    ebp
c00173f5:	c3                   	ret    

c00173f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173f6:	55                   	push   ebp
c00173f7:	57                   	push   edi
c00173f8:	31 ff                	xor    edi,edi
c00173fa:	56                   	push   esi
c00173fb:	53                   	push   ebx
c00173fc:	83 ec 1c             	sub    esp,0x1c
c00173ff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017403:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017407:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001740e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017413:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017417:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001741b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001741f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017422:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017426:	01 f9                	add    ecx,edi
c0017428:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001742c:	7d 2f                	jge    c001745d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001742e:	31 f6                	xor    esi,esi
c0017430:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017434:	01 f2                	add    edx,esi
c0017436:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001743a:	7d 1a                	jge    c0017456 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001743c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001743f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017442:	46                   	inc    esi
c0017443:	51                   	push   ecx
c0017444:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017448:	52                   	push   edx
c0017449:	55                   	push   ebp
c001744a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017454:	eb da                	jmp    c0017430 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017456:	47                   	inc    edi
c0017457:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001745b:	eb c5                	jmp    c0017422 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001745d:	83 c4 1c             	add    esp,0x1c
c0017460:	5b                   	pop    ebx
c0017461:	5e                   	pop    esi
c0017462:	5f                   	pop    edi
c0017463:	5d                   	pop    ebp
c0017464:	c3                   	ret    
c0017465:	90                   	nop

c0017466 <Video::blit(unsigned int*, int, int, int, int)>:
c0017466:	55                   	push   ebp
c0017467:	57                   	push   edi
c0017468:	56                   	push   esi
c0017469:	53                   	push   ebx
c001746a:	83 ec 1c             	sub    esp,0x1c
c001746d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017471:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017475:	85 c0                	test   eax,eax
c0017477:	79 02                	jns    c001747b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017479:	31 c0                	xor    eax,eax
c001747b:	c1 e0 02             	shl    eax,0x2
c001747e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017482:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017486:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001748a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001748e:	39 d8                	cmp    eax,ebx
c0017490:	7e 49                	jle    c00174db <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017492:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017498:	7c 41                	jl     c00174db <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001749a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001749e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174a2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174a6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174aa:	39 f9                	cmp    ecx,edi
c00174ac:	7e 22                	jle    c00174d0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174ae:	83 c5 04             	add    ebp,0x4
c00174b1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174b7:	7c 14                	jl     c00174cd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174b9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174bb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174c2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174c6:	56                   	push   esi
c00174c7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00174ca:	83 c4 10             	add    esp,0x10
c00174cd:	47                   	inc    edi
c00174ce:	eb d2                	jmp    c00174a2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174d4:	43                   	inc    ebx
c00174d5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174d9:	eb ab                	jmp    c0017486 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174db:	83 c4 1c             	add    esp,0x1c
c00174de:	5b                   	pop    ebx
c00174df:	5e                   	pop    esi
c00174e0:	5f                   	pop    edi
c00174e1:	5d                   	pop    ebp
c00174e2:	c3                   	ret    
c00174e3:	90                   	nop

c00174e4 <Video::clearScreen(unsigned int)>:
c00174e4:	57                   	push   edi
c00174e5:	56                   	push   esi
c00174e6:	53                   	push   ebx
c00174e7:	31 db                	xor    ebx,ebx
c00174e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174ed:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174f3:	7e 1f                	jle    c0017514 <Video::clearScreen(unsigned int)+0x30>
c00174f5:	31 ff                	xor    edi,edi
c00174f7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174fd:	7e 12                	jle    c0017511 <Video::clearScreen(unsigned int)+0x2d>
c00174ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0017501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017505:	53                   	push   ebx
c0017506:	57                   	push   edi
c0017507:	47                   	inc    edi
c0017508:	56                   	push   esi
c0017509:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001750c:	83 c4 10             	add    esp,0x10
c001750f:	eb e6                	jmp    c00174f7 <Video::clearScreen(unsigned int)+0x13>
c0017511:	43                   	inc    ebx
c0017512:	eb d9                	jmp    c00174ed <Video::clearScreen(unsigned int)+0x9>
c0017514:	5b                   	pop    ebx
c0017515:	5e                   	pop    esi
c0017516:	5f                   	pop    edi
c0017517:	c3                   	ret    

c0017518 <Video::putpixel(int, int, unsigned int)>:
c0017518:	c7 44 24 04 28 b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b528
c0017520:	e9 0a 31 00 00       	jmp    c001a62f <Krnl::panic(char const*)>
c0017525:	90                   	nop

c0017526 <Video::Video(char const*)>:
c0017526:	83 ec 0c             	sub    esp,0xc
c0017529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001752d:	83 ec 08             	sub    esp,0x8
c0017530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017534:	50                   	push   eax
c0017535:	e8 5a d0 ff ff       	call   c0014594 <Device::Device(char const*)>
c001753a:	83 c4 10             	add    esp,0x10
c001753d:	ba ac b5 02 c0       	mov    edx,0xc002b5ac
c0017542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017546:	89 10                	mov    DWORD PTR [eax],edx
c0017548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001754c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017556:	90                   	nop
c0017557:	83 c4 0c             	add    esp,0xc
c001755a:	c3                   	ret    
c001755b:	90                   	nop

c001755c <Video::~Video()>:
c001755c:	83 ec 0c             	sub    esp,0xc
c001755f:	ba ac b5 02 c0       	mov    edx,0xc002b5ac
c0017564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017568:	89 10                	mov    DWORD PTR [eax],edx
c001756a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001756e:	83 ec 0c             	sub    esp,0xc
c0017571:	50                   	push   eax
c0017572:	e8 ff cc ff ff       	call   c0014276 <Device::~Device()>
c0017577:	83 c4 10             	add    esp,0x10
c001757a:	90                   	nop
c001757b:	83 c4 0c             	add    esp,0xc
c001757e:	c3                   	ret    
c001757f:	90                   	nop

c0017580 <Video::~Video()>:
c0017580:	83 ec 0c             	sub    esp,0xc
c0017583:	83 ec 0c             	sub    esp,0xc
c0017586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001758a:	e8 cd ff ff ff       	call   c001755c <Video::~Video()>
c001758f:	83 c4 10             	add    esp,0x10
c0017592:	83 ec 08             	sub    esp,0x8
c0017595:	68 64 01 00 00       	push   0x164
c001759a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001759e:	e8 fa b8 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00175a3:	83 c4 10             	add    esp,0x10
c00175a6:	83 c4 0c             	add    esp,0xc
c00175a9:	c3                   	ret    

c00175aa <Video::isMonochrome()>:
c00175aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175ae:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175b4:	c3                   	ret    
c00175b5:	90                   	nop

c00175b6 <Video::getWidth()>:
c00175b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175c0:	c3                   	ret    
c00175c1:	90                   	nop

c00175c2 <Video::getHeight()>:
c00175c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00175cc:	c3                   	ret    
c00175cd:	90                   	nop

c00175ce <Video::drawCursor(int, int, unsigned char*, int)>:
c00175ce:	55                   	push   ebp
c00175cf:	57                   	push   edi
c00175d0:	56                   	push   esi
c00175d1:	53                   	push   ebx
c00175d2:	83 ec 2c             	sub    esp,0x2c
c00175d5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175dd:	83 f8 01             	cmp    eax,0x1
c00175e0:	19 c9                	sbb    ecx,ecx
c00175e2:	31 db                	xor    ebx,ebx
c00175e4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175e8:	89 cd                	mov    ebp,ecx
c00175ea:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175f2:	f7 d5                	not    ebp
c00175f4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175fa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175fe:	01 d8                	add    eax,ebx
c0017600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017604:	56                   	push   esi
c0017605:	e8 b8 ff ff ff       	call   c00175c2 <Video::getHeight()>
c001760a:	59                   	pop    ecx
c001760b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001760f:	7e 70                	jle    c0017681 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017611:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017615:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017619:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001761c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017620:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017624:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001762b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001762f:	89 f8                	mov    eax,edi
c0017631:	83 c0 20             	add    eax,0x20
c0017634:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017638:	56                   	push   esi
c0017639:	e8 78 ff ff ff       	call   c00175b6 <Video::getWidth()>
c001763e:	5a                   	pop    edx
c001763f:	39 c7                	cmp    edi,eax
c0017641:	7d 34                	jge    c0017677 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017643:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017648:	74 05                	je     c001764f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001764a:	8b 06                	mov    eax,DWORD PTR [esi]
c001764c:	55                   	push   ebp
c001764d:	eb 0d                	jmp    c001765c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001764f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017654:	74 12                	je     c0017668 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017656:	8b 06                	mov    eax,DWORD PTR [esi]
c0017658:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001765c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017660:	57                   	push   edi
c0017661:	56                   	push   esi
c0017662:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017665:	83 c4 10             	add    esp,0x10
c0017668:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001766c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017670:	47                   	inc    edi
c0017671:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017675:	75 c1                	jne    c0017638 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017677:	43                   	inc    ebx
c0017678:	83 fb 20             	cmp    ebx,0x20
c001767b:	0f 85 79 ff ff ff    	jne    c00175fa <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017681:	83 c4 2c             	add    esp,0x2c
c0017684:	5b                   	pop    ebx
c0017685:	5e                   	pop    esi
c0017686:	5f                   	pop    edi
c0017687:	5d                   	pop    ebp
c0017688:	c3                   	ret    
c0017689:	90                   	nop

c001768a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001768a:	55                   	push   ebp
c001768b:	57                   	push   edi
c001768c:	56                   	push   esi
c001768d:	53                   	push   ebx
c001768e:	83 ec 28             	sub    esp,0x28
c0017691:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017695:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017699:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001769d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176a1:	c1 e7 08             	shl    edi,0x8
c00176a4:	01 c7                	add    edi,eax
c00176a6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176aa:	c1 e0 08             	shl    eax,0x8
c00176ad:	01 d0                	add    eax,edx
c00176af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176b7:	0f af c7             	imul   eax,edi
c00176ba:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176c1:	50                   	push   eax
c00176c2:	e8 79 81 ff ff       	call   c000f840 <malloc>
c00176c7:	83 c4 10             	add    esp,0x10
c00176ca:	89 c5                	mov    ebp,eax
c00176cc:	85 c0                	test   eax,eax
c00176ce:	75 15                	jne    c00176e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176d0:	83 ec 0c             	sub    esp,0xc
c00176d3:	68 49 b5 02 c0       	push   0xc002b549
c00176d8:	e8 a0 b8 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00176dd:	83 c4 10             	add    esp,0x10
c00176e0:	e9 1c 01 00 00       	jmp    c0017801 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176e5:	be 12 00 00 00       	mov    esi,0x12
c00176ea:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176ee:	74 11                	je     c0017701 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176f0:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176f4:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176f8:	c1 fe 03             	sar    esi,0x3
c00176fb:	0f af f0             	imul   esi,eax
c00176fe:	83 c6 12             	add    esi,0x12
c0017701:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017705:	74 04                	je     c001770b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017707:	85 ff                	test   edi,edi
c0017709:	75 12                	jne    c001771d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001770b:	83 ec 0c             	sub    esp,0xc
c001770e:	68 60 b5 02 c0       	push   0xc002b560
c0017713:	e8 65 b8 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0017718:	e9 ce 00 00 00       	jmp    c00177eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001771d:	52                   	push   edx
c001771e:	52                   	push   edx
c001771f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017723:	50                   	push   eax
c0017724:	68 75 b5 02 c0       	push   0xc002b575
c0017729:	e8 4f b8 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001772e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017732:	83 c4 10             	add    esp,0x10
c0017735:	80 fa 02             	cmp    dl,0x2
c0017738:	0f 85 98 00 00 00    	jne    c00177d6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001773e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017743:	75 10                	jne    c0017755 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017745:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017749:	75 0a                	jne    c0017755 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001774b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001774e:	83 e8 18             	sub    eax,0x18
c0017751:	a8 f7                	test   al,0xf7
c0017753:	74 0a                	je     c001775f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017755:	83 ec 0c             	sub    esp,0xc
c0017758:	68 82 b5 02 c0       	push   0xc002b582
c001775d:	eb 7f                	jmp    c00177de <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001775f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017767:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001776f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017773:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001777b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001777f:	75 0c                	jne    c001778d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017781:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017786:	c1 e0 18             	shl    eax,0x18
c0017789:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001778d:	41                   	inc    ecx
c001778e:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017793:	c1 e2 10             	shl    edx,0x10
c0017796:	89 d0                	mov    eax,edx
c0017798:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001779d:	c1 e2 08             	shl    edx,0x8
c00177a0:	09 c2                	or     edx,eax
c00177a2:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177a6:	09 c2                	or     edx,eax
c00177a8:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177ac:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177b0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177b4:	c1 f8 03             	sar    eax,0x3
c00177b7:	01 c6                	add    esi,eax
c00177b9:	89 c8                	mov    eax,ecx
c00177bb:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177bf:	39 c7                	cmp    edi,eax
c00177c1:	7f b0                	jg     c0017773 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177c3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177cb:	39 14 24             	cmp    DWORD PTR [esp],edx
c00177ce:	7e 22                	jle    c00177f2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177d0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177d4:	eb 99                	jmp    c001776f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177d6:	50                   	push   eax
c00177d7:	50                   	push   eax
c00177d8:	52                   	push   edx
c00177d9:	68 90 b5 02 c0       	push   0xc002b590
c00177de:	e8 9a b7 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00177e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177e6:	e8 65 80 ff ff       	call   c000f850 <free>
c00177eb:	83 c4 10             	add    esp,0x10
c00177ee:	31 ed                	xor    ebp,ebp
c00177f0:	eb 0f                	jmp    c0017801 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177f6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177f9:	89 38                	mov    DWORD PTR [eax],edi
c00177fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177ff:	89 08                	mov    DWORD PTR [eax],ecx
c0017801:	83 c4 1c             	add    esp,0x1c
c0017804:	89 e8                	mov    eax,ebp
c0017806:	5b                   	pop    ebx
c0017807:	5e                   	pop    esi
c0017808:	5f                   	pop    edi
c0017809:	5d                   	pop    ebp
c001780a:	c3                   	ret    
c001780b:	90                   	nop

c001780c <Video::putTGA(int, int, unsigned char*, int)>:
c001780c:	55                   	push   ebp
c001780d:	57                   	push   edi
c001780e:	56                   	push   esi
c001780f:	53                   	push   ebx
c0017810:	83 ec 28             	sub    esp,0x28
c0017813:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017817:	8d 44 24 18          	lea    eax,[esp+0x18]
c001781b:	50                   	push   eax
c001781c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017820:	50                   	push   eax
c0017821:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017825:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017829:	56                   	push   esi
c001782a:	e8 5b fe ff ff       	call   c001768a <Video::tgaParse(unsigned char*, int, int*, int*)>
c001782f:	83 c4 20             	add    esp,0x20
c0017832:	85 c0                	test   eax,eax
c0017834:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017838:	74 35                	je     c001786f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001783a:	89 c7                	mov    edi,eax
c001783c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017840:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017844:	39 d8                	cmp    eax,ebx
c0017846:	7e 27                	jle    c001786f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017848:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001784c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017850:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017854:	39 e8                	cmp    eax,ebp
c0017856:	7e 14                	jle    c001786c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017858:	8b 06                	mov    eax,DWORD PTR [esi]
c001785a:	83 c7 04             	add    edi,0x4
c001785d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017860:	53                   	push   ebx
c0017861:	55                   	push   ebp
c0017862:	45                   	inc    ebp
c0017863:	56                   	push   esi
c0017864:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017867:	83 c4 10             	add    esp,0x10
c001786a:	eb e0                	jmp    c001784c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001786c:	43                   	inc    ebx
c001786d:	eb cd                	jmp    c001783c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001786f:	83 c4 1c             	add    esp,0x1c
c0017872:	5b                   	pop    ebx
c0017873:	5e                   	pop    esi
c0017874:	5f                   	pop    edi
c0017875:	5d                   	pop    ebp
c0017876:	c3                   	ret    
c0017877:	90                   	nop

c0017878 <ACPI::close(int, int, void*)>:
c0017878:	83 ec 1c             	sub    esp,0x1c
c001787b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017883:	74 0a                	je     c001788f <ACPI::close(int, int, void*)+0x17>
c0017885:	b8 00 00 00 00       	mov    eax,0x0
c001788a:	e9 9a 00 00 00       	jmp    c0017929 <ACPI::close(int, int, void*)+0xb1>
c001788f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017894:	75 37                	jne    c00178cd <ACPI::close(int, int, void*)+0x55>
c0017896:	83 ec 0c             	sub    esp,0xc
c0017899:	68 ec b5 02 c0       	push   0xc002b5ec
c001789e:	e8 da b6 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00178a3:	83 c4 10             	add    esp,0x10
c00178a6:	a1 28 0d 03 c0       	mov    eax,ds:0xc0030d28
c00178ab:	85 c0                	test   eax,eax
c00178ad:	74 07                	je     c00178b6 <ACPI::close(int, int, void*)+0x3e>
c00178af:	a1 28 0d 03 c0       	mov    eax,ds:0xc0030d28
c00178b4:	ff d0                	call   eax
c00178b6:	83 ec 0c             	sub    esp,0xc
c00178b9:	68 10 b7 02 c0       	push   0xc002b710
c00178be:	e8 6c 2d 00 00       	call   c001a62f <Krnl::panic(char const*)>
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178cb:	eb 5c                	jmp    c0017929 <ACPI::close(int, int, void*)+0xb1>
c00178cd:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178d2:	75 50                	jne    c0017924 <ACPI::close(int, int, void*)+0xac>
c00178d4:	a1 24 0d 03 c0       	mov    eax,ds:0xc0030d24
c00178d9:	85 c0                	test   eax,eax
c00178db:	74 07                	je     c00178e4 <ACPI::close(int, int, void*)+0x6c>
c00178dd:	a1 24 0d 03 c0       	mov    eax,ds:0xc0030d24
c00178e2:	ff d0                	call   eax
c00178e4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178e9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178ee:	83 e0 02             	and    eax,0x2
c00178f1:	74 1c                	je     c001790f <ACPI::close(int, int, void*)+0x97>
c00178f3:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178fe:	89 c2                	mov    edx,eax
c0017900:	ec                   	in     al,dx
c0017901:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017905:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017909:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001790d:	eb da                	jmp    c00178e9 <ACPI::close(int, int, void*)+0x71>
c001790f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017916:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001791b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001791f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017923:	ee                   	out    dx,al
c0017924:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017929:	83 c4 1c             	add    esp,0x1c
c001792c:	c3                   	ret    

c001792d <findRSDP()>:
c001792d:	83 ec 1c             	sub    esp,0x1c
c0017930:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017935:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001793b:	83 e0 04             	and    eax,0x4
c001793e:	84 c0                	test   al,al
c0017940:	75 07                	jne    c0017949 <findRSDP()+0x1c>
c0017942:	b8 00 00 00 00       	mov    eax,0x0
c0017947:	eb 6a                	jmp    c00179b3 <findRSDP()+0x86>
c0017949:	a1 b0 e6 02 c0       	mov    eax,ds:0xc002e6b0
c001794e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017953:	7f 1b                	jg     c0017970 <findRSDP()+0x43>
c0017955:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001795a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017960:	83 e2 fb             	and    edx,0xfffffffb
c0017963:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017969:	b8 00 00 00 00       	mov    eax,0x0
c001796e:	eb 43                	jmp    c00179b3 <findRSDP()+0x86>
c0017970:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017978:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017980:	77 2c                	ja     c00179ae <findRSDP()+0x81>
c0017982:	83 ec 04             	sub    esp,0x4
c0017985:	6a 08                	push   0x8
c0017987:	68 f9 b5 02 c0       	push   0xc002b5f9
c001798c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017990:	e8 ab 8c fe ff       	call   c0000640 <memcmp>
c0017995:	83 c4 10             	add    esp,0x10
c0017998:	85 c0                	test   eax,eax
c001799a:	0f 94 c0             	sete   al
c001799d:	84 c0                	test   al,al
c001799f:	74 06                	je     c00179a7 <findRSDP()+0x7a>
c00179a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179a5:	eb 0c                	jmp    c00179b3 <findRSDP()+0x86>
c00179a7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179ac:	eb ca                	jmp    c0017978 <findRSDP()+0x4b>
c00179ae:	b8 00 00 00 00       	mov    eax,0x0
c00179b3:	83 c4 1c             	add    esp,0x1c
c00179b6:	c3                   	ret    

c00179b7 <loadACPITables(unsigned char*)>:
c00179b7:	56                   	push   esi
c00179b8:	53                   	push   ebx
c00179b9:	83 ec 44             	sub    esp,0x44
c00179bc:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00179c1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179c7:	83 e0 04             	and    eax,0x4
c00179ca:	84 c0                	test   al,al
c00179cc:	0f 84 05 02 00 00    	je     c0017bd7 <loadACPITables(unsigned char*)+0x220>
c00179d2:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c00179d7:	84 c0                	test   al,al
c00179d9:	74 75                	je     c0017a50 <loadACPITables(unsigned char*)+0x99>
c00179db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ea:	83 e8 24             	sub    eax,0x24
c00179ed:	c1 e8 03             	shr    eax,0x3
c00179f0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179f4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a00:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a04:	0f 8d b2 00 00 00    	jge    c0017abc <loadACPITables(unsigned char*)+0x105>
c0017a0a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a0e:	83 c0 24             	add    eax,0x24
c0017a11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a19:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a21:	c1 e0 03             	shl    eax,0x3
c0017a24:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a2c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a31:	89 c1                	mov    ecx,eax
c0017a33:	a1 2c 0d 03 c0       	mov    eax,ds:0xc0030d2c
c0017a38:	8d 50 01             	lea    edx,[eax+0x1]
c0017a3b:	89 15 2c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d2c,edx
c0017a41:	89 ca                	mov    edx,ecx
c0017a43:	89 14 c5 44 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2bc],edx
c0017a4a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a4e:	eb ac                	jmp    c00179fc <loadACPITables(unsigned char*)+0x45>
c0017a50:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a5f:	83 e8 24             	sub    eax,0x24
c0017a62:	c1 e8 02             	shr    eax,0x2
c0017a65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a69:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a71:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a75:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a79:	7d 41                	jge    c0017abc <loadACPITables(unsigned char*)+0x105>
c0017a7b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a7f:	83 c0 24             	add    eax,0x24
c0017a82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a92:	c1 e0 02             	shl    eax,0x2
c0017a95:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a9f:	a1 2c 0d 03 c0       	mov    eax,ds:0xc0030d2c
c0017aa4:	8d 50 01             	lea    edx,[eax+0x1]
c0017aa7:	89 15 2c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d2c,edx
c0017aad:	89 ca                	mov    edx,ecx
c0017aaf:	89 14 c5 44 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2bc],edx
c0017ab6:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017aba:	eb b5                	jmp    c0017a71 <loadACPITables(unsigned char*)+0xba>
c0017abc:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017ac4:	a1 2c 0d 03 c0       	mov    eax,ds:0xc0030d2c
c0017ac9:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017acd:	0f 8d 05 01 00 00    	jge    c0017bd8 <loadACPITables(unsigned char*)+0x221>
c0017ad3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ad7:	8b 04 c5 44 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf2bc]
c0017ade:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ae6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aee:	25 ff 0f 00 00       	and    eax,0xfff
c0017af3:	89 c6                	mov    esi,eax
c0017af5:	e8 38 a3 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0017afa:	89 c3                	mov    ebx,eax
c0017afc:	83 ec 0c             	sub    esp,0xc
c0017aff:	6a 01                	push   0x1
c0017b01:	e8 91 a0 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0017b06:	83 c4 10             	add    esp,0x10
c0017b09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b0d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b13:	83 ec 0c             	sub    esp,0xc
c0017b16:	6a 01                	push   0x1
c0017b18:	6a 01                	push   0x1
c0017b1a:	50                   	push   eax
c0017b1b:	52                   	push   edx
c0017b1c:	53                   	push   ebx
c0017b1d:	e8 40 ab ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b22:	83 c4 20             	add    esp,0x20
c0017b25:	09 f0                	or     eax,esi
c0017b27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b2f:	c1 e0 03             	shl    eax,0x3
c0017b32:	05 40 0d 03 c0       	add    eax,0xc0030d40
c0017b37:	83 ec 04             	sub    esp,0x4
c0017b3a:	6a 04                	push   0x4
c0017b3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b40:	50                   	push   eax
c0017b41:	e8 fe 8b fe ff       	call   c0000744 <memcpy>
c0017b46:	83 c4 10             	add    esp,0x10
c0017b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b58:	05 00 10 00 00       	add    eax,0x1000
c0017b5d:	c1 e8 0c             	shr    eax,0xc
c0017b60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b68:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b6f:	25 ff 0f 00 00       	and    eax,0xfff
c0017b74:	89 c6                	mov    esi,eax
c0017b76:	e8 b7 a2 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0017b7b:	89 c3                	mov    ebx,eax
c0017b7d:	83 ec 0c             	sub    esp,0xc
c0017b80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b84:	e8 0e a0 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0017b89:	83 c4 10             	add    esp,0x10
c0017b8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b90:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b96:	83 ec 0c             	sub    esp,0xc
c0017b99:	6a 01                	push   0x1
c0017b9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b9f:	50                   	push   eax
c0017ba0:	52                   	push   edx
c0017ba1:	53                   	push   ebx
c0017ba2:	e8 bb aa ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ba7:	83 c4 20             	add    esp,0x20
c0017baa:	09 f0                	or     eax,esi
c0017bac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017bb3:	83 ec 0c             	sub    esp,0xc
c0017bb6:	50                   	push   eax
c0017bb7:	e8 4b a4 ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c0017bbc:	83 c4 10             	add    esp,0x10
c0017bbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bc3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017bc7:	89 14 c5 44 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2bc],edx
c0017bce:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017bd2:	e9 ed fe ff ff       	jmp    c0017ac4 <loadACPITables(unsigned char*)+0x10d>
c0017bd7:	90                   	nop
c0017bd8:	83 c4 44             	add    esp,0x44
c0017bdb:	5b                   	pop    ebx
c0017bdc:	5e                   	pop    esi
c0017bdd:	c3                   	ret    

c0017bde <findRSDT(unsigned char*)>:
c0017bde:	56                   	push   esi
c0017bdf:	53                   	push   ebx
c0017be0:	83 ec 44             	sub    esp,0x44
c0017be3:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017be8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bee:	83 e0 04             	and    eax,0x4
c0017bf1:	84 c0                	test   al,al
c0017bf3:	75 0a                	jne    c0017bff <findRSDT(unsigned char*)+0x21>
c0017bf5:	b8 00 00 00 00       	mov    eax,0x0
c0017bfa:	e9 f7 00 00 00       	jmp    c0017cf6 <findRSDT(unsigned char*)+0x118>
c0017bff:	83 ec 04             	sub    esp,0x4
c0017c02:	6a 24                	push   0x24
c0017c04:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c08:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c0c:	50                   	push   eax
c0017c0d:	e8 32 8b fe ff       	call   c0000744 <memcpy>
c0017c12:	83 c4 10             	add    esp,0x10
c0017c15:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c19:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c1d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c2d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c35:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c3d:	25 ff 0f 00 00       	and    eax,0xfff
c0017c42:	89 c6                	mov    esi,eax
c0017c44:	e8 e9 a1 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0017c49:	89 c3                	mov    ebx,eax
c0017c4b:	83 ec 0c             	sub    esp,0xc
c0017c4e:	6a 02                	push   0x2
c0017c50:	e8 42 9f ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0017c55:	83 c4 10             	add    esp,0x10
c0017c58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c5c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c62:	83 ec 0c             	sub    esp,0xc
c0017c65:	6a 01                	push   0x1
c0017c67:	6a 02                	push   0x2
c0017c69:	50                   	push   eax
c0017c6a:	52                   	push   edx
c0017c6b:	53                   	push   ebx
c0017c6c:	e8 f1 a9 ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c71:	83 c4 20             	add    esp,0x20
c0017c74:	09 f0                	or     eax,esi
c0017c76:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c7e:	25 ff 0f 00 00       	and    eax,0xfff
c0017c83:	89 c6                	mov    esi,eax
c0017c85:	e8 a8 a1 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0017c8a:	89 c3                	mov    ebx,eax
c0017c8c:	83 ec 0c             	sub    esp,0xc
c0017c8f:	6a 02                	push   0x2
c0017c91:	e8 01 9f ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0017c96:	83 c4 10             	add    esp,0x10
c0017c99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c9d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ca3:	83 ec 0c             	sub    esp,0xc
c0017ca6:	6a 01                	push   0x1
c0017ca8:	6a 02                	push   0x2
c0017caa:	50                   	push   eax
c0017cab:	52                   	push   edx
c0017cac:	53                   	push   ebx
c0017cad:	e8 b0 a9 ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cb2:	83 c4 20             	add    esp,0x20
c0017cb5:	09 f0                	or     eax,esi
c0017cb7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cbb:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017cc0:	75 11                	jne    c0017cd3 <findRSDT(unsigned char*)+0xf5>
c0017cc2:	c6 05 40 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f40,0x0
c0017cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ccd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cd1:	eb 1f                	jmp    c0017cf2 <findRSDT(unsigned char*)+0x114>
c0017cd3:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017cd8:	75 11                	jne    c0017ceb <findRSDT(unsigned char*)+0x10d>
c0017cda:	c6 05 40 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f40,0x1
c0017ce1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ce5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ce9:	eb 07                	jmp    c0017cf2 <findRSDT(unsigned char*)+0x114>
c0017ceb:	b8 00 00 00 00       	mov    eax,0x0
c0017cf0:	eb 04                	jmp    c0017cf6 <findRSDT(unsigned char*)+0x118>
c0017cf2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cf6:	83 c4 44             	add    esp,0x44
c0017cf9:	5b                   	pop    ebx
c0017cfa:	5e                   	pop    esi
c0017cfb:	c3                   	ret    

c0017cfc <findDataTable(unsigned char*, char*)>:
c0017cfc:	83 ec 1c             	sub    esp,0x1c
c0017cff:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017d04:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d0a:	83 e0 04             	and    eax,0x4
c0017d0d:	84 c0                	test   al,al
c0017d0f:	75 07                	jne    c0017d18 <findDataTable(unsigned char*, char*)+0x1c>
c0017d11:	b8 00 00 00 00       	mov    eax,0x0
c0017d16:	eb 7c                	jmp    c0017d94 <findDataTable(unsigned char*, char*)+0x98>
c0017d18:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d20:	a1 2c 0d 03 c0       	mov    eax,ds:0xc0030d2c
c0017d25:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d29:	7d 3a                	jge    c0017d65 <findDataTable(unsigned char*, char*)+0x69>
c0017d2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d2f:	c1 e0 03             	shl    eax,0x3
c0017d32:	05 40 0d 03 c0       	add    eax,0xc0030d40
c0017d37:	83 ec 04             	sub    esp,0x4
c0017d3a:	6a 04                	push   0x4
c0017d3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d40:	50                   	push   eax
c0017d41:	e8 fa 88 fe ff       	call   c0000640 <memcmp>
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	85 c0                	test   eax,eax
c0017d4b:	0f 94 c0             	sete   al
c0017d4e:	84 c0                	test   al,al
c0017d50:	74 0d                	je     c0017d5f <findDataTable(unsigned char*, char*)+0x63>
c0017d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d56:	8b 04 c5 44 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf2bc]
c0017d5d:	eb 35                	jmp    c0017d94 <findDataTable(unsigned char*, char*)+0x98>
c0017d5f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d63:	eb bb                	jmp    c0017d20 <findDataTable(unsigned char*, char*)+0x24>
c0017d65:	a0 40 0f 03 c0       	mov    al,ds:0xc0030f40
c0017d6a:	84 c0                	test   al,al
c0017d6c:	74 07                	je     c0017d75 <findDataTable(unsigned char*, char*)+0x79>
c0017d6e:	b8 58 00 00 00       	mov    eax,0x58
c0017d73:	eb 05                	jmp    c0017d7a <findDataTable(unsigned char*, char*)+0x7e>
c0017d75:	b8 52 00 00 00       	mov    eax,0x52
c0017d7a:	83 ec 04             	sub    esp,0x4
c0017d7d:	50                   	push   eax
c0017d7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d82:	68 34 b7 02 c0       	push   0xc002b734
c0017d87:	e8 f1 b1 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	b8 00 00 00 00       	mov    eax,0x0
c0017d94:	83 c4 1c             	add    esp,0x1c
c0017d97:	c3                   	ret    

c0017d98 <scanMADT()>:
c0017d98:	53                   	push   ebx
c0017d99:	83 ec 38             	sub    esp,0x38
c0017d9c:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017da1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017da7:	83 e0 04             	and    eax,0x4
c0017daa:	84 c0                	test   al,al
c0017dac:	0f 84 63 04 00 00    	je     c0018215 <scanMADT()+0x47d>
c0017db2:	e8 76 fb ff ff       	call   c001792d <findRSDP()>
c0017db7:	a3 4c 0f 03 c0       	mov    ds:0xc0030f4c,eax
c0017dbc:	a1 4c 0f 03 c0       	mov    eax,ds:0xc0030f4c
c0017dc1:	85 c0                	test   eax,eax
c0017dc3:	75 19                	jne    c0017dde <scanMADT()+0x46>
c0017dc5:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017dca:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dd0:	83 e2 fb             	and    edx,0xfffffffb
c0017dd3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017dd9:	e9 3b 04 00 00       	jmp    c0018219 <scanMADT()+0x481>
c0017dde:	a1 4c 0f 03 c0       	mov    eax,ds:0xc0030f4c
c0017de3:	83 ec 0c             	sub    esp,0xc
c0017de6:	50                   	push   eax
c0017de7:	e8 f2 fd ff ff       	call   c0017bde <findRSDT(unsigned char*)>
c0017dec:	83 c4 10             	add    esp,0x10
c0017def:	a3 48 0f 03 c0       	mov    ds:0xc0030f48,eax
c0017df4:	a1 48 0f 03 c0       	mov    eax,ds:0xc0030f48
c0017df9:	85 c0                	test   eax,eax
c0017dfb:	75 19                	jne    c0017e16 <scanMADT()+0x7e>
c0017dfd:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017e02:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e08:	83 e2 fb             	and    edx,0xfffffffb
c0017e0b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e11:	e9 03 04 00 00       	jmp    c0018219 <scanMADT()+0x481>
c0017e16:	a1 48 0f 03 c0       	mov    eax,ds:0xc0030f48
c0017e1b:	83 ec 0c             	sub    esp,0xc
c0017e1e:	50                   	push   eax
c0017e1f:	e8 93 fb ff ff       	call   c00179b7 <loadACPITables(unsigned char*)>
c0017e24:	83 c4 10             	add    esp,0x10
c0017e27:	a1 48 0f 03 c0       	mov    eax,ds:0xc0030f48
c0017e2c:	83 ec 08             	sub    esp,0x8
c0017e2f:	68 02 b6 02 c0       	push   0xc002b602
c0017e34:	50                   	push   eax
c0017e35:	e8 c2 fe ff ff       	call   c0017cfc <findDataTable(unsigned char*, char*)>
c0017e3a:	83 c4 10             	add    esp,0x10
c0017e3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e41:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e46:	75 19                	jne    c0017e61 <scanMADT()+0xc9>
c0017e48:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0017e4d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e53:	83 e2 fe             	and    edx,0xfffffffe
c0017e56:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e5c:	e9 b8 03 00 00       	jmp    c0018219 <scanMADT()+0x481>
c0017e61:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e70:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e74:	0f 87 9f 03 00 00    	ja     c0018219 <scanMADT()+0x481>
c0017e7a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e82:	0f 87 91 03 00 00    	ja     c0018219 <scanMADT()+0x481>
c0017e88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e8c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e94:	8d 50 01             	lea    edx,[eax+0x1]
c0017e97:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e9f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ea3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017ea7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eab:	8d 50 01             	lea    edx,[eax+0x1]
c0017eae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017eba:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017ebe:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017ec3:	0f 86 4f 03 00 00    	jbe    c0018218 <scanMADT()+0x480>
c0017ec9:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ece:	75 57                	jne    c0017f27 <scanMADT()+0x18f>
c0017ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017edb:	8a 15 40 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031140
c0017ee1:	0f b6 d2             	movzx  edx,dl
c0017ee4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ee8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017eec:	88 82 80 11 03 c0    	mov    BYTE PTR [edx-0x3ffcee80],al
c0017ef2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ef9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017efd:	8a 15 40 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031140
c0017f03:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f06:	88 0d 40 11 03 c0    	mov    BYTE PTR ds:0xc0031140,cl
c0017f0c:	0f b6 d2             	movzx  edx,dl
c0017f0f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f13:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f17:	88 82 60 11 03 c0    	mov    BYTE PTR [edx-0x3ffceea0],al
c0017f1d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f22:	e9 da 02 00 00       	jmp    c0018201 <scanMADT()+0x469>
c0017f27:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f2c:	0f 85 14 01 00 00    	jne    c0018046 <scanMADT()+0x2ae>
c0017f32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f36:	8d 50 01             	lea    edx,[eax+0x1]
c0017f39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f3d:	8a 15 00 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031000
c0017f43:	0f b6 d2             	movzx  edx,dl
c0017f46:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f4a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f4e:	88 82 20 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefe0],al
c0017f54:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f60:	01 d0                	add    eax,edx
c0017f62:	83 c0 2c             	add    eax,0x2c
c0017f65:	8a 00                	mov    al,BYTE PTR [eax]
c0017f67:	0f b6 d0             	movzx  edx,al
c0017f6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f75:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f79:	0f b6 c0             	movzx  eax,al
c0017f7c:	c1 e0 08             	shl    eax,0x8
c0017f7f:	89 d1                	mov    ecx,edx
c0017f81:	09 c1                	or     ecx,eax
c0017f83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f87:	8d 50 02             	lea    edx,[eax+0x2]
c0017f8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f8e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f92:	0f b6 c0             	movzx  eax,al
c0017f95:	c1 e0 10             	shl    eax,0x10
c0017f98:	09 c1                	or     ecx,eax
c0017f9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9e:	8d 50 03             	lea    edx,[eax+0x3]
c0017fa1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fa5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fa9:	0f b6 c0             	movzx  eax,al
c0017fac:	c1 e0 18             	shl    eax,0x18
c0017faf:	09 c1                	or     ecx,eax
c0017fb1:	89 ca                	mov    edx,ecx
c0017fb3:	a0 00 10 03 c0       	mov    al,ds:0xc0031000
c0017fb8:	0f b6 c0             	movzx  eax,al
c0017fbb:	89 14 85 40 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefc0],edx
c0017fc2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcf:	01 d0                	add    eax,edx
c0017fd1:	83 c0 2c             	add    eax,0x2c
c0017fd4:	8a 00                	mov    al,BYTE PTR [eax]
c0017fd6:	0f b6 d0             	movzx  edx,al
c0017fd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fe0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fe8:	0f b6 c0             	movzx  eax,al
c0017feb:	c1 e0 08             	shl    eax,0x8
c0017fee:	89 d1                	mov    ecx,edx
c0017ff0:	09 c1                	or     ecx,eax
c0017ff2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff6:	8d 50 02             	lea    edx,[eax+0x2]
c0017ff9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ffd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018001:	0f b6 c0             	movzx  eax,al
c0018004:	c1 e0 10             	shl    eax,0x10
c0018007:	09 c1                	or     ecx,eax
c0018009:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800d:	8d 50 03             	lea    edx,[eax+0x3]
c0018010:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018014:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018018:	0f b6 c0             	movzx  eax,al
c001801b:	c1 e0 18             	shl    eax,0x18
c001801e:	09 c1                	or     ecx,eax
c0018020:	89 ca                	mov    edx,ecx
c0018022:	a0 00 10 03 c0       	mov    al,ds:0xc0031000
c0018027:	0f b6 c0             	movzx  eax,al
c001802a:	89 14 85 c0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef40],edx
c0018031:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018036:	a0 00 10 03 c0       	mov    al,ds:0xc0031000
c001803b:	40                   	inc    eax
c001803c:	a2 00 10 03 c0       	mov    ds:0xc0031000,al
c0018041:	e9 bb 01 00 00       	jmp    c0018201 <scanMADT()+0x469>
c0018046:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001804b:	0f 85 e9 00 00 00    	jne    c001813a <scanMADT()+0x3a2>
c0018051:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018055:	8d 50 01             	lea    edx,[eax+0x1]
c0018058:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001805c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018060:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018064:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018068:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806c:	8d 50 01             	lea    edx,[eax+0x1]
c001806f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018077:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001807b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001807f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018083:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018087:	01 d0                	add    eax,edx
c0018089:	83 c0 2c             	add    eax,0x2c
c001808c:	8a 00                	mov    al,BYTE PTR [eax]
c001808e:	0f b6 d0             	movzx  edx,al
c0018091:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018095:	8d 48 01             	lea    ecx,[eax+0x1]
c0018098:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180a0:	0f b6 c0             	movzx  eax,al
c00180a3:	c1 e0 08             	shl    eax,0x8
c00180a6:	89 d1                	mov    ecx,edx
c00180a8:	09 c1                	or     ecx,eax
c00180aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ae:	8d 50 02             	lea    edx,[eax+0x2]
c00180b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b9:	0f b6 c0             	movzx  eax,al
c00180bc:	c1 e0 10             	shl    eax,0x10
c00180bf:	09 c1                	or     ecx,eax
c00180c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c5:	8d 50 03             	lea    edx,[eax+0x3]
c00180c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180cc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180d0:	0f b6 c0             	movzx  eax,al
c00180d3:	c1 e0 18             	shl    eax,0x18
c00180d6:	09 c8                	or     eax,ecx
c00180d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180dc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180e9:	01 d0                	add    eax,edx
c00180eb:	83 c0 2c             	add    eax,0x2c
c00180ee:	8a 00                	mov    al,BYTE PTR [eax]
c00180f0:	0f b6 c0             	movzx  eax,al
c00180f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180f7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180fe:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018102:	0f b6 d2             	movzx  edx,dl
c0018105:	c1 e2 08             	shl    edx,0x8
c0018108:	09 d0                	or     eax,edx
c001810a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001810f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018114:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018119:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001811d:	88 90 c0 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2740],dl
c0018123:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018128:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001812d:	66 89 84 12 e0 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf020],ax
c0018135:	e9 c7 00 00 00       	jmp    c0018201 <scanMADT()+0x469>
c001813a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001813f:	0f 85 b0 00 00 00    	jne    c00181f5 <scanMADT()+0x45d>
c0018145:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018149:	8d 50 01             	lea    edx,[eax+0x1]
c001814c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018150:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018154:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018158:	0f b6 c0             	movzx  eax,al
c001815b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001815f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018163:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018167:	01 d0                	add    eax,edx
c0018169:	83 c0 2c             	add    eax,0x2c
c001816c:	8a 00                	mov    al,BYTE PTR [eax]
c001816e:	0f b6 d0             	movzx  edx,al
c0018171:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018175:	8d 48 01             	lea    ecx,[eax+0x1]
c0018178:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001817c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018180:	0f b6 c0             	movzx  eax,al
c0018183:	c1 e0 08             	shl    eax,0x8
c0018186:	09 d0                	or     eax,edx
c0018188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001818c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018191:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018195:	8d 50 01             	lea    edx,[eax+0x1]
c0018198:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001819c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181a0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181a4:	0f b6 c0             	movzx  eax,al
c00181a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181af:	c1 e0 08             	shl    eax,0x8
c00181b2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00181b6:	89 c1                	mov    ecx,eax
c00181b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181bc:	c1 e0 18             	shl    eax,0x18
c00181bf:	89 c3                	mov    ebx,eax
c00181c1:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00181c6:	8d 50 01             	lea    edx,[eax+0x1]
c00181c9:	89 15 50 0f 03 c0    	mov    DWORD PTR ds:0xc0030f50,edx
c00181cf:	09 d9                	or     ecx,ebx
c00181d1:	89 ca                	mov    edx,ecx
c00181d3:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c00181da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181e6:	68 64 b7 02 c0       	push   0xc002b764
c00181eb:	e8 8d ad ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00181f0:	83 c4 10             	add    esp,0x10
c00181f3:	eb 0c                	jmp    c0018201 <scanMADT()+0x469>
c00181f5:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181fa:	75 05                	jne    c0018201 <scanMADT()+0x469>
c00181fc:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018201:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018206:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001820a:	01 d0                	add    eax,edx
c001820c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018210:	e9 54 fc ff ff       	jmp    c0017e69 <scanMADT()+0xd1>
c0018215:	90                   	nop
c0018216:	eb 01                	jmp    c0018219 <scanMADT()+0x481>
c0018218:	90                   	nop
c0018219:	83 c4 38             	add    esp,0x38
c001821c:	5b                   	pop    ebx
c001821d:	c3                   	ret    

c001821e <ACPI::ACPI()>:
c001821e:	83 ec 0c             	sub    esp,0xc
c0018221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018225:	83 ec 08             	sub    esp,0x8
c0018228:	68 07 b6 02 c0       	push   0xc002b607
c001822d:	50                   	push   eax
c001822e:	e8 61 c3 ff ff       	call   c0014594 <Device::Device(char const*)>
c0018233:	83 c4 10             	add    esp,0x10
c0018236:	ba d8 b7 02 c0       	mov    edx,0xc002b7d8
c001823b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823f:	89 10                	mov    DWORD PTR [eax],edx
c0018241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018245:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001824c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018250:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001825a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018277:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001827e:	e8 15 fb ff ff       	call   c0017d98 <scanMADT()>
c0018283:	90                   	nop
c0018284:	83 c4 0c             	add    esp,0xc
c0018287:	c3                   	ret    

c0018288 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018288:	83 ec 2c             	sub    esp,0x2c
c001828b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001828f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018293:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018297:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001829b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182a0:	88 d0                	mov    al,dl
c00182a2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182a6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00182ab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00182b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182b7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182bd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00182c1:	0f 8d 97 00 00 00    	jge    c001835e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00182c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182cf:	83 c2 2a             	add    edx,0x2a
c00182d2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182d6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182db:	75 78                	jne    c0018355 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182e5:	83 c2 2a             	add    edx,0x2a
c00182e8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182ec:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182f0:	75 63                	jne    c0018355 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182f2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182f7:	74 3a                	je     c0018333 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018301:	83 c2 2a             	add    edx,0x2a
c0018304:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018308:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001830c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001830f:	39 c2                	cmp    edx,eax
c0018311:	74 10                	je     c0018323 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018313:	83 ec 0c             	sub    esp,0xc
c0018316:	68 a0 b7 02 c0       	push   0xc002b7a0
c001831b:	e8 0f 23 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0018320:	83 c4 10             	add    esp,0x10
c0018323:	83 ec 0c             	sub    esp,0xc
c0018326:	68 0c b6 02 c0       	push   0xc002b60c
c001832b:	e8 ff 22 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0018330:	83 c4 10             	add    esp,0x10
c0018333:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018337:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001833b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001833f:	83 c2 2a             	add    edx,0x2a
c0018342:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018346:	8b 02                	mov    eax,DWORD PTR [edx]
c0018348:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001834b:	89 01                	mov    DWORD PTR [ecx],eax
c001834d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018350:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018355:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018359:	e9 55 ff ff ff       	jmp    c00182b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001835e:	90                   	nop
c001835f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018363:	83 c4 2c             	add    esp,0x2c
c0018366:	c2 04 00             	ret    0x4
c0018369:	90                   	nop

c001836a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001836a:	83 ec 1c             	sub    esp,0x1c
c001836d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018371:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018375:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018379:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001837e:	88 c8                	mov    al,cl
c0018380:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018384:	88 d0                	mov    al,dl
c0018386:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001838a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001838e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018398:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001839b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001839f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00183a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183b1:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00183b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183b8:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00183bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183c7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00183ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d2:	83 c2 2a             	add    edx,0x2a
c00183d5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183dd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183ea:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183ee:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183fc:	8d 50 01             	lea    edx,[eax+0x1]
c00183ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018403:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001840d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018413:	3d 00 02 00 00       	cmp    eax,0x200
c0018418:	75 10                	jne    c001842a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001841a:	83 ec 0c             	sub    esp,0xc
c001841d:	68 1b b6 02 c0       	push   0xc002b61b
c0018422:	e8 08 22 00 00       	call   c001a62f <Krnl::panic(char const*)>
c0018427:	83 c4 10             	add    esp,0x10
c001842a:	90                   	nop
c001842b:	83 c4 1c             	add    esp,0x1c
c001842e:	c3                   	ret    
c001842f:	90                   	nop

c0018430 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018430:	b8 00 00 00 00       	mov    eax,0x0
c0018435:	c3                   	ret    

c0018436 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018436:	83 ec 1c             	sub    esp,0x1c
c0018439:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001843d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018440:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018444:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0018449:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001844e:	83 ec 08             	sub    esp,0x8
c0018451:	52                   	push   edx
c0018452:	50                   	push   eax
c0018453:	e8 00 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018458:	83 c4 10             	add    esp,0x10
c001845b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001845f:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0018464:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018469:	83 ec 04             	sub    esp,0x4
c001846c:	6a 01                	push   0x1
c001846e:	52                   	push   edx
c001846f:	50                   	push   eax
c0018470:	e8 f9 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018475:	83 c4 10             	add    esp,0x10
c0018478:	90                   	nop
c0018479:	83 c4 1c             	add    esp,0x1c
c001847c:	c3                   	ret    
c001847d:	90                   	nop

c001847e <ACPI::open(int, int, void*)>:
c001847e:	53                   	push   ebx
c001847f:	83 ec 28             	sub    esp,0x28
c0018482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018486:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001848d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018491:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018498:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001849d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184a3:	83 e0 04             	and    eax,0x4
c00184a6:	84 c0                	test   al,al
c00184a8:	74 47                	je     c00184f1 <ACPI::open(int, int, void*)+0x73>
c00184aa:	a1 48 0f 03 c0       	mov    eax,ds:0xc0030f48
c00184af:	83 ec 08             	sub    esp,0x8
c00184b2:	68 38 b6 02 c0       	push   0xc002b638
c00184b7:	50                   	push   eax
c00184b8:	e8 3f f8 ff ff       	call   c0017cfc <findDataTable(unsigned char*, char*)>
c00184bd:	83 c4 10             	add    esp,0x10
c00184c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184c4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184c9:	74 26                	je     c00184f1 <ACPI::open(int, int, void*)+0x73>
c00184cb:	83 ec 0c             	sub    esp,0xc
c00184ce:	68 3d b6 02 c0       	push   0xc002b63d
c00184d3:	e8 a5 aa ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00184d8:	83 c4 10             	add    esp,0x10
c00184db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184df:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ea:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184f1:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184fd:	8a 00                	mov    al,BYTE PTR [eax]
c00184ff:	3c 01                	cmp    al,0x1
c0018501:	75 28                	jne    c001852b <ACPI::open(int, int, void*)+0xad>
c0018503:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018507:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001850e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018512:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018519:	83 ec 0c             	sub    esp,0xc
c001851c:	68 4e b6 02 c0       	push   0xc002b64e
c0018521:	e8 57 aa ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018526:	83 c4 10             	add    esp,0x10
c0018529:	eb 25                	jmp    c0018550 <ACPI::open(int, int, void*)+0xd2>
c001852b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001852f:	8a 00                	mov    al,BYTE PTR [eax]
c0018531:	3c 02                	cmp    al,0x2
c0018533:	75 1b                	jne    c0018550 <ACPI::open(int, int, void*)+0xd2>
c0018535:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018539:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018540:	83 ec 0c             	sub    esp,0xc
c0018543:	68 56 b6 02 c0       	push   0xc002b656
c0018548:	e8 30 aa ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001854d:	83 c4 10             	add    esp,0x10
c0018550:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018554:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001855a:	83 f0 01             	xor    eax,0x1
c001855d:	84 c0                	test   al,al
c001855f:	74 6a                	je     c00185cb <ACPI::open(int, int, void*)+0x14d>
c0018561:	83 ec 0c             	sub    esp,0xc
c0018564:	68 5e b6 02 c0       	push   0xc002b65e
c0018569:	e8 0f aa ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001856e:	83 c4 10             	add    esp,0x10
c0018571:	e8 da 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018576:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001857a:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001857f:	75 28                	jne    c00185a9 <ACPI::open(int, int, void*)+0x12b>
c0018581:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018585:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001858c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018590:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018597:	83 ec 0c             	sub    esp,0xc
c001859a:	68 6c b6 02 c0       	push   0xc002b66c
c001859f:	e8 d9 a9 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00185a4:	83 c4 10             	add    esp,0x10
c00185a7:	eb 22                	jmp    c00185cb <ACPI::open(int, int, void*)+0x14d>
c00185a9:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185ae:	75 1b                	jne    c00185cb <ACPI::open(int, int, void*)+0x14d>
c00185b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185b4:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185bb:	83 ec 0c             	sub    esp,0xc
c00185be:	68 76 b6 02 c0       	push   0xc002b676
c00185c3:	e8 b5 a9 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00185c8:	83 c4 10             	add    esp,0x10
c00185cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185cf:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185d5:	84 c0                	test   al,al
c00185d7:	74 13                	je     c00185ec <ACPI::open(int, int, void*)+0x16e>
c00185d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185dd:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185e3:	83 f0 01             	xor    eax,0x1
c00185e6:	0f b6 c0             	movzx  eax,al
c00185e9:	40                   	inc    eax
c00185ea:	eb 05                	jmp    c00185f1 <ACPI::open(int, int, void*)+0x173>
c00185ec:	b8 00 00 00 00       	mov    eax,0x0
c00185f1:	83 ec 08             	sub    esp,0x8
c00185f4:	50                   	push   eax
c00185f5:	68 80 b6 02 c0       	push   0xc002b680
c00185fa:	e8 7e a9 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00185ff:	83 c4 10             	add    esp,0x10
c0018602:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018606:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001860c:	84 c0                	test   al,al
c001860e:	74 67                	je     c0018677 <ACPI::open(int, int, void*)+0x1f9>
c0018610:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018618:	83 ec 0c             	sub    esp,0xc
c001861b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001861f:	e8 1c 72 ff ff       	call   c000f840 <malloc>
c0018624:	83 c4 10             	add    esp,0x10
c0018627:	89 c3                	mov    ebx,eax
c0018629:	83 ec 0c             	sub    esp,0xc
c001862c:	53                   	push   ebx
c001862d:	e8 26 a3 00 00       	call   c0022958 <PCI::PCI()>
c0018632:	83 c4 10             	add    esp,0x10
c0018635:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018639:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001863d:	83 ec 08             	sub    esp,0x8
c0018640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018644:	50                   	push   eax
c0018645:	e8 5a bd ff ff       	call   c00143a4 <Device::addChild(Device*)>
c001864a:	83 c4 10             	add    esp,0x10
c001864d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018651:	8b 00                	mov    eax,DWORD PTR [eax]
c0018653:	83 c0 08             	add    eax,0x8
c0018656:	8b 00                	mov    eax,DWORD PTR [eax]
c0018658:	6a 00                	push   0x0
c001865a:	6a 00                	push   0x0
c001865c:	6a 00                	push   0x0
c001865e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018662:	ff d0                	call   eax
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	83 ec 0c             	sub    esp,0xc
c001866a:	68 89 b6 02 c0       	push   0xc002b689
c001866f:	e8 09 a9 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018674:	83 c4 10             	add    esp,0x10
c0018677:	83 ec 0c             	sub    esp,0xc
c001867a:	68 94 b6 02 c0       	push   0xc002b694
c001867f:	e8 cb 46 00 00       	call   c001cd4f <Thr::loadKernelSymbolTable(char const*)>
c0018684:	83 c4 10             	add    esp,0x10
c0018687:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c001868d:	83 ec 08             	sub    esp,0x8
c0018690:	6a 01                	push   0x1
c0018692:	68 b2 b6 02 c0       	push   0xc002b6b2
c0018697:	e8 10 51 00 00       	call   c001d7ac <Thr::loadDLL(char const*, bool)>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	83 ec 08             	sub    esp,0x8
c00186a2:	53                   	push   ebx
c00186a3:	50                   	push   eax
c00186a4:	e8 37 53 00 00       	call   c001d9e0 <Thr::executeDLL(unsigned long, void*)>
c00186a9:	83 c4 10             	add    esp,0x10
c00186ac:	8b 1d 68 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e668
c00186b2:	83 ec 08             	sub    esp,0x8
c00186b5:	6a 01                	push   0x1
c00186b7:	68 cf b6 02 c0       	push   0xc002b6cf
c00186bc:	e8 eb 50 00 00       	call   c001d7ac <Thr::loadDLL(char const*, bool)>
c00186c1:	83 c4 10             	add    esp,0x10
c00186c4:	83 ec 08             	sub    esp,0x8
c00186c7:	53                   	push   ebx
c00186c8:	50                   	push   eax
c00186c9:	e8 12 53 00 00       	call   c001d9e0 <Thr::executeDLL(unsigned long, void*)>
c00186ce:	83 c4 10             	add    esp,0x10
c00186d1:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00186d6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186dc:	83 e0 04             	and    eax,0x4
c00186df:	84 c0                	test   al,al
c00186e1:	0f 84 d2 00 00 00    	je     c00187b9 <ACPI::open(int, int, void*)+0x33b>
c00186e7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186ee:	83 ec 0c             	sub    esp,0xc
c00186f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186f5:	e8 46 71 ff ff       	call   c000f840 <malloc>
c00186fa:	83 c4 10             	add    esp,0x10
c00186fd:	89 c3                	mov    ebx,eax
c00186ff:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c0018704:	83 ec 04             	sub    esp,0x4
c0018707:	50                   	push   eax
c0018708:	68 ec b6 02 c0       	push   0xc002b6ec
c001870d:	53                   	push   ebx
c001870e:	e8 c3 ad ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c0018713:	83 c4 10             	add    esp,0x10
c0018716:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001871a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001871f:	74 17                	je     c0018738 <ACPI::open(int, int, void*)+0x2ba>
c0018721:	83 ec 0c             	sub    esp,0xc
c0018724:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018728:	e8 7b b0 ff ff       	call   c00137a8 <File::exists()>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	84 c0                	test   al,al
c0018732:	74 04                	je     c0018738 <ACPI::open(int, int, void*)+0x2ba>
c0018734:	b0 01                	mov    al,0x1
c0018736:	eb 02                	jmp    c001873a <ACPI::open(int, int, void*)+0x2bc>
c0018738:	b0 00                	mov    al,0x0
c001873a:	84 c0                	test   al,al
c001873c:	74 22                	je     c0018760 <ACPI::open(int, int, void*)+0x2e2>
c001873e:	83 ec 08             	sub    esp,0x8
c0018741:	6a 01                	push   0x1
c0018743:	68 ec b6 02 c0       	push   0xc002b6ec
c0018748:	e8 5f 50 00 00       	call   c001d7ac <Thr::loadDLL(char const*, bool)>
c001874d:	83 c4 10             	add    esp,0x10
c0018750:	83 ec 08             	sub    esp,0x8
c0018753:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018757:	50                   	push   eax
c0018758:	e8 83 52 00 00       	call   c001d9e0 <Thr::executeDLL(unsigned long, void*)>
c001875d:	83 c4 10             	add    esp,0x10
c0018760:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018765:	74 1e                	je     c0018785 <ACPI::open(int, int, void*)+0x307>
c0018767:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001876c:	74 17                	je     c0018785 <ACPI::open(int, int, void*)+0x307>
c001876e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018772:	8b 00                	mov    eax,DWORD PTR [eax]
c0018774:	83 c0 08             	add    eax,0x8
c0018777:	8b 00                	mov    eax,DWORD PTR [eax]
c0018779:	83 ec 0c             	sub    esp,0xc
c001877c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018780:	ff d0                	call   eax
c0018782:	83 c4 10             	add    esp,0x10
c0018785:	a1 48 0f 03 c0       	mov    eax,ds:0xc0030f48
c001878a:	83 ec 08             	sub    esp,0x8
c001878d:	68 09 b7 02 c0       	push   0xc002b709
c0018792:	50                   	push   eax
c0018793:	e8 64 f5 ff ff       	call   c0017cfc <findDataTable(unsigned char*, char*)>
c0018798:	83 c4 10             	add    esp,0x10
c001879b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001879f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00187a4:	74 13                	je     c00187b9 <ACPI::open(int, int, void*)+0x33b>
c00187a6:	83 ec 08             	sub    esp,0x8
c00187a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187b1:	e8 80 fc ff ff       	call   c0018436 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187b6:	83 c4 10             	add    esp,0x10
c00187b9:	b8 00 00 00 00       	mov    eax,0x0
c00187be:	83 c4 28             	add    esp,0x28
c00187c1:	5b                   	pop    ebx
c00187c2:	c3                   	ret    
c00187c3:	90                   	nop

c00187c4 <ACPI::sleep()>:
c00187c4:	83 ec 0c             	sub    esp,0xc
c00187c7:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c00187cc:	85 c0                	test   eax,eax
c00187ce:	74 07                	je     c00187d7 <ACPI::sleep()+0x13>
c00187d0:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c00187d5:	ff d0                	call   eax
c00187d7:	90                   	nop
c00187d8:	83 c4 0c             	add    esp,0xc
c00187db:	c3                   	ret    

c00187dc <CPU::close(int, int, void*)>:
c00187dc:	31 c0                	xor    eax,eax
c00187de:	c3                   	ret    
c00187df:	90                   	nop

c00187e0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187e0:	55                   	push   ebp
c00187e1:	57                   	push   edi
c00187e2:	56                   	push   esi
c00187e3:	53                   	push   ebx
c00187e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187ec:	89 ce                	mov    esi,ecx
c00187ee:	89 d5                	mov    ebp,edx
c00187f0:	80 f9 04             	cmp    cl,0x4
c00187f3:	75 28                	jne    c001881d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187f5:	8d 42 f9             	lea    eax,[edx-0x7]
c00187f8:	3c 03                	cmp    al,0x3
c00187fa:	0f 86 63 01 00 00    	jbe    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018800:	80 fa 03             	cmp    dl,0x3
c0018803:	0f 84 5a 01 00 00    	je     c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018809:	8d 7a f2             	lea    edi,[edx-0xe]
c001880c:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018811:	89 fb                	mov    ebx,edi
c0018813:	80 fb 01             	cmp    bl,0x1
c0018816:	77 4e                	ja     c0018866 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018818:	e9 52 01 00 00       	jmp    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881d:	80 f9 05             	cmp    cl,0x5
c0018820:	75 4d                	jne    c001886f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018822:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018827:	80 fa 03             	cmp    dl,0x3
c001882a:	0f 86 3f 01 00 00    	jbe    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018830:	8d 7a fa             	lea    edi,[edx-0x6]
c0018833:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c0018838:	89 fb                	mov    ebx,edi
c001883a:	80 fb 01             	cmp    bl,0x1
c001883d:	0f 86 2c 01 00 00    	jbe    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018843:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018848:	80 fa 08             	cmp    dl,0x8
c001884b:	0f 84 1e 01 00 00    	je     c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018851:	89 d7                	mov    edi,edx
c0018853:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018858:	83 e7 fb             	and    edi,0xfffffffb
c001885b:	89 fb                	mov    ebx,edi
c001885d:	80 fb 09             	cmp    bl,0x9
c0018860:	0f 84 09 01 00 00    	je     c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018866:	31 c0                	xor    eax,eax
c0018868:	89 eb                	mov    ebx,ebp
c001886a:	0f b6 fb             	movzx  edi,bl
c001886d:	eb 30                	jmp    c001889f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001886f:	31 c0                	xor    eax,eax
c0018871:	80 f9 06             	cmp    cl,0x6
c0018874:	75 f2                	jne    c0018868 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018876:	80 fa 0a             	cmp    dl,0xa
c0018879:	77 ed                	ja     c0018868 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001887b:	bf de 05 00 00       	mov    edi,0x5de
c0018880:	0f a3 d7             	bt     edi,edx
c0018883:	73 e3                	jae    c0018868 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018885:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c001888a:	e9 e0 00 00 00       	jmp    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888f:	39 c7                	cmp    edi,eax
c0018891:	0f 84 d3 00 00 00    	je     c001896a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018897:	40                   	inc    eax
c0018898:	3d d0 00 00 00       	cmp    eax,0xd0
c001889d:	74 09                	je     c00188a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001889f:	89 f3                	mov    ebx,esi
c00188a1:	80 fb 0f             	cmp    bl,0xf
c00188a4:	75 f1                	jne    c0018897 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00188a6:	eb e7                	jmp    c001888f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00188a8:	80 f9 10             	cmp    cl,0x10
c00188ab:	75 14                	jne    c00188c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188ad:	8d 42 fc             	lea    eax,[edx-0x4]
c00188b0:	83 e0 fb             	and    eax,0xfffffffb
c00188b3:	3c 02                	cmp    al,0x2
c00188b5:	76 34                	jbe    c00188eb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188b7:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c00188bc:	80 fa 02             	cmp    dl,0x2
c00188bf:	eb 24                	jmp    c00188e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188c1:	80 f9 11             	cmp    cl,0x11
c00188c4:	75 13                	jne    c00188d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188c6:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c00188cb:	80 fa 03             	cmp    dl,0x3
c00188ce:	0f 85 9b 00 00 00    	jne    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d4:	e9 91 00 00 00       	jmp    c001896a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188d9:	80 f9 12             	cmp    cl,0x12
c00188dc:	75 14                	jne    c00188f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188de:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c00188e3:	fe ca                	dec    dl
c00188e5:	0f 85 84 00 00 00    	jne    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188eb:	b8 00 db 02 c0       	mov    eax,0xc002db00
c00188f0:	eb 7d                	jmp    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f2:	80 f9 14             	cmp    cl,0x14
c00188f5:	75 12                	jne    c0018909 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188f7:	4a                   	dec    edx
c00188f8:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c00188fd:	80 fa 01             	cmp    dl,0x1
c0018900:	77 6d                	ja     c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018902:	b8 10 db 02 c0       	mov    eax,0xc002db10
c0018907:	eb 66                	jmp    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018909:	80 f9 15             	cmp    cl,0x15
c001890c:	75 31                	jne    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001890e:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0018913:	80 fa 01             	cmp    dl,0x1
c0018916:	74 57                	je     c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018918:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c001891d:	80 fa 13             	cmp    dl,0x13
c0018920:	76 0c                	jbe    c001892e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018922:	80 fa 30             	cmp    dl,0x30
c0018925:	75 48                	jne    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018927:	b8 40 db 02 c0       	mov    eax,0xc002db40
c001892c:	eb 41                	jmp    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018933:	0f a3 d1             	bt     ecx,edx
c0018936:	73 37                	jae    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018938:	b8 30 db 02 c0       	mov    eax,0xc002db30
c001893d:	eb 30                	jmp    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893f:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c0018944:	80 f9 16             	cmp    cl,0x16
c0018947:	75 26                	jne    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018949:	b8 50 db 02 c0       	mov    eax,0xc002db50
c001894e:	84 d2                	test   dl,dl
c0018950:	74 1d                	je     c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018952:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c0018957:	80 fa 30             	cmp    dl,0x30
c001895a:	75 13                	jne    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001895c:	b8 60 db 02 c0       	mov    eax,0xc002db60
c0018961:	eb 0c                	jmp    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018963:	b8 80 da 02 c0       	mov    eax,0xc002da80
c0018968:	eb 05                	jmp    c001896f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001896a:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c001896f:	5b                   	pop    ebx
c0018970:	5e                   	pop    esi
c0018971:	5f                   	pop    edi
c0018972:	5d                   	pop    ebp
c0018973:	c3                   	ret    

c0018974 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018974:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018978:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001897c:	80 f9 04             	cmp    cl,0x4
c001897f:	75 6b                	jne    c00189ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018981:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018986:	80 fa 01             	cmp    dl,0x1
c0018989:	0f 86 92 02 00 00    	jbe    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898f:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018994:	80 fa 02             	cmp    dl,0x2
c0018997:	0f 84 84 02 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899d:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00189a2:	80 fa 03             	cmp    dl,0x3
c00189a5:	0f 84 76 02 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ab:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c00189b0:	80 fa 04             	cmp    dl,0x4
c00189b3:	0f 84 68 02 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b9:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c00189be:	80 fa 05             	cmp    dl,0x5
c00189c1:	0f 84 5a 02 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c7:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00189cc:	80 fa 07             	cmp    dl,0x7
c00189cf:	0f 84 4c 02 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d5:	83 ea 08             	sub    edx,0x8
c00189d8:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c00189dd:	80 fa 01             	cmp    dl,0x1
c00189e0:	0f 87 3b 02 00 00    	ja     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e6:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c00189eb:	c3                   	ret    
c00189ec:	80 f9 05             	cmp    cl,0x5
c00189ef:	75 45                	jne    c0018a36 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189f1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189f4:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00189f9:	80 f9 02             	cmp    cl,0x2
c00189fc:	0f 86 1f 02 00 00    	jbe    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a02:	80 fa 04             	cmp    dl,0x4
c0018a05:	0f 84 f3 01 00 00    	je     c0018bfe <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a0b:	80 fa 07             	cmp    dl,0x7
c0018a0e:	0f 84 0d 02 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a14:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018a19:	80 fa 08             	cmp    dl,0x8
c0018a1c:	0f 84 ff 01 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a22:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c0018a27:	80 fa 09             	cmp    dl,0x9
c0018a2a:	0f 85 f1 01 00 00    	jne    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a30:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018a35:	c3                   	ret    
c0018a36:	80 f9 06             	cmp    cl,0x6
c0018a39:	0f 85 85 01 00 00    	jne    c0018bc4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a3f:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018a44:	80 fa 01             	cmp    dl,0x1
c0018a47:	0f 84 d4 01 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4d:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a50:	3c 01                	cmp    al,0x1
c0018a52:	0f 86 ac 01 00 00    	jbe    c0018c04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a58:	80 fa 03             	cmp    dl,0x3
c0018a5b:	0f 84 a3 01 00 00    	je     c0018c04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a61:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a64:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018a69:	80 f9 01             	cmp    cl,0x1
c0018a6c:	0f 86 af 01 00 00    	jbe    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a72:	80 fa 09             	cmp    dl,0x9
c0018a75:	0f 84 8f 01 00 00    	je     c0018c0a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a7b:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a7e:	80 f9 01             	cmp    cl,0x1
c0018a81:	0f 86 9a 01 00 00    	jbe    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a87:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a8c:	80 fa 0d             	cmp    dl,0xd
c0018a8f:	0f 84 8c 01 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a95:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018a9a:	80 fa 0e             	cmp    dl,0xe
c0018a9d:	0f 84 7e 01 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa3:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018aa8:	80 fa 0f             	cmp    dl,0xf
c0018aab:	0f 84 70 01 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab1:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018ab6:	80 fa 15             	cmp    dl,0x15
c0018ab9:	0f 84 62 01 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abf:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018ac2:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018ac7:	80 f9 01             	cmp    cl,0x1
c0018aca:	0f 86 51 01 00 00    	jbe    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad0:	80 fa 1a             	cmp    dl,0x1a
c0018ad3:	0f 84 37 01 00 00    	je     c0018c10 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018ad9:	80 fa 1c             	cmp    dl,0x1c
c0018adc:	0f 84 34 01 00 00    	je     c0018c16 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018ae2:	80 fa 1d             	cmp    dl,0x1d
c0018ae5:	0f 84 36 01 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aeb:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018af0:	80 fa 25             	cmp    dl,0x25
c0018af3:	0f 84 28 01 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af9:	8d 4a da             	lea    ecx,[edx-0x26]
c0018afc:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b01:	80 f9 01             	cmp    cl,0x1
c0018b04:	0f 86 17 01 00 00    	jbe    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0a:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018b0f:	80 fa 2a             	cmp    dl,0x2a
c0018b12:	0f 84 09 01 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b18:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018b1d:	80 fa 2c             	cmp    dl,0x2c
c0018b20:	0f 84 fb 00 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b26:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018b2b:	80 fa 2d             	cmp    dl,0x2d
c0018b2e:	0f 84 ed 00 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b34:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b39:	80 fa 2e             	cmp    dl,0x2e
c0018b3c:	0f 84 df 00 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b42:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018b47:	80 fa 2f             	cmp    dl,0x2f
c0018b4a:	0f 84 d1 00 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b50:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b53:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b58:	80 f9 01             	cmp    cl,0x1
c0018b5b:	0f 86 c0 00 00 00    	jbe    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b61:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b66:	80 fa 37             	cmp    dl,0x37
c0018b69:	0f 84 b2 00 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6f:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b74:	80 fa 3a             	cmp    dl,0x3a
c0018b77:	0f 84 a4 00 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7d:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018b82:	80 fa 3c             	cmp    dl,0x3c
c0018b85:	0f 84 96 00 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8b:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018b90:	80 fa 3d             	cmp    dl,0x3d
c0018b93:	0f 84 88 00 00 00    	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b99:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b9e:	80 fa 3e             	cmp    dl,0x3e
c0018ba1:	74 7e                	je     c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba3:	8d 42 bb             	lea    eax,[edx-0x45]
c0018ba6:	3c 01                	cmp    al,0x1
c0018ba8:	76 72                	jbe    c0018c1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018baa:	80 fa 3f             	cmp    dl,0x3f
c0018bad:	74 6d                	je     c0018c1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018baf:	80 fa 4a             	cmp    dl,0x4a
c0018bb2:	74 0a                	je     c0018bbe <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018bb4:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c0018bb9:	80 fa 4d             	cmp    dl,0x4d
c0018bbc:	75 63                	jne    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbe:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018bc3:	c3                   	ret    
c0018bc4:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c0018bc9:	80 f9 0b             	cmp    cl,0xb
c0018bcc:	75 0a                	jne    c0018bd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018bce:	fe ca                	dec    dl
c0018bd0:	75 4f                	jne    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd2:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018bd7:	c3                   	ret    
c0018bd8:	80 f9 0f             	cmp    cl,0xf
c0018bdb:	75 44                	jne    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdd:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018be2:	80 fa 02             	cmp    dl,0x2
c0018be5:	76 3a                	jbe    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be7:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bea:	3c 01                	cmp    al,0x1
c0018bec:	76 0a                	jbe    c0018bf8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018bee:	b8 ee ba 02 c0       	mov    eax,0xc002baee
c0018bf3:	80 fa 06             	cmp    dl,0x6
c0018bf6:	75 29                	jne    c0018c21 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf8:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018bfd:	c3                   	ret    
c0018bfe:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018c03:	c3                   	ret    
c0018c04:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018c09:	c3                   	ret    
c0018c0a:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018c0f:	c3                   	ret    
c0018c10:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018c15:	c3                   	ret    
c0018c16:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018c1b:	c3                   	ret    
c0018c1c:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018c21:	c3                   	ret    

c0018c22 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c22:	60                   	pusha  
c0018c23:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c2f:	9c                   	pushf  
c0018c30:	fa                   	cli    
c0018c31:	0f 09                	wbinvd 
c0018c33:	0f 30                	wrmsr  
c0018c35:	9d                   	popf   
c0018c36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c3a:	89 02                	mov    DWORD PTR [edx],eax
c0018c3c:	61                   	popa   
c0018c3d:	c3                   	ret    

c0018c3e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c3e:	60                   	pusha  
c0018c3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c43:	9c                   	pushf  
c0018c44:	fa                   	cli    
c0018c45:	0f 09                	wbinvd 
c0018c47:	31 c0                	xor    eax,eax
c0018c49:	31 d2                	xor    edx,edx
c0018c4b:	0f 32                	rdmsr  
c0018c4d:	9d                   	popf   
c0018c4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c52:	89 02                	mov    DWORD PTR [edx],eax
c0018c54:	61                   	popa   
c0018c55:	c3                   	ret    

c0018c56 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c56:	56                   	push   esi
c0018c57:	53                   	push   ebx
c0018c58:	83 ec 10             	sub    esp,0x10
c0018c5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c5f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c64:	75 5d                	jne    c0018cc3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c66:	83 f8 08             	cmp    eax,0x8
c0018c69:	75 09                	jne    c0018c74 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c6b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c70:	7e 13                	jle    c0018c85 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c72:	eb 30                	jmp    c0018ca4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c74:	83 f8 06             	cmp    eax,0x6
c0018c77:	7c 4a                	jl     c0018cc3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c79:	83 f8 07             	cmp    eax,0x7
c0018c7c:	7e 07                	jle    c0018c85 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c7e:	83 f8 09             	cmp    eax,0x9
c0018c81:	74 21                	je     c0018ca4 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c83:	eb 3e                	jmp    c0018cc3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c85:	89 e6                	mov    esi,esp
c0018c87:	8b 1d a4 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6a4
c0018c8d:	56                   	push   esi
c0018c8e:	c1 eb 15             	shr    ebx,0x15
c0018c91:	68 82 00 00 c0       	push   0xc0000082
c0018c96:	83 e3 7e             	and    ebx,0x7e
c0018c99:	e8 a0 ff ff ff       	call   c0018c3e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c9e:	56                   	push   esi
c0018c9f:	6a 00                	push   0x0
c0018ca1:	53                   	push   ebx
c0018ca2:	eb 12                	jmp    c0018cb6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ca4:	89 e3                	mov    ebx,esp
c0018ca6:	53                   	push   ebx
c0018ca7:	68 82 00 00 c0       	push   0xc0000082
c0018cac:	e8 8d ff ff ff       	call   c0018c3e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cb1:	53                   	push   ebx
c0018cb2:	6a 00                	push   0x0
c0018cb4:	6a 00                	push   0x0
c0018cb6:	68 82 00 00 c0       	push   0xc0000082
c0018cbb:	e8 62 ff ff ff       	call   c0018c22 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018cc0:	83 c4 18             	add    esp,0x18
c0018cc3:	83 c4 10             	add    esp,0x10
c0018cc6:	5b                   	pop    ebx
c0018cc7:	5e                   	pop    esi
c0018cc8:	c3                   	ret    
c0018cc9:	90                   	nop

c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018cca:	55                   	push   ebp
c0018ccb:	57                   	push   edi
c0018ccc:	56                   	push   esi
c0018ccd:	53                   	push   ebx
c0018cce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cd2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cd6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cda:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cde:	39 05 80 db 02 c0    	cmp    DWORD PTR ds:0xc002db80,eax
c0018ce4:	75 23                	jne    c0018d09 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018ce6:	a1 ac 11 03 c0       	mov    eax,ds:0xc00311ac
c0018ceb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018cef:	89 06                	mov    DWORD PTR [esi],eax
c0018cf1:	a1 a8 11 03 c0       	mov    eax,ds:0xc00311a8
c0018cf6:	89 07                	mov    DWORD PTR [edi],eax
c0018cf8:	a1 a4 11 03 c0       	mov    eax,ds:0xc00311a4
c0018cfd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d00:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c0018d05:	89 02                	mov    DWORD PTR [edx],eax
c0018d07:	eb 3f                	jmp    c0018d48 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d09:	31 c9                	xor    ecx,ecx
c0018d0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d0f:	0f a2                	cpuid  
c0018d11:	89 06                	mov    DWORD PTR [esi],eax
c0018d13:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d19:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d1c:	89 10                	mov    DWORD PTR [eax],edx
c0018d1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d22:	a3 80 db 02 c0       	mov    ds:0xc002db80,eax
c0018d27:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d29:	a3 ac 11 03 c0       	mov    ds:0xc00311ac,eax
c0018d2e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d30:	a3 a8 11 03 c0       	mov    ds:0xc00311a8,eax
c0018d35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d38:	a3 a4 11 03 c0       	mov    ds:0xc00311a4,eax
c0018d3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d41:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d43:	a3 a0 11 03 c0       	mov    ds:0xc00311a0,eax
c0018d48:	5b                   	pop    ebx
c0018d49:	5e                   	pop    esi
c0018d4a:	5f                   	pop    edi
c0018d4b:	5d                   	pop    ebp
c0018d4c:	c3                   	ret    
c0018d4d:	90                   	nop

c0018d4e <CPU::cpuidCheckEDX(unsigned int)>:
c0018d4e:	83 ec 10             	sub    esp,0x10
c0018d51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d55:	50                   	push   eax
c0018d56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5a:	50                   	push   eax
c0018d5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5f:	50                   	push   eax
c0018d60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d64:	50                   	push   eax
c0018d65:	6a 01                	push   0x1
c0018d67:	e8 5e ff ff ff       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d70:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d74:	0f 95 c0             	setne  al
c0018d77:	83 c4 24             	add    esp,0x24
c0018d7a:	c3                   	ret    
c0018d7b:	90                   	nop

c0018d7c <CPU::cpuidCheckECX(unsigned int)>:
c0018d7c:	83 ec 10             	sub    esp,0x10
c0018d7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d83:	50                   	push   eax
c0018d84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d88:	50                   	push   eax
c0018d89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8d:	50                   	push   eax
c0018d8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d92:	50                   	push   eax
c0018d93:	6a 01                	push   0x1
c0018d95:	e8 30 ff ff ff       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d9e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018da2:	0f 95 c0             	setne  al
c0018da5:	83 c4 24             	add    esp,0x24
c0018da8:	c3                   	ret    
c0018da9:	90                   	nop

c0018daa <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018daa:	83 ec 10             	sub    esp,0x10
c0018dad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db1:	50                   	push   eax
c0018db2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db6:	50                   	push   eax
c0018db7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dbb:	50                   	push   eax
c0018dbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc0:	50                   	push   eax
c0018dc1:	6a 07                	push   0x7
c0018dc3:	e8 02 ff ff ff       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dcc:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018dd0:	0f 95 c0             	setne  al
c0018dd3:	83 c4 24             	add    esp,0x24
c0018dd6:	c3                   	ret    
c0018dd7:	90                   	nop

c0018dd8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018dd8:	83 ec 10             	sub    esp,0x10
c0018ddb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ddf:	50                   	push   eax
c0018de0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de4:	50                   	push   eax
c0018de5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de9:	50                   	push   eax
c0018dea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dee:	50                   	push   eax
c0018def:	6a 07                	push   0x7
c0018df1:	e8 d4 fe ff ff       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018df6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dfa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dfe:	0f 95 c0             	setne  al
c0018e01:	83 c4 24             	add    esp,0x24
c0018e04:	c3                   	ret    
c0018e05:	90                   	nop

c0018e06 <CPU::CPU()>:
c0018e06:	83 ec 0c             	sub    esp,0xc
c0018e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e0d:	83 ec 08             	sub    esp,0x8
c0018e10:	68 ee ba 02 c0       	push   0xc002baee
c0018e15:	50                   	push   eax
c0018e16:	e8 79 b7 ff ff       	call   c0014594 <Device::Device(char const*)>
c0018e1b:	83 c4 10             	add    esp,0x10
c0018e1e:	ba c8 bb 02 c0       	mov    edx,0xc002bbc8
c0018e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e27:	89 10                	mov    DWORD PTR [eax],edx
c0018e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e2d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e3b:	05 78 01 00 00       	add    eax,0x178
c0018e40:	83 ec 0c             	sub    esp,0xc
c0018e43:	50                   	push   eax
c0018e44:	e8 0f 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e49:	83 c4 10             	add    esp,0x10
c0018e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e50:	05 7c 09 00 00       	add    eax,0x97c
c0018e55:	83 ec 0c             	sub    esp,0xc
c0018e58:	50                   	push   eax
c0018e59:	e8 5c 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e5e:	83 c4 10             	add    esp,0x10
c0018e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e65:	05 7c 11 00 00       	add    eax,0x117c
c0018e6a:	83 ec 0c             	sub    esp,0xc
c0018e6d:	50                   	push   eax
c0018e6e:	e8 55 86 ff ff       	call   c00114c8 <TSS::TSS()>
c0018e73:	83 c4 10             	add    esp,0x10
c0018e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e85:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e8f:	90                   	nop
c0018e90:	83 c4 0c             	add    esp,0xc
c0018e93:	c3                   	ret    

c0018e94 <CPU::displayFeatures()>:
c0018e94:	53                   	push   ebx
c0018e95:	83 ec 10             	sub    esp,0x10
c0018e98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e9c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018ea2:	68 fc b7 02 c0       	push   0xc002b7fc
c0018ea7:	e8 d1 a0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018eac:	59                   	pop    ecx
c0018ead:	58                   	pop    eax
c0018eae:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018eb4:	50                   	push   eax
c0018eb5:	68 0d b8 02 c0       	push   0xc002b80d
c0018eba:	e8 be a0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018ebf:	58                   	pop    eax
c0018ec0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ec6:	5a                   	pop    edx
c0018ec7:	c1 e8 0e             	shr    eax,0xe
c0018eca:	0f b6 c0             	movzx  eax,al
c0018ecd:	50                   	push   eax
c0018ece:	68 1e b8 02 c0       	push   0xc002b81e
c0018ed3:	e8 a5 a0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018ed8:	59                   	pop    ecx
c0018ed9:	58                   	pop    eax
c0018eda:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ee0:	66 c1 e8 06          	shr    ax,0x6
c0018ee4:	0f b6 c0             	movzx  eax,al
c0018ee7:	50                   	push   eax
c0018ee8:	68 2f b8 02 c0       	push   0xc002b82f
c0018eed:	e8 8b a0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018ef2:	c7 04 24 dc bc 02 c0 	mov    DWORD PTR [esp],0xc002bcdc
c0018ef9:	e8 7f a0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018efe:	83 c4 10             	add    esp,0x10
c0018f01:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f06:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f0d:	74 05                	je     c0018f14 <CPU::displayFeatures()+0x80>
c0018f0f:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f14:	52                   	push   edx
c0018f15:	52                   	push   edx
c0018f16:	50                   	push   eax
c0018f17:	68 40 b8 02 c0       	push   0xc002b840
c0018f1c:	e8 5c a0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018f21:	83 c4 10             	add    esp,0x10
c0018f24:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f29:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f30:	78 05                	js     c0018f37 <CPU::displayFeatures()+0xa3>
c0018f32:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f37:	51                   	push   ecx
c0018f38:	51                   	push   ecx
c0018f39:	50                   	push   eax
c0018f3a:	68 57 b8 02 c0       	push   0xc002b857
c0018f3f:	e8 39 a0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018f44:	83 c4 10             	add    esp,0x10
c0018f47:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f4c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f53:	75 05                	jne    c0018f5a <CPU::displayFeatures()+0xc6>
c0018f55:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f5a:	52                   	push   edx
c0018f5b:	52                   	push   edx
c0018f5c:	50                   	push   eax
c0018f5d:	68 6e b8 02 c0       	push   0xc002b86e
c0018f62:	e8 16 a0 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018f67:	83 c4 10             	add    esp,0x10
c0018f6a:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f6f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f76:	75 05                	jne    c0018f7d <CPU::displayFeatures()+0xe9>
c0018f78:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f7d:	51                   	push   ecx
c0018f7e:	51                   	push   ecx
c0018f7f:	50                   	push   eax
c0018f80:	68 85 b8 02 c0       	push   0xc002b885
c0018f85:	e8 f3 9f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018f8a:	83 c4 10             	add    esp,0x10
c0018f8d:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f92:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f99:	75 05                	jne    c0018fa0 <CPU::displayFeatures()+0x10c>
c0018f9b:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018fa0:	52                   	push   edx
c0018fa1:	52                   	push   edx
c0018fa2:	50                   	push   eax
c0018fa3:	68 9c b8 02 c0       	push   0xc002b89c
c0018fa8:	e8 d0 9f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018fad:	83 c4 10             	add    esp,0x10
c0018fb0:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018fb5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018fbc:	75 05                	jne    c0018fc3 <CPU::displayFeatures()+0x12f>
c0018fbe:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018fc3:	51                   	push   ecx
c0018fc4:	51                   	push   ecx
c0018fc5:	50                   	push   eax
c0018fc6:	68 b3 b8 02 c0       	push   0xc002b8b3
c0018fcb:	e8 ad 9f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018fd0:	83 c4 10             	add    esp,0x10
c0018fd3:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018fd8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018fdf:	75 05                	jne    c0018fe6 <CPU::displayFeatures()+0x152>
c0018fe1:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018fe6:	52                   	push   edx
c0018fe7:	52                   	push   edx
c0018fe8:	50                   	push   eax
c0018fe9:	68 ca b8 02 c0       	push   0xc002b8ca
c0018fee:	e8 8a 9f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0018ff3:	83 c4 10             	add    esp,0x10
c0018ff6:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018ffb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019002:	75 05                	jne    c0019009 <CPU::displayFeatures()+0x175>
c0019004:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019009:	51                   	push   ecx
c001900a:	51                   	push   ecx
c001900b:	50                   	push   eax
c001900c:	68 e1 b8 02 c0       	push   0xc002b8e1
c0019011:	e8 67 9f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0019016:	83 c4 10             	add    esp,0x10
c0019019:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c001901e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019025:	75 05                	jne    c001902c <CPU::displayFeatures()+0x198>
c0019027:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c001902c:	52                   	push   edx
c001902d:	52                   	push   edx
c001902e:	50                   	push   eax
c001902f:	68 f8 b8 02 c0       	push   0xc002b8f8
c0019034:	e8 44 9f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0019039:	83 c4 10             	add    esp,0x10
c001903c:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019041:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019048:	75 05                	jne    c001904f <CPU::displayFeatures()+0x1bb>
c001904a:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c001904f:	51                   	push   ecx
c0019050:	51                   	push   ecx
c0019051:	50                   	push   eax
c0019052:	68 0f b9 02 c0       	push   0xc002b90f
c0019057:	e8 21 9f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001905c:	83 c4 10             	add    esp,0x10
c001905f:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019064:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001906b:	75 05                	jne    c0019072 <CPU::displayFeatures()+0x1de>
c001906d:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019072:	52                   	push   edx
c0019073:	52                   	push   edx
c0019074:	50                   	push   eax
c0019075:	68 26 b9 02 c0       	push   0xc002b926
c001907a:	e8 fe 9e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001907f:	83 c4 10             	add    esp,0x10
c0019082:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019087:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001908e:	75 05                	jne    c0019095 <CPU::displayFeatures()+0x201>
c0019090:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019095:	51                   	push   ecx
c0019096:	51                   	push   ecx
c0019097:	50                   	push   eax
c0019098:	68 3d b9 02 c0       	push   0xc002b93d
c001909d:	e8 db 9e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00190a2:	83 c4 10             	add    esp,0x10
c00190a5:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c00190aa:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190b1:	75 05                	jne    c00190b8 <CPU::displayFeatures()+0x224>
c00190b3:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c00190b8:	52                   	push   edx
c00190b9:	52                   	push   edx
c00190ba:	50                   	push   eax
c00190bb:	68 54 b9 02 c0       	push   0xc002b954
c00190c0:	e8 b8 9e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c00190cd:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190d4:	78 05                	js     c00190db <CPU::displayFeatures()+0x247>
c00190d6:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c00190db:	51                   	push   ecx
c00190dc:	51                   	push   ecx
c00190dd:	50                   	push   eax
c00190de:	68 6b b9 02 c0       	push   0xc002b96b
c00190e3:	e8 95 9e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00190e8:	83 c4 10             	add    esp,0x10
c00190eb:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c00190f0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190f7:	75 05                	jne    c00190fe <CPU::displayFeatures()+0x26a>
c00190f9:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c00190fe:	52                   	push   edx
c00190ff:	52                   	push   edx
c0019100:	50                   	push   eax
c0019101:	68 82 b9 02 c0       	push   0xc002b982
c0019106:	e8 72 9e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001910b:	83 c4 18             	add    esp,0x18
c001910e:	5b                   	pop    ebx
c001910f:	c3                   	ret    

c0019110 <CPU::detectFeatures()>:
c0019110:	55                   	push   ebp
c0019111:	57                   	push   edi
c0019112:	56                   	push   esi
c0019113:	53                   	push   ebx
c0019114:	83 ec 50             	sub    esp,0x50
c0019117:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001911b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019125:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001912c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019132:	6a 0d                	push   0xd
c0019134:	6a 00                	push   0x0
c0019136:	57                   	push   edi
c0019137:	e8 3c 76 fe ff       	call   c0000778 <memset>
c001913c:	83 c4 10             	add    esp,0x10
c001913f:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0019144:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001914b:	0f 84 20 09 00 00    	je     c0019a71 <CPU::detectFeatures()+0x961>
c0019151:	83 ec 0c             	sub    esp,0xc
c0019154:	6a 10                	push   0x10
c0019156:	e8 f3 fb ff ff       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c001915b:	83 e0 01             	and    eax,0x1
c001915e:	8d 14 00             	lea    edx,[eax+eax*1]
c0019161:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019167:	83 e0 fd             	and    eax,0xfffffffd
c001916a:	09 d0                	or     eax,edx
c001916c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019172:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019179:	e8 d0 fb ff ff       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c001917e:	83 e0 01             	and    eax,0x1
c0019181:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019188:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001918e:	83 e0 fb             	and    eax,0xfffffffb
c0019191:	09 d0                	or     eax,edx
c0019193:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019199:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00191a0:	e8 a9 fb ff ff       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c00191a5:	83 e0 01             	and    eax,0x1
c00191a8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191af:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191b5:	83 e0 f7             	and    eax,0xfffffff7
c00191b8:	09 d0                	or     eax,edx
c00191ba:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191c0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191c7:	e8 82 fb ff ff       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c00191cc:	83 e0 01             	and    eax,0x1
c00191cf:	c1 e0 04             	shl    eax,0x4
c00191d2:	88 c2                	mov    dl,al
c00191d4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191da:	83 e0 ef             	and    eax,0xffffffef
c00191dd:	09 d0                	or     eax,edx
c00191df:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191ec:	e8 5d fb ff ff       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c00191f1:	83 e0 01             	and    eax,0x1
c00191f4:	c1 e0 05             	shl    eax,0x5
c00191f7:	88 c2                	mov    dl,al
c00191f9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191ff:	83 e0 df             	and    eax,0xffffffdf
c0019202:	09 d0                	or     eax,edx
c0019204:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001920a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019211:	e8 38 fb ff ff       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c0019216:	83 e0 01             	and    eax,0x1
c0019219:	8d 14 00             	lea    edx,[eax+eax*1]
c001921c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019222:	83 e0 fd             	and    eax,0xfffffffd
c0019225:	09 d0                	or     eax,edx
c0019227:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001922d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019234:	e8 15 fb ff ff       	call   c0018d4e <CPU::cpuidCheckEDX(unsigned int)>
c0019239:	83 e0 01             	and    eax,0x1
c001923c:	c1 e0 06             	shl    eax,0x6
c001923f:	88 c2                	mov    dl,al
c0019241:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019247:	83 e0 bf             	and    eax,0xffffffbf
c001924a:	09 d0                	or     eax,edx
c001924c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019252:	58                   	pop    eax
c0019253:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019257:	56                   	push   esi
c0019258:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001925c:	55                   	push   ebp
c001925d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019261:	50                   	push   eax
c0019262:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019266:	52                   	push   edx
c0019267:	6a 00                	push   0x0
c0019269:	e8 5c fa ff ff       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001926e:	83 c4 1c             	add    esp,0x1c
c0019271:	6a 04                	push   0x4
c0019273:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019277:	50                   	push   eax
c0019278:	57                   	push   edi
c0019279:	e8 c6 74 fe ff       	call   c0000744 <memcpy>
c001927e:	83 c4 0c             	add    esp,0xc
c0019281:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019287:	6a 04                	push   0x4
c0019289:	56                   	push   esi
c001928a:	50                   	push   eax
c001928b:	e8 b4 74 fe ff       	call   c0000744 <memcpy>
c0019290:	83 c4 0c             	add    esp,0xc
c0019293:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019299:	6a 04                	push   0x4
c001929b:	55                   	push   ebp
c001929c:	50                   	push   eax
c001929d:	e8 a2 74 fe ff       	call   c0000744 <memcpy>
c00192a2:	58                   	pop    eax
c00192a3:	5a                   	pop    edx
c00192a4:	68 99 b9 02 c0       	push   0xc002b999
c00192a9:	57                   	push   edi
c00192aa:	e8 11 76 fe ff       	call   c00008c0 <strcmp>
c00192af:	83 c4 10             	add    esp,0x10
c00192b2:	85 c0                	test   eax,eax
c00192b4:	75 0f                	jne    c00192c5 <CPU::detectFeatures()+0x1b5>
c00192b6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00192c0:	e9 22 02 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c00192c5:	50                   	push   eax
c00192c6:	50                   	push   eax
c00192c7:	68 a6 b9 02 c0       	push   0xc002b9a6
c00192cc:	57                   	push   edi
c00192cd:	e8 ee 75 fe ff       	call   c00008c0 <strcmp>
c00192d2:	83 c4 10             	add    esp,0x10
c00192d5:	85 c0                	test   eax,eax
c00192d7:	74 dd                	je     c00192b6 <CPU::detectFeatures()+0x1a6>
c00192d9:	51                   	push   ecx
c00192da:	51                   	push   ecx
c00192db:	68 b3 b9 02 c0       	push   0xc002b9b3
c00192e0:	57                   	push   edi
c00192e1:	e8 da 75 fe ff       	call   c00008c0 <strcmp>
c00192e6:	83 c4 10             	add    esp,0x10
c00192e9:	85 c0                	test   eax,eax
c00192eb:	74 2a                	je     c0019317 <CPU::detectFeatures()+0x207>
c00192ed:	52                   	push   edx
c00192ee:	52                   	push   edx
c00192ef:	68 c0 b9 02 c0       	push   0xc002b9c0
c00192f4:	57                   	push   edi
c00192f5:	e8 c6 75 fe ff       	call   c00008c0 <strcmp>
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	85 c0                	test   eax,eax
c00192ff:	74 16                	je     c0019317 <CPU::detectFeatures()+0x207>
c0019301:	50                   	push   eax
c0019302:	50                   	push   eax
c0019303:	68 cd b9 02 c0       	push   0xc002b9cd
c0019308:	57                   	push   edi
c0019309:	e8 b2 75 fe ff       	call   c00008c0 <strcmp>
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	85 c0                	test   eax,eax
c0019313:	74 48                	je     c001935d <CPU::detectFeatures()+0x24d>
c0019315:	eb 0f                	jmp    c0019326 <CPU::detectFeatures()+0x216>
c0019317:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019321:	e9 c1 01 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c0019326:	50                   	push   eax
c0019327:	50                   	push   eax
c0019328:	68 da b9 02 c0       	push   0xc002b9da
c001932d:	57                   	push   edi
c001932e:	e8 8d 75 fe ff       	call   c00008c0 <strcmp>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	85 c0                	test   eax,eax
c0019338:	74 23                	je     c001935d <CPU::detectFeatures()+0x24d>
c001933a:	50                   	push   eax
c001933b:	50                   	push   eax
c001933c:	68 e7 b9 02 c0       	push   0xc002b9e7
c0019341:	57                   	push   edi
c0019342:	e8 79 75 fe ff       	call   c00008c0 <strcmp>
c0019347:	83 c4 10             	add    esp,0x10
c001934a:	85 c0                	test   eax,eax
c001934c:	75 1e                	jne    c001936c <CPU::detectFeatures()+0x25c>
c001934e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019358:	e9 8a 01 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c001935d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019367:	e9 7b 01 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c001936c:	50                   	push   eax
c001936d:	50                   	push   eax
c001936e:	68 f4 b9 02 c0       	push   0xc002b9f4
c0019373:	57                   	push   edi
c0019374:	e8 47 75 fe ff       	call   c00008c0 <strcmp>
c0019379:	83 c4 10             	add    esp,0x10
c001937c:	85 c0                	test   eax,eax
c001937e:	75 0f                	jne    c001938f <CPU::detectFeatures()+0x27f>
c0019380:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001938a:	e9 58 01 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c001938f:	50                   	push   eax
c0019390:	50                   	push   eax
c0019391:	68 b3 b9 02 c0       	push   0xc002b9b3
c0019396:	57                   	push   edi
c0019397:	e8 24 75 fe ff       	call   c00008c0 <strcmp>
c001939c:	83 c4 10             	add    esp,0x10
c001939f:	85 c0                	test   eax,eax
c00193a1:	75 0f                	jne    c00193b2 <CPU::detectFeatures()+0x2a2>
c00193a3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193ad:	e9 35 01 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c00193b2:	50                   	push   eax
c00193b3:	50                   	push   eax
c00193b4:	68 01 ba 02 c0       	push   0xc002ba01
c00193b9:	57                   	push   edi
c00193ba:	e8 01 75 fe ff       	call   c00008c0 <strcmp>
c00193bf:	83 c4 10             	add    esp,0x10
c00193c2:	85 c0                	test   eax,eax
c00193c4:	75 0f                	jne    c00193d5 <CPU::detectFeatures()+0x2c5>
c00193c6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193d0:	e9 12 01 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c00193d5:	51                   	push   ecx
c00193d6:	51                   	push   ecx
c00193d7:	68 0e ba 02 c0       	push   0xc002ba0e
c00193dc:	57                   	push   edi
c00193dd:	e8 de 74 fe ff       	call   c00008c0 <strcmp>
c00193e2:	83 c4 10             	add    esp,0x10
c00193e5:	85 c0                	test   eax,eax
c00193e7:	75 0f                	jne    c00193f8 <CPU::detectFeatures()+0x2e8>
c00193e9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193f3:	e9 ef 00 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c00193f8:	52                   	push   edx
c00193f9:	52                   	push   edx
c00193fa:	68 1b ba 02 c0       	push   0xc002ba1b
c00193ff:	57                   	push   edi
c0019400:	e8 bb 74 fe ff       	call   c00008c0 <strcmp>
c0019405:	83 c4 10             	add    esp,0x10
c0019408:	85 c0                	test   eax,eax
c001940a:	75 0f                	jne    c001941b <CPU::detectFeatures()+0x30b>
c001940c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019416:	e9 cc 00 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c001941b:	50                   	push   eax
c001941c:	50                   	push   eax
c001941d:	68 28 ba 02 c0       	push   0xc002ba28
c0019422:	57                   	push   edi
c0019423:	e8 98 74 fe ff       	call   c00008c0 <strcmp>
c0019428:	83 c4 10             	add    esp,0x10
c001942b:	85 c0                	test   eax,eax
c001942d:	75 0f                	jne    c001943e <CPU::detectFeatures()+0x32e>
c001942f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019439:	e9 a9 00 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c001943e:	50                   	push   eax
c001943f:	50                   	push   eax
c0019440:	68 35 ba 02 c0       	push   0xc002ba35
c0019445:	57                   	push   edi
c0019446:	e8 75 74 fe ff       	call   c00008c0 <strcmp>
c001944b:	83 c4 10             	add    esp,0x10
c001944e:	85 c0                	test   eax,eax
c0019450:	75 0f                	jne    c0019461 <CPU::detectFeatures()+0x351>
c0019452:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001945c:	e9 86 00 00 00       	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c0019461:	50                   	push   eax
c0019462:	50                   	push   eax
c0019463:	68 42 ba 02 c0       	push   0xc002ba42
c0019468:	57                   	push   edi
c0019469:	e8 52 74 fe ff       	call   c00008c0 <strcmp>
c001946e:	83 c4 10             	add    esp,0x10
c0019471:	85 c0                	test   eax,eax
c0019473:	75 0c                	jne    c0019481 <CPU::detectFeatures()+0x371>
c0019475:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001947f:	eb 66                	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c0019481:	50                   	push   eax
c0019482:	50                   	push   eax
c0019483:	68 4f ba 02 c0       	push   0xc002ba4f
c0019488:	57                   	push   edi
c0019489:	e8 32 74 fe ff       	call   c00008c0 <strcmp>
c001948e:	83 c4 10             	add    esp,0x10
c0019491:	85 c0                	test   eax,eax
c0019493:	75 0c                	jne    c00194a1 <CPU::detectFeatures()+0x391>
c0019495:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001949f:	eb 46                	jmp    c00194e7 <CPU::detectFeatures()+0x3d7>
c00194a1:	50                   	push   eax
c00194a2:	50                   	push   eax
c00194a3:	68 5c ba 02 c0       	push   0xc002ba5c
c00194a8:	57                   	push   edi
c00194a9:	e8 12 74 fe ff       	call   c00008c0 <strcmp>
c00194ae:	83 c4 10             	add    esp,0x10
c00194b1:	85 c0                	test   eax,eax
c00194b3:	74 e0                	je     c0019495 <CPU::detectFeatures()+0x385>
c00194b5:	50                   	push   eax
c00194b6:	50                   	push   eax
c00194b7:	68 69 ba 02 c0       	push   0xc002ba69
c00194bc:	57                   	push   edi
c00194bd:	e8 fe 73 fe ff       	call   c00008c0 <strcmp>
c00194c2:	83 c4 10             	add    esp,0x10
c00194c5:	85 c0                	test   eax,eax
c00194c7:	74 cc                	je     c0019495 <CPU::detectFeatures()+0x385>
c00194c9:	51                   	push   ecx
c00194ca:	51                   	push   ecx
c00194cb:	68 76 ba 02 c0       	push   0xc002ba76
c00194d0:	57                   	push   edi
c00194d1:	e8 ea 73 fe ff       	call   c00008c0 <strcmp>
c00194d6:	83 c4 10             	add    esp,0x10
c00194d9:	85 c0                	test   eax,eax
c00194db:	74 b8                	je     c0019495 <CPU::detectFeatures()+0x385>
c00194dd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194e7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194ec:	0f 86 be 00 00 00    	jbe    c00195b0 <CPU::detectFeatures()+0x4a0>
c00194f2:	83 ec 0c             	sub    esp,0xc
c00194f5:	68 80 00 00 00       	push   0x80
c00194fa:	e8 ab f8 ff ff       	call   c0018daa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194ff:	83 e0 01             	and    eax,0x1
c0019502:	c1 e0 06             	shl    eax,0x6
c0019505:	88 c2                	mov    dl,al
c0019507:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001950d:	83 e0 bf             	and    eax,0xffffffbf
c0019510:	09 d0                	or     eax,edx
c0019512:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019518:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001951f:	e8 86 f8 ff ff       	call   c0018daa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019524:	83 e0 01             	and    eax,0x1
c0019527:	c1 e0 04             	shl    eax,0x4
c001952a:	88 c2                	mov    dl,al
c001952c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019532:	83 e0 ef             	and    eax,0xffffffef
c0019535:	09 d0                	or     eax,edx
c0019537:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001953d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019544:	e8 61 f8 ff ff       	call   c0018daa <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019549:	c1 e0 07             	shl    eax,0x7
c001954c:	88 c2                	mov    dl,al
c001954e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019554:	83 e0 7f             	and    eax,0x7f
c0019557:	09 d0                	or     eax,edx
c0019559:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001955f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019566:	e8 6d f8 ff ff       	call   c0018dd8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001956b:	83 e0 01             	and    eax,0x1
c001956e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019575:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001957b:	83 e0 f7             	and    eax,0xfffffff7
c001957e:	09 d0                	or     eax,edx
c0019580:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019586:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001958d:	e8 46 f8 ff ff       	call   c0018dd8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019592:	83 c4 10             	add    esp,0x10
c0019595:	83 e0 01             	and    eax,0x1
c0019598:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001959f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195a5:	83 e0 fb             	and    eax,0xfffffffb
c00195a8:	09 d0                	or     eax,edx
c00195aa:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195b0:	83 ec 0c             	sub    esp,0xc
c00195b3:	56                   	push   esi
c00195b4:	55                   	push   ebp
c00195b5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195b9:	57                   	push   edi
c00195ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195be:	50                   	push   eax
c00195bf:	6a 01                	push   0x1
c00195c1:	e8 04 f7 ff ff       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195c6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195ca:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195d0:	88 ca                	mov    dl,cl
c00195d2:	83 e0 f0             	and    eax,0xfffffff0
c00195d5:	83 e2 0f             	and    edx,0xf
c00195d8:	09 d0                	or     eax,edx
c00195da:	88 ca                	mov    dl,cl
c00195dc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195e2:	c0 ea 04             	shr    dl,0x4
c00195e5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195e9:	0f b6 c2             	movzx  eax,dl
c00195ec:	83 c4 20             	add    esp,0x20
c00195ef:	c1 e0 06             	shl    eax,0x6
c00195f2:	89 c5                	mov    ebp,eax
c00195f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195fa:	66 25 3f c0          	and    ax,0xc03f
c00195fe:	09 e8                	or     eax,ebp
c0019600:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019607:	89 c8                	mov    eax,ecx
c0019609:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001960f:	c1 e8 08             	shr    eax,0x8
c0019612:	83 e2 3f             	and    edx,0x3f
c0019615:	83 e0 0f             	and    eax,0xf
c0019618:	89 c5                	mov    ebp,eax
c001961a:	c1 e5 06             	shl    ebp,0x6
c001961d:	09 d5                	or     ebp,edx
c001961f:	89 ea                	mov    edx,ebp
c0019621:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019627:	88 c2                	mov    dl,al
c0019629:	c0 ea 02             	shr    dl,0x2
c001962c:	89 d5                	mov    ebp,edx
c001962e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019634:	83 e2 c0             	and    edx,0xffffffc0
c0019637:	09 d5                	or     ebp,edx
c0019639:	89 ea                	mov    edx,ebp
c001963b:	89 cd                	mov    ebp,ecx
c001963d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019643:	c1 ed 0c             	shr    ebp,0xc
c0019646:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001964c:	83 e5 03             	and    ebp,0x3
c001964f:	83 e2 cf             	and    edx,0xffffffcf
c0019652:	c1 e5 04             	shl    ebp,0x4
c0019655:	09 d5                	or     ebp,edx
c0019657:	3c 06                	cmp    al,0x6
c0019659:	89 ea                	mov    edx,ebp
c001965b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019661:	74 04                	je     c0019667 <CPU::detectFeatures()+0x557>
c0019663:	3c 0f                	cmp    al,0xf
c0019665:	75 5c                	jne    c00196c3 <CPU::detectFeatures()+0x5b3>
c0019667:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001966b:	89 cd                	mov    ebp,ecx
c001966d:	c1 ed 10             	shr    ebp,0x10
c0019670:	c1 e5 04             	shl    ebp,0x4
c0019673:	09 ea                	or     edx,ebp
c0019675:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001967b:	0f b6 d2             	movzx  edx,dl
c001967e:	66 81 e5 3f c0       	and    bp,0xc03f
c0019683:	c1 e2 06             	shl    edx,0x6
c0019686:	09 ea                	or     edx,ebp
c0019688:	3c 0f                	cmp    al,0xf
c001968a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019691:	75 30                	jne    c00196c3 <CPU::detectFeatures()+0x5b3>
c0019693:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019699:	c1 e9 14             	shr    ecx,0x14
c001969c:	83 e0 3f             	and    eax,0x3f
c001969f:	83 c1 0f             	add    ecx,0xf
c00196a2:	88 ca                	mov    dl,cl
c00196a4:	c0 e9 02             	shr    cl,0x2
c00196a7:	c1 e2 06             	shl    edx,0x6
c00196aa:	09 d0                	or     eax,edx
c00196ac:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196b2:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196b8:	83 e0 c0             	and    eax,0xffffffc0
c00196bb:	09 c1                	or     ecx,eax
c00196bd:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00196c3:	83 ec 0c             	sub    esp,0xc
c00196c6:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196cd:	56                   	push   esi
c00196ce:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196d2:	50                   	push   eax
c00196d3:	57                   	push   edi
c00196d4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196d8:	55                   	push   ebp
c00196d9:	68 00 00 00 80       	push   0x80000000
c00196de:	e8 e7 f5 ff ff       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196e3:	83 c4 20             	add    esp,0x20
c00196e6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196f2:	76 1e                	jbe    c0019712 <CPU::detectFeatures()+0x602>
c00196f4:	83 ec 0c             	sub    esp,0xc
c00196f7:	56                   	push   esi
c00196f8:	50                   	push   eax
c00196f9:	57                   	push   edi
c00196fa:	55                   	push   ebp
c00196fb:	68 01 00 00 80       	push   0x80000001
c0019700:	e8 c5 f5 ff ff       	call   c0018cca <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019705:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001970f:	83 c4 20             	add    esp,0x20
c0019712:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019718:	83 f8 01             	cmp    eax,0x1
c001971b:	75 6f                	jne    c001978c <CPU::detectFeatures()+0x67c>
c001971d:	51                   	push   ecx
c001971e:	51                   	push   ecx
c001971f:	68 82 ba 02 c0       	push   0xc002ba82
c0019724:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019728:	56                   	push   esi
c0019729:	e8 06 71 fe ff       	call   c0000834 <strcpy>
c001972e:	5f                   	pop    edi
c001972f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019735:	5d                   	pop    ebp
c0019736:	66 c1 e8 06          	shr    ax,0x6
c001973a:	0f b6 c0             	movzx  eax,al
c001973d:	50                   	push   eax
c001973e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019744:	c1 e8 0e             	shr    eax,0xe
c0019747:	0f b6 c0             	movzx  eax,al
c001974a:	50                   	push   eax
c001974b:	e8 24 f2 ff ff       	call   c0018974 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019750:	5a                   	pop    edx
c0019751:	59                   	pop    ecx
c0019752:	50                   	push   eax
c0019753:	56                   	push   esi
c0019754:	e8 1b 72 fe ff       	call   c0000974 <strcat>
c0019759:	5f                   	pop    edi
c001975a:	5d                   	pop    ebp
c001975b:	56                   	push   esi
c001975c:	53                   	push   ebx
c001975d:	e8 24 ae ff ff       	call   c0014586 <Device::setName(char const*)>
c0019762:	58                   	pop    eax
c0019763:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019769:	5a                   	pop    edx
c001976a:	68 89 ba 02 c0       	push   0xc002ba89
c001976f:	50                   	push   eax
c0019770:	e8 4b 71 fe ff       	call   c00008c0 <strcmp>
c0019775:	83 c4 10             	add    esp,0x10
c0019778:	85 c0                	test   eax,eax
c001977a:	0f 85 71 03 00 00    	jne    c0019af1 <CPU::detectFeatures()+0x9e1>
c0019780:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019787:	e9 65 03 00 00       	jmp    c0019af1 <CPU::detectFeatures()+0x9e1>
c001978c:	83 f8 02             	cmp    eax,0x2
c001978f:	0f 85 b5 00 00 00    	jne    c001984a <CPU::detectFeatures()+0x73a>
c0019795:	57                   	push   edi
c0019796:	57                   	push   edi
c0019797:	68 9b ba 02 c0       	push   0xc002ba9b
c001979c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197a0:	56                   	push   esi
c00197a1:	e8 8e 70 fe ff       	call   c0000834 <strcpy>
c00197a6:	5d                   	pop    ebp
c00197a7:	58                   	pop    eax
c00197a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ae:	66 c1 e8 06          	shr    ax,0x6
c00197b2:	0f b6 c0             	movzx  eax,al
c00197b5:	50                   	push   eax
c00197b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197bc:	c1 e8 0e             	shr    eax,0xe
c00197bf:	0f b6 c0             	movzx  eax,al
c00197c2:	50                   	push   eax
c00197c3:	e8 18 f0 ff ff       	call   c00187e0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197c8:	5a                   	pop    edx
c00197c9:	59                   	pop    ecx
c00197ca:	50                   	push   eax
c00197cb:	56                   	push   esi
c00197cc:	e8 a3 71 fe ff       	call   c0000974 <strcat>
c00197d1:	5f                   	pop    edi
c00197d2:	5d                   	pop    ebp
c00197d3:	56                   	push   esi
c00197d4:	53                   	push   ebx
c00197d5:	e8 ac ad ff ff       	call   c0014586 <Device::setName(char const*)>
c00197da:	58                   	pop    eax
c00197db:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197e1:	5a                   	pop    edx
c00197e2:	68 a0 ba 02 c0       	push   0xc002baa0
c00197e7:	50                   	push   eax
c00197e8:	e8 d3 70 fe ff       	call   c00008c0 <strcmp>
c00197ed:	83 c4 10             	add    esp,0x10
c00197f0:	85 c0                	test   eax,eax
c00197f2:	75 20                	jne    c0019814 <CPU::detectFeatures()+0x704>
c00197f4:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c00197fa:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019800:	a8 01                	test   al,0x1
c0019802:	74 10                	je     c0019814 <CPU::detectFeatures()+0x704>
c0019804:	83 e0 fe             	and    eax,0xfffffffe
c0019807:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001980d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019814:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001981a:	c1 e8 0e             	shr    eax,0xe
c001981d:	3c 05                	cmp    al,0x5
c001981f:	0f 85 cc 02 00 00    	jne    c0019af1 <CPU::detectFeatures()+0x9e1>
c0019825:	56                   	push   esi
c0019826:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001982c:	83 e0 0f             	and    eax,0xf
c001982f:	50                   	push   eax
c0019830:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019836:	66 c1 e8 06          	shr    ax,0x6
c001983a:	0f b6 c0             	movzx  eax,al
c001983d:	50                   	push   eax
c001983e:	6a 05                	push   0x5
c0019840:	e8 11 f4 ff ff       	call   c0018c56 <CPU::AMD_K6_writeback(int, int, int)>
c0019845:	e9 1f 02 00 00       	jmp    c0019a69 <CPU::detectFeatures()+0x959>
c001984a:	8d 50 fd             	lea    edx,[eax-0x3]
c001984d:	83 fa 01             	cmp    edx,0x1
c0019850:	76 09                	jbe    c001985b <CPU::detectFeatures()+0x74b>
c0019852:	83 f8 06             	cmp    eax,0x6
c0019855:	0f 85 91 01 00 00    	jne    c00199ec <CPU::detectFeatures()+0x8dc>
c001985b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019861:	c1 ea 0e             	shr    edx,0xe
c0019864:	80 fa 05             	cmp    dl,0x5
c0019867:	75 7b                	jne    c00198e4 <CPU::detectFeatures()+0x7d4>
c0019869:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001986f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019874:	66 81 fa 00 01       	cmp    dx,0x100
c0019879:	75 0c                	jne    c0019887 <CPU::detectFeatures()+0x777>
c001987b:	51                   	push   ecx
c001987c:	51                   	push   ecx
c001987d:	68 a7 ba 02 c0       	push   0xc002baa7
c0019882:	e9 dc 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019887:	66 81 fa 00 02       	cmp    dx,0x200
c001988c:	75 0c                	jne    c001989a <CPU::detectFeatures()+0x78a>
c001988e:	52                   	push   edx
c001988f:	52                   	push   edx
c0019890:	68 ba ba 02 c0       	push   0xc002baba
c0019895:	e9 c9 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c001989a:	66 81 fa 40 02       	cmp    dx,0x240
c001989f:	75 0c                	jne    c00198ad <CPU::detectFeatures()+0x79d>
c00198a1:	50                   	push   eax
c00198a2:	50                   	push   eax
c00198a3:	68 cc ba 02 c0       	push   0xc002bacc
c00198a8:	e9 b6 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c00198ad:	83 f8 06             	cmp    eax,0x6
c00198b0:	75 0c                	jne    c00198be <CPU::detectFeatures()+0x7ae>
c00198b2:	50                   	push   eax
c00198b3:	50                   	push   eax
c00198b4:	68 de ba 02 c0       	push   0xc002bade
c00198b9:	e9 a5 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c00198be:	83 f8 04             	cmp    eax,0x4
c00198c1:	75 0c                	jne    c00198cf <CPU::detectFeatures()+0x7bf>
c00198c3:	50                   	push   eax
c00198c4:	50                   	push   eax
c00198c5:	68 ea ba 02 c0       	push   0xc002baea
c00198ca:	e9 94 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c00198cf:	83 f8 03             	cmp    eax,0x3
c00198d2:	0f 85 19 02 00 00    	jne    c0019af1 <CPU::detectFeatures()+0x9e1>
c00198d8:	50                   	push   eax
c00198d9:	50                   	push   eax
c00198da:	68 f2 ba 02 c0       	push   0xc002baf2
c00198df:	e9 7f 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c00198e4:	80 fa 06             	cmp    dl,0x6
c00198e7:	0f 85 db 00 00 00    	jne    c00199c8 <CPU::detectFeatures()+0x8b8>
c00198ed:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198f3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198f8:	66 81 fa 80 01       	cmp    dx,0x180
c00198fd:	75 0c                	jne    c001990b <CPU::detectFeatures()+0x7fb>
c00198ff:	50                   	push   eax
c0019900:	50                   	push   eax
c0019901:	68 fd ba 02 c0       	push   0xc002bafd
c0019906:	e9 58 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c001990b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019911:	66 f7 c1 80 ff       	test   cx,0xff80
c0019916:	75 0c                	jne    c0019924 <CPU::detectFeatures()+0x814>
c0019918:	50                   	push   eax
c0019919:	50                   	push   eax
c001991a:	68 0d bb 02 c0       	push   0xc002bb0d
c001991f:	e9 3f 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019924:	66 81 fa 40 02       	cmp    dx,0x240
c0019929:	75 0c                	jne    c0019937 <CPU::detectFeatures()+0x827>
c001992b:	55                   	push   ebp
c001992c:	55                   	push   ebp
c001992d:	68 14 bb 02 c0       	push   0xc002bb14
c0019932:	e9 2c 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019937:	66 81 fa 80 02       	cmp    dx,0x280
c001993c:	75 0c                	jne    c001994a <CPU::detectFeatures()+0x83a>
c001993e:	57                   	push   edi
c001993f:	57                   	push   edi
c0019940:	68 1d bb 02 c0       	push   0xc002bb1d
c0019945:	e9 19 01 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c001994a:	66 81 fa 40 03       	cmp    dx,0x340
c001994f:	74 ed                	je     c001993e <CPU::detectFeatures()+0x82e>
c0019951:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019956:	75 0c                	jne    c0019964 <CPU::detectFeatures()+0x854>
c0019958:	56                   	push   esi
c0019959:	56                   	push   esi
c001995a:	68 24 bb 02 c0       	push   0xc002bb24
c001995f:	e9 ff 00 00 00       	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019964:	83 f8 06             	cmp    eax,0x6
c0019967:	0f 84 45 ff ff ff    	je     c00198b2 <CPU::detectFeatures()+0x7a2>
c001996d:	83 f8 04             	cmp    eax,0x4
c0019970:	0f 84 4d ff ff ff    	je     c00198c3 <CPU::detectFeatures()+0x7b3>
c0019976:	83 f8 03             	cmp    eax,0x3
c0019979:	0f 85 72 01 00 00    	jne    c0019af1 <CPU::detectFeatures()+0x9e1>
c001997f:	51                   	push   ecx
c0019980:	51                   	push   ecx
c0019981:	68 2d bb 02 c0       	push   0xc002bb2d
c0019986:	53                   	push   ebx
c0019987:	e8 fa ab ff ff       	call   c0014586 <Device::setName(char const*)>
c001998c:	b1 c1                	mov    cl,0xc1
c001998e:	88 c8                	mov    al,cl
c0019990:	e6 22                	out    0x22,al
c0019992:	e4 23                	in     al,0x23
c0019994:	88 c2                	mov    dl,al
c0019996:	88 c8                	mov    al,cl
c0019998:	e6 22                	out    0x22,al
c001999a:	88 d0                	mov    al,dl
c001999c:	83 c8 10             	or     eax,0x10
c001999f:	e6 23                	out    0x23,al
c00199a1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00199a8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199ab:	89 d0                	mov    eax,edx
c00199ad:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199b3:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199b7:	40                   	inc    eax
c00199b8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199be:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199c3:	e9 a1 00 00 00       	jmp    c0019a69 <CPU::detectFeatures()+0x959>
c00199c8:	83 f8 06             	cmp    eax,0x6
c00199cb:	0f 84 e1 fe ff ff    	je     c00198b2 <CPU::detectFeatures()+0x7a2>
c00199d1:	83 f8 04             	cmp    eax,0x4
c00199d4:	0f 84 e9 fe ff ff    	je     c00198c3 <CPU::detectFeatures()+0x7b3>
c00199da:	83 f8 03             	cmp    eax,0x3
c00199dd:	0f 85 0e 01 00 00    	jne    c0019af1 <CPU::detectFeatures()+0x9e1>
c00199e3:	52                   	push   edx
c00199e4:	52                   	push   edx
c00199e5:	68 38 bb 02 c0       	push   0xc002bb38
c00199ea:	eb 77                	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c00199ec:	83 f8 07             	cmp    eax,0x7
c00199ef:	75 09                	jne    c00199fa <CPU::detectFeatures()+0x8ea>
c00199f1:	50                   	push   eax
c00199f2:	50                   	push   eax
c00199f3:	68 42 bb 02 c0       	push   0xc002bb42
c00199f8:	eb 69                	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c00199fa:	83 f8 0a             	cmp    eax,0xa
c00199fd:	75 09                	jne    c0019a08 <CPU::detectFeatures()+0x8f8>
c00199ff:	50                   	push   eax
c0019a00:	50                   	push   eax
c0019a01:	68 4d bb 02 c0       	push   0xc002bb4d
c0019a06:	eb 5b                	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019a08:	83 f8 0b             	cmp    eax,0xb
c0019a0b:	75 09                	jne    c0019a16 <CPU::detectFeatures()+0x906>
c0019a0d:	50                   	push   eax
c0019a0e:	50                   	push   eax
c0019a0f:	68 55 bb 02 c0       	push   0xc002bb55
c0019a14:	eb 4d                	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019a16:	83 f8 08             	cmp    eax,0x8
c0019a19:	75 09                	jne    c0019a24 <CPU::detectFeatures()+0x914>
c0019a1b:	50                   	push   eax
c0019a1c:	50                   	push   eax
c0019a1d:	68 5e bb 02 c0       	push   0xc002bb5e
c0019a22:	eb 3f                	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019a24:	83 f8 09             	cmp    eax,0x9
c0019a27:	75 09                	jne    c0019a32 <CPU::detectFeatures()+0x922>
c0019a29:	50                   	push   eax
c0019a2a:	50                   	push   eax
c0019a2b:	68 66 bb 02 c0       	push   0xc002bb66
c0019a30:	eb 31                	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019a32:	83 f8 05             	cmp    eax,0x5
c0019a35:	75 09                	jne    c0019a40 <CPU::detectFeatures()+0x930>
c0019a37:	50                   	push   eax
c0019a38:	50                   	push   eax
c0019a39:	68 6e bb 02 c0       	push   0xc002bb6e
c0019a3e:	eb 23                	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019a40:	83 f8 0c             	cmp    eax,0xc
c0019a43:	75 09                	jne    c0019a4e <CPU::detectFeatures()+0x93e>
c0019a45:	55                   	push   ebp
c0019a46:	55                   	push   ebp
c0019a47:	68 7c bb 02 c0       	push   0xc002bb7c
c0019a4c:	eb 15                	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019a4e:	83 f8 0d             	cmp    eax,0xd
c0019a51:	75 09                	jne    c0019a5c <CPU::detectFeatures()+0x94c>
c0019a53:	57                   	push   edi
c0019a54:	57                   	push   edi
c0019a55:	68 87 bb 02 c0       	push   0xc002bb87
c0019a5a:	eb 07                	jmp    c0019a63 <CPU::detectFeatures()+0x953>
c0019a5c:	56                   	push   esi
c0019a5d:	56                   	push   esi
c0019a5e:	68 9b bb 02 c0       	push   0xc002bb9b
c0019a63:	53                   	push   ebx
c0019a64:	e8 1d ab ff ff       	call   c0014586 <Device::setName(char const*)>
c0019a69:	83 c4 10             	add    esp,0x10
c0019a6c:	e9 80 00 00 00       	jmp    c0019af1 <CPU::detectFeatures()+0x9e1>
c0019a71:	51                   	push   ecx
c0019a72:	51                   	push   ecx
c0019a73:	68 e7 b9 02 c0       	push   0xc002b9e7
c0019a78:	57                   	push   edi
c0019a79:	e8 b6 6d fe ff       	call   c0000834 <strcpy>
c0019a7e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a88:	e8 21 68 fe ff       	call   c00002ae <is486>
c0019a8d:	83 c4 10             	add    esp,0x10
c0019a90:	85 c0                	test   eax,eax
c0019a92:	74 2b                	je     c0019abf <CPU::detectFeatures()+0x9af>
c0019a94:	52                   	push   edx
c0019a95:	52                   	push   edx
c0019a96:	68 a7 bb 02 c0       	push   0xc002bba7
c0019a9b:	53                   	push   ebx
c0019a9c:	e8 e5 aa ff ff       	call   c0014586 <Device::setName(char const*)>
c0019aa1:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019aa8:	0f 20 c0             	mov    eax,cr0
c0019aab:	83 e0 14             	and    eax,0x14
c0019aae:	83 c4 10             	add    esp,0x10
c0019ab1:	83 f8 04             	cmp    eax,0x4
c0019ab4:	75 1f                	jne    c0019ad5 <CPU::detectFeatures()+0x9c5>
c0019ab6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019abd:	eb 32                	jmp    c0019af1 <CPU::detectFeatures()+0x9e1>
c0019abf:	50                   	push   eax
c0019ac0:	50                   	push   eax
c0019ac1:	68 b2 bb 02 c0       	push   0xc002bbb2
c0019ac6:	53                   	push   ebx
c0019ac7:	e8 ba aa ff ff       	call   c0014586 <Device::setName(char const*)>
c0019acc:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019ad3:	eb d3                	jmp    c0019aa8 <CPU::detectFeatures()+0x998>
c0019ad5:	e8 af 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019ada:	83 e0 01             	and    eax,0x1
c0019add:	8d 14 00             	lea    edx,[eax+eax*1]
c0019ae0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019ae6:	83 e0 fd             	and    eax,0xfffffffd
c0019ae9:	09 d0                	or     eax,edx
c0019aeb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019af1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019af8:	83 c4 4c             	add    esp,0x4c
c0019afb:	5b                   	pop    ebx
c0019afc:	5e                   	pop    esi
c0019afd:	5f                   	pop    edi
c0019afe:	5d                   	pop    ebp
c0019aff:	c3                   	ret    

c0019b00 <CPU::setupSMEP()>:
c0019b00:	0f 20 e0             	mov    eax,cr4
c0019b03:	0d 00 00 10 00       	or     eax,0x100000
c0019b08:	0f 22 e0             	mov    cr4,eax
c0019b0b:	c3                   	ret    

c0019b0c <CPU::setupUMIP()>:
c0019b0c:	0f 20 e0             	mov    eax,cr4
c0019b0f:	80 cc 08             	or     ah,0x8
c0019b12:	0f 22 e0             	mov    cr4,eax
c0019b15:	c3                   	ret    

c0019b16 <CPU::setupTSC()>:
c0019b16:	0f 20 e0             	mov    eax,cr4
c0019b19:	83 c8 04             	or     eax,0x4
c0019b1c:	0f 22 e0             	mov    cr4,eax
c0019b1f:	c3                   	ret    

c0019b20 <CPU::setupLargePages()>:
c0019b20:	0f 20 e0             	mov    eax,cr4
c0019b23:	83 c8 10             	or     eax,0x10
c0019b26:	0f 22 e0             	mov    cr4,eax
c0019b29:	c3                   	ret    

c0019b2a <CPU::setupPAT()>:
c0019b2a:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0019b2f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b36:	74 2c                	je     c0019b64 <CPU::setupPAT()+0x3a>
c0019b38:	53                   	push   ebx
c0019b39:	83 ec 10             	sub    esp,0x10
c0019b3c:	68 77 02 00 00       	push   0x277
c0019b41:	50                   	push   eax
c0019b42:	e8 a1 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b47:	83 e2 f8             	and    edx,0xfffffff8
c0019b4a:	83 ca 01             	or     edx,0x1
c0019b4d:	52                   	push   edx
c0019b4e:	50                   	push   eax
c0019b4f:	68 77 02 00 00       	push   0x277
c0019b54:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0019b5a:	e8 b5 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b5f:	83 c4 28             	add    esp,0x28
c0019b62:	5b                   	pop    ebx
c0019b63:	c3                   	ret    
c0019b64:	c3                   	ret    
c0019b65:	90                   	nop

c0019b66 <CPU::setupMTRR()>:
c0019b66:	c3                   	ret    
c0019b67:	90                   	nop

c0019b68 <CPU::setupGlobalPages()>:
c0019b68:	0f 20 e0             	mov    eax,cr4
c0019b6b:	0c 80                	or     al,0x80
c0019b6d:	0f 22 e0             	mov    cr4,eax
c0019b70:	c3                   	ret    
c0019b71:	90                   	nop

c0019b72 <CPU::allowUsermodeDataAccess()>:
c0019b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b76:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b7d:	74 03                	je     c0019b82 <CPU::allowUsermodeDataAccess()+0x10>
c0019b7f:	0f 01 cb             	stac   
c0019b82:	c3                   	ret    
c0019b83:	90                   	nop

c0019b84 <CPU::prohibitUsermodeDataAccess()>:
c0019b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b88:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b8f:	74 03                	je     c0019b94 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b91:	0f 01 ca             	clac   
c0019b94:	c3                   	ret    
c0019b95:	90                   	nop

c0019b96 <CPU::setupSMAP()>:
c0019b96:	0f 20 e0             	mov    eax,cr4
c0019b99:	0d 00 00 20 00       	or     eax,0x200000
c0019b9e:	0f 22 e0             	mov    cr4,eax
c0019ba1:	eb e1                	jmp    c0019b84 <CPU::prohibitUsermodeDataAccess()>
c0019ba3:	90                   	nop

c0019ba4 <CPU::setupFeatures()>:
c0019ba4:	83 ec 0c             	sub    esp,0xc
c0019ba7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bab:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019bb2:	74 07                	je     c0019bbb <CPU::setupFeatures()+0x17>
c0019bb4:	52                   	push   edx
c0019bb5:	e8 46 ff ff ff       	call   c0019b00 <CPU::setupSMEP()>
c0019bba:	58                   	pop    eax
c0019bbb:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019bc2:	74 07                	je     c0019bcb <CPU::setupFeatures()+0x27>
c0019bc4:	52                   	push   edx
c0019bc5:	e8 cc ff ff ff       	call   c0019b96 <CPU::setupSMAP()>
c0019bca:	58                   	pop    eax
c0019bcb:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019bd2:	74 07                	je     c0019bdb <CPU::setupFeatures()+0x37>
c0019bd4:	52                   	push   edx
c0019bd5:	e8 32 ff ff ff       	call   c0019b0c <CPU::setupUMIP()>
c0019bda:	58                   	pop    eax
c0019bdb:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019be2:	74 07                	je     c0019beb <CPU::setupFeatures()+0x47>
c0019be4:	52                   	push   edx
c0019be5:	e8 2c ff ff ff       	call   c0019b16 <CPU::setupTSC()>
c0019bea:	58                   	pop    eax
c0019beb:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019bf2:	74 07                	je     c0019bfb <CPU::setupFeatures()+0x57>
c0019bf4:	52                   	push   edx
c0019bf5:	e8 26 ff ff ff       	call   c0019b20 <CPU::setupLargePages()>
c0019bfa:	59                   	pop    ecx
c0019bfb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c02:	74 07                	je     c0019c0b <CPU::setupFeatures()+0x67>
c0019c04:	52                   	push   edx
c0019c05:	e8 5e ff ff ff       	call   c0019b68 <CPU::setupGlobalPages()>
c0019c0a:	58                   	pop    eax
c0019c0b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c12:	74 0c                	je     c0019c20 <CPU::setupFeatures()+0x7c>
c0019c14:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c18:	83 c4 0c             	add    esp,0xc
c0019c1b:	e9 0a ff ff ff       	jmp    c0019b2a <CPU::setupPAT()>
c0019c20:	83 c4 0c             	add    esp,0xc
c0019c23:	c3                   	ret    

c0019c24 <CPU::open(int, int, void*)>:
c0019c24:	57                   	push   edi
c0019c25:	56                   	push   esi
c0019c26:	53                   	push   ebx
c0019c27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c2f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c35:	83 ec 0c             	sub    esp,0xc
c0019c38:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c3e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c44:	50                   	push   eax
c0019c45:	e8 8a 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c4a:	83 c4 0c             	add    esp,0xc
c0019c4d:	6a 00                	push   0x0
c0019c4f:	68 ef be ad de       	push   0xdeadbeef
c0019c54:	57                   	push   edi
c0019c55:	e8 ae 78 ff ff       	call   c0011508 <TSS::setup(unsigned long, unsigned long)>
c0019c5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c5d:	e8 86 78 ff ff       	call   c00114e8 <TSS::flush()>
c0019c62:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c68:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c6b:	e8 c0 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c70:	b8 00 04 00 00       	mov    eax,0x400
c0019c75:	0f 23 f8             	mov    db7,eax
c0019c78:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c82:	e8 5b 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c87:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c8d:	89 30                	mov    DWORD PTR [eax],esi
c0019c8f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c95:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c98:	58                   	pop    eax
c0019c99:	5a                   	pop    edx
c0019c9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ca0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ca4:	e8 9d 89 ff ff       	call   c0012646 <VAS::setCPUSpecific(unsigned long)>
c0019ca9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cac:	e8 5f f4 ff ff       	call   c0019110 <CPU::detectFeatures()>
c0019cb1:	e8 ce bc ff ff       	call   c0015984 <setupInterruptController()>
c0019cb6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019cbc:	a1 80 e6 02 c0       	mov    eax,ds:0xc002e680
c0019cc1:	83 e0 10             	and    eax,0x10
c0019cc4:	83 f8 01             	cmp    eax,0x1
c0019cc7:	19 c0                	sbb    eax,eax
c0019cc9:	83 e0 46             	and    eax,0x46
c0019ccc:	83 c0 1e             	add    eax,0x1e
c0019ccf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cd2:	e8 bb d1 ff ff       	call   c0016e92 <setupTimer(int)>
c0019cd7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019cdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ce0:	e8 bf fe ff ff       	call   c0019ba4 <CPU::setupFeatures()>
c0019ce5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ce8:	e8 a7 f1 ff ff       	call   c0018e94 <CPU::displayFeatures()>
c0019ced:	83 c4 10             	add    esp,0x10
c0019cf0:	31 c0                	xor    eax,eax
c0019cf2:	5b                   	pop    ebx
c0019cf3:	5e                   	pop    esi
c0019cf4:	5f                   	pop    edi
c0019cf5:	c3                   	ret    

c0019cf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cf6:	57                   	push   edi
c0019cf7:	56                   	push   esi
c0019cf8:	53                   	push   ebx
c0019cf9:	51                   	push   ecx
c0019cfa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cfe:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d01:	0f 02 c0             	lar    eax,ax
c0019d04:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d07:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d0b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d0e:	88 ca                	mov    dl,cl
c0019d10:	c0 ea 06             	shr    dl,0x6
c0019d13:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d17:	89 ca                	mov    edx,ecx
c0019d19:	66 c1 ea 03          	shr    dx,0x3
c0019d1d:	83 e2 07             	and    edx,0x7
c0019d20:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d25:	88 17                	mov    BYTE PTR [edi],dl
c0019d27:	0f 84 a6 01 00 00    	je     c0019ed3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d2d:	83 e1 07             	and    ecx,0x7
c0019d30:	80 f9 04             	cmp    cl,0x4
c0019d33:	0f 84 98 00 00 00    	je     c0019dd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d39:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d3e:	0f 95 c0             	setne  al
c0019d41:	80 f9 05             	cmp    cl,0x5
c0019d44:	0f 95 c2             	setne  dl
c0019d47:	08 c2                	or     dl,al
c0019d49:	74 79                	je     c0019dc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d4b:	84 c9                	test   cl,cl
c0019d4d:	75 05                	jne    c0019d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d4f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d52:	eb 3c                	jmp    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d54:	80 f9 01             	cmp    cl,0x1
c0019d57:	75 05                	jne    c0019d5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d59:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d5c:	eb 32                	jmp    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d5e:	80 f9 02             	cmp    cl,0x2
c0019d61:	75 05                	jne    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d63:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d66:	eb 28                	jmp    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d68:	31 c0                	xor    eax,eax
c0019d6a:	80 f9 03             	cmp    cl,0x3
c0019d6d:	75 05                	jne    c0019d74 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d6f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d72:	eb 1c                	jmp    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d74:	80 f9 05             	cmp    cl,0x5
c0019d77:	75 05                	jne    c0019d7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d79:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d7c:	eb 12                	jmp    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d7e:	80 f9 06             	cmp    cl,0x6
c0019d81:	75 05                	jne    c0019d88 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d83:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d86:	eb 08                	jmp    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d88:	80 f9 07             	cmp    cl,0x7
c0019d8b:	75 03                	jne    c0019d90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d8d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d90:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d95:	75 10                	jne    c0019da7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d97:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d9b:	b9 03 00 00 00       	mov    ecx,0x3
c0019da0:	01 d0                	add    eax,edx
c0019da2:	e9 37 01 00 00       	jmp    c0019ede <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019da7:	b9 02 00 00 00       	mov    ecx,0x2
c0019dac:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019db1:	0f 85 27 01 00 00    	jne    c0019ede <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019db7:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019dba:	b9 06 00 00 00       	mov    ecx,0x6
c0019dbf:	e9 1a 01 00 00       	jmp    c0019ede <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dc4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019dc7:	b9 06 00 00 00       	mov    ecx,0x6
c0019dcc:	e9 0f 01 00 00       	jmp    c0019ee0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019dd1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019dd4:	88 ca                	mov    dl,cl
c0019dd6:	c0 ea 06             	shr    dl,0x6
c0019dd9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019ddd:	89 ca                	mov    edx,ecx
c0019ddf:	66 c1 ea 03          	shr    dx,0x3
c0019de3:	83 e2 07             	and    edx,0x7
c0019de6:	80 e1 07             	and    cl,0x7
c0019de9:	75 05                	jne    c0019df0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019deb:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019dee:	eb 4c                	jmp    c0019e3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df0:	80 f9 01             	cmp    cl,0x1
c0019df3:	75 05                	jne    c0019dfa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019df5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019df8:	eb 42                	jmp    c0019e3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dfa:	80 f9 02             	cmp    cl,0x2
c0019dfd:	75 05                	jne    c0019e04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019dff:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e02:	eb 38                	jmp    c0019e3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e04:	80 f9 03             	cmp    cl,0x3
c0019e07:	75 05                	jne    c0019e0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e09:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e0c:	eb 2e                	jmp    c0019e3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e0e:	80 f9 04             	cmp    cl,0x4
c0019e11:	75 12                	jne    c0019e25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e13:	f6 c4 60             	test   ah,0x60
c0019e16:	75 08                	jne    c0019e20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e18:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e1b:	8d 78 14             	lea    edi,[eax+0x14]
c0019e1e:	eb 1c                	jmp    c0019e3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e20:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e23:	eb 17                	jmp    c0019e3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e25:	80 f9 05             	cmp    cl,0x5
c0019e28:	75 05                	jne    c0019e2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e2a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e2d:	eb 0d                	jmp    c0019e3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e2f:	80 f9 06             	cmp    cl,0x6
c0019e32:	75 05                	jne    c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e34:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e37:	eb 03                	jmp    c0019e3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e39:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e3c:	84 d2                	test   dl,dl
c0019e3e:	75 05                	jne    c0019e45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e40:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e43:	eb 3c                	jmp    c0019e81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e45:	80 fa 01             	cmp    dl,0x1
c0019e48:	75 05                	jne    c0019e4f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e4a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e4d:	eb 32                	jmp    c0019e81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e4f:	80 fa 02             	cmp    dl,0x2
c0019e52:	75 05                	jne    c0019e59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e54:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e57:	eb 28                	jmp    c0019e81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e59:	80 fa 03             	cmp    dl,0x3
c0019e5c:	75 05                	jne    c0019e63 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e5e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e61:	eb 1e                	jmp    c0019e81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e63:	31 c0                	xor    eax,eax
c0019e65:	80 fa 04             	cmp    dl,0x4
c0019e68:	74 17                	je     c0019e81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e6a:	80 fa 05             	cmp    dl,0x5
c0019e6d:	75 05                	jne    c0019e74 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e6f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e72:	eb 0d                	jmp    c0019e81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e74:	80 fa 06             	cmp    dl,0x6
c0019e77:	75 05                	jne    c0019e7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e79:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e7c:	eb 03                	jmp    c0019e81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e7e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e81:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e86:	0f 94 c2             	sete   dl
c0019e89:	80 f9 05             	cmp    cl,0x5
c0019e8c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e90:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e95:	d3 e0                	shl    eax,cl
c0019e97:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e9b:	74 0a                	je     c0019ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e9d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ea0:	b9 07 00 00 00       	mov    ecx,0x7
c0019ea5:	eb 37                	jmp    c0019ede <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ea7:	01 f8                	add    eax,edi
c0019ea9:	b9 03 00 00 00       	mov    ecx,0x3
c0019eae:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019eb3:	74 2b                	je     c0019ee0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eb5:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019eba:	75 0d                	jne    c0019ec9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ebc:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ec0:	01 c8                	add    eax,ecx
c0019ec2:	b9 04 00 00 00       	mov    ecx,0x4
c0019ec7:	eb 17                	jmp    c0019ee0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ec9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ecc:	b9 07 00 00 00       	mov    ecx,0x7
c0019ed1:	eb 0d                	jmp    c0019ee0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ed3:	b9 02 00 00 00       	mov    ecx,0x2
c0019ed8:	b2 01                	mov    dl,0x1
c0019eda:	31 c0                	xor    eax,eax
c0019edc:	eb 02                	jmp    c0019ee0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ede:	31 d2                	xor    edx,edx
c0019ee0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ee4:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019ee6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019eea:	88 11                	mov    BYTE PTR [ecx],dl
c0019eec:	5a                   	pop    edx
c0019eed:	5b                   	pop    ebx
c0019eee:	5e                   	pop    esi
c0019eef:	5f                   	pop    edi
c0019ef0:	c3                   	ret    

c0019ef1 <Krnl::smpEntry()>:
c0019ef1:	eb fe                	jmp    c0019ef1 <Krnl::smpEntry()>

c0019ef3 <Krnl::startCPU(int)>:
c0019ef3:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0019ef8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019eff:	0f 84 36 01 00 00    	je     c001a03b <Krnl::startCPU(int)+0x148>
c0019f05:	53                   	push   ebx
c0019f06:	83 ec 08             	sub    esp,0x8
c0019f09:	e8 46 3f 00 00       	call   c001de54 <lockScheduler()>
c0019f0e:	52                   	push   edx
c0019f0f:	52                   	push   edx
c0019f10:	6a 1b                	push   0x1b
c0019f12:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c0019f18:	e8 cb 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019f1d:	59                   	pop    ecx
c0019f1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f23:	89 c3                	mov    ebx,eax
c0019f25:	58                   	pop    eax
c0019f26:	53                   	push   ebx
c0019f27:	68 ec bb 02 c0       	push   0xc002bbec
c0019f2c:	e8 4c 90 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0019f31:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f3f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f49:	c1 e0 18             	shl    eax,0x18
c0019f4c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f52:	83 c4 10             	add    esp,0x10
c0019f55:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f5b:	09 c2                	or     edx,eax
c0019f5d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f63:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f69:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f6f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f75:	80 cd c5             	or     ch,0xc5
c0019f78:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f7e:	f3 90                	pause  
c0019f80:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f82:	0f ba e1 0c          	bt     ecx,0xc
c0019f86:	72 f6                	jb     c0019f7e <Krnl::startCPU(int)+0x8b>
c0019f88:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f8e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f94:	09 c1                	or     ecx,eax
c0019f96:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f9c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fa2:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fa8:	80 cd 85             	or     ch,0x85
c0019fab:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fb1:	f3 90                	pause  
c0019fb3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fb5:	0f ba e1 0c          	bt     ecx,0xc
c0019fb9:	72 f6                	jb     c0019fb1 <Krnl::startCPU(int)+0xbe>
c0019fbb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fc5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fcb:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fd1:	09 c1                	or     ecx,eax
c0019fd3:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fd9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fdf:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fe5:	81 c9 02 06 00 00    	or     ecx,0x602
c0019feb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ff1:	f3 90                	pause  
c0019ff3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ff5:	0f ba e1 0c          	bt     ecx,0xc
c0019ff9:	72 f6                	jb     c0019ff1 <Krnl::startCPU(int)+0xfe>
c0019ffb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a005:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a00b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a011:	09 c8                	or     eax,ecx
c001a013:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a019:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a01f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a024:	0d 02 06 00 00       	or     eax,0x602
c001a029:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a02f:	f3 90                	pause  
c001a031:	8b 02                	mov    eax,DWORD PTR [edx]
c001a033:	0f ba e0 0c          	bt     eax,0xc
c001a037:	72 f6                	jb     c001a02f <Krnl::startCPU(int)+0x13c>
c001a039:	eb fe                	jmp    c001a039 <Krnl::startCPU(int)+0x146>
c001a03b:	c3                   	ret    

c001a03c <Krnl::startCPUs()>:
c001a03c:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001a041:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a047:	88 c2                	mov    dl,al
c001a049:	83 e2 0a             	and    edx,0xa
c001a04c:	80 fa 0a             	cmp    dl,0xa
c001a04f:	75 09                	jne    c001a05a <Krnl::startCPUs()+0x1e>
c001a051:	a8 01                	test   al,0x1
c001a053:	74 05                	je     c001a05a <Krnl::startCPUs()+0x1e>
c001a055:	e9 41 61 fe ff       	jmp    c000019b <prepareTramp>
c001a05a:	c3                   	ret    
c001a05b:	90                   	nop

c001a05c <EnvVarContainer::getEnv(char const*)>:
c001a05c:	57                   	push   edi
c001a05d:	56                   	push   esi
c001a05e:	53                   	push   ebx
c001a05f:	31 db                	xor    ebx,ebx
c001a061:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a065:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a067:	7e 2b                	jle    c001a094 <EnvVarContainer::getEnv(char const*)+0x38>
c001a069:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a070:	50                   	push   eax
c001a071:	50                   	push   eax
c001a072:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a075:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a078:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a07c:	e8 3f 68 fe ff       	call   c00008c0 <strcmp>
c001a081:	83 c4 10             	add    esp,0x10
c001a084:	85 c0                	test   eax,eax
c001a086:	75 09                	jne    c001a091 <EnvVarContainer::getEnv(char const*)+0x35>
c001a088:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a08b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a08f:	eb 05                	jmp    c001a096 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a091:	43                   	inc    ebx
c001a092:	eb d1                	jmp    c001a065 <EnvVarContainer::getEnv(char const*)+0x9>
c001a094:	31 c0                	xor    eax,eax
c001a096:	5b                   	pop    ebx
c001a097:	5e                   	pop    esi
c001a098:	5f                   	pop    edi
c001a099:	c3                   	ret    

c001a09a <EnvVarContainer::setEnv(char const*, char const*)>:
c001a09a:	57                   	push   edi
c001a09b:	56                   	push   esi
c001a09c:	53                   	push   ebx
c001a09d:	83 ec 1c             	sub    esp,0x1c
c001a0a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0a4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a0a8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0ac:	57                   	push   edi
c001a0ad:	e8 e2 66 fe ff       	call   c0000794 <strlen>
c001a0b2:	40                   	inc    eax
c001a0b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0b6:	e8 85 57 ff ff       	call   c000f840 <malloc>
c001a0bb:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0c2:	e8 cd 66 fe ff       	call   c0000794 <strlen>
c001a0c7:	40                   	inc    eax
c001a0c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0cb:	e8 70 57 ff ff       	call   c000f840 <malloc>
c001a0d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0d7:	e8 b8 66 fe ff       	call   c0000794 <strlen>
c001a0dc:	83 c4 0c             	add    esp,0xc
c001a0df:	40                   	inc    eax
c001a0e0:	50                   	push   eax
c001a0e1:	6a 00                	push   0x0
c001a0e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0e7:	e8 8c 66 fe ff       	call   c0000778 <memset>
c001a0ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0ef:	e8 a0 66 fe ff       	call   c0000794 <strlen>
c001a0f4:	83 c4 0c             	add    esp,0xc
c001a0f7:	40                   	inc    eax
c001a0f8:	50                   	push   eax
c001a0f9:	57                   	push   edi
c001a0fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0fe:	e8 41 66 fe ff       	call   c0000744 <memcpy>
c001a103:	89 34 24             	mov    DWORD PTR [esp],esi
c001a106:	e8 89 66 fe ff       	call   c0000794 <strlen>
c001a10b:	83 c4 0c             	add    esp,0xc
c001a10e:	40                   	inc    eax
c001a10f:	50                   	push   eax
c001a110:	6a 00                	push   0x0
c001a112:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a116:	e8 5d 66 fe ff       	call   c0000778 <memset>
c001a11b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a11e:	e8 71 66 fe ff       	call   c0000794 <strlen>
c001a123:	83 c4 0c             	add    esp,0xc
c001a126:	40                   	inc    eax
c001a127:	50                   	push   eax
c001a128:	56                   	push   esi
c001a129:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a12d:	e8 12 66 fe ff       	call   c0000744 <memcpy>
c001a132:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a134:	40                   	inc    eax
c001a135:	89 03                	mov    DWORD PTR [ebx],eax
c001a137:	c1 e0 03             	shl    eax,0x3
c001a13a:	5a                   	pop    edx
c001a13b:	59                   	pop    ecx
c001a13c:	50                   	push   eax
c001a13d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a140:	e8 e7 56 ff ff       	call   c000f82c <realloc>
c001a145:	83 c4 0c             	add    esp,0xc
c001a148:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a14b:	6a 08                	push   0x8
c001a14d:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a151:	52                   	push   edx
c001a152:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a154:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a158:	50                   	push   eax
c001a159:	e8 e6 65 fe ff       	call   c0000744 <memcpy>
c001a15e:	83 c4 20             	add    esp,0x20
c001a161:	5b                   	pop    ebx
c001a162:	5e                   	pop    esi
c001a163:	5f                   	pop    edi
c001a164:	c3                   	ret    
c001a165:	90                   	nop

c001a166 <EnvVarContainer::deleteEnv(char const*)>:
c001a166:	c3                   	ret    
c001a167:	90                   	nop

c001a168 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a168:	55                   	push   ebp
c001a169:	57                   	push   edi
c001a16a:	56                   	push   esi
c001a16b:	53                   	push   ebx
c001a16c:	81 ec 38 01 00 00    	sub    esp,0x138
c001a172:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a179:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a180:	68 14 01 00 00       	push   0x114
c001a185:	e8 b6 56 ff ff       	call   c000f840 <malloc>
c001a18a:	83 c4 0c             	add    esp,0xc
c001a18d:	89 c7                	mov    edi,eax
c001a18f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a192:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a199:	50                   	push   eax
c001a19a:	e8 37 93 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001a19f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1a2:	e8 01 96 ff ff       	call   c00137a8 <File::exists()>
c001a1a7:	83 c4 10             	add    esp,0x10
c001a1aa:	84 c0                	test   al,al
c001a1ac:	75 31                	jne    c001a1df <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1ae:	51                   	push   ecx
c001a1af:	51                   	push   ecx
c001a1b0:	6a 12                	push   0x12
c001a1b2:	57                   	push   edi
c001a1b3:	e8 82 93 ff ff       	call   c001353a <File::open(FileOpenMode)>
c001a1b8:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1ba:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a1bd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1c0:	e8 cf 65 fe ff       	call   c0000794 <strlen>
c001a1c5:	5a                   	pop    edx
c001a1c6:	31 d2                	xor    edx,edx
c001a1c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1cc:	51                   	push   ecx
c001a1cd:	55                   	push   ebp
c001a1ce:	52                   	push   edx
c001a1cf:	50                   	push   eax
c001a1d0:	57                   	push   edi
c001a1d1:	ff d3                	call   ebx
c001a1d3:	83 c4 14             	add    esp,0x14
c001a1d6:	57                   	push   edi
c001a1d7:	e8 bc 93 ff ff       	call   c0013598 <File::close()>
c001a1dc:	83 c4 10             	add    esp,0x10
c001a1df:	31 db                	xor    ebx,ebx
c001a1e1:	50                   	push   eax
c001a1e2:	31 ed                	xor    ebp,ebp
c001a1e4:	68 00 01 00 00       	push   0x100
c001a1e9:	6a 00                	push   0x0
c001a1eb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1ef:	50                   	push   eax
c001a1f0:	e8 83 65 fe ff       	call   c0000778 <memset>
c001a1f5:	58                   	pop    eax
c001a1f6:	5a                   	pop    edx
c001a1f7:	6a 01                	push   0x1
c001a1f9:	57                   	push   edi
c001a1fa:	e8 3b 93 ff ff       	call   c001353a <File::open(FileOpenMode)>
c001a1ff:	83 c4 10             	add    esp,0x10
c001a202:	83 ec 0c             	sub    esp,0xc
c001a205:	8b 07                	mov    eax,DWORD PTR [edi]
c001a207:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a20b:	51                   	push   ecx
c001a20c:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a210:	52                   	push   edx
c001a211:	6a 00                	push   0x0
c001a213:	6a 01                	push   0x1
c001a215:	57                   	push   edi
c001a216:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a219:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a21d:	83 c4 20             	add    esp,0x20
c001a220:	3c 0d                	cmp    al,0xd
c001a222:	0f 84 12 01 00 00    	je     c001a33a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a228:	85 db                	test   ebx,ebx
c001a22a:	0f 84 fd 00 00 00    	je     c001a32d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a230:	3c 0a                	cmp    al,0xa
c001a232:	74 13                	je     c001a247 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a234:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a239:	74 0c                	je     c001a247 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a23b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a241:	0f 8e e6 00 00 00    	jle    c001a32d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a247:	83 ec 0c             	sub    esp,0xc
c001a24a:	8d 53 01             	lea    edx,[ebx+0x1]
c001a24d:	29 dd                	sub    ebp,ebx
c001a24f:	52                   	push   edx
c001a250:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a254:	e8 e7 55 ff ff       	call   c000f840 <malloc>
c001a259:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a25c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a260:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a263:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a267:	e8 d4 55 ff ff       	call   c000f840 <malloc>
c001a26c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a270:	83 c4 0c             	add    esp,0xc
c001a273:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a277:	52                   	push   edx
c001a278:	6a 00                	push   0x0
c001a27a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a27e:	e8 f5 64 fe ff       	call   c0000778 <memset>
c001a283:	83 c4 0c             	add    esp,0xc
c001a286:	53                   	push   ebx
c001a287:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a28b:	55                   	push   ebp
c001a28c:	01 eb                	add    ebx,ebp
c001a28e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a292:	e8 ad 64 fe ff       	call   c0000744 <memcpy>
c001a297:	83 c4 0c             	add    esp,0xc
c001a29a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a29e:	51                   	push   ecx
c001a29f:	6a 00                	push   0x0
c001a2a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2a5:	e8 ce 64 fe ff       	call   c0000778 <memset>
c001a2aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2ad:	e8 e2 64 fe ff       	call   c0000794 <strlen>
c001a2b2:	83 c4 0c             	add    esp,0xc
c001a2b5:	50                   	push   eax
c001a2b6:	53                   	push   ebx
c001a2b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2bb:	e8 84 64 fe ff       	call   c0000744 <memcpy>
c001a2c0:	5b                   	pop    ebx
c001a2c1:	58                   	pop    eax
c001a2c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2c6:	68 fd bb 02 c0       	push   0xc002bbfd
c001a2cb:	e8 ad 8c ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001a2d0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2d2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2d5:	40                   	inc    eax
c001a2d6:	83 c4 10             	add    esp,0x10
c001a2d9:	89 06                	mov    DWORD PTR [esi],eax
c001a2db:	85 d2                	test   edx,edx
c001a2dd:	75 0c                	jne    c001a2eb <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2df:	83 ec 0c             	sub    esp,0xc
c001a2e2:	6a 08                	push   0x8
c001a2e4:	e8 57 55 ff ff       	call   c000f840 <malloc>
c001a2e9:	eb 0c                	jmp    c001a2f7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2eb:	c1 e0 03             	shl    eax,0x3
c001a2ee:	51                   	push   ecx
c001a2ef:	51                   	push   ecx
c001a2f0:	50                   	push   eax
c001a2f1:	52                   	push   edx
c001a2f2:	e8 35 55 ff ff       	call   c000f82c <realloc>
c001a2f7:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2fa:	83 c4 10             	add    esp,0x10
c001a2fd:	31 db                	xor    ebx,ebx
c001a2ff:	52                   	push   edx
c001a300:	6a 08                	push   0x8
c001a302:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a306:	50                   	push   eax
c001a307:	8b 16                	mov    edx,DWORD PTR [esi]
c001a309:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a30c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a310:	50                   	push   eax
c001a311:	e8 2e 64 fe ff       	call   c0000744 <memcpy>
c001a316:	83 c4 0c             	add    esp,0xc
c001a319:	68 00 01 00 00       	push   0x100
c001a31e:	6a 00                	push   0x0
c001a320:	55                   	push   ebp
c001a321:	31 ed                	xor    ebp,ebp
c001a323:	e8 50 64 fe ff       	call   c0000778 <memset>
c001a328:	83 c4 10             	add    esp,0x10
c001a32b:	eb 0d                	jmp    c001a33a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a32d:	3c 3d                	cmp    al,0x3d
c001a32f:	74 07                	je     c001a338 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a331:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a335:	45                   	inc    ebp
c001a336:	eb 02                	jmp    c001a33a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a338:	89 eb                	mov    ebx,ebp
c001a33a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a33f:	0f 85 bd fe ff ff    	jne    c001a202 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a345:	50                   	push   eax
c001a346:	50                   	push   eax
c001a347:	ff 36                	push   DWORD PTR [esi]
c001a349:	68 0b bc 02 c0       	push   0xc002bc0b
c001a34e:	e8 2a 8c ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001a353:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a359:	5b                   	pop    ebx
c001a35a:	5e                   	pop    esi
c001a35b:	5f                   	pop    edi
c001a35c:	5d                   	pop    ebp
c001a35d:	c3                   	ret    

c001a35e <EnvVarContainer::__loadSystem()>:
c001a35e:	83 ec 10             	sub    esp,0x10
c001a361:	68 a0 db 02 c0       	push   0xc002dba0
c001a366:	68 36 bc 02 c0       	push   0xc002bc36
c001a36b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a36f:	e8 f4 fd ff ff       	call   c001a168 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a374:	83 c4 1c             	add    esp,0x1c
c001a377:	c3                   	ret    

c001a378 <EnvVarContainer::__loadUser()>:
c001a378:	c3                   	ret    
c001a379:	90                   	nop

c001a37a <EnvVarContainer::EnvVarContainer(Process*)>:
c001a37a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a37e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a388:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a38c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a38f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a393:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a39a:	90                   	nop
c001a39b:	c3                   	ret    

c001a39c <EnvVarContainer::~EnvVarContainer()>:
c001a39c:	83 ec 0c             	sub    esp,0xc
c001a39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3a6:	85 c0                	test   eax,eax
c001a3a8:	74 1d                	je     c001a3c7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3b0:	85 c0                	test   eax,eax
c001a3b2:	74 13                	je     c001a3c7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3bb:	83 ec 0c             	sub    esp,0xc
c001a3be:	50                   	push   eax
c001a3bf:	e8 8c 54 ff ff       	call   c000f850 <free>
c001a3c4:	83 c4 10             	add    esp,0x10
c001a3c7:	90                   	nop
c001a3c8:	83 c4 0c             	add    esp,0xc
c001a3cb:	c3                   	ret    

c001a3cc <Krnl::getEnv(Process*, char const*)>:
c001a3cc:	53                   	push   ebx
c001a3cd:	83 ec 08             	sub    esp,0x8
c001a3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3d8:	39 05 d4 1b 03 c0    	cmp    DWORD PTR ds:0xc0031bd4,eax
c001a3de:	74 04                	je     c001a3e4 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3e0:	85 c0                	test   eax,eax
c001a3e2:	75 0b                	jne    c001a3ef <Krnl::getEnv(Process*, char const*)+0x23>
c001a3e4:	a1 b4 11 03 c0       	mov    eax,ds:0xc00311b4
c001a3e9:	85 c0                	test   eax,eax
c001a3eb:	75 19                	jne    c001a406 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3ed:	eb 27                	jmp    c001a416 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3ef:	52                   	push   edx
c001a3f0:	52                   	push   edx
c001a3f1:	53                   	push   ebx
c001a3f2:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3f8:	e8 5f fc ff ff       	call   c001a05c <EnvVarContainer::getEnv(char const*)>
c001a3fd:	83 c4 10             	add    esp,0x10
c001a400:	85 c0                	test   eax,eax
c001a402:	75 28                	jne    c001a42c <Krnl::getEnv(Process*, char const*)+0x60>
c001a404:	eb de                	jmp    c001a3e4 <Krnl::getEnv(Process*, char const*)+0x18>
c001a406:	52                   	push   edx
c001a407:	52                   	push   edx
c001a408:	53                   	push   ebx
c001a409:	50                   	push   eax
c001a40a:	e8 4d fc ff ff       	call   c001a05c <EnvVarContainer::getEnv(char const*)>
c001a40f:	83 c4 10             	add    esp,0x10
c001a412:	85 c0                	test   eax,eax
c001a414:	75 16                	jne    c001a42c <Krnl::getEnv(Process*, char const*)+0x60>
c001a416:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a41a:	a1 b8 11 03 c0       	mov    eax,ds:0xc00311b8
c001a41f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a423:	83 c4 08             	add    esp,0x8
c001a426:	5b                   	pop    ebx
c001a427:	e9 30 fc ff ff       	jmp    c001a05c <EnvVarContainer::getEnv(char const*)>
c001a42c:	83 c4 08             	add    esp,0x8
c001a42f:	5b                   	pop    ebx
c001a430:	c3                   	ret    

c001a431 <Krnl::setEnvSystem(char const*, char const*)>:
c001a431:	83 ec 10             	sub    esp,0x10
c001a434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a438:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a43c:	ff 35 b8 11 03 c0    	push   DWORD PTR ds:0xc00311b8
c001a442:	e8 53 fc ff ff       	call   c001a09a <EnvVarContainer::setEnv(char const*, char const*)>
c001a447:	83 c4 1c             	add    esp,0x1c
c001a44a:	c3                   	ret    

c001a44b <Krnl::setEnvUser(char const*, char const*)>:
c001a44b:	a1 b4 11 03 c0       	mov    eax,ds:0xc00311b4
c001a450:	85 c0                	test   eax,eax
c001a452:	74 15                	je     c001a469 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a454:	83 ec 10             	sub    esp,0x10
c001a457:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a45b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a45f:	50                   	push   eax
c001a460:	e8 35 fc ff ff       	call   c001a09a <EnvVarContainer::setEnv(char const*, char const*)>
c001a465:	83 c4 1c             	add    esp,0x1c
c001a468:	c3                   	ret    
c001a469:	c3                   	ret    

c001a46a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a46a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a46e:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a474:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a478:	e9 1d fc ff ff       	jmp    c001a09a <EnvVarContainer::setEnv(char const*, char const*)>

c001a47d <Krnl::deleteEnvSystem(char const*)>:
c001a47d:	c3                   	ret    

c001a47e <Krnl::deleteEnvUser(char const*)>:
c001a47e:	c3                   	ret    

c001a47f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a47f:	c3                   	ret    

c001a480 <Krnl::newProcessEnv(Process*)>:
c001a480:	83 ec 28             	sub    esp,0x28
c001a483:	6a 0c                	push   0xc
c001a485:	e8 b6 53 ff ff       	call   c000f840 <malloc>
c001a48a:	5a                   	pop    edx
c001a48b:	59                   	pop    ecx
c001a48c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a490:	50                   	push   eax
c001a491:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a495:	e8 e0 fe ff ff       	call   c001a37a <EnvVarContainer::EnvVarContainer(Process*)>
c001a49a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a49e:	83 c4 2c             	add    esp,0x2c
c001a4a1:	c3                   	ret    

c001a4a2 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a4a2:	56                   	push   esi
c001a4a3:	53                   	push   ebx
c001a4a4:	83 ec 10             	sub    esp,0x10
c001a4a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4ab:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4b1:	6a 0c                	push   0xc
c001a4b3:	e8 88 53 ff ff       	call   c000f840 <malloc>
c001a4b8:	89 c3                	mov    ebx,eax
c001a4ba:	58                   	pop    eax
c001a4bb:	5a                   	pop    edx
c001a4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4c0:	53                   	push   ebx
c001a4c1:	e8 b4 fe ff ff       	call   c001a37a <EnvVarContainer::EnvVarContainer(Process*)>
c001a4c6:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4c8:	89 03                	mov    DWORD PTR [ebx],eax
c001a4ca:	c1 e0 03             	shl    eax,0x3
c001a4cd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4d0:	e8 6b 53 ff ff       	call   c000f840 <malloc>
c001a4d5:	83 c4 0c             	add    esp,0xc
c001a4d8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4db:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4dd:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4e4:	52                   	push   edx
c001a4e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4e8:	50                   	push   eax
c001a4e9:	e8 56 62 fe ff       	call   c0000744 <memcpy>
c001a4ee:	89 d8                	mov    eax,ebx
c001a4f0:	83 c4 14             	add    esp,0x14
c001a4f3:	5b                   	pop    ebx
c001a4f4:	5e                   	pop    esi
c001a4f5:	c3                   	ret    

c001a4f6 <Krnl::loadSystemEnv()>:
c001a4f6:	53                   	push   ebx
c001a4f7:	83 ec 14             	sub    esp,0x14
c001a4fa:	6a 0c                	push   0xc
c001a4fc:	e8 3f 53 ff ff       	call   c000f840 <malloc>
c001a501:	89 c3                	mov    ebx,eax
c001a503:	58                   	pop    eax
c001a504:	5a                   	pop    edx
c001a505:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c001a50b:	53                   	push   ebx
c001a50c:	e8 69 fe ff ff       	call   c001a37a <EnvVarContainer::EnvVarContainer(Process*)>
c001a511:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a514:	89 1d b8 11 03 c0    	mov    DWORD PTR ds:0xc00311b8,ebx
c001a51a:	e8 3f fe ff ff       	call   c001a35e <EnvVarContainer::__loadSystem()>
c001a51f:	83 c4 18             	add    esp,0x18
c001a522:	5b                   	pop    ebx
c001a523:	c3                   	ret    

c001a524 <Krnl::loadUserEnv()>:
c001a524:	53                   	push   ebx
c001a525:	83 ec 14             	sub    esp,0x14
c001a528:	6a 0c                	push   0xc
c001a52a:	e8 11 53 ff ff       	call   c000f840 <malloc>
c001a52f:	89 c3                	mov    ebx,eax
c001a531:	58                   	pop    eax
c001a532:	5a                   	pop    edx
c001a533:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c001a539:	53                   	push   ebx
c001a53a:	e8 3b fe ff ff       	call   c001a37a <EnvVarContainer::EnvVarContainer(Process*)>
c001a53f:	89 1d b4 11 03 c0    	mov    DWORD PTR ds:0xc00311b4,ebx
c001a545:	83 c4 18             	add    esp,0x18
c001a548:	5b                   	pop    ebx
c001a549:	c3                   	ret    

c001a54a <Krnl::flushEnv()>:
c001a54a:	c3                   	ret    

c001a54b <Krnl::getProcessTotalEnvCount(Process*)>:
c001a54b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a54f:	8b 15 b4 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311b4
c001a555:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a55b:	a1 b8 11 03 c0       	mov    eax,ds:0xc00311b8
c001a560:	8b 00                	mov    eax,DWORD PTR [eax]
c001a562:	03 01                	add    eax,DWORD PTR [ecx]
c001a564:	85 d2                	test   edx,edx
c001a566:	74 02                	je     c001a56a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a568:	03 02                	add    eax,DWORD PTR [edx]
c001a56a:	c3                   	ret    

c001a56b <Krnl::getProcessEnvPair(Process*, int)>:
c001a56b:	57                   	push   edi
c001a56c:	8b 0d b4 11 03 c0    	mov    ecx,DWORD PTR ds:0xc00311b4
c001a572:	56                   	push   esi
c001a573:	85 c9                	test   ecx,ecx
c001a575:	53                   	push   ebx
c001a576:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a57a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a57e:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a584:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a588:	8b 02                	mov    eax,DWORD PTR [edx]
c001a58a:	75 47                	jne    c001a5d3 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a58c:	39 c3                	cmp    ebx,eax
c001a58e:	7c 47                	jl     c001a5d7 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a590:	8b 15 b8 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311b8
c001a596:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a598:	01 c1                	add    ecx,eax
c001a59a:	39 d9                	cmp    ecx,ebx
c001a59c:	7e 6c                	jle    c001a60a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a59e:	51                   	push   ecx
c001a59f:	89 d9                	mov    ecx,ebx
c001a5a1:	29 c1                	sub    ecx,eax
c001a5a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5a6:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a5aa:	53                   	push   ebx
c001a5ab:	68 58 bc 02 c0       	push   0xc002bc58
c001a5b0:	e8 c8 89 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001a5b5:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5bb:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a5bd:	a1 b8 11 03 c0       	mov    eax,ds:0xc00311b8
c001a5c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5c5:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5c9:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5cc:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5cf:	89 06                	mov    DWORD PTR [esi],eax
c001a5d1:	eb 51                	jmp    c001a624 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5d3:	39 c3                	cmp    ebx,eax
c001a5d5:	7d 05                	jge    c001a5dc <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5d7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5da:	eb 20                	jmp    c001a5fc <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5dc:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5de:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5e1:	39 da                	cmp    edx,ebx
c001a5e3:	7e 04                	jle    c001a5e9 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5e5:	29 c3                	sub    ebx,eax
c001a5e7:	eb 10                	jmp    c001a5f9 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5e9:	8b 0d b8 11 03 c0    	mov    ecx,DWORD PTR ds:0xc00311b8
c001a5ef:	03 11                	add    edx,DWORD PTR [ecx]
c001a5f1:	39 da                	cmp    edx,ebx
c001a5f3:	7e 15                	jle    c001a60a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5f5:	29 c3                	sub    ebx,eax
c001a5f7:	29 fb                	sub    ebx,edi
c001a5f9:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5fc:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a600:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a603:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a606:	89 06                	mov    DWORD PTR [esi],eax
c001a608:	eb 1d                	jmp    c001a627 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a60a:	83 ec 0c             	sub    esp,0xc
c001a60d:	68 6c bc 02 c0       	push   0xc002bc6c
c001a612:	e8 18 00 00 00       	call   c001a62f <Krnl::panic(char const*)>
c001a617:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a61d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a624:	83 c4 10             	add    esp,0x10
c001a627:	89 f0                	mov    eax,esi
c001a629:	5b                   	pop    ebx
c001a62a:	5e                   	pop    esi
c001a62b:	5f                   	pop    edi
c001a62c:	c2 04 00             	ret    0x4

c001a62f <Krnl::panic(char const*)>:
c001a62f:	55                   	push   ebp
c001a630:	89 e5                	mov    ebp,esp
c001a632:	53                   	push   ebx
c001a633:	83 ec 0c             	sub    esp,0xc
c001a636:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a639:	fa                   	cli    
c001a63a:	c6 05 c4 11 03 c0 01 	mov    BYTE PTR ds:0xc00311c4,0x1
c001a641:	53                   	push   ebx
c001a642:	c6 05 a4 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d5a4,0x0
c001a649:	68 86 bc 02 c0       	push   0xc002bc86
c001a64e:	e8 2a 89 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001a653:	58                   	pop    eax
c001a654:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a659:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65f:	e8 e5 66 ff ff       	call   c0010d49 <setActiveTerminal(VgaText*)>
c001a664:	83 c4 0c             	add    esp,0xc
c001a667:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a66c:	6a 01                	push   0x1
c001a66e:	6a 0f                	push   0xf
c001a670:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a676:	e8 ff 60 ff ff       	call   c001077a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a67b:	58                   	pop    eax
c001a67c:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a681:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a687:	e8 5e 69 ff ff       	call   c0010fea <VgaText::clearScreen()>
c001a68c:	58                   	pop    eax
c001a68d:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a692:	5a                   	pop    edx
c001a693:	68 9f bc 02 c0       	push   0xc002bc9f
c001a698:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a69e:	e8 c5 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a6a3:	59                   	pop    ecx
c001a6a4:	58                   	pop    eax
c001a6a5:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a6aa:	68 44 bd 02 c0       	push   0xc002bd44
c001a6af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b5:	e8 ae 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a6ba:	58                   	pop    eax
c001a6bb:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a6c0:	5a                   	pop    edx
c001a6c1:	68 bb bc 02 c0       	push   0xc002bcbb
c001a6c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6cc:	e8 97 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a6d1:	59                   	pop    ecx
c001a6d2:	58                   	pop    eax
c001a6d3:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a6d8:	53                   	push   ebx
c001a6d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6df:	e8 84 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a6e4:	58                   	pop    eax
c001a6e5:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a6ea:	5a                   	pop    edx
c001a6eb:	68 db bc 02 c0       	push   0xc002bcdb
c001a6f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f6:	e8 6d 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a6fb:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c001a700:	83 c4 10             	add    esp,0x10
c001a703:	85 c0                	test   eax,eax
c001a705:	74 02                	je     c001a709 <Krnl::panic(char const*)+0xda>
c001a707:	ff d0                	call   eax
c001a709:	83 ec 0c             	sub    esp,0xc
c001a70c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a70f:	e8 47 30 00 00       	call   c001d75b <Thr::getDriverNameFromAddress(unsigned long)>
c001a714:	83 c4 10             	add    esp,0x10
c001a717:	89 c3                	mov    ebx,eax
c001a719:	85 c0                	test   eax,eax
c001a71b:	0f 84 50 02 00 00    	je     c001a971 <Krnl::panic(char const*)+0x342>
c001a721:	83 ec 08             	sub    esp,0x8
c001a724:	8b 15 d4 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bd4
c001a72a:	68 80 bd 02 c0       	push   0xc002bd80
c001a72f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a735:	e8 2e 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a73a:	58                   	pop    eax
c001a73b:	5a                   	pop    edx
c001a73c:	8b 15 d4 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bd4
c001a742:	68 bb bc 02 c0       	push   0xc002bcbb
c001a747:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a74d:	e8 16 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a752:	59                   	pop    ecx
c001a753:	58                   	pop    eax
c001a754:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a759:	53                   	push   ebx
c001a75a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a760:	e8 03 6a ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	83 ec 08             	sub    esp,0x8
c001a76b:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a770:	68 da bc 02 c0       	push   0xc002bcda
c001a775:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a77b:	e8 e8 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a780:	58                   	pop    eax
c001a781:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a786:	5a                   	pop    edx
c001a787:	68 d8 bd 02 c0       	push   0xc002bdd8
c001a78c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a792:	e8 d1 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a797:	59                   	pop    ecx
c001a798:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a79d:	5b                   	pop    ebx
c001a79e:	68 18 be 02 c0       	push   0xc002be18
c001a7a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7a9:	e8 ba 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a7ae:	58                   	pop    eax
c001a7af:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a7b4:	5a                   	pop    edx
c001a7b5:	68 c6 bc 02 c0       	push   0xc002bcc6
c001a7ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c0:	e8 a3 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a7c5:	59                   	pop    ecx
c001a7c6:	5b                   	pop    ebx
c001a7c7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7ca:	68 de bc 02 c0       	push   0xc002bcde
c001a7cf:	e8 a9 87 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001a7d4:	58                   	pop    eax
c001a7d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7d8:	5a                   	pop    edx
c001a7d9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7dc:	68 e7 bc 02 c0       	push   0xc002bce7
c001a7e1:	e8 97 87 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001a7e6:	59                   	pop    ecx
c001a7e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7ea:	5b                   	pop    ebx
c001a7eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7ed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7f0:	68 f0 bc 02 c0       	push   0xc002bcf0
c001a7f5:	e8 83 87 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001a7fa:	58                   	pop    eax
c001a7fb:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a800:	5a                   	pop    edx
c001a801:	68 5c be 02 c0       	push   0xc002be5c
c001a806:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a80c:	e8 57 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a811:	59                   	pop    ecx
c001a812:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a817:	5b                   	pop    ebx
c001a818:	68 f9 bc 02 c0       	push   0xc002bcf9
c001a81d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a823:	e8 40 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a828:	0f 20 c0             	mov    eax,cr0
c001a82b:	5a                   	pop    edx
c001a82c:	59                   	pop    ecx
c001a82d:	50                   	push   eax
c001a82e:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a833:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a839:	e8 50 69 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a83e:	5b                   	pop    ebx
c001a83f:	58                   	pop    eax
c001a840:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a845:	68 03 bd 02 c0       	push   0xc002bd03
c001a84a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a850:	e8 13 69 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a855:	0f 20 d0             	mov    eax,cr2
c001a858:	5a                   	pop    edx
c001a859:	59                   	pop    ecx
c001a85a:	50                   	push   eax
c001a85b:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a860:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a866:	e8 23 69 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a86b:	5b                   	pop    ebx
c001a86c:	58                   	pop    eax
c001a86d:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a872:	68 0d bd 02 c0       	push   0xc002bd0d
c001a877:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87d:	e8 e6 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a882:	0f 20 d8             	mov    eax,cr3
c001a885:	5a                   	pop    edx
c001a886:	59                   	pop    ecx
c001a887:	50                   	push   eax
c001a888:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a88d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a893:	e8 f6 68 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a898:	5b                   	pop    ebx
c001a899:	58                   	pop    eax
c001a89a:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a89f:	68 20 bd 02 c0       	push   0xc002bd20
c001a8a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8aa:	e8 b9 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a8af:	0f 20 e0             	mov    eax,cr4
c001a8b2:	5a                   	pop    edx
c001a8b3:	59                   	pop    ecx
c001a8b4:	50                   	push   eax
c001a8b5:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a8ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c0:	e8 c9 68 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a8c5:	5b                   	pop    ebx
c001a8c6:	58                   	pop    eax
c001a8c7:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a8cc:	68 2a bd 02 c0       	push   0xc002bd2a
c001a8d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d7:	e8 8c 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a8dc:	5a                   	pop    edx
c001a8dd:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a8e2:	59                   	pop    ecx
c001a8e3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8ec:	50                   	push   eax
c001a8ed:	e8 9c 68 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a8f2:	5b                   	pop    ebx
c001a8f3:	58                   	pop    eax
c001a8f4:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a8f9:	68 41 bd 02 c0       	push   0xc002bd41
c001a8fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a904:	e8 5f 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a909:	5a                   	pop    edx
c001a90a:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a90f:	59                   	pop    ecx
c001a910:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a916:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a919:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a91c:	50                   	push   eax
c001a91d:	e8 6c 68 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a922:	5b                   	pop    ebx
c001a923:	58                   	pop    eax
c001a924:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a929:	68 41 bd 02 c0       	push   0xc002bd41
c001a92e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a934:	e8 2f 68 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a939:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a93e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a941:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a947:	8b 12                	mov    edx,DWORD PTR [edx]
c001a949:	59                   	pop    ecx
c001a94a:	5b                   	pop    ebx
c001a94b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a94e:	50                   	push   eax
c001a94f:	e8 3a 68 ff ff       	call   c001118e <VgaText::putx(unsigned int)>
c001a954:	83 c4 10             	add    esp,0x10
c001a957:	b2 fe                	mov    dl,0xfe
c001a959:	e4 60                	in     al,0x60
c001a95b:	3c 1c                	cmp    al,0x1c
c001a95d:	74 04                	je     c001a963 <Krnl::panic(char const*)+0x334>
c001a95f:	3c 5a                	cmp    al,0x5a
c001a961:	75 f6                	jne    c001a959 <Krnl::panic(char const*)+0x32a>
c001a963:	e4 64                	in     al,0x64
c001a965:	a8 02                	test   al,0x2
c001a967:	75 fa                	jne    c001a963 <Krnl::panic(char const*)+0x334>
c001a969:	88 d0                	mov    al,dl
c001a96b:	e6 64                	out    0x64,al
c001a96d:	fa                   	cli    
c001a96e:	f4                   	hlt    
c001a96f:	eb e8                	jmp    c001a959 <Krnl::panic(char const*)+0x32a>
c001a971:	50                   	push   eax
c001a972:	50                   	push   eax
c001a973:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a978:	68 ac bd 02 c0       	push   0xc002bdac
c001a97d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a983:	e8 e0 67 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a988:	58                   	pop    eax
c001a989:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a98e:	5a                   	pop    edx
c001a98f:	68 bb bc 02 c0       	push   0xc002bcbb
c001a994:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99a:	e8 c9 67 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a99f:	59                   	pop    ecx
c001a9a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9a5:	5b                   	pop    ebx
c001a9a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9a9:	83 c0 0c             	add    eax,0xc
c001a9ac:	50                   	push   eax
c001a9ad:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001a9b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b8:	e8 ab 67 ff ff       	call   c0011168 <VgaText::puts(char const*)>
c001a9bd:	83 c4 10             	add    esp,0x10
c001a9c0:	e9 a3 fd ff ff       	jmp    c001a768 <Krnl::panic(char const*)+0x139>

c001a9c5 <Net::switchEndian16(unsigned short)>:
c001a9c5:	83 ec 04             	sub    esp,0x4
c001a9c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9cc:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9d0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9d4:	c1 f8 08             	sar    eax,0x8
c001a9d7:	89 c2                	mov    edx,eax
c001a9d9:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9dd:	c1 e0 08             	shl    eax,0x8
c001a9e0:	09 d0                	or     eax,edx
c001a9e2:	83 c4 04             	add    esp,0x4
c001a9e5:	c3                   	ret    

c001a9e6 <Net::switchEndian32(unsigned int)>:
c001a9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ea:	c1 e8 18             	shr    eax,0x18
c001a9ed:	89 c2                	mov    edx,eax
c001a9ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f3:	c1 e0 08             	shl    eax,0x8
c001a9f6:	25 00 00 ff 00       	and    eax,0xff0000
c001a9fb:	09 c2                	or     edx,eax
c001a9fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa01:	c1 e8 08             	shr    eax,0x8
c001aa04:	25 00 ff 00 00       	and    eax,0xff00
c001aa09:	09 c2                	or     edx,eax
c001aa0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0f:	c1 e0 18             	shl    eax,0x18
c001aa12:	09 d0                	or     eax,edx
c001aa14:	c3                   	ret    

c001aa15 <Net::crc32Calc(unsigned char*, int)>:
c001aa15:	83 ec 10             	sub    esp,0x10
c001aa18:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa1d:	75 07                	jne    c001aa26 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa1f:	b8 00 00 00 00       	mov    eax,0x0
c001aa24:	eb 7c                	jmp    c001aaa2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa26:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa2b:	7f 07                	jg     c001aa34 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa2d:	b8 00 00 00 00       	mov    eax,0x0
c001aa32:	eb 6e                	jmp    c001aaa2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa34:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa48:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa4c:	7d 4e                	jge    c001aa9c <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa56:	01 d0                	add    eax,edx
c001aa58:	8a 00                	mov    al,BYTE PTR [eax]
c001aa5a:	0f b6 c0             	movzx  eax,al
c001aa5d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa69:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa6e:	7f 26                	jg     c001aa96 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa74:	83 e0 01             	and    eax,0x1
c001aa77:	74 0d                	je     c001aa86 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa7d:	d1 e8                	shr    eax,1
c001aa7f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa84:	eb 06                	jmp    c001aa8c <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa8a:	d1 e8                	shr    eax,1
c001aa8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa94:	eb d3                	jmp    c001aa69 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa96:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa9a:	eb a8                	jmp    c001aa44 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa0:	f7 d0                	not    eax
c001aaa2:	83 c4 10             	add    esp,0x10
c001aaa5:	c3                   	ret    

c001aaa6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aaa6:	83 ec 1c             	sub    esp,0x1c
c001aaa9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aab1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aab9:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aabe:	7f 14                	jg     c001aad4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aac0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aac4:	8d 50 01             	lea    edx,[eax+0x1]
c001aac7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aacb:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aace:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aad2:	eb e5                	jmp    c001aab9 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aad4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aad8:	8d 50 01             	lea    edx,[eax+0x1]
c001aadb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aadf:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aae2:	83 ec 04             	sub    esp,0x4
c001aae5:	6a 06                	push   0x6
c001aae7:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aaeb:	50                   	push   eax
c001aaec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aaf0:	e8 4f 5c fe ff       	call   c0000744 <memcpy>
c001aaf5:	83 c4 10             	add    esp,0x10
c001aaf8:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aafd:	83 ec 04             	sub    esp,0x4
c001ab00:	6a 06                	push   0x6
c001ab02:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab06:	50                   	push   eax
c001ab07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab0b:	e8 34 5c fe ff       	call   c0000744 <memcpy>
c001ab10:	83 c4 10             	add    esp,0x10
c001ab13:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab1c:	0f b7 c0             	movzx  eax,ax
c001ab1f:	c1 f8 08             	sar    eax,0x8
c001ab22:	89 c1                	mov    ecx,eax
c001ab24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab28:	8d 50 01             	lea    edx,[eax+0x1]
c001ab2b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab2f:	88 ca                	mov    dl,cl
c001ab31:	88 10                	mov    BYTE PTR [eax],dl
c001ab33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab3b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab3e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab42:	88 10                	mov    BYTE PTR [eax],dl
c001ab44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab4c:	83 ec 04             	sub    esp,0x4
c001ab4f:	52                   	push   edx
c001ab50:	50                   	push   eax
c001ab51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab55:	e8 ea 5b fe ff       	call   c0000744 <memcpy>
c001ab5a:	83 c4 10             	add    esp,0x10
c001ab5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab61:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab69:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab6d:	83 ec 08             	sub    esp,0x8
c001ab70:	50                   	push   eax
c001ab71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab75:	e8 9b fe ff ff       	call   c001aa15 <Net::crc32Calc(unsigned char*, int)>
c001ab7a:	83 c4 10             	add    esp,0x10
c001ab7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab85:	c1 e8 18             	shr    eax,0x18
c001ab88:	89 c1                	mov    ecx,eax
c001ab8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab8e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab91:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab95:	88 ca                	mov    dl,cl
c001ab97:	88 10                	mov    BYTE PTR [eax],dl
c001ab99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab9d:	c1 e8 10             	shr    eax,0x10
c001aba0:	89 c1                	mov    ecx,eax
c001aba2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba6:	8d 50 01             	lea    edx,[eax+0x1]
c001aba9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abad:	88 ca                	mov    dl,cl
c001abaf:	88 10                	mov    BYTE PTR [eax],dl
c001abb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb5:	c1 e8 08             	shr    eax,0x8
c001abb8:	89 c1                	mov    ecx,eax
c001abba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abbe:	8d 50 01             	lea    edx,[eax+0x1]
c001abc1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abc5:	88 ca                	mov    dl,cl
c001abc7:	88 10                	mov    BYTE PTR [eax],dl
c001abc9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abcd:	8d 50 01             	lea    edx,[eax+0x1]
c001abd0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abd8:	88 10                	mov    BYTE PTR [eax],dl
c001abda:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abde:	83 c4 1c             	add    esp,0x1c
c001abe1:	c3                   	ret    

c001abe2 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abe2:	83 ec 2c             	sub    esp,0x2c
c001abe5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abe9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abed:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abf2:	83 ec 04             	sub    esp,0x4
c001abf5:	6a 06                	push   0x6
c001abf7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abff:	83 c0 0e             	add    eax,0xe
c001ac02:	50                   	push   eax
c001ac03:	e8 3c 5b fe ff       	call   c0000744 <memcpy>
c001ac08:	83 c4 10             	add    esp,0x10
c001ac0b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac10:	83 ec 04             	sub    esp,0x4
c001ac13:	6a 06                	push   0x6
c001ac15:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac19:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac1d:	83 c0 08             	add    eax,0x8
c001ac20:	50                   	push   eax
c001ac21:	e8 1e 5b fe ff       	call   c0000744 <memcpy>
c001ac26:	83 c4 10             	add    esp,0x10
c001ac29:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac32:	8d 50 01             	lea    edx,[eax+0x1]
c001ac35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac39:	8a 00                	mov    al,BYTE PTR [eax]
c001ac3b:	0f b6 c0             	movzx  eax,al
c001ac3e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac47:	8d 50 01             	lea    edx,[eax+0x1]
c001ac4a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac4e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac50:	0f b6 c0             	movzx  eax,al
c001ac53:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac58:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac5d:	c1 e0 08             	shl    eax,0x8
c001ac60:	89 c2                	mov    edx,eax
c001ac62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac66:	09 d0                	or     eax,edx
c001ac68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac6c:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac70:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac75:	75 3a                	jne    c001acb1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac7b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac7e:	66 3d dc 05          	cmp    ax,0x5dc
c001ac82:	77 10                	ja     c001ac94 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac8b:	0f b7 c0             	movzx  eax,ax
c001ac8e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac92:	eb 1d                	jmp    c001acb1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac94:	83 ec 0c             	sub    esp,0xc
c001ac97:	68 84 be 02 c0       	push   0xc002be84
c001ac9c:	e8 dc 82 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aca8:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001acac:	e9 c0 00 00 00       	jmp    c001ad71 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001acb1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001acb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acb9:	8b 00                	mov    eax,DWORD PTR [eax]
c001acbb:	83 ec 04             	sub    esp,0x4
c001acbe:	52                   	push   edx
c001acbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acc3:	50                   	push   eax
c001acc4:	e8 7b 5a fe ff       	call   c0000744 <memcpy>
c001acc9:	83 c4 10             	add    esp,0x10
c001accc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acd0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acd8:	8d 50 01             	lea    edx,[eax+0x1]
c001acdb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acdf:	8a 00                	mov    al,BYTE PTR [eax]
c001ace1:	0f b6 c0             	movzx  eax,al
c001ace4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ace8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acec:	8d 50 01             	lea    edx,[eax+0x1]
c001acef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acf3:	8a 00                	mov    al,BYTE PTR [eax]
c001acf5:	0f b6 c0             	movzx  eax,al
c001acf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad00:	8d 50 01             	lea    edx,[eax+0x1]
c001ad03:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad07:	8a 00                	mov    al,BYTE PTR [eax]
c001ad09:	0f b6 c0             	movzx  eax,al
c001ad0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad14:	8d 50 01             	lea    edx,[eax+0x1]
c001ad17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad1b:	8a 00                	mov    al,BYTE PTR [eax]
c001ad1d:	0f b6 c0             	movzx  eax,al
c001ad20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad28:	c1 e0 18             	shl    eax,0x18
c001ad2b:	89 c2                	mov    edx,eax
c001ad2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad31:	c1 e0 10             	shl    eax,0x10
c001ad34:	09 c2                	or     edx,eax
c001ad36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad3a:	c1 e0 08             	shl    eax,0x8
c001ad3d:	09 d0                	or     eax,edx
c001ad3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad4b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad4f:	83 e8 04             	sub    eax,0x4
c001ad52:	83 ec 08             	sub    esp,0x8
c001ad55:	50                   	push   eax
c001ad56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad5a:	e8 b6 fc ff ff       	call   c001aa15 <Net::crc32Calc(unsigned char*, int)>
c001ad5f:	83 c4 10             	add    esp,0x10
c001ad62:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad66:	0f 94 c2             	sete   dl
c001ad69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad6d:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad70:	90                   	nop
c001ad71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad75:	83 c4 2c             	add    esp,0x2c
c001ad78:	c2 04 00             	ret    0x4

c001ad7b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad7b:	55                   	push   ebp
c001ad7c:	57                   	push   edi
c001ad7d:	56                   	push   esi
c001ad7e:	53                   	push   ebx
c001ad7f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad85:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad8c:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad8e:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad91:	80 fb 40             	cmp    bl,0x40
c001ad94:	75 1b                	jne    c001adb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad96:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad98:	84 d2                	test   dl,dl
c001ad9a:	0f 84 f1 00 00 00    	je     c001ae91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ada0:	8d 46 01             	lea    eax,[esi+0x1]
c001ada3:	80 fa 3a             	cmp    dl,0x3a
c001ada6:	74 04                	je     c001adac <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ada8:	89 c6                	mov    esi,eax
c001adaa:	eb ea                	jmp    c001ad96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001adac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001adaf:	89 c6                	mov    esi,eax
c001adb1:	50                   	push   eax
c001adb2:	6a 40                	push   0x40
c001adb4:	6a 00                	push   0x0
c001adb6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adba:	50                   	push   eax
c001adbb:	e8 b8 59 fe ff       	call   c0000778 <memset>
c001adc0:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001adc7:	31 c0                	xor    eax,eax
c001adc9:	83 c4 10             	add    esp,0x10
c001adcc:	8a 0f                	mov    cl,BYTE PTR [edi]
c001adce:	84 c9                	test   cl,cl
c001add0:	0f 84 bb 00 00 00    	je     c001ae91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001add6:	3d c7 00 00 00       	cmp    eax,0xc7
c001addb:	0f 8f b0 00 00 00    	jg     c001ae91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ade1:	80 f9 0a             	cmp    cl,0xa
c001ade4:	0f 85 98 00 00 00    	jne    c001ae82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001adea:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001adef:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001adf3:	a8 df                	test   al,0xdf
c001adf5:	0f 94 c1             	sete   cl
c001adf8:	3c 23                	cmp    al,0x23
c001adfa:	0f 94 c2             	sete   dl
c001adfd:	08 d1                	or     cl,dl
c001adff:	75 4a                	jne    c001ae4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae01:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae04:	80 fa 01             	cmp    dl,0x1
c001ae07:	76 42                	jbe    c001ae4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae09:	3c 5b                	cmp    al,0x5b
c001ae0b:	75 42                	jne    c001ae4f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae0d:	80 fb 40             	cmp    bl,0x40
c001ae10:	75 39                	jne    c001ae4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae12:	83 ec 0c             	sub    esp,0xc
c001ae15:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae19:	52                   	push   edx
c001ae1a:	e8 75 59 fe ff       	call   c0000794 <strlen>
c001ae1f:	83 c4 10             	add    esp,0x10
c001ae22:	83 f8 3f             	cmp    eax,0x3f
c001ae25:	77 6a                	ja     c001ae91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae27:	50                   	push   eax
c001ae28:	50                   	push   eax
c001ae29:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae2d:	52                   	push   edx
c001ae2e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae32:	52                   	push   edx
c001ae33:	e8 fc 59 fe ff       	call   c0000834 <strcpy>
c001ae38:	58                   	pop    eax
c001ae39:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae3d:	52                   	push   edx
c001ae3e:	e8 51 59 fe ff       	call   c0000794 <strlen>
c001ae43:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae48:	83 c4 10             	add    esp,0x10
c001ae4b:	31 d2                	xor    edx,edx
c001ae4d:	eb 3a                	jmp    c001ae89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae4f:	80 fb 40             	cmp    bl,0x40
c001ae52:	74 06                	je     c001ae5a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae54:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae58:	eb 20                	jmp    c001ae7a <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae5a:	50                   	push   eax
c001ae5b:	50                   	push   eax
c001ae5c:	55                   	push   ebp
c001ae5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae61:	50                   	push   eax
c001ae62:	e8 59 5a fe ff       	call   c00008c0 <strcmp>
c001ae67:	83 c4 10             	add    esp,0x10
c001ae6a:	85 c0                	test   eax,eax
c001ae6c:	75 dd                	jne    c001ae4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae6e:	eb e4                	jmp    c001ae54 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae70:	8d 50 01             	lea    edx,[eax+0x1]
c001ae73:	80 f9 3d             	cmp    cl,0x3d
c001ae76:	74 1d                	je     c001ae95 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae78:	89 d0                	mov    eax,edx
c001ae7a:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae7c:	84 c9                	test   cl,cl
c001ae7e:	75 f0                	jne    c001ae70 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae80:	eb 0f                	jmp    c001ae91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae82:	8d 50 01             	lea    edx,[eax+0x1]
c001ae85:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae89:	47                   	inc    edi
c001ae8a:	89 d0                	mov    eax,edx
c001ae8c:	e9 3b ff ff ff       	jmp    c001adcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae91:	31 c0                	xor    eax,eax
c001ae93:	eb 33                	jmp    c001aec8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae99:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae9c:	50                   	push   eax
c001ae9d:	50                   	push   eax
c001ae9e:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aea2:	50                   	push   eax
c001aea3:	56                   	push   esi
c001aea4:	e8 17 5a fe ff       	call   c00008c0 <strcmp>
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	85 c0                	test   eax,eax
c001aeae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aeb2:	75 97                	jne    c001ae4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeb4:	51                   	push   ecx
c001aeb5:	51                   	push   ecx
c001aeb6:	52                   	push   edx
c001aeb7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aebe:	e8 71 59 fe ff       	call   c0000834 <strcpy>
c001aec3:	83 c4 10             	add    esp,0x10
c001aec6:	b0 01                	mov    al,0x1
c001aec8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aece:	5b                   	pop    ebx
c001aecf:	5e                   	pop    esi
c001aed0:	5f                   	pop    edi
c001aed1:	5d                   	pop    ebp
c001aed2:	c3                   	ret    

c001aed3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aed3:	57                   	push   edi
c001aed4:	56                   	push   esi
c001aed5:	53                   	push   ebx
c001aed6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aedc:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aee3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aeea:	53                   	push   ebx
c001aeeb:	e8 a4 58 fe ff       	call   c0000794 <strlen>
c001aef0:	89 34 24             	mov    DWORD PTR [esp],esi
c001aef3:	89 c7                	mov    edi,eax
c001aef5:	e8 9a 58 fe ff       	call   c0000794 <strlen>
c001aefa:	83 c4 10             	add    esp,0x10
c001aefd:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af01:	3d ff 00 00 00       	cmp    eax,0xff
c001af06:	0f 87 d3 00 00 00    	ja     c001afdf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af0c:	57                   	push   edi
c001af0d:	57                   	push   edi
c001af0e:	56                   	push   esi
c001af0f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af13:	56                   	push   esi
c001af14:	e8 1b 59 fe ff       	call   c0000834 <strcpy>
c001af19:	58                   	pop    eax
c001af1a:	5a                   	pop    edx
c001af1b:	68 4d c4 02 c0       	push   0xc002c44d
c001af20:	56                   	push   esi
c001af21:	e8 4e 5a fe ff       	call   c0000974 <strcat>
c001af26:	59                   	pop    ecx
c001af27:	5f                   	pop    edi
c001af28:	53                   	push   ebx
c001af29:	56                   	push   esi
c001af2a:	e8 45 5a fe ff       	call   c0000974 <strcat>
c001af2f:	58                   	pop    eax
c001af30:	5a                   	pop    edx
c001af31:	68 d0 be 02 c0       	push   0xc002bed0
c001af36:	56                   	push   esi
c001af37:	e8 38 5a fe ff       	call   c0000974 <strcat>
c001af3c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af43:	e8 f8 48 ff ff       	call   c000f840 <malloc>
c001af48:	83 c4 0c             	add    esp,0xc
c001af4b:	89 c3                	mov    ebx,eax
c001af4d:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c001af53:	56                   	push   esi
c001af54:	50                   	push   eax
c001af55:	e8 7c 85 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001af5a:	83 c4 10             	add    esp,0x10
c001af5d:	85 db                	test   ebx,ebx
c001af5f:	74 7e                	je     c001afdf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af61:	51                   	push   ecx
c001af62:	51                   	push   ecx
c001af63:	6a 01                	push   0x1
c001af65:	53                   	push   ebx
c001af66:	e8 cf 85 ff ff       	call   c001353a <File::open(FileOpenMode)>
c001af6b:	83 c4 10             	add    esp,0x10
c001af6e:	85 c0                	test   eax,eax
c001af70:	74 08                	je     c001af7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af72:	83 ec 0c             	sub    esp,0xc
c001af75:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af77:	53                   	push   ebx
c001af78:	eb 5f                	jmp    c001afd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af7a:	52                   	push   edx
c001af7b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af7f:	50                   	push   eax
c001af80:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af84:	50                   	push   eax
c001af85:	53                   	push   ebx
c001af86:	e8 5b 88 ff ff       	call   c00137e6 <File::stat(unsigned long long*, bool*)>
c001af8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af8f:	83 c4 10             	add    esp,0x10
c001af92:	89 c1                	mov    ecx,eax
c001af94:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af98:	74 31                	je     c001afcb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af9a:	83 ec 0c             	sub    esp,0xc
c001af9d:	50                   	push   eax
c001af9e:	e8 9d 48 ff ff       	call   c000f840 <malloc>
c001afa3:	89 c6                	mov    esi,eax
c001afa5:	58                   	pop    eax
c001afa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afa8:	8d 54 24 20          	lea    edx,[esp+0x20]
c001afac:	52                   	push   edx
c001afad:	56                   	push   esi
c001afae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afb6:	53                   	push   ebx
c001afb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afba:	83 c4 20             	add    esp,0x20
c001afbd:	85 c0                	test   eax,eax
c001afbf:	75 0a                	jne    c001afcb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afc5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afc9:	74 18                	je     c001afe3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001afcb:	83 ec 0c             	sub    esp,0xc
c001afce:	53                   	push   ebx
c001afcf:	e8 c4 85 ff ff       	call   c0013598 <File::close()>
c001afd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afd9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afdc:	83 c4 10             	add    esp,0x10
c001afdf:	31 c0                	xor    eax,eax
c001afe1:	eb 3b                	jmp    c001b01e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afe3:	83 ec 0c             	sub    esp,0xc
c001afe6:	53                   	push   ebx
c001afe7:	e8 ac 85 ff ff       	call   c0013598 <File::close()>
c001afec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aff1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aff4:	83 c4 0c             	add    esp,0xc
c001aff7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001affe:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b005:	56                   	push   esi
c001b006:	e8 70 fd ff ff       	call   c001ad7b <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b00b:	89 34 24             	mov    DWORD PTR [esp],esi
c001b00e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b012:	e8 39 48 ff ff       	call   c000f850 <free>
c001b017:	83 c4 10             	add    esp,0x10
c001b01a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b01e:	81 c4 20 01 00 00    	add    esp,0x120
c001b024:	5b                   	pop    ebx
c001b025:	5e                   	pop    esi
c001b026:	5f                   	pop    edi
c001b027:	c3                   	ret    

c001b028 <Reg::getLine(char*, char*, char*)>:
c001b028:	57                   	push   edi
c001b029:	56                   	push   esi
c001b02a:	53                   	push   ebx
c001b02b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b02f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b033:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b037:	57                   	push   edi
c001b038:	56                   	push   esi
c001b039:	53                   	push   ebx
c001b03a:	68 d5 be 02 c0       	push   0xc002bed5
c001b03f:	e8 8f fe ff ff       	call   c001aed3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b044:	83 c4 10             	add    esp,0x10
c001b047:	84 c0                	test   al,al
c001b049:	75 10                	jne    c001b05b <Reg::getLine(char*, char*, char*)+0x33>
c001b04b:	57                   	push   edi
c001b04c:	56                   	push   esi
c001b04d:	53                   	push   ebx
c001b04e:	68 fa be 02 c0       	push   0xc002befa
c001b053:	e8 7b fe ff ff       	call   c001aed3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b058:	83 c4 10             	add    esp,0x10
c001b05b:	5b                   	pop    ebx
c001b05c:	5e                   	pop    esi
c001b05d:	5f                   	pop    edi
c001b05e:	c3                   	ret    

c001b05f <Reg::readInt(char*, char*, int*)>:
c001b05f:	55                   	push   ebp
c001b060:	57                   	push   edi
c001b061:	56                   	push   esi
c001b062:	53                   	push   ebx
c001b063:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b069:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b06d:	57                   	push   edi
c001b06e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b075:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b07c:	e8 a7 ff ff ff       	call   c001b028 <Reg::getLine(char*, char*, char*)>
c001b081:	83 c4 10             	add    esp,0x10
c001b084:	84 c0                	test   al,al
c001b086:	0f 84 b3 00 00 00    	je     c001b13f <Reg::readInt(char*, char*, int*)+0xe0>
c001b08c:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b090:	80 fa 2b             	cmp    dl,0x2b
c001b093:	74 0c                	je     c001b0a1 <Reg::readInt(char*, char*, int*)+0x42>
c001b095:	80 fa 2d             	cmp    dl,0x2d
c001b098:	75 0e                	jne    c001b0a8 <Reg::readInt(char*, char*, int*)+0x49>
c001b09a:	ba 01 00 00 00       	mov    edx,0x1
c001b09f:	eb 0b                	jmp    c001b0ac <Reg::readInt(char*, char*, int*)+0x4d>
c001b0a1:	ba 01 00 00 00       	mov    edx,0x1
c001b0a6:	eb 02                	jmp    c001b0aa <Reg::readInt(char*, char*, int*)+0x4b>
c001b0a8:	31 d2                	xor    edx,edx
c001b0aa:	31 c0                	xor    eax,eax
c001b0ac:	be 0a 00 00 00       	mov    esi,0xa
c001b0b1:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0b6:	75 20                	jne    c001b0d8 <Reg::readInt(char*, char*, int*)+0x79>
c001b0b8:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b0bc:	80 f9 78             	cmp    cl,0x78
c001b0bf:	75 0a                	jne    c001b0cb <Reg::readInt(char*, char*, int*)+0x6c>
c001b0c1:	83 c2 02             	add    edx,0x2
c001b0c4:	be 10 00 00 00       	mov    esi,0x10
c001b0c9:	eb 0d                	jmp    c001b0d8 <Reg::readInt(char*, char*, int*)+0x79>
c001b0cb:	80 f9 62             	cmp    cl,0x62
c001b0ce:	75 08                	jne    c001b0d8 <Reg::readInt(char*, char*, int*)+0x79>
c001b0d0:	83 c2 02             	add    edx,0x2
c001b0d3:	be 02 00 00 00       	mov    esi,0x2
c001b0d8:	01 d7                	add    edi,edx
c001b0da:	31 d2                	xor    edx,edx
c001b0dc:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0de:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0e2:	80 fb 0d             	cmp    bl,0xd
c001b0e5:	0f 94 c3             	sete   bl
c001b0e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0ed:	0f 94 c1             	sete   cl
c001b0f0:	08 cb                	or     bl,cl
c001b0f2:	75 3a                	jne    c001b12e <Reg::readInt(char*, char*, int*)+0xcf>
c001b0f4:	0f af d6             	imul   edx,esi
c001b0f7:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0fc:	83 fe 10             	cmp    esi,0x10
c001b0ff:	75 26                	jne    c001b127 <Reg::readInt(char*, char*, int*)+0xc8>
c001b101:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b105:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b108:	89 e9                	mov    ecx,ebp
c001b10a:	80 f9 05             	cmp    cl,0x5
c001b10d:	77 06                	ja     c001b115 <Reg::readInt(char*, char*, int*)+0xb6>
c001b10f:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b113:	eb 16                	jmp    c001b12b <Reg::readInt(char*, char*, int*)+0xcc>
c001b115:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b119:	83 e9 61             	sub    ecx,0x61
c001b11c:	80 f9 05             	cmp    cl,0x5
c001b11f:	77 06                	ja     c001b127 <Reg::readInt(char*, char*, int*)+0xc8>
c001b121:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b125:	eb 04                	jmp    c001b12b <Reg::readInt(char*, char*, int*)+0xcc>
c001b127:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b12b:	47                   	inc    edi
c001b12c:	eb ae                	jmp    c001b0dc <Reg::readInt(char*, char*, int*)+0x7d>
c001b12e:	84 c0                	test   al,al
c001b130:	74 02                	je     c001b134 <Reg::readInt(char*, char*, int*)+0xd5>
c001b132:	f7 da                	neg    edx
c001b134:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b13b:	89 10                	mov    DWORD PTR [eax],edx
c001b13d:	88 d8                	mov    al,bl
c001b13f:	81 c4 ec 00 00 00    	add    esp,0xec
c001b145:	5b                   	pop    ebx
c001b146:	5e                   	pop    esi
c001b147:	5f                   	pop    edi
c001b148:	5d                   	pop    ebp
c001b149:	c3                   	ret    

c001b14a <Reg::readString(char*, char*, char*, int)>:
c001b14a:	57                   	push   edi
c001b14b:	56                   	push   esi
c001b14c:	53                   	push   ebx
c001b14d:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b153:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b15a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b15e:	57                   	push   edi
c001b15f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b166:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b16d:	e8 b6 fe ff ff       	call   c001b028 <Reg::getLine(char*, char*, char*)>
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	89 c6                	mov    esi,eax
c001b177:	84 c0                	test   al,al
c001b179:	74 44                	je     c001b1bf <Reg::readString(char*, char*, char*, int)+0x75>
c001b17b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b182:	31 c0                	xor    eax,eax
c001b184:	4a                   	dec    edx
c001b185:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b188:	84 c9                	test   cl,cl
c001b18a:	74 0f                	je     c001b19b <Reg::readString(char*, char*, char*, int)+0x51>
c001b18c:	39 c2                	cmp    edx,eax
c001b18e:	7e 0b                	jle    c001b19b <Reg::readString(char*, char*, char*, int)+0x51>
c001b190:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b193:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b198:	40                   	inc    eax
c001b199:	eb ea                	jmp    c001b185 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b19b:	83 ec 0c             	sub    esp,0xc
c001b19e:	53                   	push   ebx
c001b19f:	e8 f0 55 fe ff       	call   c0000794 <strlen>
c001b1a4:	83 c4 10             	add    esp,0x10
c001b1a7:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1ac:	75 11                	jne    c001b1bf <Reg::readString(char*, char*, char*, int)+0x75>
c001b1ae:	83 ec 0c             	sub    esp,0xc
c001b1b1:	53                   	push   ebx
c001b1b2:	e8 dd 55 fe ff       	call   c0000794 <strlen>
c001b1b7:	83 c4 10             	add    esp,0x10
c001b1ba:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b1bf:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1c5:	89 f0                	mov    eax,esi
c001b1c7:	5b                   	pop    ebx
c001b1c8:	5e                   	pop    esi
c001b1c9:	5f                   	pop    edi
c001b1ca:	c3                   	ret    

c001b1cb <Reg::readBool(char*, char*, bool*)>:
c001b1cb:	83 ec 20             	sub    esp,0x20
c001b1ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1d2:	50                   	push   eax
c001b1d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1db:	e8 7f fe ff ff       	call   c001b05f <Reg::readInt(char*, char*, int*)>
c001b1e0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1e5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1e9:	0f 95 02             	setne  BYTE PTR [edx]
c001b1ec:	83 c4 2c             	add    esp,0x2c
c001b1ef:	c3                   	ret    

c001b1f0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1f0:	53                   	push   ebx
c001b1f1:	83 ec 1c             	sub    esp,0x1c
c001b1f4:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1f8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1fc:	50                   	push   eax
c001b1fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b201:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b205:	e8 c1 ff ff ff       	call   c001b1cb <Reg::readBool(char*, char*, bool*)>
c001b20a:	83 c4 10             	add    esp,0x10
c001b20d:	84 c0                	test   al,al
c001b20f:	74 04                	je     c001b215 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b211:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b215:	88 d8                	mov    al,bl
c001b217:	83 c4 18             	add    esp,0x18
c001b21a:	5b                   	pop    ebx
c001b21b:	c3                   	ret    

c001b21c <Reg::readIntWithDefault(char*, char*, int)>:
c001b21c:	53                   	push   ebx
c001b21d:	83 ec 1c             	sub    esp,0x1c
c001b220:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b224:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b228:	50                   	push   eax
c001b229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b22d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b231:	e8 29 fe ff ff       	call   c001b05f <Reg::readInt(char*, char*, int*)>
c001b236:	83 c4 10             	add    esp,0x10
c001b239:	84 c0                	test   al,al
c001b23b:	74 04                	je     c001b241 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b23d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b241:	89 d8                	mov    eax,ebx
c001b243:	83 c4 18             	add    esp,0x18
c001b246:	5b                   	pop    ebx
c001b247:	c3                   	ret    

c001b248 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b248:	57                   	push   edi
c001b249:	56                   	push   esi
c001b24a:	53                   	push   ebx
c001b24b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b24f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b253:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b257:	56                   	push   esi
c001b258:	53                   	push   ebx
c001b259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b261:	e8 e4 fe ff ff       	call   c001b14a <Reg::readString(char*, char*, char*, int)>
c001b266:	83 c4 10             	add    esp,0x10
c001b269:	84 c0                	test   al,al
c001b26b:	75 1b                	jne    c001b288 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b26d:	50                   	push   eax
c001b26e:	56                   	push   esi
c001b26f:	4e                   	dec    esi
c001b270:	6a 00                	push   0x0
c001b272:	53                   	push   ebx
c001b273:	e8 00 55 fe ff       	call   c0000778 <memset>
c001b278:	83 c4 0c             	add    esp,0xc
c001b27b:	56                   	push   esi
c001b27c:	57                   	push   edi
c001b27d:	53                   	push   ebx
c001b27e:	89 fb                	mov    ebx,edi
c001b280:	e8 bf 54 fe ff       	call   c0000744 <memcpy>
c001b285:	83 c4 10             	add    esp,0x10
c001b288:	89 d8                	mov    eax,ebx
c001b28a:	5b                   	pop    ebx
c001b28b:	5e                   	pop    esi
c001b28c:	5f                   	pop    edi
c001b28d:	c3                   	ret    

c001b28e <Sys::eject(regs*)>:
c001b28e:	83 ec 0c             	sub    esp,0xc
c001b291:	83 ca ff             	or     edx,0xffffffff
c001b294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b298:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b29b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2a0:	83 e9 41             	sub    ecx,0x41
c001b2a3:	83 f9 19             	cmp    ecx,0x19
c001b2a6:	77 18                	ja     c001b2c0 <Sys::eject(regs*)+0x32>
c001b2a8:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c001b2af:	85 c9                	test   ecx,ecx
c001b2b1:	74 0d                	je     c001b2c0 <Sys::eject(regs*)+0x32>
c001b2b3:	83 ec 0c             	sub    esp,0xc
c001b2b6:	51                   	push   ecx
c001b2b7:	e8 78 b4 ff ff       	call   c0016734 <LogicalDisk::eject()>
c001b2bc:	83 c4 10             	add    esp,0x10
c001b2bf:	99                   	cdq    
c001b2c0:	83 c4 0c             	add    esp,0xc
c001b2c3:	c3                   	ret    

c001b2c4 <Sys::exit(regs*)>:
c001b2c4:	83 ec 18             	sub    esp,0x18
c001b2c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2cb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2ce:	e8 c4 35 00 00       	call   c001e897 <terminateTask(int)>
c001b2d3:	83 c8 ff             	or     eax,0xffffffff
c001b2d6:	83 c4 1c             	add    esp,0x1c
c001b2d9:	89 c2                	mov    edx,eax
c001b2db:	c3                   	ret    

c001b2dc <Sys::getCwd(regs*)>:
c001b2dc:	83 ec 10             	sub    esp,0x10
c001b2df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2e3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2e6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ee:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2f1:	e8 e2 7f ff ff       	call   c00132d8 <Fs::getcwd(Process*, char*, int)>
c001b2f6:	83 c4 1c             	add    esp,0x1c
c001b2f9:	99                   	cdq    
c001b2fa:	c3                   	ret    

c001b2fb <Sys::getPID(regs*)>:
c001b2fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b300:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b303:	8b 00                	mov    eax,DWORD PTR [eax]
c001b305:	99                   	cdq    
c001b306:	c3                   	ret    

c001b307 <Sys::getRAMData(regs*)>:
c001b307:	8b 0d b0 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e6b0
c001b30d:	6b 05 ac e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e6ac,0x64
c001b314:	99                   	cdq    
c001b315:	f7 f9                	idiv   ecx
c001b317:	c1 e0 18             	shl    eax,0x18
c001b31a:	09 c8                	or     eax,ecx
c001b31c:	99                   	cdq    
c001b31d:	c3                   	ret    

c001b31e <Sys::loadDLL(regs*)>:
c001b31e:	56                   	push   esi
c001b31f:	53                   	push   ebx
c001b320:	31 d2                	xor    edx,edx
c001b322:	51                   	push   ecx
c001b323:	b8 01 00 00 00       	mov    eax,0x1
c001b328:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b32c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b330:	0f 84 8c 00 00 00    	je     c001b3c2 <Sys::loadDLL(regs*)+0xa4>
c001b336:	83 ec 0c             	sub    esp,0xc
c001b339:	68 14 01 00 00       	push   0x114
c001b33e:	e8 fd 44 ff ff       	call   c000f840 <malloc>
c001b343:	83 c4 0c             	add    esp,0xc
c001b346:	89 c3                	mov    ebx,eax
c001b348:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b34d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b350:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b353:	53                   	push   ebx
c001b354:	e8 7d 81 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001b359:	83 c4 10             	add    esp,0x10
c001b35c:	31 d2                	xor    edx,edx
c001b35e:	b8 02 00 00 00       	mov    eax,0x2
c001b363:	85 db                	test   ebx,ebx
c001b365:	74 5b                	je     c001b3c2 <Sys::loadDLL(regs*)+0xa4>
c001b367:	83 ec 0c             	sub    esp,0xc
c001b36a:	53                   	push   ebx
c001b36b:	e8 38 84 ff ff       	call   c00137a8 <File::exists()>
c001b370:	83 c4 10             	add    esp,0x10
c001b373:	84 c0                	test   al,al
c001b375:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b377:	75 11                	jne    c001b38a <Sys::loadDLL(regs*)+0x6c>
c001b379:	83 ec 0c             	sub    esp,0xc
c001b37c:	53                   	push   ebx
c001b37d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b380:	83 c4 10             	add    esp,0x10
c001b383:	b8 03 00 00 00       	mov    eax,0x3
c001b388:	eb 36                	jmp    c001b3c0 <Sys::loadDLL(regs*)+0xa2>
c001b38a:	83 ec 0c             	sub    esp,0xc
c001b38d:	53                   	push   ebx
c001b38e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b391:	58                   	pop    eax
c001b392:	5a                   	pop    edx
c001b393:	6a 00                	push   0x0
c001b395:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b398:	e8 0f 24 00 00       	call   c001d7ac <Thr::loadDLL(char const*, bool)>
c001b39d:	83 c4 10             	add    esp,0x10
c001b3a0:	89 c1                	mov    ecx,eax
c001b3a2:	31 d2                	xor    edx,edx
c001b3a4:	b8 04 00 00 00       	mov    eax,0x4
c001b3a9:	85 c9                	test   ecx,ecx
c001b3ab:	74 15                	je     c001b3c2 <Sys::loadDLL(regs*)+0xa4>
c001b3ad:	53                   	push   ebx
c001b3ae:	53                   	push   ebx
c001b3af:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c001b3b5:	51                   	push   ecx
c001b3b6:	e8 25 26 00 00       	call   c001d9e0 <Thr::executeDLL(unsigned long, void*)>
c001b3bb:	83 c4 10             	add    esp,0x10
c001b3be:	31 c0                	xor    eax,eax
c001b3c0:	31 d2                	xor    edx,edx
c001b3c2:	59                   	pop    ecx
c001b3c3:	5b                   	pop    ebx
c001b3c4:	5e                   	pop    esi
c001b3c5:	c3                   	ret    

c001b3c6 <Sys::read(regs*)>:
c001b3c6:	57                   	push   edi
c001b3c7:	56                   	push   esi
c001b3c8:	53                   	push   ebx
c001b3c9:	83 ec 10             	sub    esp,0x10
c001b3cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3d3:	83 f8 02             	cmp    eax,0x2
c001b3d6:	77 10                	ja     c001b3e8 <Sys::read(regs*)+0x22>
c001b3d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3e0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3e6:	eb 0e                	jmp    c001b3f6 <Sys::read(regs*)+0x30>
c001b3e8:	83 ec 0c             	sub    esp,0xc
c001b3eb:	50                   	push   eax
c001b3ec:	e8 50 66 ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001b3f1:	83 c4 10             	add    esp,0x10
c001b3f4:	89 c1                	mov    ecx,eax
c001b3f6:	83 c8 ff             	or     eax,0xffffffff
c001b3f9:	85 c9                	test   ecx,ecx
c001b3fb:	89 c2                	mov    edx,eax
c001b3fd:	74 28                	je     c001b427 <Sys::read(regs*)+0x61>
c001b3ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b407:	31 ff                	xor    edi,edi
c001b409:	83 ec 0c             	sub    esp,0xc
c001b40c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b40e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b412:	52                   	push   edx
c001b413:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b416:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b419:	57                   	push   edi
c001b41a:	56                   	push   esi
c001b41b:	51                   	push   ecx
c001b41c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b41f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b423:	83 c4 20             	add    esp,0x20
c001b426:	99                   	cdq    
c001b427:	83 c4 10             	add    esp,0x10
c001b42a:	5b                   	pop    ebx
c001b42b:	5e                   	pop    esi
c001b42c:	5f                   	pop    edi
c001b42d:	c3                   	ret    

c001b42e <Sys::sbrk(regs*)>:
c001b42e:	56                   	push   esi
c001b42f:	53                   	push   ebx
c001b430:	83 ec 0c             	sub    esp,0xc
c001b433:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b437:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b43c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b43f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b445:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b448:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b44b:	68 15 bf 02 c0       	push   0xc002bf15
c001b450:	e8 28 7b ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001b455:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b458:	83 c4 10             	add    esp,0x10
c001b45b:	85 c0                	test   eax,eax
c001b45d:	75 0a                	jne    c001b469 <Sys::sbrk(regs*)+0x3b>
c001b45f:	50                   	push   eax
c001b460:	50                   	push   eax
c001b461:	53                   	push   ebx
c001b462:	68 31 bf 02 c0       	push   0xc002bf31
c001b467:	eb 54                	jmp    c001b4bd <Sys::sbrk(regs*)+0x8f>
c001b469:	79 0a                	jns    c001b475 <Sys::sbrk(regs*)+0x47>
c001b46b:	56                   	push   esi
c001b46c:	56                   	push   esi
c001b46d:	53                   	push   ebx
c001b46e:	68 44 bf 02 c0       	push   0xc002bf44
c001b473:	eb 48                	jmp    c001b4bd <Sys::sbrk(regs*)+0x8f>
c001b475:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b47a:	76 17                	jbe    c001b493 <Sys::sbrk(regs*)+0x65>
c001b47c:	51                   	push   ecx
c001b47d:	51                   	push   ecx
c001b47e:	53                   	push   ebx
c001b47f:	68 56 bf 02 c0       	push   0xc002bf56
c001b484:	e8 f4 7a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001b489:	83 c8 ff             	or     eax,0xffffffff
c001b48c:	83 c4 10             	add    esp,0x10
c001b48f:	89 c2                	mov    edx,eax
c001b491:	eb 36                	jmp    c001b4c9 <Sys::sbrk(regs*)+0x9b>
c001b493:	05 ff 0f 00 00       	add    eax,0xfff
c001b498:	56                   	push   esi
c001b499:	c1 e8 0c             	shr    eax,0xc
c001b49c:	68 07 04 00 00       	push   0x407
c001b4a1:	50                   	push   eax
c001b4a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4aa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b4b0:	e8 b9 6f ff ff       	call   c001246e <VAS::allocatePages(int, int)>
c001b4b5:	58                   	pop    eax
c001b4b6:	5a                   	pop    edx
c001b4b7:	53                   	push   ebx
c001b4b8:	68 6f bf 02 c0       	push   0xc002bf6f
c001b4bd:	e8 bb 7a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001b4c2:	89 d8                	mov    eax,ebx
c001b4c4:	31 d2                	xor    edx,edx
c001b4c6:	83 c4 10             	add    esp,0x10
c001b4c9:	59                   	pop    ecx
c001b4ca:	5b                   	pop    ebx
c001b4cb:	5e                   	pop    esi
c001b4cc:	c3                   	ret    

c001b4cd <Sys::setCwd(regs*)>:
c001b4cd:	83 ec 14             	sub    esp,0x14
c001b4d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4d4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4dc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4df:	e8 63 83 ff ff       	call   c0013847 <Fs::setcwd(Process*, char*)>
c001b4e4:	83 c4 1c             	add    esp,0x1c
c001b4e7:	99                   	cdq    
c001b4e8:	c3                   	ret    

c001b4e9 <Sys::setTime(regs*)>:
c001b4e9:	55                   	push   ebp
c001b4ea:	31 d2                	xor    edx,edx
c001b4ec:	57                   	push   edi
c001b4ed:	bf 18 00 00 00       	mov    edi,0x18
c001b4f2:	56                   	push   esi
c001b4f3:	53                   	push   ebx
c001b4f4:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4f9:	83 ec 30             	sub    esp,0x30
c001b4fc:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b500:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b503:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b506:	f7 f3                	div    ebx
c001b508:	89 d6                	mov    esi,edx
c001b50a:	31 d2                	xor    edx,edx
c001b50c:	f7 f3                	div    ebx
c001b50e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b511:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b515:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b51a:	31 d2                	xor    edx,edx
c001b51c:	f7 f3                	div    ebx
c001b51e:	31 d2                	xor    edx,edx
c001b520:	bb 0c 00 00 00       	mov    ebx,0xc
c001b525:	f7 f7                	div    edi
c001b527:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b52a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b52e:	0f b7 cd             	movzx  ecx,bp
c001b531:	56                   	push   esi
c001b532:	89 c7                	mov    edi,eax
c001b534:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b538:	c1 e6 10             	shl    esi,0x10
c001b53b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b53f:	83 e7 1f             	and    edi,0x1f
c001b542:	51                   	push   ecx
c001b543:	47                   	inc    edi
c001b544:	c1 e8 05             	shr    eax,0x5
c001b547:	31 d2                	xor    edx,edx
c001b549:	f7 f3                	div    ebx
c001b54b:	31 db                	xor    ebx,ebx
c001b54d:	52                   	push   edx
c001b54e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b552:	57                   	push   edi
c001b553:	68 95 bf 02 c0       	push   0xc002bf95
c001b558:	e8 20 7a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001b55d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b561:	89 f8                	mov    eax,edi
c001b563:	31 c9                	xor    ecx,ecx
c001b565:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b569:	88 c1                	mov    cl,al
c001b56b:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b571:	88 d5                	mov    ch,dl
c001b573:	c1 e0 10             	shl    eax,0x10
c001b576:	0f b7 d1             	movzx  edx,cx
c001b579:	09 c2                	or     edx,eax
c001b57b:	89 d8                	mov    eax,ebx
c001b57d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b582:	09 f0                	or     eax,esi
c001b584:	89 c3                	mov    ebx,eax
c001b586:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b58a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b58e:	83 c4 18             	add    esp,0x18
c001b591:	53                   	push   ebx
c001b592:	52                   	push   edx
c001b593:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b597:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b59b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b59f:	e8 bd 89 ff ff       	call   c0013f61 <datetimeToSeconds(datetime_t)>
c001b5a4:	83 c4 0c             	add    esp,0xc
c001b5a7:	52                   	push   edx
c001b5a8:	50                   	push   eax
c001b5a9:	56                   	push   esi
c001b5aa:	e8 39 8b ff ff       	call   c00140e8 <secondsToDatetime(unsigned long long)>
c001b5af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5b7:	51                   	push   ecx
c001b5b8:	89 d6                	mov    esi,edx
c001b5ba:	51                   	push   ecx
c001b5bb:	c1 ee 10             	shr    esi,0x10
c001b5be:	89 f3                	mov    ebx,esi
c001b5c0:	0f b6 f3             	movzx  esi,bl
c001b5c3:	56                   	push   esi
c001b5c4:	0f b6 f6             	movzx  esi,dh
c001b5c7:	0f b6 d2             	movzx  edx,dl
c001b5ca:	56                   	push   esi
c001b5cb:	52                   	push   edx
c001b5cc:	89 c2                	mov    edx,eax
c001b5ce:	c1 ea 10             	shr    edx,0x10
c001b5d1:	52                   	push   edx
c001b5d2:	0f b6 d4             	movzx  edx,ah
c001b5d5:	0f b6 c0             	movzx  eax,al
c001b5d8:	52                   	push   edx
c001b5d9:	50                   	push   eax
c001b5da:	68 b1 bf 02 c0       	push   0xc002bfb1
c001b5df:	e8 99 79 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001b5e4:	83 c4 2c             	add    esp,0x2c
c001b5e7:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001b5ec:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5f0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5f4:	53                   	push   ebx
c001b5f5:	51                   	push   ecx
c001b5f6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5fc:	e8 87 8a ff ff       	call   c0014088 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b601:	83 f0 01             	xor    eax,0x1
c001b604:	31 d2                	xor    edx,edx
c001b606:	0f b6 c0             	movzx  eax,al
c001b609:	83 c4 3c             	add    esp,0x3c
c001b60c:	5b                   	pop    ebx
c001b60d:	5e                   	pop    esi
c001b60e:	5f                   	pop    edi
c001b60f:	5d                   	pop    ebp
c001b610:	c3                   	ret    

c001b611 <Sys::timezone(regs*)>:
c001b611:	53                   	push   ebx
c001b612:	83 ec 08             	sub    esp,0x8
c001b615:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b619:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b61d:	75 17                	jne    c001b636 <Sys::timezone(regs*)+0x25>
c001b61f:	83 ec 0c             	sub    esp,0xc
c001b622:	68 cd bf 02 c0       	push   0xc002bfcd
c001b627:	e8 51 79 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001b62c:	83 c8 ff             	or     eax,0xffffffff
c001b62f:	83 c4 10             	add    esp,0x10
c001b632:	89 c2                	mov    edx,eax
c001b634:	eb 20                	jmp    c001b656 <Sys::timezone(regs*)+0x45>
c001b636:	83 ec 0c             	sub    esp,0xc
c001b639:	68 05 c0 02 c0       	push   0xc002c005
c001b63e:	e8 3a 79 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001b643:	58                   	pop    eax
c001b644:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b647:	e8 9e 87 ff ff       	call   c0013dea <User::loadClockSettings(int)>
c001b64c:	83 c4 10             	add    esp,0x10
c001b64f:	b8 01 00 00 00       	mov    eax,0x1
c001b654:	31 d2                	xor    edx,edx
c001b656:	83 c4 08             	add    esp,0x8
c001b659:	5b                   	pop    ebx
c001b65a:	c3                   	ret    

c001b65b <Sys::write(regs*)>:
c001b65b:	57                   	push   edi
c001b65c:	56                   	push   esi
c001b65d:	53                   	push   ebx
c001b65e:	83 ec 10             	sub    esp,0x10
c001b661:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b665:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b668:	83 f8 02             	cmp    eax,0x2
c001b66b:	77 10                	ja     c001b67d <Sys::write(regs*)+0x22>
c001b66d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b672:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b675:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b67b:	eb 0e                	jmp    c001b68b <Sys::write(regs*)+0x30>
c001b67d:	83 ec 0c             	sub    esp,0xc
c001b680:	50                   	push   eax
c001b681:	e8 bb 63 ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001b686:	83 c4 10             	add    esp,0x10
c001b689:	89 c1                	mov    ecx,eax
c001b68b:	83 c8 ff             	or     eax,0xffffffff
c001b68e:	85 c9                	test   ecx,ecx
c001b690:	89 c2                	mov    edx,eax
c001b692:	74 28                	je     c001b6bc <Sys::write(regs*)+0x61>
c001b694:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b69c:	31 ff                	xor    edi,edi
c001b69e:	83 ec 0c             	sub    esp,0xc
c001b6a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6a3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6a7:	52                   	push   edx
c001b6a8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6ab:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6ae:	57                   	push   edi
c001b6af:	56                   	push   esi
c001b6b0:	51                   	push   ecx
c001b6b1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6b8:	83 c4 20             	add    esp,0x20
c001b6bb:	99                   	cdq    
c001b6bc:	83 c4 10             	add    esp,0x10
c001b6bf:	5b                   	pop    ebx
c001b6c0:	5e                   	pop    esi
c001b6c1:	5f                   	pop    edi
c001b6c2:	c3                   	ret    

c001b6c3 <Sys::wsbe(regs*)>:
c001b6c3:	57                   	push   edi
c001b6c4:	b9 0b 00 00 00       	mov    ecx,0xb
c001b6c9:	56                   	push   esi
c001b6ca:	be 44 c0 02 c0       	mov    esi,0xc002c044
c001b6cf:	53                   	push   ebx
c001b6d0:	83 ec 30             	sub    esp,0x30
c001b6d3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6d7:	fc                   	cld    
c001b6d8:	83 ec 0c             	sub    esp,0xc
c001b6db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6dd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6e9:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6ef:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6f1:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6f4:	57                   	push   edi
c001b6f5:	e8 9a 50 fe ff       	call   c0000794 <strlen>
c001b6fa:	5a                   	pop    edx
c001b6fb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6ff:	52                   	push   edx
c001b700:	31 d2                	xor    edx,edx
c001b702:	57                   	push   edi
c001b703:	52                   	push   edx
c001b704:	50                   	push   eax
c001b705:	56                   	push   esi
c001b706:	ff d3                	call   ebx
c001b708:	83 c4 14             	add    esp,0x14
c001b70b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b70f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b712:	e8 80 31 00 00       	call   c001e897 <terminateTask(int)>
c001b717:	83 c4 40             	add    esp,0x40
c001b71a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b71f:	5b                   	pop    ebx
c001b720:	31 d2                	xor    edx,edx
c001b722:	5e                   	pop    esi
c001b723:	5f                   	pop    edi
c001b724:	c3                   	ret    

c001b725 <Sys::yield(regs*)>:
c001b725:	57                   	push   edi
c001b726:	56                   	push   esi
c001b727:	53                   	push   ebx
c001b728:	e8 27 27 00 00       	call   c001de54 <lockScheduler()>
c001b72d:	e8 5e 2a 00 00       	call   c001e190 <schedule()>
c001b732:	e8 1f 27 00 00       	call   c001de56 <unlockScheduler()>
c001b737:	8b 35 f0 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ecf0
c001b73d:	8b 3d f4 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ecf4
c001b743:	89 f0                	mov    eax,esi
c001b745:	89 fb                	mov    ebx,edi
c001b747:	89 f1                	mov    ecx,esi
c001b749:	c1 e0 07             	shl    eax,0x7
c001b74c:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b750:	25 80 30 0f 00       	and    eax,0xf3080
c001b755:	c1 eb 17             	shr    ebx,0x17
c001b758:	31 c8                	xor    eax,ecx
c001b75a:	89 da                	mov    edx,ebx
c001b75c:	5b                   	pop    ebx
c001b75d:	5e                   	pop    esi
c001b75e:	5f                   	pop    edi
c001b75f:	c3                   	ret    

c001b760 <sysCallSeekDir(regs*)>:
c001b760:	31 c0                	xor    eax,eax
c001b762:	31 d2                	xor    edx,edx
c001b764:	c3                   	ret    

c001b765 <sysCallTellDir(regs*)>:
c001b765:	31 c0                	xor    eax,eax
c001b767:	31 d2                	xor    edx,edx
c001b769:	c3                   	ret    

c001b76a <sysCallVerify(regs*)>:
c001b76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b76e:	31 d2                	xor    edx,edx
c001b770:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b773:	c3                   	ret    

c001b774 <sysFormatDisk(regs*)>:
c001b774:	56                   	push   esi
c001b775:	53                   	push   ebx
c001b776:	53                   	push   ebx
c001b777:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b77b:	8b 1d ec e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7ec
c001b781:	eb 25                	jmp    c001b7a8 <sysFormatDisk(regs*)+0x34>
c001b783:	83 ec 0c             	sub    esp,0xc
c001b786:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b789:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b78b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b78e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b791:	50                   	push   eax
c001b792:	ff 34 85 80 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd1380]
c001b799:	53                   	push   ebx
c001b79a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b79d:	83 c4 20             	add    esp,0x20
c001b7a0:	83 f8 08             	cmp    eax,0x8
c001b7a3:	75 12                	jne    c001b7b7 <sysFormatDisk(regs*)+0x43>
c001b7a5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b7a8:	85 db                	test   ebx,ebx
c001b7aa:	75 d7                	jne    c001b783 <sysFormatDisk(regs*)+0xf>
c001b7ac:	59                   	pop    ecx
c001b7ad:	b8 03 00 00 00       	mov    eax,0x3
c001b7b2:	31 d2                	xor    edx,edx
c001b7b4:	5b                   	pop    ebx
c001b7b5:	5e                   	pop    esi
c001b7b6:	c3                   	ret    
c001b7b7:	85 c0                	test   eax,eax
c001b7b9:	74 1b                	je     c001b7d6 <sysFormatDisk(regs*)+0x62>
c001b7bb:	83 f8 09             	cmp    eax,0x9
c001b7be:	74 0b                	je     c001b7cb <sysFormatDisk(regs*)+0x57>
c001b7c0:	59                   	pop    ecx
c001b7c1:	b8 02 00 00 00       	mov    eax,0x2
c001b7c6:	31 d2                	xor    edx,edx
c001b7c8:	5b                   	pop    ebx
c001b7c9:	5e                   	pop    esi
c001b7ca:	c3                   	ret    
c001b7cb:	59                   	pop    ecx
c001b7cc:	b8 01 00 00 00       	mov    eax,0x1
c001b7d1:	31 d2                	xor    edx,edx
c001b7d3:	5b                   	pop    ebx
c001b7d4:	5e                   	pop    esi
c001b7d5:	c3                   	ret    
c001b7d6:	59                   	pop    ecx
c001b7d7:	31 c0                	xor    eax,eax
c001b7d9:	31 d2                	xor    edx,edx
c001b7db:	5b                   	pop    ebx
c001b7dc:	5e                   	pop    esi
c001b7dd:	c3                   	ret    

c001b7de <sysSetDiskVolumeLabel(regs*)>:
c001b7de:	56                   	push   esi
c001b7df:	53                   	push   ebx
c001b7e0:	53                   	push   ebx
c001b7e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7e5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7e8:	83 f8 19             	cmp    eax,0x19
c001b7eb:	77 29                	ja     c001b816 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7ed:	8b 0c 85 80 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1380]
c001b7f4:	85 c9                	test   ecx,ecx
c001b7f6:	74 1e                	je     c001b816 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7f8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7fb:	85 d2                	test   edx,edx
c001b7fd:	74 17                	je     c001b816 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7ff:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b805:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b807:	52                   	push   edx
c001b808:	50                   	push   eax
c001b809:	51                   	push   ecx
c001b80a:	53                   	push   ebx
c001b80b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b80e:	83 c4 10             	add    esp,0x10
c001b811:	99                   	cdq    
c001b812:	59                   	pop    ecx
c001b813:	5b                   	pop    ebx
c001b814:	5e                   	pop    esi
c001b815:	c3                   	ret    
c001b816:	59                   	pop    ecx
c001b817:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b81c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b821:	5b                   	pop    ebx
c001b822:	5e                   	pop    esi
c001b823:	c3                   	ret    

c001b824 <sysGetDiskVolumeLabel(regs*)>:
c001b824:	57                   	push   edi
c001b825:	56                   	push   esi
c001b826:	53                   	push   ebx
c001b827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b82b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b82e:	83 fa 19             	cmp    edx,0x19
c001b831:	77 34                	ja     c001b867 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b833:	8b 0c 95 80 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1380]
c001b83a:	85 c9                	test   ecx,ecx
c001b83c:	74 29                	je     c001b867 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b83e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b841:	85 db                	test   ebx,ebx
c001b843:	74 22                	je     c001b867 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b845:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b848:	85 c0                	test   eax,eax
c001b84a:	74 1b                	je     c001b867 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b84c:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b852:	83 ec 0c             	sub    esp,0xc
c001b855:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b857:	50                   	push   eax
c001b858:	53                   	push   ebx
c001b859:	52                   	push   edx
c001b85a:	51                   	push   ecx
c001b85b:	56                   	push   esi
c001b85c:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b85f:	83 c4 20             	add    esp,0x20
c001b862:	99                   	cdq    
c001b863:	5b                   	pop    ebx
c001b864:	5e                   	pop    esi
c001b865:	5f                   	pop    edi
c001b866:	c3                   	ret    
c001b867:	5b                   	pop    ebx
c001b868:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b86d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b872:	5e                   	pop    esi
c001b873:	5f                   	pop    edi
c001b874:	c3                   	ret    

c001b875 <sysShutdown(regs*)>:
c001b875:	83 ec 0c             	sub    esp,0xc
c001b878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b87c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b87f:	85 c0                	test   eax,eax
c001b881:	74 18                	je     c001b89b <sysShutdown(regs*)+0x26>
c001b883:	83 f8 01             	cmp    eax,0x1
c001b886:	74 38                	je     c001b8c0 <sysShutdown(regs*)+0x4b>
c001b888:	83 f8 02             	cmp    eax,0x2
c001b88b:	74 24                	je     c001b8b1 <sysShutdown(regs*)+0x3c>
c001b88d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b892:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b897:	83 c4 0c             	add    esp,0xc
c001b89a:	c3                   	ret    
c001b89b:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001b8a0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8a2:	6a 00                	push   0x0
c001b8a4:	6a 00                	push   0x0
c001b8a6:	6a 00                	push   0x0
c001b8a8:	50                   	push   eax
c001b8a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8ac:	83 c4 10             	add    esp,0x10
c001b8af:	eb dc                	jmp    c001b88d <sysShutdown(regs*)+0x18>
c001b8b1:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001b8b6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8b8:	6a 00                	push   0x0
c001b8ba:	6a 00                	push   0x0
c001b8bc:	6a 01                	push   0x1
c001b8be:	eb e8                	jmp    c001b8a8 <sysShutdown(regs*)+0x33>
c001b8c0:	a1 20 0d 03 c0       	mov    eax,ds:0xc0030d20
c001b8c5:	85 c0                	test   eax,eax
c001b8c7:	74 02                	je     c001b8cb <sysShutdown(regs*)+0x56>
c001b8c9:	ff d0                	call   eax
c001b8cb:	31 c0                	xor    eax,eax
c001b8cd:	31 d2                	xor    edx,edx
c001b8cf:	83 c4 0c             	add    esp,0xc
c001b8d2:	c3                   	ret    

c001b8d3 <sysCallRealpath(regs*)>:
c001b8d3:	83 ec 0c             	sub    esp,0xc
c001b8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8da:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8dd:	85 d2                	test   edx,edx
c001b8df:	74 07                	je     c001b8e8 <sysCallRealpath(regs*)+0x15>
c001b8e1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8e4:	85 c0                	test   eax,eax
c001b8e6:	75 0b                	jne    c001b8f3 <sysCallRealpath(regs*)+0x20>
c001b8e8:	b8 01 00 00 00       	mov    eax,0x1
c001b8ed:	31 d2                	xor    edx,edx
c001b8ef:	83 c4 0c             	add    esp,0xc
c001b8f2:	c3                   	ret    
c001b8f3:	51                   	push   ecx
c001b8f4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8fa:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8fd:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b903:	51                   	push   ecx
c001b904:	52                   	push   edx
c001b905:	50                   	push   eax
c001b906:	e8 21 7a ff ff       	call   c001332c <Fs::standardiseFiles(char*, char const*, char const*)>
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	31 c0                	xor    eax,eax
c001b910:	31 d2                	xor    edx,edx
c001b912:	83 c4 0c             	add    esp,0xc
c001b915:	c3                   	ret    

c001b916 <sysCallGetArgc(regs*)>:
c001b916:	83 ec 14             	sub    esp,0x14
c001b919:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b921:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b927:	68 70 c0 02 c0       	push   0xc002c070
c001b92c:	e8 4c 76 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001b931:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b936:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b939:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b93f:	83 c4 1c             	add    esp,0x1c
c001b942:	99                   	cdq    
c001b943:	c3                   	ret    

c001b944 <sysCallReadDir(regs*)>:
c001b944:	53                   	push   ebx
c001b945:	83 ec 18             	sub    esp,0x18
c001b948:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b94c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b94f:	83 f8 02             	cmp    eax,0x2
c001b952:	76 53                	jbe    c001b9a7 <sysCallReadDir(regs*)+0x63>
c001b954:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b957:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b95d:	77 4f                	ja     c001b9ae <sysCallReadDir(regs*)+0x6a>
c001b95f:	83 ec 0c             	sub    esp,0xc
c001b962:	50                   	push   eax
c001b963:	e8 d9 60 ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001b968:	83 c4 10             	add    esp,0x10
c001b96b:	85 c0                	test   eax,eax
c001b96d:	74 50                	je     c001b9bf <sysCallReadDir(regs*)+0x7b>
c001b96f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b977:	83 ec 0c             	sub    esp,0xc
c001b97a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b97c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b980:	51                   	push   ecx
c001b981:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b984:	6a 00                	push   0x0
c001b986:	68 10 01 00 00       	push   0x110
c001b98b:	50                   	push   eax
c001b98c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b98f:	83 c4 20             	add    esp,0x20
c001b992:	85 c0                	test   eax,eax
c001b994:	74 38                	je     c001b9ce <sysCallReadDir(regs*)+0x8a>
c001b996:	83 f8 07             	cmp    eax,0x7
c001b999:	74 0c                	je     c001b9a7 <sysCallReadDir(regs*)+0x63>
c001b99b:	b8 02 00 00 00       	mov    eax,0x2
c001b9a0:	31 d2                	xor    edx,edx
c001b9a2:	83 c4 18             	add    esp,0x18
c001b9a5:	5b                   	pop    ebx
c001b9a6:	c3                   	ret    
c001b9a7:	b8 01 00 00 00       	mov    eax,0x1
c001b9ac:	eb f2                	jmp    c001b9a0 <sysCallReadDir(regs*)+0x5c>
c001b9ae:	83 ec 08             	sub    esp,0x8
c001b9b1:	52                   	push   edx
c001b9b2:	68 88 c1 02 c0       	push   0xc002c188
c001b9b7:	e8 c1 75 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9c9:	83 c4 18             	add    esp,0x18
c001b9cc:	5b                   	pop    ebx
c001b9cd:	c3                   	ret    
c001b9ce:	31 c0                	xor    eax,eax
c001b9d0:	eb ce                	jmp    c001b9a0 <sysCallReadDir(regs*)+0x5c>

c001b9d2 <sysCallIsATTY(regs*)>:
c001b9d2:	83 ec 0c             	sub    esp,0xc
c001b9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9dc:	83 f8 02             	cmp    eax,0x2
c001b9df:	76 07                	jbe    c001b9e8 <sysCallIsATTY(regs*)+0x16>
c001b9e1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9e6:	75 26                	jne    c001ba0e <sysCallIsATTY(regs*)+0x3c>
c001b9e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9f0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9f6:	85 c0                	test   eax,eax
c001b9f8:	74 24                	je     c001ba1e <sysCallIsATTY(regs*)+0x4c>
c001b9fa:	83 ec 0c             	sub    esp,0xc
c001b9fd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9ff:	50                   	push   eax
c001ba00:	ff 12                	call   DWORD PTR [edx]
c001ba02:	31 d2                	xor    edx,edx
c001ba04:	0f b6 c0             	movzx  eax,al
c001ba07:	83 c4 10             	add    esp,0x10
c001ba0a:	83 c4 0c             	add    esp,0xc
c001ba0d:	c3                   	ret    
c001ba0e:	83 ec 0c             	sub    esp,0xc
c001ba11:	50                   	push   eax
c001ba12:	e8 2a 60 ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001ba17:	83 c4 10             	add    esp,0x10
c001ba1a:	85 c0                	test   eax,eax
c001ba1c:	75 dc                	jne    c001b9fa <sysCallIsATTY(regs*)+0x28>
c001ba1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba23:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba28:	83 c4 0c             	add    esp,0xc
c001ba2b:	c3                   	ret    

c001ba2c <sysCallSeek(regs*)>:
c001ba2c:	53                   	push   ebx
c001ba2d:	83 ec 08             	sub    esp,0x8
c001ba30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba37:	83 f8 02             	cmp    eax,0x2
c001ba3a:	76 4a                	jbe    c001ba86 <sysCallSeek(regs*)+0x5a>
c001ba3c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba41:	77 32                	ja     c001ba75 <sysCallSeek(regs*)+0x49>
c001ba43:	83 ec 0c             	sub    esp,0xc
c001ba46:	50                   	push   eax
c001ba47:	e8 f5 5f ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001ba4c:	83 c4 0c             	add    esp,0xc
c001ba4f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba52:	31 db                	xor    ebx,ebx
c001ba54:	53                   	push   ebx
c001ba55:	51                   	push   ecx
c001ba56:	50                   	push   eax
c001ba57:	e8 9c 7b ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001ba5c:	83 c4 10             	add    esp,0x10
c001ba5f:	85 c0                	test   eax,eax
c001ba61:	0f 95 c0             	setne  al
c001ba64:	31 d2                	xor    edx,edx
c001ba66:	0f b6 c0             	movzx  eax,al
c001ba69:	f7 d8                	neg    eax
c001ba6b:	83 d2 00             	adc    edx,0x0
c001ba6e:	83 c4 08             	add    esp,0x8
c001ba71:	f7 da                	neg    edx
c001ba73:	5b                   	pop    ebx
c001ba74:	c3                   	ret    
c001ba75:	83 ec 08             	sub    esp,0x8
c001ba78:	50                   	push   eax
c001ba79:	68 7b c0 02 c0       	push   0xc002c07b
c001ba7e:	e8 fa 74 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba90:	83 c4 08             	add    esp,0x8
c001ba93:	5b                   	pop    ebx
c001ba94:	c3                   	ret    

c001ba95 <sysCallTell(regs*)>:
c001ba95:	53                   	push   ebx
c001ba96:	83 ec 08             	sub    esp,0x8
c001ba99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba9d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baa0:	83 f8 02             	cmp    eax,0x2
c001baa3:	76 5e                	jbe    c001bb03 <sysCallTell(regs*)+0x6e>
c001baa5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baaa:	77 2d                	ja     c001bad9 <sysCallTell(regs*)+0x44>
c001baac:	83 ec 0c             	sub    esp,0xc
c001baaf:	50                   	push   eax
c001bab0:	e8 8c 5f ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001bab5:	5a                   	pop    edx
c001bab6:	59                   	pop    ecx
c001bab7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001baba:	50                   	push   eax
c001babb:	e8 8e 7b ff ff       	call   c001364e <File::tell(unsigned long long*)>
c001bac0:	83 c4 10             	add    esp,0x10
c001bac3:	85 c0                	test   eax,eax
c001bac5:	0f 95 c0             	setne  al
c001bac8:	31 d2                	xor    edx,edx
c001baca:	0f b6 c0             	movzx  eax,al
c001bacd:	f7 d8                	neg    eax
c001bacf:	83 d2 00             	adc    edx,0x0
c001bad2:	83 c4 08             	add    esp,0x8
c001bad5:	f7 da                	neg    edx
c001bad7:	5b                   	pop    ebx
c001bad8:	c3                   	ret    
c001bad9:	83 ec 08             	sub    esp,0x8
c001badc:	50                   	push   eax
c001badd:	68 95 c0 02 c0       	push   0xc002c095
c001bae2:	e8 96 74 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001bae7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001baea:	83 c4 10             	add    esp,0x10
c001baed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001baf3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bafa:	31 d2                	xor    edx,edx
c001bafc:	31 c0                	xor    eax,eax
c001bafe:	83 c4 08             	add    esp,0x8
c001bb01:	5b                   	pop    ebx
c001bb02:	c3                   	ret    
c001bb03:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb08:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb0d:	83 c4 08             	add    esp,0x8
c001bb10:	5b                   	pop    ebx
c001bb11:	c3                   	ret    

c001bb12 <sysCallSize(regs*)>:
c001bb12:	53                   	push   ebx
c001bb13:	83 ec 18             	sub    esp,0x18
c001bb16:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb1a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb1d:	83 f8 02             	cmp    eax,0x2
c001bb20:	76 64                	jbe    c001bb86 <sysCallSize(regs*)+0x74>
c001bb22:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb27:	77 33                	ja     c001bb5c <sysCallSize(regs*)+0x4a>
c001bb29:	83 ec 0c             	sub    esp,0xc
c001bb2c:	50                   	push   eax
c001bb2d:	e8 0f 5f ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001bb32:	83 c4 0c             	add    esp,0xc
c001bb35:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb39:	52                   	push   edx
c001bb3a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb3d:	50                   	push   eax
c001bb3e:	e8 a3 7c ff ff       	call   c00137e6 <File::stat(unsigned long long*, bool*)>
c001bb43:	83 c4 10             	add    esp,0x10
c001bb46:	85 c0                	test   eax,eax
c001bb48:	0f 95 c0             	setne  al
c001bb4b:	31 d2                	xor    edx,edx
c001bb4d:	0f b6 c0             	movzx  eax,al
c001bb50:	f7 d8                	neg    eax
c001bb52:	83 d2 00             	adc    edx,0x0
c001bb55:	83 c4 18             	add    esp,0x18
c001bb58:	f7 da                	neg    edx
c001bb5a:	5b                   	pop    ebx
c001bb5b:	c3                   	ret    
c001bb5c:	83 ec 08             	sub    esp,0x8
c001bb5f:	50                   	push   eax
c001bb60:	68 af c0 02 c0       	push   0xc002c0af
c001bb65:	e8 13 74 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001bb6a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb6d:	83 c4 10             	add    esp,0x10
c001bb70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb7d:	31 d2                	xor    edx,edx
c001bb7f:	31 c0                	xor    eax,eax
c001bb81:	83 c4 18             	add    esp,0x18
c001bb84:	5b                   	pop    ebx
c001bb85:	c3                   	ret    
c001bb86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb8b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb90:	83 c4 18             	add    esp,0x18
c001bb93:	5b                   	pop    ebx
c001bb94:	c3                   	ret    

c001bb95 <sysCallSizeFromFilename(regs*)>:
c001bb95:	57                   	push   edi
c001bb96:	56                   	push   esi
c001bb97:	53                   	push   ebx
c001bb98:	83 ec 20             	sub    esp,0x20
c001bb9b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb9f:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bba2:	83 fb 02             	cmp    ebx,0x2
c001bba5:	0f 86 99 00 00 00    	jbe    c001bc44 <sysCallSizeFromFilename(regs*)+0xaf>
c001bbab:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bbb1:	77 65                	ja     c001bc18 <sysCallSizeFromFilename(regs*)+0x83>
c001bbb3:	83 ec 0c             	sub    esp,0xc
c001bbb6:	68 14 01 00 00       	push   0x114
c001bbbb:	e8 80 3c ff ff       	call   c000f840 <malloc>
c001bbc0:	83 c4 0c             	add    esp,0xc
c001bbc3:	89 c6                	mov    esi,eax
c001bbc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbca:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbcd:	53                   	push   ebx
c001bbce:	56                   	push   esi
c001bbcf:	e8 02 79 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001bbd4:	83 c4 0c             	add    esp,0xc
c001bbd7:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbdb:	50                   	push   eax
c001bbdc:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbdf:	56                   	push   esi
c001bbe0:	e8 01 7c ff ff       	call   c00137e6 <File::stat(unsigned long long*, bool*)>
c001bbe5:	83 c4 10             	add    esp,0x10
c001bbe8:	85 f6                	test   esi,esi
c001bbea:	74 14                	je     c001bc00 <sysCallSizeFromFilename(regs*)+0x6b>
c001bbec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbf0:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbf2:	83 ec 0c             	sub    esp,0xc
c001bbf5:	56                   	push   esi
c001bbf6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbf9:	83 c4 10             	add    esp,0x10
c001bbfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc00:	85 c0                	test   eax,eax
c001bc02:	0f 95 c0             	setne  al
c001bc05:	31 d2                	xor    edx,edx
c001bc07:	0f b6 c0             	movzx  eax,al
c001bc0a:	f7 d8                	neg    eax
c001bc0c:	83 d2 00             	adc    edx,0x0
c001bc0f:	83 c4 20             	add    esp,0x20
c001bc12:	f7 da                	neg    edx
c001bc14:	5b                   	pop    ebx
c001bc15:	5e                   	pop    esi
c001bc16:	5f                   	pop    edi
c001bc17:	c3                   	ret    
c001bc18:	83 ec 08             	sub    esp,0x8
c001bc1b:	53                   	push   ebx
c001bc1c:	68 af c0 02 c0       	push   0xc002c0af
c001bc21:	e8 57 73 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001bc26:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc29:	83 c4 10             	add    esp,0x10
c001bc2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc39:	31 d2                	xor    edx,edx
c001bc3b:	83 c4 20             	add    esp,0x20
c001bc3e:	31 c0                	xor    eax,eax
c001bc40:	5b                   	pop    ebx
c001bc41:	5e                   	pop    esi
c001bc42:	5f                   	pop    edi
c001bc43:	c3                   	ret    
c001bc44:	83 c4 20             	add    esp,0x20
c001bc47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc4c:	5b                   	pop    ebx
c001bc4d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc52:	5e                   	pop    esi
c001bc53:	5f                   	pop    edi
c001bc54:	c3                   	ret    

c001bc55 <sysCallClose(regs*)>:
c001bc55:	53                   	push   ebx
c001bc56:	83 ec 08             	sub    esp,0x8
c001bc59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc60:	83 f8 02             	cmp    eax,0x2
c001bc63:	76 50                	jbe    c001bcb5 <sysCallClose(regs*)+0x60>
c001bc65:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc6a:	74 58                	je     c001bcc4 <sysCallClose(regs*)+0x6f>
c001bc6c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc71:	74 60                	je     c001bcd3 <sysCallClose(regs*)+0x7e>
c001bc73:	77 2f                	ja     c001bca4 <sysCallClose(regs*)+0x4f>
c001bc75:	83 ec 0c             	sub    esp,0xc
c001bc78:	50                   	push   eax
c001bc79:	e8 c3 5d ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001bc7e:	89 c3                	mov    ebx,eax
c001bc80:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc83:	e8 10 79 ff ff       	call   c0013598 <File::close()>
c001bc88:	83 c4 10             	add    esp,0x10
c001bc8b:	85 db                	test   ebx,ebx
c001bc8d:	74 0c                	je     c001bc9b <sysCallClose(regs*)+0x46>
c001bc8f:	83 ec 0c             	sub    esp,0xc
c001bc92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc94:	53                   	push   ebx
c001bc95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc98:	83 c4 10             	add    esp,0x10
c001bc9b:	31 c0                	xor    eax,eax
c001bc9d:	31 d2                	xor    edx,edx
c001bc9f:	83 c4 08             	add    esp,0x8
c001bca2:	5b                   	pop    ebx
c001bca3:	c3                   	ret    
c001bca4:	83 ec 08             	sub    esp,0x8
c001bca7:	50                   	push   eax
c001bca8:	68 ac c1 02 c0       	push   0xc002c1ac
c001bcad:	e8 cb 72 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001bcb2:	83 c4 10             	add    esp,0x10
c001bcb5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcba:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcbf:	83 c4 08             	add    esp,0x8
c001bcc2:	5b                   	pop    ebx
c001bcc3:	c3                   	ret    
c001bcc4:	83 ec 0c             	sub    esp,0xc
c001bcc7:	68 ca c0 02 c0       	push   0xc002c0ca
c001bccc:	e8 ac 72 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001bcd1:	eb c5                	jmp    c001bc98 <sysCallClose(regs*)+0x43>
c001bcd3:	83 ec 0c             	sub    esp,0xc
c001bcd6:	68 d8 c0 02 c0       	push   0xc002c0d8
c001bcdb:	eb ef                	jmp    c001bccc <sysCallClose(regs*)+0x77>

c001bcdd <sysCallOpenDir(regs*)>:
c001bcdd:	56                   	push   esi
c001bcde:	53                   	push   ebx
c001bcdf:	53                   	push   ebx
c001bce0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bce4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bce7:	85 f6                	test   esi,esi
c001bce9:	74 59                	je     c001bd44 <sysCallOpenDir(regs*)+0x67>
c001bceb:	83 ec 0c             	sub    esp,0xc
c001bcee:	68 14 01 00 00       	push   0x114
c001bcf3:	e8 48 3b ff ff       	call   c000f840 <malloc>
c001bcf8:	83 c4 0c             	add    esp,0xc
c001bcfb:	89 c6                	mov    esi,eax
c001bcfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd02:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd05:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd08:	56                   	push   esi
c001bd09:	e8 74 7c ff ff       	call   c0013982 <Directory::Directory(char const*, Process*)>
c001bd0e:	83 c4 10             	add    esp,0x10
c001bd11:	85 f6                	test   esi,esi
c001bd13:	74 2f                	je     c001bd44 <sysCallOpenDir(regs*)+0x67>
c001bd15:	83 ec 0c             	sub    esp,0xc
c001bd18:	56                   	push   esi
c001bd19:	e8 c8 7c ff ff       	call   c00139e6 <Directory::open()>
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	85 c0                	test   eax,eax
c001bd23:	75 1f                	jne    c001bd44 <sysCallOpenDir(regs*)+0x67>
c001bd25:	83 ec 0c             	sub    esp,0xc
c001bd28:	56                   	push   esi
c001bd29:	e8 1e 5a ff ff       	call   c001174c <UnixFile::getFileDescriptor()>
c001bd2e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	89 02                	mov    DWORD PTR [edx],eax
c001bd36:	c1 f8 1f             	sar    eax,0x1f
c001bd39:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd3c:	31 c0                	xor    eax,eax
c001bd3e:	59                   	pop    ecx
c001bd3f:	31 d2                	xor    edx,edx
c001bd41:	5b                   	pop    ebx
c001bd42:	5e                   	pop    esi
c001bd43:	c3                   	ret    
c001bd44:	59                   	pop    ecx
c001bd45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd4f:	5b                   	pop    ebx
c001bd50:	5e                   	pop    esi
c001bd51:	c3                   	ret    

c001bd52 <sysCallCloseDir(regs*)>:
c001bd52:	53                   	push   ebx
c001bd53:	83 ec 08             	sub    esp,0x8
c001bd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd5d:	83 f8 02             	cmp    eax,0x2
c001bd60:	76 47                	jbe    c001bda9 <sysCallCloseDir(regs*)+0x57>
c001bd62:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd67:	77 2f                	ja     c001bd98 <sysCallCloseDir(regs*)+0x46>
c001bd69:	83 ec 0c             	sub    esp,0xc
c001bd6c:	50                   	push   eax
c001bd6d:	e8 cf 5c ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001bd72:	89 c3                	mov    ebx,eax
c001bd74:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd77:	e8 c6 7c ff ff       	call   c0013a42 <Directory::close()>
c001bd7c:	83 c4 10             	add    esp,0x10
c001bd7f:	85 db                	test   ebx,ebx
c001bd81:	74 0c                	je     c001bd8f <sysCallCloseDir(regs*)+0x3d>
c001bd83:	83 ec 0c             	sub    esp,0xc
c001bd86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd88:	53                   	push   ebx
c001bd89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	31 c0                	xor    eax,eax
c001bd91:	31 d2                	xor    edx,edx
c001bd93:	83 c4 08             	add    esp,0x8
c001bd96:	5b                   	pop    ebx
c001bd97:	c3                   	ret    
c001bd98:	83 ec 08             	sub    esp,0x8
c001bd9b:	50                   	push   eax
c001bd9c:	68 d4 c1 02 c0       	push   0xc002c1d4
c001bda1:	e8 d7 71 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001bda6:	83 c4 10             	add    esp,0x10
c001bda9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdb3:	83 c4 08             	add    esp,0x8
c001bdb6:	5b                   	pop    ebx
c001bdb7:	c3                   	ret    

c001bdb8 <sysCallMakeDir(regs*)>:
c001bdb8:	56                   	push   esi
c001bdb9:	53                   	push   ebx
c001bdba:	83 ec 10             	sub    esp,0x10
c001bdbd:	68 14 01 00 00       	push   0x114
c001bdc2:	e8 79 3a ff ff       	call   c000f840 <malloc>
c001bdc7:	83 c4 0c             	add    esp,0xc
c001bdca:	89 c3                	mov    ebx,eax
c001bdcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdd1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdd8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bddb:	53                   	push   ebx
c001bddc:	e8 a1 7b ff ff       	call   c0013982 <Directory::Directory(char const*, Process*)>
c001bde1:	83 c4 10             	add    esp,0x10
c001bde4:	85 db                	test   ebx,ebx
c001bde6:	74 32                	je     c001be1a <sysCallMakeDir(regs*)+0x62>
c001bde8:	83 ec 0c             	sub    esp,0xc
c001bdeb:	53                   	push   ebx
c001bdec:	e8 d5 7d ff ff       	call   c0013bc6 <Directory::create()>
c001bdf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdf4:	89 c6                	mov    esi,eax
c001bdf6:	e8 47 7c ff ff       	call   c0013a42 <Directory::close()>
c001bdfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be03:	83 c4 10             	add    esp,0x10
c001be06:	31 c0                	xor    eax,eax
c001be08:	59                   	pop    ecx
c001be09:	85 f6                	test   esi,esi
c001be0b:	5b                   	pop    ebx
c001be0c:	0f 95 c0             	setne  al
c001be0f:	5e                   	pop    esi
c001be10:	31 d2                	xor    edx,edx
c001be12:	f7 d8                	neg    eax
c001be14:	83 d2 00             	adc    edx,0x0
c001be17:	f7 da                	neg    edx
c001be19:	c3                   	ret    
c001be1a:	59                   	pop    ecx
c001be1b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be20:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be25:	5b                   	pop    ebx
c001be26:	5e                   	pop    esi
c001be27:	c3                   	ret    

c001be28 <sysCallWait(regs*)>:
c001be28:	83 ec 10             	sub    esp,0x10
c001be2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be2f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be32:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be35:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be38:	e8 ce 24 00 00       	call   c001e30b <waitTask(int, int*, int)>
c001be3d:	83 c4 1c             	add    esp,0x1c
c001be40:	99                   	cdq    
c001be41:	c3                   	ret    

c001be42 <sysCallNotImpl(regs*)>:
c001be42:	83 ec 18             	sub    esp,0x18
c001be45:	68 e6 c0 02 c0       	push   0xc002c0e6
c001be4a:	e8 e0 e7 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001be4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be54:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be59:	83 c4 1c             	add    esp,0x1c
c001be5c:	c3                   	ret    

c001be5d <sysPanic(regs*)>:
c001be5d:	83 ec 18             	sub    esp,0x18
c001be60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be64:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be67:	e8 c3 e7 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001be6c:	c7 04 24 00 c1 02 c0 	mov    DWORD PTR [esp],0xc002c100
c001be73:	e8 b7 e7 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001be78:	b8 01 00 00 00       	mov    eax,0x1
c001be7d:	31 d2                	xor    edx,edx
c001be7f:	83 c4 1c             	add    esp,0x1c
c001be82:	c3                   	ret    

c001be83 <sysCallRmdir(regs*)>:
c001be83:	56                   	push   esi
c001be84:	53                   	push   ebx
c001be85:	83 ec 20             	sub    esp,0x20
c001be88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be8c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be8f:	68 14 01 00 00       	push   0x114
c001be94:	e8 a7 39 ff ff       	call   c000f840 <malloc>
c001be99:	83 c4 0c             	add    esp,0xc
c001be9c:	89 c3                	mov    ebx,eax
c001be9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bea6:	56                   	push   esi
c001bea7:	53                   	push   ebx
c001bea8:	e8 29 76 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001bead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001beb0:	e8 fd 77 ff ff       	call   c00136b2 <File::unlink()>
c001beb5:	83 c4 10             	add    esp,0x10
c001beb8:	85 db                	test   ebx,ebx
c001beba:	74 14                	je     c001bed0 <sysCallRmdir(regs*)+0x4d>
c001bebc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bec0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bec2:	83 ec 0c             	sub    esp,0xc
c001bec5:	53                   	push   ebx
c001bec6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bec9:	83 c4 10             	add    esp,0x10
c001becc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bed0:	85 c0                	test   eax,eax
c001bed2:	0f 95 c0             	setne  al
c001bed5:	31 d2                	xor    edx,edx
c001bed7:	0f b6 c0             	movzx  eax,al
c001beda:	f7 d8                	neg    eax
c001bedc:	83 d2 00             	adc    edx,0x0
c001bedf:	83 c4 14             	add    esp,0x14
c001bee2:	f7 da                	neg    edx
c001bee4:	5b                   	pop    ebx
c001bee5:	5e                   	pop    esi
c001bee6:	c3                   	ret    

c001bee7 <sysCallUnlink(regs*)>:
c001bee7:	56                   	push   esi
c001bee8:	53                   	push   ebx
c001bee9:	83 ec 20             	sub    esp,0x20
c001beec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bef0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bef3:	68 14 01 00 00       	push   0x114
c001bef8:	e8 43 39 ff ff       	call   c000f840 <malloc>
c001befd:	83 c4 0c             	add    esp,0xc
c001bf00:	89 c3                	mov    ebx,eax
c001bf02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf07:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf0a:	56                   	push   esi
c001bf0b:	53                   	push   ebx
c001bf0c:	e8 c5 75 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001bf11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf14:	e8 99 77 ff ff       	call   c00136b2 <File::unlink()>
c001bf19:	83 c4 10             	add    esp,0x10
c001bf1c:	85 db                	test   ebx,ebx
c001bf1e:	74 14                	je     c001bf34 <sysCallUnlink(regs*)+0x4d>
c001bf20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf24:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf26:	83 ec 0c             	sub    esp,0xc
c001bf29:	53                   	push   ebx
c001bf2a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf2d:	83 c4 10             	add    esp,0x10
c001bf30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf34:	85 c0                	test   eax,eax
c001bf36:	0f 95 c0             	setne  al
c001bf39:	31 d2                	xor    edx,edx
c001bf3b:	0f b6 c0             	movzx  eax,al
c001bf3e:	f7 d8                	neg    eax
c001bf40:	83 d2 00             	adc    edx,0x0
c001bf43:	83 c4 14             	add    esp,0x14
c001bf46:	f7 da                	neg    edx
c001bf48:	5b                   	pop    ebx
c001bf49:	5e                   	pop    esi
c001bf4a:	c3                   	ret    

c001bf4b <sysCallGetArgv(regs*)>:
c001bf4b:	83 ec 0c             	sub    esp,0xc
c001bf4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf52:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf55:	85 c0                	test   eax,eax
c001bf57:	78 2b                	js     c001bf84 <sysCallGetArgv(regs*)+0x39>
c001bf59:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf5f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf62:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf68:	7d 1a                	jge    c001bf84 <sysCallGetArgv(regs*)+0x39>
c001bf6a:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf71:	85 c0                	test   eax,eax
c001bf73:	74 17                	je     c001bf8c <sysCallGetArgv(regs*)+0x41>
c001bf75:	83 ec 08             	sub    esp,0x8
c001bf78:	50                   	push   eax
c001bf79:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf7c:	e8 b3 48 fe ff       	call   c0000834 <strcpy>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	31 c0                	xor    eax,eax
c001bf86:	31 d2                	xor    edx,edx
c001bf88:	83 c4 0c             	add    esp,0xc
c001bf8b:	c3                   	ret    
c001bf8c:	b8 01 00 00 00       	mov    eax,0x1
c001bf91:	31 d2                	xor    edx,edx
c001bf93:	83 c4 0c             	add    esp,0xc
c001bf96:	c3                   	ret    

c001bf97 <sysCallTTYName(regs*)>:
c001bf97:	56                   	push   esi
c001bf98:	53                   	push   ebx
c001bf99:	53                   	push   ebx
c001bf9a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf9e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bfa1:	85 c0                	test   eax,eax
c001bfa3:	74 5f                	je     c001c004 <sysCallTTYName(regs*)+0x6d>
c001bfa5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bfa8:	83 f8 02             	cmp    eax,0x2
c001bfab:	77 3e                	ja     c001bfeb <sysCallTTYName(regs*)+0x54>
c001bfad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfb2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfb5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bfbb:	85 db                	test   ebx,ebx
c001bfbd:	74 45                	je     c001c004 <sysCallTTYName(regs*)+0x6d>
c001bfbf:	83 ec 0c             	sub    esp,0xc
c001bfc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfc4:	53                   	push   ebx
c001bfc5:	ff 10                	call   DWORD PTR [eax]
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	84 c0                	test   al,al
c001bfcc:	74 41                	je     c001c00f <sysCallTTYName(regs*)+0x78>
c001bfce:	83 ec 08             	sub    esp,0x8
c001bfd1:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfd7:	53                   	push   ebx
c001bfd8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfdb:	e8 54 48 fe ff       	call   c0000834 <strcpy>
c001bfe0:	83 c4 10             	add    esp,0x10
c001bfe3:	31 c0                	xor    eax,eax
c001bfe5:	59                   	pop    ecx
c001bfe6:	31 d2                	xor    edx,edx
c001bfe8:	5b                   	pop    ebx
c001bfe9:	5e                   	pop    esi
c001bfea:	c3                   	ret    
c001bfeb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bff0:	74 bb                	je     c001bfad <sysCallTTYName(regs*)+0x16>
c001bff2:	83 ec 0c             	sub    esp,0xc
c001bff5:	50                   	push   eax
c001bff6:	e8 46 5a ff ff       	call   c0011a41 <getFromFileDescriptor(int)>
c001bffb:	83 c4 10             	add    esp,0x10
c001bffe:	89 c3                	mov    ebx,eax
c001c000:	85 db                	test   ebx,ebx
c001c002:	75 bb                	jne    c001bfbf <sysCallTTYName(regs*)+0x28>
c001c004:	59                   	pop    ecx
c001c005:	b8 01 00 00 00       	mov    eax,0x1
c001c00a:	31 d2                	xor    edx,edx
c001c00c:	5b                   	pop    ebx
c001c00d:	5e                   	pop    esi
c001c00e:	c3                   	ret    
c001c00f:	59                   	pop    ecx
c001c010:	b8 02 00 00 00       	mov    eax,0x2
c001c015:	31 d2                	xor    edx,edx
c001c017:	5b                   	pop    ebx
c001c018:	5e                   	pop    esi
c001c019:	c3                   	ret    

c001c01a <sysCallUSleep(regs*)>:
c001c01a:	83 ec 14             	sub    esp,0x14
c001c01d:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c022:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c026:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c02d:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c030:	01 ca                	add    edx,ecx
c001c032:	52                   	push   edx
c001c033:	50                   	push   eax
c001c034:	e8 6b 23 00 00       	call   c001e3a4 <nanoSleep(unsigned long long)>
c001c039:	31 c0                	xor    eax,eax
c001c03b:	31 d2                	xor    edx,edx
c001c03d:	83 c4 1c             	add    esp,0x1c
c001c040:	c3                   	ret    

c001c041 <sysCallSpawn(regs*)>:
c001c041:	56                   	push   esi
c001c042:	53                   	push   ebx
c001c043:	53                   	push   ebx
c001c044:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c048:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c04b:	85 f6                	test   esi,esi
c001c04d:	75 08                	jne    c001c057 <sysCallSpawn(regs*)+0x16>
c001c04f:	59                   	pop    ecx
c001c050:	31 c0                	xor    eax,eax
c001c052:	31 d2                	xor    edx,edx
c001c054:	5b                   	pop    ebx
c001c055:	5e                   	pop    esi
c001c056:	c3                   	ret    
c001c057:	83 ec 0c             	sub    esp,0xc
c001c05a:	68 3f 07 00 00       	push   0x73f
c001c05f:	e8 dc 37 ff ff       	call   c000f840 <malloc>
c001c064:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c067:	89 c6                	mov    esi,eax
c001c069:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c06e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c071:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c074:	56                   	push   esi
c001c075:	e8 2a 1a 00 00       	call   c001daa4 <Process::Process(char const*, Process*, char**)>
c001c07a:	83 c4 20             	add    esp,0x20
c001c07d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c084:	75 c9                	jne    c001c04f <sysCallSpawn(regs*)+0xe>
c001c086:	83 ec 0c             	sub    esp,0xc
c001c089:	56                   	push   esi
c001c08a:	e8 db 1f 00 00       	call   c001e06a <Process::createUserThread()>
c001c08f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c091:	83 c4 10             	add    esp,0x10
c001c094:	99                   	cdq    
c001c095:	59                   	pop    ecx
c001c096:	5b                   	pop    ebx
c001c097:	5e                   	pop    esi
c001c098:	c3                   	ret    

c001c099 <sysCallGetEnv(regs*)>:
c001c099:	55                   	push   ebp
c001c09a:	57                   	push   edi
c001c09b:	56                   	push   esi
c001c09c:	53                   	push   ebx
c001c09d:	83 ec 28             	sub    esp,0x28
c001c0a0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0a4:	68 0f c1 02 c0       	push   0xc002c10f
c001c0a9:	e8 cf 6e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c0ae:	5f                   	pop    edi
c001c0af:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c0b2:	5d                   	pop    ebp
c001c0b3:	53                   	push   ebx
c001c0b4:	68 3e c4 02 c0       	push   0xc002c43e
c001c0b9:	e8 bf 6e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c0be:	58                   	pop    eax
c001c0bf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c0c2:	5a                   	pop    edx
c001c0c3:	57                   	push   edi
c001c0c4:	68 18 c1 02 c0       	push   0xc002c118
c001c0c9:	e8 af 6e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c0ce:	59                   	pop    ecx
c001c0cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0d7:	e8 6f e4 ff ff       	call   c001a54b <Krnl::getProcessTotalEnvCount(Process*)>
c001c0dc:	5a                   	pop    edx
c001c0dd:	89 c5                	mov    ebp,eax
c001c0df:	59                   	pop    ecx
c001c0e0:	50                   	push   eax
c001c0e1:	68 22 c1 02 c0       	push   0xc002c122
c001c0e6:	e8 92 6e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c0eb:	83 c4 10             	add    esp,0x10
c001c0ee:	39 ef                	cmp    edi,ebp
c001c0f0:	7c 15                	jl     c001c107 <sysCallGetEnv(regs*)+0x6e>
c001c0f2:	85 db                	test   ebx,ebx
c001c0f4:	75 0c                	jne    c001c102 <sysCallGetEnv(regs*)+0x69>
c001c0f6:	83 c4 1c             	add    esp,0x1c
c001c0f9:	31 c0                	xor    eax,eax
c001c0fb:	5b                   	pop    ebx
c001c0fc:	31 d2                	xor    edx,edx
c001c0fe:	5e                   	pop    esi
c001c0ff:	5f                   	pop    edi
c001c100:	5d                   	pop    ebp
c001c101:	c3                   	ret    
c001c102:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c105:	eb ef                	jmp    c001c0f6 <sysCallGetEnv(regs*)+0x5d>
c001c107:	83 ec 0c             	sub    esp,0xc
c001c10a:	68 2e c1 02 c0       	push   0xc002c12e
c001c10f:	e8 69 6e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c114:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c118:	83 c4 0c             	add    esp,0xc
c001c11b:	57                   	push   edi
c001c11c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c122:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c125:	50                   	push   eax
c001c126:	e8 40 e4 ff ff       	call   c001a56b <Krnl::getProcessEnvPair(Process*, int)>
c001c12b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c12f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c133:	68 bd c4 02 c0       	push   0xc002c4bd
c001c138:	e8 40 6e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c13d:	83 c4 10             	add    esp,0x10
c001c140:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c143:	85 f6                	test   esi,esi
c001c145:	75 47                	jne    c001c18e <sysCallGetEnv(regs*)+0xf5>
c001c147:	83 ec 0c             	sub    esp,0xc
c001c14a:	55                   	push   ebp
c001c14b:	e8 44 46 fe ff       	call   c0000794 <strlen>
c001c150:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c153:	89 c3                	mov    ebx,eax
c001c155:	e8 3a 46 fe ff       	call   c0000794 <strlen>
c001c15a:	5a                   	pop    edx
c001c15b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c15f:	59                   	pop    ecx
c001c160:	50                   	push   eax
c001c161:	68 31 c1 02 c0       	push   0xc002c131
c001c166:	e8 12 6e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c16b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c16e:	e8 21 46 fe ff       	call   c0000794 <strlen>
c001c173:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c176:	89 c3                	mov    ebx,eax
c001c178:	e8 17 46 fe ff       	call   c0000794 <strlen>
c001c17d:	83 c4 10             	add    esp,0x10
c001c180:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c184:	83 c4 1c             	add    esp,0x1c
c001c187:	31 d2                	xor    edx,edx
c001c189:	5b                   	pop    ebx
c001c18a:	5e                   	pop    esi
c001c18b:	5f                   	pop    edi
c001c18c:	5d                   	pop    ebp
c001c18d:	c3                   	ret    
c001c18e:	83 ec 0c             	sub    esp,0xc
c001c191:	68 d7 c4 02 c0       	push   0xc002c4d7
c001c196:	e8 e2 6d ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c19b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c19e:	58                   	pop    eax
c001c19f:	5a                   	pop    edx
c001c1a0:	55                   	push   ebp
c001c1a1:	53                   	push   ebx
c001c1a2:	e8 8d 46 fe ff       	call   c0000834 <strcpy>
c001c1a7:	59                   	pop    ecx
c001c1a8:	5e                   	pop    esi
c001c1a9:	68 3b c1 02 c0       	push   0xc002c13b
c001c1ae:	53                   	push   ebx
c001c1af:	e8 c0 47 fe ff       	call   c0000974 <strcat>
c001c1b4:	5d                   	pop    ebp
c001c1b5:	58                   	pop    eax
c001c1b6:	57                   	push   edi
c001c1b7:	53                   	push   ebx
c001c1b8:	e8 b7 47 fe ff       	call   c0000974 <strcat>
c001c1bd:	c7 04 24 f1 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4f1
c001c1c4:	e8 b4 6d ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c1c9:	83 c4 10             	add    esp,0x10
c001c1cc:	e9 25 ff ff ff       	jmp    c001c0f6 <sysCallGetEnv(regs*)+0x5d>

c001c1d1 <sysAppSettings(regs*)>:
c001c1d1:	53                   	push   ebx
c001c1d2:	83 ec 08             	sub    esp,0x8
c001c1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1dc:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1e2:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1e7:	66 3d c0 09          	cmp    ax,0x9c0
c001c1eb:	75 2f                	jne    c001c21c <sysAppSettings(regs*)+0x4b>
c001c1ed:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1f3:	83 e0 1f             	and    eax,0x1f
c001c1f6:	3c 01                	cmp    al,0x1
c001c1f8:	74 2e                	je     c001c228 <sysAppSettings(regs*)+0x57>
c001c1fa:	3c 07                	cmp    al,0x7
c001c1fc:	0f 84 bd 00 00 00    	je     c001c2bf <sysAppSettings(regs*)+0xee>
c001c202:	84 c0                	test   al,al
c001c204:	0f 84 dc 00 00 00    	je     c001c2e6 <sysAppSettings(regs*)+0x115>
c001c20a:	3c 08                	cmp    al,0x8
c001c20c:	74 6d                	je     c001c27b <sysAppSettings(regs*)+0xaa>
c001c20e:	0f b6 c0             	movzx  eax,al
c001c211:	83 c4 08             	add    esp,0x8
c001c214:	05 e8 03 00 00       	add    eax,0x3e8
c001c219:	5b                   	pop    ebx
c001c21a:	99                   	cdq    
c001c21b:	c3                   	ret    
c001c21c:	b8 01 00 00 00       	mov    eax,0x1
c001c221:	31 d2                	xor    edx,edx
c001c223:	83 c4 08             	add    esp,0x8
c001c226:	5b                   	pop    ebx
c001c227:	c3                   	ret    
c001c228:	51                   	push   ecx
c001c229:	68 00 01 00 00       	push   0x100
c001c22e:	6a 00                	push   0x0
c001c230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c235:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c238:	83 c0 0c             	add    eax,0xc
c001c23b:	50                   	push   eax
c001c23c:	e8 37 45 fe ff       	call   c0000778 <memset>
c001c241:	83 c4 0c             	add    esp,0xc
c001c244:	68 ff 00 00 00       	push   0xff
c001c249:	53                   	push   ebx
c001c24a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c24f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c252:	83 c0 0c             	add    eax,0xc
c001c255:	50                   	push   eax
c001c256:	e8 e9 44 fe ff       	call   c0000744 <memcpy>
c001c25b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c260:	5b                   	pop    ebx
c001c261:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c264:	5a                   	pop    edx
c001c265:	8d 50 0c             	lea    edx,[eax+0xc]
c001c268:	52                   	push   edx
c001c269:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c26f:	e8 48 49 ff ff       	call   c0010bbc <VgaText::setTitle(char*)>
c001c274:	83 c4 10             	add    esp,0x10
c001c277:	31 c0                	xor    eax,eax
c001c279:	eb a6                	jmp    c001c221 <sysAppSettings(regs*)+0x50>
c001c27b:	83 ec 08             	sub    esp,0x8
c001c27e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c284:	83 e0 0f             	and    eax,0xf
c001c287:	50                   	push   eax
c001c288:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c28d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c290:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c296:	e8 11 49 ff ff       	call   c0010bac <VgaText::setTitleColour(VgaColour)>
c001c29b:	58                   	pop    eax
c001c29c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2a2:	5a                   	pop    edx
c001c2a3:	c1 e8 04             	shr    eax,0x4
c001c2a6:	83 e0 0f             	and    eax,0xf
c001c2a9:	50                   	push   eax
c001c2aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2b8:	e8 df 48 ff ff       	call   c0010b9c <VgaText::setTitleTextColour(VgaColour)>
c001c2bd:	eb b5                	jmp    c001c274 <sysAppSettings(regs*)+0xa3>
c001c2bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2c7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c2cd:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2d3:	c0 e8 06             	shr    al,0x6
c001c2d6:	83 e0 01             	and    eax,0x1
c001c2d9:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2df:	31 c0                	xor    eax,eax
c001c2e1:	e9 3b ff ff ff       	jmp    c001c221 <sysAppSettings(regs*)+0x50>
c001c2e6:	b8 02 00 00 00       	mov    eax,0x2
c001c2eb:	e9 31 ff ff ff       	jmp    c001c221 <sysAppSettings(regs*)+0x50>

c001c2f0 <sysSetFatAttrib(regs*)>:
c001c2f0:	57                   	push   edi
c001c2f1:	56                   	push   esi
c001c2f2:	53                   	push   ebx
c001c2f3:	83 ec 1c             	sub    esp,0x1c
c001c2f6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2fa:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2fd:	68 14 01 00 00       	push   0x114
c001c302:	e8 39 35 ff ff       	call   c000f840 <malloc>
c001c307:	83 c4 0c             	add    esp,0xc
c001c30a:	89 c3                	mov    ebx,eax
c001c30c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c311:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c314:	57                   	push   edi
c001c315:	53                   	push   ebx
c001c316:	e8 bb 71 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001c31b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c31e:	83 c4 0c             	add    esp,0xc
c001c321:	0f b6 d4             	movzx  edx,ah
c001c324:	0f b6 c0             	movzx  eax,al
c001c327:	52                   	push   edx
c001c328:	50                   	push   eax
c001c329:	53                   	push   ebx
c001c32a:	e8 1d 74 ff ff       	call   c001374c <File::chfatattr(unsigned char, unsigned char)>
c001c32f:	83 c4 10             	add    esp,0x10
c001c332:	85 db                	test   ebx,ebx
c001c334:	74 14                	je     c001c34a <sysSetFatAttrib(regs*)+0x5a>
c001c336:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c33a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c33c:	83 ec 0c             	sub    esp,0xc
c001c33f:	53                   	push   ebx
c001c340:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c343:	83 c4 10             	add    esp,0x10
c001c346:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c34a:	85 c0                	test   eax,eax
c001c34c:	0f 95 c0             	setne  al
c001c34f:	31 d2                	xor    edx,edx
c001c351:	0f b6 c0             	movzx  eax,al
c001c354:	f7 d8                	neg    eax
c001c356:	83 d2 00             	adc    edx,0x0
c001c359:	83 c4 10             	add    esp,0x10
c001c35c:	f7 da                	neg    edx
c001c35e:	5b                   	pop    ebx
c001c35f:	5e                   	pop    esi
c001c360:	5f                   	pop    edi
c001c361:	c3                   	ret    

c001c362 <sysPipe(regs*)>:
c001c362:	57                   	push   edi
c001c363:	56                   	push   esi
c001c364:	53                   	push   ebx
c001c365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c369:	83 ec 0c             	sub    esp,0xc
c001c36c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c36f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c372:	6a 20                	push   0x20
c001c374:	e8 c7 34 ff ff       	call   c000f840 <malloc>
c001c379:	89 c3                	mov    ebx,eax
c001c37b:	58                   	pop    eax
c001c37c:	5a                   	pop    edx
c001c37d:	68 00 50 00 00       	push   0x5000
c001c382:	53                   	push   ebx
c001c383:	e8 64 41 ff ff       	call   c00104ec <Pipe::Pipe(int)>
c001c388:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c38b:	e8 bc 53 ff ff       	call   c001174c <UnixFile::getFileDescriptor()>
c001c390:	89 07                	mov    DWORD PTR [edi],eax
c001c392:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c395:	e8 b2 53 ff ff       	call   c001174c <UnixFile::getFileDescriptor()>
c001c39a:	83 c4 10             	add    esp,0x10
c001c39d:	89 06                	mov    DWORD PTR [esi],eax
c001c39f:	31 d2                	xor    edx,edx
c001c3a1:	5b                   	pop    ebx
c001c3a2:	31 c0                	xor    eax,eax
c001c3a4:	5e                   	pop    esi
c001c3a5:	5f                   	pop    edi
c001c3a6:	c3                   	ret    

c001c3a7 <sysGetUnixTime(regs*)>:
c001c3a7:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001c3ac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3b6:	e9 05 7b ff ff       	jmp    c0013ec0 <Clock::timeInSecondsLocal()>

c001c3bb <string_ends_with(char const*, char const*)>:
c001c3bb:	57                   	push   edi
c001c3bc:	56                   	push   esi
c001c3bd:	53                   	push   ebx
c001c3be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c3c6:	83 ec 0c             	sub    esp,0xc
c001c3c9:	53                   	push   ebx
c001c3ca:	e8 c5 43 fe ff       	call   c0000794 <strlen>
c001c3cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3d2:	89 c6                	mov    esi,eax
c001c3d4:	e8 bb 43 fe ff       	call   c0000794 <strlen>
c001c3d9:	83 c4 10             	add    esp,0x10
c001c3dc:	39 c6                	cmp    esi,eax
c001c3de:	7d 06                	jge    c001c3e6 <string_ends_with(char const*, char const*)+0x2b>
c001c3e0:	5b                   	pop    ebx
c001c3e1:	31 c0                	xor    eax,eax
c001c3e3:	5e                   	pop    esi
c001c3e4:	5f                   	pop    edi
c001c3e5:	c3                   	ret    
c001c3e6:	83 ec 08             	sub    esp,0x8
c001c3e9:	29 c6                	sub    esi,eax
c001c3eb:	57                   	push   edi
c001c3ec:	01 f3                	add    ebx,esi
c001c3ee:	53                   	push   ebx
c001c3ef:	e8 cc 44 fe ff       	call   c00008c0 <strcmp>
c001c3f4:	83 c4 10             	add    esp,0x10
c001c3f7:	85 c0                	test   eax,eax
c001c3f9:	5b                   	pop    ebx
c001c3fa:	0f 94 c0             	sete   al
c001c3fd:	5e                   	pop    esi
c001c3fe:	0f b6 c0             	movzx  eax,al
c001c401:	5f                   	pop    edi
c001c402:	c3                   	ret    

c001c403 <sysCallOpen(regs*)>:
c001c403:	56                   	push   esi
c001c404:	53                   	push   ebx
c001c405:	81 ec 04 01 00 00    	sub    esp,0x104
c001c40b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c412:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c415:	85 c9                	test   ecx,ecx
c001c417:	0f 84 b3 00 00 00    	je     c001c4d0 <sysCallOpen(regs*)+0xcd>
c001c41d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c420:	85 c0                	test   eax,eax
c001c422:	0f 84 a8 00 00 00    	je     c001c4d0 <sysCallOpen(regs*)+0xcd>
c001c428:	52                   	push   edx
c001c429:	68 3d c1 02 c0       	push   0xc002c13d
c001c42e:	50                   	push   eax
c001c42f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c433:	56                   	push   esi
c001c434:	e8 f3 6e ff ff       	call   c001332c <Fs::standardiseFiles(char*, char const*, char const*)>
c001c439:	89 34 24             	mov    DWORD PTR [esp],esi
c001c43c:	e8 53 43 fe ff       	call   c0000794 <strlen>
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	48                   	dec    eax
c001c445:	74 1d                	je     c001c464 <sysCallOpen(regs*)+0x61>
c001c447:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c44a:	eb 0f                	jmp    c001c45b <sysCallOpen(regs*)+0x58>
c001c44c:	80 fa 3a             	cmp    dl,0x3a
c001c44f:	74 0f                	je     c001c460 <sysCallOpen(regs*)+0x5d>
c001c451:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c455:	48                   	dec    eax
c001c456:	74 0c                	je     c001c464 <sysCallOpen(regs*)+0x61>
c001c458:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c45b:	80 fa 2e             	cmp    dl,0x2e
c001c45e:	75 ec                	jne    c001c44c <sysCallOpen(regs*)+0x49>
c001c460:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c464:	83 ec 08             	sub    esp,0x8
c001c467:	68 41 c1 02 c0       	push   0xc002c141
c001c46c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c46f:	e8 47 ff ff ff       	call   c001c3bb <string_ends_with(char const*, char const*)>
c001c474:	83 c4 10             	add    esp,0x10
c001c477:	85 c0                	test   eax,eax
c001c479:	75 17                	jne    c001c492 <sysCallOpen(regs*)+0x8f>
c001c47b:	83 ec 08             	sub    esp,0x8
c001c47e:	68 62 c1 02 c0       	push   0xc002c162
c001c483:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c486:	e8 30 ff ff ff       	call   c001c3bb <string_ends_with(char const*, char const*)>
c001c48b:	83 c4 10             	add    esp,0x10
c001c48e:	85 c0                	test   eax,eax
c001c490:	74 51                	je     c001c4e3 <sysCallOpen(regs*)+0xe0>
c001c492:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c495:	83 ec 08             	sub    esp,0x8
c001c498:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c49e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4a8:	ff 30                	push   DWORD PTR [eax]
c001c4aa:	68 46 c1 02 c0       	push   0xc002c146
c001c4af:	e8 c9 6a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c4b4:	c7 04 24 55 c1 02 c0 	mov    DWORD PTR [esp],0xc002c155
c001c4bb:	e8 bd 6a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c4c0:	83 c4 10             	add    esp,0x10
c001c4c3:	81 c4 04 01 00 00    	add    esp,0x104
c001c4c9:	31 c0                	xor    eax,eax
c001c4cb:	31 d2                	xor    edx,edx
c001c4cd:	5b                   	pop    ebx
c001c4ce:	5e                   	pop    esi
c001c4cf:	c3                   	ret    
c001c4d0:	81 c4 04 01 00 00    	add    esp,0x104
c001c4d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4db:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4e0:	5b                   	pop    ebx
c001c4e1:	5e                   	pop    esi
c001c4e2:	c3                   	ret    
c001c4e3:	83 ec 08             	sub    esp,0x8
c001c4e6:	68 42 c1 02 c0       	push   0xc002c142
c001c4eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ee:	e8 cd 43 fe ff       	call   c00008c0 <strcmp>
c001c4f3:	83 c4 10             	add    esp,0x10
c001c4f6:	85 c0                	test   eax,eax
c001c4f8:	74 98                	je     c001c492 <sysCallOpen(regs*)+0x8f>
c001c4fa:	83 ec 08             	sub    esp,0x8
c001c4fd:	68 41 c1 02 c0       	push   0xc002c141
c001c502:	56                   	push   esi
c001c503:	e8 b3 fe ff ff       	call   c001c3bb <string_ends_with(char const*, char const*)>
c001c508:	83 c4 10             	add    esp,0x10
c001c50b:	85 c0                	test   eax,eax
c001c50d:	75 83                	jne    c001c492 <sysCallOpen(regs*)+0x8f>
c001c50f:	83 ec 08             	sub    esp,0x8
c001c512:	68 67 c1 02 c0       	push   0xc002c167
c001c517:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c51a:	e8 9c fe ff ff       	call   c001c3bb <string_ends_with(char const*, char const*)>
c001c51f:	83 c4 10             	add    esp,0x10
c001c522:	85 c0                	test   eax,eax
c001c524:	0f 85 d9 00 00 00    	jne    c001c603 <sysCallOpen(regs*)+0x200>
c001c52a:	83 ec 08             	sub    esp,0x8
c001c52d:	68 6c c1 02 c0       	push   0xc002c16c
c001c532:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c535:	e8 81 fe ff ff       	call   c001c3bb <string_ends_with(char const*, char const*)>
c001c53a:	83 c4 10             	add    esp,0x10
c001c53d:	85 c0                	test   eax,eax
c001c53f:	0f 85 be 00 00 00    	jne    c001c603 <sysCallOpen(regs*)+0x200>
c001c545:	83 ec 08             	sub    esp,0x8
c001c548:	68 68 c1 02 c0       	push   0xc002c168
c001c54d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c550:	e8 6b 43 fe ff       	call   c00008c0 <strcmp>
c001c555:	83 c4 10             	add    esp,0x10
c001c558:	85 c0                	test   eax,eax
c001c55a:	0f 84 a3 00 00 00    	je     c001c603 <sysCallOpen(regs*)+0x200>
c001c560:	83 ec 08             	sub    esp,0x8
c001c563:	68 67 c1 02 c0       	push   0xc002c167
c001c568:	56                   	push   esi
c001c569:	e8 4d fe ff ff       	call   c001c3bb <string_ends_with(char const*, char const*)>
c001c56e:	83 c4 10             	add    esp,0x10
c001c571:	85 c0                	test   eax,eax
c001c573:	0f 85 8a 00 00 00    	jne    c001c603 <sysCallOpen(regs*)+0x200>
c001c579:	83 ec 0c             	sub    esp,0xc
c001c57c:	68 14 01 00 00       	push   0x114
c001c581:	e8 ba 32 ff ff       	call   c000f840 <malloc>
c001c586:	83 c4 0c             	add    esp,0xc
c001c589:	89 c6                	mov    esi,eax
c001c58b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c590:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c593:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c596:	56                   	push   esi
c001c597:	e8 3a 6f ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001c59c:	83 c4 10             	add    esp,0x10
c001c59f:	85 f6                	test   esi,esi
c001c5a1:	0f 84 29 ff ff ff    	je     c001c4d0 <sysCallOpen(regs*)+0xcd>
c001c5a7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5aa:	0f b6 c2             	movzx  eax,dl
c001c5ad:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c5b0:	89 d0                	mov    eax,edx
c001c5b2:	83 e0 01             	and    eax,0x1
c001c5b5:	f6 c2 02             	test   dl,0x2
c001c5b8:	74 03                	je     c001c5bd <sysCallOpen(regs*)+0x1ba>
c001c5ba:	83 c8 02             	or     eax,0x2
c001c5bd:	f6 c2 04             	test   dl,0x4
c001c5c0:	74 03                	je     c001c5c5 <sysCallOpen(regs*)+0x1c2>
c001c5c2:	83 c8 04             	or     eax,0x4
c001c5c5:	f6 c2 08             	test   dl,0x8
c001c5c8:	74 03                	je     c001c5cd <sysCallOpen(regs*)+0x1ca>
c001c5ca:	83 c8 0a             	or     eax,0xa
c001c5cd:	83 e2 10             	and    edx,0x10
c001c5d0:	74 03                	je     c001c5d5 <sysCallOpen(regs*)+0x1d2>
c001c5d2:	83 c8 12             	or     eax,0x12
c001c5d5:	83 ec 08             	sub    esp,0x8
c001c5d8:	50                   	push   eax
c001c5d9:	56                   	push   esi
c001c5da:	e8 5b 6f ff ff       	call   c001353a <File::open(FileOpenMode)>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	85 c0                	test   eax,eax
c001c5e4:	0f 85 e6 fe ff ff    	jne    c001c4d0 <sysCallOpen(regs*)+0xcd>
c001c5ea:	83 ec 0c             	sub    esp,0xc
c001c5ed:	56                   	push   esi
c001c5ee:	e8 59 51 ff ff       	call   c001174c <UnixFile::getFileDescriptor()>
c001c5f3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5f6:	89 02                	mov    DWORD PTR [edx],eax
c001c5f8:	c1 f8 1f             	sar    eax,0x1f
c001c5fb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5fe:	e9 bd fe ff ff       	jmp    c001c4c0 <sysCallOpen(regs*)+0xbd>
c001c603:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c606:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c60c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c613:	e9 ab fe ff ff       	jmp    c001c4c3 <sysCallOpen(regs*)+0xc0>

c001c618 <Sys::loadSyscalls()>:
c001c618:	c7 05 e0 11 03 c0 25 b7 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001b725
c001c622:	c7 05 e4 11 03 c0 c4 b2 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001b2c4
c001c62c:	c7 05 e8 11 03 c0 2e b4 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001b42e
c001c636:	c7 05 ec 11 03 c0 5b b6 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b65b
c001c640:	c7 05 f0 11 03 c0 c6 b3 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001b3c6
c001c64a:	c7 05 f4 11 03 c0 fb b2 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b2fb
c001c654:	c7 05 f8 11 03 c0 dc b2 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001b2dc
c001c65e:	c7 05 fc 11 03 c0 cd b4 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001b4cd
c001c668:	c7 05 04 12 03 c0 55 bc 01 c0 	mov    DWORD PTR ds:0xc0031204,0xc001bc55
c001c672:	c7 05 00 12 03 c0 03 c4 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001c403
c001c67c:	c7 05 08 12 03 c0 dd bc 01 c0 	mov    DWORD PTR ds:0xc0031208,0xc001bcdd
c001c686:	c7 05 0c 12 03 c0 44 b9 01 c0 	mov    DWORD PTR ds:0xc003120c,0xc001b944
c001c690:	c7 05 10 12 03 c0 60 b7 01 c0 	mov    DWORD PTR ds:0xc0031210,0xc001b760
c001c69a:	c7 05 14 12 03 c0 65 b7 01 c0 	mov    DWORD PTR ds:0xc0031214,0xc001b765
c001c6a4:	c7 05 18 12 03 c0 b8 bd 01 c0 	mov    DWORD PTR ds:0xc0031218,0xc001bdb8
c001c6ae:	c7 05 1c 12 03 c0 52 bd 01 c0 	mov    DWORD PTR ds:0xc003121c,0xc001bd52
c001c6b8:	c7 05 20 12 03 c0 2c ba 01 c0 	mov    DWORD PTR ds:0xc0031220,0xc001ba2c
c001c6c2:	c7 05 24 12 03 c0 95 ba 01 c0 	mov    DWORD PTR ds:0xc0031224,0xc001ba95
c001c6cc:	c7 05 28 12 03 c0 12 bb 01 c0 	mov    DWORD PTR ds:0xc0031228,0xc001bb12
c001c6d6:	c7 05 2c 12 03 c0 6a b7 01 c0 	mov    DWORD PTR ds:0xc003122c,0xc001b76a
c001c6e0:	c7 05 30 12 03 c0 28 be 01 c0 	mov    DWORD PTR ds:0xc0031230,0xc001be28
c001c6ea:	c7 05 34 12 03 c0 42 be 01 c0 	mov    DWORD PTR ds:0xc0031234,0xc001be42
c001c6f4:	c7 05 38 12 03 c0 42 be 01 c0 	mov    DWORD PTR ds:0xc0031238,0xc001be42
c001c6fe:	c7 05 3c 12 03 c0 83 be 01 c0 	mov    DWORD PTR ds:0xc003123c,0xc001be83
c001c708:	c7 05 40 12 03 c0 e7 be 01 c0 	mov    DWORD PTR ds:0xc0031240,0xc001bee7
c001c712:	c7 05 44 12 03 c0 16 b9 01 c0 	mov    DWORD PTR ds:0xc0031244,0xc001b916
c001c71c:	c7 05 48 12 03 c0 4b bf 01 c0 	mov    DWORD PTR ds:0xc0031248,0xc001bf4b
c001c726:	c7 05 4c 12 03 c0 d3 b8 01 c0 	mov    DWORD PTR ds:0xc003124c,0xc001b8d3
c001c730:	c7 05 50 12 03 c0 97 bf 01 c0 	mov    DWORD PTR ds:0xc0031250,0xc001bf97
c001c73a:	c7 05 54 12 03 c0 d2 b9 01 c0 	mov    DWORD PTR ds:0xc0031254,0xc001b9d2
c001c744:	c7 05 58 12 03 c0 1a c0 01 c0 	mov    DWORD PTR ds:0xc0031258,0xc001c01a
c001c74e:	c7 05 5c 12 03 c0 95 bb 01 c0 	mov    DWORD PTR ds:0xc003125c,0xc001bb95
c001c758:	c7 05 60 12 03 c0 41 c0 01 c0 	mov    DWORD PTR ds:0xc0031260,0xc001c041
c001c762:	c7 05 64 12 03 c0 99 c0 01 c0 	mov    DWORD PTR ds:0xc0031264,0xc001c099
c001c76c:	c7 05 68 12 03 c0 d1 c1 01 c0 	mov    DWORD PTR ds:0xc0031268,0xc001c1d1
c001c776:	c7 05 6c 12 03 c0 74 b7 01 c0 	mov    DWORD PTR ds:0xc003126c,0xc001b774
c001c780:	c7 05 70 12 03 c0 de b7 01 c0 	mov    DWORD PTR ds:0xc0031270,0xc001b7de
c001c78a:	c7 05 74 12 03 c0 24 b8 01 c0 	mov    DWORD PTR ds:0xc0031274,0xc001b824
c001c794:	c7 05 78 12 03 c0 f0 c2 01 c0 	mov    DWORD PTR ds:0xc0031278,0xc001c2f0
c001c79e:	c7 05 7c 12 03 c0 5d be 01 c0 	mov    DWORD PTR ds:0xc003127c,0xc001be5d
c001c7a8:	c7 05 80 12 03 c0 75 b8 01 c0 	mov    DWORD PTR ds:0xc0031280,0xc001b875
c001c7b2:	c7 05 84 12 03 c0 62 c3 01 c0 	mov    DWORD PTR ds:0xc0031284,0xc001c362
c001c7bc:	c7 05 88 12 03 c0 a7 c3 01 c0 	mov    DWORD PTR ds:0xc0031288,0xc001c3a7
c001c7c6:	c7 05 8c 12 03 c0 1e b3 01 c0 	mov    DWORD PTR ds:0xc003128c,0xc001b31e
c001c7d0:	c7 05 90 12 03 c0 e9 b4 01 c0 	mov    DWORD PTR ds:0xc0031290,0xc001b4e9
c001c7da:	c7 05 94 12 03 c0 11 b6 01 c0 	mov    DWORD PTR ds:0xc0031294,0xc001b611
c001c7e4:	c7 05 98 12 03 c0 8e b2 01 c0 	mov    DWORD PTR ds:0xc0031298,0xc001b28e
c001c7ee:	c7 05 9c 12 03 c0 c3 b6 01 c0 	mov    DWORD PTR ds:0xc003129c,0xc001b6c3
c001c7f8:	c7 05 a0 12 03 c0 07 b3 01 c0 	mov    DWORD PTR ds:0xc00312a0,0xc001b307
c001c802:	c3                   	ret    

c001c803 <Sys::systemCall(regs*, void*)>:
c001c803:	53                   	push   ebx
c001c804:	83 ec 08             	sub    esp,0x8
c001c807:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c80b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c80e:	83 f8 7f             	cmp    eax,0x7f
c001c811:	77 16                	ja     c001c829 <Sys::systemCall(regs*, void*)+0x26>
c001c813:	8b 14 85 e0 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee20]
c001c81a:	85 d2                	test   edx,edx
c001c81c:	74 0b                	je     c001c829 <Sys::systemCall(regs*, void*)+0x26>
c001c81e:	83 ec 0c             	sub    esp,0xc
c001c821:	53                   	push   ebx
c001c822:	ff d2                	call   edx
c001c824:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c827:	eb 0d                	jmp    c001c836 <Sys::systemCall(regs*, void*)+0x33>
c001c829:	52                   	push   edx
c001c82a:	52                   	push   edx
c001c82b:	50                   	push   eax
c001c82c:	68 71 c1 02 c0       	push   0xc002c171
c001c831:	e8 47 67 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c836:	83 c4 10             	add    esp,0x10
c001c839:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c83e:	31 d2                	xor    edx,edx
c001c840:	83 c4 08             	add    esp,0x8
c001c843:	5b                   	pop    ebx
c001c844:	c3                   	ret    

c001c845 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c845:	55                   	push   ebp
c001c846:	57                   	push   edi
c001c847:	56                   	push   esi
c001c848:	53                   	push   ebx
c001c849:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c84f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c856:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c85d:	85 c0                	test   eax,eax
c001c85f:	0f 95 c1             	setne  cl
c001c862:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c86a:	0f 94 c2             	sete   dl
c001c86d:	84 d1                	test   cl,dl
c001c86f:	74 23                	je     c001c894 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c871:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c877:	74 1b                	je     c001c894 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c879:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c87f:	89 da                	mov    edx,ebx
c001c881:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c887:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c88d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c894:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c89b:	05 ff 0f 00 00       	add    eax,0xfff
c001c8a0:	83 ec 0c             	sub    esp,0xc
c001c8a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8a7:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c8ad:	c1 e8 0c             	shr    eax,0xc
c001c8b0:	89 ef                	mov    edi,ebp
c001c8b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8b6:	c1 ef 0c             	shr    edi,0xc
c001c8b9:	6a 01                	push   0x1
c001c8bb:	e8 d7 52 ff ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c001c8c0:	89 c6                	mov    esi,eax
c001c8c2:	58                   	pop    eax
c001c8c3:	5a                   	pop    edx
c001c8c4:	57                   	push   edi
c001c8c5:	68 f7 c1 02 c0       	push   0xc002c1f7
c001c8ca:	e8 ae 66 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c8cf:	59                   	pop    ecx
c001c8d0:	58                   	pop    eax
c001c8d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8d5:	68 09 c2 02 c0       	push   0xc002c209
c001c8da:	e8 9e 66 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c8df:	83 c4 10             	add    esp,0x10
c001c8e2:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8e8:	0f 86 24 01 00 00    	jbe    c001ca12 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8ee:	c1 e7 0c             	shl    edi,0xc
c001c8f1:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8f4:	89 df                	mov    edi,ebx
c001c8f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8fa:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c901:	01 dd                	add    ebp,ebx
c001c903:	29 fd                	sub    ebp,edi
c001c905:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c909:	0f 84 01 01 00 00    	je     c001ca10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c90f:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c915:	76 05                	jbe    c001c91c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c917:	bd 00 10 00 00       	mov    ebp,0x1000
c001c91c:	83 ec 0c             	sub    esp,0xc
c001c91f:	31 d2                	xor    edx,edx
c001c921:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c928:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c92a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c92e:	50                   	push   eax
c001c92f:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c933:	50                   	push   eax
c001c934:	52                   	push   edx
c001c935:	55                   	push   ebp
c001c936:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c93d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c940:	83 c4 20             	add    esp,0x20
c001c943:	85 c0                	test   eax,eax
c001c945:	74 0a                	je     c001c951 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c947:	53                   	push   ebx
c001c948:	53                   	push   ebx
c001c949:	50                   	push   eax
c001c94a:	68 1b c2 02 c0       	push   0xc002c21b
c001c94f:	eb 0f                	jmp    c001c960 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c951:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c955:	74 20                	je     c001c977 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c957:	51                   	push   ecx
c001c958:	51                   	push   ecx
c001c959:	6a 00                	push   0x0
c001c95b:	68 46 c2 02 c0       	push   0xc002c246
c001c960:	e8 18 66 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001c965:	89 34 24             	mov    DWORD PTR [esp],esi
c001c968:	e8 9a 56 ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c001c96d:	83 c4 10             	add    esp,0x10
c001c970:	31 c0                	xor    eax,eax
c001c972:	e9 55 01 00 00       	jmp    c001cacc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c977:	e8 d8 14 00 00       	call   c001de54 <lockScheduler()>
c001c97c:	e8 61 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c981:	6a 07                	push   0x7
c001c983:	89 c5                	mov    ebp,eax
c001c985:	56                   	push   esi
c001c986:	50                   	push   eax
c001c987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c98c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c98f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c995:	e8 d4 59 ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c001c99a:	83 c4 0c             	add    esp,0xc
c001c99d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9aa:	6a 00                	push   0x0
c001c9ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ba:	e8 19 58 ff ff       	call   c00121d8 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9bf:	58                   	pop    eax
c001c9c0:	5a                   	pop    edx
c001c9c1:	68 07 0c 00 00       	push   0xc07
c001c9c6:	57                   	push   edi
c001c9c7:	81 c7 00 10 00 00    	add    edi,0x1000
c001c9cd:	55                   	push   ebp
c001c9ce:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9d5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9db:	6a 00                	push   0x0
c001c9dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9e5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9eb:	e8 38 5d ff ff       	call   c0012728 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9f0:	83 c4 1c             	add    esp,0x1c
c001c9f3:	68 00 10 00 00       	push   0x1000
c001c9f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9fc:	50                   	push   eax
c001c9fd:	56                   	push   esi
c001c9fe:	e8 41 3d fe ff       	call   c0000744 <memcpy>
c001ca03:	e8 4e 14 00 00       	call   c001de56 <unlockScheduler()>
c001ca08:	83 c4 10             	add    esp,0x10
c001ca0b:	e9 ea fe ff ff       	jmp    c001c8fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca10:	89 fb                	mov    ebx,edi
c001ca12:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca1a:	0f 86 9e 00 00 00    	jbe    c001cabe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca20:	e8 2f 14 00 00       	call   c001de54 <lockScheduler()>
c001ca25:	51                   	push   ecx
c001ca26:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca2d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca33:	6a 00                	push   0x0
c001ca35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca3d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca43:	e8 90 57 ff ff       	call   c00121d8 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca48:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca4c:	c1 e7 0c             	shl    edi,0xc
c001ca4f:	01 df                	add    edi,ebx
c001ca51:	83 c4 10             	add    esp,0x10
c001ca54:	39 fb                	cmp    ebx,edi
c001ca56:	74 61                	je     c001cab9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca58:	e8 85 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001ca5d:	6a 07                	push   0x7
c001ca5f:	89 c5                	mov    ebp,eax
c001ca61:	56                   	push   esi
c001ca62:	50                   	push   eax
c001ca63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca6b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca71:	e8 f8 58 ff ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca76:	58                   	pop    eax
c001ca77:	5a                   	pop    edx
c001ca78:	68 07 0c 00 00       	push   0xc07
c001ca7d:	53                   	push   ebx
c001ca7e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca84:	55                   	push   ebp
c001ca85:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca8c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca92:	6a 00                	push   0x0
c001ca94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca99:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca9c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caa2:	e8 81 5c ff ff       	call   c0012728 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001caa7:	83 c4 1c             	add    esp,0x1c
c001caaa:	68 00 10 00 00       	push   0x1000
c001caaf:	6a 00                	push   0x0
c001cab1:	56                   	push   esi
c001cab2:	e8 c1 3c fe ff       	call   c0000778 <memset>
c001cab7:	eb 98                	jmp    c001ca51 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cab9:	e8 98 13 00 00       	call   c001de56 <unlockScheduler()>
c001cabe:	83 ec 0c             	sub    esp,0xc
c001cac1:	56                   	push   esi
c001cac2:	e8 40 55 ff ff       	call   c0012007 <Virt::freeKernelVirtualPages(unsigned long)>
c001cac7:	83 c4 10             	add    esp,0x10
c001caca:	b0 01                	mov    al,0x1
c001cacc:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cad2:	5b                   	pop    ebx
c001cad3:	5e                   	pop    esi
c001cad4:	5f                   	pop    edi
c001cad5:	5d                   	pop    ebp
c001cad6:	c3                   	ret    

c001cad7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cad7:	55                   	push   ebp
c001cad8:	57                   	push   edi
c001cad9:	56                   	push   esi
c001cada:	53                   	push   ebx
c001cadb:	83 ec 48             	sub    esp,0x48
c001cade:	68 14 01 00 00       	push   0x114
c001cae3:	e8 58 2d ff ff       	call   c000f840 <malloc>
c001cae8:	83 c4 0c             	add    esp,0xc
c001caeb:	89 c6                	mov    esi,eax
c001caed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001caf1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001caf5:	50                   	push   eax
c001caf6:	e8 db 69 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001cafb:	58                   	pop    eax
c001cafc:	5a                   	pop    edx
c001cafd:	6a 01                	push   0x1
c001caff:	56                   	push   esi
c001cb00:	e8 35 6a ff ff       	call   c001353a <File::open(FileOpenMode)>
c001cb05:	83 c4 10             	add    esp,0x10
c001cb08:	85 c0                	test   eax,eax
c001cb0a:	0f 85 47 01 00 00    	jne    c001cc57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb10:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb18:	83 ec 0c             	sub    esp,0xc
c001cb1b:	6a 34                	push   0x34
c001cb1d:	e8 1e 2d ff ff       	call   c000f840 <malloc>
c001cb22:	89 c3                	mov    ebx,eax
c001cb24:	58                   	pop    eax
c001cb25:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb27:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb2b:	57                   	push   edi
c001cb2c:	53                   	push   ebx
c001cb2d:	6a 00                	push   0x0
c001cb2f:	6a 34                	push   0x34
c001cb31:	56                   	push   esi
c001cb32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb35:	83 c4 20             	add    esp,0x20
c001cb38:	85 c0                	test   eax,eax
c001cb3a:	0f 85 17 01 00 00    	jne    c001cc57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb40:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb46:	0f 85 0b 01 00 00    	jne    c001cc57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb4c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb4f:	85 c0                	test   eax,eax
c001cb51:	0f 84 00 01 00 00    	je     c001cc57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb57:	31 d2                	xor    edx,edx
c001cb59:	55                   	push   ebp
c001cb5a:	52                   	push   edx
c001cb5b:	50                   	push   eax
c001cb5c:	56                   	push   esi
c001cb5d:	e8 96 6a ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001cb62:	83 c4 10             	add    esp,0x10
c001cb65:	85 c0                	test   eax,eax
c001cb67:	0f 85 ea 00 00 00    	jne    c001cc57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb6d:	83 ec 0c             	sub    esp,0xc
c001cb70:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb73:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb7b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb7f:	0f af c2             	imul   eax,edx
c001cb82:	50                   	push   eax
c001cb83:	e8 b8 2c ff ff       	call   c000f840 <malloc>
c001cb88:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb95:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb99:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb9d:	0f af c2             	imul   eax,edx
c001cba0:	99                   	cdq    
c001cba1:	52                   	push   edx
c001cba2:	50                   	push   eax
c001cba3:	56                   	push   esi
c001cba4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cba7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbaa:	83 c4 20             	add    esp,0x20
c001cbad:	85 c0                	test   eax,eax
c001cbaf:	0f 84 a2 00 00 00    	je     c001cc57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbb5:	31 d2                	xor    edx,edx
c001cbb7:	51                   	push   ecx
c001cbb8:	52                   	push   edx
c001cbb9:	50                   	push   eax
c001cbba:	56                   	push   esi
c001cbbb:	e8 38 6a ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001cbc0:	83 c4 10             	add    esp,0x10
c001cbc3:	85 c0                	test   eax,eax
c001cbc5:	0f 85 8c 00 00 00    	jne    c001cc57 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbcb:	83 ec 0c             	sub    esp,0xc
c001cbce:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbd2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbd6:	31 ed                	xor    ebp,ebp
c001cbd8:	0f af c2             	imul   eax,edx
c001cbdb:	50                   	push   eax
c001cbdc:	e8 5f 2c ff ff       	call   c000f840 <malloc>
c001cbe1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbe3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbe7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbee:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbf2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbf6:	0f af c2             	imul   eax,edx
c001cbf9:	99                   	cdq    
c001cbfa:	52                   	push   edx
c001cbfb:	50                   	push   eax
c001cbfc:	56                   	push   esi
c001cbfd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc00:	83 c4 20             	add    esp,0x20
c001cc03:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc0b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc0f:	0f 86 80 00 00 00    	jbe    c001cc95 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc15:	0f b7 fd             	movzx  edi,bp
c001cc18:	c1 e7 05             	shl    edi,0x5
c001cc1b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc1f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc22:	75 6b                	jne    c001cc8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc24:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc2b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc32:	52                   	push   edx
c001cc33:	31 d2                	xor    edx,edx
c001cc35:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc38:	52                   	push   edx
c001cc39:	50                   	push   eax
c001cc3a:	56                   	push   esi
c001cc3b:	e8 b8 69 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001cc40:	83 c4 10             	add    esp,0x10
c001cc43:	85 c0                	test   eax,eax
c001cc45:	74 17                	je     c001cc5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc47:	83 ec 0c             	sub    esp,0xc
c001cc4a:	68 72 c2 02 c0       	push   0xc002c272
c001cc4f:	e8 29 63 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001cc54:	83 c4 10             	add    esp,0x10
c001cc57:	31 c0                	xor    eax,eax
c001cc59:	e9 87 00 00 00       	jmp    c001cce5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc5e:	83 ec 0c             	sub    esp,0xc
c001cc61:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc64:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc67:	50                   	push   eax
c001cc68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc70:	56                   	push   esi
c001cc71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc75:	e8 cb fb ff ff       	call   c001c845 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc7e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc82:	83 c4 20             	add    esp,0x20
c001cc85:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc89:	73 04                	jae    c001cc8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc8f:	45                   	inc    ebp
c001cc90:	e9 76 ff ff ff       	jmp    c001cc0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc95:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc99:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cca1:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cca7:	83 ec 0c             	sub    esp,0xc
c001ccaa:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ccb0:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ccb5:	05 00 10 00 00       	add    eax,0x1000
c001ccba:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ccbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc1:	e8 8a 2b ff ff       	call   c000f850 <free>
c001ccc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccc9:	e8 82 2b ff ff       	call   c000f850 <free>
c001ccce:	58                   	pop    eax
c001cccf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccd3:	e8 78 2b ff ff       	call   c000f850 <free>
c001ccd8:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccdb:	e8 b8 68 ff ff       	call   c0013598 <File::close()>
c001cce0:	83 c4 10             	add    esp,0x10
c001cce3:	b0 01                	mov    al,0x1
c001cce5:	83 c4 3c             	add    esp,0x3c
c001cce8:	5b                   	pop    ebx
c001cce9:	5e                   	pop    esi
c001ccea:	5f                   	pop    edi
c001cceb:	5d                   	pop    ebp
c001ccec:	c3                   	ret    

c001cced <Thr::runtimeReferenceHelper()>:
c001cced:	83 ec 18             	sub    esp,0x18
c001ccf0:	68 7a c2 02 c0       	push   0xc002c27a
c001ccf5:	e8 83 62 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001ccfa:	fa                   	cli    
c001ccfb:	83 c4 10             	add    esp,0x10
c001ccfe:	eb fe                	jmp    c001ccfe <Thr::runtimeReferenceHelper()+0x11>

c001cd00 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd00:	57                   	push   edi
c001cd01:	56                   	push   esi
c001cd02:	53                   	push   ebx
c001cd03:	31 db                	xor    ebx,ebx
c001cd05:	39 1d 80 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b80,ebx
c001cd0b:	7e 3c                	jle    c001cd49 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd0d:	8b 34 9d 00 1b 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce500]
c001cd14:	31 ff                	xor    edi,edi
c001cd16:	39 3c 9d 00 1a 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce600],edi
c001cd1d:	7e 27                	jle    c001cd46 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd1f:	50                   	push   eax
c001cd20:	50                   	push   eax
c001cd21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd25:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd27:	03 04 9d 80 1a 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce580]
c001cd2e:	50                   	push   eax
c001cd2f:	e8 8c 3b fe ff       	call   c00008c0 <strcmp>
c001cd34:	83 c4 10             	add    esp,0x10
c001cd37:	85 c0                	test   eax,eax
c001cd39:	75 05                	jne    c001cd40 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd3b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd3e:	eb 0b                	jmp    c001cd4b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd40:	83 c6 10             	add    esi,0x10
c001cd43:	47                   	inc    edi
c001cd44:	eb d0                	jmp    c001cd16 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd46:	43                   	inc    ebx
c001cd47:	eb bc                	jmp    c001cd05 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd49:	31 c0                	xor    eax,eax
c001cd4b:	5b                   	pop    ebx
c001cd4c:	5e                   	pop    esi
c001cd4d:	5f                   	pop    edi
c001cd4e:	c3                   	ret    

c001cd4f <Thr::loadKernelSymbolTable(char const*)>:
c001cd4f:	55                   	push   ebp
c001cd50:	57                   	push   edi
c001cd51:	56                   	push   esi
c001cd52:	53                   	push   ebx
c001cd53:	83 ec 68             	sub    esp,0x68
c001cd56:	8b 35 d4 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031bd4
c001cd5c:	68 14 01 00 00       	push   0x114
c001cd61:	e8 da 2a ff ff       	call   c000f840 <malloc>
c001cd66:	83 c4 0c             	add    esp,0xc
c001cd69:	89 c3                	mov    ebx,eax
c001cd6b:	56                   	push   esi
c001cd6c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd70:	50                   	push   eax
c001cd71:	e8 60 67 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001cd76:	5e                   	pop    esi
c001cd77:	5f                   	pop    edi
c001cd78:	6a 01                	push   0x1
c001cd7a:	53                   	push   ebx
c001cd7b:	e8 ba 67 ff ff       	call   c001353a <File::open(FileOpenMode)>
c001cd80:	83 c4 10             	add    esp,0x10
c001cd83:	85 c0                	test   eax,eax
c001cd85:	74 0a                	je     c001cd91 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd87:	83 ec 0c             	sub    esp,0xc
c001cd8a:	68 9c c2 02 c0       	push   0xc002c29c
c001cd8f:	eb 34                	jmp    c001cdc5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd91:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd99:	83 ec 0c             	sub    esp,0xc
c001cd9c:	6a 34                	push   0x34
c001cd9e:	e8 9d 2a ff ff       	call   c000f840 <malloc>
c001cda3:	59                   	pop    ecx
c001cda4:	89 c7                	mov    edi,eax
c001cda6:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdac:	56                   	push   esi
c001cdad:	57                   	push   edi
c001cdae:	6a 00                	push   0x0
c001cdb0:	6a 34                	push   0x34
c001cdb2:	53                   	push   ebx
c001cdb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdb6:	83 c4 20             	add    esp,0x20
c001cdb9:	85 c0                	test   eax,eax
c001cdbb:	74 17                	je     c001cdd4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cdbd:	83 ec 0c             	sub    esp,0xc
c001cdc0:	68 b3 c2 02 c0       	push   0xc002c2b3
c001cdc5:	e8 65 d8 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001cdca:	83 c4 10             	add    esp,0x10
c001cdcd:	31 c0                	xor    eax,eax
c001cdcf:	e9 31 02 00 00       	jmp    c001d005 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cdd4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdda:	75 e1                	jne    c001cdbd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cddc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cddf:	85 c0                	test   eax,eax
c001cde1:	74 da                	je     c001cdbd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cde3:	52                   	push   edx
c001cde4:	31 d2                	xor    edx,edx
c001cde6:	52                   	push   edx
c001cde7:	50                   	push   eax
c001cde8:	53                   	push   ebx
c001cde9:	e8 0a 68 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001cdee:	83 c4 10             	add    esp,0x10
c001cdf1:	85 c0                	test   eax,eax
c001cdf3:	75 c8                	jne    c001cdbd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdf5:	83 ec 0c             	sub    esp,0xc
c001cdf8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdfc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce00:	31 ed                	xor    ebp,ebp
c001ce02:	0f af c2             	imul   eax,edx
c001ce05:	50                   	push   eax
c001ce06:	e8 35 2a ff ff       	call   c000f840 <malloc>
c001ce0b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce11:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce18:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce1c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce20:	0f af c2             	imul   eax,edx
c001ce23:	99                   	cdq    
c001ce24:	52                   	push   edx
c001ce25:	50                   	push   eax
c001ce26:	53                   	push   ebx
c001ce27:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce2a:	83 c4 20             	add    esp,0x20
c001ce2d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce35:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce4d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce51:	0f 86 aa 00 00 00    	jbe    c001cf01 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce57:	0f b7 f5             	movzx  esi,bp
c001ce5a:	6b f6 28             	imul   esi,esi,0x28
c001ce5d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce61:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce68:	50                   	push   eax
c001ce69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce6d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce71:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce73:	6b c0 28             	imul   eax,eax,0x28
c001ce76:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce7a:	89 d0                	mov    eax,edx
c001ce7c:	31 d2                	xor    edx,edx
c001ce7e:	52                   	push   edx
c001ce7f:	50                   	push   eax
c001ce80:	53                   	push   ebx
c001ce81:	e8 72 67 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001ce86:	83 c4 0c             	add    esp,0xc
c001ce89:	6a 20                	push   0x20
c001ce8b:	6a 00                	push   0x0
c001ce8d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce91:	52                   	push   edx
c001ce92:	e8 e1 38 fe ff       	call   c0000778 <memset>
c001ce97:	58                   	pop    eax
c001ce98:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce9a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce9e:	51                   	push   ecx
c001ce9f:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cea3:	52                   	push   edx
c001cea4:	6a 00                	push   0x0
c001cea6:	6a 1f                	push   0x1f
c001cea8:	53                   	push   ebx
c001cea9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ceac:	83 c4 18             	add    esp,0x18
c001ceaf:	68 ca c2 02 c0       	push   0xc002c2ca
c001ceb4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ceb8:	52                   	push   edx
c001ceb9:	e8 02 3a fe ff       	call   c00008c0 <strcmp>
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	85 c0                	test   eax,eax
c001cec3:	75 0f                	jne    c001ced4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cec5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cec8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cecc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ced0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ced4:	50                   	push   eax
c001ced5:	50                   	push   eax
c001ced6:	68 d2 c2 02 c0       	push   0xc002c2d2
c001cedb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cedf:	50                   	push   eax
c001cee0:	e8 db 39 fe ff       	call   c00008c0 <strcmp>
c001cee5:	83 c4 10             	add    esp,0x10
c001cee8:	85 c0                	test   eax,eax
c001ceea:	75 0f                	jne    c001cefb <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ceec:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ceef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cef3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cef7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cefb:	45                   	inc    ebp
c001cefc:	e9 4c ff ff ff       	jmp    c001ce4d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf01:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf06:	75 10                	jne    c001cf18 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf08:	83 ec 0c             	sub    esp,0xc
c001cf0b:	68 da c2 02 c0       	push   0xc002c2da
c001cf10:	e8 1a d7 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001cf15:	83 c4 10             	add    esp,0x10
c001cf18:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf1d:	75 10                	jne    c001cf2f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf1f:	83 ec 0c             	sub    esp,0xc
c001cf22:	68 da c2 02 c0       	push   0xc002c2da
c001cf27:	e8 03 d7 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001cf2c:	83 c4 10             	add    esp,0x10
c001cf2f:	31 d2                	xor    edx,edx
c001cf31:	50                   	push   eax
c001cf32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf36:	52                   	push   edx
c001cf37:	50                   	push   eax
c001cf38:	53                   	push   ebx
c001cf39:	e8 ba 66 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001cf3e:	5a                   	pop    edx
c001cf3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf43:	e8 f8 28 ff ff       	call   c000f840 <malloc>
c001cf48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf50:	31 c9                	xor    ecx,ecx
c001cf52:	5e                   	pop    esi
c001cf53:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf55:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf59:	55                   	push   ebp
c001cf5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf5e:	51                   	push   ecx
c001cf5f:	52                   	push   edx
c001cf60:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf64:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf68:	53                   	push   ebx
c001cf69:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf6c:	83 c4 14             	add    esp,0x14
c001cf6f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf73:	e8 c8 28 ff ff       	call   c000f840 <malloc>
c001cf78:	89 c6                	mov    esi,eax
c001cf7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf7c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf7f:	56                   	push   esi
c001cf80:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf84:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf88:	51                   	push   ecx
c001cf89:	52                   	push   edx
c001cf8a:	53                   	push   ebx
c001cf8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf92:	8b 15 80 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b80
c001cf98:	83 c4 1c             	add    esp,0x1c
c001cf9b:	c1 e8 04             	shr    eax,0x4
c001cf9e:	89 04 95 00 1a 03 c0 	mov    DWORD PTR [edx*4-0x3ffce600],eax
c001cfa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfa9:	31 d2                	xor    edx,edx
c001cfab:	52                   	push   edx
c001cfac:	50                   	push   eax
c001cfad:	53                   	push   ebx
c001cfae:	e8 45 66 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001cfb3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cfb5:	31 d2                	xor    edx,edx
c001cfb7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfba:	56                   	push   esi
c001cfbb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfbf:	52                   	push   edx
c001cfc0:	50                   	push   eax
c001cfc1:	53                   	push   ebx
c001cfc2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfc5:	83 c4 14             	add    esp,0x14
c001cfc8:	53                   	push   ebx
c001cfc9:	e8 ca 65 ff ff       	call   c0013598 <File::close()>
c001cfce:	5d                   	pop    ebp
c001cfcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfd3:	e8 78 28 ff ff       	call   c000f850 <free>
c001cfd8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfdb:	e8 70 28 ff ff       	call   c000f850 <free>
c001cfe0:	a1 80 1b 03 c0       	mov    eax,ds:0xc0031b80
c001cfe5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfe9:	8d 50 01             	lea    edx,[eax+0x1]
c001cfec:	89 0c 85 00 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce500],ecx
c001cff3:	89 34 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],esi
c001cffa:	89 15 80 1b 03 c0    	mov    DWORD PTR ds:0xc0031b80,edx
c001d000:	83 c4 10             	add    esp,0x10
c001d003:	b0 01                	mov    al,0x1
c001d005:	83 c4 5c             	add    esp,0x5c
c001d008:	5b                   	pop    ebx
c001d009:	5e                   	pop    esi
c001d00a:	5f                   	pop    edi
c001d00b:	5d                   	pop    ebp
c001d00c:	c3                   	ret    

c001d00d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d00d:	55                   	push   ebp
c001d00e:	57                   	push   edi
c001d00f:	56                   	push   esi
c001d010:	53                   	push   ebx
c001d011:	81 ec 68 03 00 00    	sub    esp,0x368
c001d017:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d01e:	8b 1d d4 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031bd4
c001d024:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d028:	68 14 01 00 00       	push   0x114
c001d02d:	e8 0e 28 ff ff       	call   c000f840 <malloc>
c001d032:	83 c4 0c             	add    esp,0xc
c001d035:	89 c5                	mov    ebp,eax
c001d037:	53                   	push   ebx
c001d038:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d03f:	50                   	push   eax
c001d040:	e8 91 64 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001d045:	5e                   	pop    esi
c001d046:	5f                   	pop    edi
c001d047:	6a 01                	push   0x1
c001d049:	55                   	push   ebp
c001d04a:	e8 eb 64 ff ff       	call   c001353a <File::open(FileOpenMode)>
c001d04f:	83 c4 10             	add    esp,0x10
c001d052:	85 c0                	test   eax,eax
c001d054:	0f 85 8d 06 00 00    	jne    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d05a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d062:	83 ec 0c             	sub    esp,0xc
c001d065:	6a 34                	push   0x34
c001d067:	e8 d4 27 ff ff       	call   c000f840 <malloc>
c001d06c:	5b                   	pop    ebx
c001d06d:	89 c7                	mov    edi,eax
c001d06f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d073:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d076:	53                   	push   ebx
c001d077:	57                   	push   edi
c001d078:	6a 00                	push   0x0
c001d07a:	6a 34                	push   0x34
c001d07c:	55                   	push   ebp
c001d07d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d080:	83 c4 20             	add    esp,0x20
c001d083:	85 c0                	test   eax,eax
c001d085:	0f 85 5c 06 00 00    	jne    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d08b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d091:	0f 85 50 06 00 00    	jne    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d097:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d09a:	85 c0                	test   eax,eax
c001d09c:	0f 84 45 06 00 00    	je     c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a2:	31 d2                	xor    edx,edx
c001d0a4:	51                   	push   ecx
c001d0a5:	52                   	push   edx
c001d0a6:	50                   	push   eax
c001d0a7:	55                   	push   ebp
c001d0a8:	e8 4b 65 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001d0ad:	83 c4 10             	add    esp,0x10
c001d0b0:	85 c0                	test   eax,eax
c001d0b2:	0f 85 2f 06 00 00    	jne    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0b8:	83 ec 0c             	sub    esp,0xc
c001d0bb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0be:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0c2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0c6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0ca:	0f af c2             	imul   eax,edx
c001d0cd:	50                   	push   eax
c001d0ce:	e8 6d 27 ff ff       	call   c000f840 <malloc>
c001d0d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0e1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0e5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0e9:	0f af c2             	imul   eax,edx
c001d0ec:	99                   	cdq    
c001d0ed:	52                   	push   edx
c001d0ee:	50                   	push   eax
c001d0ef:	55                   	push   ebp
c001d0f0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0f3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0f6:	83 c4 20             	add    esp,0x20
c001d0f9:	85 c0                	test   eax,eax
c001d0fb:	0f 84 e6 05 00 00    	je     c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d101:	52                   	push   edx
c001d102:	31 d2                	xor    edx,edx
c001d104:	52                   	push   edx
c001d105:	50                   	push   eax
c001d106:	55                   	push   ebp
c001d107:	e8 ec 64 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001d10c:	83 c4 10             	add    esp,0x10
c001d10f:	85 c0                	test   eax,eax
c001d111:	0f 85 d0 05 00 00    	jne    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d117:	83 ec 0c             	sub    esp,0xc
c001d11a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d11e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d122:	31 f6                	xor    esi,esi
c001d124:	0f af c2             	imul   eax,edx
c001d127:	50                   	push   eax
c001d128:	e8 13 27 ff ff       	call   c000f840 <malloc>
c001d12d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d137:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d13b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d13f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d143:	0f af c2             	imul   eax,edx
c001d146:	99                   	cdq    
c001d147:	52                   	push   edx
c001d148:	50                   	push   eax
c001d149:	55                   	push   ebp
c001d14a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d14d:	83 c4 20             	add    esp,0x20
c001d150:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d154:	0f 86 8a 00 00 00    	jbe    c001d1e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d15a:	0f b7 de             	movzx  ebx,si
c001d15d:	c1 e3 05             	shl    ebx,0x5
c001d160:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d164:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d167:	75 75                	jne    c001d1de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d169:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d16c:	31 d2                	xor    edx,edx
c001d16e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d172:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d179:	50                   	push   eax
c001d17a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d17d:	52                   	push   edx
c001d17e:	50                   	push   eax
c001d17f:	55                   	push   ebp
c001d180:	e8 73 64 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001d185:	83 c4 10             	add    esp,0x10
c001d188:	85 c0                	test   eax,eax
c001d18a:	0f 85 57 05 00 00    	jne    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d190:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d197:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d19a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d19e:	31 d2                	xor    edx,edx
c001d1a0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1a4:	83 ec 0c             	sub    esp,0xc
c001d1a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1ab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1b2:	50                   	push   eax
c001d1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1bb:	52                   	push   edx
c001d1bc:	50                   	push   eax
c001d1bd:	55                   	push   ebp
c001d1be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1c1:	83 c4 1c             	add    esp,0x1c
c001d1c4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1c7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1ca:	50                   	push   eax
c001d1cb:	6a 00                	push   0x0
c001d1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1d5:	50                   	push   eax
c001d1d6:	e8 9d 35 fe ff       	call   c0000778 <memset>
c001d1db:	83 c4 10             	add    esp,0x10
c001d1de:	46                   	inc    esi
c001d1df:	e9 6c ff ff ff       	jmp    c001d150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1e4:	53                   	push   ebx
c001d1e5:	31 db                	xor    ebx,ebx
c001d1e7:	68 00 01 00 00       	push   0x100
c001d1ec:	6a 00                	push   0x0
c001d1ee:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1f2:	50                   	push   eax
c001d1f3:	e8 80 35 fe ff       	call   c0000778 <memset>
c001d1f8:	83 c4 0c             	add    esp,0xc
c001d1fb:	68 00 01 00 00       	push   0x100
c001d200:	6a 00                	push   0x0
c001d202:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d209:	50                   	push   eax
c001d20a:	e8 69 35 fe ff       	call   c0000778 <memset>
c001d20f:	83 c4 10             	add    esp,0x10
c001d212:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d21a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d222:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d22a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d232:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d23a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d23e:	0f 86 30 01 00 00    	jbe    c001d374 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d244:	0f b7 f3             	movzx  esi,bx
c001d247:	6b f6 28             	imul   esi,esi,0x28
c001d24a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d24e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d255:	52                   	push   edx
c001d256:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d25a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d25e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d260:	6b d2 28             	imul   edx,edx,0x28
c001d263:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d267:	31 d2                	xor    edx,edx
c001d269:	52                   	push   edx
c001d26a:	50                   	push   eax
c001d26b:	55                   	push   ebp
c001d26c:	e8 87 63 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001d271:	83 c4 0c             	add    esp,0xc
c001d274:	6a 20                	push   0x20
c001d276:	6a 00                	push   0x0
c001d278:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d27f:	51                   	push   ecx
c001d280:	e8 f3 34 fe ff       	call   c0000778 <memset>
c001d285:	59                   	pop    ecx
c001d286:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d289:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d28d:	52                   	push   edx
c001d28e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d295:	51                   	push   ecx
c001d296:	6a 00                	push   0x0
c001d298:	6a 1f                	push   0x1f
c001d29a:	55                   	push   ebp
c001d29b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d29e:	83 c4 1c             	add    esp,0x1c
c001d2a1:	6a 09                	push   0x9
c001d2a3:	68 f4 c2 02 c0       	push   0xc002c2f4
c001d2a8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2af:	51                   	push   ecx
c001d2b0:	e8 8b 33 fe ff       	call   c0000640 <memcmp>
c001d2b5:	83 c4 10             	add    esp,0x10
c001d2b8:	85 c0                	test   eax,eax
c001d2ba:	75 21                	jne    c001d2dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2c4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2cf:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2d6:	89 d0                	mov    eax,edx
c001d2d8:	40                   	inc    eax
c001d2d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2dd:	50                   	push   eax
c001d2de:	6a 09                	push   0x9
c001d2e0:	68 fe c2 02 c0       	push   0xc002c2fe
c001d2e5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ec:	50                   	push   eax
c001d2ed:	e8 4e 33 fe ff       	call   c0000640 <memcmp>
c001d2f2:	83 c4 10             	add    esp,0x10
c001d2f5:	85 c0                	test   eax,eax
c001d2f7:	75 21                	jne    c001d31a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d301:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d305:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d309:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d30c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d313:	89 d0                	mov    eax,edx
c001d315:	40                   	inc    eax
c001d316:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d31a:	50                   	push   eax
c001d31b:	50                   	push   eax
c001d31c:	68 ca c2 02 c0       	push   0xc002c2ca
c001d321:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d328:	50                   	push   eax
c001d329:	e8 92 35 fe ff       	call   c00008c0 <strcmp>
c001d32e:	83 c4 10             	add    esp,0x10
c001d331:	85 c0                	test   eax,eax
c001d333:	75 0f                	jne    c001d344 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d335:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d338:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d33c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d340:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d344:	50                   	push   eax
c001d345:	50                   	push   eax
c001d346:	68 d2 c2 02 c0       	push   0xc002c2d2
c001d34b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d352:	50                   	push   eax
c001d353:	e8 68 35 fe ff       	call   c00008c0 <strcmp>
c001d358:	83 c4 10             	add    esp,0x10
c001d35b:	85 c0                	test   eax,eax
c001d35d:	75 0f                	jne    c001d36e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d35f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d362:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d36a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d36e:	43                   	inc    ebx
c001d36f:	e9 c6 fe ff ff       	jmp    c001d23a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d374:	31 d2                	xor    edx,edx
c001d376:	50                   	push   eax
c001d377:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d37b:	52                   	push   edx
c001d37c:	50                   	push   eax
c001d37d:	55                   	push   ebp
c001d37e:	e8 75 62 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001d383:	58                   	pop    eax
c001d384:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d388:	e8 b3 24 ff ff       	call   c000f840 <malloc>
c001d38d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d390:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d394:	31 d2                	xor    edx,edx
c001d396:	58                   	pop    eax
c001d397:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d39b:	53                   	push   ebx
c001d39c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3a4:	52                   	push   edx
c001d3a5:	50                   	push   eax
c001d3a6:	55                   	push   ebp
c001d3a7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3aa:	83 c4 14             	add    esp,0x14
c001d3ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3b1:	e8 8a 24 ff ff       	call   c000f840 <malloc>
c001d3b6:	31 d2                	xor    edx,edx
c001d3b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3bc:	83 c4 0c             	add    esp,0xc
c001d3bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3c3:	52                   	push   edx
c001d3c4:	50                   	push   eax
c001d3c5:	55                   	push   ebp
c001d3c6:	e8 2d 62 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001d3cb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3ce:	31 d2                	xor    edx,edx
c001d3d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3db:	52                   	push   edx
c001d3dc:	50                   	push   eax
c001d3dd:	55                   	push   ebp
c001d3de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3e1:	83 c4 20             	add    esp,0x20
c001d3e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3f0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3f4:	0f 84 f1 02 00 00    	je     c001d6eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3fa:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d401:	31 d2                	xor    edx,edx
c001d403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d407:	c1 e8 03             	shr    eax,0x3
c001d40a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d40e:	51                   	push   ecx
c001d40f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d413:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d417:	52                   	push   edx
c001d418:	50                   	push   eax
c001d419:	55                   	push   ebp
c001d41a:	e8 d9 61 ff ff       	call   c00135f8 <File::seek(unsigned long long)>
c001d41f:	5b                   	pop    ebx
c001d420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d424:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d42b:	e8 10 24 ff ff       	call   c000f840 <malloc>
c001d430:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d433:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d437:	31 d2                	xor    edx,edx
c001d439:	5e                   	pop    esi
c001d43a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d43e:	50                   	push   eax
c001d43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d443:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d447:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d44e:	52                   	push   edx
c001d44f:	50                   	push   eax
c001d450:	55                   	push   ebp
c001d451:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d454:	83 c4 20             	add    esp,0x20
c001d457:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d45f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d463:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d467:	0f 8d 62 02 00 00    	jge    c001d6cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d46d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d471:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d475:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d47a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d47d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d485:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d489:	89 d8                	mov    eax,ebx
c001d48b:	c1 e8 08             	shr    eax,0x8
c001d48e:	89 c6                	mov    esi,eax
c001d490:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d494:	c1 e6 04             	shl    esi,0x4
c001d497:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d49b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d49e:	85 d2                	test   edx,edx
c001d4a0:	0f 85 bf 00 00 00    	jne    c001d565 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4a6:	83 ec 0c             	sub    esp,0xc
c001d4a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4ad:	03 06                	add    eax,DWORD PTR [esi]
c001d4af:	50                   	push   eax
c001d4b0:	e8 4b f8 ff ff       	call   c001cd00 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4b5:	83 c4 10             	add    esp,0x10
c001d4b8:	89 c2                	mov    edx,eax
c001d4ba:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4bf:	85 c0                	test   eax,eax
c001d4c1:	0f 85 9e 00 00 00    	jne    c001d565 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4c7:	83 ec 0c             	sub    esp,0xc
c001d4ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4ce:	03 06                	add    eax,DWORD PTR [esi]
c001d4d0:	50                   	push   eax
c001d4d1:	e8 1f 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d4d6:	83 c4 10             	add    esp,0x10
c001d4d9:	89 c2                	mov    edx,eax
c001d4db:	85 c0                	test   eax,eax
c001d4dd:	0f 85 82 00 00 00    	jne    c001d565 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4e3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4e7:	50                   	push   eax
c001d4e8:	50                   	push   eax
c001d4e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ed:	03 06                	add    eax,DWORD PTR [esi]
c001d4ef:	50                   	push   eax
c001d4f0:	68 08 c3 02 c0       	push   0xc002c308
c001d4f5:	e8 83 5a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001d4fa:	58                   	pop    eax
c001d4fb:	5a                   	pop    edx
c001d4fc:	68 22 c3 02 c0       	push   0xc002c322
c001d501:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d508:	50                   	push   eax
c001d509:	e8 26 33 fe ff       	call   c0000834 <strcpy>
c001d50e:	59                   	pop    ecx
c001d50f:	58                   	pop    eax
c001d510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d514:	03 06                	add    eax,DWORD PTR [esi]
c001d516:	50                   	push   eax
c001d517:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d51e:	50                   	push   eax
c001d51f:	e8 50 34 fe ff       	call   c0000974 <strcat>
c001d524:	58                   	pop    eax
c001d525:	5a                   	pop    edx
c001d526:	68 b8 c3 02 c0       	push   0xc002c3b8
c001d52b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d532:	50                   	push   eax
c001d533:	e8 3c 34 fe ff       	call   c0000974 <strcat>
c001d538:	83 c4 10             	add    esp,0x10
c001d53b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d540:	0f 84 43 01 00 00    	je     c001d689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d546:	83 ec 0c             	sub    esp,0xc
c001d549:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d550:	50                   	push   eax
c001d551:	e8 d9 d0 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001d556:	83 c4 10             	add    esp,0x10
c001d559:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d55d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d561:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d565:	80 fb 01             	cmp    bl,0x1
c001d568:	75 7d                	jne    c001d5e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d56a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d571:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d575:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d579:	01 ce                	add    esi,ecx
c001d57b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d581:	0f 94 c0             	sete   al
c001d584:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d58a:	0f 94 c3             	sete   bl
c001d58d:	09 c3                	or     ebx,eax
c001d58f:	8b 06                	mov    eax,DWORD PTR [esi]
c001d591:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d596:	74 36                	je     c001d5ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d598:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d59b:	84 db                	test   bl,bl
c001d59d:	75 0a                	jne    c001d5a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d59f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5a3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5a7:	76 37                	jbe    c001d5e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5a9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5ad:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5b2:	0f 84 d1 00 00 00    	je     c001d689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5b8:	83 ec 0c             	sub    esp,0xc
c001d5bb:	68 39 c3 02 c0       	push   0xc002c339
c001d5c0:	e8 6a d0 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001d5c5:	83 c4 10             	add    esp,0x10
c001d5c8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5cc:	eb 12                	jmp    c001d5e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5ce:	01 c1                	add    ecx,eax
c001d5d0:	84 db                	test   bl,bl
c001d5d2:	75 0c                	jne    c001d5e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5d4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5d8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5dc:	77 02                	ja     c001d5e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5de:	01 d1                	add    ecx,edx
c001d5e0:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5e2:	e9 df 00 00 00       	jmp    c001d6c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5e7:	80 fb 02             	cmp    bl,0x2
c001d5ea:	75 71                	jne    c001d65d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5ec:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5f3:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5f7:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5fb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d601:	74 15                	je     c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d603:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d609:	74 0d                	je     c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d60b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d60f:	83 e8 04             	sub    eax,0x4
c001d612:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d616:	76 1f                	jbe    c001d637 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d618:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d61c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d621:	74 66                	je     c001d689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d623:	83 ec 0c             	sub    esp,0xc
c001d626:	68 55 c3 02 c0       	push   0xc002c355
c001d62b:	e8 ff cf ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001d630:	83 c4 10             	add    esp,0x10
c001d633:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d637:	8b 06                	mov    eax,DWORD PTR [esi]
c001d639:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d63e:	74 13                	je     c001d653 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d640:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d644:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d64b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d64f:	01 c8                	add    eax,ecx
c001d651:	eb 04                	jmp    c001d657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d653:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d657:	01 c2                	add    edx,eax
c001d659:	89 16                	mov    DWORD PTR [esi],edx
c001d65b:	eb 69                	jmp    c001d6c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d65d:	0f b6 db             	movzx  ebx,bl
c001d660:	50                   	push   eax
c001d661:	50                   	push   eax
c001d662:	53                   	push   ebx
c001d663:	68 71 c3 02 c0       	push   0xc002c371
c001d668:	e8 10 59 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001d66d:	83 c4 10             	add    esp,0x10
c001d670:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d675:	74 12                	je     c001d689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d677:	83 ec 0c             	sub    esp,0xc
c001d67a:	68 7c c3 02 c0       	push   0xc002c37c
c001d67f:	e8 ab cf ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001d684:	83 c4 10             	add    esp,0x10
c001d687:	eb 3d                	jmp    c001d6c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d689:	83 ec 0c             	sub    esp,0xc
c001d68c:	55                   	push   ebp
c001d68d:	e8 06 5f ff ff       	call   c0013598 <File::close()>
c001d692:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d695:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d698:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d69b:	59                   	pop    ecx
c001d69c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6a0:	e8 ab 21 ff ff       	call   c000f850 <free>
c001d6a5:	5b                   	pop    ebx
c001d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6aa:	e8 a1 21 ff ff       	call   c000f850 <free>
c001d6af:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6b2:	e8 99 21 ff ff       	call   c000f850 <free>
c001d6b7:	5e                   	pop    esi
c001d6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6bc:	e8 8f 21 ff ff       	call   c000f850 <free>
c001d6c1:	83 c4 10             	add    esp,0x10
c001d6c4:	eb 21                	jmp    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d6c6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6ca:	e9 90 fd ff ff       	jmp    c001d45f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6cf:	83 ec 0c             	sub    esp,0xc
c001d6d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6d6:	e8 75 21 ff ff       	call   c000f850 <free>
c001d6db:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6df:	83 c4 10             	add    esp,0x10
c001d6e2:	e9 05 fd ff ff       	jmp    c001d3ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6e7:	31 c0                	xor    eax,eax
c001d6e9:	eb 33                	jmp    c001d71e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d6eb:	83 ec 0c             	sub    esp,0xc
c001d6ee:	55                   	push   ebp
c001d6ef:	e8 a4 5e ff ff       	call   c0013598 <File::close()>
c001d6f4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6fd:	58                   	pop    eax
c001d6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d702:	e8 49 21 ff ff       	call   c000f850 <free>
c001d707:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d70a:	e8 41 21 ff ff       	call   c000f850 <free>
c001d70f:	5a                   	pop    edx
c001d710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d714:	e8 37 21 ff ff       	call   c000f850 <free>
c001d719:	83 c4 10             	add    esp,0x10
c001d71c:	b0 01                	mov    al,0x1
c001d71e:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d724:	5b                   	pop    ebx
c001d725:	5e                   	pop    esi
c001d726:	5f                   	pop    edi
c001d727:	5d                   	pop    ebp
c001d728:	c3                   	ret    

c001d729 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d729:	56                   	push   esi
c001d72a:	31 d2                	xor    edx,edx
c001d72c:	53                   	push   ebx
c001d72d:	8b 1d e0 13 03 c0    	mov    ebx,DWORD PTR ds:0xc00313e0
c001d733:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d737:	39 d3                	cmp    ebx,edx
c001d739:	7e 1b                	jle    c001d756 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d73b:	8b 04 95 00 16 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcea00]
c001d742:	39 c8                	cmp    eax,ecx
c001d744:	77 0d                	ja     c001d753 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d746:	8b 34 95 00 14 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcec00]
c001d74d:	01 c6                	add    esi,eax
c001d74f:	39 ce                	cmp    esi,ecx
c001d751:	77 05                	ja     c001d758 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d753:	42                   	inc    edx
c001d754:	eb e1                	jmp    c001d737 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d756:	31 c0                	xor    eax,eax
c001d758:	5b                   	pop    ebx
c001d759:	5e                   	pop    esi
c001d75a:	c3                   	ret    

c001d75b <Thr::getDriverNameFromAddress(unsigned long)>:
c001d75b:	53                   	push   ebx
c001d75c:	31 c0                	xor    eax,eax
c001d75e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d762:	8b 1d e0 13 03 c0    	mov    ebx,DWORD PTR ds:0xc00313e0
c001d768:	39 c3                	cmp    ebx,eax
c001d76a:	7e 22                	jle    c001d78e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d76c:	8b 14 85 00 16 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcea00]
c001d773:	39 ca                	cmp    edx,ecx
c001d775:	77 14                	ja     c001d78b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d777:	03 14 85 00 14 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcec00]
c001d77e:	39 ca                	cmp    edx,ecx
c001d780:	76 09                	jbe    c001d78b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d782:	8b 04 85 00 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce800]
c001d789:	eb 05                	jmp    c001d790 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d78b:	40                   	inc    eax
c001d78c:	eb da                	jmp    c001d768 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d78e:	31 c0                	xor    eax,eax
c001d790:	5b                   	pop    ebx
c001d791:	c3                   	ret    

c001d792 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d792:	53                   	push   ebx
c001d793:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d797:	53                   	push   ebx
c001d798:	e8 8c ff ff ff       	call   c001d729 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d79d:	5a                   	pop    edx
c001d79e:	31 d2                	xor    edx,edx
c001d7a0:	85 c0                	test   eax,eax
c001d7a2:	74 04                	je     c001d7a8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7a4:	89 da                	mov    edx,ebx
c001d7a6:	29 c2                	sub    edx,eax
c001d7a8:	89 d0                	mov    eax,edx
c001d7aa:	5b                   	pop    ebx
c001d7ab:	c3                   	ret    

c001d7ac <Thr::loadDLL(char const*, bool)>:
c001d7ac:	55                   	push   ebp
c001d7ad:	57                   	push   edi
c001d7ae:	56                   	push   esi
c001d7af:	53                   	push   ebx
c001d7b0:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7b6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7bd:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d7c4:	56                   	push   esi
c001d7c5:	68 94 c3 02 c0       	push   0xc002c394
c001d7ca:	e8 ae 57 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001d7cf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7d6:	e8 65 20 ff ff       	call   c000f840 <malloc>
c001d7db:	83 c4 0c             	add    esp,0xc
c001d7de:	89 c3                	mov    ebx,eax
c001d7e0:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c001d7e6:	56                   	push   esi
c001d7e7:	50                   	push   eax
c001d7e8:	e8 e9 5c ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001d7ed:	83 c4 10             	add    esp,0x10
c001d7f0:	85 db                	test   ebx,ebx
c001d7f2:	75 3c                	jne    c001d830 <Thr::loadDLL(char const*, bool)+0x84>
c001d7f4:	89 e8                	mov    eax,ebp
c001d7f6:	84 c0                	test   al,al
c001d7f8:	0f 84 d5 01 00 00    	je     c001d9d3 <Thr::loadDLL(char const*, bool)+0x227>
c001d7fe:	57                   	push   edi
c001d7ff:	57                   	push   edi
c001d800:	68 a5 c3 02 c0       	push   0xc002c3a5
c001d805:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d809:	57                   	push   edi
c001d80a:	e8 25 30 fe ff       	call   c0000834 <strcpy>
c001d80f:	58                   	pop    eax
c001d810:	5a                   	pop    edx
c001d811:	56                   	push   esi
c001d812:	57                   	push   edi
c001d813:	e8 5c 31 fe ff       	call   c0000974 <strcat>
c001d818:	59                   	pop    ecx
c001d819:	58                   	pop    eax
c001d81a:	68 b8 c3 02 c0       	push   0xc002c3b8
c001d81f:	57                   	push   edi
c001d820:	e8 4f 31 fe ff       	call   c0000974 <strcat>
c001d825:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d828:	e8 02 ce ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001d82d:	83 c4 10             	add    esp,0x10
c001d830:	51                   	push   ecx
c001d831:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d835:	50                   	push   eax
c001d836:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d83a:	50                   	push   eax
c001d83b:	53                   	push   ebx
c001d83c:	e8 a5 5f ff ff       	call   c00137e6 <File::stat(unsigned long long*, bool*)>
c001d841:	83 c4 10             	add    esp,0x10
c001d844:	85 db                	test   ebx,ebx
c001d846:	74 0c                	je     c001d854 <Thr::loadDLL(char const*, bool)+0xa8>
c001d848:	83 ec 0c             	sub    esp,0xc
c001d84b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d84d:	53                   	push   ebx
c001d84e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d851:	83 c4 10             	add    esp,0x10
c001d854:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d859:	75 0a                	jne    c001d865 <Thr::loadDLL(char const*, bool)+0xb9>
c001d85b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d85f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d863:	75 3c                	jne    c001d8a1 <Thr::loadDLL(char const*, bool)+0xf5>
c001d865:	89 e8                	mov    eax,ebp
c001d867:	84 c0                	test   al,al
c001d869:	0f 84 4c 01 00 00    	je     c001d9bb <Thr::loadDLL(char const*, bool)+0x20f>
c001d86f:	51                   	push   ecx
c001d870:	51                   	push   ecx
c001d871:	68 a5 c3 02 c0       	push   0xc002c3a5
c001d876:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d87a:	53                   	push   ebx
c001d87b:	e8 b4 2f fe ff       	call   c0000834 <strcpy>
c001d880:	5f                   	pop    edi
c001d881:	58                   	pop    eax
c001d882:	56                   	push   esi
c001d883:	53                   	push   ebx
c001d884:	e8 eb 30 fe ff       	call   c0000974 <strcat>
c001d889:	58                   	pop    eax
c001d88a:	5a                   	pop    edx
c001d88b:	68 b8 c3 02 c0       	push   0xc002c3b8
c001d890:	53                   	push   ebx
c001d891:	e8 de 30 fe ff       	call   c0000974 <strcat>
c001d896:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d899:	e8 91 cd ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001d89e:	83 c4 10             	add    esp,0x10
c001d8a1:	e8 8c 45 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c001d8a6:	51                   	push   ecx
c001d8a7:	6a 03                	push   0x3
c001d8a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d8ad:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8b1:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8b7:	83 d3 00             	adc    ebx,0x0
c001d8ba:	89 ca                	mov    edx,ecx
c001d8bc:	89 d1                	mov    ecx,edx
c001d8be:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d8c2:	51                   	push   ecx
c001d8c3:	50                   	push   eax
c001d8c4:	e8 a5 4b ff ff       	call   c001246e <VAS::allocatePages(int, int)>
c001d8c9:	5f                   	pop    edi
c001d8ca:	89 c3                	mov    ebx,eax
c001d8cc:	58                   	pop    eax
c001d8cd:	53                   	push   ebx
c001d8ce:	68 ba c3 02 c0       	push   0xc002c3ba
c001d8d3:	e8 a5 56 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001d8d8:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8db:	e8 b4 2e fe ff       	call   c0000794 <strlen>
c001d8e0:	8b 3d e0 13 03 c0    	mov    edi,DWORD PTR ds:0xc00313e0
c001d8e6:	40                   	inc    eax
c001d8e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8ea:	e8 51 1f ff ff       	call   c000f840 <malloc>
c001d8ef:	89 04 bd 00 18 03 c0 	mov    DWORD PTR [edi*4-0x3ffce800],eax
c001d8f6:	58                   	pop    eax
c001d8f7:	a1 e0 13 03 c0       	mov    eax,ds:0xc00313e0
c001d8fc:	5a                   	pop    edx
c001d8fd:	56                   	push   esi
c001d8fe:	ff 34 85 00 18 03 c0 	push   DWORD PTR [eax*4-0x3ffce800]
c001d905:	e8 2a 2f fe ff       	call   c0000834 <strcpy>
c001d90a:	a1 e0 13 03 c0       	mov    eax,ds:0xc00313e0
c001d90f:	8d 50 01             	lea    edx,[eax+0x1]
c001d912:	89 1c 85 00 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea00],ebx
c001d919:	89 15 e0 13 03 c0    	mov    DWORD PTR ds:0xc00313e0,edx
c001d91f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d923:	83 c4 0c             	add    esp,0xc
c001d926:	89 14 85 00 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec00],edx
c001d92d:	6a 01                	push   0x1
c001d92f:	53                   	push   ebx
c001d930:	56                   	push   esi
c001d931:	e8 d7 f6 ff ff       	call   c001d00d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d936:	83 c4 10             	add    esp,0x10
c001d939:	89 c7                	mov    edi,eax
c001d93b:	84 c0                	test   al,al
c001d93d:	0f 85 8c 00 00 00    	jne    c001d9cf <Thr::loadDLL(char const*, bool)+0x223>
c001d943:	89 e8                	mov    eax,ebp
c001d945:	84 c0                	test   al,al
c001d947:	74 76                	je     c001d9bf <Thr::loadDLL(char const*, bool)+0x213>
c001d949:	83 ec 0c             	sub    esp,0xc
c001d94c:	68 c7 c3 02 c0       	push   0xc002c3c7
c001d951:	e8 d9 cc ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001d956:	83 c4 10             	add    esp,0x10
c001d959:	eb 64                	jmp    c001d9bf <Thr::loadDLL(char const*, bool)+0x213>
c001d95b:	e8 d2 44 ff ff       	call   c0011e32 <Virt::getAKernelVAS()>
c001d960:	89 f5                	mov    ebp,esi
c001d962:	c1 e5 0c             	shl    ebp,0xc
c001d965:	52                   	push   edx
c001d966:	01 dd                	add    ebp,ebx
c001d968:	52                   	push   edx
c001d969:	55                   	push   ebp
c001d96a:	50                   	push   eax
c001d96b:	e8 78 46 ff ff       	call   c0011fe8 <VAS::getPageTableEntry(unsigned long)>
c001d970:	83 c4 10             	add    esp,0x10
c001d973:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d976:	75 0c                	jne    c001d984 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d978:	83 ec 0c             	sub    esp,0xc
c001d97b:	55                   	push   ebp
c001d97c:	e8 d7 24 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d981:	83 c4 10             	add    esp,0x10
c001d984:	46                   	inc    esi
c001d985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d989:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d98d:	05 ff 0f 00 00       	add    eax,0xfff
c001d992:	83 d2 00             	adc    edx,0x0
c001d995:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d999:	c1 ea 0c             	shr    edx,0xc
c001d99c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9a4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d9a8:	ba 00 00 00 00       	mov    edx,0x0
c001d9ad:	89 d0                	mov    eax,edx
c001d9af:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9b3:	72 a6                	jb     c001d95b <Thr::loadDLL(char const*, bool)+0x1af>
c001d9b5:	89 f8                	mov    eax,edi
c001d9b7:	84 c0                	test   al,al
c001d9b9:	75 18                	jne    c001d9d3 <Thr::loadDLL(char const*, bool)+0x227>
c001d9bb:	31 db                	xor    ebx,ebx
c001d9bd:	eb 14                	jmp    c001d9d3 <Thr::loadDLL(char const*, bool)+0x227>
c001d9bf:	83 ec 0c             	sub    esp,0xc
c001d9c2:	68 e6 c3 02 c0       	push   0xc002c3e6
c001d9c7:	e8 63 cc ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001d9cc:	83 c4 10             	add    esp,0x10
c001d9cf:	31 f6                	xor    esi,esi
c001d9d1:	eb b2                	jmp    c001d985 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9d9:	89 d8                	mov    eax,ebx
c001d9db:	5b                   	pop    ebx
c001d9dc:	5e                   	pop    esi
c001d9dd:	5f                   	pop    edi
c001d9de:	5d                   	pop    ebp
c001d9df:	c3                   	ret    

c001d9e0 <Thr::executeDLL(unsigned long, void*)>:
c001d9e0:	56                   	push   esi
c001d9e1:	53                   	push   ebx
c001d9e2:	52                   	push   edx
c001d9e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9eb:	85 db                	test   ebx,ebx
c001d9ed:	75 10                	jne    c001d9ff <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9ef:	83 ec 0c             	sub    esp,0xc
c001d9f2:	68 02 c4 02 c0       	push   0xc002c402
c001d9f7:	e8 33 cc ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001d9fc:	83 c4 10             	add    esp,0x10
c001d9ff:	50                   	push   eax
c001da00:	50                   	push   eax
c001da01:	53                   	push   ebx
c001da02:	68 2c c4 02 c0       	push   0xc002c42c
c001da07:	e8 71 55 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001da0c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da10:	89 d8                	mov    eax,ebx
c001da12:	83 c4 14             	add    esp,0x14
c001da15:	5b                   	pop    ebx
c001da16:	5e                   	pop    esi
c001da17:	ff e0                	jmp    eax
c001da19:	90                   	nop

c001da1a <changeTSS>:
c001da1a:	83 ec 14             	sub    esp,0x14
c001da1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da22:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da25:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da2a:	c1 e2 15             	shl    edx,0x15
c001da2d:	29 d0                	sub    eax,edx
c001da2f:	50                   	push   eax
c001da30:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001da35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da3b:	05 7c 11 00 00       	add    eax,0x117c
c001da40:	50                   	push   eax
c001da41:	e8 90 3a ff ff       	call   c00114d6 <TSS::setESP(unsigned long)>
c001da46:	83 c4 1c             	add    esp,0x1c
c001da49:	c3                   	ret    

c001da4a <Process::addArgs(char**)>:
c001da4a:	57                   	push   edi
c001da4b:	56                   	push   esi
c001da4c:	53                   	push   ebx
c001da4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da51:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da55:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da5f:	85 ff                	test   edi,edi
c001da61:	74 3d                	je     c001daa0 <Process::addArgs(char**)+0x56>
c001da63:	8b 07                	mov    eax,DWORD PTR [edi]
c001da65:	85 c0                	test   eax,eax
c001da67:	74 37                	je     c001daa0 <Process::addArgs(char**)+0x56>
c001da69:	31 db                	xor    ebx,ebx
c001da6b:	83 ec 0c             	sub    esp,0xc
c001da6e:	50                   	push   eax
c001da6f:	e8 20 2d fe ff       	call   c0000794 <strlen>
c001da74:	40                   	inc    eax
c001da75:	89 04 24             	mov    DWORD PTR [esp],eax
c001da78:	e8 c3 1d ff ff       	call   c000f840 <malloc>
c001da7d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da84:	5a                   	pop    edx
c001da85:	59                   	pop    ecx
c001da86:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da89:	43                   	inc    ebx
c001da8a:	50                   	push   eax
c001da8b:	e8 a4 2d fe ff       	call   c0000834 <strcpy>
c001da90:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da96:	83 c4 10             	add    esp,0x10
c001da99:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da9c:	85 c0                	test   eax,eax
c001da9e:	75 cb                	jne    c001da6b <Process::addArgs(char**)+0x21>
c001daa0:	5b                   	pop    ebx
c001daa1:	5e                   	pop    esi
c001daa2:	5f                   	pop    edi
c001daa3:	c3                   	ret    

c001daa4 <Process::Process(char const*, Process*, char**)>:
c001daa4:	56                   	push   esi
c001daa5:	53                   	push   ebx
c001daa6:	83 ec 14             	sub    esp,0x14
c001daa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daad:	05 0c 02 00 00       	add    eax,0x20c
c001dab2:	bb 07 00 00 00       	mov    ebx,0x7
c001dab7:	89 c6                	mov    esi,eax
c001dab9:	85 db                	test   ebx,ebx
c001dabb:	78 12                	js     c001dacf <Process::Process(char const*, Process*, char**)+0x2b>
c001dabd:	83 ec 0c             	sub    esp,0xc
c001dac0:	56                   	push   esi
c001dac1:	e8 1c b2 00 00       	call   c0028ce2 <ThreadControlBlock::ThreadControlBlock()>
c001dac6:	83 c4 10             	add    esp,0x10
c001dac9:	83 c6 63             	add    esi,0x63
c001dacc:	4b                   	dec    ebx
c001dacd:	eb ea                	jmp    c001dab9 <Process::Process(char const*, Process*, char**)+0x15>
c001dacf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dada:	83 ec 0c             	sub    esp,0xc
c001dadd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dae1:	e8 9a c9 ff ff       	call   c001a480 <Krnl::newProcessEnv(Process*)>
c001dae6:	83 c4 10             	add    esp,0x10
c001dae9:	89 c2                	mov    edx,eax
c001daeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daef:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001daf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db02:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c001db07:	8d 50 01             	lea    edx,[eax+0x1]
c001db0a:	89 15 f0 db 02 c0    	mov    DWORD PTR ds:0xc002dbf0,edx
c001db10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db14:	89 02                	mov    DWORD PTR [edx],eax
c001db16:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001db1e:	83 ec 0c             	sub    esp,0xc
c001db21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db25:	e8 16 1d ff ff       	call   c000f840 <malloc>
c001db2a:	83 c4 10             	add    esp,0x10
c001db2d:	89 c3                	mov    ebx,eax
c001db2f:	83 ec 08             	sub    esp,0x8
c001db32:	6a 00                	push   0x0
c001db34:	53                   	push   ebx
c001db35:	e8 dc 4c ff ff       	call   c0012816 <VAS::VAS(bool)>
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db41:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db4b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db5d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db67:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db6d:	85 c0                	test   eax,eax
c001db6f:	74 42                	je     c001dbb3 <Process::Process(char const*, Process*, char**)+0x10f>
c001db71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db75:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db7b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db85:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db95:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db9f:	05 0c 01 00 00       	add    eax,0x10c
c001dba4:	83 ec 08             	sub    esp,0x8
c001dba7:	52                   	push   edx
c001dba8:	50                   	push   eax
c001dba9:	e8 86 2c fe ff       	call   c0000834 <strcpy>
c001dbae:	83 c4 10             	add    esp,0x10
c001dbb1:	eb 63                	jmp    c001dc16 <Process::Process(char const*, Process*, char**)+0x172>
c001dbb3:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dbbb:	83 ec 0c             	sub    esp,0xc
c001dbbe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbc2:	e8 79 1c ff ff       	call   c000f840 <malloc>
c001dbc7:	83 c4 10             	add    esp,0x10
c001dbca:	89 c3                	mov    ebx,eax
c001dbcc:	83 ec 08             	sub    esp,0x8
c001dbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd3:	53                   	push   ebx
c001dbd4:	e8 fb 35 ff ff       	call   c00111d4 <VgaText::VgaText(char const*)>
c001dbd9:	83 c4 10             	add    esp,0x10
c001dbdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbf0:	83 ec 0c             	sub    esp,0xc
c001dbf3:	50                   	push   eax
c001dbf4:	e8 ce 29 ff ff       	call   c00105c7 <addToTerminalCycle(VgaText*)>
c001dbf9:	83 c4 10             	add    esp,0x10
c001dbfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc00:	05 0c 01 00 00       	add    eax,0x10c
c001dc05:	83 ec 08             	sub    esp,0x8
c001dc08:	68 4b c4 02 c0       	push   0xc002c44b
c001dc0d:	50                   	push   eax
c001dc0e:	e8 21 2c fe ff       	call   c0000834 <strcpy>
c001dc13:	83 c4 10             	add    esp,0x10
c001dc16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc1a:	83 c0 0c             	add    eax,0xc
c001dc1d:	83 ec 08             	sub    esp,0x8
c001dc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc24:	50                   	push   eax
c001dc25:	e8 0a 2c fe ff       	call   c0000834 <strcpy>
c001dc2a:	83 c4 10             	add    esp,0x10
c001dc2d:	83 ec 08             	sub    esp,0x8
c001dc30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc38:	e8 0d fe ff ff       	call   c001da4a <Process::addArgs(char**)>
c001dc3d:	83 c4 10             	add    esp,0x10
c001dc40:	83 ec 08             	sub    esp,0x8
c001dc43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc4b:	e8 87 ee ff ff       	call   c001cad7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc50:	83 c4 10             	add    esp,0x10
c001dc53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc57:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc5b:	83 f0 01             	xor    eax,0x1
c001dc5e:	88 c2                	mov    dl,al
c001dc60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc64:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc6a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc6f:	83 ec 08             	sub    esp,0x8
c001dc72:	50                   	push   eax
c001dc73:	68 48 c5 02 c0       	push   0xc002c548
c001dc78:	e8 00 53 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001dc7d:	83 c4 10             	add    esp,0x10
c001dc80:	90                   	nop
c001dc81:	83 c4 14             	add    esp,0x14
c001dc84:	5b                   	pop    ebx
c001dc85:	5e                   	pop    esi
c001dc86:	c3                   	ret    
c001dc87:	90                   	nop

c001dc88 <Process::Process(bool, char const*, Process*, char**)>:
c001dc88:	56                   	push   esi
c001dc89:	53                   	push   ebx
c001dc8a:	83 ec 24             	sub    esp,0x24
c001dc8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc91:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc99:	05 0c 02 00 00       	add    eax,0x20c
c001dc9e:	bb 07 00 00 00       	mov    ebx,0x7
c001dca3:	89 c6                	mov    esi,eax
c001dca5:	85 db                	test   ebx,ebx
c001dca7:	78 12                	js     c001dcbb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dca9:	83 ec 0c             	sub    esp,0xc
c001dcac:	56                   	push   esi
c001dcad:	e8 30 b0 00 00       	call   c0028ce2 <ThreadControlBlock::ThreadControlBlock()>
c001dcb2:	83 c4 10             	add    esp,0x10
c001dcb5:	83 c6 63             	add    esi,0x63
c001dcb8:	4b                   	dec    ebx
c001dcb9:	eb ea                	jmp    c001dca5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcbf:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dcc6:	83 ec 0c             	sub    esp,0xc
c001dcc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dccd:	e8 ae c7 ff ff       	call   c001a480 <Krnl::newProcessEnv(Process*)>
c001dcd2:	83 c4 10             	add    esp,0x10
c001dcd5:	89 c2                	mov    edx,eax
c001dcd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcdb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dce1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcee:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c001dcf3:	8d 50 01             	lea    edx,[eax+0x1]
c001dcf6:	89 15 f0 db 02 c0    	mov    DWORD PTR ds:0xc002dbf0,edx
c001dcfc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd00:	89 02                	mov    DWORD PTR [edx],eax
c001dd02:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dd0a:	83 ec 0c             	sub    esp,0xc
c001dd0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd11:	e8 2a 1b ff ff       	call   c000f840 <malloc>
c001dd16:	83 c4 10             	add    esp,0x10
c001dd19:	89 c3                	mov    ebx,eax
c001dd1b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd20:	83 ec 08             	sub    esp,0x8
c001dd23:	50                   	push   eax
c001dd24:	53                   	push   ebx
c001dd25:	e8 ec 4a ff ff       	call   c0012816 <VAS::VAS(bool)>
c001dd2a:	83 c4 10             	add    esp,0x10
c001dd2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd31:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd3b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd49:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd4d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd57:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd5d:	85 c0                	test   eax,eax
c001dd5f:	74 42                	je     c001dda3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd65:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd6b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd75:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd85:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd8f:	05 0c 01 00 00       	add    eax,0x10c
c001dd94:	83 ec 08             	sub    esp,0x8
c001dd97:	52                   	push   edx
c001dd98:	50                   	push   eax
c001dd99:	e8 96 2a fe ff       	call   c0000834 <strcpy>
c001dd9e:	83 c4 10             	add    esp,0x10
c001dda1:	eb 63                	jmp    c001de06 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dda3:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001ddab:	83 ec 0c             	sub    esp,0xc
c001ddae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddb2:	e8 89 1a ff ff       	call   c000f840 <malloc>
c001ddb7:	83 c4 10             	add    esp,0x10
c001ddba:	89 c3                	mov    ebx,eax
c001ddbc:	83 ec 08             	sub    esp,0x8
c001ddbf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddc3:	53                   	push   ebx
c001ddc4:	e8 0b 34 ff ff       	call   c00111d4 <VgaText::VgaText(char const*)>
c001ddc9:	83 c4 10             	add    esp,0x10
c001ddcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ddd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddda:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dde0:	83 ec 0c             	sub    esp,0xc
c001dde3:	50                   	push   eax
c001dde4:	e8 de 27 ff ff       	call   c00105c7 <addToTerminalCycle(VgaText*)>
c001dde9:	83 c4 10             	add    esp,0x10
c001ddec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddf0:	05 0c 01 00 00       	add    eax,0x10c
c001ddf5:	83 ec 08             	sub    esp,0x8
c001ddf8:	68 4b c4 02 c0       	push   0xc002c44b
c001ddfd:	50                   	push   eax
c001ddfe:	e8 31 2a fe ff       	call   c0000834 <strcpy>
c001de03:	83 c4 10             	add    esp,0x10
c001de06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de0a:	83 c0 0c             	add    eax,0xc
c001de0d:	83 ec 08             	sub    esp,0x8
c001de10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de14:	50                   	push   eax
c001de15:	e8 1a 2a fe ff       	call   c0000834 <strcpy>
c001de1a:	83 c4 10             	add    esp,0x10
c001de1d:	83 ec 08             	sub    esp,0x8
c001de20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de28:	e8 1d fc ff ff       	call   c001da4a <Process::addArgs(char**)>
c001de2d:	83 c4 10             	add    esp,0x10
c001de30:	90                   	nop
c001de31:	83 c4 24             	add    esp,0x24
c001de34:	5b                   	pop    ebx
c001de35:	5e                   	pop    esi
c001de36:	c3                   	ret    

c001de37 <disableIRQs()>:
c001de37:	fa                   	cli    
c001de38:	ff 05 ac 1b 03 c0    	inc    DWORD PTR ds:0xc0031bac
c001de3e:	c3                   	ret    

c001de3f <getIRQNestingLevel()>:
c001de3f:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c001de44:	c3                   	ret    

c001de45 <enableIRQs()>:
c001de45:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c001de4a:	48                   	dec    eax
c001de4b:	a3 ac 1b 03 c0       	mov    ds:0xc0031bac,eax
c001de50:	75 01                	jne    c001de53 <enableIRQs()+0xe>
c001de52:	fb                   	sti    
c001de53:	c3                   	ret    

c001de54 <lockScheduler()>:
c001de54:	eb e1                	jmp    c001de37 <disableIRQs()>

c001de56 <unlockScheduler()>:
c001de56:	eb ed                	jmp    c001de45 <enableIRQs()>

c001de58 <userModeEntryPoint(void*)>:
c001de58:	83 ec 0c             	sub    esp,0xc
c001de5b:	e8 f6 ff ff ff       	call   c001de56 <unlockScheduler()>
c001de60:	fb                   	sti    
c001de61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de69:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de73:	83 c4 0c             	add    esp,0xc
c001de76:	e9 af 24 fe ff       	jmp    c000032a <goToUsermode>

c001de7b <lockStuff()>:
c001de7b:	e8 b7 ff ff ff       	call   c001de37 <disableIRQs()>
c001de80:	ff 05 a8 1b 03 c0    	inc    DWORD PTR ds:0xc0031ba8
c001de86:	c3                   	ret    

c001de87 <taskStartupFunction>:
c001de87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de8c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de8f:	c3                   	ret    

c001de90 <updateTimeUsed()>:
c001de90:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001de95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de9b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dea2:	74 50                	je     c001def4 <updateTimeUsed()+0x64>
c001dea4:	57                   	push   edi
c001dea5:	56                   	push   esi
c001dea6:	53                   	push   ebx
c001dea7:	0f 31                	rdtsc  
c001dea9:	89 c1                	mov    ecx,eax
c001deab:	a3 e8 1b 03 c0       	mov    ds:0xc0031be8,eax
c001deb0:	2b 0d d8 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031bd8
c001deb6:	89 d3                	mov    ebx,edx
c001deb8:	89 0d e0 1b 03 c0    	mov    DWORD PTR ds:0xc0031be0,ecx
c001debe:	1b 1d dc 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031bdc
c001dec4:	a3 d8 1b 03 c0       	mov    ds:0xc0031bd8,eax
c001dec9:	89 1d e4 1b 03 c0    	mov    DWORD PTR ds:0xc0031be4,ebx
c001decf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ded4:	89 15 ec 1b 03 c0    	mov    DWORD PTR ds:0xc0031bec,edx
c001deda:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dedd:	89 15 dc 1b 03 c0    	mov    DWORD PTR ds:0xc0031bdc,edx
c001dee3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dee6:	01 f1                	add    ecx,esi
c001dee8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001deeb:	11 fb                	adc    ebx,edi
c001deed:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001def0:	5b                   	pop    ebx
c001def1:	5e                   	pop    esi
c001def2:	5f                   	pop    edi
c001def3:	c3                   	ret    
c001def4:	c3                   	ret    

c001def5 <switchToThread(ThreadControlBlock*)>:
c001def5:	53                   	push   ebx
c001def6:	83 ec 08             	sub    esp,0x8
c001def9:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c001defe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df02:	85 c0                	test   eax,eax
c001df04:	75 30                	jne    c001df36 <switchToThread(ThreadControlBlock*)+0x41>
c001df06:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df09:	3c ff                	cmp    al,0xff
c001df0b:	74 25                	je     c001df32 <switchToThread(ThreadControlBlock*)+0x3d>
c001df0d:	0f b6 d0             	movzx  edx,al
c001df10:	b8 84 03 00 00       	mov    eax,0x384
c001df15:	29 d0                	sub    eax,edx
c001df17:	c1 e0 10             	shl    eax,0x10
c001df1a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df1d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df20:	e8 6b ff ff ff       	call   c001de90 <updateTimeUsed()>
c001df25:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df29:	83 c4 08             	add    esp,0x8
c001df2c:	5b                   	pop    ebx
c001df2d:	e9 30 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df32:	31 c0                	xor    eax,eax
c001df34:	eb e7                	jmp    c001df1d <switchToThread(ThreadControlBlock*)+0x28>
c001df36:	c7 05 a4 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ba4,0x1
c001df40:	83 c4 08             	add    esp,0x8
c001df43:	5b                   	pop    ebx
c001df44:	c3                   	ret    
c001df45:	90                   	nop

c001df46 <Semaphore::Semaphore(int)>:
c001df46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df4e:	89 10                	mov    DWORD PTR [eax],edx
c001df50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df54:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df6a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df71:	90                   	nop
c001df72:	c3                   	ret    
c001df73:	90                   	nop

c001df74 <Mutex::Mutex()>:
c001df74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df78:	6a 01                	push   0x1
c001df7a:	50                   	push   eax
c001df7b:	e8 c6 ff ff ff       	call   c001df46 <Semaphore::Semaphore(int)>
c001df80:	83 c4 08             	add    esp,0x8
c001df83:	90                   	nop
c001df84:	c3                   	ret    
c001df85:	90                   	nop

c001df86 <Process::createThread(void (*)(void*), void*, int)>:
c001df86:	55                   	push   ebp
c001df87:	31 c9                	xor    ecx,ecx
c001df89:	57                   	push   edi
c001df8a:	56                   	push   esi
c001df8b:	53                   	push   ebx
c001df8c:	83 ec 1c             	sub    esp,0x1c
c001df8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df93:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df9a:	89 f2                	mov    edx,esi
c001df9c:	0f b7 c2             	movzx  eax,dx
c001df9f:	83 e2 01             	and    edx,0x1
c001dfa2:	74 14                	je     c001dfb8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dfa4:	d1 f8                	sar    eax,1
c001dfa6:	41                   	inc    ecx
c001dfa7:	89 c2                	mov    edx,eax
c001dfa9:	83 f9 10             	cmp    ecx,0x10
c001dfac:	75 ee                	jne    c001df9c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dfae:	83 c4 1c             	add    esp,0x1c
c001dfb1:	31 c0                	xor    eax,eax
c001dfb3:	5b                   	pop    ebx
c001dfb4:	5e                   	pop    esi
c001dfb5:	5f                   	pop    edi
c001dfb6:	5d                   	pop    ebp
c001dfb7:	c3                   	ret    
c001dfb8:	83 ec 08             	sub    esp,0x8
c001dfbb:	b8 01 00 00 00       	mov    eax,0x1
c001dfc0:	d3 e0                	shl    eax,cl
c001dfc2:	09 c6                	or     esi,eax
c001dfc4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfca:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dfd1:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dfd4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dfd7:	01 ce                	add    esi,ecx
c001dfd9:	89 f0                	mov    eax,esi
c001dfdb:	c1 e0 05             	shl    eax,0x5
c001dfde:	01 c6                	add    esi,eax
c001dfe0:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dfe3:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dfe9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dff3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dff9:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dfff:	89 ca                	mov    edx,ecx
c001e001:	f7 da                	neg    edx
c001e003:	c1 e2 15             	shl    edx,0x15
c001e006:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e00c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e012:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e016:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e020:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e026:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e02a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e030:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e03a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e044:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e04b:	50                   	push   eax
c001e04c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e050:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e055:	e8 16 ab 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e05a:	83 c4 10             	add    esp,0x10
c001e05d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e061:	83 c4 1c             	add    esp,0x1c
c001e064:	5b                   	pop    ebx
c001e065:	5e                   	pop    esi
c001e066:	5f                   	pop    edi
c001e067:	5d                   	pop    ebp
c001e068:	c3                   	ret    
c001e069:	90                   	nop

c001e06a <Process::createUserThread()>:
c001e06a:	83 ec 0c             	sub    esp,0xc
c001e06d:	68 80 00 00 00       	push   0x80
c001e072:	6a 00                	push   0x0
c001e074:	68 58 de 01 c0       	push   0xc001de58
c001e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e07d:	e8 04 ff ff ff       	call   c001df86 <Process::createThread(void (*)(void*), void*, int)>
c001e082:	83 c4 1c             	add    esp,0x1c
c001e085:	c3                   	ret    

c001e086 <setupMultitasking(void (*)())>:
c001e086:	56                   	push   esi
c001e087:	53                   	push   ebx
c001e088:	53                   	push   ebx
c001e089:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e08d:	eb 10                	jmp    c001e09f <setupMultitasking(void (*)())+0x19>
c001e08f:	83 ec 0c             	sub    esp,0xc
c001e092:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e097:	e8 26 aa 00 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e09c:	83 c4 10             	add    esp,0x10
c001e09f:	83 ec 0c             	sub    esp,0xc
c001e0a2:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e0a7:	e8 fa a9 00 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0ac:	83 c4 10             	add    esp,0x10
c001e0af:	84 c0                	test   al,al
c001e0b1:	74 dc                	je     c001e08f <setupMultitasking(void (*)())+0x9>
c001e0b3:	83 ec 0c             	sub    esp,0xc
c001e0b6:	68 3f 07 00 00       	push   0x73f
c001e0bb:	e8 80 17 ff ff       	call   c000f840 <malloc>
c001e0c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0c7:	89 c3                	mov    ebx,eax
c001e0c9:	6a 00                	push   0x0
c001e0cb:	68 4f c4 02 c0       	push   0xc002c44f
c001e0d0:	6a 01                	push   0x1
c001e0d2:	50                   	push   eax
c001e0d3:	e8 b0 fb ff ff       	call   c001dc88 <Process::Process(bool, char const*, Process*, char**)>
c001e0d8:	83 c4 18             	add    esp,0x18
c001e0db:	89 1d d4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bd4,ebx
c001e0e1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0e7:	68 70 c5 02 c0       	push   0xc002c570
c001e0ec:	e8 8c 4e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e0f1:	58                   	pop    eax
c001e0f2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0f8:	e8 4c 2c ff ff       	call   c0010d49 <setActiveTerminal(VgaText*)>
c001e0fd:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e105:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e10b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e10e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e118:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e11e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e124:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e12e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e138:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e142:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e148:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e14e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e158:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e15e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e168:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e16e:	5a                   	pop    edx
c001e16f:	59                   	pop    ecx
c001e170:	68 4b c4 02 c0       	push   0xc002c44b
c001e175:	50                   	push   eax
c001e176:	e8 b9 26 fe ff       	call   c0000834 <strcpy>
c001e17b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e182:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e186:	83 c4 14             	add    esp,0x14
c001e189:	5b                   	pop    ebx
c001e18a:	5e                   	pop    esi
c001e18b:	e9 c4 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e190 <schedule()>:
c001e190:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c001e195:	85 c0                	test   eax,eax
c001e197:	74 0b                	je     c001e1a4 <schedule()+0x14>
c001e199:	c7 05 a4 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ba4,0x1
c001e1a3:	c3                   	ret    
c001e1a4:	53                   	push   ebx
c001e1a5:	83 ec 14             	sub    esp,0x14
c001e1a8:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e1ad:	e8 f4 a8 00 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1b2:	83 c4 10             	add    esp,0x10
c001e1b5:	84 c0                	test   al,al
c001e1b7:	75 38                	jne    c001e1f1 <schedule()+0x61>
c001e1b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1c1:	4a                   	dec    edx
c001e1c2:	74 32                	je     c001e1f6 <schedule()+0x66>
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e1cc:	e8 cd a8 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1d1:	c7 04 24 c8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bc8
c001e1d8:	89 c3                	mov    ebx,eax
c001e1da:	e8 e3 a8 00 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1df:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1e9:	e8 07 fd ff ff       	call   c001def5 <switchToThread(ThreadControlBlock*)>
c001e1ee:	83 c4 10             	add    esp,0x10
c001e1f1:	83 c4 08             	add    esp,0x8
c001e1f4:	5b                   	pop    ebx
c001e1f5:	c3                   	ret    
c001e1f6:	83 ec 08             	sub    esp,0x8
c001e1f9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e200:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e206:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e20b:	e8 60 a9 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e210:	83 c4 10             	add    esp,0x10
c001e213:	eb af                	jmp    c001e1c4 <schedule()+0x34>

c001e215 <unlockStuff()>:
c001e215:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c001e21a:	48                   	dec    eax
c001e21b:	a3 a8 1b 03 c0       	mov    ds:0xc0031ba8,eax
c001e220:	75 09                	jne    c001e22b <unlockStuff()+0x16>
c001e222:	a1 a4 1b 03 c0       	mov    eax,ds:0xc0031ba4
c001e227:	85 c0                	test   eax,eax
c001e229:	75 05                	jne    c001e230 <unlockStuff()+0x1b>
c001e22b:	e9 15 fc ff ff       	jmp    c001de45 <enableIRQs()>
c001e230:	83 ec 0c             	sub    esp,0xc
c001e233:	c7 05 a4 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ba4,0x0
c001e23d:	e8 4e ff ff ff       	call   c001e190 <schedule()>
c001e242:	83 c4 0c             	add    esp,0xc
c001e245:	e9 fb fb ff ff       	jmp    c001de45 <enableIRQs()>

c001e24a <Semaphore::tryAcquire()>:
c001e24a:	83 ec 0c             	sub    esp,0xc
c001e24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e251:	e8 25 fc ff ff       	call   c001de7b <lockStuff()>
c001e256:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e259:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e25b:	7c 0b                	jl     c001e268 <Semaphore::tryAcquire()+0x1e>
c001e25d:	e8 b3 ff ff ff       	call   c001e215 <unlockStuff()>
c001e262:	31 c0                	xor    eax,eax
c001e264:	83 c4 0c             	add    esp,0xc
c001e267:	c3                   	ret    
c001e268:	42                   	inc    edx
c001e269:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e26c:	e8 a4 ff ff ff       	call   c001e215 <unlockStuff()>
c001e271:	b0 01                	mov    al,0x1
c001e273:	83 c4 0c             	add    esp,0xc
c001e276:	c3                   	ret    
c001e277:	90                   	nop

c001e278 <Semaphore::assertLocked(char const*)>:
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e283:	e8 f3 fb ff ff       	call   c001de7b <lockStuff()>
c001e288:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e28a:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e28d:	7c 05                	jl     c001e294 <Semaphore::assertLocked(char const*)+0x1c>
c001e28f:	83 c4 0c             	add    esp,0xc
c001e292:	eb 81                	jmp    c001e215 <unlockStuff()>
c001e294:	83 ec 0c             	sub    esp,0xc
c001e297:	52                   	push   edx
c001e298:	e8 92 c3 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001e29d:	83 c4 10             	add    esp,0x10
c001e2a0:	83 c4 0c             	add    esp,0xc
c001e2a3:	e9 6d ff ff ff       	jmp    c001e215 <unlockStuff()>

c001e2a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2a8:	83 ec 0c             	sub    esp,0xc
c001e2ab:	e8 8f fb ff ff       	call   c001de3f <getIRQNestingLevel()>
c001e2b0:	83 ec 08             	sub    esp,0x8
c001e2b3:	50                   	push   eax
c001e2b4:	68 a4 c5 02 c0       	push   0xc002c5a4
c001e2b9:	e8 bf 4c ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e2be:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2ca:	e8 c1 fe ff ff       	call   c001e190 <schedule()>
c001e2cf:	e8 82 fb ff ff       	call   c001de56 <unlockScheduler()>
c001e2d4:	e8 66 fb ff ff       	call   c001de3f <getIRQNestingLevel()>
c001e2d9:	5a                   	pop    edx
c001e2da:	59                   	pop    ecx
c001e2db:	50                   	push   eax
c001e2dc:	68 d8 c5 02 c0       	push   0xc002c5d8
c001e2e1:	e8 97 4c ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e2e6:	83 c4 1c             	add    esp,0x1c
c001e2e9:	c3                   	ret    

c001e2ea <blockTask(TaskState)>:
c001e2ea:	83 ec 0c             	sub    esp,0xc
c001e2ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2f1:	e8 5e fb ff ff       	call   c001de54 <lockScheduler()>
c001e2f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2fb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2fe:	e8 8d fe ff ff       	call   c001e190 <schedule()>
c001e303:	83 c4 0c             	add    esp,0xc
c001e306:	e9 4b fb ff ff       	jmp    c001de56 <unlockScheduler()>

c001e30b <waitTask(int, int*, int)>:
c001e30b:	83 ec 18             	sub    esp,0x18
c001e30e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e313:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e317:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e31a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e31e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e323:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e326:	6a 07                	push   0x7
c001e328:	e8 bd ff ff ff       	call   c001e2ea <blockTask(TaskState)>
c001e32d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e332:	83 c4 10             	add    esp,0x10
c001e335:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e338:	85 d2                	test   edx,edx
c001e33a:	74 0a                	je     c001e346 <waitTask(int, int*, int)+0x3b>
c001e33c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e33f:	89 02                	mov    DWORD PTR [edx],eax
c001e341:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e346:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e349:	83 c4 0c             	add    esp,0xc
c001e34c:	c3                   	ret    

c001e34d <nanoSleepUntil(unsigned long long)>:
c001e34d:	83 ec 0c             	sub    esp,0xc
c001e350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e354:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e358:	3b 05 f0 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ecf0
c001e35e:	89 d1                	mov    ecx,edx
c001e360:	1b 0d f4 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ecf4
c001e366:	73 04                	jae    c001e36c <nanoSleepUntil(unsigned long long)+0x1f>
c001e368:	83 c4 0c             	add    esp,0xc
c001e36b:	c3                   	ret    
c001e36c:	e8 0a fb ff ff       	call   c001de7b <lockStuff()>
c001e371:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e377:	83 ec 08             	sub    esp,0x8
c001e37a:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e37d:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e380:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e386:	68 bc 1b 03 c0       	push   0xc0031bbc
c001e38b:	e8 e0 a7 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e390:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e397:	e8 4e ff ff ff       	call   c001e2ea <blockTask(TaskState)>
c001e39c:	83 c4 1c             	add    esp,0x1c
c001e39f:	e9 71 fe ff ff       	jmp    c001e215 <unlockStuff()>

c001e3a4 <nanoSleep(unsigned long long)>:
c001e3a4:	a1 f0 ec 02 c0       	mov    eax,ds:0xc002ecf0
c001e3a9:	8b 15 f4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecf4
c001e3af:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3b3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3b7:	eb 94                	jmp    c001e34d <nanoSleepUntil(unsigned long long)>

c001e3b9 <sleep(unsigned long long)>:
c001e3b9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3c1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3c6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3ca:	01 ca                	add    edx,ecx
c001e3cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3d0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3d4:	eb ce                	jmp    c001e3a4 <nanoSleep(unsigned long long)>

c001e3d6 <Semaphore::acquire()>:
c001e3d6:	83 ec 0c             	sub    esp,0xc
c001e3d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3dd:	e8 99 fa ff ff       	call   c001de7b <lockStuff()>
c001e3e2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3e5:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3e7:	7d 0c                	jge    c001e3f5 <Semaphore::acquire()+0x1f>
c001e3e9:	42                   	inc    edx
c001e3ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3ed:	83 c4 0c             	add    esp,0xc
c001e3f0:	e9 20 fe ff ff       	jmp    c001e215 <unlockStuff()>
c001e3f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3fb:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e402:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e405:	85 d2                	test   edx,edx
c001e407:	74 2a                	je     c001e433 <Semaphore::acquire()+0x5d>
c001e409:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e40c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e412:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e415:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e41b:	83 ec 0c             	sub    esp,0xc
c001e41e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e421:	6a 05                	push   0x5
c001e423:	e8 c2 fe ff ff       	call   c001e2ea <blockTask(TaskState)>
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	83 c4 0c             	add    esp,0xc
c001e42e:	e9 e2 fd ff ff       	jmp    c001e215 <unlockStuff()>
c001e433:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e439:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e43c:	eb d7                	jmp    c001e415 <Semaphore::acquire()+0x3f>

c001e43e <taskReturned>:
c001e43e:	83 ec 18             	sub    esp,0x18
c001e441:	68 0c c6 02 c0       	push   0xc002c60c
c001e446:	e8 e4 c1 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001e44b:	83 c4 10             	add    esp,0x10
c001e44e:	83 ec 0c             	sub    esp,0xc
c001e451:	6a 02                	push   0x2
c001e453:	e8 92 fe ff ff       	call   c001e2ea <blockTask(TaskState)>
c001e458:	e8 f7 f9 ff ff       	call   c001de54 <lockScheduler()>
c001e45d:	e8 2e fd ff ff       	call   c001e190 <schedule()>
c001e462:	e8 ef f9 ff ff       	call   c001de56 <unlockScheduler()>
c001e467:	83 c4 10             	add    esp,0x10
c001e46a:	eb e2                	jmp    c001e44e <taskReturned+0x10>

c001e46c <unblockTask(ThreadControlBlock*)>:
c001e46c:	53                   	push   ebx
c001e46d:	83 ec 08             	sub    esp,0x8
c001e470:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e474:	e8 db f9 ff ff       	call   c001de54 <lockScheduler()>
c001e479:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e47c:	85 c0                	test   eax,eax
c001e47e:	74 5c                	je     c001e4dc <unblockTask(ThreadControlBlock*)+0x70>
c001e480:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e483:	48                   	dec    eax
c001e484:	74 31                	je     c001e4b7 <unblockTask(ThreadControlBlock*)+0x4b>
c001e486:	83 ec 0c             	sub    esp,0xc
c001e489:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e48e:	e8 0b a6 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e493:	83 c4 10             	add    esp,0x10
c001e496:	85 c0                	test   eax,eax
c001e498:	75 17                	jne    c001e4b1 <unblockTask(ThreadControlBlock*)+0x45>
c001e49a:	eb 65                	jmp    c001e501 <unblockTask(ThreadControlBlock*)+0x95>
c001e49c:	83 ec 08             	sub    esp,0x8
c001e49f:	50                   	push   eax
c001e4a0:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e4a5:	e8 ce a8 00 00       	call   c0028d78 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4aa:	83 c4 10             	add    esp,0x10
c001e4ad:	85 c0                	test   eax,eax
c001e4af:	74 50                	je     c001e501 <unblockTask(ThreadControlBlock*)+0x95>
c001e4b1:	39 c3                	cmp    ebx,eax
c001e4b3:	75 e7                	jne    c001e49c <unblockTask(ThreadControlBlock*)+0x30>
c001e4b5:	eb 1c                	jmp    c001e4d3 <unblockTask(ThreadControlBlock*)+0x67>
c001e4b7:	83 ec 0c             	sub    esp,0xc
c001e4ba:	68 fc c6 02 c0       	push   0xc002c6fc
c001e4bf:	e8 b9 4a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e4c4:	c7 04 24 88 c6 02 c0 	mov    DWORD PTR [esp],0xc002c688
c001e4cb:	e8 ad 4a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e4d0:	83 c4 10             	add    esp,0x10
c001e4d3:	83 c4 08             	add    esp,0x8
c001e4d6:	5b                   	pop    ebx
c001e4d7:	e9 7a f9 ff ff       	jmp    c001de56 <unlockScheduler()>
c001e4dc:	83 ec 0c             	sub    esp,0xc
c001e4df:	68 40 c6 02 c0       	push   0xc002c640
c001e4e4:	e8 94 4a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e4e9:	c7 04 24 88 c6 02 c0 	mov    DWORD PTR [esp],0xc002c688
c001e4f0:	e8 88 4a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e4f5:	83 c4 10             	add    esp,0x10
c001e4f8:	83 c4 08             	add    esp,0x8
c001e4fb:	5b                   	pop    ebx
c001e4fc:	e9 55 f9 ff ff       	jmp    c001de56 <unlockScheduler()>
c001e501:	83 ec 08             	sub    esp,0x8
c001e504:	53                   	push   ebx
c001e505:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e50a:	e8 61 a6 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e50f:	83 c4 10             	add    esp,0x10
c001e512:	83 c4 08             	add    esp,0x8
c001e515:	5b                   	pop    ebx
c001e516:	e9 3b f9 ff ff       	jmp    c001de56 <unlockScheduler()>

c001e51b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e51b:	55                   	push   ebp
c001e51c:	57                   	push   edi
c001e51d:	56                   	push   esi
c001e51e:	53                   	push   ebx
c001e51f:	83 ec 1c             	sub    esp,0x1c
c001e522:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e526:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e529:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e52f:	85 ff                	test   edi,edi
c001e531:	7e 20                	jle    c001e553 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e533:	31 f6                	xor    esi,esi
c001e535:	83 ec 0c             	sub    esp,0xc
c001e538:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e53f:	46                   	inc    esi
c001e540:	e8 0b 13 ff ff       	call   c000f850 <free>
c001e545:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e548:	83 c4 10             	add    esp,0x10
c001e54b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e551:	7f e2                	jg     c001e535 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e553:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e55d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e562:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e565:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e568:	d3 c0                	rol    eax,cl
c001e56a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e571:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e574:	89 f7                	mov    edi,esi
c001e576:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e57e:	0f 85 74 01 00 00    	jne    c001e6f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e584:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e58a:	85 ed                	test   ebp,ebp
c001e58c:	74 1b                	je     c001e5a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e58e:	83 ec 0c             	sub    esp,0xc
c001e591:	55                   	push   ebp
c001e592:	e8 05 be ff ff       	call   c001a39c <EnvVarContainer::~EnvVarContainer()>
c001e597:	59                   	pop    ecx
c001e598:	5e                   	pop    esi
c001e599:	6a 0c                	push   0xc
c001e59b:	55                   	push   ebp
c001e59c:	e8 fc 48 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c001e5a1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5a4:	83 c4 10             	add    esp,0x10
c001e5a7:	89 f7                	mov    edi,esi
c001e5a9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5af:	85 c0                	test   eax,eax
c001e5b1:	0f 84 aa 00 00 00    	je     c001e661 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5b7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5ba:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5be:	31 c9                	xor    ecx,ecx
c001e5c0:	eb 10                	jmp    c001e5d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e5c2:	41                   	inc    ecx
c001e5c3:	83 f9 10             	cmp    ecx,0x10
c001e5c6:	0f 84 95 00 00 00    	je     c001e661 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5cc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5d2:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5d9:	d3 fa                	sar    edx,cl
c001e5db:	83 e2 01             	and    edx,0x1
c001e5de:	74 e2                	je     c001e5c2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5e0:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5e3:	01 ca                	add    edx,ecx
c001e5e5:	89 d5                	mov    ebp,edx
c001e5e7:	c1 e5 05             	shl    ebp,0x5
c001e5ea:	01 ea                	add    edx,ebp
c001e5ec:	01 d0                	add    eax,edx
c001e5ee:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5f4:	83 fd 07             	cmp    ebp,0x7
c001e5f7:	75 c9                	jne    c001e5c2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5f9:	05 40 02 00 00       	add    eax,0x240
c001e5fe:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e601:	83 fd ff             	cmp    ebp,0xffffffff
c001e604:	0f 8c 08 01 00 00    	jl     c001e712 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e60a:	0f 84 b9 01 00 00    	je     c001e7c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e610:	85 ed                	test   ebp,ebp
c001e612:	0f 84 a0 01 00 00    	je     c001e7b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e618:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e61a:	75 a6                	jne    c001e5c2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e61c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e622:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e626:	01 d0                	add    eax,edx
c001e628:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e62c:	83 ec 0c             	sub    esp,0xc
c001e62f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e635:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e638:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e63e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e645:	50                   	push   eax
c001e646:	e8 21 fe ff ff       	call   c001e46c <unblockTask(ThreadControlBlock*)>
c001e64b:	83 c4 10             	add    esp,0x10
c001e64e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e655:	89 f7                	mov    edi,esi
c001e657:	41                   	inc    ecx
c001e658:	83 f9 10             	cmp    ecx,0x10
c001e65b:	0f 85 6b ff ff ff    	jne    c001e5cc <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e661:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e667:	85 c0                	test   eax,eax
c001e669:	74 5d                	je     c001e6c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e66b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e671:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e677:	74 4f                	je     c001e6c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e679:	83 ec 0c             	sub    esp,0xc
c001e67c:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e681:	e8 18 a4 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e686:	c7 04 24 c8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bc8
c001e68d:	89 c7                	mov    edi,eax
c001e68f:	e8 12 a4 00 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e694:	83 c4 10             	add    esp,0x10
c001e697:	84 c0                	test   al,al
c001e699:	0f 84 e4 00 00 00    	je     c001e783 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e69f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6a2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6a8:	85 d2                	test   edx,edx
c001e6aa:	74 0f                	je     c001e6bb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6ac:	83 ec 0c             	sub    esp,0xc
c001e6af:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6b1:	52                   	push   edx
c001e6b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6b8:	83 c4 10             	add    esp,0x10
c001e6bb:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e6c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e6c8:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e6ce:	85 db                	test   ebx,ebx
c001e6d0:	74 16                	je     c001e6e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e6d2:	83 ec 0c             	sub    esp,0xc
c001e6d5:	53                   	push   ebx
c001e6d6:	e8 27 3b ff ff       	call   c0012202 <VAS::~VAS()>
c001e6db:	58                   	pop    eax
c001e6dc:	5a                   	pop    edx
c001e6dd:	6a 10                	push   0x10
c001e6df:	53                   	push   ebx
c001e6e0:	e8 b8 47 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c001e6e5:	83 c4 10             	add    esp,0x10
c001e6e8:	83 ec 0c             	sub    esp,0xc
c001e6eb:	68 56 c4 02 c0       	push   0xc002c456
c001e6f0:	e8 88 48 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e6f5:	83 c4 10             	add    esp,0x10
c001e6f8:	83 ec 08             	sub    esp,0x8
c001e6fb:	68 3f 07 00 00       	push   0x73f
c001e700:	68 64 c4 02 c0       	push   0xc002c464
c001e705:	e8 73 48 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e70a:	83 c4 2c             	add    esp,0x2c
c001e70d:	5b                   	pop    ebx
c001e70e:	5e                   	pop    esi
c001e70f:	5f                   	pop    edi
c001e710:	5d                   	pop    ebp
c001e711:	c3                   	ret    
c001e712:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e716:	83 ec 0c             	sub    esp,0xc
c001e719:	68 40 c7 02 c0       	push   0xc002c740
c001e71e:	e8 0c bf ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001e723:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e726:	83 c4 10             	add    esp,0x10
c001e729:	89 f7                	mov    edi,esi
c001e72b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e72f:	e9 8e fe ff ff       	jmp    c001e5c2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e734:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e73a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e740:	75 1c                	jne    c001e75e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e742:	83 ec 0c             	sub    esp,0xc
c001e745:	68 a8 c7 02 c0       	push   0xc002c7a8
c001e74a:	e8 2e 48 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e74f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e756:	e8 8f fb ff ff       	call   c001e2ea <blockTask(TaskState)>
c001e75b:	83 c4 10             	add    esp,0x10
c001e75e:	83 ec 08             	sub    esp,0x8
c001e761:	56                   	push   esi
c001e762:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e767:	e8 04 a4 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e76c:	c7 04 24 c8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bc8
c001e773:	e8 26 a3 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e778:	83 c4 10             	add    esp,0x10
c001e77b:	39 f8                	cmp    eax,edi
c001e77d:	0f 84 1c ff ff ff    	je     c001e69f <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e783:	83 ec 0c             	sub    esp,0xc
c001e786:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e78b:	e8 0e a3 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e790:	c7 04 24 c8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bc8
c001e797:	89 c6                	mov    esi,eax
c001e799:	e8 24 a3 00 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e79e:	83 c4 10             	add    esp,0x10
c001e7a1:	39 f3                	cmp    ebx,esi
c001e7a3:	74 b9                	je     c001e75e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7a5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7a8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7ab:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7b1:	75 ab                	jne    c001e75e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7b3:	e9 7c ff ff ff       	jmp    c001e734 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7bc:	83 ec 0c             	sub    esp,0xc
c001e7bf:	68 74 c7 02 c0       	push   0xc002c774
c001e7c4:	e9 55 ff ff ff       	jmp    c001e71e <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e7c9:	8b 36                	mov    esi,DWORD PTR [esi]
c001e7cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7cf:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e7d2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7d5:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7db:	01 d7                	add    edi,edx
c001e7dd:	89 f8                	mov    eax,edi
c001e7df:	e9 44 fe ff ff       	jmp    c001e628 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7e4 <cleanerTaskFunction(void*)>:
c001e7e4:	53                   	push   ebx
c001e7e5:	83 ec 08             	sub    esp,0x8
c001e7e8:	e8 69 f6 ff ff       	call   c001de56 <unlockScheduler()>
c001e7ed:	e8 62 f6 ff ff       	call   c001de54 <lockScheduler()>
c001e7f2:	80 3d 8c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b8c,0x0
c001e7f9:	0f 85 8e 00 00 00    	jne    c001e88d <cleanerTaskFunction(void*)+0xa9>
c001e7ff:	83 ec 0c             	sub    esp,0xc
c001e802:	6a 02                	push   0x2
c001e804:	e8 9f fa ff ff       	call   c001e2a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e809:	83 c4 10             	add    esp,0x10
c001e80c:	c6 05 8c 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b8c,0x0
c001e813:	e8 63 f6 ff ff       	call   c001de7b <lockStuff()>
c001e818:	e8 37 f6 ff ff       	call   c001de54 <lockScheduler()>
c001e81d:	83 ec 0c             	sub    esp,0xc
c001e820:	68 b0 1b 03 c0       	push   0xc0031bb0
c001e825:	e8 7c a2 00 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e82a:	83 c4 10             	add    esp,0x10
c001e82d:	84 c0                	test   al,al
c001e82f:	75 40                	jne    c001e871 <cleanerTaskFunction(void*)+0x8d>
c001e831:	83 ec 0c             	sub    esp,0xc
c001e834:	68 b0 1b 03 c0       	push   0xc0031bb0
c001e839:	e8 60 a2 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e83e:	c7 04 24 b0 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bb0
c001e845:	89 c3                	mov    ebx,eax
c001e847:	e8 76 a2 00 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e84c:	c7 04 24 7a c4 02 c0 	mov    DWORD PTR [esp],0xc002c47a
c001e853:	e8 25 47 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e858:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e85b:	e8 bb fc ff ff       	call   c001e51b <cleanupTerminatedTask(ThreadControlBlock*)>
c001e860:	c7 04 24 93 c4 02 c0 	mov    DWORD PTR [esp],0xc002c493
c001e867:	e8 11 47 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e86c:	83 c4 10             	add    esp,0x10
c001e86f:	eb ac                	jmp    c001e81d <cleanerTaskFunction(void*)+0x39>
c001e871:	e8 e0 f5 ff ff       	call   c001de56 <unlockScheduler()>
c001e876:	e8 9a f9 ff ff       	call   c001e215 <unlockStuff()>
c001e87b:	e8 d4 f5 ff ff       	call   c001de54 <lockScheduler()>
c001e880:	80 3d 8c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b8c,0x0
c001e887:	0f 84 72 ff ff ff    	je     c001e7ff <cleanerTaskFunction(void*)+0x1b>
c001e88d:	e8 c4 f5 ff ff       	call   c001de56 <unlockScheduler()>
c001e892:	e9 75 ff ff ff       	jmp    c001e80c <cleanerTaskFunction(void*)+0x28>

c001e897 <terminateTask(int)>:
c001e897:	83 ec 14             	sub    esp,0x14
c001e89a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e89f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8a2:	83 c0 0c             	add    eax,0xc
c001e8a5:	50                   	push   eax
c001e8a6:	68 d0 c7 02 c0       	push   0xc002c7d0
c001e8ab:	e8 cd 46 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e8b0:	e8 c6 f5 ff ff       	call   c001de7b <lockStuff()>
c001e8b5:	e8 9a f5 ff ff       	call   c001de54 <lockScheduler()>
c001e8ba:	c7 04 24 a6 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4a6
c001e8c1:	e8 b7 46 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e8c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8cf:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e8d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8d7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8da:	5a                   	pop    edx
c001e8db:	59                   	pop    ecx
c001e8dc:	50                   	push   eax
c001e8dd:	68 b0 1b 03 c0       	push   0xc0031bb0
c001e8e2:	e8 89 a2 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8ec:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8f3:	c7 04 24 c0 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4c0
c001e8fa:	e8 7e 46 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e8ff:	83 c4 10             	add    esp,0x10
c001e902:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001e907:	85 c0                	test   eax,eax
c001e909:	74 5a                	je     c001e965 <terminateTask(int)+0xce>
c001e90b:	83 ec 0c             	sub    esp,0xc
c001e90e:	68 da c4 02 c0       	push   0xc002c4da
c001e913:	e8 65 46 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e918:	58                   	pop    eax
c001e919:	c6 05 8c 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b8c,0x1
c001e920:	ff 35 88 1b 03 c0    	push   DWORD PTR ds:0xc0031b88
c001e926:	e8 41 fb ff ff       	call   c001e46c <unblockTask(ThreadControlBlock*)>
c001e92b:	c7 04 24 f4 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4f4
c001e932:	e8 46 46 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e937:	83 c4 10             	add    esp,0x10
c001e93a:	e8 17 f5 ff ff       	call   c001de56 <unlockScheduler()>
c001e93f:	e8 d1 f8 ff ff       	call   c001e215 <unlockStuff()>
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	68 2c c5 02 c0       	push   0xc002c52c
c001e94c:	e8 2c 46 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e951:	83 c4 10             	add    esp,0x10
c001e954:	e8 fb f4 ff ff       	call   c001de54 <lockScheduler()>
c001e959:	e8 32 f8 ff ff       	call   c001e190 <schedule()>
c001e95e:	e8 f3 f4 ff ff       	call   c001de56 <unlockScheduler()>
c001e963:	eb ef                	jmp    c001e954 <terminateTask(int)+0xbd>
c001e965:	83 ec 0c             	sub    esp,0xc
c001e968:	68 0e c5 02 c0       	push   0xc002c50e
c001e96d:	e8 0b 46 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	eb c3                	jmp    c001e93a <terminateTask(int)+0xa3>

c001e977 <Thr::terminateFromIRQ(int)>:
c001e977:	83 ec 18             	sub    esp,0x18
c001e97a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e97e:	e8 14 ff ff ff       	call   c001e897 <terminateTask(int)>
c001e983:	90                   	nop

c001e984 <Semaphore::release()>:
c001e984:	83 ec 0c             	sub    esp,0xc
c001e987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98b:	e8 eb f4 ff ff       	call   c001de7b <lockStuff()>
c001e990:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e993:	85 d2                	test   edx,edx
c001e995:	74 1a                	je     c001e9b1 <Semaphore::release()+0x2d>
c001e997:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e99a:	83 ec 0c             	sub    esp,0xc
c001e99d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9a0:	52                   	push   edx
c001e9a1:	e8 c6 fa ff ff       	call   c001e46c <unblockTask(ThreadControlBlock*)>
c001e9a6:	83 c4 10             	add    esp,0x10
c001e9a9:	83 c4 0c             	add    esp,0xc
c001e9ac:	e9 64 f8 ff ff       	jmp    c001e215 <unlockStuff()>
c001e9b1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9b4:	83 c4 0c             	add    esp,0xc
c001e9b7:	e9 59 f8 ff ff       	jmp    c001e215 <unlockStuff()>

c001e9bc <__static_initialization_and_destruction_0(int, int)>:
c001e9bc:	83 ec 0c             	sub    esp,0xc
c001e9bf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9c4:	0f 85 88 00 00 00    	jne    c001ea52 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9ca:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e9d2:	75 7e                	jne    c001ea52 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9d4:	83 ec 0c             	sub    esp,0xc
c001e9d7:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e9dc:	e8 3f a3 00 00       	call   c0028d20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9e1:	83 c4 10             	add    esp,0x10
c001e9e4:	83 ec 04             	sub    esp,0x4
c001e9e7:	68 88 d5 02 c0       	push   0xc002d588
c001e9ec:	68 c8 1b 03 c0       	push   0xc0031bc8
c001e9f1:	68 e0 8c 02 c0       	push   0xc0028ce0
c001e9f6:	e8 1c 44 ff ff       	call   c0012e17 <__cxa_atexit>
c001e9fb:	83 c4 10             	add    esp,0x10
c001e9fe:	83 ec 0c             	sub    esp,0xc
c001ea01:	68 bc 1b 03 c0       	push   0xc0031bbc
c001ea06:	e8 15 a3 00 00       	call   c0028d20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	83 ec 04             	sub    esp,0x4
c001ea11:	68 88 d5 02 c0       	push   0xc002d588
c001ea16:	68 bc 1b 03 c0       	push   0xc0031bbc
c001ea1b:	68 e0 8c 02 c0       	push   0xc0028ce0
c001ea20:	e8 f2 43 ff ff       	call   c0012e17 <__cxa_atexit>
c001ea25:	83 c4 10             	add    esp,0x10
c001ea28:	83 ec 0c             	sub    esp,0xc
c001ea2b:	68 b0 1b 03 c0       	push   0xc0031bb0
c001ea30:	e8 eb a2 00 00       	call   c0028d20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea35:	83 c4 10             	add    esp,0x10
c001ea38:	83 ec 04             	sub    esp,0x4
c001ea3b:	68 88 d5 02 c0       	push   0xc002d588
c001ea40:	68 b0 1b 03 c0       	push   0xc0031bb0
c001ea45:	68 e0 8c 02 c0       	push   0xc0028ce0
c001ea4a:	e8 c8 43 ff ff       	call   c0012e17 <__cxa_atexit>
c001ea4f:	83 c4 10             	add    esp,0x10
c001ea52:	90                   	nop
c001ea53:	83 c4 0c             	add    esp,0xc
c001ea56:	c3                   	ret    

c001ea57 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea57:	83 ec 0c             	sub    esp,0xc
c001ea5a:	83 ec 08             	sub    esp,0x8
c001ea5d:	68 ff ff 00 00       	push   0xffff
c001ea62:	6a 01                	push   0x1
c001ea64:	e8 53 ff ff ff       	call   c001e9bc <__static_initialization_and_destruction_0(int, int)>
c001ea69:	83 c4 10             	add    esp,0x10
c001ea6c:	83 c4 0c             	add    esp,0xc
c001ea6f:	c3                   	ret    

c001ea70 <Vm::inbv(unsigned short)>:
c001ea70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea74:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea79:	75 06                	jne    c001ea81 <Vm::inbv(unsigned short)+0x11>
c001ea7b:	a0 0c 1c 03 c0       	mov    al,ds:0xc0031c0c
c001ea80:	c3                   	ret    
c001ea81:	ec                   	in     al,dx
c001ea82:	c3                   	ret    

c001ea83 <Vm::outbv(unsigned short, unsigned char)>:
c001ea83:	53                   	push   ebx
c001ea84:	83 ec 08             	sub    esp,0x8
c001ea87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea8f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea94:	75 38                	jne    c001eace <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea96:	0f b6 c3             	movzx  eax,bl
c001ea99:	51                   	push   ecx
c001ea9a:	51                   	push   ecx
c001ea9b:	50                   	push   eax
c001ea9c:	68 ef c7 02 c0       	push   0xc002c7ef
c001eaa1:	e8 d7 44 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001eaa6:	8b 15 0c 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c0c
c001eaac:	83 c4 10             	add    esp,0x10
c001eaaf:	8d 42 01             	lea    eax,[edx+0x1]
c001eab2:	88 9a 20 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce3e0],bl
c001eab8:	a3 0c 1c 03 c0       	mov    ds:0xc0031c0c,eax
c001eabd:	83 f8 20             	cmp    eax,0x20
c001eac0:	75 0f                	jne    c001ead1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eac2:	c7 05 0c 1c 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031c0c,0x1f
c001eacc:	eb 03                	jmp    c001ead1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eace:	88 d8                	mov    al,bl
c001ead0:	ee                   	out    dx,al
c001ead1:	83 c4 08             	add    esp,0x8
c001ead4:	5b                   	pop    ebx
c001ead5:	c3                   	ret    

c001ead6 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ead6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eadb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eae0:	c1 e0 04             	shl    eax,0x4
c001eae3:	01 d0                	add    eax,edx
c001eae5:	c3                   	ret    

c001eae6 <Vm::getSegment(unsigned int)>:
c001eae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaea:	c1 e8 10             	shr    eax,0x10
c001eaed:	c3                   	ret    

c001eaee <Vm::getOffset(unsigned int)>:
c001eaee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaf2:	c3                   	ret    

c001eaf3 <Vm::mainloop2()>:
c001eaf3:	83 ec 0c             	sub    esp,0xc
c001eaf6:	e8 59 f3 ff ff       	call   c001de54 <lockScheduler()>
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	c6 05 05 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c05,0x1
c001eb05:	6a 02                	push   0x2
c001eb07:	e8 9c f7 ff ff       	call   c001e2a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb11:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb15:	52                   	push   edx
c001eb16:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb1a:	52                   	push   edx
c001eb1b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb1f:	52                   	push   edx
c001eb20:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb24:	50                   	push   eax
c001eb25:	e8 d0 17 fe ff       	call   c00002fa <goToVM86>
c001eb2a:	83 c4 2c             	add    esp,0x2c
c001eb2d:	c3                   	ret    

c001eb2e <Vm::mainVm8086Loop(void*)>:
c001eb2e:	83 ec 0c             	sub    esp,0xc
c001eb31:	e8 20 f3 ff ff       	call   c001de56 <unlockScheduler()>
c001eb36:	83 c4 0c             	add    esp,0xc
c001eb39:	eb b8                	jmp    c001eaf3 <Vm::mainloop2()>

c001eb3b <Vm::mainloop3(unsigned long)>:
c001eb3b:	53                   	push   ebx
c001eb3c:	83 ec 08             	sub    esp,0x8
c001eb3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb43:	e8 0c f3 ff ff       	call   c001de54 <lockScheduler()>
c001eb48:	83 ec 0c             	sub    esp,0xc
c001eb4b:	89 1d 00 1c 03 c0    	mov    DWORD PTR ds:0xc0031c00,ebx
c001eb51:	6a 02                	push   0x2
c001eb53:	c6 05 04 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c04,0x1
c001eb5a:	e8 49 f7 ff ff       	call   c001e2a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb5f:	83 c4 18             	add    esp,0x18
c001eb62:	5b                   	pop    ebx
c001eb63:	eb 8e                	jmp    c001eaf3 <Vm::mainloop2()>

c001eb65 <Vm::initialise8086()>:
c001eb65:	83 ec 0c             	sub    esp,0xc
c001eb68:	68 80 00 00 00       	push   0x80
c001eb6d:	6a 00                	push   0x0
c001eb6f:	68 2e eb 01 c0       	push   0xc001eb2e
c001eb74:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c001eb7a:	e8 07 f4 ff ff       	call   c001df86 <Process::createThread(void (*)(void*), void*, int)>
c001eb7f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb86:	a3 08 1c 03 c0       	mov    ds:0xc0031c08,eax
c001eb8b:	68 00 01 00 00       	push   0x100
c001eb90:	a1 d4 1b 03 c0       	mov    eax,ds:0xc0031bd4
c001eb95:	6a 00                	push   0x0
c001eb97:	6a 00                	push   0x0
c001eb99:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb9f:	e8 be 3a ff ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eba4:	83 c4 2c             	add    esp,0x2c
c001eba7:	c3                   	ret    

c001eba8 <Vm::finish8086()>:
c001eba8:	53                   	push   ebx
c001eba9:	83 ec 08             	sub    esp,0x8
c001ebac:	e8 a3 f2 ff ff       	call   c001de54 <lockScheduler()>
c001ebb1:	80 3d 04 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c04,0x0
c001ebb8:	75 0c                	jne    c001ebc6 <Vm::finish8086()+0x1e>
c001ebba:	e8 d1 f5 ff ff       	call   c001e190 <schedule()>
c001ebbf:	e8 92 f2 ff ff       	call   c001de56 <unlockScheduler()>
c001ebc4:	eb e6                	jmp    c001ebac <Vm::finish8086()+0x4>
c001ebc6:	83 ec 0c             	sub    esp,0xc
c001ebc9:	8b 1d 00 1c 03 c0    	mov    ebx,DWORD PTR ds:0xc0031c00
c001ebcf:	ff 35 08 1c 03 c0    	push   DWORD PTR ds:0xc0031c08
c001ebd5:	c6 05 04 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031c04,0x0
c001ebdc:	e8 8b f8 ff ff       	call   c001e46c <unblockTask(ThreadControlBlock*)>
c001ebe1:	e8 70 f2 ff ff       	call   c001de56 <unlockScheduler()>
c001ebe6:	89 d8                	mov    eax,ebx
c001ebe8:	83 c4 18             	add    esp,0x18
c001ebeb:	5b                   	pop    ebx
c001ebec:	c3                   	ret    

c001ebed <Vm::getOutput8086(unsigned char*)>:
c001ebed:	83 ec 10             	sub    esp,0x10
c001ebf0:	ff 35 0c 1c 03 c0    	push   DWORD PTR ds:0xc0031c0c
c001ebf6:	68 20 1c 03 c0       	push   0xc0031c20
c001ebfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebff:	e8 40 1b fe ff       	call   c0000744 <memcpy>
c001ec04:	a1 0c 1c 03 c0       	mov    eax,ds:0xc0031c0c
c001ec09:	c7 05 0c 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c0c,0x0
c001ec13:	83 c4 1c             	add    esp,0x1c
c001ec16:	c3                   	ret    

c001ec17 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec17:	55                   	push   ebp
c001ec18:	57                   	push   edi
c001ec19:	56                   	push   esi
c001ec1a:	53                   	push   ebx
c001ec1b:	83 ec 2c             	sub    esp,0x2c
c001ec1e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec22:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec26:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec2a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec2e:	e8 21 f2 ff ff       	call   c001de54 <lockScheduler()>
c001ec33:	a0 05 1c 03 c0       	mov    al,ds:0xc0031c05
c001ec38:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec3c:	84 c0                	test   al,al
c001ec3e:	75 0c                	jne    c001ec4c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec40:	e8 4b f5 ff ff       	call   c001e190 <schedule()>
c001ec45:	e8 0c f2 ff ff       	call   c001de56 <unlockScheduler()>
c001ec4a:	eb e2                	jmp    c001ec2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec4c:	a1 08 1c 03 c0       	mov    eax,ds:0xc0031c08
c001ec51:	c7 05 0c 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c0c,0x0
c001ec5b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec5f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec63:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec67:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec6b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec6f:	50                   	push   eax
c001ec70:	6a 20                	push   0x20
c001ec72:	6a 00                	push   0x0
c001ec74:	68 20 1c 03 c0       	push   0xc0031c20
c001ec79:	e8 fa 1a fe ff       	call   c0000778 <memset>
c001ec7e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec85:	e8 b6 0b ff ff       	call   c000f840 <malloc>
c001ec8a:	83 c4 0c             	add    esp,0xc
c001ec8d:	89 c7                	mov    edi,eax
c001ec8f:	ff 35 d4 1b 03 c0    	push   DWORD PTR ds:0xc0031bd4
c001ec95:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec99:	50                   	push   eax
c001ec9a:	e8 37 48 ff ff       	call   c00134d6 <File::File(char const*, Process*)>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	85 ff                	test   edi,edi
c001eca4:	75 0a                	jne    c001ecb0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001eca6:	83 ec 0c             	sub    esp,0xc
c001eca9:	68 0b c8 02 c0       	push   0xc002c80b
c001ecae:	eb 27                	jmp    c001ecd7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ecb0:	50                   	push   eax
c001ecb1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ecb5:	50                   	push   eax
c001ecb6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecba:	50                   	push   eax
c001ecbb:	57                   	push   edi
c001ecbc:	e8 25 4b ff ff       	call   c00137e6 <File::stat(unsigned long long*, bool*)>
c001ecc1:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ecc6:	83 c4 10             	add    esp,0x10
c001ecc9:	89 e8                	mov    eax,ebp
c001eccb:	84 c0                	test   al,al
c001eccd:	74 19                	je     c001ece8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eccf:	83 ec 0c             	sub    esp,0xc
c001ecd2:	68 1f c8 02 c0       	push   0xc002c81f
c001ecd7:	e8 53 b9 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001ecdc:	31 ed                	xor    ebp,ebp
c001ecde:	e8 73 f1 ff ff       	call   c001de56 <unlockScheduler()>
c001ece3:	83 c4 10             	add    esp,0x10
c001ece6:	eb 75                	jmp    c001ed5d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ece8:	50                   	push   eax
c001ece9:	50                   	push   eax
c001ecea:	6a 01                	push   0x1
c001ecec:	57                   	push   edi
c001eced:	e8 48 48 ff ff       	call   c001353a <File::open(FileOpenMode)>
c001ecf2:	83 c4 10             	add    esp,0x10
c001ecf5:	85 c0                	test   eax,eax
c001ecf7:	74 17                	je     c001ed10 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecf9:	83 ec 0c             	sub    esp,0xc
c001ecfc:	68 38 c8 02 c0       	push   0xc002c838
c001ed01:	e8 29 b9 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001ed06:	e8 4b f1 ff ff       	call   c001de56 <unlockScheduler()>
c001ed0b:	83 c4 10             	add    esp,0x10
c001ed0e:	eb 4d                	jmp    c001ed5d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed10:	0f b7 f6             	movzx  esi,si
c001ed13:	50                   	push   eax
c001ed14:	0f b7 db             	movzx  ebx,bx
c001ed17:	50                   	push   eax
c001ed18:	56                   	push   esi
c001ed19:	53                   	push   ebx
c001ed1a:	e8 b7 fd ff ff       	call   c001ead6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed1f:	5a                   	pop    edx
c001ed20:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed22:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed26:	51                   	push   ecx
c001ed27:	50                   	push   eax
c001ed28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed30:	57                   	push   edi
c001ed31:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed34:	83 c4 14             	add    esp,0x14
c001ed37:	57                   	push   edi
c001ed38:	e8 5b 48 ff ff       	call   c0013598 <File::close()>
c001ed3d:	c6 05 05 1c 03 c0 00 	mov    BYTE PTR ds:0xc0031c05,0x0
c001ed44:	e8 0d f1 ff ff       	call   c001de56 <unlockScheduler()>
c001ed49:	59                   	pop    ecx
c001ed4a:	ff 35 08 1c 03 c0    	push   DWORD PTR ds:0xc0031c08
c001ed50:	e8 17 f7 ff ff       	call   c001e46c <unblockTask(ThreadControlBlock*)>
c001ed55:	83 c4 10             	add    esp,0x10
c001ed58:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed5d:	83 c4 2c             	add    esp,0x2c
c001ed60:	89 e8                	mov    eax,ebp
c001ed62:	5b                   	pop    ebx
c001ed63:	5e                   	pop    esi
c001ed64:	5f                   	pop    edi
c001ed65:	5d                   	pop    ebp
c001ed66:	c3                   	ret    

c001ed67 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed67:	57                   	push   edi
c001ed68:	56                   	push   esi
c001ed69:	53                   	push   ebx
c001ed6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed76:	83 e8 06             	sub    eax,0x6
c001ed79:	0f b7 c0             	movzx  eax,ax
c001ed7c:	50                   	push   eax
c001ed7d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed82:	50                   	push   eax
c001ed83:	e8 4e fd ff ff       	call   c001ead6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed88:	5a                   	pop    edx
c001ed89:	5e                   	pop    esi
c001ed8a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed8d:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed90:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed96:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed99:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed9c:	83 c2 02             	add    edx,0x2
c001ed9f:	66 89 10             	mov    WORD PTR [eax],dx
c001eda2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001eda5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001eda9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001edac:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001edb0:	89 d6                	mov    esi,edx
c001edb2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edb8:	66 81 e6 ff fd       	and    si,0xfdff
c001edbd:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001edc1:	74 07                	je     c001edca <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001edc3:	89 d6                	mov    esi,edx
c001edc5:	66 81 ce 00 02       	or     si,0x200
c001edca:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001edce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edd3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001edd7:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001eddf:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ede2:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edea:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001eded:	5b                   	pop    ebx
c001edee:	5e                   	pop    esi
c001edef:	5f                   	pop    edi
c001edf0:	c3                   	ret    

c001edf1 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001edf1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edf6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edfb:	c1 e0 04             	shl    eax,0x4
c001edfe:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee01:	c3                   	ret    

c001ee02 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee02:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee07:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee0c:	c1 e0 04             	shl    eax,0x4
c001ee0f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee13:	c3                   	ret    

c001ee14 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee14:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee19:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee1e:	c1 e0 04             	shl    eax,0x4
c001ee21:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee24:	c3                   	ret    

c001ee25 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee25:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee2a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee2f:	c1 e0 04             	shl    eax,0x4
c001ee32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee36:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee39:	c3                   	ret    

c001ee3a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee3a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee3f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee44:	c1 e0 04             	shl    eax,0x4
c001ee47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee4b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee4f:	c3                   	ret    

c001ee50 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee50:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee55:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee5a:	c1 e0 04             	shl    eax,0x4
c001ee5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee61:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee64:	c3                   	ret    

c001ee65 <Vm::faultHandler(regs*)>:
c001ee65:	55                   	push   ebp
c001ee66:	57                   	push   edi
c001ee67:	56                   	push   esi
c001ee68:	53                   	push   ebx
c001ee69:	83 ec 1c             	sub    esp,0x1c
c001ee6c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee70:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee73:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee76:	0f b7 c1             	movzx  eax,cx
c001ee79:	50                   	push   eax
c001ee7a:	0f b7 c3             	movzx  eax,bx
c001ee7d:	c1 e3 04             	shl    ebx,0x4
c001ee80:	50                   	push   eax
c001ee81:	e8 50 fc ff ff       	call   c001ead6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee86:	5a                   	pop    edx
c001ee87:	89 c5                	mov    ebp,eax
c001ee89:	5e                   	pop    esi
c001ee8a:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee8e:	50                   	push   eax
c001ee8f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee93:	50                   	push   eax
c001ee94:	e8 3d fc ff ff       	call   c001ead6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee99:	01 cb                	add    ebx,ecx
c001ee9b:	89 c6                	mov    esi,eax
c001ee9d:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eea1:	50                   	push   eax
c001eea2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eea6:	50                   	push   eax
c001eea7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eeab:	50                   	push   eax
c001eeac:	55                   	push   ebp
c001eead:	53                   	push   ebx
c001eeae:	b3 06                	mov    bl,0x6
c001eeb0:	68 51 c8 02 c0       	push   0xc002c851
c001eeb5:	e8 c3 40 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001eeba:	83 c4 20             	add    esp,0x20
c001eebd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eec2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eec7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eecb:	3c 9d                	cmp    al,0x9d
c001eecd:	0f 84 d7 02 00 00    	je     c001f1aa <Vm::faultHandler(regs*)+0x345>
c001eed3:	0f 87 a3 00 00 00    	ja     c001ef7c <Vm::faultHandler(regs*)+0x117>
c001eed9:	3c 66                	cmp    al,0x66
c001eedb:	0f 84 15 02 00 00    	je     c001f0f6 <Vm::faultHandler(regs*)+0x291>
c001eee1:	77 5f                	ja     c001ef42 <Vm::faultHandler(regs*)+0xdd>
c001eee3:	3c 36                	cmp    al,0x36
c001eee5:	0f 84 f1 01 00 00    	je     c001f0dc <Vm::faultHandler(regs*)+0x277>
c001eeeb:	77 28                	ja     c001ef15 <Vm::faultHandler(regs*)+0xb0>
c001eeed:	3c 26                	cmp    al,0x26
c001eeef:	0f 84 99 01 00 00    	je     c001f08e <Vm::faultHandler(regs*)+0x229>
c001eef5:	3c 2e                	cmp    al,0x2e
c001eef7:	0f 85 3b 07 00 00    	jne    c001f638 <Vm::faultHandler(regs*)+0x7d3>
c001eefd:	83 ec 0c             	sub    esp,0xc
c001ef00:	31 db                	xor    ebx,ebx
c001ef02:	68 66 c8 02 c0       	push   0xc002c866
c001ef07:	e8 71 40 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001ef0c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef0f:	83 c4 10             	add    esp,0x10
c001ef12:	45                   	inc    ebp
c001ef13:	eb b2                	jmp    c001eec7 <Vm::faultHandler(regs*)+0x62>
c001ef15:	3c 64                	cmp    al,0x64
c001ef17:	0f 84 8b 01 00 00    	je     c001f0a8 <Vm::faultHandler(regs*)+0x243>
c001ef1d:	0f 87 9f 01 00 00    	ja     c001f0c2 <Vm::faultHandler(regs*)+0x25d>
c001ef23:	3c 3e                	cmp    al,0x3e
c001ef25:	0f 85 0d 07 00 00    	jne    c001f638 <Vm::faultHandler(regs*)+0x7d3>
c001ef2b:	83 ec 0c             	sub    esp,0xc
c001ef2e:	b3 01                	mov    bl,0x1
c001ef30:	68 6a c8 02 c0       	push   0xc002c86a
c001ef35:	e8 43 40 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001ef3a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef3d:	83 c4 10             	add    esp,0x10
c001ef40:	eb d0                	jmp    c001ef12 <Vm::faultHandler(regs*)+0xad>
c001ef42:	3c 6d                	cmp    al,0x6d
c001ef44:	0f 84 af 03 00 00    	je     c001f2f9 <Vm::faultHandler(regs*)+0x494>
c001ef4a:	77 15                	ja     c001ef61 <Vm::faultHandler(regs*)+0xfc>
c001ef4c:	3c 67                	cmp    al,0x67
c001ef4e:	0f 84 bf 01 00 00    	je     c001f113 <Vm::faultHandler(regs*)+0x2ae>
c001ef54:	3c 6c                	cmp    al,0x6c
c001ef56:	0f 84 3f 03 00 00    	je     c001f29b <Vm::faultHandler(regs*)+0x436>
c001ef5c:	e9 d7 06 00 00       	jmp    c001f638 <Vm::faultHandler(regs*)+0x7d3>
c001ef61:	3c 6f                	cmp    al,0x6f
c001ef63:	0f 84 a4 04 00 00    	je     c001f40d <Vm::faultHandler(regs*)+0x5a8>
c001ef69:	0f 82 11 04 00 00    	jb     c001f380 <Vm::faultHandler(regs*)+0x51b>
c001ef6f:	3c 9c                	cmp    al,0x9c
c001ef71:	0f 84 ba 01 00 00    	je     c001f131 <Vm::faultHandler(regs*)+0x2cc>
c001ef77:	e9 bc 06 00 00       	jmp    c001f638 <Vm::faultHandler(regs*)+0x7d3>
c001ef7c:	3c ec                	cmp    al,0xec
c001ef7e:	0f 84 24 06 00 00    	je     c001f5a8 <Vm::faultHandler(regs*)+0x743>
c001ef84:	0f 87 93 00 00 00    	ja     c001f01d <Vm::faultHandler(regs*)+0x1b8>
c001ef8a:	3c e4                	cmp    al,0xe4
c001ef8c:	0f 84 5c 05 00 00    	je     c001f4ee <Vm::faultHandler(regs*)+0x689>
c001ef92:	77 6a                	ja     c001effe <Vm::faultHandler(regs*)+0x199>
c001ef94:	3c cd                	cmp    al,0xcd
c001ef96:	0f 84 7e 02 00 00    	je     c001f21a <Vm::faultHandler(regs*)+0x3b5>
c001ef9c:	3c cf                	cmp    al,0xcf
c001ef9e:	0f 85 94 06 00 00    	jne    c001f638 <Vm::faultHandler(regs*)+0x7d3>
c001efa4:	83 ec 0c             	sub    esp,0xc
c001efa7:	68 ae c8 02 c0       	push   0xc002c8ae
c001efac:	e8 cc 3f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001efb1:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001efb4:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001efb7:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001efbb:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001efbe:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001efc2:	0d 00 02 02 00       	or     eax,0x20200
c001efc7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efca:	56                   	push   esi
c001efcb:	53                   	push   ebx
c001efcc:	52                   	push   edx
c001efcd:	68 b4 c8 02 c0       	push   0xc002c8b4
c001efd2:	e8 a6 3f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001efd7:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efdb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efe1:	66 c1 e8 09          	shr    ax,0x9
c001efe5:	83 e0 01             	and    eax,0x1
c001efe8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efeb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efee:	83 c0 06             	add    eax,0x6
c001eff1:	25 ff ff 00 00       	and    eax,0xffff
c001eff6:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001eff9:	e9 95 02 00 00       	jmp    c001f293 <Vm::faultHandler(regs*)+0x42e>
c001effe:	3c e6                	cmp    al,0xe6
c001f000:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f004:	0f 84 4e 05 00 00    	je     c001f558 <Vm::faultHandler(regs*)+0x6f3>
c001f00a:	0f 82 0a 05 00 00    	jb     c001f51a <Vm::faultHandler(regs*)+0x6b5>
c001f010:	3c e7                	cmp    al,0xe7
c001f012:	0f 84 69 05 00 00    	je     c001f581 <Vm::faultHandler(regs*)+0x71c>
c001f018:	e9 1b 06 00 00       	jmp    c001f638 <Vm::faultHandler(regs*)+0x7d3>
c001f01d:	3c ef                	cmp    al,0xef
c001f01f:	0f 84 e6 05 00 00    	je     c001f60b <Vm::faultHandler(regs*)+0x7a6>
c001f025:	77 37                	ja     c001f05e <Vm::faultHandler(regs*)+0x1f9>
c001f027:	3c ed                	cmp    al,0xed
c001f029:	0f 84 a3 05 00 00    	je     c001f5d2 <Vm::faultHandler(regs*)+0x76d>
c001f02f:	3c ee                	cmp    al,0xee
c001f031:	0f 85 01 06 00 00    	jne    c001f638 <Vm::faultHandler(regs*)+0x7d3>
c001f037:	52                   	push   edx
c001f038:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f03b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f03e:	68 4f c9 02 c0       	push   0xc002c94f
c001f043:	e8 35 3f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f048:	59                   	pop    ecx
c001f049:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f04d:	5b                   	pop    ebx
c001f04e:	50                   	push   eax
c001f04f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f053:	50                   	push   eax
c001f054:	e8 2a fa ff ff       	call   c001ea83 <Vm::outbv(unsigned short, unsigned char)>
c001f059:	e9 a5 05 00 00       	jmp    c001f603 <Vm::faultHandler(regs*)+0x79e>
c001f05e:	3c fa                	cmp    al,0xfa
c001f060:	0f 84 f7 01 00 00    	je     c001f25d <Vm::faultHandler(regs*)+0x3f8>
c001f066:	3c fb                	cmp    al,0xfb
c001f068:	0f 84 0a 02 00 00    	je     c001f278 <Vm::faultHandler(regs*)+0x413>
c001f06e:	3c f3                	cmp    al,0xf3
c001f070:	0f 85 c2 05 00 00    	jne    c001f638 <Vm::faultHandler(regs*)+0x7d3>
c001f076:	83 ec 0c             	sub    esp,0xc
c001f079:	68 87 c8 02 c0       	push   0xc002c887
c001f07e:	e8 fa 3e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f083:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f086:	83 c4 10             	add    esp,0x10
c001f089:	e9 84 fe ff ff       	jmp    c001ef12 <Vm::faultHandler(regs*)+0xad>
c001f08e:	83 ec 0c             	sub    esp,0xc
c001f091:	b3 02                	mov    bl,0x2
c001f093:	68 62 c8 02 c0       	push   0xc002c862
c001f098:	e8 e0 3e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f09d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a0:	83 c4 10             	add    esp,0x10
c001f0a3:	e9 6a fe ff ff       	jmp    c001ef12 <Vm::faultHandler(regs*)+0xad>
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	b3 03                	mov    bl,0x3
c001f0ad:	68 6e c8 02 c0       	push   0xc002c86e
c001f0b2:	e8 c6 3e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f0b7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ba:	83 c4 10             	add    esp,0x10
c001f0bd:	e9 50 fe ff ff       	jmp    c001ef12 <Vm::faultHandler(regs*)+0xad>
c001f0c2:	83 ec 0c             	sub    esp,0xc
c001f0c5:	b3 04                	mov    bl,0x4
c001f0c7:	68 72 c8 02 c0       	push   0xc002c872
c001f0cc:	e8 ac 3e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f0d1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0d4:	83 c4 10             	add    esp,0x10
c001f0d7:	e9 36 fe ff ff       	jmp    c001ef12 <Vm::faultHandler(regs*)+0xad>
c001f0dc:	83 ec 0c             	sub    esp,0xc
c001f0df:	b3 05                	mov    bl,0x5
c001f0e1:	68 76 c8 02 c0       	push   0xc002c876
c001f0e6:	e8 92 3e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f0eb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ee:	83 c4 10             	add    esp,0x10
c001f0f1:	e9 1c fe ff ff       	jmp    c001ef12 <Vm::faultHandler(regs*)+0xad>
c001f0f6:	83 ec 0c             	sub    esp,0xc
c001f0f9:	68 7a c8 02 c0       	push   0xc002c87a
c001f0fe:	e8 7a 3e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f103:	83 c4 10             	add    esp,0x10
c001f106:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f109:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f10e:	e9 ff fd ff ff       	jmp    c001ef12 <Vm::faultHandler(regs*)+0xad>
c001f113:	50                   	push   eax
c001f114:	50                   	push   eax
c001f115:	6a 01                	push   0x1
c001f117:	68 7f c8 02 c0       	push   0xc002c87f
c001f11c:	e8 5c 3e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f121:	83 c4 10             	add    esp,0x10
c001f124:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f127:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f12c:	e9 e1 fd ff ff       	jmp    c001ef12 <Vm::faultHandler(regs*)+0xad>
c001f131:	83 ec 0c             	sub    esp,0xc
c001f134:	68 8d c8 02 c0       	push   0xc002c88d
c001f139:	e8 3f 3e ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f13e:	83 c4 10             	add    esp,0x10
c001f141:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f144:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f149:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f14c:	74 2f                	je     c001f17d <Vm::faultHandler(regs*)+0x318>
c001f14e:	83 ea 04             	sub    edx,0x4
c001f151:	25 ff 0d 00 00       	and    eax,0xdff
c001f156:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f15c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f15f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f162:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f168:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f16c:	0f 84 bf 04 00 00    	je     c001f631 <Vm::faultHandler(regs*)+0x7cc>
c001f172:	80 cc 02             	or     ah,0x2
c001f175:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f178:	e9 b4 04 00 00       	jmp    c001f631 <Vm::faultHandler(regs*)+0x7cc>
c001f17d:	83 ea 02             	sub    edx,0x2
c001f180:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f186:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f189:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f18d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f193:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f197:	74 05                	je     c001f19e <Vm::faultHandler(regs*)+0x339>
c001f199:	80 cc 02             	or     ah,0x2
c001f19c:	eb 03                	jmp    c001f1a1 <Vm::faultHandler(regs*)+0x33c>
c001f19e:	80 e4 fd             	and    ah,0xfd
c001f1a1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1a5:	e9 87 04 00 00       	jmp    c001f631 <Vm::faultHandler(regs*)+0x7cc>
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	68 94 c8 02 c0       	push   0xc002c894
c001f1b2:	e8 c6 3d ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f1b7:	83 c4 10             	add    esp,0x10
c001f1ba:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1bf:	74 28                	je     c001f1e9 <Vm::faultHandler(regs*)+0x384>
c001f1c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1c3:	25 ff 0d 00 00       	and    eax,0xdff
c001f1c8:	0d 00 02 02 00       	or     eax,0x20200
c001f1cd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1d0:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1d8:	c1 e8 09             	shr    eax,0x9
c001f1db:	83 e0 01             	and    eax,0x1
c001f1de:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1e1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1e4:	83 c0 04             	add    eax,0x4
c001f1e7:	eb 24                	jmp    c001f20d <Vm::faultHandler(regs*)+0x3a8>
c001f1e9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1ec:	0d 00 02 02 00       	or     eax,0x20200
c001f1f1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1f4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1fd:	66 c1 e8 09          	shr    ax,0x9
c001f201:	83 e0 01             	and    eax,0x1
c001f204:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f207:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f20a:	83 c0 02             	add    eax,0x2
c001f20d:	25 ff ff 00 00       	and    eax,0xffff
c001f212:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f215:	e9 17 04 00 00       	jmp    c001f631 <Vm::faultHandler(regs*)+0x7cc>
c001f21a:	53                   	push   ebx
c001f21b:	53                   	push   ebx
c001f21c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f220:	50                   	push   eax
c001f221:	68 9a c8 02 c0       	push   0xc002c89a
c001f226:	e8 52 3d ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f22b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f22f:	83 c4 10             	add    esp,0x10
c001f232:	3c ee                	cmp    al,0xee
c001f234:	75 10                	jne    c001f246 <Vm::faultHandler(regs*)+0x3e1>
c001f236:	83 ec 0c             	sub    esp,0xc
c001f239:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f23c:	e8 fa f8 ff ff       	call   c001eb3b <Vm::mainloop3(unsigned long)>
c001f241:	e9 c0 03 00 00       	jmp    c001f606 <Vm::faultHandler(regs*)+0x7a1>
c001f246:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	53                   	push   ebx
c001f24e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f252:	53                   	push   ebx
c001f253:	55                   	push   ebp
c001f254:	50                   	push   eax
c001f255:	57                   	push   edi
c001f256:	e8 0c fb ff ff       	call   c001ed67 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f25b:	eb 36                	jmp    c001f293 <Vm::faultHandler(regs*)+0x42e>
c001f25d:	83 ec 0c             	sub    esp,0xc
c001f260:	68 a4 c8 02 c0       	push   0xc002c8a4
c001f265:	e8 13 3d ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f26a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f26f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f273:	e9 8b 03 00 00       	jmp    c001f603 <Vm::faultHandler(regs*)+0x79e>
c001f278:	83 ec 0c             	sub    esp,0xc
c001f27b:	68 a9 c8 02 c0       	push   0xc002c8a9
c001f280:	e8 f8 3c ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f285:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f28a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f28e:	e9 70 03 00 00       	jmp    c001f603 <Vm::faultHandler(regs*)+0x79e>
c001f293:	83 c4 20             	add    esp,0x20
c001f296:	e9 99 03 00 00       	jmp    c001f634 <Vm::faultHandler(regs*)+0x7cf>
c001f29b:	83 ec 0c             	sub    esp,0xc
c001f29e:	68 e7 c8 02 c0       	push   0xc002c8e7
c001f2a3:	e8 d5 3c ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f2a8:	83 c4 10             	add    esp,0x10
c001f2ab:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2ae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2b3:	74 0d                	je     c001f2c2 <Vm::faultHandler(regs*)+0x45d>
c001f2b5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2bc:	0f 87 9e 01 00 00    	ja     c001f460 <Vm::faultHandler(regs*)+0x5fb>
c001f2c2:	83 ec 0c             	sub    esp,0xc
c001f2c5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2c9:	0f b7 db             	movzx  ebx,bx
c001f2cc:	50                   	push   eax
c001f2cd:	e8 9e f7 ff ff       	call   c001ea70 <Vm::inbv(unsigned short)>
c001f2d2:	83 c4 0c             	add    esp,0xc
c001f2d5:	0f b6 c0             	movzx  eax,al
c001f2d8:	50                   	push   eax
c001f2d9:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2dd:	50                   	push   eax
c001f2de:	53                   	push   ebx
c001f2df:	e8 41 fb ff ff       	call   c001ee25 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2e4:	83 c4 10             	add    esp,0x10
c001f2e7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2ea:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2ee:	74 03                	je     c001f2f3 <Vm::faultHandler(regs*)+0x48e>
c001f2f0:	48                   	dec    eax
c001f2f1:	eb 01                	jmp    c001f2f4 <Vm::faultHandler(regs*)+0x48f>
c001f2f3:	40                   	inc    eax
c001f2f4:	0f b7 c0             	movzx  eax,ax
c001f2f7:	eb 7f                	jmp    c001f378 <Vm::faultHandler(regs*)+0x513>
c001f2f9:	83 ec 0c             	sub    esp,0xc
c001f2fc:	68 19 c9 02 c0       	push   0xc002c919
c001f301:	e8 77 3c ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f306:	83 c4 10             	add    esp,0x10
c001f309:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f30c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f311:	74 0d                	je     c001f320 <Vm::faultHandler(regs*)+0x4bb>
c001f313:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f31a:	0f 87 40 01 00 00    	ja     c001f460 <Vm::faultHandler(regs*)+0x5fb>
c001f320:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f323:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f327:	0f b7 db             	movzx  ebx,bx
c001f32a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f32f:	74 20                	je     c001f351 <Vm::faultHandler(regs*)+0x4ec>
c001f331:	ed                   	in     eax,dx
c001f332:	51                   	push   ecx
c001f333:	50                   	push   eax
c001f334:	56                   	push   esi
c001f335:	53                   	push   ebx
c001f336:	e8 15 fb ff ff       	call   c001ee50 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f33b:	83 c4 10             	add    esp,0x10
c001f33e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f341:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f345:	74 05                	je     c001f34c <Vm::faultHandler(regs*)+0x4e7>
c001f347:	83 e8 04             	sub    eax,0x4
c001f34a:	eb 27                	jmp    c001f373 <Vm::faultHandler(regs*)+0x50e>
c001f34c:	83 c0 04             	add    eax,0x4
c001f34f:	eb 22                	jmp    c001f373 <Vm::faultHandler(regs*)+0x50e>
c001f351:	66 ed                	in     ax,dx
c001f353:	0f b7 c0             	movzx  eax,ax
c001f356:	52                   	push   edx
c001f357:	50                   	push   eax
c001f358:	56                   	push   esi
c001f359:	53                   	push   ebx
c001f35a:	e8 db fa ff ff       	call   c001ee3a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f35f:	83 c4 10             	add    esp,0x10
c001f362:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f365:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f369:	74 05                	je     c001f370 <Vm::faultHandler(regs*)+0x50b>
c001f36b:	83 e8 02             	sub    eax,0x2
c001f36e:	eb 03                	jmp    c001f373 <Vm::faultHandler(regs*)+0x50e>
c001f370:	83 c0 02             	add    eax,0x2
c001f373:	25 ff ff 00 00       	and    eax,0xffff
c001f378:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f37b:	e9 b1 02 00 00       	jmp    c001f631 <Vm::faultHandler(regs*)+0x7cc>
c001f380:	83 ec 0c             	sub    esp,0xc
c001f383:	4b                   	dec    ebx
c001f384:	68 1f c9 02 c0       	push   0xc002c91f
c001f389:	e8 ef 3b ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f38e:	83 c4 10             	add    esp,0x10
c001f391:	80 fb 05             	cmp    bl,0x5
c001f394:	77 0a                	ja     c001f3a0 <Vm::faultHandler(regs*)+0x53b>
c001f396:	0f b6 db             	movzx  ebx,bl
c001f399:	ff 24 9d 90 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3670]
c001f3a0:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3a4:	eb 1b                	jmp    c001f3c1 <Vm::faultHandler(regs*)+0x55c>
c001f3a6:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3aa:	eb 15                	jmp    c001f3c1 <Vm::faultHandler(regs*)+0x55c>
c001f3ac:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3b0:	eb 0f                	jmp    c001f3c1 <Vm::faultHandler(regs*)+0x55c>
c001f3b2:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3b6:	eb 09                	jmp    c001f3c1 <Vm::faultHandler(regs*)+0x55c>
c001f3b8:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3bb:	eb 04                	jmp    c001f3c1 <Vm::faultHandler(regs*)+0x55c>
c001f3bd:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3c6:	74 0d                	je     c001f3d5 <Vm::faultHandler(regs*)+0x570>
c001f3c8:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f3cf:	0f 87 8b 00 00 00    	ja     c001f460 <Vm::faultHandler(regs*)+0x5fb>
c001f3d5:	53                   	push   ebx
c001f3d6:	53                   	push   ebx
c001f3d7:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3db:	52                   	push   edx
c001f3dc:	50                   	push   eax
c001f3dd:	e8 0f fa ff ff       	call   c001edf1 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3e2:	5e                   	pop    esi
c001f3e3:	0f b6 c0             	movzx  eax,al
c001f3e6:	5d                   	pop    ebp
c001f3e7:	50                   	push   eax
c001f3e8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3ec:	50                   	push   eax
c001f3ed:	e8 91 f6 ff ff       	call   c001ea83 <Vm::outbv(unsigned short, unsigned char)>
c001f3f2:	83 c4 10             	add    esp,0x10
c001f3f5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3f8:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3fc:	74 03                	je     c001f401 <Vm::faultHandler(regs*)+0x59c>
c001f3fe:	48                   	dec    eax
c001f3ff:	eb 01                	jmp    c001f402 <Vm::faultHandler(regs*)+0x59d>
c001f401:	40                   	inc    eax
c001f402:	0f b7 c0             	movzx  eax,ax
c001f405:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f408:	e9 24 02 00 00       	jmp    c001f631 <Vm::faultHandler(regs*)+0x7cc>
c001f40d:	83 ec 0c             	sub    esp,0xc
c001f410:	4b                   	dec    ebx
c001f411:	68 1f c9 02 c0       	push   0xc002c91f
c001f416:	e8 62 3b ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f41b:	83 c4 10             	add    esp,0x10
c001f41e:	80 fb 05             	cmp    bl,0x5
c001f421:	77 0a                	ja     c001f42d <Vm::faultHandler(regs*)+0x5c8>
c001f423:	0f b6 db             	movzx  ebx,bl
c001f426:	ff 24 9d a8 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3658]
c001f42d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f431:	eb 1b                	jmp    c001f44e <Vm::faultHandler(regs*)+0x5e9>
c001f433:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f437:	eb 15                	jmp    c001f44e <Vm::faultHandler(regs*)+0x5e9>
c001f439:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f43d:	eb 0f                	jmp    c001f44e <Vm::faultHandler(regs*)+0x5e9>
c001f43f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f443:	eb 09                	jmp    c001f44e <Vm::faultHandler(regs*)+0x5e9>
c001f445:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f448:	eb 04                	jmp    c001f44e <Vm::faultHandler(regs*)+0x5e9>
c001f44a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f44e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f451:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f456:	74 39                	je     c001f491 <Vm::faultHandler(regs*)+0x62c>
c001f458:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f45e:	76 31                	jbe    c001f491 <Vm::faultHandler(regs*)+0x62c>
c001f460:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f464:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f468:	51                   	push   ecx
c001f469:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f46d:	51                   	push   ecx
c001f46e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f472:	51                   	push   ecx
c001f473:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f477:	51                   	push   ecx
c001f478:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f47c:	52                   	push   edx
c001f47d:	50                   	push   eax
c001f47e:	50                   	push   eax
c001f47f:	68 ec c8 02 c0       	push   0xc002c8ec
c001f484:	e8 f4 3a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f489:	83 c4 20             	add    esp,0x20
c001f48c:	e9 fb 01 00 00       	jmp    c001f68c <Vm::faultHandler(regs*)+0x827>
c001f491:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f494:	0f b7 d3             	movzx  edx,bx
c001f497:	81 e6 00 04 00 00    	and    esi,0x400
c001f49d:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4a0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4a5:	74 1d                	je     c001f4c4 <Vm::faultHandler(regs*)+0x65f>
c001f4a7:	51                   	push   ecx
c001f4a8:	51                   	push   ecx
c001f4a9:	52                   	push   edx
c001f4aa:	50                   	push   eax
c001f4ab:	e8 64 f9 ff ff       	call   c001ee14 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4b0:	83 c4 10             	add    esp,0x10
c001f4b3:	89 ea                	mov    edx,ebp
c001f4b5:	ef                   	out    dx,eax
c001f4b6:	85 f6                	test   esi,esi
c001f4b8:	74 05                	je     c001f4bf <Vm::faultHandler(regs*)+0x65a>
c001f4ba:	83 eb 04             	sub    ebx,0x4
c001f4bd:	eb 21                	jmp    c001f4e0 <Vm::faultHandler(regs*)+0x67b>
c001f4bf:	83 c3 04             	add    ebx,0x4
c001f4c2:	eb 1c                	jmp    c001f4e0 <Vm::faultHandler(regs*)+0x67b>
c001f4c4:	51                   	push   ecx
c001f4c5:	51                   	push   ecx
c001f4c6:	52                   	push   edx
c001f4c7:	50                   	push   eax
c001f4c8:	e8 35 f9 ff ff       	call   c001ee02 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f4cd:	83 c4 10             	add    esp,0x10
c001f4d0:	89 ea                	mov    edx,ebp
c001f4d2:	66 ef                	out    dx,ax
c001f4d4:	85 f6                	test   esi,esi
c001f4d6:	74 05                	je     c001f4dd <Vm::faultHandler(regs*)+0x678>
c001f4d8:	83 eb 02             	sub    ebx,0x2
c001f4db:	eb 03                	jmp    c001f4e0 <Vm::faultHandler(regs*)+0x67b>
c001f4dd:	83 c3 02             	add    ebx,0x2
c001f4e0:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4e6:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4e9:	e9 43 01 00 00       	jmp    c001f631 <Vm::faultHandler(regs*)+0x7cc>
c001f4ee:	53                   	push   ebx
c001f4ef:	53                   	push   ebx
c001f4f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4f4:	50                   	push   eax
c001f4f5:	68 25 c9 02 c0       	push   0xc002c925
c001f4fa:	e8 7e 3a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f4ff:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f506:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f50a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f50d:	e8 5e f5 ff ff       	call   c001ea70 <Vm::inbv(unsigned short)>
c001f512:	0f b6 c0             	movzx  eax,al
c001f515:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f518:	eb 5e                	jmp    c001f578 <Vm::faultHandler(regs*)+0x713>
c001f51a:	51                   	push   ecx
c001f51b:	51                   	push   ecx
c001f51c:	53                   	push   ebx
c001f51d:	68 2b c9 02 c0       	push   0xc002c92b
c001f522:	e8 56 3a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f527:	83 c4 10             	add    esp,0x10
c001f52a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f52f:	74 07                	je     c001f538 <Vm::faultHandler(regs*)+0x6d3>
c001f531:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f535:	ed                   	in     eax,dx
c001f536:	eb 14                	jmp    c001f54c <Vm::faultHandler(regs*)+0x6e7>
c001f538:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f53b:	66 31 db             	xor    bx,bx
c001f53e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f541:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f545:	66 ed                	in     ax,dx
c001f547:	0f b7 c0             	movzx  eax,ax
c001f54a:	09 d8                	or     eax,ebx
c001f54c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f54f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f553:	e9 dc 00 00 00       	jmp    c001f634 <Vm::faultHandler(regs*)+0x7cf>
c001f558:	50                   	push   eax
c001f559:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f55c:	53                   	push   ebx
c001f55d:	68 31 c9 02 c0       	push   0xc002c931
c001f562:	e8 16 3a ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f567:	58                   	pop    eax
c001f568:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f56c:	5a                   	pop    edx
c001f56d:	50                   	push   eax
c001f56e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f572:	50                   	push   eax
c001f573:	e8 0b f5 ff ff       	call   c001ea83 <Vm::outbv(unsigned short, unsigned char)>
c001f578:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f57c:	e9 85 00 00 00       	jmp    c001f606 <Vm::faultHandler(regs*)+0x7a1>
c001f581:	50                   	push   eax
c001f582:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f585:	53                   	push   ebx
c001f586:	68 3a c9 02 c0       	push   0xc002c93a
c001f58b:	e8 ed 39 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f590:	83 c4 10             	add    esp,0x10
c001f593:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f597:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f59c:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f59f:	74 03                	je     c001f5a4 <Vm::faultHandler(regs*)+0x73f>
c001f5a1:	ef                   	out    dx,eax
c001f5a2:	eb ab                	jmp    c001f54f <Vm::faultHandler(regs*)+0x6ea>
c001f5a4:	66 ef                	out    dx,ax
c001f5a6:	eb a7                	jmp    c001f54f <Vm::faultHandler(regs*)+0x6ea>
c001f5a8:	55                   	push   ebp
c001f5a9:	55                   	push   ebp
c001f5aa:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5ad:	68 43 c9 02 c0       	push   0xc002c943
c001f5b2:	e8 c6 39 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f5b7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5be:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5c2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5c5:	e8 a6 f4 ff ff       	call   c001ea70 <Vm::inbv(unsigned short)>
c001f5ca:	0f b6 c0             	movzx  eax,al
c001f5cd:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5d0:	eb 31                	jmp    c001f603 <Vm::faultHandler(regs*)+0x79e>
c001f5d2:	56                   	push   esi
c001f5d3:	56                   	push   esi
c001f5d4:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5d7:	68 49 c9 02 c0       	push   0xc002c949
c001f5dc:	e8 9c 39 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f5e1:	83 c4 10             	add    esp,0x10
c001f5e4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5e7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5ec:	74 03                	je     c001f5f1 <Vm::faultHandler(regs*)+0x78c>
c001f5ee:	ed                   	in     eax,dx
c001f5ef:	eb 0d                	jmp    c001f5fe <Vm::faultHandler(regs*)+0x799>
c001f5f1:	66 ed                	in     ax,dx
c001f5f3:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5f6:	0f b7 c0             	movzx  eax,ax
c001f5f9:	66 31 d2             	xor    dx,dx
c001f5fc:	09 d0                	or     eax,edx
c001f5fe:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f601:	eb 2e                	jmp    c001f631 <Vm::faultHandler(regs*)+0x7cc>
c001f603:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f606:	83 c4 10             	add    esp,0x10
c001f609:	eb 29                	jmp    c001f634 <Vm::faultHandler(regs*)+0x7cf>
c001f60b:	50                   	push   eax
c001f60c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f60f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f612:	68 58 c9 02 c0       	push   0xc002c958
c001f617:	e8 61 39 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f61c:	83 c4 10             	add    esp,0x10
c001f61f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f622:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f627:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f62a:	74 03                	je     c001f62f <Vm::faultHandler(regs*)+0x7ca>
c001f62c:	ef                   	out    dx,eax
c001f62d:	eb 02                	jmp    c001f631 <Vm::faultHandler(regs*)+0x7cc>
c001f62f:	66 ef                	out    dx,ax
c001f631:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f634:	b0 01                	mov    al,0x1
c001f636:	eb 56                	jmp    c001f68e <Vm::faultHandler(regs*)+0x829>
c001f638:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f63c:	51                   	push   ecx
c001f63d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f641:	51                   	push   ecx
c001f642:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f646:	51                   	push   ecx
c001f647:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f64b:	51                   	push   ecx
c001f64c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f650:	52                   	push   edx
c001f651:	50                   	push   eax
c001f652:	50                   	push   eax
c001f653:	68 61 c9 02 c0       	push   0xc002c961
c001f658:	e8 20 39 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c001f65d:	83 c4 20             	add    esp,0x20
c001f660:	83 ec 0c             	sub    esp,0xc
c001f663:	6a 60                	push   0x60
c001f665:	e8 06 f4 ff ff       	call   c001ea70 <Vm::inbv(unsigned short)>
c001f66a:	83 c4 10             	add    esp,0x10
c001f66d:	3c 1c                	cmp    al,0x1c
c001f66f:	74 04                	je     c001f675 <Vm::faultHandler(regs*)+0x810>
c001f671:	3c 5a                	cmp    al,0x5a
c001f673:	75 eb                	jne    c001f660 <Vm::faultHandler(regs*)+0x7fb>
c001f675:	3c 1c                	cmp    al,0x1c
c001f677:	74 04                	je     c001f67d <Vm::faultHandler(regs*)+0x818>
c001f679:	3c 5a                	cmp    al,0x5a
c001f67b:	75 0f                	jne    c001f68c <Vm::faultHandler(regs*)+0x827>
c001f67d:	83 ec 0c             	sub    esp,0xc
c001f680:	6a 60                	push   0x60
c001f682:	e8 e9 f3 ff ff       	call   c001ea70 <Vm::inbv(unsigned short)>
c001f687:	83 c4 10             	add    esp,0x10
c001f68a:	eb e9                	jmp    c001f675 <Vm::faultHandler(regs*)+0x810>
c001f68c:	31 c0                	xor    eax,eax
c001f68e:	83 c4 1c             	add    esp,0x1c
c001f691:	5b                   	pop    ebx
c001f692:	5e                   	pop    esi
c001f693:	5f                   	pop    edi
c001f694:	5d                   	pop    ebp
c001f695:	c3                   	ret    

c001f696 <Vm::fpuInternalTo32(unsigned long long)>:
c001f696:	57                   	push   edi
c001f697:	56                   	push   esi
c001f698:	53                   	push   ebx
c001f699:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a1:	89 d6                	mov    esi,edx
c001f6a3:	89 d7                	mov    edi,edx
c001f6a5:	89 c1                	mov    ecx,eax
c001f6a7:	c1 ef 14             	shr    edi,0x14
c001f6aa:	89 d3                	mov    ebx,edx
c001f6ac:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6b2:	31 d2                	xor    edx,edx
c001f6b4:	89 f8                	mov    eax,edi
c001f6b6:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6bc:	bf ff 00 00 00       	mov    edi,0xff
c001f6c1:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f6c6:	83 d2 ff             	adc    edx,0xffffffff
c001f6c9:	39 c7                	cmp    edi,eax
c001f6cb:	bf 00 00 00 00       	mov    edi,0x0
c001f6d0:	19 d7                	sbb    edi,edx
c001f6d2:	72 15                	jb     c001f6e9 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6d4:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6d8:	c1 e0 17             	shl    eax,0x17
c001f6db:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6e1:	09 f1                	or     ecx,esi
c001f6e3:	09 c1                	or     ecx,eax
c001f6e5:	89 cf                	mov    edi,ecx
c001f6e7:	eb 02                	jmp    c001f6eb <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6e9:	31 ff                	xor    edi,edi
c001f6eb:	89 f8                	mov    eax,edi
c001f6ed:	5b                   	pop    ebx
c001f6ee:	5e                   	pop    esi
c001f6ef:	5f                   	pop    edi
c001f6f0:	c3                   	ret    

c001f6f1 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6f9:	c3                   	ret    

c001f6fa <Vm::fpu32ToInternal(unsigned int)>:
c001f6fa:	57                   	push   edi
c001f6fb:	31 ff                	xor    edi,edi
c001f6fd:	56                   	push   esi
c001f6fe:	53                   	push   ebx
c001f6ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f703:	89 cb                	mov    ebx,ecx
c001f705:	89 ce                	mov    esi,ecx
c001f707:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f70d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f713:	c1 e9 17             	shr    ecx,0x17
c001f716:	89 f0                	mov    eax,esi
c001f718:	0f b6 d1             	movzx  edx,cl
c001f71b:	81 c2 80 03 00 00    	add    edx,0x380
c001f721:	89 d1                	mov    ecx,edx
c001f723:	89 fa                	mov    edx,edi
c001f725:	c1 e1 14             	shl    ecx,0x14
c001f728:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f72c:	c1 e0 1d             	shl    eax,0x1d
c001f72f:	89 d7                	mov    edi,edx
c001f731:	89 c6                	mov    esi,eax
c001f733:	89 ca                	mov    edx,ecx
c001f735:	89 f0                	mov    eax,esi
c001f737:	09 fa                	or     edx,edi
c001f739:	09 da                	or     edx,ebx
c001f73b:	5b                   	pop    ebx
c001f73c:	5e                   	pop    esi
c001f73d:	5f                   	pop    edi
c001f73e:	c3                   	ret    

c001f73f <Vm::fpu64ToInternal(unsigned long long)>:
c001f73f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f743:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f747:	c3                   	ret    

c001f748 <Vm::fpuFloatToLong(unsigned long long)>:
c001f748:	57                   	push   edi
c001f749:	31 c0                	xor    eax,eax
c001f74b:	56                   	push   esi
c001f74c:	31 d2                	xor    edx,edx
c001f74e:	53                   	push   ebx
c001f74f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f753:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f757:	89 d9                	mov    ecx,ebx
c001f759:	c1 e9 14             	shr    ecx,0x14
c001f75c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f762:	89 cf                	mov    edi,ecx
c001f764:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f76a:	78 33                	js     c001f79f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f76c:	89 d9                	mov    ecx,ebx
c001f76e:	89 f0                	mov    eax,esi
c001f770:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f776:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f77c:	89 ca                	mov    edx,ecx
c001f77e:	b9 34 00 00 00       	mov    ecx,0x34
c001f783:	29 f9                	sub    ecx,edi
c001f785:	0f ad d0             	shrd   eax,edx,cl
c001f788:	d3 fa                	sar    edx,cl
c001f78a:	f6 c1 20             	test   cl,0x20
c001f78d:	74 05                	je     c001f794 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f78f:	89 d0                	mov    eax,edx
c001f791:	c1 fa 1f             	sar    edx,0x1f
c001f794:	85 db                	test   ebx,ebx
c001f796:	79 07                	jns    c001f79f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f798:	f7 d8                	neg    eax
c001f79a:	83 d2 00             	adc    edx,0x0
c001f79d:	f7 da                	neg    edx
c001f79f:	5b                   	pop    ebx
c001f7a0:	5e                   	pop    esi
c001f7a1:	5f                   	pop    edi
c001f7a2:	c3                   	ret    

c001f7a3 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7a3:	57                   	push   edi
c001f7a4:	31 c9                	xor    ecx,ecx
c001f7a6:	56                   	push   esi
c001f7a7:	53                   	push   ebx
c001f7a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7ac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7b0:	0f ba e7 14          	bt     edi,0x14
c001f7b4:	72 07                	jb     c001f7bd <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7b6:	01 f6                	add    esi,esi
c001f7b8:	11 ff                	adc    edi,edi
c001f7ba:	41                   	inc    ecx
c001f7bb:	eb f3                	jmp    c001f7b0 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7bd:	89 fa                	mov    edx,edi
c001f7bf:	89 f0                	mov    eax,esi
c001f7c1:	bb 33 04 00 00       	mov    ebx,0x433
c001f7c6:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f7cc:	29 cb                	sub    ebx,ecx
c001f7ce:	89 d9                	mov    ecx,ebx
c001f7d0:	5b                   	pop    ebx
c001f7d1:	c1 e1 14             	shl    ecx,0x14
c001f7d4:	5e                   	pop    esi
c001f7d5:	09 ca                	or     edx,ecx
c001f7d7:	5f                   	pop    edi
c001f7d8:	c3                   	ret    

c001f7d9 <Vm::fpuLongToFloat(long long)>:
c001f7d9:	56                   	push   esi
c001f7da:	31 c0                	xor    eax,eax
c001f7dc:	53                   	push   ebx
c001f7dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7e5:	39 c8                	cmp    eax,ecx
c001f7e7:	19 d8                	sbb    eax,ebx
c001f7e9:	7d 04                	jge    c001f7ef <Vm::fpuLongToFloat(long long)+0x16>
c001f7eb:	31 f6                	xor    esi,esi
c001f7ed:	eb 0c                	jmp    c001f7fb <Vm::fpuLongToFloat(long long)+0x22>
c001f7ef:	f7 d9                	neg    ecx
c001f7f1:	be 01 00 00 00       	mov    esi,0x1
c001f7f6:	83 d3 00             	adc    ebx,0x0
c001f7f9:	f7 db                	neg    ebx
c001f7fb:	31 c0                	xor    eax,eax
c001f7fd:	0f ba e3 14          	bt     ebx,0x14
c001f801:	72 07                	jb     c001f80a <Vm::fpuLongToFloat(long long)+0x31>
c001f803:	01 c9                	add    ecx,ecx
c001f805:	11 db                	adc    ebx,ebx
c001f807:	40                   	inc    eax
c001f808:	eb f3                	jmp    c001f7fd <Vm::fpuLongToFloat(long long)+0x24>
c001f80a:	ba 33 04 00 00       	mov    edx,0x433
c001f80f:	29 c2                	sub    edx,eax
c001f811:	89 c8                	mov    eax,ecx
c001f813:	c1 e2 14             	shl    edx,0x14
c001f816:	89 d9                	mov    ecx,ebx
c001f818:	89 f3                	mov    ebx,esi
c001f81a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f820:	09 ca                	or     edx,ecx
c001f822:	84 db                	test   bl,bl
c001f824:	74 06                	je     c001f82c <Vm::fpuLongToFloat(long long)+0x53>
c001f826:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f82c:	5b                   	pop    ebx
c001f82d:	5e                   	pop    esi
c001f82e:	c3                   	ret    

c001f82f <Vm::fpuGet0()>:
c001f82f:	31 c0                	xor    eax,eax
c001f831:	31 d2                	xor    edx,edx
c001f833:	c3                   	ret    

c001f834 <Vm::fpuGet1()>:
c001f834:	b8 01 00 00 00       	mov    eax,0x1
c001f839:	31 d2                	xor    edx,edx
c001f83b:	c3                   	ret    

c001f83c <Vm::fpuGetPi()>:
c001f83c:	b8 03 00 00 00       	mov    eax,0x3
c001f841:	31 d2                	xor    edx,edx
c001f843:	c3                   	ret    

c001f844 <Vm::fpuGetLog2E()>:
c001f844:	83 ec 18             	sub    esp,0x18
c001f847:	68 c0 c9 02 c0       	push   0xc002c9c0
c001f84c:	e8 de ad ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001f851:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f856:	31 d2                	xor    edx,edx
c001f858:	83 c4 1c             	add    esp,0x1c
c001f85b:	c3                   	ret    

c001f85c <Vm::fpuGetLogE2()>:
c001f85c:	83 ec 18             	sub    esp,0x18
c001f85f:	68 cc c9 02 c0       	push   0xc002c9cc
c001f864:	e8 c6 ad ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001f869:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f86e:	31 d2                	xor    edx,edx
c001f870:	83 c4 1c             	add    esp,0x1c
c001f873:	c3                   	ret    

c001f874 <Vm::fpuGetLog210()>:
c001f874:	83 ec 18             	sub    esp,0x18
c001f877:	68 d8 c9 02 c0       	push   0xc002c9d8
c001f87c:	e8 ae ad ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001f881:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f886:	31 d2                	xor    edx,edx
c001f888:	83 c4 1c             	add    esp,0x1c
c001f88b:	c3                   	ret    

c001f88c <Vm::fpuGetLog102()>:
c001f88c:	83 ec 18             	sub    esp,0x18
c001f88f:	68 e5 c9 02 c0       	push   0xc002c9e5
c001f894:	e8 96 ad ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001f899:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f89e:	31 d2                	xor    edx,edx
c001f8a0:	83 c4 1c             	add    esp,0x1c
c001f8a3:	c3                   	ret    

c001f8a4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8a8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8b0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8b4:	0f 92 c0             	setb   al
c001f8b7:	c3                   	ret    

c001f8b8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f8c4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f8c8:	09 c2                	or     edx,eax
c001f8ca:	0f 94 c0             	sete   al
c001f8cd:	c3                   	ret    

c001f8ce <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f8ce:	57                   	push   edi
c001f8cf:	56                   	push   esi
c001f8d0:	53                   	push   ebx
c001f8d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8dd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8e1:	57                   	push   edi
c001f8e2:	56                   	push   esi
c001f8e3:	53                   	push   ebx
c001f8e4:	51                   	push   ecx
c001f8e5:	e8 ce ff ff ff       	call   c001f8b8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8ea:	83 c4 10             	add    esp,0x10
c001f8ed:	88 c2                	mov    dl,al
c001f8ef:	31 c0                	xor    eax,eax
c001f8f1:	84 d2                	test   dl,dl
c001f8f3:	75 0c                	jne    c001f901 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8f5:	57                   	push   edi
c001f8f6:	56                   	push   esi
c001f8f7:	53                   	push   ebx
c001f8f8:	51                   	push   ecx
c001f8f9:	e8 a6 ff ff ff       	call   c001f8a4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8fe:	83 c4 10             	add    esp,0x10
c001f901:	83 e0 01             	and    eax,0x1
c001f904:	5b                   	pop    ebx
c001f905:	88 c1                	mov    cl,al
c001f907:	83 e2 01             	and    edx,0x1
c001f90a:	a0 41 1c 03 c0       	mov    al,ds:0xc0031c41
c001f90f:	c1 e2 06             	shl    edx,0x6
c001f912:	83 e0 ba             	and    eax,0xffffffba
c001f915:	5e                   	pop    esi
c001f916:	09 c8                	or     eax,ecx
c001f918:	5f                   	pop    edi
c001f919:	09 d0                	or     eax,edx
c001f91b:	a2 41 1c 03 c0       	mov    ds:0xc0031c41,al
c001f920:	c3                   	ret    

c001f921 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f921:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f925:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f929:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f92d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f931:	c3                   	ret    

c001f932 <Vm::fpuAbs(unsigned long long)>:
c001f932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f936:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f93a:	c3                   	ret    

c001f93b <Vm::fpuChs(unsigned long long)>:
c001f93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f93f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f943:	f7 d8                	neg    eax
c001f945:	83 d2 00             	adc    edx,0x0
c001f948:	f7 da                	neg    edx
c001f94a:	c3                   	ret    

c001f94b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f94b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f94f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f954:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f958:	eb c7                	jmp    c001f921 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f95a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f95a:	53                   	push   ebx
c001f95b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f95f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f967:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f96b:	0f af ca             	imul   ecx,edx
c001f96e:	0f af d8             	imul   ebx,eax
c001f971:	f7 e2                	mul    edx
c001f973:	01 d9                	add    ecx,ebx
c001f975:	5b                   	pop    ebx
c001f976:	01 ca                	add    edx,ecx
c001f978:	c3                   	ret    

c001f979 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f979:	83 ec 0c             	sub    esp,0xc
c001f97c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f98c:	e8 9b 70 00 00       	call   c0026a2c <__udivdi3>
c001f991:	83 c4 1c             	add    esp,0x1c
c001f994:	c3                   	ret    

c001f995 <Vm::fpuSquare(unsigned long long)>:
c001f995:	50                   	push   eax
c001f996:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f99a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f99e:	52                   	push   edx
c001f99f:	50                   	push   eax
c001f9a0:	52                   	push   edx
c001f9a1:	50                   	push   eax
c001f9a2:	e8 b3 ff ff ff       	call   c001f95a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9a7:	83 c4 14             	add    esp,0x14
c001f9aa:	c3                   	ret    

c001f9ab <Vm::fpuGetReg(int)>:
c001f9ab:	83 ec 0c             	sub    esp,0xc
c001f9ae:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9b3:	76 10                	jbe    c001f9c5 <Vm::fpuGetReg(int)+0x1a>
c001f9b5:	83 ec 0c             	sub    esp,0xc
c001f9b8:	68 f2 c9 02 c0       	push   0xc002c9f2
c001f9bd:	e8 6d ac ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001f9c2:	83 c4 10             	add    esp,0x10
c001f9c5:	a0 41 1c 03 c0       	mov    al,ds:0xc0031c41
c001f9ca:	b9 08 00 00 00       	mov    ecx,0x8
c001f9cf:	c0 e8 03             	shr    al,0x3
c001f9d2:	83 e0 07             	and    eax,0x7
c001f9d5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9d9:	99                   	cdq    
c001f9da:	f7 f9                	idiv   ecx
c001f9dc:	8b 04 d5 44 1c 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce3bc]
c001f9e3:	8b 14 d5 48 1c 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce3b8]
c001f9ea:	83 c4 0c             	add    esp,0xc
c001f9ed:	c3                   	ret    

c001f9ee <Vm::fpuSetReg(int, unsigned long long)>:
c001f9ee:	57                   	push   edi
c001f9ef:	56                   	push   esi
c001f9f0:	52                   	push   edx
c001f9f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9f9:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9fe:	76 10                	jbe    c001fa10 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	68 05 ca 02 c0       	push   0xc002ca05
c001fa08:	e8 22 ac ff ff       	call   c001a62f <Krnl::panic(char const*)>
c001fa0d:	83 c4 10             	add    esp,0x10
c001fa10:	a0 41 1c 03 c0       	mov    al,ds:0xc0031c41
c001fa15:	b9 08 00 00 00       	mov    ecx,0x8
c001fa1a:	c0 e8 03             	shr    al,0x3
c001fa1d:	83 e0 07             	and    eax,0x7
c001fa20:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa24:	99                   	cdq    
c001fa25:	f7 f9                	idiv   ecx
c001fa27:	89 34 d5 44 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce3bc],esi
c001fa2e:	89 3c d5 48 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce3b8],edi
c001fa35:	58                   	pop    eax
c001fa36:	5e                   	pop    esi
c001fa37:	5f                   	pop    edi
c001fa38:	c3                   	ret    

c001fa39 <Vm::fpuPush(unsigned long long)>:
c001fa39:	a0 41 1c 03 c0       	mov    al,ds:0xc0031c41
c001fa3e:	c0 e8 03             	shr    al,0x3
c001fa41:	83 e0 07             	and    eax,0x7
c001fa44:	83 c0 07             	add    eax,0x7
c001fa47:	88 c2                	mov    dl,al
c001fa49:	83 e0 07             	and    eax,0x7
c001fa4c:	83 e2 07             	and    edx,0x7
c001fa4f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa56:	8a 15 41 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c41
c001fa5c:	83 e2 c7             	and    edx,0xffffffc7
c001fa5f:	09 ca                	or     edx,ecx
c001fa61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa65:	88 15 41 1c 03 c0    	mov    BYTE PTR ds:0xc0031c41,dl
c001fa6b:	89 0c c5 48 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce3b8],ecx
c001fa72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa76:	89 14 c5 44 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce3bc],edx
c001fa7d:	a1 84 1c 03 c0       	mov    eax,ds:0xc0031c84
c001fa82:	83 f8 08             	cmp    eax,0x8
c001fa85:	75 08                	jne    c001fa8f <Vm::fpuPush(unsigned long long)+0x56>
c001fa87:	80 0d 40 1c 03 c0 40 	or     BYTE PTR ds:0xc0031c40,0x40
c001fa8e:	c3                   	ret    
c001fa8f:	40                   	inc    eax
c001fa90:	a3 84 1c 03 c0       	mov    ds:0xc0031c84,eax
c001fa95:	c3                   	ret    

c001fa96 <Vm::fpuPop()>:
c001fa96:	8a 0d 41 1c 03 c0    	mov    cl,BYTE PTR ds:0xc0031c41
c001fa9c:	53                   	push   ebx
c001fa9d:	c0 e9 03             	shr    cl,0x3
c001faa0:	8a 1d 41 1c 03 c0    	mov    bl,BYTE PTR ds:0xc0031c41
c001faa6:	83 e1 07             	and    ecx,0x7
c001faa9:	83 e3 c7             	and    ebx,0xffffffc7
c001faac:	8b 04 cd 44 1c 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce3bc]
c001fab3:	8b 14 cd 48 1c 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce3b8]
c001faba:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fac1:	83 e1 38             	and    ecx,0x38
c001fac4:	09 d9                	or     ecx,ebx
c001fac6:	88 0d 41 1c 03 c0    	mov    BYTE PTR ds:0xc0031c41,cl
c001facc:	8b 0d 84 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c84
c001fad2:	85 c9                	test   ecx,ecx
c001fad4:	74 09                	je     c001fadf <Vm::fpuPop()+0x49>
c001fad6:	49                   	dec    ecx
c001fad7:	89 0d 84 1c 03 c0    	mov    DWORD PTR ds:0xc0031c84,ecx
c001fadd:	eb 07                	jmp    c001fae6 <Vm::fpuPop()+0x50>
c001fadf:	80 0d 40 1c 03 c0 40 	or     BYTE PTR ds:0xc0031c40,0x40
c001fae6:	5b                   	pop    ebx
c001fae7:	c3                   	ret    

c001fae8 <Vm::x87Handler(regs*)>:
c001fae8:	55                   	push   ebp
c001fae9:	57                   	push   edi
c001faea:	56                   	push   esi
c001faeb:	53                   	push   ebx
c001faec:	83 ec 1c             	sub    esp,0x1c
c001faef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001faf3:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001faf8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fafb:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb03:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb07:	50                   	push   eax
c001fb08:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb0c:	50                   	push   eax
c001fb0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb11:	50                   	push   eax
c001fb12:	53                   	push   ebx
c001fb13:	e8 de a1 ff ff       	call   c0019cf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb18:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb1b:	83 c4 10             	add    esp,0x10
c001fb1e:	89 c6                	mov    esi,eax
c001fb20:	80 fa d9             	cmp    dl,0xd9
c001fb23:	0f 85 52 01 00 00    	jne    c001fc7b <Vm::x87Handler(regs*)+0x193>
c001fb29:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb2d:	8d 50 20             	lea    edx,[eax+0x20]
c001fb30:	80 fa 0e             	cmp    dl,0xe
c001fb33:	0f 87 86 00 00 00    	ja     c001fbbf <Vm::x87Handler(regs*)+0xd7>
c001fb39:	0f b6 d2             	movzx  edx,dl
c001fb3c:	ff 24 95 18 ca 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd35e8]
c001fb43:	e8 e7 fc ff ff       	call   c001f82f <Vm::fpuGet0()>
c001fb48:	eb 05                	jmp    c001fb4f <Vm::x87Handler(regs*)+0x67>
c001fb4a:	e8 e5 fc ff ff       	call   c001f834 <Vm::fpuGet1()>
c001fb4f:	57                   	push   edi
c001fb50:	57                   	push   edi
c001fb51:	52                   	push   edx
c001fb52:	50                   	push   eax
c001fb53:	e8 e1 fe ff ff       	call   c001fa39 <Vm::fpuPush(unsigned long long)>
c001fb58:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb5c:	83 c4 10             	add    esp,0x10
c001fb5f:	b0 01                	mov    al,0x1
c001fb61:	e9 e3 09 00 00       	jmp    c0020549 <Vm::x87Handler(regs*)+0xa61>
c001fb66:	83 ec 0c             	sub    esp,0xc
c001fb69:	6a 00                	push   0x0
c001fb6b:	e8 3b fe ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fb70:	59                   	pop    ecx
c001fb71:	5e                   	pop    esi
c001fb72:	52                   	push   edx
c001fb73:	50                   	push   eax
c001fb74:	e8 c2 fd ff ff       	call   c001f93b <Vm::fpuChs(unsigned long long)>
c001fb79:	eb 13                	jmp    c001fb8e <Vm::x87Handler(regs*)+0xa6>
c001fb7b:	83 ec 0c             	sub    esp,0xc
c001fb7e:	6a 00                	push   0x0
c001fb80:	e8 26 fe ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fb85:	5f                   	pop    edi
c001fb86:	5d                   	pop    ebp
c001fb87:	52                   	push   edx
c001fb88:	50                   	push   eax
c001fb89:	e8 a4 fd ff ff       	call   c001f932 <Vm::fpuAbs(unsigned long long)>
c001fb8e:	83 c4 0c             	add    esp,0xc
c001fb91:	52                   	push   edx
c001fb92:	50                   	push   eax
c001fb93:	6a 00                	push   0x0
c001fb95:	e8 54 fe ff ff       	call   c001f9ee <Vm::fpuSetReg(int, unsigned long long)>
c001fb9a:	eb bc                	jmp    c001fb58 <Vm::x87Handler(regs*)+0x70>
c001fb9c:	e8 d3 fc ff ff       	call   c001f874 <Vm::fpuGetLog210()>
c001fba1:	eb ac                	jmp    c001fb4f <Vm::x87Handler(regs*)+0x67>
c001fba3:	e8 9c fc ff ff       	call   c001f844 <Vm::fpuGetLog2E()>
c001fba8:	eb a5                	jmp    c001fb4f <Vm::x87Handler(regs*)+0x67>
c001fbaa:	e8 8d fc ff ff       	call   c001f83c <Vm::fpuGetPi()>
c001fbaf:	eb 9e                	jmp    c001fb4f <Vm::x87Handler(regs*)+0x67>
c001fbb1:	e8 d6 fc ff ff       	call   c001f88c <Vm::fpuGetLog102()>
c001fbb6:	eb 97                	jmp    c001fb4f <Vm::x87Handler(regs*)+0x67>
c001fbb8:	e8 9f fc ff ff       	call   c001f85c <Vm::fpuGetLogE2()>
c001fbbd:	eb 90                	jmp    c001fb4f <Vm::x87Handler(regs*)+0x67>
c001fbbf:	8d 50 40             	lea    edx,[eax+0x40]
c001fbc2:	80 fa 07             	cmp    dl,0x7
c001fbc5:	77 15                	ja     c001fbdc <Vm::x87Handler(regs*)+0xf4>
c001fbc7:	83 ec 0c             	sub    esp,0xc
c001fbca:	2d c0 00 00 00       	sub    eax,0xc0
c001fbcf:	50                   	push   eax
c001fbd0:	e8 d6 fd ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fbd5:	59                   	pop    ecx
c001fbd6:	5e                   	pop    esi
c001fbd7:	e9 75 ff ff ff       	jmp    c001fb51 <Vm::x87Handler(regs*)+0x69>
c001fbdc:	8d 50 38             	lea    edx,[eax+0x38]
c001fbdf:	80 fa 07             	cmp    dl,0x7
c001fbe2:	77 3c                	ja     c001fc20 <Vm::x87Handler(regs*)+0x138>
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	2d c8 00 00 00       	sub    eax,0xc8
c001fbec:	50                   	push   eax
c001fbed:	e8 b9 fd ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fbf2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbf9:	89 c6                	mov    esi,eax
c001fbfb:	89 d7                	mov    edi,edx
c001fbfd:	e8 a9 fd ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fc02:	83 c4 0c             	add    esp,0xc
c001fc05:	52                   	push   edx
c001fc06:	50                   	push   eax
c001fc07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc0b:	2d c8 00 00 00       	sub    eax,0xc8
c001fc10:	50                   	push   eax
c001fc11:	e8 d8 fd ff ff       	call   c001f9ee <Vm::fpuSetReg(int, unsigned long long)>
c001fc16:	83 c4 0c             	add    esp,0xc
c001fc19:	57                   	push   edi
c001fc1a:	56                   	push   esi
c001fc1b:	e9 73 ff ff ff       	jmp    c001fb93 <Vm::x87Handler(regs*)+0xab>
c001fc20:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc24:	84 d2                	test   dl,dl
c001fc26:	75 0f                	jne    c001fc37 <Vm::x87Handler(regs*)+0x14f>
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	ff 36                	push   DWORD PTR [esi]
c001fc2d:	e8 c8 fa ff ff       	call   c001f6fa <Vm::fpu32ToInternal(unsigned int)>
c001fc32:	e9 bf 00 00 00       	jmp    c001fcf6 <Vm::x87Handler(regs*)+0x20e>
c001fc37:	80 fa 03             	cmp    dl,0x3
c001fc3a:	75 13                	jne    c001fc4f <Vm::x87Handler(regs*)+0x167>
c001fc3c:	e8 55 fe ff ff       	call   c001fa96 <Vm::fpuPop()>
c001fc41:	55                   	push   ebp
c001fc42:	55                   	push   ebp
c001fc43:	52                   	push   edx
c001fc44:	50                   	push   eax
c001fc45:	e8 4c fa ff ff       	call   c001f696 <Vm::fpuInternalTo32(unsigned long long)>
c001fc4a:	e9 88 00 00 00       	jmp    c001fcd7 <Vm::x87Handler(regs*)+0x1ef>
c001fc4f:	80 fa 05             	cmp    dl,0x5
c001fc52:	75 0e                	jne    c001fc62 <Vm::x87Handler(regs*)+0x17a>
c001fc54:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc57:	66 a3 42 1c 03 c0    	mov    ds:0xc0031c42,ax
c001fc5d:	e9 df 00 00 00       	jmp    c001fd41 <Vm::x87Handler(regs*)+0x259>
c001fc62:	31 c0                	xor    eax,eax
c001fc64:	80 fa 07             	cmp    dl,0x7
c001fc67:	0f 85 dc 08 00 00    	jne    c0020549 <Vm::x87Handler(regs*)+0xa61>
c001fc6d:	66 a1 42 1c 03 c0    	mov    ax,ds:0xc0031c42
c001fc73:	66 89 06             	mov    WORD PTR [esi],ax
c001fc76:	e9 c6 00 00 00       	jmp    c001fd41 <Vm::x87Handler(regs*)+0x259>
c001fc7b:	80 fa d8             	cmp    dl,0xd8
c001fc7e:	0f 84 c9 00 00 00    	je     c001fd4d <Vm::x87Handler(regs*)+0x265>
c001fc84:	80 fa dc             	cmp    dl,0xdc
c001fc87:	0f 84 0d 02 00 00    	je     c001fe9a <Vm::x87Handler(regs*)+0x3b2>
c001fc8d:	80 fa de             	cmp    dl,0xde
c001fc90:	0f 84 cd 02 00 00    	je     c001ff63 <Vm::x87Handler(regs*)+0x47b>
c001fc96:	80 fa dd             	cmp    dl,0xdd
c001fc99:	0f 84 5f 04 00 00    	je     c00200fe <Vm::x87Handler(regs*)+0x616>
c001fc9f:	80 fa da             	cmp    dl,0xda
c001fca2:	0f 84 24 05 00 00    	je     c00201cc <Vm::x87Handler(regs*)+0x6e4>
c001fca8:	80 fa df             	cmp    dl,0xdf
c001fcab:	0f 84 68 05 00 00    	je     c0020219 <Vm::x87Handler(regs*)+0x731>
c001fcb1:	31 c0                	xor    eax,eax
c001fcb3:	80 fa db             	cmp    dl,0xdb
c001fcb6:	0f 85 8d 08 00 00    	jne    c0020549 <Vm::x87Handler(regs*)+0xa61>
c001fcbc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcc0:	80 fa 03             	cmp    dl,0x3
c001fcc3:	0f 85 70 06 00 00    	jne    c0020339 <Vm::x87Handler(regs*)+0x851>
c001fcc9:	e8 c8 fd ff ff       	call   c001fa96 <Vm::fpuPop()>
c001fcce:	55                   	push   ebp
c001fccf:	55                   	push   ebp
c001fcd0:	52                   	push   edx
c001fcd1:	50                   	push   eax
c001fcd2:	e8 71 fa ff ff       	call   c001f748 <Vm::fpuFloatToLong(unsigned long long)>
c001fcd7:	83 c4 10             	add    esp,0x10
c001fcda:	89 06                	mov    DWORD PTR [esi],eax
c001fcdc:	eb 63                	jmp    c001fd41 <Vm::x87Handler(regs*)+0x259>
c001fcde:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fce2:	84 d2                	test   dl,dl
c001fce4:	0f 85 e6 05 00 00    	jne    c00202d0 <Vm::x87Handler(regs*)+0x7e8>
c001fcea:	57                   	push   edi
c001fceb:	57                   	push   edi
c001fcec:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcef:	ff 36                	push   DWORD PTR [esi]
c001fcf1:	e8 49 fa ff ff       	call   c001f73f <Vm::fpu64ToInternal(unsigned long long)>
c001fcf6:	5e                   	pop    esi
c001fcf7:	5f                   	pop    edi
c001fcf8:	52                   	push   edx
c001fcf9:	50                   	push   eax
c001fcfa:	e8 3a fd ff ff       	call   c001fa39 <Vm::fpuPush(unsigned long long)>
c001fcff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd03:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd06:	e9 51 fe ff ff       	jmp    c001fb5c <Vm::x87Handler(regs*)+0x74>
c001fd0b:	80 fa 03             	cmp    dl,0x3
c001fd0e:	0f 85 d7 06 00 00    	jne    c00203eb <Vm::x87Handler(regs*)+0x903>
c001fd14:	57                   	push   edi
c001fd15:	57                   	push   edi
c001fd16:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd19:	ff 36                	push   DWORD PTR [esi]
c001fd1b:	e8 1f fa ff ff       	call   c001f73f <Vm::fpu64ToInternal(unsigned long long)>
c001fd20:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd27:	89 c6                	mov    esi,eax
c001fd29:	89 d7                	mov    edi,edx
c001fd2b:	e8 7b fc ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fd30:	57                   	push   edi
c001fd31:	56                   	push   esi
c001fd32:	52                   	push   edx
c001fd33:	50                   	push   eax
c001fd34:	e8 95 fb ff ff       	call   c001f8ce <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd39:	83 c4 20             	add    esp,0x20
c001fd3c:	e8 55 fd ff ff       	call   c001fa96 <Vm::fpuPop()>
c001fd41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd45:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd48:	e9 12 fe ff ff       	jmp    c001fb5f <Vm::x87Handler(regs*)+0x77>
c001fd4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd51:	8d 50 40             	lea    edx,[eax+0x40]
c001fd54:	80 fa 07             	cmp    dl,0x7
c001fd57:	77 29                	ja     c001fd82 <Vm::x87Handler(regs*)+0x29a>
c001fd59:	83 ec 0c             	sub    esp,0xc
c001fd5c:	2d c0 00 00 00       	sub    eax,0xc0
c001fd61:	50                   	push   eax
c001fd62:	e8 44 fc ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fd67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6e:	89 c6                	mov    esi,eax
c001fd70:	89 d7                	mov    edi,edx
c001fd72:	e8 34 fc ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fd77:	57                   	push   edi
c001fd78:	56                   	push   esi
c001fd79:	52                   	push   edx
c001fd7a:	50                   	push   eax
c001fd7b:	e8 a1 fb ff ff       	call   c001f921 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd80:	eb 2f                	jmp    c001fdb1 <Vm::x87Handler(regs*)+0x2c9>
c001fd82:	8d 50 38             	lea    edx,[eax+0x38]
c001fd85:	80 fa 07             	cmp    dl,0x7
c001fd88:	77 2f                	ja     c001fdb9 <Vm::x87Handler(regs*)+0x2d1>
c001fd8a:	83 ec 0c             	sub    esp,0xc
c001fd8d:	2d c8 00 00 00       	sub    eax,0xc8
c001fd92:	50                   	push   eax
c001fd93:	e8 13 fc ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fd98:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd9f:	89 c6                	mov    esi,eax
c001fda1:	89 d7                	mov    edi,edx
c001fda3:	e8 03 fc ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fda8:	57                   	push   edi
c001fda9:	56                   	push   esi
c001fdaa:	52                   	push   edx
c001fdab:	50                   	push   eax
c001fdac:	e8 a9 fb ff ff       	call   c001f95a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdb1:	83 c4 1c             	add    esp,0x1c
c001fdb4:	e9 d8 fd ff ff       	jmp    c001fb91 <Vm::x87Handler(regs*)+0xa9>
c001fdb9:	8d 50 30             	lea    edx,[eax+0x30]
c001fdbc:	80 fa 07             	cmp    dl,0x7
c001fdbf:	77 0d                	ja     c001fdce <Vm::x87Handler(regs*)+0x2e6>
c001fdc1:	83 ec 0c             	sub    esp,0xc
c001fdc4:	2d d0 00 00 00       	sub    eax,0xd0
c001fdc9:	e9 99 03 00 00       	jmp    c0020167 <Vm::x87Handler(regs*)+0x67f>
c001fdce:	8d 50 28             	lea    edx,[eax+0x28]
c001fdd1:	80 fa 07             	cmp    dl,0x7
c001fdd4:	77 0d                	ja     c001fde3 <Vm::x87Handler(regs*)+0x2fb>
c001fdd6:	83 ec 0c             	sub    esp,0xc
c001fdd9:	2d d8 00 00 00       	sub    eax,0xd8
c001fdde:	e9 c0 03 00 00       	jmp    c00201a3 <Vm::x87Handler(regs*)+0x6bb>
c001fde3:	8d 50 20             	lea    edx,[eax+0x20]
c001fde6:	80 fa 07             	cmp    dl,0x7
c001fde9:	77 1b                	ja     c001fe06 <Vm::x87Handler(regs*)+0x31e>
c001fdeb:	83 ec 0c             	sub    esp,0xc
c001fdee:	2d e0 00 00 00       	sub    eax,0xe0
c001fdf3:	50                   	push   eax
c001fdf4:	e8 b2 fb ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fdf9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe00:	89 c6                	mov    esi,eax
c001fe02:	89 d7                	mov    edi,edx
c001fe04:	eb 22                	jmp    c001fe28 <Vm::x87Handler(regs*)+0x340>
c001fe06:	8d 50 18             	lea    edx,[eax+0x18]
c001fe09:	80 fa 07             	cmp    dl,0x7
c001fe0c:	77 2d                	ja     c001fe3b <Vm::x87Handler(regs*)+0x353>
c001fe0e:	83 ec 0c             	sub    esp,0xc
c001fe11:	6a 00                	push   0x0
c001fe13:	e8 93 fb ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fe18:	89 c6                	mov    esi,eax
c001fe1a:	89 d7                	mov    edi,edx
c001fe1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe20:	2d e8 00 00 00       	sub    eax,0xe8
c001fe25:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe28:	e8 7e fb ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fe2d:	57                   	push   edi
c001fe2e:	56                   	push   esi
c001fe2f:	52                   	push   edx
c001fe30:	50                   	push   eax
c001fe31:	e8 15 fb ff ff       	call   c001f94b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe36:	e9 76 ff ff ff       	jmp    c001fdb1 <Vm::x87Handler(regs*)+0x2c9>
c001fe3b:	8d 50 10             	lea    edx,[eax+0x10]
c001fe3e:	80 fa 07             	cmp    dl,0x7
c001fe41:	77 1b                	ja     c001fe5e <Vm::x87Handler(regs*)+0x376>
c001fe43:	83 ec 0c             	sub    esp,0xc
c001fe46:	2d f0 00 00 00       	sub    eax,0xf0
c001fe4b:	50                   	push   eax
c001fe4c:	e8 5a fb ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fe51:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe58:	89 c6                	mov    esi,eax
c001fe5a:	89 d7                	mov    edi,edx
c001fe5c:	eb 22                	jmp    c001fe80 <Vm::x87Handler(regs*)+0x398>
c001fe5e:	3c f7                	cmp    al,0xf7
c001fe60:	0f 86 d1 03 00 00    	jbe    c0020237 <Vm::x87Handler(regs*)+0x74f>
c001fe66:	83 ec 0c             	sub    esp,0xc
c001fe69:	6a 00                	push   0x0
c001fe6b:	e8 3b fb ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fe70:	89 c6                	mov    esi,eax
c001fe72:	89 d7                	mov    edi,edx
c001fe74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe78:	2d f8 00 00 00       	sub    eax,0xf8
c001fe7d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe80:	e8 26 fb ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fe85:	57                   	push   edi
c001fe86:	56                   	push   esi
c001fe87:	52                   	push   edx
c001fe88:	50                   	push   eax
c001fe89:	e8 eb fa ff ff       	call   c001f979 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe8e:	83 c4 1c             	add    esp,0x1c
c001fe91:	52                   	push   edx
c001fe92:	50                   	push   eax
c001fe93:	6a 00                	push   0x0
c001fe95:	e9 51 02 00 00       	jmp    c00200eb <Vm::x87Handler(regs*)+0x603>
c001fe9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe9e:	8d 50 40             	lea    edx,[eax+0x40]
c001fea1:	80 fa 07             	cmp    dl,0x7
c001fea4:	77 37                	ja     c001fedd <Vm::x87Handler(regs*)+0x3f5>
c001fea6:	83 ec 0c             	sub    esp,0xc
c001fea9:	2d c0 00 00 00       	sub    eax,0xc0
c001feae:	50                   	push   eax
c001feaf:	e8 f7 fa ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001feb4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001febb:	89 c6                	mov    esi,eax
c001febd:	89 d7                	mov    edi,edx
c001febf:	e8 e7 fa ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fec4:	57                   	push   edi
c001fec5:	56                   	push   esi
c001fec6:	52                   	push   edx
c001fec7:	50                   	push   eax
c001fec8:	e8 54 fa ff ff       	call   c001f921 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fecd:	83 c4 1c             	add    esp,0x1c
c001fed0:	52                   	push   edx
c001fed1:	50                   	push   eax
c001fed2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fed6:	2d c0 00 00 00       	sub    eax,0xc0
c001fedb:	eb 3d                	jmp    c001ff1a <Vm::x87Handler(regs*)+0x432>
c001fedd:	8d 50 38             	lea    edx,[eax+0x38]
c001fee0:	80 fa 07             	cmp    dl,0x7
c001fee3:	77 3b                	ja     c001ff20 <Vm::x87Handler(regs*)+0x438>
c001fee5:	83 ec 0c             	sub    esp,0xc
c001fee8:	2d c8 00 00 00       	sub    eax,0xc8
c001feed:	50                   	push   eax
c001feee:	e8 b8 fa ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fef3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fefa:	89 c6                	mov    esi,eax
c001fefc:	89 d7                	mov    edi,edx
c001fefe:	e8 a8 fa ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001ff03:	57                   	push   edi
c001ff04:	56                   	push   esi
c001ff05:	52                   	push   edx
c001ff06:	50                   	push   eax
c001ff07:	e8 4e fa ff ff       	call   c001f95a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff0c:	83 c4 1c             	add    esp,0x1c
c001ff0f:	52                   	push   edx
c001ff10:	50                   	push   eax
c001ff11:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff15:	2d c8 00 00 00       	sub    eax,0xc8
c001ff1a:	50                   	push   eax
c001ff1b:	e9 75 fc ff ff       	jmp    c001fb95 <Vm::x87Handler(regs*)+0xad>
c001ff20:	83 c0 18             	add    eax,0x18
c001ff23:	3c 07                	cmp    al,0x7
c001ff25:	0f 87 3b 04 00 00    	ja     c0020366 <Vm::x87Handler(regs*)+0x87e>
c001ff2b:	83 ec 0c             	sub    esp,0xc
c001ff2e:	6a 00                	push   0x0
c001ff30:	e8 76 fa ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001ff35:	89 c6                	mov    esi,eax
c001ff37:	89 d7                	mov    edi,edx
c001ff39:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff3d:	2d e8 00 00 00       	sub    eax,0xe8
c001ff42:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff45:	e8 61 fa ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001ff4a:	57                   	push   edi
c001ff4b:	56                   	push   esi
c001ff4c:	52                   	push   edx
c001ff4d:	50                   	push   eax
c001ff4e:	e8 f8 f9 ff ff       	call   c001f94b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff53:	83 c4 1c             	add    esp,0x1c
c001ff56:	52                   	push   edx
c001ff57:	50                   	push   eax
c001ff58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff5c:	2d e8 00 00 00       	sub    eax,0xe8
c001ff61:	eb b7                	jmp    c001ff1a <Vm::x87Handler(regs*)+0x432>
c001ff63:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff67:	8d 50 40             	lea    edx,[eax+0x40]
c001ff6a:	80 fa 07             	cmp    dl,0x7
c001ff6d:	77 3a                	ja     c001ffa9 <Vm::x87Handler(regs*)+0x4c1>
c001ff6f:	83 ec 0c             	sub    esp,0xc
c001ff72:	2d c0 00 00 00       	sub    eax,0xc0
c001ff77:	50                   	push   eax
c001ff78:	e8 2e fa ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001ff7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff84:	89 c6                	mov    esi,eax
c001ff86:	89 d7                	mov    edi,edx
c001ff88:	e8 1e fa ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001ff8d:	57                   	push   edi
c001ff8e:	56                   	push   esi
c001ff8f:	52                   	push   edx
c001ff90:	50                   	push   eax
c001ff91:	e8 8b f9 ff ff       	call   c001f921 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff96:	83 c4 1c             	add    esp,0x1c
c001ff99:	52                   	push   edx
c001ff9a:	50                   	push   eax
c001ff9b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff9f:	2d c0 00 00 00       	sub    eax,0xc0
c001ffa4:	e9 9e 01 00 00       	jmp    c0020147 <Vm::x87Handler(regs*)+0x65f>
c001ffa9:	8d 50 20             	lea    edx,[eax+0x20]
c001ffac:	80 fa 07             	cmp    dl,0x7
c001ffaf:	77 3a                	ja     c001ffeb <Vm::x87Handler(regs*)+0x503>
c001ffb1:	83 ec 0c             	sub    esp,0xc
c001ffb4:	2d e0 00 00 00       	sub    eax,0xe0
c001ffb9:	50                   	push   eax
c001ffba:	e8 ec f9 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001ffbf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc6:	89 c6                	mov    esi,eax
c001ffc8:	89 d7                	mov    edi,edx
c001ffca:	e8 dc f9 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001ffcf:	57                   	push   edi
c001ffd0:	56                   	push   esi
c001ffd1:	52                   	push   edx
c001ffd2:	50                   	push   eax
c001ffd3:	e8 73 f9 ff ff       	call   c001f94b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffd8:	83 c4 1c             	add    esp,0x1c
c001ffdb:	52                   	push   edx
c001ffdc:	50                   	push   eax
c001ffdd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe1:	2d e0 00 00 00       	sub    eax,0xe0
c001ffe6:	e9 5c 01 00 00       	jmp    c0020147 <Vm::x87Handler(regs*)+0x65f>
c001ffeb:	8d 50 18             	lea    edx,[eax+0x18]
c001ffee:	80 fa 07             	cmp    dl,0x7
c001fff1:	77 3b                	ja     c002002e <Vm::x87Handler(regs*)+0x546>
c001fff3:	83 ec 0c             	sub    esp,0xc
c001fff6:	6a 00                	push   0x0
c001fff8:	e8 ae f9 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c001fffd:	89 c6                	mov    esi,eax
c001ffff:	89 d7                	mov    edi,edx
c0020001:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020005:	2d e8 00 00 00       	sub    eax,0xe8
c002000a:	89 04 24             	mov    DWORD PTR [esp],eax
c002000d:	e8 99 f9 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020012:	57                   	push   edi
c0020013:	56                   	push   esi
c0020014:	52                   	push   edx
c0020015:	50                   	push   eax
c0020016:	e8 30 f9 ff ff       	call   c001f94b <Vm::fpuSub(unsigned long long, unsigned long long)>
c002001b:	83 c4 1c             	add    esp,0x1c
c002001e:	52                   	push   edx
c002001f:	50                   	push   eax
c0020020:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020024:	2d e8 00 00 00       	sub    eax,0xe8
c0020029:	e9 19 01 00 00       	jmp    c0020147 <Vm::x87Handler(regs*)+0x65f>
c002002e:	8d 50 38             	lea    edx,[eax+0x38]
c0020031:	80 fa 07             	cmp    dl,0x7
c0020034:	77 37                	ja     c002006d <Vm::x87Handler(regs*)+0x585>
c0020036:	83 ec 0c             	sub    esp,0xc
c0020039:	2d c8 00 00 00       	sub    eax,0xc8
c002003e:	50                   	push   eax
c002003f:	e8 67 f9 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020044:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002004b:	89 c6                	mov    esi,eax
c002004d:	89 d7                	mov    edi,edx
c002004f:	e8 57 f9 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020054:	57                   	push   edi
c0020055:	56                   	push   esi
c0020056:	52                   	push   edx
c0020057:	50                   	push   eax
c0020058:	e8 fd f8 ff ff       	call   c001f95a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002005d:	83 c4 1c             	add    esp,0x1c
c0020060:	52                   	push   edx
c0020061:	50                   	push   eax
c0020062:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020066:	2d c8 00 00 00       	sub    eax,0xc8
c002006b:	eb 7d                	jmp    c00200ea <Vm::x87Handler(regs*)+0x602>
c002006d:	3c f7                	cmp    al,0xf7
c002006f:	76 38                	jbe    c00200a9 <Vm::x87Handler(regs*)+0x5c1>
c0020071:	83 ec 0c             	sub    esp,0xc
c0020074:	6a 00                	push   0x0
c0020076:	e8 30 f9 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c002007b:	89 c6                	mov    esi,eax
c002007d:	89 d7                	mov    edi,edx
c002007f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020083:	2d f8 00 00 00       	sub    eax,0xf8
c0020088:	89 04 24             	mov    DWORD PTR [esp],eax
c002008b:	e8 1b f9 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020090:	57                   	push   edi
c0020091:	56                   	push   esi
c0020092:	52                   	push   edx
c0020093:	50                   	push   eax
c0020094:	e8 e0 f8 ff ff       	call   c001f979 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020099:	83 c4 1c             	add    esp,0x1c
c002009c:	52                   	push   edx
c002009d:	50                   	push   eax
c002009e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a2:	2d f8 00 00 00       	sub    eax,0xf8
c00200a7:	eb 41                	jmp    c00200ea <Vm::x87Handler(regs*)+0x602>
c00200a9:	8d 50 10             	lea    edx,[eax+0x10]
c00200ac:	80 fa 07             	cmp    dl,0x7
c00200af:	0f 87 5a 01 00 00    	ja     c002020f <Vm::x87Handler(regs*)+0x727>
c00200b5:	83 ec 0c             	sub    esp,0xc
c00200b8:	2d f0 00 00 00       	sub    eax,0xf0
c00200bd:	50                   	push   eax
c00200be:	e8 e8 f8 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00200c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200ca:	89 c6                	mov    esi,eax
c00200cc:	89 d7                	mov    edi,edx
c00200ce:	e8 d8 f8 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00200d3:	57                   	push   edi
c00200d4:	56                   	push   esi
c00200d5:	52                   	push   edx
c00200d6:	50                   	push   eax
c00200d7:	e8 9d f8 ff ff       	call   c001f979 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200dc:	83 c4 1c             	add    esp,0x1c
c00200df:	52                   	push   edx
c00200e0:	50                   	push   eax
c00200e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e5:	2d f0 00 00 00       	sub    eax,0xf0
c00200ea:	50                   	push   eax
c00200eb:	e8 fe f8 ff ff       	call   c001f9ee <Vm::fpuSetReg(int, unsigned long long)>
c00200f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200f4:	e8 9d f9 ff ff       	call   c001fa96 <Vm::fpuPop()>
c00200f9:	e9 5e fa ff ff       	jmp    c001fb5c <Vm::x87Handler(regs*)+0x74>
c00200fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020102:	8d 50 30             	lea    edx,[eax+0x30]
c0020105:	80 fa 07             	cmp    dl,0x7
c0020108:	77 1d                	ja     c0020127 <Vm::x87Handler(regs*)+0x63f>
c002010a:	83 ec 0c             	sub    esp,0xc
c002010d:	6a 00                	push   0x0
c002010f:	e8 97 f8 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020114:	83 c4 0c             	add    esp,0xc
c0020117:	52                   	push   edx
c0020118:	50                   	push   eax
c0020119:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002011d:	2d d0 00 00 00       	sub    eax,0xd0
c0020122:	e9 f3 fd ff ff       	jmp    c001ff1a <Vm::x87Handler(regs*)+0x432>
c0020127:	8d 50 28             	lea    edx,[eax+0x28]
c002012a:	80 fa 07             	cmp    dl,0x7
c002012d:	77 28                	ja     c0020157 <Vm::x87Handler(regs*)+0x66f>
c002012f:	83 ec 0c             	sub    esp,0xc
c0020132:	6a 00                	push   0x0
c0020134:	e8 72 f8 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020139:	83 c4 0c             	add    esp,0xc
c002013c:	52                   	push   edx
c002013d:	50                   	push   eax
c002013e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020142:	2d d8 00 00 00       	sub    eax,0xd8
c0020147:	50                   	push   eax
c0020148:	e8 a1 f8 ff ff       	call   c001f9ee <Vm::fpuSetReg(int, unsigned long long)>
c002014d:	e8 44 f9 ff ff       	call   c001fa96 <Vm::fpuPop()>
c0020152:	e9 01 fa ff ff       	jmp    c001fb58 <Vm::x87Handler(regs*)+0x70>
c0020157:	8d 50 20             	lea    edx,[eax+0x20]
c002015a:	80 fa 07             	cmp    dl,0x7
c002015d:	77 30                	ja     c002018f <Vm::x87Handler(regs*)+0x6a7>
c002015f:	83 ec 0c             	sub    esp,0xc
c0020162:	2d e0 00 00 00       	sub    eax,0xe0
c0020167:	50                   	push   eax
c0020168:	e8 3e f8 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c002016d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020174:	89 c6                	mov    esi,eax
c0020176:	89 d7                	mov    edi,edx
c0020178:	e8 2e f8 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c002017d:	57                   	push   edi
c002017e:	56                   	push   esi
c002017f:	52                   	push   edx
c0020180:	50                   	push   eax
c0020181:	e8 48 f7 ff ff       	call   c001f8ce <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020186:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002018a:	e9 54 02 00 00       	jmp    c00203e3 <Vm::x87Handler(regs*)+0x8fb>
c002018f:	8d 50 18             	lea    edx,[eax+0x18]
c0020192:	80 fa 07             	cmp    dl,0x7
c0020195:	0f 87 43 fb ff ff    	ja     c001fcde <Vm::x87Handler(regs*)+0x1f6>
c002019b:	83 ec 0c             	sub    esp,0xc
c002019e:	2d e8 00 00 00       	sub    eax,0xe8
c00201a3:	50                   	push   eax
c00201a4:	e8 02 f8 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00201a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b0:	89 c6                	mov    esi,eax
c00201b2:	89 d7                	mov    edi,edx
c00201b4:	e8 f2 f7 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00201b9:	57                   	push   edi
c00201ba:	56                   	push   esi
c00201bb:	52                   	push   edx
c00201bc:	50                   	push   eax
c00201bd:	e8 0c f7 ff ff       	call   c001f8ce <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c2:	83 c4 20             	add    esp,0x20
c00201c5:	e8 cc f8 ff ff       	call   c001fa96 <Vm::fpuPop()>
c00201ca:	eb 62                	jmp    c002022e <Vm::x87Handler(regs*)+0x746>
c00201cc:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00201d0:	0f 85 0f 01 00 00    	jne    c00202e5 <Vm::x87Handler(regs*)+0x7fd>
c00201d6:	83 ec 0c             	sub    esp,0xc
c00201d9:	6a 01                	push   0x1
c00201db:	e8 cb f7 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00201e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201e7:	89 c6                	mov    esi,eax
c00201e9:	89 d7                	mov    edi,edx
c00201eb:	e8 bb f7 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00201f0:	57                   	push   edi
c00201f1:	56                   	push   esi
c00201f2:	52                   	push   edx
c00201f3:	50                   	push   eax
c00201f4:	e8 d5 f6 ff ff       	call   c001f8ce <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201f9:	83 c4 20             	add    esp,0x20
c00201fc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020200:	e8 91 f8 ff ff       	call   c001fa96 <Vm::fpuPop()>
c0020205:	e8 8c f8 ff ff       	call   c001fa96 <Vm::fpuPop()>
c002020a:	e9 50 f9 ff ff       	jmp    c001fb5f <Vm::x87Handler(regs*)+0x77>
c002020f:	3c d9                	cmp    al,0xd9
c0020211:	0f 85 b5 02 00 00    	jne    c00204cc <Vm::x87Handler(regs*)+0x9e4>
c0020217:	eb bd                	jmp    c00201d6 <Vm::x87Handler(regs*)+0x6ee>
c0020219:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002021d:	0f 85 ea 02 00 00    	jne    c002050d <Vm::x87Handler(regs*)+0xa25>
c0020223:	0f b7 05 40 1c 03 c0 	movzx  eax,WORD PTR ds:0xc0031c40
c002022a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002022e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020232:	e9 28 f9 ff ff       	jmp    c001fb5f <Vm::x87Handler(regs*)+0x77>
c0020237:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002023b:	84 d2                	test   dl,dl
c002023d:	75 0f                	jne    c002024e <Vm::x87Handler(regs*)+0x766>
c002023f:	83 ec 0c             	sub    esp,0xc
c0020242:	ff 36                	push   DWORD PTR [esi]
c0020244:	e8 b1 f4 ff ff       	call   c001f6fa <Vm::fpu32ToInternal(unsigned int)>
c0020249:	e9 2c 01 00 00       	jmp    c002037a <Vm::x87Handler(regs*)+0x892>
c002024e:	80 fa 01             	cmp    dl,0x1
c0020251:	75 0f                	jne    c0020262 <Vm::x87Handler(regs*)+0x77a>
c0020253:	83 ec 0c             	sub    esp,0xc
c0020256:	ff 36                	push   DWORD PTR [esi]
c0020258:	e8 9d f4 ff ff       	call   c001f6fa <Vm::fpu32ToInternal(unsigned int)>
c002025d:	e9 81 02 00 00       	jmp    c00204e3 <Vm::x87Handler(regs*)+0x9fb>
c0020262:	80 fa 04             	cmp    dl,0x4
c0020265:	75 0f                	jne    c0020276 <Vm::x87Handler(regs*)+0x78e>
c0020267:	83 ec 0c             	sub    esp,0xc
c002026a:	ff 36                	push   DWORD PTR [esi]
c002026c:	e8 89 f4 ff ff       	call   c001f6fa <Vm::fpu32ToInternal(unsigned int)>
c0020271:	e9 86 01 00 00       	jmp    c00203fc <Vm::x87Handler(regs*)+0x914>
c0020276:	80 fa 05             	cmp    dl,0x5
c0020279:	75 1b                	jne    c0020296 <Vm::x87Handler(regs*)+0x7ae>
c002027b:	83 ec 0c             	sub    esp,0xc
c002027e:	6a 00                	push   0x0
c0020280:	e8 26 f7 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020285:	89 c7                	mov    edi,eax
c0020287:	89 d5                	mov    ebp,edx
c0020289:	58                   	pop    eax
c002028a:	ff 36                	push   DWORD PTR [esi]
c002028c:	e8 69 f4 ff ff       	call   c001f6fa <Vm::fpu32ToInternal(unsigned int)>
c0020291:	e9 a3 01 00 00       	jmp    c0020439 <Vm::x87Handler(regs*)+0x951>
c0020296:	80 fa 06             	cmp    dl,0x6
c0020299:	75 0f                	jne    c00202aa <Vm::x87Handler(regs*)+0x7c2>
c002029b:	83 ec 0c             	sub    esp,0xc
c002029e:	ff 36                	push   DWORD PTR [esi]
c00202a0:	e8 55 f4 ff ff       	call   c001f6fa <Vm::fpu32ToInternal(unsigned int)>
c00202a5:	e9 ae 01 00 00       	jmp    c0020458 <Vm::x87Handler(regs*)+0x970>
c00202aa:	31 c0                	xor    eax,eax
c00202ac:	80 fa 07             	cmp    dl,0x7
c00202af:	0f 85 94 02 00 00    	jne    c0020549 <Vm::x87Handler(regs*)+0xa61>
c00202b5:	83 ec 0c             	sub    esp,0xc
c00202b8:	6a 00                	push   0x0
c00202ba:	e8 ec f6 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00202bf:	89 c7                	mov    edi,eax
c00202c1:	89 d5                	mov    ebp,edx
c00202c3:	58                   	pop    eax
c00202c4:	ff 36                	push   DWORD PTR [esi]
c00202c6:	e8 2f f4 ff ff       	call   c001f6fa <Vm::fpu32ToInternal(unsigned int)>
c00202cb:	e9 cb 01 00 00       	jmp    c002049b <Vm::x87Handler(regs*)+0x9b3>
c00202d0:	80 fa 03             	cmp    dl,0x3
c00202d3:	0f 85 d3 01 00 00    	jne    c00204ac <Vm::x87Handler(regs*)+0x9c4>
c00202d9:	e8 b8 f7 ff ff       	call   c001fa96 <Vm::fpuPop()>
c00202de:	51                   	push   ecx
c00202df:	51                   	push   ecx
c00202e0:	e9 de 01 00 00       	jmp    c00204c3 <Vm::x87Handler(regs*)+0x9db>
c00202e5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202e9:	80 fa 01             	cmp    dl,0x1
c00202ec:	75 09                	jne    c00202f7 <Vm::x87Handler(regs*)+0x80f>
c00202ee:	57                   	push   edi
c00202ef:	57                   	push   edi
c00202f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00202f2:	e9 e3 01 00 00       	jmp    c00204da <Vm::x87Handler(regs*)+0x9f2>
c00202f7:	80 fa 04             	cmp    dl,0x4
c00202fa:	75 12                	jne    c002030e <Vm::x87Handler(regs*)+0x826>
c00202fc:	31 d2                	xor    edx,edx
c00202fe:	51                   	push   ecx
c00202ff:	51                   	push   ecx
c0020300:	8b 06                	mov    eax,DWORD PTR [esi]
c0020302:	52                   	push   edx
c0020303:	50                   	push   eax
c0020304:	e8 d0 f4 ff ff       	call   c001f7d9 <Vm::fpuLongToFloat(long long)>
c0020309:	e9 ee 00 00 00       	jmp    c00203fc <Vm::x87Handler(regs*)+0x914>
c002030e:	31 c0                	xor    eax,eax
c0020310:	80 fa 07             	cmp    dl,0x7
c0020313:	0f 85 30 02 00 00    	jne    c0020549 <Vm::x87Handler(regs*)+0xa61>
c0020319:	83 ec 0c             	sub    esp,0xc
c002031c:	6a 00                	push   0x0
c002031e:	e8 88 f6 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020323:	89 c7                	mov    edi,eax
c0020325:	89 d5                	mov    ebp,edx
c0020327:	58                   	pop    eax
c0020328:	8b 06                	mov    eax,DWORD PTR [esi]
c002032a:	5a                   	pop    edx
c002032b:	31 d2                	xor    edx,edx
c002032d:	52                   	push   edx
c002032e:	50                   	push   eax
c002032f:	e8 a5 f4 ff ff       	call   c001f7d9 <Vm::fpuLongToFloat(long long)>
c0020334:	e9 62 01 00 00       	jmp    c002049b <Vm::x87Handler(regs*)+0x9b3>
c0020339:	84 d2                	test   dl,dl
c002033b:	75 0d                	jne    c002034a <Vm::x87Handler(regs*)+0x862>
c002033d:	31 d2                	xor    edx,edx
c002033f:	55                   	push   ebp
c0020340:	55                   	push   ebp
c0020341:	8b 06                	mov    eax,DWORD PTR [esi]
c0020343:	52                   	push   edx
c0020344:	50                   	push   eax
c0020345:	e9 d3 01 00 00       	jmp    c002051d <Vm::x87Handler(regs*)+0xa35>
c002034a:	31 c0                	xor    eax,eax
c002034c:	80 fa 02             	cmp    dl,0x2
c002034f:	0f 85 f4 01 00 00    	jne    c0020549 <Vm::x87Handler(regs*)+0xa61>
c0020355:	83 ec 0c             	sub    esp,0xc
c0020358:	6a 00                	push   0x0
c002035a:	e8 4c f6 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c002035f:	59                   	pop    ecx
c0020360:	5f                   	pop    edi
c0020361:	e9 6a f9 ff ff       	jmp    c001fcd0 <Vm::x87Handler(regs*)+0x1e8>
c0020366:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002036a:	84 d2                	test   dl,dl
c002036c:	75 2a                	jne    c0020398 <Vm::x87Handler(regs*)+0x8b0>
c002036e:	50                   	push   eax
c002036f:	50                   	push   eax
c0020370:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020373:	ff 36                	push   DWORD PTR [esi]
c0020375:	e8 c5 f3 ff ff       	call   c001f73f <Vm::fpu64ToInternal(unsigned long long)>
c002037a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020381:	89 c6                	mov    esi,eax
c0020383:	89 d7                	mov    edi,edx
c0020385:	e8 21 f6 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c002038a:	57                   	push   edi
c002038b:	56                   	push   esi
c002038c:	52                   	push   edx
c002038d:	50                   	push   eax
c002038e:	e8 8e f5 ff ff       	call   c001f921 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020393:	e9 64 01 00 00       	jmp    c00204fc <Vm::x87Handler(regs*)+0xa14>
c0020398:	80 fa 01             	cmp    dl,0x1
c002039b:	75 11                	jne    c00203ae <Vm::x87Handler(regs*)+0x8c6>
c002039d:	50                   	push   eax
c002039e:	50                   	push   eax
c002039f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203a2:	ff 36                	push   DWORD PTR [esi]
c00203a4:	e8 96 f3 ff ff       	call   c001f73f <Vm::fpu64ToInternal(unsigned long long)>
c00203a9:	e9 35 01 00 00       	jmp    c00204e3 <Vm::x87Handler(regs*)+0x9fb>
c00203ae:	80 fa 02             	cmp    dl,0x2
c00203b1:	0f 85 54 f9 ff ff    	jne    c001fd0b <Vm::x87Handler(regs*)+0x223>
c00203b7:	55                   	push   ebp
c00203b8:	55                   	push   ebp
c00203b9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203bc:	ff 36                	push   DWORD PTR [esi]
c00203be:	e8 7c f3 ff ff       	call   c001f73f <Vm::fpu64ToInternal(unsigned long long)>
c00203c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ca:	89 c6                	mov    esi,eax
c00203cc:	89 d7                	mov    edi,edx
c00203ce:	e8 d8 f5 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00203d3:	57                   	push   edi
c00203d4:	56                   	push   esi
c00203d5:	52                   	push   edx
c00203d6:	50                   	push   eax
c00203d7:	e8 f2 f4 ff ff       	call   c001f8ce <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203e0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203e3:	83 c4 20             	add    esp,0x20
c00203e6:	e9 74 f7 ff ff       	jmp    c001fb5f <Vm::x87Handler(regs*)+0x77>
c00203eb:	80 fa 04             	cmp    dl,0x4
c00203ee:	75 2a                	jne    c002041a <Vm::x87Handler(regs*)+0x932>
c00203f0:	51                   	push   ecx
c00203f1:	51                   	push   ecx
c00203f2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203f5:	ff 36                	push   DWORD PTR [esi]
c00203f7:	e8 43 f3 ff ff       	call   c001f73f <Vm::fpu64ToInternal(unsigned long long)>
c00203fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020403:	89 c6                	mov    esi,eax
c0020405:	89 d7                	mov    edi,edx
c0020407:	e8 9f f5 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c002040c:	57                   	push   edi
c002040d:	56                   	push   esi
c002040e:	52                   	push   edx
c002040f:	50                   	push   eax
c0020410:	e8 36 f5 ff ff       	call   c001f94b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020415:	e9 e2 00 00 00       	jmp    c00204fc <Vm::x87Handler(regs*)+0xa14>
c002041a:	80 fa 05             	cmp    dl,0x5
c002041d:	75 28                	jne    c0020447 <Vm::x87Handler(regs*)+0x95f>
c002041f:	83 ec 0c             	sub    esp,0xc
c0020422:	6a 00                	push   0x0
c0020424:	e8 82 f5 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020429:	89 c7                	mov    edi,eax
c002042b:	89 d5                	mov    ebp,edx
c002042d:	58                   	pop    eax
c002042e:	5a                   	pop    edx
c002042f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020432:	ff 36                	push   DWORD PTR [esi]
c0020434:	e8 06 f3 ff ff       	call   c001f73f <Vm::fpu64ToInternal(unsigned long long)>
c0020439:	83 c4 10             	add    esp,0x10
c002043c:	55                   	push   ebp
c002043d:	57                   	push   edi
c002043e:	52                   	push   edx
c002043f:	50                   	push   eax
c0020440:	e8 06 f5 ff ff       	call   c001f94b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020445:	eb 60                	jmp    c00204a7 <Vm::x87Handler(regs*)+0x9bf>
c0020447:	80 fa 06             	cmp    dl,0x6
c002044a:	75 2a                	jne    c0020476 <Vm::x87Handler(regs*)+0x98e>
c002044c:	51                   	push   ecx
c002044d:	51                   	push   ecx
c002044e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020451:	ff 36                	push   DWORD PTR [esi]
c0020453:	e8 e7 f2 ff ff       	call   c001f73f <Vm::fpu64ToInternal(unsigned long long)>
c0020458:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002045f:	89 c6                	mov    esi,eax
c0020461:	89 d7                	mov    edi,edx
c0020463:	e8 43 f5 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c0020468:	57                   	push   edi
c0020469:	56                   	push   esi
c002046a:	52                   	push   edx
c002046b:	50                   	push   eax
c002046c:	e8 08 f5 ff ff       	call   c001f979 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020471:	e9 86 00 00 00       	jmp    c00204fc <Vm::x87Handler(regs*)+0xa14>
c0020476:	31 c0                	xor    eax,eax
c0020478:	80 fa 07             	cmp    dl,0x7
c002047b:	0f 85 c8 00 00 00    	jne    c0020549 <Vm::x87Handler(regs*)+0xa61>
c0020481:	83 ec 0c             	sub    esp,0xc
c0020484:	6a 00                	push   0x0
c0020486:	e8 20 f5 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c002048b:	89 c7                	mov    edi,eax
c002048d:	89 d5                	mov    ebp,edx
c002048f:	58                   	pop    eax
c0020490:	5a                   	pop    edx
c0020491:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020494:	ff 36                	push   DWORD PTR [esi]
c0020496:	e8 a4 f2 ff ff       	call   c001f73f <Vm::fpu64ToInternal(unsigned long long)>
c002049b:	83 c4 10             	add    esp,0x10
c002049e:	55                   	push   ebp
c002049f:	57                   	push   edi
c00204a0:	52                   	push   edx
c00204a1:	50                   	push   eax
c00204a2:	e8 d2 f4 ff ff       	call   c001f979 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204a7:	83 c4 0c             	add    esp,0xc
c00204aa:	eb 53                	jmp    c00204ff <Vm::x87Handler(regs*)+0xa17>
c00204ac:	31 c0                	xor    eax,eax
c00204ae:	80 fa 02             	cmp    dl,0x2
c00204b1:	0f 85 92 00 00 00    	jne    c0020549 <Vm::x87Handler(regs*)+0xa61>
c00204b7:	83 ec 0c             	sub    esp,0xc
c00204ba:	6a 00                	push   0x0
c00204bc:	e8 ea f4 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00204c1:	59                   	pop    ecx
c00204c2:	5f                   	pop    edi
c00204c3:	52                   	push   edx
c00204c4:	50                   	push   eax
c00204c5:	e8 27 f2 ff ff       	call   c001f6f1 <Vm::fpuInternalTo64(unsigned long long)>
c00204ca:	eb 70                	jmp    c002053c <Vm::x87Handler(regs*)+0xa54>
c00204cc:	31 c0                	xor    eax,eax
c00204ce:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00204d3:	75 74                	jne    c0020549 <Vm::x87Handler(regs*)+0xa61>
c00204d5:	50                   	push   eax
c00204d6:	50                   	push   eax
c00204d7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204da:	31 d2                	xor    edx,edx
c00204dc:	52                   	push   edx
c00204dd:	50                   	push   eax
c00204de:	e8 f6 f2 ff ff       	call   c001f7d9 <Vm::fpuLongToFloat(long long)>
c00204e3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204ea:	89 c6                	mov    esi,eax
c00204ec:	89 d7                	mov    edi,edx
c00204ee:	e8 b8 f4 ff ff       	call   c001f9ab <Vm::fpuGetReg(int)>
c00204f3:	57                   	push   edi
c00204f4:	56                   	push   esi
c00204f5:	52                   	push   edx
c00204f6:	50                   	push   eax
c00204f7:	e8 5e f4 ff ff       	call   c001f95a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204fc:	83 c4 1c             	add    esp,0x1c
c00204ff:	52                   	push   edx
c0020500:	50                   	push   eax
c0020501:	6a 00                	push   0x0
c0020503:	e8 e6 f4 ff ff       	call   c001f9ee <Vm::fpuSetReg(int, unsigned long long)>
c0020508:	e9 f2 f7 ff ff       	jmp    c001fcff <Vm::x87Handler(regs*)+0x217>
c002050d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020511:	80 fa 05             	cmp    dl,0x5
c0020514:	75 11                	jne    c0020527 <Vm::x87Handler(regs*)+0xa3f>
c0020516:	55                   	push   ebp
c0020517:	55                   	push   ebp
c0020518:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002051b:	ff 36                	push   DWORD PTR [esi]
c002051d:	e8 81 f2 ff ff       	call   c001f7a3 <Vm::fpuULongToFloat(unsigned long long)>
c0020522:	e9 cf f7 ff ff       	jmp    c001fcf6 <Vm::x87Handler(regs*)+0x20e>
c0020527:	31 c0                	xor    eax,eax
c0020529:	80 fa 07             	cmp    dl,0x7
c002052c:	75 1b                	jne    c0020549 <Vm::x87Handler(regs*)+0xa61>
c002052e:	e8 63 f5 ff ff       	call   c001fa96 <Vm::fpuPop()>
c0020533:	51                   	push   ecx
c0020534:	51                   	push   ecx
c0020535:	52                   	push   edx
c0020536:	50                   	push   eax
c0020537:	e8 0c f2 ff ff       	call   c001f748 <Vm::fpuFloatToLong(unsigned long long)>
c002053c:	83 c4 10             	add    esp,0x10
c002053f:	89 06                	mov    DWORD PTR [esi],eax
c0020541:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020544:	e9 f8 f7 ff ff       	jmp    c001fd41 <Vm::x87Handler(regs*)+0x259>
c0020549:	83 c4 1c             	add    esp,0x1c
c002054c:	5b                   	pop    ebx
c002054d:	5e                   	pop    esi
c002054e:	5f                   	pop    edi
c002054f:	5d                   	pop    ebp
c0020550:	c3                   	ret    

c0020551 <__static_initialization_and_destruction_0(int, int)>:
c0020551:	83 ec 0c             	sub    esp,0xc
c0020554:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020559:	75 1a                	jne    c0020575 <__static_initialization_and_destruction_0(int, int)+0x24>
c002055b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020563:	75 10                	jne    c0020575 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020565:	83 ec 0c             	sub    esp,0xc
c0020568:	68 40 1c 03 c0       	push   0xc0031c40
c002056d:	e8 0e 88 00 00       	call   c0028d80 <Vm::_FPUState::_FPUState()>
c0020572:	83 c4 10             	add    esp,0x10
c0020575:	90                   	nop
c0020576:	83 c4 0c             	add    esp,0xc
c0020579:	c3                   	ret    

c002057a <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002057a:	83 ec 0c             	sub    esp,0xc
c002057d:	83 ec 08             	sub    esp,0x8
c0020580:	68 ff ff 00 00       	push   0xffff
c0020585:	6a 01                	push   0x1
c0020587:	e8 c5 ff ff ff       	call   c0020551 <__static_initialization_and_destruction_0(int, int)>
c002058c:	83 c4 10             	add    esp,0x10
c002058f:	83 c4 0c             	add    esp,0xc
c0020592:	c3                   	ret    
c0020593:	90                   	nop

c0020594 <FAT::getName()>:
c0020594:	b8 54 ca 02 c0       	mov    eax,0xc002ca54
c0020599:	c3                   	ret    

c002059a <FAT::tell(void*, unsigned long long*)>:
c002059a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002059f:	75 06                	jne    c00205a7 <FAT::tell(void*, unsigned long long*)+0xd>
c00205a1:	b8 04 00 00 00       	mov    eax,0x4
c00205a6:	c3                   	ret    
c00205a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205ac:	75 06                	jne    c00205b4 <FAT::tell(void*, unsigned long long*)+0x1a>
c00205ae:	b8 04 00 00 00       	mov    eax,0x4
c00205b3:	c3                   	ret    
c00205b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205b8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205bb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205c2:	89 01                	mov    DWORD PTR [ecx],eax
c00205c4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205c7:	b8 00 00 00 00       	mov    eax,0x0
c00205cc:	c3                   	ret    
c00205cd:	90                   	nop

c00205ce <FAT::stat(void*, unsigned long long*)>:
c00205ce:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205d3:	75 06                	jne    c00205db <FAT::stat(void*, unsigned long long*)+0xd>
c00205d5:	b8 04 00 00 00       	mov    eax,0x4
c00205da:	c3                   	ret    
c00205db:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205e0:	75 06                	jne    c00205e8 <FAT::stat(void*, unsigned long long*)+0x1a>
c00205e2:	b8 04 00 00 00       	mov    eax,0x4
c00205e7:	c3                   	ret    
c00205e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205ec:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205f6:	89 01                	mov    DWORD PTR [ecx],eax
c00205f8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205fb:	b8 00 00 00 00       	mov    eax,0x0
c0020600:	c3                   	ret    
c0020601:	90                   	nop

c0020602 <FAT::~FAT()>:
c0020602:	83 ec 0c             	sub    esp,0xc
c0020605:	ba d8 ca 02 c0       	mov    edx,0xc002cad8
c002060a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002060e:	89 10                	mov    DWORD PTR [eax],edx
c0020610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020614:	83 ec 0c             	sub    esp,0xc
c0020617:	50                   	push   eax
c0020618:	e8 89 2c ff ff       	call   c00132a6 <Filesystem::~Filesystem()>
c002061d:	83 c4 10             	add    esp,0x10
c0020620:	90                   	nop
c0020621:	83 c4 0c             	add    esp,0xc
c0020624:	c3                   	ret    
c0020625:	90                   	nop

c0020626 <FAT::~FAT()>:
c0020626:	83 ec 0c             	sub    esp,0xc
c0020629:	83 ec 0c             	sub    esp,0xc
c002062c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020630:	e8 cd ff ff ff       	call   c0020602 <FAT::~FAT()>
c0020635:	83 c4 10             	add    esp,0x10
c0020638:	83 ec 08             	sub    esp,0x8
c002063b:	6a 08                	push   0x8
c002063d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020641:	e8 57 28 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0020646:	83 c4 10             	add    esp,0x10
c0020649:	83 c4 0c             	add    esp,0xc
c002064c:	c3                   	ret    
c002064d:	90                   	nop

c002064e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002064e:	83 ec 1c             	sub    esp,0x1c
c0020651:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020658:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002065d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020661:	8b 04 85 c0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce340]
c0020668:	83 f8 ff             	cmp    eax,0xffffffff
c002066b:	75 34                	jne    c00206a1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002066d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020671:	88 c2                	mov    dl,al
c0020673:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c0020678:	01 d0                	add    eax,edx
c002067a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002067e:	8b 15 a0 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031ca0
c0020684:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020688:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c002068f:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c0020694:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020698:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c002069f:	eb 17                	jmp    c00206b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206a1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206a5:	88 c2                	mov    dl,al
c00206a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206ab:	8b 04 85 c0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce340]
c00206b2:	01 d0                	add    eax,edx
c00206b4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206b8:	83 ec 04             	sub    esp,0x4
c00206bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206c3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00206c7:	50                   	push   eax
c00206c8:	e8 6b 66 fe ff       	call   c0006d38 <f_getlabel>
c00206cd:	83 c4 10             	add    esp,0x10
c00206d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206d9:	75 07                	jne    c00206e2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206db:	b8 00 00 00 00       	mov    eax,0x0
c00206e0:	eb 05                	jmp    c00206e7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206e2:	b8 01 00 00 00       	mov    eax,0x1
c00206e7:	83 c4 1c             	add    esp,0x1c
c00206ea:	c3                   	ret    
c00206eb:	90                   	nop

c00206ec <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206ec:	57                   	push   edi
c00206ed:	83 ec 58             	sub    esp,0x58
c00206f0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206f8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206fc:	b9 0f 00 00 00       	mov    ecx,0xf
c0020701:	b8 00 00 00 00       	mov    eax,0x0
c0020706:	fc                   	cld    
c0020707:	89 d7                	mov    edi,edx
c0020709:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002070b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002070f:	8b 04 85 c0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce340]
c0020716:	83 f8 ff             	cmp    eax,0xffffffff
c0020719:	75 34                	jne    c002074f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002071b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002071f:	88 c2                	mov    dl,al
c0020721:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c0020726:	01 d0                	add    eax,edx
c0020728:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002072c:	8b 15 a0 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031ca0
c0020732:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020736:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c002073d:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c0020742:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020746:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c002074d:	eb 17                	jmp    c0020766 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002074f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020753:	88 c2                	mov    dl,al
c0020755:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020759:	8b 04 85 c0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce340]
c0020760:	01 d0                	add    eax,edx
c0020762:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020766:	83 ec 08             	sub    esp,0x8
c0020769:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002076d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020771:	50                   	push   eax
c0020772:	e8 fd 01 fe ff       	call   c0000974 <strcat>
c0020777:	83 c4 10             	add    esp,0x10
c002077a:	83 ec 0c             	sub    esp,0xc
c002077d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020781:	50                   	push   eax
c0020782:	e8 9f 67 fe ff       	call   c0006f26 <f_setlabel>
c0020787:	83 c4 10             	add    esp,0x10
c002078a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002078e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020793:	75 07                	jne    c002079c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020795:	b8 00 00 00 00       	mov    eax,0x0
c002079a:	eb 05                	jmp    c00207a1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002079c:	b8 01 00 00 00       	mov    eax,0x1
c00207a1:	83 c4 58             	add    esp,0x58
c00207a4:	5f                   	pop    edi
c00207a5:	c3                   	ret    

c00207a6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207a6:	83 ec 2c             	sub    esp,0x2c
c00207a9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207b1:	83 ec 08             	sub    esp,0x8
c00207b4:	68 78 ca 02 c0       	push   0xc002ca78
c00207b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207bd:	e8 fe 00 fe ff       	call   c00008c0 <strcmp>
c00207c2:	83 c4 10             	add    esp,0x10
c00207c5:	85 c0                	test   eax,eax
c00207c7:	0f 94 c0             	sete   al
c00207ca:	84 c0                	test   al,al
c00207cc:	74 0d                	je     c00207db <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00207ce:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207d6:	e9 a6 00 00 00       	jmp    c0020881 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207db:	83 ec 08             	sub    esp,0x8
c00207de:	68 6a ca 02 c0       	push   0xc002ca6a
c00207e3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207e7:	e8 d4 00 fe ff       	call   c00008c0 <strcmp>
c00207ec:	83 c4 10             	add    esp,0x10
c00207ef:	85 c0                	test   eax,eax
c00207f1:	0f 94 c0             	sete   al
c00207f4:	84 c0                	test   al,al
c00207f6:	74 0a                	je     c0020802 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207f8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020800:	eb 7f                	jmp    c0020881 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020802:	83 ec 08             	sub    esp,0x8
c0020805:	68 70 ca 02 c0       	push   0xc002ca70
c002080a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002080e:	e8 ad 00 fe ff       	call   c00008c0 <strcmp>
c0020813:	83 c4 10             	add    esp,0x10
c0020816:	85 c0                	test   eax,eax
c0020818:	0f 94 c0             	sete   al
c002081b:	84 c0                	test   al,al
c002081d:	74 0a                	je     c0020829 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002081f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020827:	eb 58                	jmp    c0020881 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020829:	83 ec 08             	sub    esp,0x8
c002082c:	68 ec 94 02 c0       	push   0xc00294ec
c0020831:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020835:	e8 86 00 fe ff       	call   c00008c0 <strcmp>
c002083a:	83 c4 10             	add    esp,0x10
c002083d:	85 c0                	test   eax,eax
c002083f:	0f 94 c0             	sete   al
c0020842:	84 c0                	test   al,al
c0020844:	74 0a                	je     c0020850 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020846:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002084e:	eb 31                	jmp    c0020881 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020850:	83 ec 08             	sub    esp,0x8
c0020853:	68 76 ca 02 c0       	push   0xc002ca76
c0020858:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002085c:	e8 5f 00 fe ff       	call   c00008c0 <strcmp>
c0020861:	83 c4 10             	add    esp,0x10
c0020864:	85 c0                	test   eax,eax
c0020866:	0f 94 c0             	sete   al
c0020869:	84 c0                	test   al,al
c002086b:	74 0a                	je     c0020877 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002086d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020875:	eb 0a                	jmp    c0020881 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020877:	b8 08 00 00 00       	mov    eax,0x8
c002087c:	e9 04 01 00 00       	jmp    c0020985 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020881:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020888:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002088d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020891:	8b 04 85 c0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce340]
c0020898:	83 f8 ff             	cmp    eax,0xffffffff
c002089b:	75 34                	jne    c00208d1 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002089d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208a1:	88 c2                	mov    dl,al
c00208a3:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c00208a8:	01 d0                	add    eax,edx
c00208aa:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208ae:	8b 15 a0 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031ca0
c00208b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208b8:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c00208bf:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c00208c4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00208c8:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c00208cf:	eb 17                	jmp    c00208e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00208d1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208d5:	88 c2                	mov    dl,al
c00208d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208db:	8b 04 85 c0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce340]
c00208e2:	01 d0                	add    eax,edx
c00208e4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208ec:	88 04 24             	mov    BYTE PTR [esp],al
c00208ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208ff:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020904:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002090c:	83 ec 0c             	sub    esp,0xc
c002090f:	68 00 20 00 00       	push   0x2000
c0020914:	e8 27 ef fe ff       	call   c000f840 <malloc>
c0020919:	83 c4 10             	add    esp,0x10
c002091c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020920:	68 00 20 00 00       	push   0x2000
c0020925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020929:	8d 44 24 08          	lea    eax,[esp+0x8]
c002092d:	50                   	push   eax
c002092e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020932:	50                   	push   eax
c0020933:	e8 39 6a fe ff       	call   c0007371 <f_mkfs>
c0020938:	83 c4 10             	add    esp,0x10
c002093b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002093f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020944:	75 07                	jne    c002094d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020946:	b8 00 00 00 00       	mov    eax,0x0
c002094b:	eb 38                	jmp    c0020985 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002094d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020952:	75 17                	jne    c002096b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020954:	83 ec 0c             	sub    esp,0xc
c0020957:	68 a8 ca 02 c0       	push   0xc002caa8
c002095c:	e8 1c 26 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0020961:	83 c4 10             	add    esp,0x10
c0020964:	b8 09 00 00 00       	mov    eax,0x9
c0020969:	eb 1a                	jmp    c0020985 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002096b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002096f:	83 ec 08             	sub    esp,0x8
c0020972:	50                   	push   eax
c0020973:	68 7c ca 02 c0       	push   0xc002ca7c
c0020978:	e8 00 26 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c002097d:	83 c4 10             	add    esp,0x10
c0020980:	b8 01 00 00 00       	mov    eax,0x1
c0020985:	83 c4 2c             	add    esp,0x2c
c0020988:	c3                   	ret    
c0020989:	90                   	nop

c002098a <FAT::tryMount(LogicalDisk*, int)>:
c002098a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020990:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c0020995:	83 f8 14             	cmp    eax,0x14
c0020998:	75 17                	jne    c00209b1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002099a:	83 ec 0c             	sub    esp,0xc
c002099d:	68 8e ca 02 c0       	push   0xc002ca8e
c00209a2:	e8 88 9c ff ff       	call   c001a62f <Krnl::panic(char const*)>
c00209a7:	83 c4 10             	add    esp,0x10
c00209aa:	b0 00                	mov    al,0x0
c00209ac:	e9 d7 01 00 00       	jmp    c0020b88 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209b1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209b8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209c4:	3d 00 02 00 00       	cmp    eax,0x200
c00209c9:	74 07                	je     c00209d2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00209cb:	b0 00                	mov    al,0x0
c00209cd:	e9 b6 01 00 00       	jmp    c0020b88 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209d2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209da:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209e1:	8b 04 85 c0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce340]
c00209e8:	83 f8 ff             	cmp    eax,0xffffffff
c00209eb:	74 07                	je     c00209f4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209ed:	b0 01                	mov    al,0x1
c00209ef:	e9 94 01 00 00       	jmp    c0020b88 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209f4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209fe:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a06:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a0d:	88 c2                	mov    dl,al
c0020a0f:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c0020a14:	01 d0                	add    eax,edx
c0020a16:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a1d:	8b 15 a0 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031ca0
c0020a23:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a2a:	89 14 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],edx
c0020a31:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c0020a36:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a3d:	89 14 85 40 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2c0],edx
c0020a44:	83 ec 0c             	sub    esp,0xc
c0020a47:	68 54 02 00 00       	push   0x254
c0020a4c:	e8 ef ed fe ff       	call   c000f840 <malloc>
c0020a51:	83 c4 10             	add    esp,0x10
c0020a54:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a5b:	83 ec 04             	sub    esp,0x4
c0020a5e:	6a 00                	push   0x0
c0020a60:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a67:	50                   	push   eax
c0020a68:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a6f:	e8 bb 44 fe ff       	call   c0004f2f <f_mount>
c0020a74:	83 c4 10             	add    esp,0x10
c0020a77:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a7e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a86:	74 19                	je     c0020aa1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a88:	83 ec 0c             	sub    esp,0xc
c0020a8b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a92:	e8 c9 ed fe ff       	call   c000f860 <rfree>
c0020a97:	83 c4 10             	add    esp,0x10
c0020a9a:	b0 00                	mov    al,0x0
c0020a9c:	e9 e7 00 00 00       	jmp    c0020b88 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020aa1:	83 ec 04             	sub    esp,0x4
c0020aa4:	68 00 01 00 00       	push   0x100
c0020aa9:	6a 00                	push   0x0
c0020aab:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ab2:	50                   	push   eax
c0020ab3:	e8 c0 fc fd ff       	call   c0000778 <memset>
c0020ab8:	83 c4 10             	add    esp,0x10
c0020abb:	83 ec 08             	sub    esp,0x8
c0020abe:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ac5:	50                   	push   eax
c0020ac6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020acd:	50                   	push   eax
c0020ace:	e8 a1 fe fd ff       	call   c0000974 <strcat>
c0020ad3:	83 c4 10             	add    esp,0x10
c0020ad6:	83 ec 08             	sub    esp,0x8
c0020ad9:	68 9c ca 02 c0       	push   0xc002ca9c
c0020ade:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ae5:	50                   	push   eax
c0020ae6:	e8 89 fe fd ff       	call   c0000974 <strcat>
c0020aeb:	83 c4 10             	add    esp,0x10
c0020aee:	83 ec 04             	sub    esp,0x4
c0020af1:	6a 01                	push   0x1
c0020af3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020afa:	50                   	push   eax
c0020afb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020aff:	50                   	push   eax
c0020b00:	e8 8c 44 fe ff       	call   c0004f91 <f_open>
c0020b05:	83 c4 10             	add    esp,0x10
c0020b08:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b0f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b16:	85 c0                	test   eax,eax
c0020b18:	74 0a                	je     c0020b24 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b1a:	78 2d                	js     c0020b49 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b1c:	83 e8 04             	sub    eax,0x4
c0020b1f:	83 f8 01             	cmp    eax,0x1
c0020b22:	77 25                	ja     c0020b49 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b24:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b2c:	83 ec 0c             	sub    esp,0xc
c0020b2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b33:	50                   	push   eax
c0020b34:	e8 aa 4f fe ff       	call   c0005ae3 <f_close>
c0020b39:	83 c4 10             	add    esp,0x10
c0020b3c:	90                   	nop
c0020b3d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b45:	74 3a                	je     c0020b81 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b47:	eb 2d                	jmp    c0020b76 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b49:	83 ec 0c             	sub    esp,0xc
c0020b4c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b53:	e8 08 ed fe ff       	call   c000f860 <rfree>
c0020b58:	83 c4 10             	add    esp,0x10
c0020b5b:	83 ec 04             	sub    esp,0x4
c0020b5e:	6a 00                	push   0x0
c0020b60:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b67:	50                   	push   eax
c0020b68:	6a 00                	push   0x0
c0020b6a:	e8 c0 43 fe ff       	call   c0004f2f <f_mount>
c0020b6f:	83 c4 10             	add    esp,0x10
c0020b72:	b0 00                	mov    al,0x0
c0020b74:	eb 12                	jmp    c0020b88 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b76:	a1 a0 1c 03 c0       	mov    eax,ds:0xc0031ca0
c0020b7b:	40                   	inc    eax
c0020b7c:	a3 a0 1c 03 c0       	mov    ds:0xc0031ca0,eax
c0020b81:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b88:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b8e:	c3                   	ret    
c0020b8f:	90                   	nop

c0020b90 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b90:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b96:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b9e:	74 0a                	je     c0020baa <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020ba0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020ba8:	75 0a                	jne    c0020bb4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020baa:	b8 04 00 00 00       	mov    eax,0x4
c0020baf:	e9 db 00 00 00       	jmp    c0020c8f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bb4:	83 ec 08             	sub    esp,0x8
c0020bb7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bbe:	50                   	push   eax
c0020bbf:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020bc6:	e8 22 55 fe ff       	call   c00060ed <f_readdir>
c0020bcb:	83 c4 10             	add    esp,0x10
c0020bce:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020bd5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020bdb:	83 ec 0c             	sub    esp,0xc
c0020bde:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020be5:	83 c0 1a             	add    eax,0x1a
c0020be8:	50                   	push   eax
c0020be9:	e8 a6 fb fd ff       	call   c0000794 <strlen>
c0020bee:	83 c4 10             	add    esp,0x10
c0020bf1:	ba 00 00 00 00       	mov    edx,0x0
c0020bf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bfa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020bfe:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c05:	0f b6 c0             	movzx  eax,al
c0020c08:	83 e0 10             	and    eax,0x10
c0020c0b:	74 07                	je     c0020c14 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c0d:	b8 02 00 00 00       	mov    eax,0x2
c0020c12:	eb 05                	jmp    c0020c19 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c14:	b8 01 00 00 00       	mov    eax,0x1
c0020c19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c1d:	83 ec 08             	sub    esp,0x8
c0020c20:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c27:	83 c0 1a             	add    eax,0x1a
c0020c2a:	50                   	push   eax
c0020c2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c2f:	83 c0 10             	add    eax,0x10
c0020c32:	50                   	push   eax
c0020c33:	e8 fc fb fd ff       	call   c0000834 <strcpy>
c0020c38:	83 c4 10             	add    esp,0x10
c0020c3b:	83 ec 04             	sub    esp,0x4
c0020c3e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c45:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c49:	50                   	push   eax
c0020c4a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c51:	e8 ee fa fd ff       	call   c0000744 <memcpy>
c0020c56:	83 c4 10             	add    esp,0x10
c0020c59:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c60:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c66:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c6d:	84 c0                	test   al,al
c0020c6f:	75 07                	jne    c0020c78 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c71:	b8 07 00 00 00       	mov    eax,0x7
c0020c76:	eb 17                	jmp    c0020c8f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c78:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c7f:	85 c0                	test   eax,eax
c0020c81:	75 07                	jne    c0020c8a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c83:	b8 00 00 00 00       	mov    eax,0x0
c0020c88:	eb 05                	jmp    c0020c8f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c8a:	b8 01 00 00 00       	mov    eax,0x1
c0020c8f:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c95:	c3                   	ret    

c0020c96 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c96:	83 ec 1c             	sub    esp,0x1c
c0020c99:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c9e:	74 07                	je     c0020ca7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ca0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ca5:	75 07                	jne    c0020cae <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020ca7:	b8 04 00 00 00       	mov    eax,0x4
c0020cac:	eb 3d                	jmp    c0020ceb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cb2:	50                   	push   eax
c0020cb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cbf:	e8 09 47 fe ff       	call   c00053cd <f_read>
c0020cc4:	83 c4 10             	add    esp,0x10
c0020cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ccb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ccf:	89 c2                	mov    edx,eax
c0020cd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cd5:	89 10                	mov    DWORD PTR [eax],edx
c0020cd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cdb:	85 c0                	test   eax,eax
c0020cdd:	75 07                	jne    c0020ce6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020cdf:	b8 00 00 00 00       	mov    eax,0x0
c0020ce4:	eb 05                	jmp    c0020ceb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ce6:	b8 01 00 00 00       	mov    eax,0x1
c0020ceb:	83 c4 1c             	add    esp,0x1c
c0020cee:	c3                   	ret    
c0020cef:	90                   	nop

c0020cf0 <FAT::write(void*, unsigned long, void*, int*)>:
c0020cf0:	83 ec 1c             	sub    esp,0x1c
c0020cf3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cf8:	74 07                	je     c0020d01 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020cfa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020cff:	75 07                	jne    c0020d08 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d01:	b8 04 00 00 00       	mov    eax,0x4
c0020d06:	eb 3d                	jmp    c0020d45 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d0c:	50                   	push   eax
c0020d0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d19:	e8 2f 49 fe ff       	call   c000564d <f_write>
c0020d1e:	83 c4 10             	add    esp,0x10
c0020d21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d29:	89 c2                	mov    edx,eax
c0020d2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d2f:	89 10                	mov    DWORD PTR [eax],edx
c0020d31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d35:	85 c0                	test   eax,eax
c0020d37:	75 07                	jne    c0020d40 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d39:	b8 00 00 00 00       	mov    eax,0x0
c0020d3e:	eb 05                	jmp    c0020d45 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d40:	b8 01 00 00 00       	mov    eax,0x1
c0020d45:	83 c4 1c             	add    esp,0x1c
c0020d48:	c3                   	ret    
c0020d49:	90                   	nop

c0020d4a <FAT::close(void*)>:
c0020d4a:	83 ec 1c             	sub    esp,0x1c
c0020d4d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d52:	75 07                	jne    c0020d5b <FAT::close(void*)+0x11>
c0020d54:	b8 04 00 00 00       	mov    eax,0x4
c0020d59:	eb 36                	jmp    c0020d91 <FAT::close(void*)+0x47>
c0020d5b:	83 ec 0c             	sub    esp,0xc
c0020d5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d62:	e8 7c 4d fe ff       	call   c0005ae3 <f_close>
c0020d67:	83 c4 10             	add    esp,0x10
c0020d6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d6e:	83 ec 0c             	sub    esp,0xc
c0020d71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d75:	e8 d6 ea fe ff       	call   c000f850 <free>
c0020d7a:	83 c4 10             	add    esp,0x10
c0020d7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d81:	85 c0                	test   eax,eax
c0020d83:	75 07                	jne    c0020d8c <FAT::close(void*)+0x42>
c0020d85:	b8 00 00 00 00       	mov    eax,0x0
c0020d8a:	eb 05                	jmp    c0020d91 <FAT::close(void*)+0x47>
c0020d8c:	b8 01 00 00 00       	mov    eax,0x1
c0020d91:	83 c4 1c             	add    esp,0x1c
c0020d94:	c3                   	ret    
c0020d95:	90                   	nop

c0020d96 <FAT::closeDir(void*)>:
c0020d96:	83 ec 1c             	sub    esp,0x1c
c0020d99:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d9e:	75 07                	jne    c0020da7 <FAT::closeDir(void*)+0x11>
c0020da0:	b8 04 00 00 00       	mov    eax,0x4
c0020da5:	eb 36                	jmp    c0020ddd <FAT::closeDir(void*)+0x47>
c0020da7:	83 ec 0c             	sub    esp,0xc
c0020daa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dae:	e8 18 53 fe ff       	call   c00060cb <f_closedir>
c0020db3:	83 c4 10             	add    esp,0x10
c0020db6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dba:	83 ec 0c             	sub    esp,0xc
c0020dbd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dc1:	e8 8a ea fe ff       	call   c000f850 <free>
c0020dc6:	83 c4 10             	add    esp,0x10
c0020dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dcd:	85 c0                	test   eax,eax
c0020dcf:	75 07                	jne    c0020dd8 <FAT::closeDir(void*)+0x42>
c0020dd1:	b8 00 00 00 00       	mov    eax,0x0
c0020dd6:	eb 05                	jmp    c0020ddd <FAT::closeDir(void*)+0x47>
c0020dd8:	b8 01 00 00 00       	mov    eax,0x1
c0020ddd:	83 c4 1c             	add    esp,0x1c
c0020de0:	c3                   	ret    
c0020de1:	90                   	nop

c0020de2 <FAT::seek(void*, unsigned long long)>:
c0020de2:	83 ec 2c             	sub    esp,0x2c
c0020de5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020de9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020ded:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020df1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020df5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020dfa:	75 07                	jne    c0020e03 <FAT::seek(void*, unsigned long long)+0x21>
c0020dfc:	b8 04 00 00 00       	mov    eax,0x4
c0020e01:	eb 2f                	jmp    c0020e32 <FAT::seek(void*, unsigned long long)+0x50>
c0020e03:	83 ec 04             	sub    esp,0x4
c0020e06:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e0a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e0e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e12:	e8 fb 4c fe ff       	call   c0005b12 <f_lseek>
c0020e17:	83 c4 10             	add    esp,0x10
c0020e1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e22:	85 c0                	test   eax,eax
c0020e24:	75 07                	jne    c0020e2d <FAT::seek(void*, unsigned long long)+0x4b>
c0020e26:	b8 00 00 00 00       	mov    eax,0x0
c0020e2b:	eb 05                	jmp    c0020e32 <FAT::seek(void*, unsigned long long)+0x50>
c0020e2d:	b8 01 00 00 00       	mov    eax,0x1
c0020e32:	83 c4 2c             	add    esp,0x2c
c0020e35:	c3                   	ret    

c0020e36 <fatWrapperReadDisk>:
c0020e36:	83 ec 1c             	sub    esp,0x1c
c0020e39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e3d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e45:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e55:	8b 04 85 80 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1380]
c0020e5c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e60:	83 ec 0c             	sub    esp,0xc
c0020e63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e67:	52                   	push   edx
c0020e68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e70:	50                   	push   eax
c0020e71:	e8 28 59 ff ff       	call   c001679e <LogicalDisk::read(unsigned long long, int, void*)>
c0020e76:	83 c4 20             	add    esp,0x20
c0020e79:	83 c4 1c             	add    esp,0x1c
c0020e7c:	c3                   	ret    

c0020e7d <fatWrapperWriteDisk>:
c0020e7d:	83 ec 1c             	sub    esp,0x1c
c0020e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e84:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e97:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e9c:	8b 04 85 80 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1380]
c0020ea3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ea7:	83 ec 0c             	sub    esp,0xc
c0020eaa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eae:	52                   	push   edx
c0020eaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eb7:	50                   	push   eax
c0020eb8:	e8 4d 59 ff ff       	call   c001680a <LogicalDisk::write(unsigned long long, int, void*)>
c0020ebd:	83 c4 20             	add    esp,0x20
c0020ec0:	83 c4 1c             	add    esp,0x1c
c0020ec3:	c3                   	ret    

c0020ec4 <fatWrapperIoctl>:
c0020ec4:	53                   	push   ebx
c0020ec5:	83 ec 28             	sub    esp,0x28
c0020ec8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ecc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020ed0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ed4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ed8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020edd:	75 31                	jne    c0020f10 <fatWrapperIoctl+0x4c>
c0020edf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ee3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ee7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eec:	8b 04 85 80 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1380]
c0020ef3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ef9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020eff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f03:	66 89 02             	mov    WORD PTR [edx],ax
c0020f06:	b8 00 00 00 00       	mov    eax,0x0
c0020f0b:	e9 b2 00 00 00       	jmp    c0020fc2 <fatWrapperIoctl+0xfe>
c0020f10:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f15:	75 6a                	jne    c0020f81 <fatWrapperIoctl+0xbd>
c0020f17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f1f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f24:	8b 04 85 80 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1380]
c0020f2b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f31:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f37:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f3d:	89 c8                	mov    eax,ecx
c0020f3f:	89 da                	mov    edx,ebx
c0020f41:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f45:	c1 e0 0a             	shl    eax,0xa
c0020f48:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f4d:	8b 0c 8d 80 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1380]
c0020f54:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f5a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f60:	89 cb                	mov    ebx,ecx
c0020f62:	c1 fb 1f             	sar    ebx,0x1f
c0020f65:	53                   	push   ebx
c0020f66:	51                   	push   ecx
c0020f67:	52                   	push   edx
c0020f68:	50                   	push   eax
c0020f69:	e8 be 5a 00 00       	call   c0026a2c <__udivdi3>
c0020f6e:	83 c4 10             	add    esp,0x10
c0020f71:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f75:	89 01                	mov    DWORD PTR [ecx],eax
c0020f77:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f7a:	b8 00 00 00 00       	mov    eax,0x0
c0020f7f:	eb 41                	jmp    c0020fc2 <fatWrapperIoctl+0xfe>
c0020f81:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f86:	75 07                	jne    c0020f8f <fatWrapperIoctl+0xcb>
c0020f88:	b8 00 00 00 00       	mov    eax,0x0
c0020f8d:	eb 33                	jmp    c0020fc2 <fatWrapperIoctl+0xfe>
c0020f8f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f94:	75 19                	jne    c0020faf <fatWrapperIoctl+0xeb>
c0020f96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fa2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020fa8:	b8 00 00 00 00       	mov    eax,0x0
c0020fad:	eb 13                	jmp    c0020fc2 <fatWrapperIoctl+0xfe>
c0020faf:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020fb4:	75 07                	jne    c0020fbd <fatWrapperIoctl+0xf9>
c0020fb6:	b8 00 00 00 00       	mov    eax,0x0
c0020fbb:	eb 05                	jmp    c0020fc2 <fatWrapperIoctl+0xfe>
c0020fbd:	b8 04 00 00 00       	mov    eax,0x4
c0020fc2:	83 c4 28             	add    esp,0x28
c0020fc5:	5b                   	pop    ebx
c0020fc6:	c3                   	ret    
c0020fc7:	90                   	nop

c0020fc8 <FAT::FAT()>:
c0020fc8:	83 ec 1c             	sub    esp,0x1c
c0020fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fcf:	83 ec 0c             	sub    esp,0xc
c0020fd2:	50                   	push   eax
c0020fd3:	e8 aa 22 ff ff       	call   c0013282 <Filesystem::Filesystem()>
c0020fd8:	83 c4 10             	add    esp,0x10
c0020fdb:	ba d8 ca 02 c0       	mov    edx,0xc002cad8
c0020fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fe4:	89 10                	mov    DWORD PTR [eax],edx
c0020fe6:	c7 05 a0 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ca0,0x0
c0020ff0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020ff8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020ffd:	7f 15                	jg     c0021014 <FAT::FAT()+0x4c>
c0020fff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021003:	c7 04 85 c0 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce340],0xffffffff
c002100e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021012:	eb e4                	jmp    c0020ff8 <FAT::FAT()+0x30>
c0021014:	90                   	nop
c0021015:	83 c4 1c             	add    esp,0x1c
c0021018:	c3                   	ret    
c0021019:	90                   	nop

c002101a <FAT::fixFilepath(char*)>:
c002101a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002101e:	8a 00                	mov    al,BYTE PTR [eax]
c0021020:	3c 40                	cmp    al,0x40
c0021022:	7e 2c                	jle    c0021050 <FAT::fixFilepath(char*)+0x36>
c0021024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021028:	8a 00                	mov    al,BYTE PTR [eax]
c002102a:	83 e8 41             	sub    eax,0x41
c002102d:	88 c2                	mov    dl,al
c002102f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021033:	88 10                	mov    BYTE PTR [eax],dl
c0021035:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021039:	8a 00                	mov    al,BYTE PTR [eax]
c002103b:	0f be c0             	movsx  eax,al
c002103e:	8b 04 85 c0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce340]
c0021045:	83 c0 30             	add    eax,0x30
c0021048:	88 c2                	mov    dl,al
c002104a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002104e:	88 10                	mov    BYTE PTR [eax],dl
c0021050:	90                   	nop
c0021051:	c3                   	ret    

c0021052 <FAT::open(char const*, void**, FileOpenMode)>:
c0021052:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021058:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021060:	74 0a                	je     c002106c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021062:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002106a:	75 0a                	jne    c0021076 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002106c:	b8 04 00 00 00       	mov    eax,0x4
c0021071:	e9 fd 00 00 00       	jmp    c0021173 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021076:	83 ec 08             	sub    esp,0x8
c0021079:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021080:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021084:	50                   	push   eax
c0021085:	e8 aa f7 fd ff       	call   c0000834 <strcpy>
c002108a:	83 c4 10             	add    esp,0x10
c002108d:	83 ec 08             	sub    esp,0x8
c0021090:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021094:	50                   	push   eax
c0021095:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002109c:	e8 79 ff ff ff       	call   c002101a <FAT::fixFilepath(char*)>
c00210a1:	83 c4 10             	add    esp,0x10
c00210a4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00210ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210b3:	83 e0 01             	and    eax,0x1
c00210b6:	74 08                	je     c00210c0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210b8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00210c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210c7:	83 e0 04             	and    eax,0x4
c00210ca:	74 10                	je     c00210dc <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00210cc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00210d4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210e3:	83 e0 02             	and    eax,0x2
c00210e6:	74 08                	je     c00210f0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210e8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210f7:	83 e0 08             	and    eax,0x8
c00210fa:	74 08                	je     c0021104 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210fc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021104:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002110b:	83 e0 10             	and    eax,0x10
c002110e:	74 08                	je     c0021118 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021110:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021118:	83 ec 0c             	sub    esp,0xc
c002111b:	68 50 02 00 00       	push   0x250
c0021120:	e8 1b e7 fe ff       	call   c000f840 <malloc>
c0021125:	83 c4 10             	add    esp,0x10
c0021128:	89 c2                	mov    edx,eax
c002112a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021131:	89 10                	mov    DWORD PTR [eax],edx
c0021133:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002113b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021142:	8b 00                	mov    eax,DWORD PTR [eax]
c0021144:	83 ec 04             	sub    esp,0x4
c0021147:	52                   	push   edx
c0021148:	8d 54 24 10          	lea    edx,[esp+0x10]
c002114c:	52                   	push   edx
c002114d:	50                   	push   eax
c002114e:	e8 3e 3e fe ff       	call   c0004f91 <f_open>
c0021153:	83 c4 10             	add    esp,0x10
c0021156:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002115d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021165:	74 07                	je     c002116e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021167:	b8 01 00 00 00       	mov    eax,0x1
c002116c:	eb 05                	jmp    c0021173 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002116e:	b8 00 00 00 00       	mov    eax,0x0
c0021173:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021179:	c3                   	ret    

c002117a <FAT::openDir(char const*, void**)>:
c002117a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021180:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021188:	74 0a                	je     c0021194 <FAT::openDir(char const*, void**)+0x1a>
c002118a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021192:	75 07                	jne    c002119b <FAT::openDir(char const*, void**)+0x21>
c0021194:	b8 04 00 00 00       	mov    eax,0x4
c0021199:	eb 7d                	jmp    c0021218 <FAT::openDir(char const*, void**)+0x9e>
c002119b:	83 ec 08             	sub    esp,0x8
c002119e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211a9:	50                   	push   eax
c00211aa:	e8 85 f6 fd ff       	call   c0000834 <strcpy>
c00211af:	83 c4 10             	add    esp,0x10
c00211b2:	83 ec 08             	sub    esp,0x8
c00211b5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211b9:	50                   	push   eax
c00211ba:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211c1:	e8 54 fe ff ff       	call   c002101a <FAT::fixFilepath(char*)>
c00211c6:	83 c4 10             	add    esp,0x10
c00211c9:	83 ec 0c             	sub    esp,0xc
c00211cc:	6a 4c                	push   0x4c
c00211ce:	e8 6d e6 fe ff       	call   c000f840 <malloc>
c00211d3:	83 c4 10             	add    esp,0x10
c00211d6:	89 c2                	mov    edx,eax
c00211d8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211df:	89 10                	mov    DWORD PTR [eax],edx
c00211e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ea:	83 ec 08             	sub    esp,0x8
c00211ed:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211f1:	52                   	push   edx
c00211f2:	50                   	push   eax
c00211f3:	e8 d1 4d fe ff       	call   c0005fc9 <f_opendir>
c00211f8:	83 c4 10             	add    esp,0x10
c00211fb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021202:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002120a:	74 07                	je     c0021213 <FAT::openDir(char const*, void**)+0x99>
c002120c:	b8 01 00 00 00       	mov    eax,0x1
c0021211:	eb 05                	jmp    c0021218 <FAT::openDir(char const*, void**)+0x9e>
c0021213:	b8 00 00 00 00       	mov    eax,0x0
c0021218:	81 c4 1c 01 00 00    	add    esp,0x11c
c002121e:	c3                   	ret    
c002121f:	90                   	nop

c0021220 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021220:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021226:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002122e:	75 0a                	jne    c002123a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021230:	b8 04 00 00 00       	mov    eax,0x4
c0021235:	e9 c9 00 00 00       	jmp    c0021303 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002123a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021242:	75 0a                	jne    c002124e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021244:	b8 04 00 00 00       	mov    eax,0x4
c0021249:	e9 b5 00 00 00       	jmp    c0021303 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002124e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021256:	75 0a                	jne    c0021262 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021258:	b8 04 00 00 00       	mov    eax,0x4
c002125d:	e9 a1 00 00 00       	jmp    c0021303 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021262:	83 ec 08             	sub    esp,0x8
c0021265:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002126c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021273:	50                   	push   eax
c0021274:	e8 bb f5 fd ff       	call   c0000834 <strcpy>
c0021279:	83 c4 10             	add    esp,0x10
c002127c:	83 ec 08             	sub    esp,0x8
c002127f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021286:	50                   	push   eax
c0021287:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002128e:	e8 87 fd ff ff       	call   c002101a <FAT::fixFilepath(char*)>
c0021293:	83 c4 10             	add    esp,0x10
c0021296:	83 ec 08             	sub    esp,0x8
c0021299:	8d 44 24 08          	lea    eax,[esp+0x8]
c002129d:	50                   	push   eax
c002129e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212a5:	50                   	push   eax
c00212a6:	e8 dd 4e fe ff       	call   c0006188 <f_stat>
c00212ab:	83 c4 10             	add    esp,0x10
c00212ae:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212b5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212bc:	85 c0                	test   eax,eax
c00212be:	74 07                	je     c00212c7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00212c0:	83 f8 04             	cmp    eax,0x4
c00212c3:	74 32                	je     c00212f7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00212c5:	eb 37                	jmp    c00212fe <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00212c7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00212cb:	0f b6 c0             	movzx  eax,al
c00212ce:	83 e0 10             	and    eax,0x10
c00212d1:	0f 95 c2             	setne  dl
c00212d4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212db:	88 10                	mov    BYTE PTR [eax],dl
c00212dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212e4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212eb:	89 01                	mov    DWORD PTR [ecx],eax
c00212ed:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212f0:	b8 00 00 00 00       	mov    eax,0x0
c00212f5:	eb 0c                	jmp    c0021303 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212f7:	b8 02 00 00 00       	mov    eax,0x2
c00212fc:	eb 05                	jmp    c0021303 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212fe:	b8 01 00 00 00       	mov    eax,0x1
c0021303:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021309:	c3                   	ret    

c002130a <FAT::unlink(char const*)>:
c002130a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021310:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021318:	75 07                	jne    c0021321 <FAT::unlink(char const*)+0x17>
c002131a:	b8 04 00 00 00       	mov    eax,0x4
c002131f:	eb 5c                	jmp    c002137d <FAT::unlink(char const*)+0x73>
c0021321:	83 ec 08             	sub    esp,0x8
c0021324:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002132b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002132f:	50                   	push   eax
c0021330:	e8 ff f4 fd ff       	call   c0000834 <strcpy>
c0021335:	83 c4 10             	add    esp,0x10
c0021338:	83 ec 08             	sub    esp,0x8
c002133b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002133f:	50                   	push   eax
c0021340:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021347:	e8 ce fc ff ff       	call   c002101a <FAT::fixFilepath(char*)>
c002134c:	83 c4 10             	add    esp,0x10
c002134f:	83 ec 0c             	sub    esp,0xc
c0021352:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021356:	50                   	push   eax
c0021357:	e8 7e 51 fe ff       	call   c00064da <f_unlink>
c002135c:	83 c4 10             	add    esp,0x10
c002135f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021366:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002136d:	85 c0                	test   eax,eax
c002136f:	75 07                	jne    c0021378 <FAT::unlink(char const*)+0x6e>
c0021371:	b8 00 00 00 00       	mov    eax,0x0
c0021376:	eb 05                	jmp    c002137d <FAT::unlink(char const*)+0x73>
c0021378:	b8 01 00 00 00       	mov    eax,0x1
c002137d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021383:	c3                   	ret    

c0021384 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021384:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002138a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021391:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021398:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002139c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00213a0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00213a8:	75 0a                	jne    c00213b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00213aa:	b8 04 00 00 00       	mov    eax,0x4
c00213af:	e9 1c 01 00 00       	jmp    c00214d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213b4:	83 ec 08             	sub    esp,0x8
c00213b7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213be:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213c2:	50                   	push   eax
c00213c3:	e8 6c f4 fd ff       	call   c0000834 <strcpy>
c00213c8:	83 c4 10             	add    esp,0x10
c00213cb:	83 ec 08             	sub    esp,0x8
c00213ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c00213d2:	50                   	push   eax
c00213d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213da:	e8 3b fc ff ff       	call   c002101a <FAT::fixFilepath(char*)>
c00213df:	83 c4 10             	add    esp,0x10
c00213e2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213ea:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213f7:	83 e0 01             	and    eax,0x1
c00213fa:	74 08                	je     c0021404 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213fc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021404:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021409:	83 e0 02             	and    eax,0x2
c002140c:	74 08                	je     c0021416 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002140e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021416:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002141b:	83 e0 04             	and    eax,0x4
c002141e:	74 08                	je     c0021428 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021420:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021428:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002142d:	83 e0 08             	and    eax,0x8
c0021430:	74 08                	je     c002143a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021432:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002143a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002143f:	83 e0 01             	and    eax,0x1
c0021442:	74 08                	je     c002144c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021444:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002144c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021451:	83 e0 02             	and    eax,0x2
c0021454:	74 08                	je     c002145e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021456:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002145e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021463:	83 e0 04             	and    eax,0x4
c0021466:	74 08                	je     c0021470 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021468:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021470:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021475:	83 e0 08             	and    eax,0x8
c0021478:	74 08                	je     c0021482 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002147a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021482:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021489:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021490:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021498:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00214a0:	83 ec 04             	sub    esp,0x4
c00214a3:	52                   	push   edx
c00214a4:	50                   	push   eax
c00214a5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214a9:	50                   	push   eax
c00214aa:	e8 cd 56 fe ff       	call   c0006b7c <f_chmod>
c00214af:	83 c4 10             	add    esp,0x10
c00214b2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214b9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00214c0:	85 c0                	test   eax,eax
c00214c2:	75 07                	jne    c00214cb <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00214c4:	b8 00 00 00 00       	mov    eax,0x0
c00214c9:	eb 05                	jmp    c00214d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00214cb:	b8 01 00 00 00       	mov    eax,0x1
c00214d0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214d6:	c3                   	ret    
c00214d7:	90                   	nop

c00214d8 <FAT::rename(char const*, char const*)>:
c00214d8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214de:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214e6:	74 0a                	je     c00214f2 <FAT::rename(char const*, char const*)+0x1a>
c00214e8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214f0:	75 0a                	jne    c00214fc <FAT::rename(char const*, char const*)+0x24>
c00214f2:	b8 04 00 00 00       	mov    eax,0x4
c00214f7:	e9 98 00 00 00       	jmp    c0021594 <FAT::rename(char const*, char const*)+0xbc>
c00214fc:	83 ec 08             	sub    esp,0x8
c00214ff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021506:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002150d:	50                   	push   eax
c002150e:	e8 21 f3 fd ff       	call   c0000834 <strcpy>
c0021513:	83 c4 10             	add    esp,0x10
c0021516:	83 ec 08             	sub    esp,0x8
c0021519:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021520:	50                   	push   eax
c0021521:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021528:	e8 ed fa ff ff       	call   c002101a <FAT::fixFilepath(char*)>
c002152d:	83 c4 10             	add    esp,0x10
c0021530:	83 ec 08             	sub    esp,0x8
c0021533:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002153a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002153e:	50                   	push   eax
c002153f:	e8 f0 f2 fd ff       	call   c0000834 <strcpy>
c0021544:	83 c4 10             	add    esp,0x10
c0021547:	83 ec 08             	sub    esp,0x8
c002154a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002154e:	50                   	push   eax
c002154f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021556:	e8 bf fa ff ff       	call   c002101a <FAT::fixFilepath(char*)>
c002155b:	83 c4 10             	add    esp,0x10
c002155e:	83 ec 08             	sub    esp,0x8
c0021561:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021565:	50                   	push   eax
c0021566:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002156d:	50                   	push   eax
c002156e:	e8 16 53 fe ff       	call   c0006889 <f_rename>
c0021573:	83 c4 10             	add    esp,0x10
c0021576:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002157d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021584:	85 c0                	test   eax,eax
c0021586:	75 07                	jne    c002158f <FAT::rename(char const*, char const*)+0xb7>
c0021588:	b8 00 00 00 00       	mov    eax,0x0
c002158d:	eb 05                	jmp    c0021594 <FAT::rename(char const*, char const*)+0xbc>
c002158f:	b8 01 00 00 00       	mov    eax,0x1
c0021594:	81 c4 1c 02 00 00    	add    esp,0x21c
c002159a:	c3                   	ret    
c002159b:	90                   	nop

c002159c <FAT::mkdir(char const*)>:
c002159c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215aa:	75 07                	jne    c00215b3 <FAT::mkdir(char const*)+0x17>
c00215ac:	b8 04 00 00 00       	mov    eax,0x4
c00215b1:	eb 5c                	jmp    c002160f <FAT::mkdir(char const*)+0x73>
c00215b3:	83 ec 08             	sub    esp,0x8
c00215b6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215c1:	50                   	push   eax
c00215c2:	e8 6d f2 fd ff       	call   c0000834 <strcpy>
c00215c7:	83 c4 10             	add    esp,0x10
c00215ca:	83 ec 08             	sub    esp,0x8
c00215cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215d1:	50                   	push   eax
c00215d2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215d9:	e8 3c fa ff ff       	call   c002101a <FAT::fixFilepath(char*)>
c00215de:	83 c4 10             	add    esp,0x10
c00215e1:	83 ec 0c             	sub    esp,0xc
c00215e4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215e8:	50                   	push   eax
c00215e9:	e8 6f 50 fe ff       	call   c000665d <f_mkdir>
c00215ee:	83 c4 10             	add    esp,0x10
c00215f1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215f8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215ff:	85 c0                	test   eax,eax
c0021601:	75 07                	jne    c002160a <FAT::mkdir(char const*)+0x6e>
c0021603:	b8 00 00 00 00       	mov    eax,0x0
c0021608:	eb 05                	jmp    c002160f <FAT::mkdir(char const*)+0x73>
c002160a:	b8 01 00 00 00       	mov    eax,0x1
c002160f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021615:	c3                   	ret    

c0021616 <FAT::exists(char const*)>:
c0021616:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002161c:	83 ec 08             	sub    esp,0x8
c002161f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021626:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002162a:	50                   	push   eax
c002162b:	e8 04 f2 fd ff       	call   c0000834 <strcpy>
c0021630:	83 c4 10             	add    esp,0x10
c0021633:	83 ec 08             	sub    esp,0x8
c0021636:	8d 44 24 08          	lea    eax,[esp+0x8]
c002163a:	50                   	push   eax
c002163b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021642:	e8 d3 f9 ff ff       	call   c002101a <FAT::fixFilepath(char*)>
c0021647:	83 c4 10             	add    esp,0x10
c002164a:	83 ec 08             	sub    esp,0x8
c002164d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021654:	50                   	push   eax
c0021655:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021659:	50                   	push   eax
c002165a:	e8 29 4b fe ff       	call   c0006188 <f_stat>
c002165f:	83 c4 10             	add    esp,0x10
c0021662:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021669:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021670:	85 c0                	test   eax,eax
c0021672:	75 04                	jne    c0021678 <FAT::exists(char const*)+0x62>
c0021674:	b0 01                	mov    al,0x1
c0021676:	eb 02                	jmp    c002167a <FAT::exists(char const*)+0x64>
c0021678:	b0 00                	mov    al,0x0
c002167a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021680:	c3                   	ret    
c0021681:	90                   	nop

c0021682 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021682:	b8 08 00 00 00       	mov    eax,0x8
c0021687:	c3                   	ret    

c0021688 <ISO9660::seek(void*, unsigned long long)>:
c0021688:	53                   	push   ebx
c0021689:	b8 04 00 00 00       	mov    eax,0x4
c002168e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021692:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021696:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002169a:	85 d2                	test   edx,edx
c002169c:	74 17                	je     c00216b5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002169e:	89 c8                	mov    eax,ecx
c00216a0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00216a3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00216a6:	b8 01 00 00 00       	mov    eax,0x1
c00216ab:	73 08                	jae    c00216b5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216ad:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00216b0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00216b3:	31 c0                	xor    eax,eax
c00216b5:	5b                   	pop    ebx
c00216b6:	c3                   	ret    
c00216b7:	90                   	nop

c00216b8 <ISO9660::tell(void*, unsigned long long*)>:
c00216b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216c0:	85 d2                	test   edx,edx
c00216c2:	74 12                	je     c00216d6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216c4:	85 c0                	test   eax,eax
c00216c6:	74 0e                	je     c00216d6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00216cb:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00216ce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216d1:	89 10                	mov    DWORD PTR [eax],edx
c00216d3:	31 c0                	xor    eax,eax
c00216d5:	c3                   	ret    
c00216d6:	b8 04 00 00 00       	mov    eax,0x4
c00216db:	c3                   	ret    

c00216dc <ISO9660::getName()>:
c00216dc:	b8 34 cb 02 c0       	mov    eax,0xc002cb34
c00216e1:	c3                   	ret    

c00216e2 <ISO9660::stat(void*, unsigned long long*)>:
c00216e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216ea:	85 d2                	test   edx,edx
c00216ec:	74 12                	je     c0021700 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216ee:	85 c0                	test   eax,eax
c00216f0:	74 0e                	je     c0021700 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216f2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216f5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216f8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216fb:	89 10                	mov    DWORD PTR [eax],edx
c00216fd:	31 c0                	xor    eax,eax
c00216ff:	c3                   	ret    
c0021700:	b8 04 00 00 00       	mov    eax,0x4
c0021705:	c3                   	ret    

c0021706 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021706:	b8 01 00 00 00       	mov    eax,0x1
c002170b:	c3                   	ret    

c002170c <ISO9660::unlink(char const*)>:
c002170c:	b8 01 00 00 00       	mov    eax,0x1
c0021711:	c3                   	ret    

c0021712 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021712:	b8 01 00 00 00       	mov    eax,0x1
c0021717:	c3                   	ret    

c0021718 <ISO9660::rename(char const*, char const*)>:
c0021718:	b8 01 00 00 00       	mov    eax,0x1
c002171d:	c3                   	ret    

c002171e <ISO9660::mkdir(char const*)>:
c002171e:	b8 01 00 00 00       	mov    eax,0x1
c0021723:	c3                   	ret    

c0021724 <ISO9660::close(void*)>:
c0021724:	83 ec 0c             	sub    esp,0xc
c0021727:	b8 04 00 00 00       	mov    eax,0x4
c002172c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021730:	85 d2                	test   edx,edx
c0021732:	74 0e                	je     c0021742 <ISO9660::close(void*)+0x1e>
c0021734:	83 ec 0c             	sub    esp,0xc
c0021737:	52                   	push   edx
c0021738:	e8 13 e1 fe ff       	call   c000f850 <free>
c002173d:	83 c4 10             	add    esp,0x10
c0021740:	31 c0                	xor    eax,eax
c0021742:	83 c4 0c             	add    esp,0xc
c0021745:	c3                   	ret    

c0021746 <ISO9660::closeDir(void*)>:
c0021746:	83 ec 0c             	sub    esp,0xc
c0021749:	b8 04 00 00 00       	mov    eax,0x4
c002174e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021752:	85 d2                	test   edx,edx
c0021754:	74 0e                	je     c0021764 <ISO9660::closeDir(void*)+0x1e>
c0021756:	83 ec 0c             	sub    esp,0xc
c0021759:	52                   	push   edx
c002175a:	e8 f1 e0 fe ff       	call   c000f850 <free>
c002175f:	83 c4 10             	add    esp,0x10
c0021762:	31 c0                	xor    eax,eax
c0021764:	83 c4 0c             	add    esp,0xc
c0021767:	c3                   	ret    

c0021768 <ISO9660::~ISO9660()>:
c0021768:	83 ec 0c             	sub    esp,0xc
c002176b:	ba 98 cb 02 c0       	mov    edx,0xc002cb98
c0021770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021774:	89 10                	mov    DWORD PTR [eax],edx
c0021776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002177a:	83 ec 0c             	sub    esp,0xc
c002177d:	50                   	push   eax
c002177e:	e8 23 1b ff ff       	call   c00132a6 <Filesystem::~Filesystem()>
c0021783:	83 c4 10             	add    esp,0x10
c0021786:	90                   	nop
c0021787:	83 c4 0c             	add    esp,0xc
c002178a:	c3                   	ret    
c002178b:	90                   	nop

c002178c <ISO9660::~ISO9660()>:
c002178c:	83 ec 0c             	sub    esp,0xc
c002178f:	83 ec 0c             	sub    esp,0xc
c0021792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021796:	e8 cd ff ff ff       	call   c0021768 <ISO9660::~ISO9660()>
c002179b:	83 c4 10             	add    esp,0x10
c002179e:	83 ec 08             	sub    esp,0x8
c00217a1:	6a 08                	push   0x8
c00217a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217a7:	e8 f1 16 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00217ac:	83 c4 10             	add    esp,0x10
c00217af:	83 c4 0c             	add    esp,0xc
c00217b2:	c3                   	ret    

c00217b3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00217b3:	55                   	push   ebp
c00217b4:	31 c9                	xor    ecx,ecx
c00217b6:	57                   	push   edi
c00217b7:	56                   	push   esi
c00217b8:	53                   	push   ebx
c00217b9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00217bd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00217c1:	89 eb                	mov    ebx,ebp
c00217c3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00217c7:	39 ce                	cmp    esi,ecx
c00217c9:	7e 17                	jle    c00217e2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00217cb:	31 d2                	xor    edx,edx
c00217cd:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00217d1:	7d 13                	jge    c00217e6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00217d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217d7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217da:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00217dd:	75 0d                	jne    c00217ec <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00217df:	42                   	inc    edx
c00217e0:	eb eb                	jmp    c00217cd <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00217e2:	31 c0                	xor    eax,eax
c00217e4:	eb 0a                	jmp    c00217f0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217e6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217ea:	eb 04                	jmp    c00217f0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217ec:	41                   	inc    ecx
c00217ed:	43                   	inc    ebx
c00217ee:	eb d7                	jmp    c00217c7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217f0:	5b                   	pop    ebx
c00217f1:	5e                   	pop    esi
c00217f2:	5f                   	pop    edi
c00217f3:	5d                   	pop    ebp
c00217f4:	c3                   	ret    

c00217f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217f5:	56                   	push   esi
c00217f6:	53                   	push   ebx
c00217f7:	52                   	push   edx
c00217f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021800:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021804:	39 0d a0 1d 03 c0    	cmp    DWORD PTR ds:0xc0031da0,ecx
c002180a:	75 08                	jne    c0021814 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002180c:	38 05 f4 db 02 c0    	cmp    BYTE PTR ds:0xc002dbf4,al
c0021812:	74 2b                	je     c002183f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021814:	83 ec 0c             	sub    esp,0xc
c0021817:	a2 f4 db 02 c0       	mov    ds:0xc002dbf4,al
c002181c:	68 c0 1d 03 c0       	push   0xc0031dc0
c0021821:	0f be c0             	movsx  eax,al
c0021824:	6a 01                	push   0x1
c0021826:	89 0d a0 1d 03 c0    	mov    DWORD PTR ds:0xc0031da0,ecx
c002182c:	31 db                	xor    ebx,ebx
c002182e:	53                   	push   ebx
c002182f:	51                   	push   ecx
c0021830:	ff 34 85 7c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1484]
c0021837:	e8 62 4f ff ff       	call   c001679e <LogicalDisk::read(unsigned long long, int, void*)>
c002183c:	83 c4 20             	add    esp,0x20
c002183f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021847:	c7 44 24 14 c0 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031dc0
c002184f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021853:	58                   	pop    eax
c0021854:	5b                   	pop    ebx
c0021855:	5e                   	pop    esi
c0021856:	e9 e9 ee fd ff       	jmp    c0000744 <memcpy>
c002185b:	90                   	nop

c002185c <ISO9660::tryMount(LogicalDisk*, int)>:
c002185c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021862:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021869:	83 c0 41             	add    eax,0x41
c002186c:	0f be c0             	movsx  eax,al
c002186f:	50                   	push   eax
c0021870:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021874:	50                   	push   eax
c0021875:	6a 10                	push   0x10
c0021877:	e8 79 ff ff ff       	call   c00217f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002187c:	83 c4 10             	add    esp,0x10
c002187f:	31 c0                	xor    eax,eax
c0021881:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021886:	75 1d                	jne    c00218a5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021888:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002188d:	75 16                	jne    c00218a5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002188f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021894:	75 0f                	jne    c00218a5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021896:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002189b:	75 08                	jne    c00218a5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002189d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00218a2:	0f 94 c0             	sete   al
c00218a5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00218ab:	c3                   	ret    

c00218ac <ISO9660::read(void*, unsigned long, void*, int*)>:
c00218ac:	55                   	push   ebp
c00218ad:	57                   	push   edi
c00218ae:	56                   	push   esi
c00218af:	53                   	push   ebx
c00218b0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00218b6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00218bd:	85 ed                	test   ebp,ebp
c00218bf:	0f 84 d6 01 00 00    	je     c0021a9b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218c5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00218cd:	0f 84 c8 01 00 00    	je     c0021a9b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218d3:	b8 01 00 00 00       	mov    eax,0x1
c00218d8:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00218dc:	0f 85 be 01 00 00    	jne    c0021aa0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218e2:	31 d2                	xor    edx,edx
c00218e4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00218eb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218ee:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00218f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218f5:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00218fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218ff:	01 f0                	add    eax,esi
c0021901:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021904:	11 fa                	adc    edx,edi
c0021906:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002190a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002190e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021912:	19 d1                	sbb    ecx,edx
c0021914:	72 0a                	jb     c0021920 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002191a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002191e:	eb 13                	jmp    c0021933 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021928:	29 f0                	sub    eax,esi
c002192a:	19 fa                	sbb    edx,edi
c002192c:	89 04 24             	mov    DWORD PTR [esp],eax
c002192f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021933:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021936:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021939:	0f a4 c2 0b          	shld   edx,eax,0xb
c002193d:	51                   	push   ecx
c002193e:	c1 e0 0b             	shl    eax,0xb
c0021941:	01 c6                	add    esi,eax
c0021943:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021947:	11 d7                	adc    edi,edx
c0021949:	50                   	push   eax
c002194a:	89 fa                	mov    edx,edi
c002194c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021950:	89 f0                	mov    eax,esi
c0021952:	53                   	push   ebx
c0021953:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021957:	50                   	push   eax
c0021958:	e8 98 fe ff ff       	call   c00217f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002195d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021961:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021964:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021968:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002196e:	83 c4 10             	add    esp,0x10
c0021971:	b8 00 08 00 00       	mov    eax,0x800
c0021976:	29 d0                	sub    eax,edx
c0021978:	39 c1                	cmp    ecx,eax
c002197a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002197e:	83 d9 00             	sbb    ecx,0x0
c0021981:	7d 1c                	jge    c002199f <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021983:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021988:	75 12                	jne    c002199c <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002198a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021997:	e9 fb 00 00 00       	jmp    c0021a97 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002199c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002199f:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00219a2:	31 d2                	xor    edx,edx
c00219a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00219a8:	39 c2                	cmp    edx,eax
c00219aa:	7d 14                	jge    c00219c0 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00219ac:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00219b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219b7:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00219ba:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00219bd:	42                   	inc    edx
c00219be:	eb e8                	jmp    c00219a8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00219c0:	89 c3                	mov    ebx,eax
c00219c2:	85 c0                	test   eax,eax
c00219c4:	79 02                	jns    c00219c8 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00219c6:	31 db                	xor    ebx,ebx
c00219c8:	99                   	cdq    
c00219c9:	01 c3                	add    ebx,eax
c00219cb:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00219d2:	01 c6                	add    esi,eax
c00219d4:	11 d7                	adc    edi,edx
c00219d6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00219da:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00219de:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00219e1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00219e5:	29 c6                	sub    esi,eax
c00219e7:	19 d7                	sbb    edi,edx
c00219e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00219ec:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219f0:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219f5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219f8:	b8 00 00 00 00       	mov    eax,0x0
c00219fd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a01:	7d 3e                	jge    c0021a41 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a03:	52                   	push   edx
c0021a04:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a08:	50                   	push   eax
c0021a09:	53                   	push   ebx
c0021a0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a0e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a12:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a16:	50                   	push   eax
c0021a17:	e8 d9 fd ff ff       	call   c00217f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a1c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a24:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a29:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a2f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a37:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a3c:	83 c4 10             	add    esp,0x10
c0021a3f:	eb af                	jmp    c00219f0 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a45:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a48:	74 32                	je     c0021a7c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a4a:	50                   	push   eax
c0021a4b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a4f:	50                   	push   eax
c0021a50:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a54:	50                   	push   eax
c0021a55:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a59:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a5d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a61:	56                   	push   esi
c0021a62:	e8 8e fd ff ff       	call   c00217f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a67:	83 c4 0c             	add    esp,0xc
c0021a6a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a6e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a72:	50                   	push   eax
c0021a73:	53                   	push   ebx
c0021a74:	e8 cb ec fd ff       	call   c0000744 <memcpy>
c0021a79:	83 c4 10             	add    esp,0x10
c0021a7c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a83:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a8b:	89 38                	mov    DWORD PTR [eax],edi
c0021a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a91:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a94:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a97:	31 c0                	xor    eax,eax
c0021a99:	eb 05                	jmp    c0021aa0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a9b:	b8 04 00 00 00       	mov    eax,0x4
c0021aa0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021aa6:	5b                   	pop    ebx
c0021aa7:	5e                   	pop    esi
c0021aa8:	5f                   	pop    edi
c0021aa9:	5d                   	pop    ebp
c0021aaa:	c3                   	ret    
c0021aab:	90                   	nop

c0021aac <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021aac:	55                   	push   ebp
c0021aad:	57                   	push   edi
c0021aae:	56                   	push   esi
c0021aaf:	53                   	push   ebx
c0021ab0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021ab6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021abd:	85 f6                	test   esi,esi
c0021abf:	0f 84 64 02 00 00    	je     c0021d29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021ac5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021acd:	0f 84 56 02 00 00    	je     c0021d29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021ad3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021ad6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021ad9:	75 0a                	jne    c0021ae5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021adb:	b8 07 00 00 00       	mov    eax,0x7
c0021ae0:	e9 49 02 00 00       	jmp    c0021d2e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021ae5:	50                   	push   eax
c0021ae6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021aea:	50                   	push   eax
c0021aeb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021af2:	53                   	push   ebx
c0021af3:	8b 06                	mov    eax,DWORD PTR [esi]
c0021af5:	c1 e0 0b             	shl    eax,0xb
c0021af8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021afb:	c1 e8 0b             	shr    eax,0xb
c0021afe:	50                   	push   eax
c0021aff:	e8 f1 fc ff ff       	call   c00217f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b04:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b07:	83 c4 10             	add    esp,0x10
c0021b0a:	89 c1                	mov    ecx,eax
c0021b0c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b0f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b15:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b18:	84 db                	test   bl,bl
c0021b1a:	0f 85 90 00 00 00    	jne    c0021bb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b20:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b26:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b2c:	29 c7                	sub    edi,eax
c0021b2e:	89 fb                	mov    ebx,edi
c0021b30:	c1 fb 1f             	sar    ebx,0x1f
c0021b33:	01 f8                	add    eax,edi
c0021b35:	11 da                	adc    edx,ebx
c0021b37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b3f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b42:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b45:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b48:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b4e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b52:	89 d8                	mov    eax,ebx
c0021b54:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b57:	ba 00 00 00 00       	mov    edx,0x0
c0021b5c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b60:	b8 00 00 00 00       	mov    eax,0x0
c0021b65:	73 0b                	jae    c0021b72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b6e:	29 f8                	sub    eax,edi
c0021b70:	19 da                	sbb    edx,ebx
c0021b72:	89 d3                	mov    ebx,edx
c0021b74:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b77:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b7a:	09 c3                	or     ebx,eax
c0021b7c:	0f 84 59 ff ff ff    	je     c0021adb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b82:	55                   	push   ebp
c0021b83:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b87:	50                   	push   eax
c0021b88:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b8f:	53                   	push   ebx
c0021b90:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b92:	c1 e0 0b             	shl    eax,0xb
c0021b95:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b99:	c1 e8 0b             	shr    eax,0xb
c0021b9c:	50                   	push   eax
c0021b9d:	e8 53 fc ff ff       	call   c00217f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ba2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ba5:	83 c4 10             	add    esp,0x10
c0021ba8:	25 ff 07 00 00       	and    eax,0x7ff
c0021bad:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021bb0:	57                   	push   edi
c0021bb1:	6a 28                	push   0x28
c0021bb3:	6a 00                	push   0x0
c0021bb5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bb9:	50                   	push   eax
c0021bba:	e8 b9 eb fd ff       	call   c0000778 <memset>
c0021bbf:	31 d2                	xor    edx,edx
c0021bc1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021bc4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021bca:	89 f8                	mov    eax,edi
c0021bcc:	83 c0 21             	add    eax,0x21
c0021bcf:	83 d2 00             	adc    edx,0x0
c0021bd2:	89 c7                	mov    edi,eax
c0021bd4:	89 d5                	mov    ebp,edx
c0021bd6:	83 c4 10             	add    esp,0x10
c0021bd9:	31 c9                	xor    ecx,ecx
c0021bdb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021be2:	83 f9 28             	cmp    ecx,0x28
c0021be5:	88 04 24             	mov    BYTE PTR [esp],al
c0021be8:	0f 94 c2             	sete   dl
c0021beb:	88 d0                	mov    al,dl
c0021bed:	ba ff 07 00 00       	mov    edx,0x7ff
c0021bf2:	39 fa                	cmp    edx,edi
c0021bf4:	ba 00 00 00 00       	mov    edx,0x0
c0021bf9:	19 ea                	sbb    edx,ebp
c0021bfb:	0f 92 c2             	setb   dl
c0021bfe:	09 c2                	or     edx,eax
c0021c00:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c04:	0f 94 c0             	sete   al
c0021c07:	08 d0                	or     al,dl
c0021c09:	75 16                	jne    c0021c21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c0b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c0f:	74 10                	je     c0021c21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c11:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c14:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c18:	41                   	inc    ecx
c0021c19:	83 c7 01             	add    edi,0x1
c0021c1c:	83 d5 00             	adc    ebp,0x0
c0021c1f:	eb ba                	jmp    c0021bdb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c21:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c28:	83 ec 0c             	sub    esp,0xc
c0021c2b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c2f:	57                   	push   edi
c0021c30:	e8 5f eb fd ff       	call   c0000794 <strlen>
c0021c35:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c3d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c41:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c48:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c4b:	5a                   	pop    edx
c0021c4c:	25 ff 07 00 00       	and    eax,0x7ff
c0021c51:	01 c8                	add    eax,ecx
c0021c53:	59                   	pop    ecx
c0021c54:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c5a:	83 e0 02             	and    eax,0x2
c0021c5d:	3c 01                	cmp    al,0x1
c0021c5f:	19 c0                	sbb    eax,eax
c0021c61:	83 c0 02             	add    eax,0x2
c0021c64:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c68:	57                   	push   edi
c0021c69:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c6d:	50                   	push   eax
c0021c6e:	e8 c1 eb fd ff       	call   c0000834 <strcpy>
c0021c73:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c77:	83 c4 10             	add    esp,0x10
c0021c7a:	84 c0                	test   al,al
c0021c7c:	75 21                	jne    c0021c9f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c7e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c86:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c8e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c96:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c9d:	eb 28                	jmp    c0021cc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c9f:	fe c8                	dec    al
c0021ca1:	75 24                	jne    c0021cc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ca3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021cab:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cb3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cbb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021cc2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021cc7:	0f b6 fb             	movzx  edi,bl
c0021cca:	31 db                	xor    ebx,ebx
c0021ccc:	50                   	push   eax
c0021ccd:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021cd4:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021cd8:	50                   	push   eax
c0021cd9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021ce0:	e8 5f ea fd ff       	call   c0000744 <memcpy>
c0021ce5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021cec:	89 f9                	mov    ecx,edi
c0021cee:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021cf4:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021cf7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021cfa:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021cfd:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d00:	83 c4 10             	add    esp,0x10
c0021d03:	39 c7                	cmp    edi,eax
c0021d05:	89 df                	mov    edi,ebx
c0021d07:	19 d7                	sbb    edi,edx
c0021d09:	72 10                	jb     c0021d1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d0b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d12:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d19:	eb 0a                	jmp    c0021d25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d1b:	29 c8                	sub    eax,ecx
c0021d1d:	19 da                	sbb    edx,ebx
c0021d1f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d22:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d25:	31 c0                	xor    eax,eax
c0021d27:	eb 05                	jmp    c0021d2e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d29:	b8 04 00 00 00       	mov    eax,0x4
c0021d2e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d34:	5b                   	pop    ebx
c0021d35:	5e                   	pop    esi
c0021d36:	5f                   	pop    edi
c0021d37:	5d                   	pop    ebp
c0021d38:	c3                   	ret    

c0021d39 <readRoot(unsigned int*, unsigned int*, char)>:
c0021d39:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d3f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d47:	50                   	push   eax
c0021d48:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d4c:	50                   	push   eax
c0021d4d:	6a 10                	push   0x10
c0021d4f:	e8 a1 fa ff ff       	call   c00217f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d54:	83 c4 0c             	add    esp,0xc
c0021d57:	6a 22                	push   0x22
c0021d59:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d60:	50                   	push   eax
c0021d61:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d65:	50                   	push   eax
c0021d66:	e8 d9 e9 fd ff       	call   c0000744 <memcpy>
c0021d6b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d76:	89 10                	mov    DWORD PTR [eax],edx
c0021d78:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d83:	89 10                	mov    DWORD PTR [eax],edx
c0021d85:	b0 01                	mov    al,0x1
c0021d87:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d8d:	c3                   	ret    

c0021d8e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d8e:	55                   	push   ebp
c0021d8f:	57                   	push   edi
c0021d90:	56                   	push   esi
c0021d91:	53                   	push   ebx
c0021d92:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d98:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d9f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021da6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021daa:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021dae:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021db2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021db6:	75 03                	jne    c0021dbb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021db8:	83 c3 02             	add    ebx,0x2
c0021dbb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021dbe:	75 03                	jne    c0021dc3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021dc0:	43                   	inc    ebx
c0021dc1:	eb f8                	jmp    c0021dbb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021dc3:	51                   	push   ecx
c0021dc4:	68 00 01 00 00       	push   0x100
c0021dc9:	6a 00                	push   0x0
c0021dcb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021dcf:	50                   	push   eax
c0021dd0:	e8 a3 e9 fd ff       	call   c0000778 <memset>
c0021dd5:	83 c4 10             	add    esp,0x10
c0021dd8:	31 d2                	xor    edx,edx
c0021dda:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021ddd:	84 c0                	test   al,al
c0021ddf:	74 21                	je     c0021e02 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021de1:	3c 2f                	cmp    al,0x2f
c0021de3:	75 0b                	jne    c0021df0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021de5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021de9:	bd 01 00 00 00       	mov    ebp,0x1
c0021dee:	eb 14                	jmp    c0021e04 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021df0:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021df3:	80 f9 19             	cmp    cl,0x19
c0021df6:	77 03                	ja     c0021dfb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021df8:	83 e8 20             	sub    eax,0x20
c0021dfb:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021dff:	42                   	inc    edx
c0021e00:	eb d8                	jmp    c0021dda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e02:	31 ed                	xor    ebp,ebp
c0021e04:	83 ec 0c             	sub    esp,0xc
c0021e07:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e0e:	e8 2d da fe ff       	call   c000f840 <malloc>
c0021e13:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e1a:	89 c6                	mov    esi,eax
c0021e1c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e22:	c1 ef 0b             	shr    edi,0xb
c0021e25:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e2c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e30:	83 c4 10             	add    esp,0x10
c0021e33:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e38:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e3c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e43:	74 28                	je     c0021e6d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e45:	52                   	push   edx
c0021e46:	57                   	push   edi
c0021e47:	50                   	push   eax
c0021e48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e4c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e53:	e8 9d f9 ff ff       	call   c00217f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e5c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e63:	05 00 08 00 00       	add    eax,0x800
c0021e68:	83 c4 10             	add    esp,0x10
c0021e6b:	eb cb                	jmp    c0021e38 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e6d:	83 ec 0c             	sub    esp,0xc
c0021e70:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e74:	57                   	push   edi
c0021e75:	e8 1a e9 fd ff       	call   c0000794 <strlen>
c0021e7a:	50                   	push   eax
c0021e7b:	57                   	push   edi
c0021e7c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e83:	56                   	push   esi
c0021e84:	e8 2a f9 ff ff       	call   c00217b3 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e89:	83 c4 20             	add    esp,0x20
c0021e8c:	85 c0                	test   eax,eax
c0021e8e:	75 13                	jne    c0021ea3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e90:	83 ec 0c             	sub    esp,0xc
c0021e93:	56                   	push   esi
c0021e94:	e8 b7 d9 fe ff       	call   c000f850 <free>
c0021e99:	83 c4 10             	add    esp,0x10
c0021e9c:	31 c0                	xor    eax,eax
c0021e9e:	e9 b3 00 00 00       	jmp    c0021f56 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ea3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ea7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021eab:	c1 e7 08             	shl    edi,0x8
c0021eae:	c1 e2 10             	shl    edx,0x10
c0021eb1:	09 d7                	or     edi,edx
c0021eb3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021eb7:	09 d7                	or     edi,edx
c0021eb9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021ebd:	c1 e2 18             	shl    edx,0x18
c0021ec0:	09 d7                	or     edi,edx
c0021ec2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021ec6:	89 d1                	mov    ecx,edx
c0021ec8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021ecc:	c1 e1 08             	shl    ecx,0x8
c0021ecf:	c1 e2 10             	shl    edx,0x10
c0021ed2:	09 ca                	or     edx,ecx
c0021ed4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ed8:	09 ca                	or     edx,ecx
c0021eda:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021ede:	c1 e1 18             	shl    ecx,0x18
c0021ee1:	09 ca                	or     edx,ecx
c0021ee3:	89 e9                	mov    ecx,ebp
c0021ee5:	84 c9                	test   cl,cl
c0021ee7:	74 3c                	je     c0021f25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021ee9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021eed:	83 ec 0c             	sub    esp,0xc
c0021ef0:	56                   	push   esi
c0021ef1:	e8 5a d9 fe ff       	call   c000f850 <free>
c0021ef6:	83 c4 0c             	add    esp,0xc
c0021ef9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f00:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f05:	50                   	push   eax
c0021f06:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f0d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f18:	52                   	push   edx
c0021f19:	57                   	push   edi
c0021f1a:	53                   	push   ebx
c0021f1b:	e8 6e fe ff ff       	call   c0021d8e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f20:	83 c4 20             	add    esp,0x20
c0021f23:	eb 31                	jmp    c0021f56 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f25:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f28:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f2f:	d0 e8                	shr    al,1
c0021f31:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f33:	83 e0 01             	and    eax,0x1
c0021f36:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f3d:	83 ec 0c             	sub    esp,0xc
c0021f40:	89 13                	mov    DWORD PTR [ebx],edx
c0021f42:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f49:	89 03                	mov    DWORD PTR [ebx],eax
c0021f4b:	56                   	push   esi
c0021f4c:	e8 ff d8 fe ff       	call   c000f850 <free>
c0021f51:	83 c4 10             	add    esp,0x10
c0021f54:	b0 01                	mov    al,0x1
c0021f56:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f5c:	5b                   	pop    ebx
c0021f5d:	5e                   	pop    esi
c0021f5e:	5f                   	pop    edi
c0021f5f:	5d                   	pop    ebp
c0021f60:	c3                   	ret    

c0021f61 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f61:	55                   	push   ebp
c0021f62:	57                   	push   edi
c0021f63:	56                   	push   esi
c0021f64:	53                   	push   ebx
c0021f65:	83 ec 20             	sub    esp,0x20
c0021f68:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f6c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f70:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f7c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f84:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f89:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f8f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f95:	57                   	push   edi
c0021f96:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f9a:	50                   	push   eax
c0021f9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f9f:	50                   	push   eax
c0021fa0:	e8 94 fd ff ff       	call   c0021d39 <readRoot(unsigned int*, unsigned int*, char)>
c0021fa5:	5a                   	pop    edx
c0021fa6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021faa:	e8 e5 e7 fd ff       	call   c0000794 <strlen>
c0021faf:	83 c4 10             	add    esp,0x10
c0021fb2:	83 f8 03             	cmp    eax,0x3
c0021fb5:	77 17                	ja     c0021fce <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021fb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fbb:	89 03                	mov    DWORD PTR [ebx],eax
c0021fbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fc1:	89 06                	mov    DWORD PTR [esi],eax
c0021fc3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021fca:	b0 01                	mov    al,0x1
c0021fcc:	eb 19                	jmp    c0021fe7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021fce:	50                   	push   eax
c0021fcf:	55                   	push   ebp
c0021fd0:	57                   	push   edi
c0021fd1:	56                   	push   esi
c0021fd2:	53                   	push   ebx
c0021fd3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fd7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fdb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fdf:	e8 aa fd ff ff       	call   c0021d8e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fe4:	83 c4 20             	add    esp,0x20
c0021fe7:	83 c4 1c             	add    esp,0x1c
c0021fea:	5b                   	pop    ebx
c0021feb:	5e                   	pop    esi
c0021fec:	5f                   	pop    edi
c0021fed:	5d                   	pop    ebp
c0021fee:	c3                   	ret    
c0021fef:	90                   	nop

c0021ff0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021ff0:	57                   	push   edi
c0021ff1:	56                   	push   esi
c0021ff2:	53                   	push   ebx
c0021ff3:	83 ec 10             	sub    esp,0x10
c0021ff6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ffa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ffe:	85 ff                	test   edi,edi
c0022000:	0f 84 9d 00 00 00    	je     c00220a3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022006:	85 f6                	test   esi,esi
c0022008:	0f 84 95 00 00 00    	je     c00220a3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002200e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022013:	74 17                	je     c002202c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022015:	83 ec 0c             	sub    esp,0xc
c0022018:	68 4f cb 02 c0       	push   0xc002cb4f
c002201d:	e8 5b 0f ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0022022:	83 c4 10             	add    esp,0x10
c0022025:	b8 03 00 00 00       	mov    eax,0x3
c002202a:	eb 7c                	jmp    c00220a8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002202c:	83 ec 0c             	sub    esp,0xc
c002202f:	6a 1c                	push   0x1c
c0022031:	e8 0a d8 fe ff       	call   c000f840 <malloc>
c0022036:	89 07                	mov    DWORD PTR [edi],eax
c0022038:	89 c3                	mov    ebx,eax
c002203a:	58                   	pop    eax
c002203b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002203f:	50                   	push   eax
c0022040:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022043:	50                   	push   eax
c0022044:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022048:	50                   	push   eax
c0022049:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002204d:	50                   	push   eax
c002204e:	56                   	push   esi
c002204f:	e8 0d ff ff ff       	call   c0021f61 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022054:	83 c4 20             	add    esp,0x20
c0022057:	84 c0                	test   al,al
c0022059:	74 07                	je     c0022062 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002205b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022060:	74 0b                	je     c002206d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022062:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022066:	b8 01 00 00 00       	mov    eax,0x1
c002206b:	eb 3b                	jmp    c00220a8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002206d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022071:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022075:	89 03                	mov    DWORD PTR [ebx],eax
c0022077:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002207e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022082:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022089:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022090:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022093:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002209a:	8a 06                	mov    al,BYTE PTR [esi]
c002209c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002209f:	31 c0                	xor    eax,eax
c00220a1:	eb 05                	jmp    c00220a8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220a3:	b8 04 00 00 00       	mov    eax,0x4
c00220a8:	83 c4 10             	add    esp,0x10
c00220ab:	5b                   	pop    ebx
c00220ac:	5e                   	pop    esi
c00220ad:	5f                   	pop    edi
c00220ae:	c3                   	ret    
c00220af:	90                   	nop

c00220b0 <ISO9660::exists(char const*)>:
c00220b0:	83 ec 28             	sub    esp,0x28
c00220b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00220bb:	52                   	push   edx
c00220bc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00220bf:	52                   	push   edx
c00220c0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220c4:	52                   	push   edx
c00220c5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220c9:	52                   	push   edx
c00220ca:	50                   	push   eax
c00220cb:	e8 91 fe ff ff       	call   c0021f61 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220d0:	83 c4 3c             	add    esp,0x3c
c00220d3:	c3                   	ret    

c00220d4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00220d4:	56                   	push   esi
c00220d5:	53                   	push   ebx
c00220d6:	83 ec 14             	sub    esp,0x14
c00220d9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00220dd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00220e1:	85 db                	test   ebx,ebx
c00220e3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220e7:	0f 94 c2             	sete   dl
c00220ea:	85 f6                	test   esi,esi
c00220ec:	0f 94 c0             	sete   al
c00220ef:	08 c2                	or     dl,al
c00220f1:	75 68                	jne    c002215b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220f3:	85 c9                	test   ecx,ecx
c00220f5:	74 64                	je     c002215b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220f7:	83 ec 0c             	sub    esp,0xc
c00220fa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022101:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022107:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002210e:	50                   	push   eax
c002210f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022112:	50                   	push   eax
c0022113:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022117:	50                   	push   eax
c0022118:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002211c:	50                   	push   eax
c002211d:	51                   	push   ecx
c002211e:	e8 3e fe ff ff       	call   c0021f61 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022123:	83 c4 20             	add    esp,0x20
c0022126:	ba 01 00 00 00       	mov    edx,0x1
c002212b:	84 c0                	test   al,al
c002212d:	74 31                	je     c0022160 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002212f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022133:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002213a:	89 03                	mov    DWORD PTR [ebx],eax
c002213c:	ba 00 00 00 00       	mov    edx,0x0
c0022141:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022145:	85 c0                	test   eax,eax
c0022147:	0f 95 06             	setne  BYTE PTR [esi]
c002214a:	74 14                	je     c0022160 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002214c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022152:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022159:	eb 05                	jmp    c0022160 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002215b:	ba 04 00 00 00       	mov    edx,0x4
c0022160:	83 c4 14             	add    esp,0x14
c0022163:	89 d0                	mov    eax,edx
c0022165:	5b                   	pop    ebx
c0022166:	5e                   	pop    esi
c0022167:	c3                   	ret    

c0022168 <ISO9660::openDir(char const*, void**)>:
c0022168:	57                   	push   edi
c0022169:	56                   	push   esi
c002216a:	53                   	push   ebx
c002216b:	83 ec 10             	sub    esp,0x10
c002216e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022172:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022176:	85 ff                	test   edi,edi
c0022178:	0f 84 95 00 00 00    	je     c0022213 <ISO9660::openDir(char const*, void**)+0xab>
c002217e:	85 f6                	test   esi,esi
c0022180:	0f 84 8d 00 00 00    	je     c0022213 <ISO9660::openDir(char const*, void**)+0xab>
c0022186:	83 ec 0c             	sub    esp,0xc
c0022189:	6a 1c                	push   0x1c
c002218b:	e8 b0 d6 fe ff       	call   c000f840 <malloc>
c0022190:	89 07                	mov    DWORD PTR [edi],eax
c0022192:	89 c3                	mov    ebx,eax
c0022194:	59                   	pop    ecx
c0022195:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022199:	50                   	push   eax
c002219a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002219d:	50                   	push   eax
c002219e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221a2:	50                   	push   eax
c00221a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221a7:	50                   	push   eax
c00221a8:	56                   	push   esi
c00221a9:	e8 b3 fd ff ff       	call   c0021f61 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221ae:	83 c4 20             	add    esp,0x20
c00221b1:	84 c0                	test   al,al
c00221b3:	74 07                	je     c00221bc <ISO9660::openDir(char const*, void**)+0x54>
c00221b5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221ba:	75 21                	jne    c00221dd <ISO9660::openDir(char const*, void**)+0x75>
c00221bc:	0f b6 c0             	movzx  eax,al
c00221bf:	52                   	push   edx
c00221c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00221c4:	50                   	push   eax
c00221c5:	68 75 cb 02 c0       	push   0xc002cb75
c00221ca:	e8 ae 0d ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00221cf:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221d3:	83 c4 10             	add    esp,0x10
c00221d6:	b8 01 00 00 00       	mov    eax,0x1
c00221db:	eb 3b                	jmp    c0022218 <ISO9660::openDir(char const*, void**)+0xb0>
c00221dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221e5:	89 03                	mov    DWORD PTR [ebx],eax
c00221e7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221f9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022200:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022203:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002220a:	8a 06                	mov    al,BYTE PTR [esi]
c002220c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002220f:	31 c0                	xor    eax,eax
c0022211:	eb 05                	jmp    c0022218 <ISO9660::openDir(char const*, void**)+0xb0>
c0022213:	b8 04 00 00 00       	mov    eax,0x4
c0022218:	83 c4 10             	add    esp,0x10
c002221b:	5b                   	pop    ebx
c002221c:	5e                   	pop    esi
c002221d:	5f                   	pop    edi
c002221e:	c3                   	ret    
c002221f:	90                   	nop

c0022220 <ISO9660::ISO9660()>:
c0022220:	83 ec 0c             	sub    esp,0xc
c0022223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022227:	83 ec 0c             	sub    esp,0xc
c002222a:	50                   	push   eax
c002222b:	e8 52 10 ff ff       	call   c0013282 <Filesystem::Filesystem()>
c0022230:	83 c4 10             	add    esp,0x10
c0022233:	ba 98 cb 02 c0       	mov    edx,0xc002cb98
c0022238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223c:	89 10                	mov    DWORD PTR [eax],edx
c002223e:	90                   	nop
c002223f:	83 c4 0c             	add    esp,0xc
c0022242:	c3                   	ret    
c0022243:	90                   	nop

c0022244 <SoundChannel::~SoundChannel()>:
c0022244:	83 ec 0c             	sub    esp,0xc
c0022247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002224e:	83 ec 0c             	sub    esp,0xc
c0022251:	50                   	push   eax
c0022252:	e8 f9 d5 fe ff       	call   c000f850 <free>
c0022257:	83 c4 10             	add    esp,0x10
c002225a:	90                   	nop
c002225b:	83 c4 0c             	add    esp,0xc
c002225e:	c3                   	ret    
c002225f:	90                   	nop

c0022260 <SoundChannel::setSpeed(float)>:
c0022260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022264:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022268:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002226b:	c3                   	ret    

c002226c <SoundChannel::getSpeed()>:
c002226c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022270:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022273:	c3                   	ret    

c0022274 <SoundChannel::setVolume(int)>:
c0022274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022278:	83 f8 64             	cmp    eax,0x64
c002227b:	7e 05                	jle    c0022282 <SoundChannel::setVolume(int)+0xe>
c002227d:	b8 64 00 00 00       	mov    eax,0x64
c0022282:	85 c0                	test   eax,eax
c0022284:	79 02                	jns    c0022288 <SoundChannel::setVolume(int)+0x14>
c0022286:	31 c0                	xor    eax,eax
c0022288:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002228c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002228f:	c3                   	ret    

c0022290 <SoundChannel::getVolume()>:
c0022290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022294:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022297:	c3                   	ret    

c0022298 <SoundChannel::pause()>:
c0022298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002229c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00222a0:	c3                   	ret    
c00222a1:	90                   	nop

c00222a2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00222a2:	83 ec 1c             	sub    esp,0x1c
c00222a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222a9:	e8 ea ff ff ff       	call   c0022298 <SoundChannel::pause()>
c00222ae:	83 c4 04             	add    esp,0x4
c00222b1:	6a 50                	push   0x50
c00222b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222b7:	e8 b8 ff ff ff       	call   c0022274 <SoundChannel::setVolume(int)>
c00222bc:	83 c4 08             	add    esp,0x8
c00222bf:	a1 10 cc 02 c0       	mov    eax,ds:0xc002cc10
c00222c4:	50                   	push   eax
c00222c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222c9:	e8 92 ff ff ff       	call   c0022260 <SoundChannel::setSpeed(float)>
c00222ce:	83 c4 08             	add    esp,0x8
c00222d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00222d9:	89 10                	mov    DWORD PTR [eax],edx
c00222db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222f1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00222f6:	75 23                	jne    c002231b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00222fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022302:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022305:	0f af c2             	imul   eax,edx
c0022308:	85 c0                	test   eax,eax
c002230a:	79 03                	jns    c002230f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002230c:	83 c0 03             	add    eax,0x3
c002230f:	c1 f8 02             	sar    eax,0x2
c0022312:	05 a0 0f 00 00       	add    eax,0xfa0
c0022317:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002231b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022323:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002232a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022335:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002233c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022340:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022343:	c1 e0 02             	shl    eax,0x2
c0022346:	83 ec 0c             	sub    esp,0xc
c0022349:	50                   	push   eax
c002234a:	e8 f1 d4 fe ff       	call   c000f840 <malloc>
c002234f:	83 c4 10             	add    esp,0x10
c0022352:	89 c2                	mov    edx,eax
c0022354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022358:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002235b:	83 ec 04             	sub    esp,0x4
c002235e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022362:	50                   	push   eax
c0022363:	6a 01                	push   0x1
c0022365:	6a 04                	push   0x4
c0022367:	e8 33 68 fe ff       	call   c0008b9f <src_new>
c002236c:	83 c4 10             	add    esp,0x10
c002236f:	89 c2                	mov    edx,eax
c0022371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022375:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002237c:	85 c0                	test   eax,eax
c002237e:	74 10                	je     c0022390 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022380:	83 ec 0c             	sub    esp,0xc
c0022383:	68 f4 cb 02 c0       	push   0xc002cbf4
c0022388:	e8 a2 82 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c002238d:	83 c4 10             	add    esp,0x10
c0022390:	a0 c0 29 03 c0       	mov    al,ds:0xc00329c0
c0022395:	83 f0 01             	xor    eax,0x1
c0022398:	84 c0                	test   al,al
c002239a:	74 57                	je     c00223f3 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002239c:	a1 14 cc 02 c0       	mov    eax,ds:0xc002cc14
c00223a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223ad:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00223b5:	7f 35                	jg     c00223ec <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00223b7:	83 ec 0c             	sub    esp,0xc
c00223ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00223be:	e8 94 4f 00 00       	call   c0027357 <__floatsisf>
c00223c3:	83 c4 10             	add    esp,0x10
c00223c6:	8b 15 14 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002cc14
c00223cc:	83 ec 08             	sub    esp,0x8
c00223cf:	52                   	push   edx
c00223d0:	50                   	push   eax
c00223d1:	e8 93 4b 00 00       	call   c0026f69 <__mulsf3>
c00223d6:	83 c4 10             	add    esp,0x10
c00223d9:	89 c2                	mov    edx,eax
c00223db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223df:	89 14 85 c0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda40],edx
c00223e6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223ea:	eb c1                	jmp    c00223ad <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00223ec:	c6 05 c0 29 03 c0 01 	mov    BYTE PTR ds:0xc00329c0,0x1
c00223f3:	90                   	nop
c00223f4:	83 c4 1c             	add    esp,0x1c
c00223f7:	c3                   	ret    

c00223f8 <SoundChannel::play()>:
c00223f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223fc:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022400:	c3                   	ret    
c0022401:	90                   	nop

c0022402 <SoundChannel::paused()>:
c0022402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022406:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022409:	c3                   	ret    

c002240a <SoundChannel::getSampleRate()>:
c002240a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002240e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022410:	c3                   	ret    
c0022411:	90                   	nop

c0022412 <SoundChannel::getBits()>:
c0022412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022419:	c3                   	ret    

c002241a <SoundChannel::getBufferUsed()>:
c002241a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002241e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022421:	c3                   	ret    

c0022422 <SoundChannel::getBufferSize()>:
c0022422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022426:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022429:	c3                   	ret    

c002242a <SoundChannel::unbuffer(float*, int, int)>:
c002242a:	56                   	push   esi
c002242b:	53                   	push   ebx
c002242c:	83 ec 40             	sub    esp,0x40
c002242f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022433:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022436:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002243a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002243d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022441:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022445:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022449:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002244d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022451:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022455:	e8 fd 4e 00 00       	call   c0027357 <__floatsisf>
c002245a:	5a                   	pop    edx
c002245b:	89 c6                	mov    esi,eax
c002245d:	ff 33                	push   DWORD PTR [ebx]
c002245f:	e8 f3 4e 00 00       	call   c0027357 <__floatsisf>
c0022464:	59                   	pop    ecx
c0022465:	5a                   	pop    edx
c0022466:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022469:	50                   	push   eax
c002246a:	e8 fa 4a 00 00       	call   c0026f69 <__mulsf3>
c002246f:	59                   	pop    ecx
c0022470:	5a                   	pop    edx
c0022471:	50                   	push   eax
c0022472:	56                   	push   esi
c0022473:	e8 b4 4c 00 00       	call   c002712c <__divsf3>
c0022478:	89 04 24             	mov    DWORD PTR [esp],eax
c002247b:	e8 a7 61 00 00       	call   c0028627 <__extendsfdf2>
c0022480:	59                   	pop    ecx
c0022481:	5e                   	pop    esi
c0022482:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022486:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002248a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022492:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022496:	50                   	push   eax
c0022497:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002249a:	e8 f5 62 fe ff       	call   c0008794 <src_process>
c002249f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224a3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00224a6:	83 c4 0c             	add    esp,0xc
c00224a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224ac:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224af:	29 d0                	sub    eax,edx
c00224b1:	c1 e0 02             	shl    eax,0x2
c00224b4:	50                   	push   eax
c00224b5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224b8:	50                   	push   eax
c00224b9:	51                   	push   ecx
c00224ba:	e8 bd e1 fd ff       	call   c000067c <memmove>
c00224bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00224c3:	83 c4 44             	add    esp,0x44
c00224c6:	5b                   	pop    ebx
c00224c7:	5e                   	pop    esi
c00224c8:	c3                   	ret    
c00224c9:	90                   	nop

c00224ca <SoundChannel::buffer8(unsigned char*, int)>:
c00224ca:	55                   	push   ebp
c00224cb:	57                   	push   edi
c00224cc:	56                   	push   esi
c00224cd:	53                   	push   ebx
c00224ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224d2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224d6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224dd:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224e0:	74 7a                	je     c002255c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224e2:	85 ff                	test   edi,edi
c00224e4:	7e 76                	jle    c002255c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224e6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224ea:	8d 70 01             	lea    esi,[eax+0x1]
c00224ed:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224f0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224f3:	8b 1c 9d c0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda40]
c00224fa:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224fd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022500:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022503:	74 5e                	je     c0022563 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022505:	83 ff 01             	cmp    edi,0x1
c0022508:	74 4b                	je     c0022555 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002250a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002250e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022511:	8d 70 01             	lea    esi,[eax+0x1]
c0022514:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022517:	8b 1c 9d c0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda40]
c002251e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022521:	b8 02 00 00 00       	mov    eax,0x2
c0022526:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022529:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002252c:	75 23                	jne    c0022551 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002252e:	eb 27                	jmp    c0022557 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022530:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022535:	8d 71 01             	lea    esi,[ecx+0x1]
c0022538:	40                   	inc    eax
c0022539:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002253c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002253f:	8b 1c 9d c0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda40]
c0022546:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022549:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002254c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002254f:	74 06                	je     c0022557 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022551:	39 c7                	cmp    edi,eax
c0022553:	75 db                	jne    c0022530 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022555:	89 f8                	mov    eax,edi
c0022557:	5b                   	pop    ebx
c0022558:	5e                   	pop    esi
c0022559:	5f                   	pop    edi
c002255a:	5d                   	pop    ebp
c002255b:	c3                   	ret    
c002255c:	5b                   	pop    ebx
c002255d:	31 c0                	xor    eax,eax
c002255f:	5e                   	pop    esi
c0022560:	5f                   	pop    edi
c0022561:	5d                   	pop    ebp
c0022562:	c3                   	ret    
c0022563:	b8 01 00 00 00       	mov    eax,0x1
c0022568:	eb ed                	jmp    c0022557 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002256a <SoundDevice::SoundDevice(char const*)>:
c002256a:	83 ec 1c             	sub    esp,0x1c
c002256d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022571:	83 ec 08             	sub    esp,0x8
c0022574:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022578:	50                   	push   eax
c0022579:	e8 16 20 ff ff       	call   c0014594 <Device::Device(char const*)>
c002257e:	83 c4 10             	add    esp,0x10
c0022581:	ba 20 cc 02 c0       	mov    edx,0xc002cc20
c0022586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258a:	89 10                	mov    DWORD PTR [eax],edx
c002258c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022590:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002259a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002259e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225b0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225b5:	7f 19                	jg     c00225d0 <SoundDevice::SoundDevice(char const*)+0x66>
c00225b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225bf:	83 c2 54             	add    edx,0x54
c00225c2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00225ca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225ce:	eb e0                	jmp    c00225b0 <SoundDevice::SoundDevice(char const*)+0x46>
c00225d0:	90                   	nop
c00225d1:	83 c4 1c             	add    esp,0x1c
c00225d4:	c3                   	ret    
c00225d5:	90                   	nop

c00225d6 <SoundDevice::~SoundDevice()>:
c00225d6:	53                   	push   ebx
c00225d7:	83 ec 18             	sub    esp,0x18
c00225da:	ba 20 cc 02 c0       	mov    edx,0xc002cc20
c00225df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225e3:	89 10                	mov    DWORD PTR [eax],edx
c00225e5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225ed:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225f2:	7f 46                	jg     c002263a <SoundDevice::~SoundDevice()+0x64>
c00225f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225fc:	83 c2 54             	add    edx,0x54
c00225ff:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022603:	85 c0                	test   eax,eax
c0022605:	74 2d                	je     c0022634 <SoundDevice::~SoundDevice()+0x5e>
c0022607:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002260b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002260f:	83 c2 54             	add    edx,0x54
c0022612:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022616:	85 db                	test   ebx,ebx
c0022618:	74 1a                	je     c0022634 <SoundDevice::~SoundDevice()+0x5e>
c002261a:	83 ec 0c             	sub    esp,0xc
c002261d:	53                   	push   ebx
c002261e:	e8 21 fc ff ff       	call   c0022244 <SoundChannel::~SoundChannel()>
c0022623:	83 c4 10             	add    esp,0x10
c0022626:	83 ec 08             	sub    esp,0x8
c0022629:	6a 2c                	push   0x2c
c002262b:	53                   	push   ebx
c002262c:	e8 6c 08 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0022631:	83 c4 10             	add    esp,0x10
c0022634:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022638:	eb b3                	jmp    c00225ed <SoundDevice::~SoundDevice()+0x17>
c002263a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002263e:	83 ec 0c             	sub    esp,0xc
c0022641:	50                   	push   eax
c0022642:	e8 2f 1c ff ff       	call   c0014276 <Device::~Device()>
c0022647:	83 c4 10             	add    esp,0x10
c002264a:	90                   	nop
c002264b:	83 c4 18             	add    esp,0x18
c002264e:	5b                   	pop    ebx
c002264f:	c3                   	ret    

c0022650 <SoundDevice::~SoundDevice()>:
c0022650:	83 ec 0c             	sub    esp,0xc
c0022653:	83 ec 0c             	sub    esp,0xc
c0022656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002265a:	e8 77 ff ff ff       	call   c00225d6 <SoundDevice::~SoundDevice()>
c002265f:	83 c4 10             	add    esp,0x10
c0022662:	83 ec 08             	sub    esp,0x8
c0022665:	68 e4 01 00 00       	push   0x1e4
c002266a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002266e:	e8 2a 08 ff ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0022673:	83 c4 10             	add    esp,0x10
c0022676:	83 c4 0c             	add    esp,0xc
c0022679:	c3                   	ret    

c002267a <SoundDevice::getFreeChannelNum()>:
c002267a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002267e:	31 c0                	xor    eax,eax
c0022680:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022688:	74 09                	je     c0022693 <SoundDevice::getFreeChannelNum()+0x19>
c002268a:	40                   	inc    eax
c002268b:	83 f8 20             	cmp    eax,0x20
c002268e:	75 f0                	jne    c0022680 <SoundDevice::getFreeChannelNum()+0x6>
c0022690:	83 c8 ff             	or     eax,0xffffffff
c0022693:	c3                   	ret    

c0022694 <SoundDevice::addChannel(SoundChannel*)>:
c0022694:	56                   	push   esi
c0022695:	53                   	push   ebx
c0022696:	51                   	push   ecx
c0022697:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002269b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002269f:	53                   	push   ebx
c00226a0:	e8 d5 ff ff ff       	call   c002267a <SoundDevice::getFreeChannelNum()>
c00226a5:	5a                   	pop    edx
c00226a6:	83 f8 ff             	cmp    eax,0xffffffff
c00226a9:	74 51                	je     c00226fc <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226ab:	85 f6                	test   esi,esi
c00226ad:	74 4d                	je     c00226fc <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226af:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226b6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226bd:	75 30                	jne    c00226ef <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226bf:	83 ec 0c             	sub    esp,0xc
c00226c2:	56                   	push   esi
c00226c3:	e8 42 fd ff ff       	call   c002240a <SoundChannel::getSampleRate()>
c00226c8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226ce:	89 34 24             	mov    DWORD PTR [esp],esi
c00226d1:	e8 3c fd ff ff       	call   c0022412 <SoundChannel::getBits()>
c00226d6:	83 c4 0c             	add    esp,0xc
c00226d9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226df:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226e1:	50                   	push   eax
c00226e2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226e8:	53                   	push   ebx
c00226e9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226ec:	83 c4 10             	add    esp,0x10
c00226ef:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226f5:	b8 01 00 00 00       	mov    eax,0x1
c00226fa:	eb 03                	jmp    c00226ff <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226fc:	83 c8 ff             	or     eax,0xffffffff
c00226ff:	5a                   	pop    edx
c0022700:	5b                   	pop    ebx
c0022701:	5e                   	pop    esi
c0022702:	c3                   	ret    
c0022703:	90                   	nop

c0022704 <SoundDevice::removeChannel(int)>:
c0022704:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002270c:	83 fa 1f             	cmp    edx,0x1f
c002270f:	77 23                	ja     c0022734 <SoundDevice::removeChannel(int)+0x30>
c0022711:	8d 14 90             	lea    edx,[eax+edx*4]
c0022714:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002271b:	74 17                	je     c0022734 <SoundDevice::removeChannel(int)+0x30>
c002271d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022727:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002272d:	75 05                	jne    c0022734 <SoundDevice::removeChannel(int)+0x30>
c002272f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022731:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022734:	c3                   	ret    
c0022735:	90                   	nop

c0022736 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022736:	57                   	push   edi
c0022737:	56                   	push   esi
c0022738:	53                   	push   ebx
c0022739:	31 db                	xor    ebx,ebx
c002273b:	83 ec 10             	sub    esp,0x10
c002273e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022742:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022746:	0f 8d cb 00 00 00    	jge    c0022817 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002274c:	83 ec 0c             	sub    esp,0xc
c002274f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022753:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022756:	e8 cc 5e 00 00       	call   c0028627 <__extendsfdf2>
c002275b:	83 c4 10             	add    esp,0x10
c002275e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022762:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022766:	68 00 00 f0 3f       	push   0x3ff00000
c002276b:	6a 00                	push   0x0
c002276d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022775:	e8 39 4e 00 00       	call   c00275b3 <__adddf3>
c002277a:	83 c4 10             	add    esp,0x10
c002277d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022781:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022785:	68 00 00 e0 3f       	push   0x3fe00000
c002278a:	6a 00                	push   0x0
c002278c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022790:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022794:	e8 97 54 00 00       	call   c0027c30 <__muldf3>
c0022799:	83 c4 10             	add    esp,0x10
c002279c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227a4:	68 00 00 60 40       	push   0x40600000
c00227a9:	6a 00                	push   0x0
c00227ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b3:	e8 78 54 00 00       	call   c0027c30 <__muldf3>
c00227b8:	59                   	pop    ecx
c00227b9:	5f                   	pop    edi
c00227ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00227c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ca:	e8 34 5d 00 00       	call   c0028503 <__truncdfsf2>
c00227cf:	5a                   	pop    edx
c00227d0:	89 c7                	mov    edi,eax
c00227d2:	59                   	pop    ecx
c00227d3:	68 00 00 fe 42       	push   0x42fe0000
c00227d8:	50                   	push   eax
c00227d9:	e8 cf 4d 00 00       	call   c00275ad <__gesf2>
c00227de:	83 c4 10             	add    esp,0x10
c00227e1:	85 c0                	test   eax,eax
c00227e3:	78 06                	js     c00227eb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00227e5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00227e9:	eb 26                	jmp    c0022811 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227eb:	50                   	push   eax
c00227ec:	50                   	push   eax
c00227ed:	6a 00                	push   0x0
c00227ef:	57                   	push   edi
c00227f0:	e8 bc 4d 00 00       	call   c00275b1 <__lesf2>
c00227f5:	83 c4 10             	add    esp,0x10
c00227f8:	85 c0                	test   eax,eax
c00227fa:	7f 06                	jg     c0022802 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227fc:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022800:	eb 0f                	jmp    c0022811 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022802:	83 ec 0c             	sub    esp,0xc
c0022805:	57                   	push   edi
c0022806:	e8 b1 5e 00 00       	call   c00286bc <lrintf>
c002280b:	83 c4 10             	add    esp,0x10
c002280e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022811:	43                   	inc    ebx
c0022812:	e9 2b ff ff ff       	jmp    c0022742 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022817:	83 c4 10             	add    esp,0x10
c002281a:	5b                   	pop    ebx
c002281b:	5e                   	pop    esi
c002281c:	5f                   	pop    edi
c002281d:	c3                   	ret    

c002281e <SoundDevice::getAudio(int, float*, float*)>:
c002281e:	55                   	push   ebp
c002281f:	57                   	push   edi
c0022820:	56                   	push   esi
c0022821:	53                   	push   ebx
c0022822:	31 db                	xor    ebx,ebx
c0022824:	83 ec 20             	sub    esp,0x20
c0022827:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002282b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002282f:	c1 e0 02             	shl    eax,0x2
c0022832:	50                   	push   eax
c0022833:	6a 00                	push   0x0
c0022835:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022839:	e8 3a df fd ff       	call   c0000778 <memset>
c002283e:	83 c4 10             	add    esp,0x10
c0022841:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022845:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002284c:	85 c0                	test   eax,eax
c002284e:	0f 84 d7 00 00 00    	je     c002292b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022854:	83 ec 0c             	sub    esp,0xc
c0022857:	50                   	push   eax
c0022858:	e8 a5 fb ff ff       	call   c0022402 <SoundChannel::paused()>
c002285d:	83 c4 10             	add    esp,0x10
c0022860:	84 c0                	test   al,al
c0022862:	0f 85 c3 00 00 00    	jne    c002292b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022868:	83 ec 0c             	sub    esp,0xc
c002286b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022872:	e8 19 fa ff ff       	call   c0022290 <SoundChannel::getVolume()>
c0022877:	83 c4 10             	add    esp,0x10
c002287a:	85 c0                	test   eax,eax
c002287c:	0f 84 a9 00 00 00    	je     c002292b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022882:	83 ec 0c             	sub    esp,0xc
c0022885:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002288c:	e8 ff f9 ff ff       	call   c0022290 <SoundChannel::getVolume()>
c0022891:	83 ec 0c             	sub    esp,0xc
c0022894:	50                   	push   eax
c0022895:	e8 bd 4a 00 00       	call   c0027357 <__floatsisf>
c002289a:	59                   	pop    ecx
c002289b:	5d                   	pop    ebp
c002289c:	31 ed                	xor    ebp,ebp
c002289e:	68 00 00 c8 42       	push   0x42c80000
c00228a3:	50                   	push   eax
c00228a4:	e8 83 48 00 00       	call   c002712c <__divsf3>
c00228a9:	83 c4 10             	add    esp,0x10
c00228ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228b4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228ba:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228be:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228c5:	e8 60 fb ff ff       	call   c002242a <SoundChannel::unbuffer(float*, int, int)>
c00228ca:	83 c4 20             	add    esp,0x20
c00228cd:	89 c1                	mov    ecx,eax
c00228cf:	39 cd                	cmp    ebp,ecx
c00228d1:	7d 52                	jge    c0022925 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00228d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00228d7:	50                   	push   eax
c00228d8:	50                   	push   eax
c00228d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00228dd:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228e4:	e8 80 46 00 00       	call   c0026f69 <__mulsf3>
c00228e9:	5a                   	pop    edx
c00228ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228ee:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228f4:	e8 5e 4a 00 00       	call   c0027357 <__floatsisf>
c00228f9:	59                   	pop    ecx
c00228fa:	5a                   	pop    edx
c00228fb:	50                   	push   eax
c00228fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022900:	e8 27 48 00 00       	call   c002712c <__divsf3>
c0022905:	59                   	pop    ecx
c0022906:	5a                   	pop    edx
c0022907:	50                   	push   eax
c0022908:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002290c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002290f:	e8 32 43 00 00       	call   c0026c46 <__addsf3>
c0022914:	83 c4 10             	add    esp,0x10
c0022917:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002291b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002291f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022922:	45                   	inc    ebp
c0022923:	eb aa                	jmp    c00228cf <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022925:	39 cf                	cmp    edi,ecx
c0022927:	7e 02                	jle    c002292b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022929:	89 cf                	mov    edi,ecx
c002292b:	43                   	inc    ebx
c002292c:	83 fb 20             	cmp    ebx,0x20
c002292f:	0f 85 10 ff ff ff    	jne    c0022845 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022935:	83 c4 1c             	add    esp,0x1c
c0022938:	89 f8                	mov    eax,edi
c002293a:	5b                   	pop    ebx
c002293b:	5e                   	pop    esi
c002293c:	5f                   	pop    edi
c002293d:	5d                   	pop    ebp
c002293e:	c3                   	ret    
c002293f:	90                   	nop

c0022940 <PCI::open(int, int, void*)>:
c0022940:	83 ec 18             	sub    esp,0x18
c0022943:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022947:	8b 10                	mov    edx,DWORD PTR [eax]
c0022949:	50                   	push   eax
c002294a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002294d:	31 c0                	xor    eax,eax
c002294f:	83 c4 1c             	add    esp,0x1c
c0022952:	c3                   	ret    
c0022953:	90                   	nop

c0022954 <PCI::close(int, int, void*)>:
c0022954:	31 c0                	xor    eax,eax
c0022956:	c3                   	ret    
c0022957:	90                   	nop

c0022958 <PCI::PCI()>:
c0022958:	83 ec 0c             	sub    esp,0xc
c002295b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295f:	83 ec 08             	sub    esp,0x8
c0022962:	68 50 cc 02 c0       	push   0xc002cc50
c0022967:	50                   	push   eax
c0022968:	e8 ab 12 ff ff       	call   c0013c18 <Bus::Bus(char const*)>
c002296d:	83 c4 10             	add    esp,0x10
c0022970:	ba bc cc 02 c0       	mov    edx,0xc002ccbc
c0022975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022979:	89 10                	mov    DWORD PTR [eax],edx
c002297b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022985:	0f b6 d0             	movzx  edx,al
c0022988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002298c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022997:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002299d:	0f b6 d0             	movzx  edx,al
c00229a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229b3:	8d 50 01             	lea    edx,[eax+0x1]
c00229b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229ba:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229c0:	0f b6 d0             	movzx  edx,al
c00229c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229cb:	83 c9 c0             	or     ecx,0xffffffc0
c00229ce:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229d2:	90                   	nop
c00229d3:	83 c4 0c             	add    esp,0xc
c00229d6:	c3                   	ret    
c00229d7:	90                   	nop

c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00229dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00229e1:	89 ca                	mov    edx,ecx
c00229e3:	c1 e0 10             	shl    eax,0x10
c00229e6:	81 e2 fc 00 00 00    	and    edx,0xfc
c00229ec:	09 d0                	or     eax,edx
c00229ee:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00229f3:	c1 e2 08             	shl    edx,0x8
c00229f6:	09 d0                	or     eax,edx
c00229f8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229fd:	c1 e2 0b             	shl    edx,0xb
c0022a00:	09 d0                	or     eax,edx
c0022a02:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a07:	0d 00 00 00 80       	or     eax,0x80000000
c0022a0c:	ef                   	out    dx,eax
c0022a0d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a12:	ed                   	in     eax,dx
c0022a13:	83 e1 02             	and    ecx,0x2
c0022a16:	0f b6 c9             	movzx  ecx,cl
c0022a19:	c1 e1 03             	shl    ecx,0x3
c0022a1c:	d3 e8                	shr    eax,cl
c0022a1e:	c3                   	ret    
c0022a1f:	90                   	nop

c0022a20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a20:	6a 00                	push   0x0
c0022a22:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a27:	50                   	push   eax
c0022a28:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a2d:	50                   	push   eax
c0022a2e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a33:	50                   	push   eax
c0022a34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a38:	e8 9b ff ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a3d:	83 c4 14             	add    esp,0x14
c0022a40:	c3                   	ret    
c0022a41:	90                   	nop

c0022a42 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a42:	6a 0e                	push   0xe
c0022a44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a49:	50                   	push   eax
c0022a4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a4f:	50                   	push   eax
c0022a50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a55:	50                   	push   eax
c0022a56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a5a:	e8 79 ff ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a5f:	83 c4 14             	add    esp,0x14
c0022a62:	0f b6 c0             	movzx  eax,al
c0022a65:	c3                   	ret    

c0022a66 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a66:	55                   	push   ebp
c0022a67:	57                   	push   edi
c0022a68:	56                   	push   esi
c0022a69:	53                   	push   ebx
c0022a6a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a6f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a74:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a79:	6a 0a                	push   0xa
c0022a7b:	56                   	push   esi
c0022a7c:	55                   	push   ebp
c0022a7d:	57                   	push   edi
c0022a7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a82:	e8 51 ff ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a87:	6a 0a                	push   0xa
c0022a89:	89 c3                	mov    ebx,eax
c0022a8b:	56                   	push   esi
c0022a8c:	0f b6 db             	movzx  ebx,bl
c0022a8f:	55                   	push   ebp
c0022a90:	57                   	push   edi
c0022a91:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a95:	e8 3e ff ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a9a:	83 c4 28             	add    esp,0x28
c0022a9d:	25 00 ff 00 00       	and    eax,0xff00
c0022aa2:	09 d8                	or     eax,ebx
c0022aa4:	5b                   	pop    ebx
c0022aa5:	5e                   	pop    esi
c0022aa6:	5f                   	pop    edi
c0022aa7:	5d                   	pop    ebp
c0022aa8:	c3                   	ret    
c0022aa9:	90                   	nop

c0022aaa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022aaa:	6a 08                	push   0x8
c0022aac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab1:	50                   	push   eax
c0022ab2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab7:	50                   	push   eax
c0022ab8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abd:	50                   	push   eax
c0022abe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac2:	e8 11 ff ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac7:	83 c4 14             	add    esp,0x14
c0022aca:	0f b6 c4             	movzx  eax,ah
c0022acd:	c3                   	ret    

c0022ace <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022ace:	6a 08                	push   0x8
c0022ad0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad5:	50                   	push   eax
c0022ad6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022adb:	50                   	push   eax
c0022adc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae1:	50                   	push   eax
c0022ae2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ae6:	e8 ed fe ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aeb:	83 c4 14             	add    esp,0x14
c0022aee:	c3                   	ret    
c0022aef:	90                   	nop

c0022af0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022af0:	6a 3c                	push   0x3c
c0022af2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af7:	50                   	push   eax
c0022af8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022afd:	50                   	push   eax
c0022afe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b03:	50                   	push   eax
c0022b04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b08:	e8 cb fe ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0d:	83 c4 14             	add    esp,0x14
c0022b10:	c3                   	ret    
c0022b11:	90                   	nop

c0022b12 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b12:	6a 18                	push   0x18
c0022b14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b19:	50                   	push   eax
c0022b1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1f:	50                   	push   eax
c0022b20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b25:	50                   	push   eax
c0022b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b2a:	e8 a9 fe ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b2f:	83 c4 14             	add    esp,0x14
c0022b32:	0f b6 c4             	movzx  eax,ah
c0022b35:	c3                   	ret    

c0022b36 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b36:	55                   	push   ebp
c0022b37:	57                   	push   edi
c0022b38:	56                   	push   esi
c0022b39:	53                   	push   ebx
c0022b3a:	50                   	push   eax
c0022b3b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b3f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b44:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b49:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b4e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b55:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b58:	83 c3 10             	add    ebx,0x10
c0022b5b:	0f b6 c0             	movzx  eax,al
c0022b5e:	0f b6 db             	movzx  ebx,bl
c0022b61:	50                   	push   eax
c0022b62:	51                   	push   ecx
c0022b63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b67:	57                   	push   edi
c0022b68:	55                   	push   ebp
c0022b69:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b6d:	e8 66 fe ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b72:	53                   	push   ebx
c0022b73:	89 c6                	mov    esi,eax
c0022b75:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b79:	c1 e6 10             	shl    esi,0x10
c0022b7c:	51                   	push   ecx
c0022b7d:	57                   	push   edi
c0022b7e:	55                   	push   ebp
c0022b7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b83:	e8 50 fe ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b88:	83 c4 2c             	add    esp,0x2c
c0022b8b:	0f b7 c0             	movzx  eax,ax
c0022b8e:	5b                   	pop    ebx
c0022b8f:	09 f0                	or     eax,esi
c0022b91:	5e                   	pop    esi
c0022b92:	5f                   	pop    edi
c0022b93:	5d                   	pop    ebp
c0022b94:	c3                   	ret    
c0022b95:	90                   	nop

c0022b96 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b96:	53                   	push   ebx
c0022b97:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b9c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022ba1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ba5:	c1 e1 10             	shl    ecx,0x10
c0022ba8:	25 fc 00 00 00       	and    eax,0xfc
c0022bad:	09 c1                	or     ecx,eax
c0022baf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bb4:	c1 e0 08             	shl    eax,0x8
c0022bb7:	09 c1                	or     ecx,eax
c0022bb9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022bbe:	c1 e0 0b             	shl    eax,0xb
c0022bc1:	09 c1                	or     ecx,eax
c0022bc3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022bc9:	89 c8                	mov    eax,ecx
c0022bcb:	ef                   	out    dx,eax
c0022bcc:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bd1:	ed                   	in     eax,dx
c0022bd2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022bd7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022bdc:	74 0a                	je     c0022be8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022bde:	0f b7 d8             	movzx  ebx,ax
c0022be1:	89 d0                	mov    eax,edx
c0022be3:	c1 e0 10             	shl    eax,0x10
c0022be6:	eb 05                	jmp    c0022bed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022be8:	66 31 c0             	xor    ax,ax
c0022beb:	89 d3                	mov    ebx,edx
c0022bed:	09 c3                	or     ebx,eax
c0022bef:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bf4:	89 c8                	mov    eax,ecx
c0022bf6:	ef                   	out    dx,eax
c0022bf7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bfc:	89 d8                	mov    eax,ebx
c0022bfe:	ef                   	out    dx,eax
c0022bff:	5b                   	pop    ebx
c0022c00:	c3                   	ret    
c0022c01:	90                   	nop

c0022c02 <PCI::checkBus(unsigned char)>:
c0022c02:	56                   	push   esi
c0022c03:	53                   	push   ebx
c0022c04:	31 db                	xor    ebx,ebx
c0022c06:	51                   	push   ecx
c0022c07:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c0c:	52                   	push   edx
c0022c0d:	53                   	push   ebx
c0022c0e:	43                   	inc    ebx
c0022c0f:	56                   	push   esi
c0022c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c14:	e8 2b 03 00 00       	call   c0022f44 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c19:	83 c4 10             	add    esp,0x10
c0022c1c:	83 fb 20             	cmp    ebx,0x20
c0022c1f:	75 eb                	jne    c0022c0c <PCI::checkBus(unsigned char)+0xa>
c0022c21:	58                   	pop    eax
c0022c22:	5b                   	pop    ebx
c0022c23:	5e                   	pop    esi
c0022c24:	c3                   	ret    
c0022c25:	90                   	nop

c0022c26 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c26:	55                   	push   ebp
c0022c27:	57                   	push   edi
c0022c28:	56                   	push   esi
c0022c29:	53                   	push   ebx
c0022c2a:	83 ec 1c             	sub    esp,0x1c
c0022c2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c31:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c37:	0f 84 52 01 00 00    	je     c0022d8f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c3d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c41:	66 81 f9 06 04       	cmp    cx,0x406
c0022c46:	75 2c                	jne    c0022c74 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c48:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c4d:	50                   	push   eax
c0022c4e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c53:	50                   	push   eax
c0022c54:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c59:	50                   	push   eax
c0022c5a:	56                   	push   esi
c0022c5b:	e8 b2 fe ff ff       	call   c0022b12 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c60:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c64:	0f b6 c0             	movzx  eax,al
c0022c67:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c6b:	83 c4 2c             	add    esp,0x2c
c0022c6e:	5b                   	pop    ebx
c0022c6f:	5e                   	pop    esi
c0022c70:	5f                   	pop    edi
c0022c71:	5d                   	pop    ebp
c0022c72:	eb 8e                	jmp    c0022c02 <PCI::checkBus(unsigned char)>
c0022c74:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c78:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c82:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c86:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c8a:	88 d3                	mov    bl,dl
c0022c8c:	85 c0                	test   eax,eax
c0022c8e:	74 33                	je     c0022cc3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c90:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c93:	85 d2                	test   edx,edx
c0022c95:	74 28                	je     c0022cbf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c97:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c9d:	31 ef                	xor    edi,ebp
c0022c9f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022ca5:	75 18                	jne    c0022cbf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ca7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022cab:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022cb1:	75 0c                	jne    c0022cbf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cb3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cb9:	0f 84 d0 00 00 00    	je     c0022d8f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cc1:	eb c9                	jmp    c0022c8c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022cc3:	66 81 f9 01 06       	cmp    cx,0x601
c0022cc8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022ccc:	75 19                	jne    c0022ce7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022cce:	83 ec 0c             	sub    esp,0xc
c0022cd1:	68 64 01 00 00       	push   0x164
c0022cd6:	e8 65 cb fe ff       	call   c000f840 <malloc>
c0022cdb:	89 c5                	mov    ebp,eax
c0022cdd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ce0:	e8 95 0f 00 00       	call   c0023c7a <SATABus::SATABus()>
c0022ce5:	eb 1e                	jmp    c0022d05 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022ce7:	66 81 f9 01 01       	cmp    cx,0x101
c0022cec:	75 60                	jne    c0022d4e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022cee:	83 ec 0c             	sub    esp,0xc
c0022cf1:	68 70 02 00 00       	push   0x270
c0022cf6:	e8 45 cb fe ff       	call   c000f840 <malloc>
c0022cfb:	89 c5                	mov    ebp,eax
c0022cfd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d00:	e8 03 03 00 00       	call   c0023008 <IDE::IDE()>
c0022d05:	58                   	pop    eax
c0022d06:	5a                   	pop    edx
c0022d07:	55                   	push   ebp
c0022d08:	56                   	push   esi
c0022d09:	e8 96 16 ff ff       	call   c00143a4 <Device::addChild(Device*)>
c0022d0e:	83 ec 1c             	sub    esp,0x1c
c0022d11:	b9 09 00 00 00       	mov    ecx,0x9
c0022d16:	fc                   	cld    
c0022d17:	89 e7                	mov    edi,esp
c0022d19:	89 de                	mov    esi,ebx
c0022d1b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d1d:	55                   	push   ebp
c0022d1e:	e8 8b 15 ff ff       	call   c00142ae <Device::preOpenPCI(PCIDeviceInfo)>
c0022d23:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d26:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d2a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d32:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d3a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d45:	83 c4 4c             	add    esp,0x4c
c0022d48:	5b                   	pop    ebx
c0022d49:	5e                   	pop    esi
c0022d4a:	5f                   	pop    edi
c0022d4b:	5d                   	pop    ebp
c0022d4c:	ff e0                	jmp    eax
c0022d4e:	83 ec 0c             	sub    esp,0xc
c0022d51:	68 58 01 00 00       	push   0x158
c0022d56:	e8 e5 ca fe ff       	call   c000f840 <malloc>
c0022d5b:	89 c5                	mov    ebp,eax
c0022d5d:	58                   	pop    eax
c0022d5e:	5a                   	pop    edx
c0022d5f:	68 58 cc 02 c0       	push   0xc002cc58
c0022d64:	55                   	push   ebp
c0022d65:	e8 30 19 ff ff       	call   c001469a <DriverlessDevice::DriverlessDevice(char const*)>
c0022d6a:	59                   	pop    ecx
c0022d6b:	5f                   	pop    edi
c0022d6c:	55                   	push   ebp
c0022d6d:	56                   	push   esi
c0022d6e:	e8 31 16 ff ff       	call   c00143a4 <Device::addChild(Device*)>
c0022d73:	b9 09 00 00 00       	mov    ecx,0x9
c0022d78:	fc                   	cld    
c0022d79:	89 df                	mov    edi,ebx
c0022d7b:	89 de                	mov    esi,ebx
c0022d7d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d7f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d83:	83 c4 2c             	add    esp,0x2c
c0022d86:	5b                   	pop    ebx
c0022d87:	5e                   	pop    esi
c0022d88:	5f                   	pop    edi
c0022d89:	5d                   	pop    ebp
c0022d8a:	e9 1f 15 ff ff       	jmp    c00142ae <Device::preOpenPCI(PCIDeviceInfo)>
c0022d8f:	83 c4 1c             	add    esp,0x1c
c0022d92:	5b                   	pop    ebx
c0022d93:	5e                   	pop    esi
c0022d94:	5f                   	pop    edi
c0022d95:	5d                   	pop    ebp
c0022d96:	c3                   	ret    
c0022d97:	90                   	nop

c0022d98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d98:	55                   	push   ebp
c0022d99:	57                   	push   edi
c0022d9a:	56                   	push   esi
c0022d9b:	53                   	push   ebx
c0022d9c:	83 ec 5c             	sub    esp,0x5c
c0022d9f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022da3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022da7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022dab:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022db0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022db4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022db8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022dbd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022dc1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022dc6:	6a 0c                	push   0xc
c0022dc8:	55                   	push   ebp
c0022dc9:	53                   	push   ebx
c0022dca:	57                   	push   edi
c0022dcb:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022dd2:	e8 01 fc ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dd7:	55                   	push   ebp
c0022dd8:	53                   	push   ebx
c0022dd9:	57                   	push   edi
c0022dda:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022de1:	e8 80 fc ff ff       	call   c0022a66 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022de6:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022deb:	83 c4 24             	add    esp,0x24
c0022dee:	55                   	push   ebp
c0022def:	53                   	push   ebx
c0022df0:	57                   	push   edi
c0022df1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022df5:	e8 f6 fc ff ff       	call   c0022af0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022dfa:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022dfe:	6a 3c                	push   0x3c
c0022e00:	55                   	push   ebp
c0022e01:	53                   	push   ebx
c0022e02:	57                   	push   edi
c0022e03:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e0a:	e8 c9 fb ff ff       	call   c00229d8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e0f:	0f b6 c4             	movzx  eax,ah
c0022e12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e16:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e1a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e1e:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0022e23:	83 c4 24             	add    esp,0x24
c0022e26:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e2c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e33:	74 6c                	je     c0022ea1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e35:	31 f6                	xor    esi,esi
c0022e37:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c0022e3d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e43:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e49:	7e 56                	jle    c0022ea1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e4b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e4e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e55:	39 cb                	cmp    ebx,ecx
c0022e57:	75 45                	jne    c0022e9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e59:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e60:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e64:	75 38                	jne    c0022e9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e66:	83 ec 0c             	sub    esp,0xc
c0022e69:	68 72 cc 02 c0       	push   0xc002cc72
c0022e6e:	e8 0a 01 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0022e73:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c0022e79:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e7f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e87:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e8b:	52                   	push   edx
c0022e8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e90:	53                   	push   ebx
c0022e91:	68 97 cc 02 c0       	push   0xc002cc97
c0022e96:	e8 e2 00 ff ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0022e9b:	83 c4 20             	add    esp,0x20
c0022e9e:	46                   	inc    esi
c0022e9f:	eb 96                	jmp    c0022e37 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ea1:	31 d2                	xor    edx,edx
c0022ea3:	83 ec 0c             	sub    esp,0xc
c0022ea6:	55                   	push   ebp
c0022ea7:	53                   	push   ebx
c0022ea8:	57                   	push   edi
c0022ea9:	52                   	push   edx
c0022eaa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022eae:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022eb5:	e8 7c fc ff ff       	call   c0022b36 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022eba:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022ebe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022ec2:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022ec6:	42                   	inc    edx
c0022ec7:	83 c4 20             	add    esp,0x20
c0022eca:	83 fa 06             	cmp    edx,0x6
c0022ecd:	75 d4                	jne    c0022ea3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022ecf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022ed3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022ed7:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022edb:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022edf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022ee3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022ee7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022eec:	86 e0                	xchg   al,ah
c0022eee:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022ef3:	55                   	push   ebp
c0022ef4:	53                   	push   ebx
c0022ef5:	57                   	push   edi
c0022ef6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022efa:	e8 ab fb ff ff       	call   c0022aaa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022eff:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f03:	55                   	push   ebp
c0022f04:	53                   	push   ebx
c0022f05:	57                   	push   edi
c0022f06:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f0d:	e8 0e fb ff ff       	call   c0022a20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f12:	83 ec 0c             	sub    esp,0xc
c0022f15:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f1a:	b9 09 00 00 00       	mov    ecx,0x9
c0022f1f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f23:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f27:	fc                   	cld    
c0022f28:	89 e7                	mov    edi,esp
c0022f2a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f2c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f33:	e8 ee fc ff ff       	call   c0022c26 <PCI::foundDevice(PCIDeviceInfo)>
c0022f38:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f3e:	5b                   	pop    ebx
c0022f3f:	5e                   	pop    esi
c0022f40:	5f                   	pop    edi
c0022f41:	5d                   	pop    ebp
c0022f42:	c3                   	ret    
c0022f43:	90                   	nop

c0022f44 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f44:	55                   	push   ebp
c0022f45:	57                   	push   edi
c0022f46:	56                   	push   esi
c0022f47:	53                   	push   ebx
c0022f48:	83 ec 0c             	sub    esp,0xc
c0022f4b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f4f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f54:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f59:	6a 00                	push   0x0
c0022f5b:	56                   	push   esi
c0022f5c:	57                   	push   edi
c0022f5d:	55                   	push   ebp
c0022f5e:	e8 bd fa ff ff       	call   c0022a20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f63:	6a 00                	push   0x0
c0022f65:	56                   	push   esi
c0022f66:	57                   	push   edi
c0022f67:	55                   	push   ebp
c0022f68:	e8 2b fe ff ff       	call   c0022d98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f6d:	83 c4 20             	add    esp,0x20
c0022f70:	6a 00                	push   0x0
c0022f72:	56                   	push   esi
c0022f73:	57                   	push   edi
c0022f74:	55                   	push   ebp
c0022f75:	e8 c8 fa ff ff       	call   c0022a42 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f7a:	83 c4 10             	add    esp,0x10
c0022f7d:	84 c0                	test   al,al
c0022f7f:	79 27                	jns    c0022fa8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f81:	bb 01 00 00 00       	mov    ebx,0x1
c0022f86:	53                   	push   ebx
c0022f87:	56                   	push   esi
c0022f88:	57                   	push   edi
c0022f89:	55                   	push   ebp
c0022f8a:	e8 91 fa ff ff       	call   c0022a20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f8f:	83 c4 10             	add    esp,0x10
c0022f92:	66 40                	inc    ax
c0022f94:	74 0c                	je     c0022fa2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f96:	53                   	push   ebx
c0022f97:	56                   	push   esi
c0022f98:	57                   	push   edi
c0022f99:	55                   	push   ebp
c0022f9a:	e8 f9 fd ff ff       	call   c0022d98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f9f:	83 c4 10             	add    esp,0x10
c0022fa2:	43                   	inc    ebx
c0022fa3:	83 fb 08             	cmp    ebx,0x8
c0022fa6:	75 de                	jne    c0022f86 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fa8:	83 c4 0c             	add    esp,0xc
c0022fab:	5b                   	pop    ebx
c0022fac:	5e                   	pop    esi
c0022fad:	5f                   	pop    edi
c0022fae:	5d                   	pop    ebp
c0022faf:	c3                   	ret    

c0022fb0 <PCI::detect()>:
c0022fb0:	56                   	push   esi
c0022fb1:	53                   	push   ebx
c0022fb2:	53                   	push   ebx
c0022fb3:	31 db                	xor    ebx,ebx
c0022fb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022fb9:	6a 00                	push   0x0
c0022fbb:	6a 00                	push   0x0
c0022fbd:	6a 00                	push   0x0
c0022fbf:	56                   	push   esi
c0022fc0:	e8 7d fa ff ff       	call   c0022a42 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fc5:	83 c4 10             	add    esp,0x10
c0022fc8:	a8 80                	test   al,0x80
c0022fca:	75 21                	jne    c0022fed <PCI::detect()+0x3d>
c0022fcc:	51                   	push   ecx
c0022fcd:	51                   	push   ecx
c0022fce:	6a 00                	push   0x0
c0022fd0:	56                   	push   esi
c0022fd1:	e8 2c fc ff ff       	call   c0022c02 <PCI::checkBus(unsigned char)>
c0022fd6:	83 c4 10             	add    esp,0x10
c0022fd9:	eb 24                	jmp    c0022fff <PCI::detect()+0x4f>
c0022fdb:	52                   	push   edx
c0022fdc:	52                   	push   edx
c0022fdd:	53                   	push   ebx
c0022fde:	43                   	inc    ebx
c0022fdf:	56                   	push   esi
c0022fe0:	e8 1d fc ff ff       	call   c0022c02 <PCI::checkBus(unsigned char)>
c0022fe5:	83 c4 10             	add    esp,0x10
c0022fe8:	83 fb 08             	cmp    ebx,0x8
c0022feb:	74 12                	je     c0022fff <PCI::detect()+0x4f>
c0022fed:	53                   	push   ebx
c0022fee:	6a 00                	push   0x0
c0022ff0:	6a 00                	push   0x0
c0022ff2:	56                   	push   esi
c0022ff3:	e8 28 fa ff ff       	call   c0022a20 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ff8:	83 c4 10             	add    esp,0x10
c0022ffb:	66 40                	inc    ax
c0022ffd:	74 dc                	je     c0022fdb <PCI::detect()+0x2b>
c0022fff:	58                   	pop    eax
c0023000:	5b                   	pop    ebx
c0023001:	5e                   	pop    esi
c0023002:	c3                   	ret    
c0023003:	90                   	nop

c0023004 <IDE::close(int, int, void*)>:
c0023004:	83 c8 ff             	or     eax,0xffffffff
c0023007:	c3                   	ret    

c0023008 <IDE::IDE()>:
c0023008:	83 ec 0c             	sub    esp,0xc
c002300b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002300f:	83 ec 08             	sub    esp,0x8
c0023012:	68 e0 cc 02 c0       	push   0xc002cce0
c0023017:	50                   	push   eax
c0023018:	e8 13 17 ff ff       	call   c0014730 <HardDiskController::HardDiskController(char const*)>
c002301d:	83 c4 10             	add    esp,0x10
c0023020:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c0023025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023029:	89 10                	mov    DWORD PTR [eax],edx
c002302b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023036:	90                   	nop
c0023037:	83 c4 0c             	add    esp,0xc
c002303a:	c3                   	ret    
c002303b:	90                   	nop

c002303c <IDE::prepareInterrupt(unsigned char)>:
c002303c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023045:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002304d:	c3                   	ret    

c002304e <selectDrive(unsigned char, unsigned char)>:
c002304e:	c3                   	ret    
c002304f:	90                   	nop

c0023050 <IDE::getBase(unsigned char)>:
c0023050:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023055:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023059:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023061:	c3                   	ret    

c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023062:	55                   	push   ebp
c0023063:	57                   	push   edi
c0023064:	56                   	push   esi
c0023065:	53                   	push   ebx
c0023066:	83 ec 1c             	sub    esp,0x1c
c0023069:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002306d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023071:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023074:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023078:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002307c:	80 f9 03             	cmp    cl,0x3
c002307f:	77 51                	ja     c00230d2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023081:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023085:	0f b6 f2             	movzx  esi,dl
c0023088:	0f b6 db             	movzx  ebx,bl
c002308b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002308e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023092:	83 ca 80             	or     edx,0xffffff80
c0023095:	0f b6 d2             	movzx  edx,dl
c0023098:	52                   	push   edx
c0023099:	6a 0c                	push   0xc
c002309b:	56                   	push   esi
c002309c:	57                   	push   edi
c002309d:	e8 c0 ff ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230a2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230ab:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230af:	ee                   	out    dx,al
c00230b0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230b5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230b9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230bd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00230c1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00230c9:	83 c4 2c             	add    esp,0x2c
c00230cc:	5b                   	pop    ebx
c00230cd:	5e                   	pop    esi
c00230ce:	5f                   	pop    edi
c00230cf:	5d                   	pop    ebp
c00230d0:	eb 90                	jmp    c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230d2:	80 fb 07             	cmp    bl,0x7
c00230d5:	77 12                	ja     c00230e9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230d7:	0f b6 d2             	movzx  edx,dl
c00230da:	0f b6 db             	movzx  ebx,bl
c00230dd:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00230e5:	89 da                	mov    edx,ebx
c00230e7:	eb 2f                	jmp    c0023118 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230e9:	80 fb 0d             	cmp    bl,0xd
c00230ec:	77 13                	ja     c0023101 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00230ee:	0f b6 d2             	movzx  edx,dl
c00230f1:	0f b6 db             	movzx  ebx,bl
c00230f4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230fb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230ff:	eb 17                	jmp    c0023118 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023101:	80 fb 15             	cmp    bl,0x15
c0023104:	77 13                	ja     c0023119 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023106:	0f b6 d2             	movzx  edx,dl
c0023109:	0f b6 db             	movzx  ebx,bl
c002310c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023114:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023118:	ee                   	out    dx,al
c0023119:	83 c4 1c             	add    esp,0x1c
c002311c:	5b                   	pop    ebx
c002311d:	5e                   	pop    esi
c002311e:	5f                   	pop    edi
c002311f:	5d                   	pop    ebp
c0023120:	c3                   	ret    
c0023121:	90                   	nop

c0023122 <IDE::read(unsigned char, unsigned char)>:
c0023122:	55                   	push   ebp
c0023123:	57                   	push   edi
c0023124:	56                   	push   esi
c0023125:	53                   	push   ebx
c0023126:	83 ec 1c             	sub    esp,0x1c
c0023129:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002312d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023131:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023134:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023138:	3c 03                	cmp    al,0x3
c002313a:	77 43                	ja     c002317f <IDE::read(unsigned char, unsigned char)+0x5d>
c002313c:	0f b6 f2             	movzx  esi,dl
c002313f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023142:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023146:	83 c8 80             	or     eax,0xffffff80
c0023149:	0f b6 c0             	movzx  eax,al
c002314c:	50                   	push   eax
c002314d:	6a 0c                	push   0xc
c002314f:	56                   	push   esi
c0023150:	57                   	push   edi
c0023151:	e8 0c ff ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023156:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002315b:	0f b6 c3             	movzx  eax,bl
c002315e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023162:	ec                   	in     al,dx
c0023163:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023167:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002316c:	52                   	push   edx
c002316d:	6a 0c                	push   0xc
c002316f:	56                   	push   esi
c0023170:	57                   	push   edi
c0023171:	e8 ec fe ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023176:	83 c4 20             	add    esp,0x20
c0023179:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002317d:	eb 49                	jmp    c00231c8 <IDE::read(unsigned char, unsigned char)+0xa6>
c002317f:	80 fb 07             	cmp    bl,0x7
c0023182:	77 12                	ja     c0023196 <IDE::read(unsigned char, unsigned char)+0x74>
c0023184:	0f b6 d2             	movzx  edx,dl
c0023187:	0f b6 c3             	movzx  eax,bl
c002318a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023192:	89 c2                	mov    edx,eax
c0023194:	eb 31                	jmp    c00231c7 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023196:	80 fb 0d             	cmp    bl,0xd
c0023199:	77 13                	ja     c00231ae <IDE::read(unsigned char, unsigned char)+0x8c>
c002319b:	0f b6 d2             	movzx  edx,dl
c002319e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231a5:	0f b6 d3             	movzx  edx,bl
c00231a8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231ac:	eb 19                	jmp    c00231c7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231ae:	31 c0                	xor    eax,eax
c00231b0:	80 fb 15             	cmp    bl,0x15
c00231b3:	77 13                	ja     c00231c8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231b5:	0f b6 d2             	movzx  edx,dl
c00231b8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00231c0:	0f b6 d3             	movzx  edx,bl
c00231c3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00231c7:	ec                   	in     al,dx
c00231c8:	83 c4 1c             	add    esp,0x1c
c00231cb:	5b                   	pop    ebx
c00231cc:	5e                   	pop    esi
c00231cd:	5f                   	pop    edi
c00231ce:	5d                   	pop    ebp
c00231cf:	c3                   	ret    

c00231d0 <IDE::waitInterrupt(unsigned char)>:
c00231d0:	55                   	push   ebp
c00231d1:	57                   	push   edi
c00231d2:	56                   	push   esi
c00231d3:	53                   	push   ebx
c00231d4:	31 db                	xor    ebx,ebx
c00231d6:	83 ec 0c             	sub    esp,0xc
c00231d9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231dd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00231e2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00231ea:	89 e8                	mov    eax,ebp
c00231ec:	84 c0                	test   al,al
c00231ee:	75 34                	jne    c0023224 <IDE::waitInterrupt(unsigned char)+0x54>
c00231f0:	52                   	push   edx
c00231f1:	6a 0c                	push   0xc
c00231f3:	56                   	push   esi
c00231f4:	57                   	push   edi
c00231f5:	e8 28 ff ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c00231fa:	83 c4 10             	add    esp,0x10
c00231fd:	a8 01                	test   al,0x1
c00231ff:	75 2b                	jne    c002322c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023201:	f6 c3 04             	test   bl,0x4
c0023204:	75 16                	jne    c002321c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023206:	83 fb 32             	cmp    ebx,0x32
c0023209:	7e 11                	jle    c002321c <IDE::waitInterrupt(unsigned char)+0x4c>
c002320b:	50                   	push   eax
c002320c:	50                   	push   eax
c002320d:	6a 00                	push   0x0
c002320f:	68 80 96 98 00       	push   0x989680
c0023214:	e8 8b b1 ff ff       	call   c001e3a4 <nanoSleep(unsigned long long)>
c0023219:	83 c4 10             	add    esp,0x10
c002321c:	83 fb 3c             	cmp    ebx,0x3c
c002321f:	74 0b                	je     c002322c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023221:	43                   	inc    ebx
c0023222:	eb be                	jmp    c00231e2 <IDE::waitInterrupt(unsigned char)+0x12>
c0023224:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002322c:	83 c4 0c             	add    esp,0xc
c002322f:	89 e8                	mov    eax,ebp
c0023231:	5b                   	pop    ebx
c0023232:	5e                   	pop    esi
c0023233:	5f                   	pop    edi
c0023234:	5d                   	pop    ebp
c0023235:	c3                   	ret    

c0023236 <ideChannel0IRQHandler(regs*, void*)>:
c0023236:	83 ec 10             	sub    esp,0x10
c0023239:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002323d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023244:	6a 07                	push   0x7
c0023246:	6a 00                	push   0x0
c0023248:	50                   	push   eax
c0023249:	e8 d4 fe ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c002324e:	83 c4 1c             	add    esp,0x1c
c0023251:	c3                   	ret    

c0023252 <ideChannel1IRQHandler(regs*, void*)>:
c0023252:	83 ec 10             	sub    esp,0x10
c0023255:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023259:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023260:	6a 07                	push   0x7
c0023262:	6a 01                	push   0x1
c0023264:	50                   	push   eax
c0023265:	e8 b8 fe ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c002326a:	83 c4 1c             	add    esp,0x1c
c002326d:	c3                   	ret    

c002326e <IDE::enableIRQs(unsigned char, bool)>:
c002326e:	57                   	push   edi
c002326f:	56                   	push   esi
c0023270:	be 04 00 00 00       	mov    esi,0x4
c0023275:	53                   	push   ebx
c0023276:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002327b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002327f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023284:	0f 94 c0             	sete   al
c0023287:	d1 e0                	shl    eax,1
c0023289:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023290:	0f b6 c0             	movzx  eax,al
c0023293:	50                   	push   eax
c0023294:	6a 0c                	push   0xc
c0023296:	57                   	push   edi
c0023297:	53                   	push   ebx
c0023298:	e8 c5 fd ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002329d:	83 c4 10             	add    esp,0x10
c00232a0:	50                   	push   eax
c00232a1:	6a 0c                	push   0xc
c00232a3:	57                   	push   edi
c00232a4:	53                   	push   ebx
c00232a5:	e8 78 fe ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c00232aa:	83 c4 10             	add    esp,0x10
c00232ad:	4e                   	dec    esi
c00232ae:	75 f0                	jne    c00232a0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232b0:	5b                   	pop    ebx
c00232b1:	5e                   	pop    esi
c00232b2:	5f                   	pop    edi
c00232b3:	c3                   	ret    

c00232b4 <IDE::open(int, int, void*)>:
c00232b4:	55                   	push   ebp
c00232b5:	57                   	push   edi
c00232b6:	56                   	push   esi
c00232b7:	53                   	push   ebx
c00232b8:	83 ec 1c             	sub    esp,0x1c
c00232bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232bf:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00232c8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00232d1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232d8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00232df:	0f 85 b0 02 00 00    	jne    c0023595 <IDE::open(int, int, void*)+0x2e1>
c00232e5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00232eb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00232ef:	83 e0 7f             	and    eax,0x7f
c00232f2:	3c 05                	cmp    al,0x5
c00232f4:	74 04                	je     c00232fa <IDE::open(int, int, void*)+0x46>
c00232f6:	3c 0f                	cmp    al,0xf
c00232f8:	75 32                	jne    c002332c <IDE::open(int, int, void*)+0x78>
c00232fa:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023300:	83 e0 fc             	and    eax,0xfffffffc
c0023303:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002330a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023310:	83 e0 fc             	and    eax,0xfffffffc
c0023313:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002331a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023320:	83 e0 fc             	and    eax,0xfffffffc
c0023323:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002332a:	eb 14                	jmp    c0023340 <IDE::open(int, int, void*)+0x8c>
c002332c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023336:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023340:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023347:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002334e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023352:	89 c6                	mov    esi,eax
c0023354:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023359:	c1 e6 10             	shl    esi,0x10
c002335c:	89 e8                	mov    eax,ebp
c002335e:	89 fa                	mov    edx,edi
c0023360:	c1 e0 0b             	shl    eax,0xb
c0023363:	09 f0                	or     eax,esi
c0023365:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002336c:	c1 e6 08             	shl    esi,0x8
c002336f:	09 c6                	or     esi,eax
c0023371:	89 f0                	mov    eax,esi
c0023373:	0d 08 00 00 80       	or     eax,0x80000008
c0023378:	ef                   	out    dx,eax
c0023379:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002337e:	89 ca                	mov    edx,ecx
c0023380:	ed                   	in     eax,dx
c0023381:	c1 e8 10             	shr    eax,0x10
c0023384:	3d ff ff 00 00       	cmp    eax,0xffff
c0023389:	0f 84 f5 00 00 00    	je     c0023484 <IDE::open(int, int, void*)+0x1d0>
c002338f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023395:	89 fa                	mov    edx,edi
c0023397:	89 f0                	mov    eax,esi
c0023399:	ef                   	out    dx,eax
c002339a:	b0 fe                	mov    al,0xfe
c002339c:	89 ca                	mov    edx,ecx
c002339e:	ee                   	out    dx,al
c002339f:	89 f0                	mov    eax,esi
c00233a1:	89 fa                	mov    edx,edi
c00233a3:	ef                   	out    dx,eax
c00233a4:	89 ca                	mov    edx,ecx
c00233a6:	ed                   	in     eax,dx
c00233a7:	3c fe                	cmp    al,0xfe
c00233a9:	0f 85 a9 00 00 00    	jne    c0023458 <IDE::open(int, int, void*)+0x1a4>
c00233af:	8b 15 68 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e668
c00233b5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233bc:	74 33                	je     c00233f1 <IDE::open(int, int, void*)+0x13d>
c00233be:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00233c4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00233c8:	40                   	inc    eax
c00233c9:	83 ec 0c             	sub    esp,0xc
c00233cc:	0f b6 c0             	movzx  eax,al
c00233cf:	50                   	push   eax
c00233d0:	55                   	push   ebp
c00233d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233d5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00233db:	51                   	push   ecx
c00233dc:	e8 a7 4e ff ff       	call   c0018288 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00233e1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00233e6:	83 c4 1c             	add    esp,0x1c
c00233e9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233ef:	eb 0a                	jmp    c00233fb <IDE::open(int, int, void*)+0x147>
c00233f1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233fb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023402:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023409:	c1 e1 10             	shl    ecx,0x10
c002340c:	c1 e0 08             	shl    eax,0x8
c002340f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023414:	09 c1                	or     ecx,eax
c0023416:	89 fa                	mov    edx,edi
c0023418:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002341f:	c1 e0 0b             	shl    eax,0xb
c0023422:	09 c1                	or     ecx,eax
c0023424:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002342a:	89 c8                	mov    eax,ecx
c002342c:	ef                   	out    dx,eax
c002342d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023432:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023438:	89 f2                	mov    edx,esi
c002343a:	ee                   	out    dx,al
c002343b:	89 c8                	mov    eax,ecx
c002343d:	89 fa                	mov    edx,edi
c002343f:	ef                   	out    dx,eax
c0023440:	89 f2                	mov    edx,esi
c0023442:	ed                   	in     eax,dx
c0023443:	0f b6 c0             	movzx  eax,al
c0023446:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002344c:	74 46                	je     c0023494 <IDE::open(int, int, void*)+0x1e0>
c002344e:	83 ec 0c             	sub    esp,0xc
c0023451:	68 f8 cc 02 c0       	push   0xc002ccf8
c0023456:	eb 34                	jmp    c002348c <IDE::open(int, int, void*)+0x1d8>
c0023458:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023461:	75 17                	jne    c002347a <IDE::open(int, int, void*)+0x1c6>
c0023463:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023468:	74 07                	je     c0023471 <IDE::open(int, int, void*)+0x1bd>
c002346a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002346f:	75 09                	jne    c002347a <IDE::open(int, int, void*)+0x1c6>
c0023471:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023478:	eb 1a                	jmp    c0023494 <IDE::open(int, int, void*)+0x1e0>
c002347a:	83 ec 0c             	sub    esp,0xc
c002347d:	68 00 cd 02 c0       	push   0xc002cd00
c0023482:	eb 08                	jmp    c002348c <IDE::open(int, int, void*)+0x1d8>
c0023484:	83 ec 0c             	sub    esp,0xc
c0023487:	68 31 cd 02 c0       	push   0xc002cd31
c002348c:	e8 9e 71 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0023491:	83 c4 10             	add    esp,0x10
c0023494:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002349b:	79 1a                	jns    c00234b7 <IDE::open(int, int, void*)+0x203>
c002349d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234a3:	83 e0 fc             	and    eax,0xfffffffc
c00234a6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234ad:	83 c0 08             	add    eax,0x8
c00234b0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234b7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234bd:	89 c2                	mov    edx,eax
c00234bf:	83 e2 0f             	and    edx,0xf
c00234c2:	66 83 fa 08          	cmp    dx,0x8
c00234c6:	75 0a                	jne    c00234d2 <IDE::open(int, int, void*)+0x21e>
c00234c8:	83 e8 02             	sub    eax,0x2
c00234cb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234d2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234d8:	89 c2                	mov    edx,eax
c00234da:	83 e2 0f             	and    edx,0xf
c00234dd:	66 83 fa 08          	cmp    dx,0x8
c00234e1:	75 0a                	jne    c00234ed <IDE::open(int, int, void*)+0x239>
c00234e3:	83 e8 02             	sub    eax,0x2
c00234e6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234ed:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00234f4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234fb:	89 d0                	mov    eax,edx
c00234fd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023500:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023504:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023508:	8d 4a 01             	lea    ecx,[edx+0x1]
c002350b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023510:	0f b6 c9             	movzx  ecx,cl
c0023513:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002351a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002351d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023521:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023525:	8d 50 02             	lea    edx,[eax+0x2]
c0023528:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002352d:	0f b6 d2             	movzx  edx,dl
c0023530:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023536:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023539:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002353d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023541:	8d 48 03             	lea    ecx,[eax+0x3]
c0023544:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023549:	0f b6 c9             	movzx  ecx,cl
c002354c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023552:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023555:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023559:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002355d:	8d 50 04             	lea    edx,[eax+0x4]
c0023560:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023566:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002356b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023572:	66 85 f6             	test   si,si
c0023575:	74 3e                	je     c00235b5 <IDE::open(int, int, void*)+0x301>
c0023577:	0f b6 d2             	movzx  edx,dl
c002357a:	83 c0 05             	add    eax,0x5
c002357d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023580:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023584:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023588:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002358e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023593:	eb 20                	jmp    c00235b5 <IDE::open(int, int, void*)+0x301>
c0023595:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002359f:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00235a9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235b0:	e9 02 ff ff ff       	jmp    c00234b7 <IDE::open(int, int, void*)+0x203>
c00235b5:	52                   	push   edx
c00235b6:	52                   	push   edx
c00235b7:	6a 00                	push   0x0
c00235b9:	53                   	push   ebx
c00235ba:	e8 7d fa ff ff       	call   c002303c <IDE::prepareInterrupt(unsigned char)>
c00235bf:	59                   	pop    ecx
c00235c0:	5e                   	pop    esi
c00235c1:	6a 01                	push   0x1
c00235c3:	53                   	push   ebx
c00235c4:	e8 73 fa ff ff       	call   c002303c <IDE::prepareInterrupt(unsigned char)>
c00235c9:	83 c4 0c             	add    esp,0xc
c00235cc:	6a 00                	push   0x0
c00235ce:	6a 00                	push   0x0
c00235d0:	53                   	push   ebx
c00235d1:	e8 98 fc ff ff       	call   c002326e <IDE::enableIRQs(unsigned char, bool)>
c00235d6:	83 c4 0c             	add    esp,0xc
c00235d9:	6a 00                	push   0x0
c00235db:	6a 01                	push   0x1
c00235dd:	53                   	push   ebx
c00235de:	e8 8b fc ff ff       	call   c002326e <IDE::enableIRQs(unsigned char, bool)>
c00235e3:	83 c4 10             	add    esp,0x10
c00235e6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00235ed:	74 40                	je     c002362f <IDE::open(int, int, void*)+0x37b>
c00235ef:	83 ec 0c             	sub    esp,0xc
c00235f2:	68 5b cd 02 c0       	push   0xc002cd5b
c00235f7:	e8 81 f9 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00235fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235ff:	6a 01                	push   0x1
c0023601:	68 36 32 02 c0       	push   0xc0023236
c0023606:	6a 0e                	push   0xe
c0023608:	53                   	push   ebx
c0023609:	e8 1a 0d ff ff       	call   c0014328 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002360e:	83 c4 14             	add    esp,0x14
c0023611:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023617:	53                   	push   ebx
c0023618:	6a 01                	push   0x1
c002361a:	68 52 32 02 c0       	push   0xc0023252
c002361f:	6a 0f                	push   0xf
c0023621:	53                   	push   ebx
c0023622:	e8 01 0d ff ff       	call   c0014328 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023627:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002362d:	eb 4a                	jmp    c0023679 <IDE::open(int, int, void*)+0x3c5>
c002362f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023639:	50                   	push   eax
c002363a:	6a 0f                	push   0xf
c002363c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023642:	68 77 cd 02 c0       	push   0xc002cd77
c0023647:	e8 31 f9 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c002364c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002364f:	6a 00                	push   0x0
c0023651:	68 36 32 02 c0       	push   0xc0023236
c0023656:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002365c:	53                   	push   ebx
c002365d:	e8 c6 0c ff ff       	call   c0014328 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023662:	83 c4 14             	add    esp,0x14
c0023665:	53                   	push   ebx
c0023666:	6a 00                	push   0x0
c0023668:	68 52 32 02 c0       	push   0xc0023252
c002366d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023673:	53                   	push   ebx
c0023674:	e8 af 0c ff ff       	call   c0014328 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023679:	8b 03                	mov    eax,DWORD PTR [ebx]
c002367b:	83 c4 20             	add    esp,0x20
c002367e:	83 ec 0c             	sub    esp,0xc
c0023681:	53                   	push   ebx
c0023682:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023685:	83 c4 0c             	add    esp,0xc
c0023688:	6a 07                	push   0x7
c002368a:	6a 00                	push   0x0
c002368c:	53                   	push   ebx
c002368d:	e8 90 fa ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023692:	83 c4 0c             	add    esp,0xc
c0023695:	6a 07                	push   0x7
c0023697:	6a 01                	push   0x1
c0023699:	53                   	push   ebx
c002369a:	e8 83 fa ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c002369f:	83 c4 0c             	add    esp,0xc
c00236a2:	6a 01                	push   0x1
c00236a4:	6a 00                	push   0x0
c00236a6:	53                   	push   ebx
c00236a7:	e8 c2 fb ff ff       	call   c002326e <IDE::enableIRQs(unsigned char, bool)>
c00236ac:	83 c4 0c             	add    esp,0xc
c00236af:	6a 01                	push   0x1
c00236b1:	6a 01                	push   0x1
c00236b3:	53                   	push   ebx
c00236b4:	e8 b5 fb ff ff       	call   c002326e <IDE::enableIRQs(unsigned char, bool)>
c00236b9:	83 c4 2c             	add    esp,0x2c
c00236bc:	31 c0                	xor    eax,eax
c00236be:	5b                   	pop    ebx
c00236bf:	5e                   	pop    esi
c00236c0:	5f                   	pop    edi
c00236c1:	5d                   	pop    ebp
c00236c2:	c3                   	ret    
c00236c3:	90                   	nop

c00236c4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00236c4:	55                   	push   ebp
c00236c5:	57                   	push   edi
c00236c6:	56                   	push   esi
c00236c7:	53                   	push   ebx
c00236c8:	83 ec 1c             	sub    esp,0x1c
c00236cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236d3:	8d 50 f8             	lea    edx,[eax-0x8]
c00236d6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236da:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236de:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236e2:	80 fa 03             	cmp    dl,0x3
c00236e5:	77 5d                	ja     c0023744 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00236e7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236ef:	0f b6 db             	movzx  ebx,bl
c00236f2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00236f5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236f9:	83 ca 80             	or     edx,0xffffff80
c00236fc:	0f b6 d2             	movzx  edx,dl
c00236ff:	52                   	push   edx
c0023700:	6a 0c                	push   0xc
c0023702:	53                   	push   ebx
c0023703:	56                   	push   esi
c0023704:	e8 59 f9 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023709:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002370e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023712:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023716:	0f b6 c0             	movzx  eax,al
c0023719:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002371d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002371f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023724:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023728:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002372c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023730:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023738:	83 c4 2c             	add    esp,0x2c
c002373b:	5b                   	pop    ebx
c002373c:	5e                   	pop    esi
c002373d:	5f                   	pop    edi
c002373e:	5d                   	pop    ebp
c002373f:	e9 1e f9 ff ff       	jmp    c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023744:	3c 07                	cmp    al,0x7
c0023746:	77 10                	ja     c0023758 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023748:	0f b6 db             	movzx  ebx,bl
c002374b:	0f b6 d0             	movzx  edx,al
c002374e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023756:	eb 2d                	jmp    c0023785 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023758:	3c 0d                	cmp    al,0xd
c002375a:	77 13                	ja     c002376f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002375c:	0f b6 db             	movzx  ebx,bl
c002375f:	0f b6 c0             	movzx  eax,al
c0023762:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023769:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002376d:	eb 16                	jmp    c0023785 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002376f:	3c 15                	cmp    al,0x15
c0023771:	77 14                	ja     c0023787 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023773:	0f b6 db             	movzx  ebx,bl
c0023776:	0f b6 c0             	movzx  eax,al
c0023779:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023781:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023785:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023787:	83 c4 1c             	add    esp,0x1c
c002378a:	5b                   	pop    ebx
c002378b:	5e                   	pop    esi
c002378c:	5f                   	pop    edi
c002378d:	5d                   	pop    ebp
c002378e:	c3                   	ret    
c002378f:	90                   	nop

c0023790 <IDE::detect()>:
c0023790:	55                   	push   ebp
c0023791:	57                   	push   edi
c0023792:	56                   	push   esi
c0023793:	53                   	push   ebx
c0023794:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002379a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237a1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237a8:	0f 85 be 02 00 00    	jne    c0023a6c <IDE::detect()+0x2dc>
c00237ae:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237b5:	31 f6                	xor    esi,esi
c00237b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237bf:	31 ed                	xor    ebp,ebp
c00237c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237c5:	c1 e0 06             	shl    eax,0x6
c00237c8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00237d0:	89 e8                	mov    eax,ebp
c00237d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237d6:	c1 e0 04             	shl    eax,0x4
c00237d9:	83 c8 a0             	or     eax,0xffffffa0
c00237dc:	0f b6 c0             	movzx  eax,al
c00237df:	50                   	push   eax
c00237e0:	6a 06                	push   0x6
c00237e2:	56                   	push   esi
c00237e3:	53                   	push   ebx
c00237e4:	e8 79 f8 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237e9:	83 c4 0c             	add    esp,0xc
c00237ec:	6a 0c                	push   0xc
c00237ee:	56                   	push   esi
c00237ef:	53                   	push   ebx
c00237f0:	e8 2d f9 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c00237f5:	83 c4 0c             	add    esp,0xc
c00237f8:	6a 0c                	push   0xc
c00237fa:	56                   	push   esi
c00237fb:	53                   	push   ebx
c00237fc:	e8 21 f9 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023801:	83 c4 0c             	add    esp,0xc
c0023804:	6a 0c                	push   0xc
c0023806:	56                   	push   esi
c0023807:	53                   	push   ebx
c0023808:	e8 15 f9 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c002380d:	83 c4 0c             	add    esp,0xc
c0023810:	6a 0c                	push   0xc
c0023812:	56                   	push   esi
c0023813:	53                   	push   ebx
c0023814:	e8 09 f9 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023819:	68 ec 00 00 00       	push   0xec
c002381e:	6a 07                	push   0x7
c0023820:	56                   	push   esi
c0023821:	53                   	push   ebx
c0023822:	e8 3b f8 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023827:	83 c4 1c             	add    esp,0x1c
c002382a:	6a 0c                	push   0xc
c002382c:	56                   	push   esi
c002382d:	53                   	push   ebx
c002382e:	e8 ef f8 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023833:	83 c4 0c             	add    esp,0xc
c0023836:	6a 0c                	push   0xc
c0023838:	56                   	push   esi
c0023839:	53                   	push   ebx
c002383a:	e8 e3 f8 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c002383f:	83 c4 0c             	add    esp,0xc
c0023842:	6a 0c                	push   0xc
c0023844:	56                   	push   esi
c0023845:	53                   	push   ebx
c0023846:	e8 d7 f8 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c002384b:	83 c4 0c             	add    esp,0xc
c002384e:	6a 0c                	push   0xc
c0023850:	56                   	push   esi
c0023851:	53                   	push   ebx
c0023852:	e8 cb f8 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023857:	83 c4 0c             	add    esp,0xc
c002385a:	6a 0c                	push   0xc
c002385c:	56                   	push   esi
c002385d:	53                   	push   ebx
c002385e:	e8 bf f8 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023863:	83 c4 10             	add    esp,0x10
c0023866:	84 c0                	test   al,al
c0023868:	0f 84 8b 01 00 00    	je     c00239f9 <IDE::detect()+0x269>
c002386e:	31 ff                	xor    edi,edi
c0023870:	50                   	push   eax
c0023871:	6a 0c                	push   0xc
c0023873:	56                   	push   esi
c0023874:	53                   	push   ebx
c0023875:	e8 a8 f8 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c002387a:	83 c4 10             	add    esp,0x10
c002387d:	a8 01                	test   al,0x1
c002387f:	0f 85 8e 01 00 00    	jne    c0023a13 <IDE::detect()+0x283>
c0023885:	84 c0                	test   al,al
c0023887:	78 04                	js     c002388d <IDE::detect()+0xfd>
c0023889:	a8 08                	test   al,0x8
c002388b:	75 27                	jne    c00238b4 <IDE::detect()+0x124>
c002388d:	47                   	inc    edi
c002388e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023894:	7e da                	jle    c0023870 <IDE::detect()+0xe0>
c0023896:	50                   	push   eax
c0023897:	50                   	push   eax
c0023898:	6a 00                	push   0x0
c002389a:	68 40 4b 4c 00       	push   0x4c4b40
c002389f:	e8 00 ab ff ff       	call   c001e3a4 <nanoSleep(unsigned long long)>
c00238a4:	83 c4 10             	add    esp,0x10
c00238a7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238ad:	75 c1                	jne    c0023870 <IDE::detect()+0xe0>
c00238af:	e9 5f 01 00 00       	jmp    c0023a13 <IDE::detect()+0x283>
c00238b4:	31 c9                	xor    ecx,ecx
c00238b6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238ba:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238be:	83 ec 0c             	sub    esp,0xc
c00238c1:	68 80 00 00 00       	push   0x80
c00238c6:	57                   	push   edi
c00238c7:	6a 00                	push   0x0
c00238c9:	56                   	push   esi
c00238ca:	53                   	push   ebx
c00238cb:	e8 f4 fd ff ff       	call   c00236c4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00238d0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238d9:	89 d1                	mov    ecx,edx
c00238db:	c1 e0 06             	shl    eax,0x6
c00238de:	01 d8                	add    eax,ebx
c00238e0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00238e7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00238ee:	89 f2                	mov    edx,esi
c00238f0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00238f6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238fa:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023900:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023904:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002390b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023913:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002391a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023922:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023928:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002392f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023935:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023939:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002393d:	83 c4 20             	add    esp,0x20
c0023940:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023943:	83 c0 02             	add    eax,0x2
c0023946:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002394c:	83 c7 02             	add    edi,0x2
c002394f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023952:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023958:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002395c:	75 e2                	jne    c0023940 <IDE::detect()+0x1b0>
c002395e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023962:	c1 e0 06             	shl    eax,0x6
c0023965:	01 d8                	add    eax,ebx
c0023967:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002396d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023974:	66 c1 ea 09          	shr    dx,0x9
c0023978:	83 e2 01             	and    edx,0x1
c002397b:	84 c9                	test   cl,cl
c002397d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023983:	75 2f                	jne    c00239b4 <IDE::detect()+0x224>
c0023985:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002398b:	85 c0                	test   eax,eax
c002398d:	74 66                	je     c00239f5 <IDE::detect()+0x265>
c002398f:	50                   	push   eax
c0023990:	55                   	push   ebp
c0023991:	56                   	push   esi
c0023992:	68 93 cd 02 c0       	push   0xc002cd93
c0023997:	e8 e1 f5 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c002399c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00239a3:	e8 98 be fe ff       	call   c000f840 <malloc>
c00239a8:	89 c7                	mov    edi,eax
c00239aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00239ad:	e8 78 06 00 00       	call   c002402a <ATA::ATA()>
c00239b2:	eb 28                	jmp    c00239dc <IDE::detect()+0x24c>
c00239b4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00239ba:	55                   	push   ebp
c00239bb:	56                   	push   esi
c00239bc:	68 c2 cd 02 c0       	push   0xc002cdc2
c00239c1:	e8 b7 f5 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00239c6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00239cd:	e8 6e be fe ff       	call   c000f840 <malloc>
c00239d2:	89 c7                	mov    edi,eax
c00239d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00239d7:	e8 8e 0c 00 00       	call   c002466a <ATAPI::ATAPI()>
c00239dc:	5a                   	pop    edx
c00239dd:	59                   	pop    ecx
c00239de:	57                   	push   edi
c00239df:	53                   	push   ebx
c00239e0:	e8 bf 09 ff ff       	call   c00143a4 <Device::addChild(Device*)>
c00239e5:	8b 07                	mov    eax,DWORD PTR [edi]
c00239e7:	53                   	push   ebx
c00239e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239ec:	6a 00                	push   0x0
c00239ee:	57                   	push   edi
c00239ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239f2:	83 c4 20             	add    esp,0x20
c00239f5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239f9:	4d                   	dec    ebp
c00239fa:	74 0a                	je     c0023a06 <IDE::detect()+0x276>
c00239fc:	bd 01 00 00 00       	mov    ebp,0x1
c0023a01:	e9 bb fd ff ff       	jmp    c00237c1 <IDE::detect()+0x31>
c0023a06:	4e                   	dec    esi
c0023a07:	74 63                	je     c0023a6c <IDE::detect()+0x2dc>
c0023a09:	be 01 00 00 00       	mov    esi,0x1
c0023a0e:	e9 ac fd ff ff       	jmp    c00237bf <IDE::detect()+0x2f>
c0023a13:	50                   	push   eax
c0023a14:	6a 04                	push   0x4
c0023a16:	56                   	push   esi
c0023a17:	53                   	push   ebx
c0023a18:	e8 05 f7 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023a1d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a21:	83 c4 0c             	add    esp,0xc
c0023a24:	6a 05                	push   0x5
c0023a26:	56                   	push   esi
c0023a27:	53                   	push   ebx
c0023a28:	e8 f5 f6 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023a2d:	83 c4 10             	add    esp,0x10
c0023a30:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a34:	80 fa 14             	cmp    dl,0x14
c0023a37:	75 04                	jne    c0023a3d <IDE::detect()+0x2ad>
c0023a39:	3c eb                	cmp    al,0xeb
c0023a3b:	eb 07                	jmp    c0023a44 <IDE::detect()+0x2b4>
c0023a3d:	3c 96                	cmp    al,0x96
c0023a3f:	75 b8                	jne    c00239f9 <IDE::detect()+0x269>
c0023a41:	80 fa 69             	cmp    dl,0x69
c0023a44:	75 b3                	jne    c00239f9 <IDE::detect()+0x269>
c0023a46:	68 a1 00 00 00       	push   0xa1
c0023a4b:	6a 07                	push   0x7
c0023a4d:	56                   	push   esi
c0023a4e:	53                   	push   ebx
c0023a4f:	e8 0e f6 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a54:	5f                   	pop    edi
c0023a55:	58                   	pop    eax
c0023a56:	6a 00                	push   0x0
c0023a58:	68 40 42 0f 00       	push   0xf4240
c0023a5d:	e8 42 a9 ff ff       	call   c001e3a4 <nanoSleep(unsigned long long)>
c0023a62:	83 c4 10             	add    esp,0x10
c0023a65:	b1 01                	mov    cl,0x1
c0023a67:	e9 4a fe ff ff       	jmp    c00238b6 <IDE::detect()+0x126>
c0023a6c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a72:	5b                   	pop    ebx
c0023a73:	5e                   	pop    esi
c0023a74:	5f                   	pop    edi
c0023a75:	5d                   	pop    ebp
c0023a76:	c3                   	ret    
c0023a77:	90                   	nop

c0023a78 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a78:	55                   	push   ebp
c0023a79:	57                   	push   edi
c0023a7a:	56                   	push   esi
c0023a7b:	53                   	push   ebx
c0023a7c:	83 ec 1c             	sub    esp,0x1c
c0023a7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a83:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a87:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a8b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a8f:	88 c3                	mov    bl,al
c0023a91:	84 c0                	test   al,al
c0023a93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a97:	0f 84 67 01 00 00    	je     c0023c04 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a9d:	83 ec 0c             	sub    esp,0xc
c0023aa0:	68 f3 cd 02 c0       	push   0xc002cdf3
c0023aa5:	e8 d3 f4 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023aaa:	83 c4 10             	add    esp,0x10
c0023aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ab1:	3c 01                	cmp    al,0x1
c0023ab3:	75 17                	jne    c0023acc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023ab5:	83 ec 0c             	sub    esp,0xc
c0023ab8:	b3 13                	mov    bl,0x13
c0023aba:	68 ff cd 02 c0       	push   0xc002cdff
c0023abf:	e8 b9 f4 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023ac4:	83 c4 10             	add    esp,0x10
c0023ac7:	e9 25 01 00 00       	jmp    c0023bf1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023acc:	3c 02                	cmp    al,0x2
c0023ace:	0f 85 ef 00 00 00    	jne    c0023bc3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023ad4:	d1 e6                	shl    esi,1
c0023ad6:	09 ee                	or     esi,ebp
c0023ad8:	52                   	push   edx
c0023ad9:	89 f0                	mov    eax,esi
c0023adb:	6a 01                	push   0x1
c0023add:	0f b6 f0             	movzx  esi,al
c0023ae0:	c1 e6 06             	shl    esi,0x6
c0023ae3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023aeb:	50                   	push   eax
c0023aec:	57                   	push   edi
c0023aed:	e8 30 f6 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023af2:	83 c4 10             	add    esp,0x10
c0023af5:	89 c6                	mov    esi,eax
c0023af7:	a8 01                	test   al,0x1
c0023af9:	74 12                	je     c0023b0d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023afb:	83 ec 0c             	sub    esp,0xc
c0023afe:	b3 07                	mov    bl,0x7
c0023b00:	68 14 ce 02 c0       	push   0xc002ce14
c0023b05:	e8 73 f4 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023b0a:	83 c4 10             	add    esp,0x10
c0023b0d:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b13:	74 12                	je     c0023b27 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b15:	83 ec 0c             	sub    esp,0xc
c0023b18:	b3 03                	mov    bl,0x3
c0023b1a:	68 32 ce 02 c0       	push   0xc002ce32
c0023b1f:	e8 59 f4 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023b24:	83 c4 10             	add    esp,0x10
c0023b27:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b2d:	74 12                	je     c0023b41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b2f:	83 ec 0c             	sub    esp,0xc
c0023b32:	b3 14                	mov    bl,0x14
c0023b34:	68 52 ce 02 c0       	push   0xc002ce52
c0023b39:	e8 3f f4 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023b3e:	83 c4 10             	add    esp,0x10
c0023b41:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b47:	74 12                	je     c0023b5b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b49:	83 ec 0c             	sub    esp,0xc
c0023b4c:	b3 03                	mov    bl,0x3
c0023b4e:	68 32 ce 02 c0       	push   0xc002ce32
c0023b53:	e8 25 f4 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023b58:	83 c4 10             	add    esp,0x10
c0023b5b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b61:	74 12                	je     c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b63:	83 ec 0c             	sub    esp,0xc
c0023b66:	b3 15                	mov    bl,0x15
c0023b68:	68 6a ce 02 c0       	push   0xc002ce6a
c0023b6d:	e8 0b f4 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b7b:	74 12                	je     c0023b8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b7d:	83 ec 0c             	sub    esp,0xc
c0023b80:	b3 03                	mov    bl,0x3
c0023b82:	68 32 ce 02 c0       	push   0xc002ce32
c0023b87:	e8 f1 f3 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023b8c:	83 c4 10             	add    esp,0x10
c0023b8f:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b95:	74 12                	je     c0023ba9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b97:	83 ec 0c             	sub    esp,0xc
c0023b9a:	b3 16                	mov    bl,0x16
c0023b9c:	68 84 ce 02 c0       	push   0xc002ce84
c0023ba1:	e8 d7 f3 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023ba6:	83 c4 10             	add    esp,0x10
c0023ba9:	89 f0                	mov    eax,esi
c0023bab:	84 c0                	test   al,al
c0023bad:	79 42                	jns    c0023bf1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023baf:	83 ec 0c             	sub    esp,0xc
c0023bb2:	b3 0d                	mov    bl,0xd
c0023bb4:	68 a5 ce 02 c0       	push   0xc002cea5
c0023bb9:	e8 bf f3 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023bbe:	83 c4 10             	add    esp,0x10
c0023bc1:	eb 2e                	jmp    c0023bf1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bc3:	3c 03                	cmp    al,0x3
c0023bc5:	75 14                	jne    c0023bdb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023bc7:	83 ec 0c             	sub    esp,0xc
c0023bca:	b3 17                	mov    bl,0x17
c0023bcc:	68 b9 ce 02 c0       	push   0xc002ceb9
c0023bd1:	e8 a7 f3 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023bd6:	83 c4 10             	add    esp,0x10
c0023bd9:	eb 16                	jmp    c0023bf1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bdb:	3c 04                	cmp    al,0x4
c0023bdd:	75 12                	jne    c0023bf1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bdf:	83 ec 0c             	sub    esp,0xc
c0023be2:	b3 08                	mov    bl,0x8
c0023be4:	68 cf ce 02 c0       	push   0xc002cecf
c0023be9:	e8 8f f3 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023bee:	83 c4 10             	add    esp,0x10
c0023bf1:	50                   	push   eax
c0023bf2:	50                   	push   eax
c0023bf3:	0f b6 c3             	movzx  eax,bl
c0023bf6:	50                   	push   eax
c0023bf7:	68 e7 ce 02 c0       	push   0xc002cee7
c0023bfc:	e8 7c f3 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023c01:	83 c4 10             	add    esp,0x10
c0023c04:	83 c4 1c             	add    esp,0x1c
c0023c07:	88 d8                	mov    al,bl
c0023c09:	5b                   	pop    ebx
c0023c0a:	5e                   	pop    esi
c0023c0b:	5f                   	pop    edi
c0023c0c:	5d                   	pop    ebp
c0023c0d:	c3                   	ret    

c0023c0e <IDE::polling(unsigned char, unsigned int)>:
c0023c0e:	57                   	push   edi
c0023c0f:	56                   	push   esi
c0023c10:	53                   	push   ebx
c0023c11:	bb 04 00 00 00       	mov    ebx,0x4
c0023c16:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c1a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c1f:	52                   	push   edx
c0023c20:	6a 0c                	push   0xc
c0023c22:	56                   	push   esi
c0023c23:	57                   	push   edi
c0023c24:	e8 f9 f4 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023c29:	83 c4 10             	add    esp,0x10
c0023c2c:	4b                   	dec    ebx
c0023c2d:	75 f0                	jne    c0023c1f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c2f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c34:	50                   	push   eax
c0023c35:	6a 0c                	push   0xc
c0023c37:	56                   	push   esi
c0023c38:	57                   	push   edi
c0023c39:	e8 e4 f4 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0023c3e:	83 c4 10             	add    esp,0x10
c0023c41:	a8 01                	test   al,0x1
c0023c43:	74 12                	je     c0023c57 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c45:	83 ec 0c             	sub    esp,0xc
c0023c48:	68 01 cf 02 c0       	push   0xc002cf01
c0023c4d:	e8 2b f3 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023c52:	83 c4 10             	add    esp,0x10
c0023c55:	eb 17                	jmp    c0023c6e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c57:	a8 20                	test   al,0x20
c0023c59:	75 0f                	jne    c0023c6a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c5b:	4b                   	dec    ebx
c0023c5c:	74 10                	je     c0023c6e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c5e:	84 c0                	test   al,al
c0023c60:	78 d2                	js     c0023c34 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c62:	a8 08                	test   al,0x8
c0023c64:	74 ce                	je     c0023c34 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c66:	31 c0                	xor    eax,eax
c0023c68:	eb 06                	jmp    c0023c70 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c6a:	b0 01                	mov    al,0x1
c0023c6c:	eb 02                	jmp    c0023c70 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c6e:	b0 02                	mov    al,0x2
c0023c70:	5b                   	pop    ebx
c0023c71:	5e                   	pop    esi
c0023c72:	5f                   	pop    edi
c0023c73:	c3                   	ret    

c0023c74 <SATABus::close(int, int, void*)>:
c0023c74:	31 c0                	xor    eax,eax
c0023c76:	c3                   	ret    
c0023c77:	90                   	nop

c0023c78 <SATABus::detect()>:
c0023c78:	c3                   	ret    
c0023c79:	90                   	nop

c0023c7a <SATABus::SATABus()>:
c0023c7a:	83 ec 0c             	sub    esp,0xc
c0023c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c81:	83 ec 08             	sub    esp,0x8
c0023c84:	68 44 cf 02 c0       	push   0xc002cf44
c0023c89:	50                   	push   eax
c0023c8a:	e8 a1 0a ff ff       	call   c0014730 <HardDiskController::HardDiskController(char const*)>
c0023c8f:	83 c4 10             	add    esp,0x10
c0023c92:	ba 00 d0 02 c0       	mov    edx,0xc002d000
c0023c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c9b:	89 10                	mov    DWORD PTR [eax],edx
c0023c9d:	83 ec 0c             	sub    esp,0xc
c0023ca0:	6a 50                	push   0x50
c0023ca2:	e8 77 c3 fe ff       	call   c001001e <Phys::allocateContiguousPages(int)>
c0023ca7:	83 c4 10             	add    esp,0x10
c0023caa:	89 c2                	mov    edx,eax
c0023cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cb0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023cb6:	83 ec 0c             	sub    esp,0xc
c0023cb9:	6a 50                	push   0x50
c0023cbb:	e8 d7 de fe ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0023cc0:	83 c4 10             	add    esp,0x10
c0023cc3:	89 c2                	mov    edx,eax
c0023cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023ccf:	e8 5e e1 fe ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0023cd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cd8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023cde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ce2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023ce8:	83 ec 0c             	sub    esp,0xc
c0023ceb:	6a 03                	push   0x3
c0023ced:	6a 50                	push   0x50
c0023cef:	51                   	push   ecx
c0023cf0:	52                   	push   edx
c0023cf1:	50                   	push   eax
c0023cf2:	e8 6b e9 fe ff       	call   c0012662 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023cf7:	83 c4 20             	add    esp,0x20
c0023cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cfe:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d08:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d0e:	83 ec 04             	sub    esp,0x4
c0023d11:	52                   	push   edx
c0023d12:	50                   	push   eax
c0023d13:	68 68 cf 02 c0       	push   0xc002cf68
c0023d18:	e8 60 f2 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023d1d:	83 c4 10             	add    esp,0x10
c0023d20:	90                   	nop
c0023d21:	83 c4 0c             	add    esp,0xc
c0023d24:	c3                   	ret    
c0023d25:	90                   	nop

c0023d26 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d26:	83 ec 0c             	sub    esp,0xc
c0023d29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d2d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d30:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d33:	09 c2                	or     edx,eax
c0023d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d3f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d41:	31 c0                	xor    eax,eax
c0023d43:	c1 e9 08             	shr    ecx,0x8
c0023d46:	83 e1 0f             	and    ecx,0xf
c0023d49:	39 c8                	cmp    eax,ecx
c0023d4b:	74 0a                	je     c0023d57 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d4d:	f6 c2 01             	test   dl,0x1
c0023d50:	74 18                	je     c0023d6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d52:	d1 ea                	shr    edx,1
c0023d54:	40                   	inc    eax
c0023d55:	eb f2                	jmp    c0023d49 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d57:	83 ec 0c             	sub    esp,0xc
c0023d5a:	68 8c cf 02 c0       	push   0xc002cf8c
c0023d5f:	e8 cb 68 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0023d64:	83 c4 10             	add    esp,0x10
c0023d67:	83 c8 ff             	or     eax,0xffffffff
c0023d6a:	83 c4 0c             	add    esp,0xc
c0023d6d:	c3                   	ret    

c0023d6e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d72:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d75:	89 c2                	mov    edx,eax
c0023d77:	c1 ea 08             	shr    edx,0x8
c0023d7a:	83 e2 0f             	and    edx,0xf
c0023d7d:	fe ca                	dec    dl
c0023d7f:	75 31                	jne    c0023db2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d81:	83 e0 0f             	and    eax,0xf
c0023d84:	3c 03                	cmp    al,0x3
c0023d86:	75 2a                	jne    c0023db2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d88:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d8b:	b8 02 00 00 00       	mov    eax,0x2
c0023d90:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d96:	74 1c                	je     c0023db4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d98:	b8 04 00 00 00       	mov    eax,0x4
c0023d9d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023da3:	74 0f                	je     c0023db4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023da5:	31 c0                	xor    eax,eax
c0023da7:	83 fa 03             	cmp    edx,0x3
c0023daa:	0f 94 c0             	sete   al
c0023dad:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023db1:	c3                   	ret    
c0023db2:	31 c0                	xor    eax,eax
c0023db4:	c3                   	ret    
c0023db5:	90                   	nop

c0023db6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023db6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dbd:	0f ba e2 0f          	bt     edx,0xf
c0023dc1:	72 f7                	jb     c0023dba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023dc3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dc6:	83 ca 10             	or     edx,0x10
c0023dc9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dcc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dcf:	83 ca 01             	or     edx,0x1
c0023dd2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dd5:	c3                   	ret    

c0023dd6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023dd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dda:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ddd:	83 e2 fe             	and    edx,0xfffffffe
c0023de0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023de3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023de6:	83 e2 ef             	and    edx,0xffffffef
c0023de9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023def:	0f ba e2 0e          	bt     edx,0xe
c0023df3:	72 f7                	jb     c0023dec <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023df5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023df8:	0f ba e2 0f          	bt     edx,0xf
c0023dfc:	72 ee                	jb     c0023dec <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dfe:	c3                   	ret    
c0023dff:	90                   	nop

c0023e00 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e00:	55                   	push   ebp
c0023e01:	57                   	push   edi
c0023e02:	56                   	push   esi
c0023e03:	53                   	push   ebx
c0023e04:	83 ec 1c             	sub    esp,0x1c
c0023e07:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e0f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e13:	53                   	push   ebx
c0023e14:	89 fd                	mov    ebp,edi
c0023e16:	56                   	push   esi
c0023e17:	c1 e5 0a             	shl    ebp,0xa
c0023e1a:	e8 b7 ff ff ff       	call   c0023dd6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e1f:	83 ec 0c             	sub    esp,0xc
c0023e22:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e28:	01 e8                	add    eax,ebp
c0023e2a:	89 03                	mov    DWORD PTR [ebx],eax
c0023e2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e2e:	68 00 04 00 00       	push   0x400
c0023e33:	6a 00                	push   0x0
c0023e35:	50                   	push   eax
c0023e36:	e8 3d c9 fd ff       	call   c0000778 <memset>
c0023e3b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e41:	89 fa                	mov    edx,edi
c0023e43:	01 e8                	add    eax,ebp
c0023e45:	c1 e7 0d             	shl    edi,0xd
c0023e48:	89 03                	mov    DWORD PTR [ebx],eax
c0023e4a:	c1 e2 08             	shl    edx,0x8
c0023e4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e54:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e5e:	89 d0                	mov    eax,edx
c0023e60:	83 c4 1c             	add    esp,0x1c
c0023e63:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e69:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e6f:	68 00 01 00 00       	push   0x100
c0023e74:	6a 00                	push   0x0
c0023e76:	50                   	push   eax
c0023e77:	e8 fc c8 fd ff       	call   c0000778 <memset>
c0023e7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e80:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e86:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e90:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e93:	83 c4 10             	add    esp,0x10
c0023e96:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e9d:	31 ff                	xor    edi,edi
c0023e9f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ea5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023eaf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023eb5:	83 c5 20             	add    ebp,0x20
c0023eb8:	01 f8                	add    eax,edi
c0023eba:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ebd:	52                   	push   edx
c0023ebe:	68 00 01 00 00       	push   0x100
c0023ec3:	6a 00                	push   0x0
c0023ec5:	50                   	push   eax
c0023ec6:	e8 ad c8 fd ff       	call   c0000778 <memset>
c0023ecb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ecf:	83 c4 10             	add    esp,0x10
c0023ed2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ed8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023edf:	01 f8                	add    eax,edi
c0023ee1:	81 c7 00 01 00 00    	add    edi,0x100
c0023ee7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023eea:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ef0:	75 b3                	jne    c0023ea5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ef2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ef6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023efa:	83 c4 1c             	add    esp,0x1c
c0023efd:	5b                   	pop    ebx
c0023efe:	5e                   	pop    esi
c0023eff:	5f                   	pop    edi
c0023f00:	5d                   	pop    ebp
c0023f01:	e9 b0 fe ff ff       	jmp    c0023db6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f06 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f06:	55                   	push   ebp
c0023f07:	57                   	push   edi
c0023f08:	56                   	push   esi
c0023f09:	53                   	push   ebx
c0023f0a:	31 db                	xor    ebx,ebx
c0023f0c:	83 ec 0c             	sub    esp,0xc
c0023f0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f13:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f17:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f1a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f20:	0f 84 aa 00 00 00    	je     c0023fd0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f2a:	89 d8                	mov    eax,ebx
c0023f2c:	c1 e0 07             	shl    eax,0x7
c0023f2f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f36:	55                   	push   ebp
c0023f37:	56                   	push   esi
c0023f38:	e8 31 fe ff ff       	call   c0023d6e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f3d:	5a                   	pop    edx
c0023f3e:	83 f8 01             	cmp    eax,0x1
c0023f41:	59                   	pop    ecx
c0023f42:	75 30                	jne    c0023f74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f44:	50                   	push   eax
c0023f45:	50                   	push   eax
c0023f46:	53                   	push   ebx
c0023f47:	68 b1 cf 02 c0       	push   0xc002cfb1
c0023f4c:	e8 2c f0 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023f51:	83 c4 0c             	add    esp,0xc
c0023f54:	53                   	push   ebx
c0023f55:	55                   	push   ebp
c0023f56:	56                   	push   esi
c0023f57:	e8 a4 fe ff ff       	call   c0023e00 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f5c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f63:	e8 d8 b8 fe ff       	call   c000f840 <malloc>
c0023f68:	89 c5                	mov    ebp,eax
c0023f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f6d:	e8 60 0d 00 00       	call   c0024cd2 <SATA::SATA()>
c0023f72:	eb 33                	jmp    c0023fa7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f74:	83 f8 04             	cmp    eax,0x4
c0023f77:	75 47                	jne    c0023fc0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f79:	50                   	push   eax
c0023f7a:	50                   	push   eax
c0023f7b:	53                   	push   ebx
c0023f7c:	68 c8 cf 02 c0       	push   0xc002cfc8
c0023f81:	e8 f7 ef fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023f86:	83 c4 0c             	add    esp,0xc
c0023f89:	53                   	push   ebx
c0023f8a:	55                   	push   ebp
c0023f8b:	56                   	push   esi
c0023f8c:	e8 6f fe ff ff       	call   c0023e00 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f91:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f98:	e8 a3 b8 fe ff       	call   c000f840 <malloc>
c0023f9d:	89 c5                	mov    ebp,eax
c0023f9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fa2:	e8 d7 10 00 00       	call   c002507e <SATAPI::SATAPI()>
c0023fa7:	5a                   	pop    edx
c0023fa8:	59                   	pop    ecx
c0023fa9:	55                   	push   ebp
c0023faa:	56                   	push   esi
c0023fab:	e8 f4 03 ff ff       	call   c00143a4 <Device::addChild(Device*)>
c0023fb0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023fb3:	56                   	push   esi
c0023fb4:	6a 00                	push   0x0
c0023fb6:	53                   	push   ebx
c0023fb7:	55                   	push   ebp
c0023fb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023fbb:	83 c4 20             	add    esp,0x20
c0023fbe:	eb 10                	jmp    c0023fd0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023fc0:	50                   	push   eax
c0023fc1:	50                   	push   eax
c0023fc2:	53                   	push   ebx
c0023fc3:	68 e1 cf 02 c0       	push   0xc002cfe1
c0023fc8:	e8 b0 ef fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0023fcd:	83 c4 10             	add    esp,0x10
c0023fd0:	d1 ef                	shr    edi,1
c0023fd2:	43                   	inc    ebx
c0023fd3:	83 fb 20             	cmp    ebx,0x20
c0023fd6:	0f 85 3e ff ff ff    	jne    c0023f1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023fdc:	83 c4 0c             	add    esp,0xc
c0023fdf:	5b                   	pop    ebx
c0023fe0:	5e                   	pop    esi
c0023fe1:	5f                   	pop    edi
c0023fe2:	5d                   	pop    ebp
c0023fe3:	c3                   	ret    

c0023fe4 <SATABus::open(int, int, void*)>:
c0023fe4:	83 ec 14             	sub    esp,0x14
c0023fe7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023feb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023ff1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023ff7:	52                   	push   edx
c0023ff8:	50                   	push   eax
c0023ff9:	e8 08 ff ff ff       	call   c0023f06 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023ffe:	31 c0                	xor    eax,eax
c0024000:	83 c4 1c             	add    esp,0x1c
c0024003:	c3                   	ret    

c0024004 <ATA::close(int, int, void*)>:
c0024004:	83 ec 0c             	sub    esp,0xc
c0024007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002400b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024011:	85 c0                	test   eax,eax
c0024013:	74 0c                	je     c0024021 <ATA::close(int, int, void*)+0x1d>
c0024015:	83 ec 0c             	sub    esp,0xc
c0024018:	8b 10                	mov    edx,DWORD PTR [eax]
c002401a:	50                   	push   eax
c002401b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002401e:	83 c4 10             	add    esp,0x10
c0024021:	31 c0                	xor    eax,eax
c0024023:	83 c4 0c             	add    esp,0xc
c0024026:	c3                   	ret    
c0024027:	90                   	nop

c0024028 <ATA::powerSaving(PowerSavingLevel)>:
c0024028:	c3                   	ret    
c0024029:	90                   	nop

c002402a <ATA::ATA()>:
c002402a:	83 ec 0c             	sub    esp,0xc
c002402d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024031:	83 ec 04             	sub    esp,0x4
c0024034:	68 00 02 00 00       	push   0x200
c0024039:	68 c9 d0 02 c0       	push   0xc002d0c9
c002403e:	50                   	push   eax
c002403f:	e8 84 07 ff ff       	call   c00147c8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024044:	83 c4 10             	add    esp,0x10
c0024047:	ba 4c d0 02 c0       	mov    edx,0xc002d04c
c002404c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024050:	89 10                	mov    DWORD PTR [eax],edx
c0024052:	90                   	nop
c0024053:	83 c4 0c             	add    esp,0xc
c0024056:	c3                   	ret    
c0024057:	90                   	nop

c0024058 <ATA::flush(bool)>:
c0024058:	53                   	push   ebx
c0024059:	83 ec 08             	sub    esp,0x8
c002405c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024061:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024065:	19 c0                	sbb    eax,eax
c0024067:	83 e0 fd             	and    eax,0xfffffffd
c002406a:	05 ea 00 00 00       	add    eax,0xea
c002406f:	50                   	push   eax
c0024070:	6a 07                	push   0x7
c0024072:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024079:	50                   	push   eax
c002407a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024080:	e8 dd ef ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024085:	83 c4 0c             	add    esp,0xc
c0024088:	6a 00                	push   0x0
c002408a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024091:	50                   	push   eax
c0024092:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024098:	e8 71 fb ff ff       	call   c0023c0e <IDE::polling(unsigned char, unsigned int)>
c002409d:	83 c4 18             	add    esp,0x18
c00240a0:	5b                   	pop    ebx
c00240a1:	c3                   	ret    

c00240a2 <ATA::readyForCommand()>:
c00240a2:	56                   	push   esi
c00240a3:	53                   	push   ebx
c00240a4:	31 db                	xor    ebx,ebx
c00240a6:	50                   	push   eax
c00240a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00240ab:	50                   	push   eax
c00240ac:	6a 0c                	push   0xc
c00240ae:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240b5:	50                   	push   eax
c00240b6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00240bc:	e8 61 f0 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c00240c1:	83 c4 10             	add    esp,0x10
c00240c4:	a8 88                	test   al,0x88
c00240c6:	74 23                	je     c00240eb <ATA::readyForCommand()+0x49>
c00240c8:	43                   	inc    ebx
c00240c9:	83 fb 63             	cmp    ebx,0x63
c00240cc:	7e dd                	jle    c00240ab <ATA::readyForCommand()+0x9>
c00240ce:	51                   	push   ecx
c00240cf:	51                   	push   ecx
c00240d0:	6a 00                	push   0x0
c00240d2:	68 40 42 0f 00       	push   0xf4240
c00240d7:	e8 c8 a2 ff ff       	call   c001e3a4 <nanoSleep(unsigned long long)>
c00240dc:	83 c4 10             	add    esp,0x10
c00240df:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240e5:	75 c4                	jne    c00240ab <ATA::readyForCommand()+0x9>
c00240e7:	31 c0                	xor    eax,eax
c00240e9:	eb 02                	jmp    c00240ed <ATA::readyForCommand()+0x4b>
c00240eb:	b0 01                	mov    al,0x1
c00240ed:	5a                   	pop    edx
c00240ee:	5b                   	pop    ebx
c00240ef:	5e                   	pop    esi
c00240f0:	c3                   	ret    
c00240f1:	90                   	nop

c00240f2 <ATA::access(unsigned long long, int, void*, bool)>:
c00240f2:	55                   	push   ebp
c00240f3:	57                   	push   edi
c00240f4:	56                   	push   esi
c00240f5:	53                   	push   ebx
c00240f6:	83 ec 2c             	sub    esp,0x2c
c00240f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024101:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024105:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024109:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002410d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024111:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024115:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002411b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002411f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024125:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024129:	c1 e0 06             	shl    eax,0x6
c002412c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024134:	74 5d                	je     c0024193 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024136:	89 fa                	mov    edx,edi
c0024138:	89 f0                	mov    eax,esi
c002413a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002413e:	c1 ea 1c             	shr    edx,0x1c
c0024141:	89 d1                	mov    ecx,edx
c0024143:	09 c1                	or     ecx,eax
c0024145:	74 25                	je     c002416c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024147:	31 ed                	xor    ebp,ebp
c0024149:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024150:	89 fa                	mov    edx,edi
c0024152:	89 f0                	mov    eax,esi
c0024154:	0f ad d0             	shrd   eax,edx,cl
c0024157:	d3 ea                	shr    edx,cl
c0024159:	f6 c1 20             	test   cl,0x20
c002415c:	74 02                	je     c0024160 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002415e:	89 d0                	mov    eax,edx
c0024160:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024164:	45                   	inc    ebp
c0024165:	83 fd 06             	cmp    ebp,0x6
c0024168:	75 df                	jne    c0024149 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002416a:	eb 76                	jmp    c00241e2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002416c:	89 f0                	mov    eax,esi
c002416e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024173:	89 fa                	mov    edx,edi
c0024175:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002417c:	0f ac d0 10          	shrd   eax,edx,0x10
c0024180:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024185:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024189:	c1 ee 18             	shr    esi,0x18
c002418c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024191:	eb 56                	jmp    c00241e9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024193:	6a 00                	push   0x0
c0024195:	6a 3f                	push   0x3f
c0024197:	57                   	push   edi
c0024198:	56                   	push   esi
c0024199:	e8 8e 29 00 00       	call   c0026b2c <__umoddi3>
c002419e:	83 c4 10             	add    esp,0x10
c00241a1:	40                   	inc    eax
c00241a2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00241a6:	6a 00                	push   0x0
c00241a8:	68 f0 03 00 00       	push   0x3f0
c00241ad:	57                   	push   edi
c00241ae:	56                   	push   esi
c00241af:	e8 78 28 00 00       	call   c0026a2c <__udivdi3>
c00241b4:	83 c4 10             	add    esp,0x10
c00241b7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00241bc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241c3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241c8:	6a 00                	push   0x0
c00241ca:	6a 3f                	push   0x3f
c00241cc:	57                   	push   edi
c00241cd:	56                   	push   esi
c00241ce:	e8 59 28 00 00       	call   c0026a2c <__udivdi3>
c00241d3:	83 c4 10             	add    esp,0x10
c00241d6:	89 c6                	mov    esi,eax
c00241d8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00241dd:	83 e6 0f             	and    esi,0xf
c00241e0:	eb 07                	jmp    c00241e9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241e2:	31 f6                	xor    esi,esi
c00241e4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00241e9:	bf 01 00 00 00       	mov    edi,0x1
c00241ee:	50                   	push   eax
c00241ef:	6a 00                	push   0x0
c00241f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f8:	50                   	push   eax
c00241f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241fd:	e8 6c f0 ff ff       	call   c002326e <IDE::enableIRQs(unsigned char, bool)>
c0024202:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024205:	e8 98 fe ff ff       	call   c00240a2 <ATA::readyForCommand()>
c002420a:	83 c4 10             	add    esp,0x10
c002420d:	84 c0                	test   al,al
c002420f:	0f 84 5a 02 00 00    	je     c002446f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024215:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002421b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024221:	c1 e0 04             	shl    eax,0x4
c0024224:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002422b:	09 c6                	or     esi,eax
c002422d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024232:	75 05                	jne    c0024239 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024234:	83 ce a0             	or     esi,0xffffffa0
c0024237:	eb 03                	jmp    c002423c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024239:	83 ce e0             	or     esi,0xffffffe0
c002423c:	89 f0                	mov    eax,esi
c002423e:	0f b6 f0             	movzx  esi,al
c0024241:	56                   	push   esi
c0024242:	6a 06                	push   0x6
c0024244:	51                   	push   ecx
c0024245:	52                   	push   edx
c0024246:	e8 17 ee ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002424b:	83 c4 10             	add    esp,0x10
c002424e:	6a 00                	push   0x0
c0024250:	6a 01                	push   0x1
c0024252:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024259:	50                   	push   eax
c002425a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024260:	e8 fd ed ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024265:	83 c4 10             	add    esp,0x10
c0024268:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002426d:	75 6e                	jne    c00242dd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002426f:	6a 00                	push   0x0
c0024271:	6a 08                	push   0x8
c0024273:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002427a:	50                   	push   eax
c002427b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024281:	e8 dc ed ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024286:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002428b:	50                   	push   eax
c002428c:	6a 09                	push   0x9
c002428e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024295:	50                   	push   eax
c0024296:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002429c:	e8 c1 ed ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a1:	83 c4 20             	add    esp,0x20
c00242a4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00242a9:	50                   	push   eax
c00242aa:	6a 0a                	push   0xa
c00242ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b3:	50                   	push   eax
c00242b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ba:	e8 a3 ed ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242bf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00242c4:	50                   	push   eax
c00242c5:	6a 0b                	push   0xb
c00242c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ce:	50                   	push   eax
c00242cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242d5:	e8 88 ed ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242da:	83 c4 20             	add    esp,0x20
c00242dd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00242e2:	50                   	push   eax
c00242e3:	6a 02                	push   0x2
c00242e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ec:	50                   	push   eax
c00242ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242f3:	e8 6a ed ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242fd:	50                   	push   eax
c00242fe:	6a 03                	push   0x3
c0024300:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024307:	50                   	push   eax
c0024308:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002430e:	e8 4f ed ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024313:	83 c4 20             	add    esp,0x20
c0024316:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002431b:	50                   	push   eax
c002431c:	6a 04                	push   0x4
c002431e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024325:	50                   	push   eax
c0024326:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002432c:	e8 31 ed ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024331:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024336:	50                   	push   eax
c0024337:	6a 05                	push   0x5
c0024339:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024340:	50                   	push   eax
c0024341:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024347:	e8 16 ed ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002434c:	83 c4 20             	add    esp,0x20
c002434f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024354:	0f 94 c0             	sete   al
c0024357:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002435c:	74 09                	je     c0024367 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002435e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024365:	eb 07                	jmp    c002436e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024367:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002436e:	0f b6 c0             	movzx  eax,al
c0024371:	50                   	push   eax
c0024372:	6a 07                	push   0x7
c0024374:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002437b:	50                   	push   eax
c002437c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024382:	e8 db ec ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024387:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002438b:	83 c4 10             	add    esp,0x10
c002438e:	85 f6                	test   esi,esi
c0024390:	0f 84 ba 00 00 00    	je     c0024450 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024396:	50                   	push   eax
c0024397:	6a 01                	push   0x1
c0024399:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243a0:	50                   	push   eax
c00243a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243a7:	e8 62 f8 ff ff       	call   c0023c0e <IDE::polling(unsigned char, unsigned int)>
c00243ac:	83 c4 10             	add    esp,0x10
c00243af:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243b5:	84 c0                	test   al,al
c00243b7:	74 2c                	je     c00243e5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00243b9:	0f b6 f8             	movzx  edi,al
c00243bc:	0f b6 d2             	movzx  edx,dl
c00243bf:	57                   	push   edi
c00243c0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00243c7:	50                   	push   eax
c00243c8:	52                   	push   edx
c00243c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243cf:	e8 a4 f6 ff ff       	call   c0023a78 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243d4:	c7 04 24 24 d0 02 c0 	mov    DWORD PTR [esp],0xc002d024
c00243db:	e8 9d eb fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00243e0:	e9 87 00 00 00       	jmp    c002446c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00243e5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00243ea:	74 33                	je     c002441f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00243ec:	31 ed                	xor    ebp,ebp
c00243ee:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00243f2:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00243f6:	50                   	push   eax
c00243f7:	50                   	push   eax
c00243f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ff:	50                   	push   eax
c0024400:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024406:	e8 45 ec ff ff       	call   c0023050 <IDE::getBase(unsigned char)>
c002440b:	89 c2                	mov    edx,eax
c002440d:	89 f8                	mov    eax,edi
c002440f:	66 ef                	out    dx,ax
c0024411:	45                   	inc    ebp
c0024412:	83 c4 10             	add    esp,0x10
c0024415:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002441b:	75 d1                	jne    c00243ee <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002441d:	eb 23                	jmp    c0024442 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002441f:	0f b6 d2             	movzx  edx,dl
c0024422:	51                   	push   ecx
c0024423:	51                   	push   ecx
c0024424:	52                   	push   edx
c0024425:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002442b:	e8 20 ec ff ff       	call   c0023050 <IDE::getBase(unsigned char)>
c0024430:	b9 00 01 00 00       	mov    ecx,0x100
c0024435:	89 c2                	mov    edx,eax
c0024437:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002443b:	fc                   	cld    
c002443c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002443f:	83 c4 10             	add    esp,0x10
c0024442:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002444a:	4e                   	dec    esi
c002444b:	e9 3e ff ff ff       	jmp    c002438e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024450:	31 ff                	xor    edi,edi
c0024452:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024457:	74 16                	je     c002446f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024459:	50                   	push   eax
c002445a:	50                   	push   eax
c002445b:	31 c0                	xor    eax,eax
c002445d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024462:	0f 94 c0             	sete   al
c0024465:	50                   	push   eax
c0024466:	53                   	push   ebx
c0024467:	e8 ec fb ff ff       	call   c0024058 <ATA::flush(bool)>
c002446c:	83 c4 10             	add    esp,0x10
c002446f:	83 c4 2c             	add    esp,0x2c
c0024472:	89 f8                	mov    eax,edi
c0024474:	5b                   	pop    ebx
c0024475:	5e                   	pop    esi
c0024476:	5f                   	pop    edi
c0024477:	5d                   	pop    ebp
c0024478:	c3                   	ret    
c0024479:	90                   	nop

c002447a <ATA::read(unsigned long long, int, void*)>:
c002447a:	57                   	push   edi
c002447b:	b8 04 00 00 00       	mov    eax,0x4
c0024480:	56                   	push   esi
c0024481:	53                   	push   ebx
c0024482:	83 ec 10             	sub    esp,0x10
c0024485:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024489:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002448d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024490:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024494:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024498:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002449e:	77 3b                	ja     c00244db <ATA::read(unsigned long long, int, void*)+0x61>
c00244a0:	b8 06 00 00 00       	mov    eax,0x6
c00244a5:	85 d2                	test   edx,edx
c00244a7:	74 32                	je     c00244db <ATA::read(unsigned long long, int, void*)+0x61>
c00244a9:	50                   	push   eax
c00244aa:	50                   	push   eax
c00244ab:	6a 00                	push   0x0
c00244ad:	52                   	push   edx
c00244ae:	53                   	push   ebx
c00244af:	57                   	push   edi
c00244b0:	56                   	push   esi
c00244b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244b5:	e8 38 fc ff ff       	call   c00240f2 <ATA::access(unsigned long long, int, void*, bool)>
c00244ba:	83 c4 20             	add    esp,0x20
c00244bd:	85 c0                	test   eax,eax
c00244bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244c3:	75 11                	jne    c00244d6 <ATA::read(unsigned long long, int, void*)+0x5c>
c00244c5:	01 1d c8 29 03 c0    	add    DWORD PTR ds:0xc00329c8,ebx
c00244cb:	e8 1c c5 fe ff       	call   c00109ec <VgaText::updateDiskUsage()>
c00244d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244d4:	eb 05                	jmp    c00244db <ATA::read(unsigned long long, int, void*)+0x61>
c00244d6:	b8 01 00 00 00       	mov    eax,0x1
c00244db:	83 c4 10             	add    esp,0x10
c00244de:	5b                   	pop    ebx
c00244df:	5e                   	pop    esi
c00244e0:	5f                   	pop    edi
c00244e1:	c3                   	ret    

c00244e2 <ATA::write(unsigned long long, int, void*)>:
c00244e2:	57                   	push   edi
c00244e3:	b8 04 00 00 00       	mov    eax,0x4
c00244e8:	56                   	push   esi
c00244e9:	53                   	push   ebx
c00244ea:	83 ec 10             	sub    esp,0x10
c00244ed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244f1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244f5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244f8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024500:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024506:	77 3b                	ja     c0024543 <ATA::write(unsigned long long, int, void*)+0x61>
c0024508:	b8 06 00 00 00       	mov    eax,0x6
c002450d:	85 d2                	test   edx,edx
c002450f:	74 32                	je     c0024543 <ATA::write(unsigned long long, int, void*)+0x61>
c0024511:	50                   	push   eax
c0024512:	50                   	push   eax
c0024513:	6a 01                	push   0x1
c0024515:	52                   	push   edx
c0024516:	53                   	push   ebx
c0024517:	57                   	push   edi
c0024518:	56                   	push   esi
c0024519:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002451d:	e8 d0 fb ff ff       	call   c00240f2 <ATA::access(unsigned long long, int, void*, bool)>
c0024522:	83 c4 20             	add    esp,0x20
c0024525:	85 c0                	test   eax,eax
c0024527:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002452b:	75 11                	jne    c002453e <ATA::write(unsigned long long, int, void*)+0x5c>
c002452d:	01 1d c4 29 03 c0    	add    DWORD PTR ds:0xc00329c4,ebx
c0024533:	e8 b4 c4 fe ff       	call   c00109ec <VgaText::updateDiskUsage()>
c0024538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002453c:	eb 05                	jmp    c0024543 <ATA::write(unsigned long long, int, void*)+0x61>
c002453e:	b8 01 00 00 00       	mov    eax,0x1
c0024543:	83 c4 10             	add    esp,0x10
c0024546:	5b                   	pop    ebx
c0024547:	5e                   	pop    esi
c0024548:	5f                   	pop    edi
c0024549:	c3                   	ret    

c002454a <ATA::detectCHS()>:
c002454a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002454e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024554:	c1 e0 06             	shl    eax,0x6
c0024557:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002455d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024567:	c7 44 24 04 2f d0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d02f
c002456f:	e9 bb 60 ff ff       	jmp    c001a62f <Krnl::panic(char const*)>

c0024574 <ATA::open(int, int, void*)>:
c0024574:	53                   	push   ebx
c0024575:	83 ec 08             	sub    esp,0x8
c0024578:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002457c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024580:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024584:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002458a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024590:	c1 e0 06             	shl    eax,0x6
c0024593:	01 d0                	add    eax,edx
c0024595:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002459c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00245a2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00245a9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00245b3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00245b9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00245c0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00245c7:	75 0c                	jne    c00245d5 <ATA::open(int, int, void*)+0x61>
c00245c9:	83 ec 0c             	sub    esp,0xc
c00245cc:	53                   	push   ebx
c00245cd:	e8 78 ff ff ff       	call   c002454a <ATA::detectCHS()>
c00245d2:	83 c4 10             	add    esp,0x10
c00245d5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245db:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00245e1:	c1 e0 06             	shl    eax,0x6
c00245e4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00245eb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00245f5:	d1 e8                	shr    eax,1
c00245f7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245fd:	6a 04                	push   0x4
c00245ff:	6a 0c                	push   0xc
c0024601:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024608:	50                   	push   eax
c0024609:	52                   	push   edx
c002460a:	e8 53 ea ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002460f:	90                   	nop
c0024610:	90                   	nop
c0024611:	6a 00                	push   0x0
c0024613:	6a 0c                	push   0xc
c0024615:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002461c:	50                   	push   eax
c002461d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024623:	e8 3a ea ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024628:	83 c4 14             	add    esp,0x14
c002462b:	53                   	push   ebx
c002462c:	e8 ff 01 ff ff       	call   c0014830 <PhysicalDisk::startCache()>
c0024631:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024634:	e8 7d 23 ff ff       	call   c00169b6 <createPartitionsForDisk(PhysicalDisk*)>
c0024639:	31 c0                	xor    eax,eax
c002463b:	83 c4 18             	add    esp,0x18
c002463e:	5b                   	pop    ebx
c002463f:	c3                   	ret    

c0024640 <ATAPI::write(unsigned long long, int, void*)>:
c0024640:	b8 03 00 00 00       	mov    eax,0x3
c0024645:	c3                   	ret    

c0024646 <ATAPI::close(int, int, void*)>:
c0024646:	83 ec 0c             	sub    esp,0xc
c0024649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002464d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024653:	85 c0                	test   eax,eax
c0024655:	74 0c                	je     c0024663 <ATAPI::close(int, int, void*)+0x1d>
c0024657:	83 ec 0c             	sub    esp,0xc
c002465a:	8b 10                	mov    edx,DWORD PTR [eax]
c002465c:	50                   	push   eax
c002465d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024660:	83 c4 10             	add    esp,0x10
c0024663:	31 c0                	xor    eax,eax
c0024665:	83 c4 0c             	add    esp,0xc
c0024668:	c3                   	ret    
c0024669:	90                   	nop

c002466a <ATAPI::ATAPI()>:
c002466a:	83 ec 0c             	sub    esp,0xc
c002466d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024671:	83 ec 04             	sub    esp,0x4
c0024674:	68 00 08 00 00       	push   0x800
c0024679:	68 69 d1 02 c0       	push   0xc002d169
c002467e:	50                   	push   eax
c002467f:	e8 44 01 ff ff       	call   c00147c8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024684:	83 c4 10             	add    esp,0x10
c0024687:	ba 84 d0 02 c0       	mov    edx,0xc002d084
c002468c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024690:	89 10                	mov    DWORD PTR [eax],edx
c0024692:	90                   	nop
c0024693:	83 c4 0c             	add    esp,0xc
c0024696:	c3                   	ret    
c0024697:	90                   	nop

c0024698 <ATAPI::readyForCommand()>:
c0024698:	56                   	push   esi
c0024699:	53                   	push   ebx
c002469a:	31 db                	xor    ebx,ebx
c002469c:	50                   	push   eax
c002469d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00246a1:	50                   	push   eax
c00246a2:	6a 0c                	push   0xc
c00246a4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00246ab:	50                   	push   eax
c00246ac:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00246b2:	e8 6b ea ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c00246b7:	83 c4 10             	add    esp,0x10
c00246ba:	a8 88                	test   al,0x88
c00246bc:	74 23                	je     c00246e1 <ATAPI::readyForCommand()+0x49>
c00246be:	43                   	inc    ebx
c00246bf:	83 fb 63             	cmp    ebx,0x63
c00246c2:	7e dd                	jle    c00246a1 <ATAPI::readyForCommand()+0x9>
c00246c4:	51                   	push   ecx
c00246c5:	51                   	push   ecx
c00246c6:	6a 00                	push   0x0
c00246c8:	68 40 42 0f 00       	push   0xf4240
c00246cd:	e8 d2 9c ff ff       	call   c001e3a4 <nanoSleep(unsigned long long)>
c00246d2:	83 c4 10             	add    esp,0x10
c00246d5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00246db:	75 c4                	jne    c00246a1 <ATAPI::readyForCommand()+0x9>
c00246dd:	31 c0                	xor    eax,eax
c00246df:	eb 02                	jmp    c00246e3 <ATAPI::readyForCommand()+0x4b>
c00246e1:	b0 01                	mov    al,0x1
c00246e3:	5a                   	pop    edx
c00246e4:	5b                   	pop    ebx
c00246e5:	5e                   	pop    esi
c00246e6:	c3                   	ret    
c00246e7:	90                   	nop

c00246e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00246e8:	55                   	push   ebp
c00246e9:	57                   	push   edi
c00246ea:	56                   	push   esi
c00246eb:	53                   	push   ebx
c00246ec:	83 ec 20             	sub    esp,0x20
c00246ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00246f3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00246f7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246ff:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024703:	6a 01                	push   0x1
c0024705:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470c:	50                   	push   eax
c002470d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024713:	e8 56 eb ff ff       	call   c002326e <IDE::enableIRQs(unsigned char, bool)>
c0024718:	5e                   	pop    esi
c0024719:	58                   	pop    eax
c002471a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024721:	50                   	push   eax
c0024722:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024728:	e8 0f e9 ff ff       	call   c002303c <IDE::prepareInterrupt(unsigned char)>
c002472d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024730:	e8 63 ff ff ff       	call   c0024698 <ATAPI::readyForCommand()>
c0024735:	83 c4 10             	add    esp,0x10
c0024738:	84 c0                	test   al,al
c002473a:	75 0a                	jne    c0024746 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002473c:	bb 01 00 00 00       	mov    ebx,0x1
c0024741:	e9 57 02 00 00       	jmp    c002499d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024746:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002474c:	c1 e0 04             	shl    eax,0x4
c002474f:	0f b6 c0             	movzx  eax,al
c0024752:	50                   	push   eax
c0024753:	6a 06                	push   0x6
c0024755:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002475c:	50                   	push   eax
c002475d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024763:	e8 fa e8 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024768:	6a 00                	push   0x0
c002476a:	6a 01                	push   0x1
c002476c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024773:	50                   	push   eax
c0024774:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002477a:	e8 e3 e8 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002477f:	83 c4 20             	add    esp,0x20
c0024782:	0f b6 c3             	movzx  eax,bl
c0024785:	0f b6 df             	movzx  ebx,bh
c0024788:	50                   	push   eax
c0024789:	6a 04                	push   0x4
c002478b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024792:	50                   	push   eax
c0024793:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024799:	e8 c4 e8 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002479e:	53                   	push   ebx
c002479f:	6a 05                	push   0x5
c00247a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a8:	50                   	push   eax
c00247a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247af:	e8 ae e8 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247b4:	83 c4 20             	add    esp,0x20
c00247b7:	68 a0 00 00 00       	push   0xa0
c00247bc:	6a 07                	push   0x7
c00247be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247c5:	50                   	push   eax
c00247c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247cc:	e8 91 e8 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247d1:	83 c4 0c             	add    esp,0xc
c00247d4:	6a 01                	push   0x1
c00247d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247dd:	50                   	push   eax
c00247de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e4:	e8 25 f4 ff ff       	call   c0023c0e <IDE::polling(unsigned char, unsigned int)>
c00247e9:	83 c4 10             	add    esp,0x10
c00247ec:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00247f2:	84 c0                	test   al,al
c00247f4:	74 23                	je     c0024819 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00247f6:	0f b6 d8             	movzx  ebx,al
c00247f9:	0f b6 d2             	movzx  edx,dl
c00247fc:	53                   	push   ebx
c00247fd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024804:	50                   	push   eax
c0024805:	52                   	push   edx
c0024806:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002480c:	e8 67 f2 ff ff       	call   c0023a78 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024811:	83 c4 10             	add    esp,0x10
c0024814:	e9 84 01 00 00       	jmp    c002499d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024819:	0f b6 d2             	movzx  edx,dl
c002481c:	53                   	push   ebx
c002481d:	53                   	push   ebx
c002481e:	52                   	push   edx
c002481f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024825:	e8 26 e8 ff ff       	call   c0023050 <IDE::getBase(unsigned char)>
c002482a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002482e:	b9 06 00 00 00       	mov    ecx,0x6
c0024833:	89 c2                	mov    edx,eax
c0024835:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024838:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002483c:	83 c4 10             	add    esp,0x10
c002483f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024845:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002484c:	85 db                	test   ebx,ebx
c002484e:	0f 84 ec 00 00 00    	je     c0024940 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024854:	51                   	push   ecx
c0024855:	51                   	push   ecx
c0024856:	52                   	push   edx
c0024857:	50                   	push   eax
c0024858:	e8 73 e9 ff ff       	call   c00231d0 <IDE::waitInterrupt(unsigned char)>
c002485d:	83 c4 10             	add    esp,0x10
c0024860:	84 c0                	test   al,al
c0024862:	0f 84 d4 fe ff ff    	je     c002473c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024868:	56                   	push   esi
c0024869:	56                   	push   esi
c002486a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024871:	50                   	push   eax
c0024872:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024878:	e8 bf e7 ff ff       	call   c002303c <IDE::prepareInterrupt(unsigned char)>
c002487d:	83 c4 0c             	add    esp,0xc
c0024880:	6a 04                	push   0x4
c0024882:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024889:	50                   	push   eax
c002488a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024890:	e8 8d e8 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c0024895:	83 c4 0c             	add    esp,0xc
c0024898:	89 c6                	mov    esi,eax
c002489a:	6a 05                	push   0x5
c002489c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248a3:	50                   	push   eax
c00248a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248aa:	e8 73 e8 ff ff       	call   c0023122 <IDE::read(unsigned char, unsigned char)>
c00248af:	89 f1                	mov    ecx,esi
c00248b1:	0f b6 c0             	movzx  eax,al
c00248b4:	0f b6 f1             	movzx  esi,cl
c00248b7:	c1 e0 08             	shl    eax,0x8
c00248ba:	09 c6                	or     esi,eax
c00248bc:	d1 fe                	sar    esi,1
c00248be:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00248c2:	83 c4 10             	add    esp,0x10
c00248c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00248ca:	74 41                	je     c002490d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00248cc:	31 c9                	xor    ecx,ecx
c00248ce:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248d4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248db:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00248df:	75 0a                	jne    c00248eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00248e1:	01 c9                	add    ecx,ecx
c00248e3:	01 cd                	add    ebp,ecx
c00248e5:	4b                   	dec    ebx
c00248e6:	e9 54 ff ff ff       	jmp    c002483f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00248eb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00248f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00248f4:	51                   	push   ecx
c00248f5:	51                   	push   ecx
c00248f6:	52                   	push   edx
c00248f7:	50                   	push   eax
c00248f8:	e8 53 e7 ff ff       	call   c0023050 <IDE::getBase(unsigned char)>
c00248fd:	89 c2                	mov    edx,eax
c00248ff:	89 f0                	mov    eax,esi
c0024901:	66 ef                	out    dx,ax
c0024903:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024907:	83 c4 10             	add    esp,0x10
c002490a:	41                   	inc    ecx
c002490b:	eb c1                	jmp    c00248ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002490d:	31 f6                	xor    esi,esi
c002490f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024915:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002491c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024920:	75 06                	jne    c0024928 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024922:	01 f6                	add    esi,esi
c0024924:	01 f5                	add    ebp,esi
c0024926:	eb bd                	jmp    c00248e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024928:	51                   	push   ecx
c0024929:	51                   	push   ecx
c002492a:	52                   	push   edx
c002492b:	50                   	push   eax
c002492c:	e8 1f e7 ff ff       	call   c0023050 <IDE::getBase(unsigned char)>
c0024931:	89 c2                	mov    edx,eax
c0024933:	66 ed                	in     ax,dx
c0024935:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002493a:	83 c4 10             	add    esp,0x10
c002493d:	46                   	inc    esi
c002493e:	eb cf                	jmp    c002490f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024940:	51                   	push   ecx
c0024941:	51                   	push   ecx
c0024942:	52                   	push   edx
c0024943:	50                   	push   eax
c0024944:	e8 87 e8 ff ff       	call   c00231d0 <IDE::waitInterrupt(unsigned char)>
c0024949:	83 c4 10             	add    esp,0x10
c002494c:	84 c0                	test   al,al
c002494e:	0f 84 e8 fd ff ff    	je     c002473c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024954:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024959:	52                   	push   edx
c002495a:	52                   	push   edx
c002495b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024962:	50                   	push   eax
c0024963:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024969:	e8 ce e6 ff ff       	call   c002303c <IDE::prepareInterrupt(unsigned char)>
c002496e:	83 c4 10             	add    esp,0x10
c0024971:	50                   	push   eax
c0024972:	50                   	push   eax
c0024973:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002497a:	50                   	push   eax
c002497b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024981:	e8 ca e6 ff ff       	call   c0023050 <IDE::getBase(unsigned char)>
c0024986:	8d 50 07             	lea    edx,[eax+0x7]
c0024989:	ec                   	in     al,dx
c002498a:	83 c4 10             	add    esp,0x10
c002498d:	a8 88                	test   al,0x88
c002498f:	74 0a                	je     c002499b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024991:	4b                   	dec    ebx
c0024992:	75 dd                	jne    c0024971 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024994:	bb 02 00 00 00       	mov    ebx,0x2
c0024999:	eb 02                	jmp    c002499d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002499b:	31 db                	xor    ebx,ebx
c002499d:	83 c4 1c             	add    esp,0x1c
c00249a0:	89 d8                	mov    eax,ebx
c00249a2:	5b                   	pop    ebx
c00249a3:	5e                   	pop    esi
c00249a4:	5f                   	pop    edi
c00249a5:	5d                   	pop    ebp
c00249a6:	c3                   	ret    
c00249a7:	90                   	nop

c00249a8 <ATAPI::diskRemoved()>:
c00249a8:	83 ec 18             	sub    esp,0x18
c00249ab:	68 75 d1 02 c0       	push   0xc002d175
c00249b0:	e8 c8 e5 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00249b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249b9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00249c0:	83 c4 1c             	add    esp,0x1c
c00249c3:	c3                   	ret    

c00249c4 <ATAPI::eject()>:
c00249c4:	57                   	push   edi
c00249c5:	b9 03 00 00 00       	mov    ecx,0x3
c00249ca:	53                   	push   ebx
c00249cb:	83 ec 14             	sub    esp,0x14
c00249ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00249d2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249d6:	fc                   	cld    
c00249d7:	31 c0                	xor    eax,eax
c00249d9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249db:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00249e0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00249e5:	50                   	push   eax
c00249e6:	50                   	push   eax
c00249e7:	6a 00                	push   0x0
c00249e9:	6a 00                	push   0x0
c00249eb:	6a 00                	push   0x0
c00249ed:	6a 02                	push   0x2
c00249ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249f3:	50                   	push   eax
c00249f4:	53                   	push   ebx
c00249f5:	e8 ee fc ff ff       	call   c00246e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249fa:	83 c4 14             	add    esp,0x14
c00249fd:	53                   	push   ebx
c00249fe:	e8 a5 ff ff ff       	call   c00249a8 <ATAPI::diskRemoved()>
c0024a03:	83 c4 24             	add    esp,0x24
c0024a06:	31 c0                	xor    eax,eax
c0024a08:	5b                   	pop    ebx
c0024a09:	5f                   	pop    edi
c0024a0a:	c3                   	ret    
c0024a0b:	90                   	nop

c0024a0c <ATAPI::diskInserted()>:
c0024a0c:	53                   	push   ebx
c0024a0d:	83 ec 14             	sub    esp,0x14
c0024a10:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a14:	68 8c d1 02 c0       	push   0xc002d18c
c0024a19:	e8 5f e5 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0024a1e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a28:	e8 03 fe fe ff       	call   c0014830 <PhysicalDisk::startCache()>
c0024a2d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a31:	83 c4 18             	add    esp,0x18
c0024a34:	5b                   	pop    ebx
c0024a35:	e9 7c 1f ff ff       	jmp    c00169b6 <createPartitionsForDisk(PhysicalDisk*)>

c0024a3a <ATAPI::detectMedia()>:
c0024a3a:	56                   	push   esi
c0024a3b:	53                   	push   ebx
c0024a3c:	83 ec 28             	sub    esp,0x28
c0024a3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a43:	6a 0c                	push   0xc
c0024a45:	6a 00                	push   0x0
c0024a47:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a4b:	56                   	push   esi
c0024a4c:	e8 27 bd fd ff       	call   c0000778 <memset>
c0024a51:	58                   	pop    eax
c0024a52:	5a                   	pop    edx
c0024a53:	6a 00                	push   0x0
c0024a55:	6a 00                	push   0x0
c0024a57:	6a 00                	push   0x0
c0024a59:	6a 00                	push   0x0
c0024a5b:	56                   	push   esi
c0024a5c:	53                   	push   ebx
c0024a5d:	e8 86 fc ff ff       	call   c00246e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a62:	83 c4 1c             	add    esp,0x1c
c0024a65:	6a 0c                	push   0xc
c0024a67:	6a 00                	push   0x0
c0024a69:	56                   	push   esi
c0024a6a:	e8 09 bd fd ff       	call   c0000778 <memset>
c0024a6f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a74:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a79:	59                   	pop    ecx
c0024a7a:	58                   	pop    eax
c0024a7b:	6a 01                	push   0x1
c0024a7d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a81:	50                   	push   eax
c0024a82:	6a 00                	push   0x0
c0024a84:	6a 12                	push   0x12
c0024a86:	56                   	push   esi
c0024a87:	53                   	push   ebx
c0024a88:	e8 5b fc ff ff       	call   c00246e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a8d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a91:	83 c4 20             	add    esp,0x20
c0024a94:	83 e0 7f             	and    eax,0x7f
c0024a97:	3c 70                	cmp    al,0x70
c0024a99:	74 15                	je     c0024ab0 <ATAPI::detectMedia()+0x76>
c0024a9b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024aa2:	75 0c                	jne    c0024ab0 <ATAPI::detectMedia()+0x76>
c0024aa4:	83 ec 0c             	sub    esp,0xc
c0024aa7:	53                   	push   ebx
c0024aa8:	e8 5f ff ff ff       	call   c0024a0c <ATAPI::diskInserted()>
c0024aad:	83 c4 10             	add    esp,0x10
c0024ab0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ab4:	83 e0 0f             	and    eax,0xf
c0024ab7:	3c 02                	cmp    al,0x2
c0024ab9:	75 1b                	jne    c0024ad6 <ATAPI::detectMedia()+0x9c>
c0024abb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ac0:	75 2d                	jne    c0024aef <ATAPI::detectMedia()+0xb5>
c0024ac2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ac9:	74 24                	je     c0024aef <ATAPI::detectMedia()+0xb5>
c0024acb:	83 ec 0c             	sub    esp,0xc
c0024ace:	53                   	push   ebx
c0024acf:	e8 d4 fe ff ff       	call   c00249a8 <ATAPI::diskRemoved()>
c0024ad4:	eb 16                	jmp    c0024aec <ATAPI::detectMedia()+0xb2>
c0024ad6:	84 c0                	test   al,al
c0024ad8:	75 15                	jne    c0024aef <ATAPI::detectMedia()+0xb5>
c0024ada:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ae1:	75 0c                	jne    c0024aef <ATAPI::detectMedia()+0xb5>
c0024ae3:	83 ec 0c             	sub    esp,0xc
c0024ae6:	53                   	push   ebx
c0024ae7:	e8 20 ff ff ff       	call   c0024a0c <ATAPI::diskInserted()>
c0024aec:	83 c4 10             	add    esp,0x10
c0024aef:	83 c4 24             	add    esp,0x24
c0024af2:	5b                   	pop    ebx
c0024af3:	5e                   	pop    esi
c0024af4:	c3                   	ret    
c0024af5:	90                   	nop

c0024af6 <ATAPI::open(int, int, void*)>:
c0024af6:	53                   	push   ebx
c0024af7:	83 ec 08             	sub    esp,0x8
c0024afa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024afe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b06:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b0c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b12:	c1 e0 06             	shl    eax,0x6
c0024b15:	01 d0                	add    eax,edx
c0024b17:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b1e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b24:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b2b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b35:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b3b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b42:	6a 04                	push   0x4
c0024b44:	6a 0c                	push   0xc
c0024b46:	51                   	push   ecx
c0024b47:	52                   	push   edx
c0024b48:	e8 15 e5 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b4d:	90                   	nop
c0024b4e:	90                   	nop
c0024b4f:	6a 00                	push   0x0
c0024b51:	6a 0c                	push   0xc
c0024b53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b5a:	50                   	push   eax
c0024b5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b61:	e8 fc e4 ff ff       	call   c0023062 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b66:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b6d:	83 c4 14             	add    esp,0x14
c0024b70:	53                   	push   ebx
c0024b71:	e8 c4 fe ff ff       	call   c0024a3a <ATAPI::detectMedia()>
c0024b76:	31 c0                	xor    eax,eax
c0024b78:	83 c4 18             	add    esp,0x18
c0024b7b:	5b                   	pop    ebx
c0024b7c:	c3                   	ret    
c0024b7d:	90                   	nop

c0024b7e <ATAPI::read(unsigned long long, int, void*)>:
c0024b7e:	55                   	push   ebp
c0024b7f:	57                   	push   edi
c0024b80:	56                   	push   esi
c0024b81:	53                   	push   ebx
c0024b82:	83 ec 1c             	sub    esp,0x1c
c0024b85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b89:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b8d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b91:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b98:	74 41                	je     c0024bdb <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b9a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b9e:	b9 03 00 00 00       	mov    ecx,0x3
c0024ba3:	fc                   	cld    
c0024ba4:	31 c0                	xor    eax,eax
c0024ba6:	86 fb                	xchg   bl,bh
c0024ba8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024baa:	c1 c3 10             	rol    ebx,0x10
c0024bad:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024bb2:	89 e8                	mov    eax,ebp
c0024bb4:	86 fb                	xchg   bl,bh
c0024bb6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024bba:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024bbe:	50                   	push   eax
c0024bbf:	50                   	push   eax
c0024bc0:	55                   	push   ebp
c0024bc1:	c1 e5 0b             	shl    ebp,0xb
c0024bc4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024bc8:	6a 00                	push   0x0
c0024bca:	55                   	push   ebp
c0024bcb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024bcf:	50                   	push   eax
c0024bd0:	56                   	push   esi
c0024bd1:	e8 12 fb ff ff       	call   c00246e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024bd6:	83 c4 20             	add    esp,0x20
c0024bd9:	eb 1a                	jmp    c0024bf5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024bdb:	83 ec 0c             	sub    esp,0xc
c0024bde:	56                   	push   esi
c0024bdf:	e8 56 fe ff ff       	call   c0024a3a <ATAPI::detectMedia()>
c0024be4:	83 c4 10             	add    esp,0x10
c0024be7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bee:	75 aa                	jne    c0024b9a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024bf0:	b8 02 00 00 00       	mov    eax,0x2
c0024bf5:	83 c4 1c             	add    esp,0x1c
c0024bf8:	5b                   	pop    ebx
c0024bf9:	5e                   	pop    esi
c0024bfa:	5f                   	pop    edi
c0024bfb:	5d                   	pop    ebp
c0024bfc:	c3                   	ret    
c0024bfd:	90                   	nop

c0024bfe <SATA::close(int, int, void*)>:
c0024bfe:	83 ec 0c             	sub    esp,0xc
c0024c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c05:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c0b:	85 c0                	test   eax,eax
c0024c0d:	74 0c                	je     c0024c1b <SATA::close(int, int, void*)+0x1d>
c0024c0f:	83 ec 0c             	sub    esp,0xc
c0024c12:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c14:	50                   	push   eax
c0024c15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c18:	83 c4 10             	add    esp,0x10
c0024c1b:	31 c0                	xor    eax,eax
c0024c1d:	83 c4 0c             	add    esp,0xc
c0024c20:	c3                   	ret    
c0024c21:	90                   	nop

c0024c22 <SATA::powerSaving(PowerSavingLevel)>:
c0024c22:	c3                   	ret    
c0024c23:	90                   	nop

c0024c24 <SATA::open(int, int, void*)>:
c0024c24:	56                   	push   esi
c0024c25:	53                   	push   ebx
c0024c26:	50                   	push   eax
c0024c27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c2f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c39:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c3f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c4d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c57:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c5d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c64:	e8 79 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c69:	89 c6                	mov    esi,eax
c0024c6b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c71:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c77:	e8 66 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c7c:	39 c6                	cmp    esi,eax
c0024c7e:	74 10                	je     c0024c90 <SATA::open(int, int, void*)+0x6c>
c0024c80:	83 ec 0c             	sub    esp,0xc
c0024c83:	68 b4 d0 02 c0       	push   0xc002d0b4
c0024c88:	e8 a2 59 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0024c8d:	83 c4 10             	add    esp,0x10
c0024c90:	83 ec 0c             	sub    esp,0xc
c0024c93:	6a 02                	push   0x2
c0024c95:	e8 fd ce fe ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c0024c9a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ca0:	e8 8d d1 fe ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0024ca5:	6a 03                	push   0x3
c0024ca7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024cad:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024cb3:	50                   	push   eax
c0024cb4:	e8 b5 d6 fe ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cb9:	83 c4 14             	add    esp,0x14
c0024cbc:	53                   	push   ebx
c0024cbd:	e8 6e fb fe ff       	call   c0014830 <PhysicalDisk::startCache()>
c0024cc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cc5:	e8 ec 1c ff ff       	call   c00169b6 <createPartitionsForDisk(PhysicalDisk*)>
c0024cca:	83 c4 14             	add    esp,0x14
c0024ccd:	31 c0                	xor    eax,eax
c0024ccf:	5b                   	pop    ebx
c0024cd0:	5e                   	pop    esi
c0024cd1:	c3                   	ret    

c0024cd2 <SATA::SATA()>:
c0024cd2:	83 ec 0c             	sub    esp,0xc
c0024cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cd9:	83 ec 04             	sub    esp,0x4
c0024cdc:	68 00 02 00 00       	push   0x200
c0024ce1:	68 c8 d0 02 c0       	push   0xc002d0c8
c0024ce6:	50                   	push   eax
c0024ce7:	e8 dc fa fe ff       	call   c00147c8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024cec:	83 c4 10             	add    esp,0x10
c0024cef:	ba 38 d1 02 c0       	mov    edx,0xc002d138
c0024cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cf8:	89 10                	mov    DWORD PTR [eax],edx
c0024cfa:	90                   	nop
c0024cfb:	83 c4 0c             	add    esp,0xc
c0024cfe:	c3                   	ret    
c0024cff:	90                   	nop

c0024d00 <SATA::access(unsigned long long, int, void*, bool)>:
c0024d00:	55                   	push   ebp
c0024d01:	57                   	push   edi
c0024d02:	56                   	push   esi
c0024d03:	53                   	push   ebx
c0024d04:	83 ec 2c             	sub    esp,0x2c
c0024d07:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d0b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d13:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d17:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d1b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d24:	7e 10                	jle    c0024d36 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d26:	83 ec 0c             	sub    esp,0xc
c0024d29:	68 d8 d0 02 c0       	push   0xc002d0d8
c0024d2e:	e8 fc 58 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0024d33:	83 c4 10             	add    esp,0x10
c0024d36:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d3c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d4c:	89 f0                	mov    eax,esi
c0024d4e:	c1 e0 07             	shl    eax,0x7
c0024d51:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d55:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d5f:	53                   	push   ebx
c0024d60:	8d 46 02             	lea    eax,[esi+0x2]
c0024d63:	53                   	push   ebx
c0024d64:	c1 e0 07             	shl    eax,0x7
c0024d67:	bb 01 00 00 00       	mov    ebx,0x1
c0024d6c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d70:	50                   	push   eax
c0024d71:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d77:	e8 aa ef ff ff       	call   c0023d26 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d7c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d80:	83 c4 10             	add    esp,0x10
c0024d83:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d88:	0f 84 ce 01 00 00    	je     c0024f5c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d8e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d92:	c1 e0 09             	shl    eax,0x9
c0024d95:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d9e:	74 17                	je     c0024db7 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024da0:	51                   	push   ecx
c0024da1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024da5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024da9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024daf:	e8 90 b9 fd ff       	call   c0000744 <memcpy>
c0024db4:	83 c4 10             	add    esp,0x10
c0024db7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dbd:	8d 46 02             	lea    eax,[esi+0x2]
c0024dc0:	c1 e0 07             	shl    eax,0x7
c0024dc3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024dc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0024dc9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024dcf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024dd5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024dd9:	c1 e1 05             	shl    ecx,0x5
c0024ddc:	01 c8                	add    eax,ecx
c0024dde:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024de2:	8a 18                	mov    bl,BYTE PTR [eax]
c0024de4:	83 e1 01             	and    ecx,0x1
c0024de7:	83 e3 bf             	and    ebx,0xffffffbf
c0024dea:	c1 e1 06             	shl    ecx,0x6
c0024ded:	09 d9                	or     ecx,ebx
c0024def:	88 08                	mov    BYTE PTR [eax],cl
c0024df1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024df3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024df9:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024dff:	89 08                	mov    DWORD PTR [eax],ecx
c0024e01:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e07:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e0d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e13:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e16:	52                   	push   edx
c0024e17:	68 90 00 00 00       	push   0x90
c0024e1c:	6a 00                	push   0x0
c0024e1e:	53                   	push   ebx
c0024e1f:	e8 54 b9 fd ff       	call   c0000778 <memset>
c0024e24:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e2a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e2e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e34:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e3c:	83 c4 10             	add    esp,0x10
c0024e3f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e42:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e48:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e4e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e53:	09 c8                	or     eax,ecx
c0024e55:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e5b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e5e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e65:	66 25 00 7f          	and    ax,0x7f00
c0024e69:	66 0d 27 80          	or     ax,0x8027
c0024e6d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e72:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e75:	19 c0                	sbb    eax,eax
c0024e77:	83 e0 f0             	and    eax,0xfffffff0
c0024e7a:	83 c0 35             	add    eax,0x35
c0024e7d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e80:	89 f8                	mov    eax,edi
c0024e82:	c1 e8 10             	shr    eax,0x10
c0024e85:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e88:	89 f8                	mov    eax,edi
c0024e8a:	c1 e8 18             	shr    eax,0x18
c0024e8d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e90:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e94:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e9b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e9e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ea2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024ea6:	89 f3                	mov    ebx,esi
c0024ea8:	31 c0                	xor    eax,eax
c0024eaa:	c1 e3 07             	shl    ebx,0x7
c0024ead:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024eb1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024eb7:	80 e1 88             	and    cl,0x88
c0024eba:	74 0a                	je     c0024ec6 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024ebc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ec1:	74 0a                	je     c0024ecd <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024ec3:	40                   	inc    eax
c0024ec4:	eb eb                	jmp    c0024eb1 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024ec6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ecb:	75 0a                	jne    c0024ed7 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024ecd:	83 ec 0c             	sub    esp,0xc
c0024ed0:	68 11 d1 02 c0       	push   0xc002d111
c0024ed5:	eb 56                	jmp    c0024f2d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024ed7:	b8 01 00 00 00       	mov    eax,0x1
c0024edc:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024ee0:	c1 e6 07             	shl    esi,0x7
c0024ee3:	d3 e0                	shl    eax,cl
c0024ee5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024ee9:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024eef:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024ef5:	85 c8                	test   eax,ecx
c0024ef7:	74 20                	je     c0024f19 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ef9:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024eff:	0f ba e1 1e          	bt     ecx,0x1e
c0024f03:	73 ea                	jae    c0024eef <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f05:	83 ec 0c             	sub    esp,0xc
c0024f08:	31 db                	xor    ebx,ebx
c0024f0a:	68 1f d1 02 c0       	push   0xc002d11f
c0024f0f:	e8 1b 57 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0024f14:	83 c4 10             	add    esp,0x10
c0024f17:	eb 43                	jmp    c0024f5c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f19:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f1f:	0f ba e0 1e          	bt     eax,0x1e
c0024f23:	73 17                	jae    c0024f3c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f25:	83 ec 0c             	sub    esp,0xc
c0024f28:	68 1f d1 02 c0       	push   0xc002d11f
c0024f2d:	e8 fd 56 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0024f32:	bb 01 00 00 00       	mov    ebx,0x1
c0024f37:	83 c4 10             	add    esp,0x10
c0024f3a:	eb 20                	jmp    c0024f5c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f3c:	31 db                	xor    ebx,ebx
c0024f3e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f43:	75 17                	jne    c0024f5c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f45:	50                   	push   eax
c0024f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f4a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f54:	e8 eb b7 fd ff       	call   c0000744 <memcpy>
c0024f59:	83 c4 10             	add    esp,0x10
c0024f5c:	83 c4 2c             	add    esp,0x2c
c0024f5f:	89 d8                	mov    eax,ebx
c0024f61:	5b                   	pop    ebx
c0024f62:	5e                   	pop    esi
c0024f63:	5f                   	pop    edi
c0024f64:	5d                   	pop    ebp
c0024f65:	c3                   	ret    

c0024f66 <SATA::read(unsigned long long, int, void*)>:
c0024f66:	57                   	push   edi
c0024f67:	b8 04 00 00 00       	mov    eax,0x4
c0024f6c:	56                   	push   esi
c0024f6d:	53                   	push   ebx
c0024f6e:	83 ec 10             	sub    esp,0x10
c0024f71:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f75:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f79:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f7c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f84:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f8a:	77 3b                	ja     c0024fc7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f8c:	b8 06 00 00 00       	mov    eax,0x6
c0024f91:	85 d2                	test   edx,edx
c0024f93:	74 32                	je     c0024fc7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f95:	50                   	push   eax
c0024f96:	50                   	push   eax
c0024f97:	6a 00                	push   0x0
c0024f99:	52                   	push   edx
c0024f9a:	53                   	push   ebx
c0024f9b:	57                   	push   edi
c0024f9c:	56                   	push   esi
c0024f9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fa1:	e8 5a fd ff ff       	call   c0024d00 <SATA::access(unsigned long long, int, void*, bool)>
c0024fa6:	83 c4 20             	add    esp,0x20
c0024fa9:	85 c0                	test   eax,eax
c0024fab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024faf:	75 11                	jne    c0024fc2 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024fb1:	01 1d c8 29 03 c0    	add    DWORD PTR ds:0xc00329c8,ebx
c0024fb7:	e8 30 ba fe ff       	call   c00109ec <VgaText::updateDiskUsage()>
c0024fbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024fc0:	eb 05                	jmp    c0024fc7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fc2:	b8 01 00 00 00       	mov    eax,0x1
c0024fc7:	83 c4 10             	add    esp,0x10
c0024fca:	5b                   	pop    ebx
c0024fcb:	5e                   	pop    esi
c0024fcc:	5f                   	pop    edi
c0024fcd:	c3                   	ret    

c0024fce <SATA::write(unsigned long long, int, void*)>:
c0024fce:	55                   	push   ebp
c0024fcf:	b8 04 00 00 00       	mov    eax,0x4
c0024fd4:	57                   	push   edi
c0024fd5:	56                   	push   esi
c0024fd6:	53                   	push   ebx
c0024fd7:	83 ec 1c             	sub    esp,0x1c
c0024fda:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024fde:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024fe2:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024fe5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024fe9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024fed:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024ff3:	77 56                	ja     c002504b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024ff5:	b8 06 00 00 00       	mov    eax,0x6
c0024ffa:	85 ff                	test   edi,edi
c0024ffc:	74 4d                	je     c002504b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024ffe:	89 ee                	mov    esi,ebp
c0025000:	c1 e6 09             	shl    esi,0x9
c0025003:	01 fe                	add    esi,edi
c0025005:	89 c8                	mov    eax,ecx
c0025007:	89 da                	mov    edx,ebx
c0025009:	83 c0 01             	add    eax,0x1
c002500c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025010:	83 d2 00             	adc    edx,0x0
c0025013:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025017:	50                   	push   eax
c0025018:	50                   	push   eax
c0025019:	6a 01                	push   0x1
c002501b:	57                   	push   edi
c002501c:	81 c7 00 02 00 00    	add    edi,0x200
c0025022:	6a 01                	push   0x1
c0025024:	53                   	push   ebx
c0025025:	51                   	push   ecx
c0025026:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002502a:	e8 d1 fc ff ff       	call   c0024d00 <SATA::access(unsigned long long, int, void*, bool)>
c002502f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025033:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025037:	83 c4 20             	add    esp,0x20
c002503a:	39 f7                	cmp    edi,esi
c002503c:	75 c7                	jne    c0025005 <SATA::write(unsigned long long, int, void*)+0x37>
c002503e:	01 2d c4 29 03 c0    	add    DWORD PTR ds:0xc00329c4,ebp
c0025044:	e8 a3 b9 fe ff       	call   c00109ec <VgaText::updateDiskUsage()>
c0025049:	31 c0                	xor    eax,eax
c002504b:	83 c4 1c             	add    esp,0x1c
c002504e:	5b                   	pop    ebx
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	5d                   	pop    ebp
c0025052:	c3                   	ret    
c0025053:	90                   	nop

c0025054 <SATAPI::write(unsigned long long, int, void*)>:
c0025054:	b8 03 00 00 00       	mov    eax,0x3
c0025059:	c3                   	ret    

c002505a <SATAPI::close(int, int, void*)>:
c002505a:	83 ec 0c             	sub    esp,0xc
c002505d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025061:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025067:	85 c0                	test   eax,eax
c0025069:	74 0c                	je     c0025077 <SATAPI::close(int, int, void*)+0x1d>
c002506b:	83 ec 0c             	sub    esp,0xc
c002506e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025070:	50                   	push   eax
c0025071:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025074:	83 c4 10             	add    esp,0x10
c0025077:	31 c0                	xor    eax,eax
c0025079:	83 c4 0c             	add    esp,0xc
c002507c:	c3                   	ret    
c002507d:	90                   	nop

c002507e <SATAPI::SATAPI()>:
c002507e:	83 ec 0c             	sub    esp,0xc
c0025081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025085:	83 ec 04             	sub    esp,0x4
c0025088:	68 00 08 00 00       	push   0x800
c002508d:	68 68 d1 02 c0       	push   0xc002d168
c0025092:	50                   	push   eax
c0025093:	e8 30 f7 fe ff       	call   c00147c8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025098:	83 c4 10             	add    esp,0x10
c002509b:	ba 14 d2 02 c0       	mov    edx,0xc002d214
c00250a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a4:	89 10                	mov    DWORD PTR [eax],edx
c00250a6:	90                   	nop
c00250a7:	83 c4 0c             	add    esp,0xc
c00250aa:	c3                   	ret    
c00250ab:	90                   	nop

c00250ac <SATAPI::diskRemoved()>:
c00250ac:	83 ec 18             	sub    esp,0x18
c00250af:	68 74 d1 02 c0       	push   0xc002d174
c00250b4:	e8 c4 de fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00250b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250bd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00250c4:	83 c4 1c             	add    esp,0x1c
c00250c7:	c3                   	ret    

c00250c8 <SATAPI::diskInserted()>:
c00250c8:	53                   	push   ebx
c00250c9:	83 ec 14             	sub    esp,0x14
c00250cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00250d0:	68 8b d1 02 c0       	push   0xc002d18b
c00250d5:	e8 a3 de fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00250da:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00250e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250e4:	e8 47 f7 fe ff       	call   c0014830 <PhysicalDisk::startCache()>
c00250e9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00250ed:	83 c4 18             	add    esp,0x18
c00250f0:	5b                   	pop    ebx
c00250f1:	e9 c0 18 ff ff       	jmp    c00169b6 <createPartitionsForDisk(PhysicalDisk*)>

c00250f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00250f6:	55                   	push   ebp
c00250f7:	57                   	push   edi
c00250f8:	56                   	push   esi
c00250f9:	53                   	push   ebx
c00250fa:	83 ec 24             	sub    esp,0x24
c00250fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025101:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025105:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002510b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002510f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025113:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025119:	8d 5f 02             	lea    ebx,[edi+0x2]
c002511c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025122:	c1 e3 07             	shl    ebx,0x7
c0025125:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025129:	89 f8                	mov    eax,edi
c002512b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002512f:	c1 e0 07             	shl    eax,0x7
c0025132:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025136:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002513a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025144:	53                   	push   ebx
c0025145:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002514b:	e8 d6 eb ff ff       	call   c0023d26 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025150:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025154:	83 c4 10             	add    esp,0x10
c0025157:	b8 01 00 00 00       	mov    eax,0x1
c002515c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025161:	0f 84 8a 01 00 00    	je     c00252f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025167:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002516d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002516f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025175:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002517b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002517f:	c1 e1 05             	shl    ecx,0x5
c0025182:	01 c8                	add    eax,ecx
c0025184:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025186:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002518c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025192:	89 08                	mov    DWORD PTR [eax],ecx
c0025194:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002519a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00251a0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00251a6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00251a9:	52                   	push   edx
c00251aa:	68 90 00 00 00       	push   0x90
c00251af:	6a 00                	push   0x0
c00251b1:	53                   	push   ebx
c00251b2:	e8 c1 b5 fd ff       	call   c0000778 <memset>
c00251b7:	83 c4 0c             	add    esp,0xc
c00251ba:	8d 43 40             	lea    eax,[ebx+0x40]
c00251bd:	6a 0c                	push   0xc
c00251bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251c3:	50                   	push   eax
c00251c4:	e8 7b b5 fd ff       	call   c0000744 <memcpy>
c00251c9:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00251cf:	89 ea                	mov    edx,ebp
c00251d1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00251d7:	c1 ea 18             	shr    edx,0x18
c00251da:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251de:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00251e1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00251e4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00251e8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00251ee:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00251f4:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251f9:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251fd:	09 c8                	or     eax,ecx
c00251ff:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025203:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025209:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002520c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025213:	66 25 00 7f          	and    ax,0x7f00
c0025217:	66 0d 27 80          	or     ax,0x8027
c002521b:	66 89 03             	mov    WORD PTR [ebx],ax
c002521e:	89 e8                	mov    eax,ebp
c0025220:	c1 e8 10             	shr    eax,0x10
c0025223:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025226:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002522a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002522d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025231:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025234:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025238:	83 c4 10             	add    esp,0x10
c002523b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002523f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025243:	31 c0                	xor    eax,eax
c0025245:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002524b:	80 e1 88             	and    cl,0x88
c002524e:	74 0a                	je     c002525a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025250:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025255:	74 0a                	je     c0025261 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025257:	40                   	inc    eax
c0025258:	eb eb                	jmp    c0025245 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002525a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002525f:	75 0f                	jne    c0025270 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025261:	83 ec 0c             	sub    esp,0xc
c0025264:	68 11 d1 02 c0       	push   0xc002d111
c0025269:	e8 c1 53 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c002526e:	eb 3a                	jmp    c00252aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025270:	b8 01 00 00 00       	mov    eax,0x1
c0025275:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025279:	c1 e7 07             	shl    edi,0x7
c002527c:	d3 e0                	shl    eax,cl
c002527e:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025281:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025287:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002528d:	85 d0                	test   eax,edx
c002528f:	74 23                	je     c00252b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025291:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025297:	0f ba e2 1e          	bt     edx,0x1e
c002529b:	73 ea                	jae    c0025287 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002529d:	83 ec 0c             	sub    esp,0xc
c00252a0:	68 a3 d1 02 c0       	push   0xc002d1a3
c00252a5:	e8 d3 dc fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c00252aa:	83 c4 10             	add    esp,0x10
c00252ad:	b8 01 00 00 00       	mov    eax,0x1
c00252b2:	eb 3d                	jmp    c00252f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252b4:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00252ba:	0f ba e0 1e          	bt     eax,0x1e
c00252be:	73 0a                	jae    c00252ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00252c0:	83 ec 0c             	sub    esp,0xc
c00252c3:	68 b6 d1 02 c0       	push   0xc002d1b6
c00252c8:	eb db                	jmp    c00252a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00252ca:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00252cf:	74 1e                	je     c00252ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252d1:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00252d6:	74 17                	je     c00252ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252d8:	50                   	push   eax
c00252d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252dd:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00252e3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00252e7:	e8 58 b4 fd ff       	call   c0000744 <memcpy>
c00252ec:	83 c4 10             	add    esp,0x10
c00252ef:	31 c0                	xor    eax,eax
c00252f1:	83 c4 1c             	add    esp,0x1c
c00252f4:	5b                   	pop    ebx
c00252f5:	5e                   	pop    esi
c00252f6:	5f                   	pop    edi
c00252f7:	5d                   	pop    ebp
c00252f8:	c3                   	ret    
c00252f9:	90                   	nop

c00252fa <SATAPI::eject()>:
c00252fa:	57                   	push   edi
c00252fb:	b9 03 00 00 00       	mov    ecx,0x3
c0025300:	53                   	push   ebx
c0025301:	83 ec 14             	sub    esp,0x14
c0025304:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025308:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002530c:	fc                   	cld    
c002530d:	31 c0                	xor    eax,eax
c002530f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025311:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025316:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002531b:	50                   	push   eax
c002531c:	6a 00                	push   0x0
c002531e:	6a 00                	push   0x0
c0025320:	6a 00                	push   0x0
c0025322:	6a 00                	push   0x0
c0025324:	6a 02                	push   0x2
c0025326:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002532a:	50                   	push   eax
c002532b:	53                   	push   ebx
c002532c:	e8 c5 fd ff ff       	call   c00250f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025331:	83 c4 14             	add    esp,0x14
c0025334:	53                   	push   ebx
c0025335:	e8 72 fd ff ff       	call   c00250ac <SATAPI::diskRemoved()>
c002533a:	83 c4 24             	add    esp,0x24
c002533d:	31 c0                	xor    eax,eax
c002533f:	5b                   	pop    ebx
c0025340:	5f                   	pop    edi
c0025341:	c3                   	ret    

c0025342 <SATAPI::detectMedia()>:
c0025342:	56                   	push   esi
c0025343:	53                   	push   ebx
c0025344:	83 ec 28             	sub    esp,0x28
c0025347:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002534b:	6a 0c                	push   0xc
c002534d:	6a 00                	push   0x0
c002534f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025353:	56                   	push   esi
c0025354:	e8 1f b4 fd ff       	call   c0000778 <memset>
c0025359:	83 c4 0c             	add    esp,0xc
c002535c:	6a 00                	push   0x0
c002535e:	6a 00                	push   0x0
c0025360:	6a 00                	push   0x0
c0025362:	6a 00                	push   0x0
c0025364:	6a 00                	push   0x0
c0025366:	56                   	push   esi
c0025367:	53                   	push   ebx
c0025368:	e8 89 fd ff ff       	call   c00250f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002536d:	83 c4 1c             	add    esp,0x1c
c0025370:	6a 0c                	push   0xc
c0025372:	6a 00                	push   0x0
c0025374:	56                   	push   esi
c0025375:	e8 fe b3 fd ff       	call   c0000778 <memset>
c002537a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002537f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025384:	83 c4 0c             	add    esp,0xc
c0025387:	6a 01                	push   0x1
c0025389:	8d 44 24 16          	lea    eax,[esp+0x16]
c002538d:	50                   	push   eax
c002538e:	6a 00                	push   0x0
c0025390:	6a 00                	push   0x0
c0025392:	6a 12                	push   0x12
c0025394:	56                   	push   esi
c0025395:	53                   	push   ebx
c0025396:	e8 5b fd ff ff       	call   c00250f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002539b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002539f:	83 c4 20             	add    esp,0x20
c00253a2:	83 e0 7f             	and    eax,0x7f
c00253a5:	3c 70                	cmp    al,0x70
c00253a7:	74 15                	je     c00253be <SATAPI::detectMedia()+0x7c>
c00253a9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253b0:	75 0c                	jne    c00253be <SATAPI::detectMedia()+0x7c>
c00253b2:	83 ec 0c             	sub    esp,0xc
c00253b5:	53                   	push   ebx
c00253b6:	e8 0d fd ff ff       	call   c00250c8 <SATAPI::diskInserted()>
c00253bb:	83 c4 10             	add    esp,0x10
c00253be:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00253c2:	83 e0 0f             	and    eax,0xf
c00253c5:	3c 02                	cmp    al,0x2
c00253c7:	75 1b                	jne    c00253e4 <SATAPI::detectMedia()+0xa2>
c00253c9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00253ce:	75 2d                	jne    c00253fd <SATAPI::detectMedia()+0xbb>
c00253d0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253d7:	74 24                	je     c00253fd <SATAPI::detectMedia()+0xbb>
c00253d9:	83 ec 0c             	sub    esp,0xc
c00253dc:	53                   	push   ebx
c00253dd:	e8 ca fc ff ff       	call   c00250ac <SATAPI::diskRemoved()>
c00253e2:	eb 16                	jmp    c00253fa <SATAPI::detectMedia()+0xb8>
c00253e4:	84 c0                	test   al,al
c00253e6:	75 15                	jne    c00253fd <SATAPI::detectMedia()+0xbb>
c00253e8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253ef:	75 0c                	jne    c00253fd <SATAPI::detectMedia()+0xbb>
c00253f1:	83 ec 0c             	sub    esp,0xc
c00253f4:	53                   	push   ebx
c00253f5:	e8 ce fc ff ff       	call   c00250c8 <SATAPI::diskInserted()>
c00253fa:	83 c4 10             	add    esp,0x10
c00253fd:	83 c4 24             	add    esp,0x24
c0025400:	5b                   	pop    ebx
c0025401:	5e                   	pop    esi
c0025402:	c3                   	ret    
c0025403:	90                   	nop

c0025404 <SATAPI::open(int, int, void*)>:
c0025404:	56                   	push   esi
c0025405:	53                   	push   ebx
c0025406:	50                   	push   eax
c0025407:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002540b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002540f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025419:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002541f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025429:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002542d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025437:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002543d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025444:	e8 99 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c0025449:	89 c6                	mov    esi,eax
c002544b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025451:	81 c6 00 10 00 00    	add    esi,0x1000
c0025457:	e8 86 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c002545c:	39 c6                	cmp    esi,eax
c002545e:	74 10                	je     c0025470 <SATAPI::open(int, int, void*)+0x6c>
c0025460:	83 ec 0c             	sub    esp,0xc
c0025463:	68 cb d1 02 c0       	push   0xc002d1cb
c0025468:	e8 c2 51 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c002546d:	83 c4 10             	add    esp,0x10
c0025470:	83 ec 0c             	sub    esp,0xc
c0025473:	6a 02                	push   0x2
c0025475:	e8 1d c7 fe ff       	call   c0011b97 <Virt::allocateKernelVirtualPages(int)>
c002547a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025480:	e8 ad c9 fe ff       	call   c0011e32 <Virt::getAKernelVAS()>
c0025485:	6a 03                	push   0x3
c0025487:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002548d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025493:	50                   	push   eax
c0025494:	e8 d5 ce fe ff       	call   c001236e <VAS::mapPage(unsigned long, unsigned long, int)>
c0025499:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00254a0:	83 c4 14             	add    esp,0x14
c00254a3:	53                   	push   ebx
c00254a4:	e8 99 fe ff ff       	call   c0025342 <SATAPI::detectMedia()>
c00254a9:	83 c4 14             	add    esp,0x14
c00254ac:	31 c0                	xor    eax,eax
c00254ae:	5b                   	pop    ebx
c00254af:	5e                   	pop    esi
c00254b0:	c3                   	ret    
c00254b1:	90                   	nop

c00254b2 <SATAPI::read(unsigned long long, int, void*)>:
c00254b2:	55                   	push   ebp
c00254b3:	57                   	push   edi
c00254b4:	56                   	push   esi
c00254b5:	53                   	push   ebx
c00254b6:	83 ec 1c             	sub    esp,0x1c
c00254b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00254bd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00254c5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254cc:	74 19                	je     c00254e7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00254ce:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00254d3:	7e 2e                	jle    c0025503 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254d5:	83 ec 0c             	sub    esp,0xc
c00254d8:	68 e1 d1 02 c0       	push   0xc002d1e1
c00254dd:	e8 4d 51 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c00254e2:	83 c4 10             	add    esp,0x10
c00254e5:	eb 1c                	jmp    c0025503 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254e7:	83 ec 0c             	sub    esp,0xc
c00254ea:	55                   	push   ebp
c00254eb:	e8 52 fe ff ff       	call   c0025342 <SATAPI::detectMedia()>
c00254f0:	83 c4 10             	add    esp,0x10
c00254f3:	b8 02 00 00 00       	mov    eax,0x2
c00254f8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254ff:	75 cd                	jne    c00254ce <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025501:	eb 49                	jmp    c002554c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025503:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025507:	b9 03 00 00 00       	mov    ecx,0x3
c002550c:	fc                   	cld    
c002550d:	31 c0                	xor    eax,eax
c002550f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025511:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025516:	89 d8                	mov    eax,ebx
c0025518:	86 e0                	xchg   al,ah
c002551a:	c1 c0 10             	rol    eax,0x10
c002551d:	86 e0                	xchg   al,ah
c002551f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025523:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025527:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002552b:	50                   	push   eax
c002552c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025530:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025534:	56                   	push   esi
c0025535:	53                   	push   ebx
c0025536:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002553a:	c1 e0 0b             	shl    eax,0xb
c002553d:	50                   	push   eax
c002553e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025542:	50                   	push   eax
c0025543:	55                   	push   ebp
c0025544:	e8 ad fb ff ff       	call   c00250f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025549:	83 c4 20             	add    esp,0x20
c002554c:	83 c4 1c             	add    esp,0x1c
c002554f:	5b                   	pop    ebx
c0025550:	5e                   	pop    esi
c0025551:	5f                   	pop    edi
c0025552:	5d                   	pop    ebp
c0025553:	c3                   	ret    

c0025554 <AVX::open(int, int, void*)>:
c0025554:	83 ec 0c             	sub    esp,0xc
c0025557:	e8 3c 11 00 00       	call   c0026698 <avxInit>
c002555c:	b8 00 00 00 00       	mov    eax,0x0
c0025561:	83 c4 0c             	add    esp,0xc
c0025564:	c3                   	ret    
c0025565:	90                   	nop

c0025566 <AVX::close(int, int, void*)>:
c0025566:	83 ec 0c             	sub    esp,0xc
c0025569:	e8 2b 11 00 00       	call   c0026699 <avxClose>
c002556e:	b8 00 00 00 00       	mov    eax,0x0
c0025573:	83 c4 0c             	add    esp,0xc
c0025576:	c3                   	ret    
c0025577:	90                   	nop

c0025578 <AVX::available()>:
c0025578:	83 ec 0c             	sub    esp,0xc
c002557b:	e8 10 11 00 00       	call   c0026690 <avxDetect>
c0025580:	85 c0                	test   eax,eax
c0025582:	0f 95 c0             	setne  al
c0025585:	83 c4 0c             	add    esp,0xc
c0025588:	c3                   	ret    
c0025589:	90                   	nop

c002558a <AVX::save(void*)>:
c002558a:	83 ec 0c             	sub    esp,0xc
c002558d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025591:	83 ec 0c             	sub    esp,0xc
c0025594:	50                   	push   eax
c0025595:	e8 fc 10 00 00       	call   c0026696 <avxSave>
c002559a:	83 c4 10             	add    esp,0x10
c002559d:	90                   	nop
c002559e:	83 c4 0c             	add    esp,0xc
c00255a1:	c3                   	ret    

c00255a2 <AVX::load(void*)>:
c00255a2:	83 ec 0c             	sub    esp,0xc
c00255a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255a9:	83 ec 0c             	sub    esp,0xc
c00255ac:	50                   	push   eax
c00255ad:	e8 e5 10 00 00       	call   c0026697 <avxLoad>
c00255b2:	83 c4 10             	add    esp,0x10
c00255b5:	90                   	nop
c00255b6:	83 c4 0c             	add    esp,0xc
c00255b9:	c3                   	ret    

c00255ba <AVX::AVX()>:
c00255ba:	83 ec 0c             	sub    esp,0xc
c00255bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c1:	83 ec 08             	sub    esp,0x8
c00255c4:	68 44 d2 02 c0       	push   0xc002d244
c00255c9:	50                   	push   eax
c00255ca:	e8 d7 f2 fe ff       	call   c00148a6 <FPU::FPU(char const*)>
c00255cf:	83 c4 10             	add    esp,0x10
c00255d2:	ba 54 d2 02 c0       	mov    edx,0xc002d254
c00255d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255db:	89 10                	mov    DWORD PTR [eax],edx
c00255dd:	90                   	nop
c00255de:	83 c4 0c             	add    esp,0xc
c00255e1:	c3                   	ret    

c00255e2 <MMX::available()>:
c00255e2:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00255e7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255ed:	83 e0 20             	and    eax,0x20
c00255f0:	84 c0                	test   al,al
c00255f2:	0f 95 c0             	setne  al
c00255f5:	c3                   	ret    

c00255f6 <MMX::open(int, int, void*)>:
c00255f6:	83 ec 0c             	sub    esp,0xc
c00255f9:	e8 1e 11 00 00       	call   c002671c <x87Init>
c00255fe:	b8 00 00 00 00       	mov    eax,0x0
c0025603:	83 c4 0c             	add    esp,0xc
c0025606:	c3                   	ret    
c0025607:	90                   	nop

c0025608 <MMX::close(int, int, void*)>:
c0025608:	83 ec 0c             	sub    esp,0xc
c002560b:	e8 26 11 00 00       	call   c0026736 <x87Close>
c0025610:	b8 00 00 00 00       	mov    eax,0x0
c0025615:	83 c4 0c             	add    esp,0xc
c0025618:	c3                   	ret    
c0025619:	90                   	nop

c002561a <MMX::save(void*)>:
c002561a:	83 ec 0c             	sub    esp,0xc
c002561d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025621:	83 ec 0c             	sub    esp,0xc
c0025624:	50                   	push   eax
c0025625:	e8 e7 10 00 00       	call   c0026711 <x87Save>
c002562a:	83 c4 10             	add    esp,0x10
c002562d:	90                   	nop
c002562e:	83 c4 0c             	add    esp,0xc
c0025631:	c3                   	ret    

c0025632 <MMX::load(void*)>:
c0025632:	83 ec 0c             	sub    esp,0xc
c0025635:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025639:	83 ec 0c             	sub    esp,0xc
c002563c:	50                   	push   eax
c002563d:	e8 d5 10 00 00       	call   c0026717 <x87Load>
c0025642:	83 c4 10             	add    esp,0x10
c0025645:	90                   	nop
c0025646:	83 c4 0c             	add    esp,0xc
c0025649:	c3                   	ret    

c002564a <MMX::MMX()>:
c002564a:	83 ec 0c             	sub    esp,0xc
c002564d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025651:	83 ec 08             	sub    esp,0x8
c0025654:	68 84 d2 02 c0       	push   0xc002d284
c0025659:	50                   	push   eax
c002565a:	e8 47 f2 fe ff       	call   c00148a6 <FPU::FPU(char const*)>
c002565f:	83 c4 10             	add    esp,0x10
c0025662:	ba 94 d2 02 c0       	mov    edx,0xc002d294
c0025667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002566b:	89 10                	mov    DWORD PTR [eax],edx
c002566d:	90                   	nop
c002566e:	83 c4 0c             	add    esp,0xc
c0025671:	c3                   	ret    

c0025672 <SSE::open(int, int, void*)>:
c0025672:	83 ec 0c             	sub    esp,0xc
c0025675:	e8 5a 10 00 00       	call   c00266d4 <sseInit>
c002567a:	b8 00 00 00 00       	mov    eax,0x0
c002567f:	83 c4 0c             	add    esp,0xc
c0025682:	c3                   	ret    
c0025683:	90                   	nop

c0025684 <SSE::close(int, int, void*)>:
c0025684:	83 ec 0c             	sub    esp,0xc
c0025687:	e8 58 10 00 00       	call   c00266e4 <sseClose>
c002568c:	b8 00 00 00 00       	mov    eax,0x0
c0025691:	83 c4 0c             	add    esp,0xc
c0025694:	c3                   	ret    
c0025695:	90                   	nop

c0025696 <SSE::available()>:
c0025696:	83 ec 1c             	sub    esp,0x1c
c0025699:	e8 12 10 00 00       	call   c00266b0 <absolutelyNoChanceInHell>
c002569e:	85 c0                	test   eax,eax
c00256a0:	0f 95 c0             	setne  al
c00256a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00256a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00256ab:	83 c4 1c             	add    esp,0x1c
c00256ae:	c3                   	ret    
c00256af:	90                   	nop

c00256b0 <SSE::save(void*)>:
c00256b0:	83 ec 0c             	sub    esp,0xc
c00256b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256b7:	83 ec 0c             	sub    esp,0xc
c00256ba:	50                   	push   eax
c00256bb:	e8 08 10 00 00       	call   c00266c8 <sseSave>
c00256c0:	83 c4 10             	add    esp,0x10
c00256c3:	90                   	nop
c00256c4:	83 c4 0c             	add    esp,0xc
c00256c7:	c3                   	ret    

c00256c8 <SSE::load(void*)>:
c00256c8:	83 ec 0c             	sub    esp,0xc
c00256cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256cf:	83 ec 0c             	sub    esp,0xc
c00256d2:	50                   	push   eax
c00256d3:	e8 f6 0f 00 00       	call   c00266ce <sseLoad>
c00256d8:	83 c4 10             	add    esp,0x10
c00256db:	90                   	nop
c00256dc:	83 c4 0c             	add    esp,0xc
c00256df:	c3                   	ret    

c00256e0 <SSE::SSE()>:
c00256e0:	83 ec 0c             	sub    esp,0xc
c00256e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256e7:	83 ec 08             	sub    esp,0x8
c00256ea:	68 c4 d2 02 c0       	push   0xc002d2c4
c00256ef:	50                   	push   eax
c00256f0:	e8 b1 f1 fe ff       	call   c00148a6 <FPU::FPU(char const*)>
c00256f5:	83 c4 10             	add    esp,0x10
c00256f8:	ba d4 d2 02 c0       	mov    edx,0xc002d2d4
c00256fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025701:	89 10                	mov    DWORD PTR [eax],edx
c0025703:	90                   	nop
c0025704:	83 c4 0c             	add    esp,0xc
c0025707:	c3                   	ret    

c0025708 <x87::open(int, int, void*)>:
c0025708:	83 ec 0c             	sub    esp,0xc
c002570b:	e8 0c 10 00 00       	call   c002671c <x87Init>
c0025710:	b8 00 00 00 00       	mov    eax,0x0
c0025715:	83 c4 0c             	add    esp,0xc
c0025718:	c3                   	ret    
c0025719:	90                   	nop

c002571a <x87::close(int, int, void*)>:
c002571a:	83 ec 0c             	sub    esp,0xc
c002571d:	e8 14 10 00 00       	call   c0026736 <x87Close>
c0025722:	b8 00 00 00 00       	mov    eax,0x0
c0025727:	83 c4 0c             	add    esp,0xc
c002572a:	c3                   	ret    
c002572b:	90                   	nop

c002572c <x87::available()>:
c002572c:	83 ec 0c             	sub    esp,0xc
c002572f:	e8 c2 0f 00 00       	call   c00266f6 <x87Detect>
c0025734:	85 c0                	test   eax,eax
c0025736:	0f 95 c0             	setne  al
c0025739:	83 c4 0c             	add    esp,0xc
c002573c:	c3                   	ret    
c002573d:	90                   	nop

c002573e <x87::save(void*)>:
c002573e:	83 ec 0c             	sub    esp,0xc
c0025741:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025745:	83 ec 0c             	sub    esp,0xc
c0025748:	50                   	push   eax
c0025749:	e8 c3 0f 00 00       	call   c0026711 <x87Save>
c002574e:	83 c4 10             	add    esp,0x10
c0025751:	90                   	nop
c0025752:	83 c4 0c             	add    esp,0xc
c0025755:	c3                   	ret    

c0025756 <x87::load(void*)>:
c0025756:	83 ec 0c             	sub    esp,0xc
c0025759:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002575d:	83 ec 0c             	sub    esp,0xc
c0025760:	50                   	push   eax
c0025761:	e8 b1 0f 00 00       	call   c0026717 <x87Load>
c0025766:	83 c4 10             	add    esp,0x10
c0025769:	90                   	nop
c002576a:	83 c4 0c             	add    esp,0xc
c002576d:	c3                   	ret    

c002576e <x87::x87()>:
c002576e:	83 ec 0c             	sub    esp,0xc
c0025771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025775:	83 ec 08             	sub    esp,0x8
c0025778:	68 04 d3 02 c0       	push   0xc002d304
c002577d:	50                   	push   eax
c002577e:	e8 23 f1 fe ff       	call   c00148a6 <FPU::FPU(char const*)>
c0025783:	83 c4 10             	add    esp,0x10
c0025786:	ba 14 d3 02 c0       	mov    edx,0xc002d314
c002578b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002578f:	89 10                	mov    DWORD PTR [eax],edx
c0025791:	90                   	nop
c0025792:	83 c4 0c             	add    esp,0xc
c0025795:	c3                   	ret    

c0025796 <APIC::disable()>:
c0025796:	90                   	nop
c0025797:	c3                   	ret    

c0025798 <APIC::close(int, int, void*)>:
c0025798:	55                   	push   ebp
c0025799:	89 e5                	mov    ebp,esp
c002579b:	83 ec 08             	sub    esp,0x8
c002579e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00257a3:	83 c0 3c             	add    eax,0x3c
c00257a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00257a8:	83 ec 0c             	sub    esp,0xc
c00257ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ae:	ff d0                	call   eax
c00257b0:	83 c4 10             	add    esp,0x10
c00257b3:	b8 00 00 00 00       	mov    eax,0x0
c00257b8:	c9                   	leave  
c00257b9:	c3                   	ret    

c00257ba <IOAPIC::close(int, int, void*)>:
c00257ba:	b8 00 00 00 00       	mov    eax,0x0
c00257bf:	c3                   	ret    

c00257c0 <APIC::io_wait()>:
c00257c0:	eb 00                	jmp    c00257c2 <APIC::io_wait()+0x2>
c00257c2:	eb 00                	jmp    c00257c4 <APIC::io_wait()+0x4>
c00257c4:	90                   	nop
c00257c5:	c3                   	ret    

c00257c6 <APIC::getBase()>:
c00257c6:	55                   	push   ebp
c00257c7:	89 e5                	mov    ebp,esp
c00257c9:	83 ec 18             	sub    esp,0x18
c00257cc:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00257d1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00257d7:	83 e0 08             	and    eax,0x8
c00257da:	84 c0                	test   al,al
c00257dc:	75 07                	jne    c00257e5 <APIC::getBase()+0x1f>
c00257de:	b8 00 00 00 00       	mov    eax,0x0
c00257e3:	eb 21                	jmp    c0025806 <APIC::getBase()+0x40>
c00257e5:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00257ea:	83 ec 08             	sub    esp,0x8
c00257ed:	6a 1b                	push   0x1b
c00257ef:	50                   	push   eax
c00257f0:	e8 f3 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00257f5:	83 c4 10             	add    esp,0x10
c00257f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025801:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025806:	c9                   	leave  
c0025807:	c3                   	ret    

c0025808 <APIC::eoi(unsigned char)>:
c0025808:	55                   	push   ebp
c0025809:	89 e5                	mov    ebp,esp
c002580b:	83 ec 28             	sub    esp,0x28
c002580e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025811:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025814:	83 ec 0c             	sub    esp,0xc
c0025817:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002581a:	e8 a7 ff ff ff       	call   c00257c6 <APIC::getBase()>
c002581f:	83 c4 10             	add    esp,0x10
c0025822:	05 b0 00 00 00       	add    eax,0xb0
c0025827:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002582a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002582d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025833:	90                   	nop
c0025834:	c9                   	leave  
c0025835:	c3                   	ret    

c0025836 <APIC::open(int, int, void*)>:
c0025836:	55                   	push   ebp
c0025837:	89 e5                	mov    ebp,esp
c0025839:	57                   	push   edi
c002583a:	56                   	push   esi
c002583b:	53                   	push   ebx
c002583c:	83 ec 2c             	sub    esp,0x2c
c002583f:	83 ec 0c             	sub    esp,0xc
c0025842:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025845:	e8 7c ff ff ff       	call   c00257c6 <APIC::getBase()>
c002584a:	83 c4 10             	add    esp,0x10
c002584d:	89 c2                	mov    edx,eax
c002584f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025852:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025858:	0f b6 f8             	movzx  edi,al
c002585b:	89 d0                	mov    eax,edx
c002585d:	ba 00 00 00 00       	mov    edx,0x0
c0025862:	89 c1                	mov    ecx,eax
c0025864:	80 e5 ff             	and    ch,0xff
c0025867:	89 cb                	mov    ebx,ecx
c0025869:	0f b6 f2             	movzx  esi,dl
c002586c:	89 d8                	mov    eax,ebx
c002586e:	89 f2                	mov    edx,esi
c0025870:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025873:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025876:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002587a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002587e:	83 e0 00             	and    eax,0x0
c0025881:	09 d0                	or     eax,edx
c0025883:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002588a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025890:	8d 50 01             	lea    edx,[eax+0x1]
c0025893:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025896:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002589c:	0f b6 d0             	movzx  edx,al
c002589f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258a2:	83 c2 08             	add    edx,0x8
c00258a5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258a9:	0f b6 c9             	movzx  ecx,cl
c00258ac:	81 c9 00 00 01 00    	or     ecx,0x10000
c00258b2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258b6:	83 ec 0c             	sub    esp,0xc
c00258b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258bc:	e8 05 ff ff ff       	call   c00257c6 <APIC::getBase()>
c00258c1:	83 c4 10             	add    esp,0x10
c00258c4:	05 f0 00 00 00       	add    eax,0xf0
c00258c9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00258cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00258d1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258d4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00258db:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00258e2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258e5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258e8:	89 10                	mov    DWORD PTR [eax],edx
c00258ea:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00258f1:	a1 50 0f 03 c0       	mov    eax,ds:0xc0030f50
c00258f6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258f9:	7d 7c                	jge    c0025977 <APIC::open(int, int, void*)+0x141>
c00258fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258fe:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c0025905:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025908:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002590b:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c0025912:	c1 e8 08             	shr    eax,0x8
c0025915:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025919:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002591c:	8b 04 85 60 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0a0]
c0025923:	c1 e8 18             	shr    eax,0x18
c0025926:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025929:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002592d:	75 40                	jne    c002596f <APIC::open(int, int, void*)+0x139>
c002592f:	83 ec 0c             	sub    esp,0xc
c0025932:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025935:	e8 8c fe ff ff       	call   c00257c6 <APIC::getBase()>
c002593a:	83 c4 10             	add    esp,0x10
c002593d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025941:	75 07                	jne    c002594a <APIC::open(int, int, void*)+0x114>
c0025943:	ba 60 03 00 00       	mov    edx,0x360
c0025948:	eb 05                	jmp    c002594f <APIC::open(int, int, void*)+0x119>
c002594a:	ba 50 03 00 00       	mov    edx,0x350
c002594f:	01 d0                	add    eax,edx
c0025951:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025954:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025957:	8b 00                	mov    eax,DWORD PTR [eax]
c0025959:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002595c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025963:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025967:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002596a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002596d:	89 10                	mov    DWORD PTR [eax],edx
c002596f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025972:	e9 7a ff ff ff       	jmp    c00258f1 <APIC::open(int, int, void*)+0xbb>
c0025977:	b8 00 00 00 00       	mov    eax,0x0
c002597c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002597f:	5b                   	pop    ebx
c0025980:	5e                   	pop    esi
c0025981:	5f                   	pop    edi
c0025982:	5d                   	pop    ebp
c0025983:	c3                   	ret    

c0025984 <IOAPIC::IOAPIC()>:
c0025984:	83 ec 0c             	sub    esp,0xc
c0025987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002598b:	83 ec 08             	sub    esp,0x8
c002598e:	68 44 d3 02 c0       	push   0xc002d344
c0025993:	50                   	push   eax
c0025994:	e8 fb eb fe ff       	call   c0014594 <Device::Device(char const*)>
c0025999:	83 c4 10             	add    esp,0x10
c002599c:	ba 6c d4 02 c0       	mov    edx,0xc002d46c
c00259a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259a5:	89 10                	mov    DWORD PTR [eax],edx
c00259a7:	90                   	nop
c00259a8:	83 c4 0c             	add    esp,0xc
c00259ab:	c3                   	ret    

c00259ac <APIC::APIC()>:
c00259ac:	53                   	push   ebx
c00259ad:	83 ec 18             	sub    esp,0x18
c00259b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259b4:	83 ec 08             	sub    esp,0x8
c00259b7:	68 4c d3 02 c0       	push   0xc002d34c
c00259bc:	50                   	push   eax
c00259bd:	e8 3e f3 fe ff       	call   c0014d00 <InterruptController::InterruptController(char const*)>
c00259c2:	83 c4 10             	add    esp,0x10
c00259c5:	ba 24 d4 02 c0       	mov    edx,0xc002d424
c00259ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259ce:	89 10                	mov    DWORD PTR [eax],edx
c00259d0:	a0 20 2a 03 c0       	mov    al,ds:0xc0032a20
c00259d5:	83 f0 01             	xor    eax,0x1
c00259d8:	84 c0                	test   al,al
c00259da:	0f 84 a1 00 00 00    	je     c0025a81 <APIC::APIC()+0xd5>
c00259e0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00259e5:	a0 00 10 03 c0       	mov    al,ds:0xc0031000
c00259ea:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00259ee:	0f 83 86 00 00 00    	jae    c0025a7a <APIC::APIC()+0xce>
c00259f4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259fc:	83 ec 0c             	sub    esp,0xc
c00259ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a03:	e8 38 9e fe ff       	call   c000f840 <malloc>
c0025a08:	83 c4 10             	add    esp,0x10
c0025a0b:	89 c3                	mov    ebx,eax
c0025a0d:	83 ec 0c             	sub    esp,0xc
c0025a10:	53                   	push   ebx
c0025a11:	e8 6e ff ff ff       	call   c0025984 <IOAPIC::IOAPIC()>
c0025a16:	83 c4 10             	add    esp,0x10
c0025a19:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a1d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a26:	89 14 85 00 2a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd600],edx
c0025a2d:	a1 e0 29 03 c0       	mov    eax,ds:0xc00329e0
c0025a32:	40                   	inc    eax
c0025a33:	a3 e0 29 03 c0       	mov    ds:0xc00329e0,eax
c0025a38:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0025a3d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a43:	83 ec 08             	sub    esp,0x8
c0025a46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a4a:	50                   	push   eax
c0025a4b:	e8 54 e9 fe ff       	call   c00143a4 <Device::addChild(Device*)>
c0025a50:	83 c4 10             	add    esp,0x10
c0025a53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a59:	83 c0 08             	add    eax,0x8
c0025a5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a5e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a63:	6a 00                	push   0x0
c0025a65:	6a 00                	push   0x0
c0025a67:	52                   	push   edx
c0025a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a6c:	ff d0                	call   eax
c0025a6e:	83 c4 10             	add    esp,0x10
c0025a71:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a75:	e9 6b ff ff ff       	jmp    c00259e5 <APIC::APIC()+0x39>
c0025a7a:	c6 05 20 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032a20,0x1
c0025a81:	90                   	nop
c0025a82:	83 c4 18             	add    esp,0x18
c0025a85:	5b                   	pop    ebx
c0025a86:	c3                   	ret    
c0025a87:	90                   	nop

c0025a88 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a88:	55                   	push   ebp
c0025a89:	89 e5                	mov    ebp,esp
c0025a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a94:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a97:	72 1d                	jb     c0025ab6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a9c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025aab:	01 d0                	add    eax,edx
c0025aad:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ab0:	73 04                	jae    c0025ab6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025ab2:	b0 01                	mov    al,0x1
c0025ab4:	eb 02                	jmp    c0025ab8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025ab6:	b0 00                	mov    al,0x0
c0025ab8:	5d                   	pop    ebp
c0025ab9:	c3                   	ret    

c0025aba <IOAPIC::read(int)>:
c0025aba:	55                   	push   ebp
c0025abb:	89 e5                	mov    ebp,esp
c0025abd:	83 ec 10             	sub    esp,0x10
c0025ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025ac9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025acc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025acf:	0f b6 d0             	movzx  edx,al
c0025ad2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ad5:	89 10                	mov    DWORD PTR [eax],edx
c0025ad7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ada:	83 c0 10             	add    eax,0x10
c0025add:	8b 00                	mov    eax,DWORD PTR [eax]
c0025adf:	c9                   	leave  
c0025ae0:	c3                   	ret    
c0025ae1:	90                   	nop

c0025ae2 <IOAPIC::open(int, int, void*)>:
c0025ae2:	55                   	push   ebp
c0025ae3:	89 e5                	mov    ebp,esp
c0025ae5:	57                   	push   edi
c0025ae6:	56                   	push   esi
c0025ae7:	53                   	push   ebx
c0025ae8:	83 ec 0c             	sub    esp,0xc
c0025aeb:	83 ec 0c             	sub    esp,0xc
c0025aee:	68 77 d3 02 c0       	push   0xc002d377
c0025af3:	e8 85 d4 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0025af8:	83 c4 10             	add    esp,0x10
c0025afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025afe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b01:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b10:	8b 14 85 40 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefc0]
c0025b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b1a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b29:	8b 14 85 c0 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef40]
c0025b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b33:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b45:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b4b:	0f b6 f8             	movzx  edi,al
c0025b4e:	89 d0                	mov    eax,edx
c0025b50:	ba 00 00 00 00       	mov    edx,0x0
c0025b55:	89 c1                	mov    ecx,eax
c0025b57:	80 e5 ff             	and    ch,0xff
c0025b5a:	89 cb                	mov    ebx,ecx
c0025b5c:	0f b6 f2             	movzx  esi,dl
c0025b5f:	89 d8                	mov    eax,ebx
c0025b61:	89 f2                	mov    edx,esi
c0025b63:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b66:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b69:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b6d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b71:	83 e0 00             	and    eax,0x0
c0025b74:	09 d0                	or     eax,edx
c0025b76:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b7d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b83:	8d 50 01             	lea    edx,[eax+0x1]
c0025b86:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b89:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b8f:	0f b6 d0             	movzx  edx,al
c0025b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b95:	83 c2 08             	add    edx,0x8
c0025b98:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b9c:	0f b6 c9             	movzx  ecx,cl
c0025b9f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025ba5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ba9:	83 ec 08             	sub    esp,0x8
c0025bac:	6a 01                	push   0x1
c0025bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bb1:	e8 04 ff ff ff       	call   c0025aba <IOAPIC::read(int)>
c0025bb6:	83 c4 10             	add    esp,0x10
c0025bb9:	c1 f8 10             	sar    eax,0x10
c0025bbc:	0f b6 c0             	movzx  eax,al
c0025bbf:	8d 50 01             	lea    edx,[eax+0x1]
c0025bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025bcb:	b8 00 00 00 00       	mov    eax,0x0
c0025bd0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025bd3:	5b                   	pop    ebx
c0025bd4:	5e                   	pop    esi
c0025bd5:	5f                   	pop    edi
c0025bd6:	5d                   	pop    ebp
c0025bd7:	c3                   	ret    

c0025bd8 <IOAPIC::write(int, int)>:
c0025bd8:	55                   	push   ebp
c0025bd9:	89 e5                	mov    ebp,esp
c0025bdb:	83 ec 10             	sub    esp,0x10
c0025bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025be1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025be7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025bea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bed:	0f b6 d0             	movzx  edx,al
c0025bf0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bf3:	89 10                	mov    DWORD PTR [eax],edx
c0025bf5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bf8:	8d 50 10             	lea    edx,[eax+0x10]
c0025bfb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bfe:	89 02                	mov    DWORD PTR [edx],eax
c0025c00:	90                   	nop
c0025c01:	c9                   	leave  
c0025c02:	c3                   	ret    
c0025c03:	90                   	nop

c0025c04 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c04:	55                   	push   ebp
c0025c05:	89 e5                	mov    ebp,esp
c0025c07:	53                   	push   ebx
c0025c08:	83 ec 2c             	sub    esp,0x2c
c0025c0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c0e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c11:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c14:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c17:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c1a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c1d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c20:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c23:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c26:	88 d8                	mov    al,bl
c0025c28:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c2b:	88 c8                	mov    al,cl
c0025c2d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c30:	88 d0                	mov    al,dl
c0025c32:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c35:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c39:	83 c0 08             	add    eax,0x8
c0025c3c:	01 c0                	add    eax,eax
c0025c3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c41:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c45:	83 c0 08             	add    eax,0x8
c0025c48:	01 c0                	add    eax,eax
c0025c4a:	40                   	inc    eax
c0025c4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c51:	50                   	push   eax
c0025c52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c55:	e8 60 fe ff ff       	call   c0025aba <IOAPIC::read(int)>
c0025c5a:	83 c4 08             	add    esp,0x8
c0025c5d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c60:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c67:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c6a:	c1 e0 18             	shl    eax,0x18
c0025c6d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c70:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c76:	52                   	push   edx
c0025c77:	50                   	push   eax
c0025c78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c7b:	e8 58 ff ff ff       	call   c0025bd8 <IOAPIC::write(int, int)>
c0025c80:	83 c4 0c             	add    esp,0xc
c0025c83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c86:	50                   	push   eax
c0025c87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c8a:	e8 2b fe ff ff       	call   c0025aba <IOAPIC::read(int)>
c0025c8f:	83 c4 08             	add    esp,0x8
c0025c92:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c95:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c9c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ca3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025caa:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cae:	74 09                	je     c0025cb9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025cb0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025cb7:	eb 07                	jmp    c0025cc0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025cb9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025cc0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025cc4:	74 09                	je     c0025ccf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025cc6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025ccd:	eb 07                	jmp    c0025cd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025ccf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025cd6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025cdd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025ce1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025ce4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025ce7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cea:	52                   	push   edx
c0025ceb:	50                   	push   eax
c0025cec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cef:	e8 e4 fe ff ff       	call   c0025bd8 <IOAPIC::write(int, int)>
c0025cf4:	83 c4 0c             	add    esp,0xc
c0025cf7:	90                   	nop
c0025cf8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025cfb:	c9                   	leave  
c0025cfc:	c3                   	ret    
c0025cfd:	90                   	nop

c0025cfe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025cfe:	55                   	push   ebp
c0025cff:	89 e5                	mov    ebp,esp
c0025d01:	57                   	push   edi
c0025d02:	56                   	push   esi
c0025d03:	53                   	push   ebx
c0025d04:	83 ec 2c             	sub    esp,0x2c
c0025d07:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d0a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d0d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d11:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d15:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d19:	74 5a                	je     c0025d75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d1b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d1f:	7f 44                	jg     c0025d65 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d24:	05 c0 d8 02 c0       	add    eax,0xc002d8c0
c0025d29:	8a 00                	mov    al,BYTE PTR [eax]
c0025d2b:	0f b6 c0             	movzx  eax,al
c0025d2e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d34:	66 8b 84 00 e0 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf020]
c0025d3c:	0f b7 c0             	movzx  eax,ax
c0025d3f:	83 e0 02             	and    eax,0x2
c0025d42:	85 c0                	test   eax,eax
c0025d44:	74 04                	je     c0025d4a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d46:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d4d:	66 8b 84 00 e0 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf020]
c0025d55:	0f b7 c0             	movzx  eax,ax
c0025d58:	83 e0 08             	and    eax,0x8
c0025d5b:	85 c0                	test   eax,eax
c0025d5d:	74 16                	je     c0025d75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d5f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d63:	eb 10                	jmp    c0025d75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d65:	83 ec 0c             	sub    esp,0xc
c0025d68:	68 88 d3 02 c0       	push   0xc002d388
c0025d6d:	e8 bd 48 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0025d72:	83 c4 10             	add    esp,0x10
c0025d75:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d79:	a1 e0 29 03 c0       	mov    eax,ds:0xc00329e0
c0025d7e:	83 ec 08             	sub    esp,0x8
c0025d81:	50                   	push   eax
c0025d82:	68 c0 d3 02 c0       	push   0xc002d3c0
c0025d87:	e8 f1 d1 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0025d8c:	83 c4 10             	add    esp,0x10
c0025d8f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d96:	a1 e0 29 03 c0       	mov    eax,ds:0xc00329e0
c0025d9b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d9e:	7d 67                	jge    c0025e07 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025da0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025da3:	8b 04 85 00 2a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd600]
c0025daa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dad:	83 ec 08             	sub    esp,0x8
c0025db0:	52                   	push   edx
c0025db1:	50                   	push   eax
c0025db2:	e8 d1 fc ff ff       	call   c0025a88 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025db7:	83 c4 10             	add    esp,0x10
c0025dba:	84 c0                	test   al,al
c0025dbc:	74 44                	je     c0025e02 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025dbe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025dc1:	8b 1c 85 00 2a 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd600]
c0025dc8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025dcc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025dcf:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025dd3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dd6:	83 c0 20             	add    eax,0x20
c0025dd9:	0f b6 f0             	movzx  esi,al
c0025ddc:	b8 00 00 00 00       	mov    eax,0x0
c0025de1:	99                   	cdq    
c0025de2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025de5:	0f b6 c9             	movzx  ecx,cl
c0025de8:	83 ec 04             	sub    esp,0x4
c0025deb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025dee:	57                   	push   edi
c0025def:	56                   	push   esi
c0025df0:	52                   	push   edx
c0025df1:	50                   	push   eax
c0025df2:	51                   	push   ecx
c0025df3:	53                   	push   ebx
c0025df4:	e8 0b fe ff ff       	call   c0025c04 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025df9:	83 c4 20             	add    esp,0x20
c0025dfc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e00:	eb 05                	jmp    c0025e07 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e02:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e05:	eb 8f                	jmp    c0025d96 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e07:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e0a:	83 f0 01             	xor    eax,0x1
c0025e0d:	84 c0                	test   al,al
c0025e0f:	74 10                	je     c0025e21 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e11:	83 ec 0c             	sub    esp,0xc
c0025e14:	68 d7 d3 02 c0       	push   0xc002d3d7
c0025e19:	e8 11 48 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0025e1e:	83 c4 10             	add    esp,0x10
c0025e21:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e25:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e2c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e30:	7f 65                	jg     c0025e97 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e35:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e38:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e3f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e42:	01 ca                	add    edx,ecx
c0025e44:	83 c2 54             	add    edx,0x54
c0025e47:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e4b:	85 c0                	test   eax,eax
c0025e4d:	75 43                	jne    c0025e92 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e52:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e55:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e5c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e5f:	01 ca                	add    edx,ecx
c0025e61:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e64:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e67:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e6e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e71:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e78:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e7b:	01 ca                	add    edx,ecx
c0025e7d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e83:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e86:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e8d:	83 e8 20             	sub    eax,0x20
c0025e90:	eb 1a                	jmp    c0025eac <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e92:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e95:	eb 95                	jmp    c0025e2c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e97:	83 ec 0c             	sub    esp,0xc
c0025e9a:	68 e4 d3 02 c0       	push   0xc002d3e4
c0025e9f:	e8 8b 47 ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0025ea4:	83 c4 10             	add    esp,0x10
c0025ea7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025eac:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025eaf:	5b                   	pop    ebx
c0025eb0:	5e                   	pop    esi
c0025eb1:	5f                   	pop    edi
c0025eb2:	5d                   	pop    ebp
c0025eb3:	c3                   	ret    

c0025eb4 <PIC::disable()>:
c0025eb4:	55                   	push   ebp
c0025eb5:	89 e5                	mov    ebp,esp
c0025eb7:	83 ec 10             	sub    esp,0x10
c0025eba:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025ec0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025ec4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ec7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ecb:	ee                   	out    dx,al
c0025ecc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ed2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ed6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ed9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025edd:	ee                   	out    dx,al
c0025ede:	90                   	nop
c0025edf:	c9                   	leave  
c0025ee0:	c3                   	ret    
c0025ee1:	90                   	nop

c0025ee2 <PIC::close(int, int, void*)>:
c0025ee2:	55                   	push   ebp
c0025ee3:	89 e5                	mov    ebp,esp
c0025ee5:	83 ec 08             	sub    esp,0x8
c0025ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0025eed:	83 c0 3c             	add    eax,0x3c
c0025ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ef2:	83 ec 0c             	sub    esp,0xc
c0025ef5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ef8:	ff d0                	call   eax
c0025efa:	83 c4 10             	add    esp,0x10
c0025efd:	b8 00 00 00 00       	mov    eax,0x0
c0025f02:	c9                   	leave  
c0025f03:	c3                   	ret    

c0025f04 <PIC::PIC()>:
c0025f04:	83 ec 0c             	sub    esp,0xc
c0025f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0b:	83 ec 08             	sub    esp,0x8
c0025f0e:	68 90 d4 02 c0       	push   0xc002d490
c0025f13:	50                   	push   eax
c0025f14:	e8 e7 ed fe ff       	call   c0014d00 <InterruptController::InterruptController(char const*)>
c0025f19:	83 c4 10             	add    esp,0x10
c0025f1c:	ba bc d4 02 c0       	mov    edx,0xc002d4bc
c0025f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f25:	89 10                	mov    DWORD PTR [eax],edx
c0025f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f31:	0f b6 d0             	movzx  edx,al
c0025f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f38:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f49:	0f b6 d0             	movzx  edx,al
c0025f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f50:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f59:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f5f:	8d 50 01             	lea    edx,[eax+0x1]
c0025f62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f66:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f6c:	0f b6 d0             	movzx  edx,al
c0025f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f73:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f77:	83 e1 3f             	and    ecx,0x3f
c0025f7a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f82:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f88:	0f b6 d0             	movzx  edx,al
c0025f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f8f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fa0:	0f b6 d0             	movzx  edx,al
c0025fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0025fb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fbd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fc3:	0f b6 d0             	movzx  edx,al
c0025fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fca:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fce:	83 e1 3f             	and    ecx,0x3f
c0025fd1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fd5:	90                   	nop
c0025fd6:	83 c4 0c             	add    esp,0xc
c0025fd9:	c3                   	ret    

c0025fda <PIC::ioWait()>:
c0025fda:	eb 00                	jmp    c0025fdc <PIC::ioWait()+0x2>
c0025fdc:	eb 00                	jmp    c0025fde <PIC::ioWait()+0x4>
c0025fde:	90                   	nop
c0025fdf:	c3                   	ret    

c0025fe0 <PIC::getIRQReg(int)>:
c0025fe0:	55                   	push   ebp
c0025fe1:	89 e5                	mov    ebp,esp
c0025fe3:	83 ec 10             	sub    esp,0x10
c0025fe6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fe9:	0f b6 c0             	movzx  eax,al
c0025fec:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ff2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025ff5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ff8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ffc:	ee                   	out    dx,al
c0025ffd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026000:	0f b6 c0             	movzx  eax,al
c0026003:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026009:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002600c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002600f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026013:	ee                   	out    dx,al
c0026014:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002601a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002601e:	89 c2                	mov    edx,eax
c0026020:	ec                   	in     al,dx
c0026021:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026024:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026027:	0f b6 c0             	movzx  eax,al
c002602a:	c1 e0 08             	shl    eax,0x8
c002602d:	89 c1                	mov    ecx,eax
c002602f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026035:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026039:	89 c2                	mov    edx,eax
c002603b:	ec                   	in     al,dx
c002603c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002603f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026042:	0f b6 c0             	movzx  eax,al
c0026045:	09 c8                	or     eax,ecx
c0026047:	c9                   	leave  
c0026048:	c3                   	ret    
c0026049:	90                   	nop

c002604a <PIC::eoi(unsigned char)>:
c002604a:	55                   	push   ebp
c002604b:	89 e5                	mov    ebp,esp
c002604d:	83 ec 14             	sub    esp,0x14
c0026050:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026053:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026056:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002605a:	75 1e                	jne    c002607a <PIC::eoi(unsigned char)+0x30>
c002605c:	6a 0b                	push   0xb
c002605e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026061:	e8 7a ff ff ff       	call   c0025fe0 <PIC::getIRQReg(int)>
c0026066:	83 c4 08             	add    esp,0x8
c0026069:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002606d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026071:	25 80 00 00 00       	and    eax,0x80
c0026076:	85 c0                	test   eax,eax
c0026078:	74 5f                	je     c00260d9 <PIC::eoi(unsigned char)+0x8f>
c002607a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002607e:	75 2d                	jne    c00260ad <PIC::eoi(unsigned char)+0x63>
c0026080:	6a 0b                	push   0xb
c0026082:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026085:	e8 56 ff ff ff       	call   c0025fe0 <PIC::getIRQReg(int)>
c002608a:	83 c4 08             	add    esp,0x8
c002608d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026094:	66 85 c0             	test   ax,ax
c0026097:	78 14                	js     c00260ad <PIC::eoi(unsigned char)+0x63>
c0026099:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002609f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00260a3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260a6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260aa:	ee                   	out    dx,al
c00260ab:	eb 2d                	jmp    c00260da <PIC::eoi(unsigned char)+0x90>
c00260ad:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260b1:	76 12                	jbe    c00260c5 <PIC::eoi(unsigned char)+0x7b>
c00260b3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260b9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00260bd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260c0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260c4:	ee                   	out    dx,al
c00260c5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00260cb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00260cf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260d2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260d6:	ee                   	out    dx,al
c00260d7:	eb 01                	jmp    c00260da <PIC::eoi(unsigned char)+0x90>
c00260d9:	90                   	nop
c00260da:	c9                   	leave  
c00260db:	c3                   	ret    

c00260dc <PIC::remap()>:
c00260dc:	55                   	push   ebp
c00260dd:	89 e5                	mov    ebp,esp
c00260df:	83 ec 48             	sub    esp,0x48
c00260e2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00260e9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260f0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260f6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260f9:	89 c2                	mov    edx,eax
c00260fb:	ec                   	in     al,dx
c00260fc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260ff:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026102:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026105:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002610b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002610e:	89 c2                	mov    edx,eax
c0026110:	ec                   	in     al,dx
c0026111:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026114:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026117:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002611a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026120:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026124:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026127:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002612a:	ee                   	out    dx,al
c002612b:	83 ec 0c             	sub    esp,0xc
c002612e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026131:	e8 a4 fe ff ff       	call   c0025fda <PIC::ioWait()>
c0026136:	83 c4 10             	add    esp,0x10
c0026139:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002613f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026143:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026146:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026149:	ee                   	out    dx,al
c002614a:	83 ec 0c             	sub    esp,0xc
c002614d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026150:	e8 85 fe ff ff       	call   c0025fda <PIC::ioWait()>
c0026155:	83 c4 10             	add    esp,0x10
c0026158:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002615b:	0f b6 c0             	movzx  eax,al
c002615e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026164:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026167:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002616a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002616d:	ee                   	out    dx,al
c002616e:	83 ec 0c             	sub    esp,0xc
c0026171:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026174:	e8 61 fe ff ff       	call   c0025fda <PIC::ioWait()>
c0026179:	83 c4 10             	add    esp,0x10
c002617c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002617f:	0f b6 c0             	movzx  eax,al
c0026182:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026188:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002618b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002618e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026191:	ee                   	out    dx,al
c0026192:	83 ec 0c             	sub    esp,0xc
c0026195:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026198:	e8 3d fe ff ff       	call   c0025fda <PIC::ioWait()>
c002619d:	83 c4 10             	add    esp,0x10
c00261a0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00261a6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00261aa:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00261ad:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261b0:	ee                   	out    dx,al
c00261b1:	83 ec 0c             	sub    esp,0xc
c00261b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b7:	e8 1e fe ff ff       	call   c0025fda <PIC::ioWait()>
c00261bc:	83 c4 10             	add    esp,0x10
c00261bf:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00261c5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00261c9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00261cc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261cf:	ee                   	out    dx,al
c00261d0:	83 ec 0c             	sub    esp,0xc
c00261d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d6:	e8 ff fd ff ff       	call   c0025fda <PIC::ioWait()>
c00261db:	83 c4 10             	add    esp,0x10
c00261de:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00261e4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00261e8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00261eb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261ee:	ee                   	out    dx,al
c00261ef:	83 ec 0c             	sub    esp,0xc
c00261f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f5:	e8 e0 fd ff ff       	call   c0025fda <PIC::ioWait()>
c00261fa:	83 c4 10             	add    esp,0x10
c00261fd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026203:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026207:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002620a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002620d:	ee                   	out    dx,al
c002620e:	83 ec 0c             	sub    esp,0xc
c0026211:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026214:	e8 c1 fd ff ff       	call   c0025fda <PIC::ioWait()>
c0026219:	83 c4 10             	add    esp,0x10
c002621c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026220:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026226:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026229:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002622c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002622f:	ee                   	out    dx,al
c0026230:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026234:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002623a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002623d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026240:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026243:	ee                   	out    dx,al
c0026244:	90                   	nop
c0026245:	c9                   	leave  
c0026246:	c3                   	ret    
c0026247:	90                   	nop

c0026248 <PIC::open(int, int, void*)>:
c0026248:	55                   	push   ebp
c0026249:	89 e5                	mov    ebp,esp
c002624b:	83 ec 18             	sub    esp,0x18
c002624e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026254:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026258:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002625b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002625f:	ee                   	out    dx,al
c0026260:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026266:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002626a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002626d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026271:	ee                   	out    dx,al
c0026272:	83 ec 0c             	sub    esp,0xc
c0026275:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026278:	e8 5f fe ff ff       	call   c00260dc <PIC::remap()>
c002627d:	83 c4 10             	add    esp,0x10
c0026280:	b8 00 00 00 00       	mov    eax,0x0
c0026285:	c9                   	leave  
c0026286:	c3                   	ret    
c0026287:	90                   	nop

c0026288 <APICTimer::close(int, int, void*)>:
c0026288:	b8 00 00 00 00       	mov    eax,0x0
c002628d:	c3                   	ret    

c002628e <apicTimerHandler(regs*, void*)>:
c002628e:	83 ec 0c             	sub    esp,0xc
c0026291:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026295:	8b 00                	mov    eax,DWORD PTR [eax]
c0026297:	99                   	cdq    
c0026298:	52                   	push   edx
c0026299:	50                   	push   eax
c002629a:	6a 00                	push   0x0
c002629c:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262a1:	e8 86 07 00 00       	call   c0026a2c <__udivdi3>
c00262a6:	83 c4 10             	add    esp,0x10
c00262a9:	83 ec 08             	sub    esp,0x8
c00262ac:	52                   	push   edx
c00262ad:	50                   	push   eax
c00262ae:	e8 a8 0a ff ff       	call   c0016d5b <timerHandler(unsigned long long)>
c00262b3:	83 c4 10             	add    esp,0x10
c00262b6:	90                   	nop
c00262b7:	83 c4 0c             	add    esp,0xc
c00262ba:	c3                   	ret    
c00262bb:	90                   	nop

c00262bc <APICTimer::write(int)>:
c00262bc:	53                   	push   ebx
c00262bd:	83 ec 28             	sub    esp,0x28
c00262c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262c4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00262c8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262ce:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00262d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262d9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262df:	83 ec 0c             	sub    esp,0xc
c00262e2:	50                   	push   eax
c00262e3:	e8 de f4 ff ff       	call   c00257c6 <APIC::getBase()>
c00262e8:	83 c4 10             	add    esp,0x10
c00262eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262ef:	a1 f0 ec 02 c0       	mov    eax,ds:0xc002ecf0
c00262f4:	8b 15 f4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecf4
c00262fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262fe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026306:	05 e0 03 00 00       	add    eax,0x3e0
c002630b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026311:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026315:	05 80 03 00 00       	add    eax,0x380
c002631a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026320:	fb                   	sti    
c0026321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026325:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026329:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002632e:	83 d2 00             	adc    edx,0x0
c0026331:	89 c1                	mov    ecx,eax
c0026333:	89 d3                	mov    ebx,edx
c0026335:	a1 f0 ec 02 c0       	mov    eax,ds:0xc002ecf0
c002633a:	8b 15 f4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecf4
c0026340:	39 c8                	cmp    eax,ecx
c0026342:	89 d0                	mov    eax,edx
c0026344:	19 d8                	sbb    eax,ebx
c0026346:	73 02                	jae    c002634a <APICTimer::write(int)+0x8e>
c0026348:	eb d7                	jmp    c0026321 <APICTimer::write(int)+0x65>
c002634a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002634e:	05 20 03 00 00       	add    eax,0x320
c0026353:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002635d:	05 90 03 00 00       	add    eax,0x390
c0026362:	8b 00                	mov    eax,DWORD PTR [eax]
c0026364:	f7 d0                	not    eax
c0026366:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002636a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002636e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026372:	ba 00 00 00 00       	mov    edx,0x0
c0026377:	f7 f3                	div    ebx
c0026379:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002637d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026381:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026387:	0d 00 00 02 00       	or     eax,0x20000
c002638c:	89 c2                	mov    edx,eax
c002638e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026392:	05 20 03 00 00       	add    eax,0x320
c0026397:	89 10                	mov    DWORD PTR [eax],edx
c0026399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002639d:	05 e0 03 00 00       	add    eax,0x3e0
c00263a2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00263a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263ac:	05 80 03 00 00       	add    eax,0x380
c00263b1:	89 c2                	mov    edx,eax
c00263b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263b7:	89 02                	mov    DWORD PTR [edx],eax
c00263b9:	90                   	nop
c00263ba:	83 c4 28             	add    esp,0x28
c00263bd:	5b                   	pop    ebx
c00263be:	c3                   	ret    
c00263bf:	90                   	nop

c00263c0 <APICTimer::open(int, int, void*)>:
c00263c0:	57                   	push   edi
c00263c1:	56                   	push   esi
c00263c2:	53                   	push   ebx
c00263c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00263c9:	83 c0 24             	add    eax,0x24
c00263cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00263ce:	83 ec 08             	sub    esp,0x8
c00263d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263d9:	ff d0                	call   eax
c00263db:	83 c4 10             	add    esp,0x10
c00263de:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c00263e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263e9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263ef:	83 ec 0c             	sub    esp,0xc
c00263f2:	50                   	push   eax
c00263f3:	e8 ce f3 ff ff       	call   c00257c6 <APIC::getBase()>
c00263f8:	83 c4 10             	add    esp,0x10
c00263fb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026405:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002640b:	0f b6 f8             	movzx  edi,al
c002640e:	89 d0                	mov    eax,edx
c0026410:	ba 00 00 00 00       	mov    edx,0x0
c0026415:	89 c1                	mov    ecx,eax
c0026417:	80 e5 ff             	and    ch,0xff
c002641a:	89 cb                	mov    ebx,ecx
c002641c:	0f b6 f2             	movzx  esi,dl
c002641f:	89 d8                	mov    eax,ebx
c0026421:	89 f2                	mov    edx,esi
c0026423:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026427:	8d 5f 08             	lea    ebx,[edi+0x8]
c002642a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002642e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026432:	83 e0 00             	and    eax,0x0
c0026435:	09 d0                	or     eax,edx
c0026437:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002643b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002643f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026445:	8d 50 01             	lea    edx,[eax+0x1]
c0026448:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002644c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026452:	0f b6 d0             	movzx  edx,al
c0026455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026459:	83 c2 08             	add    edx,0x8
c002645c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026460:	0f b6 c9             	movzx  ecx,cl
c0026463:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026469:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002646d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026471:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026475:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002647b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026483:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026489:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002648d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026493:	83 ec 0c             	sub    esp,0xc
c0026496:	51                   	push   ecx
c0026497:	6a 01                	push   0x1
c0026499:	68 8e 62 02 c0       	push   0xc002628e
c002649e:	52                   	push   edx
c002649f:	50                   	push   eax
c00264a0:	e8 83 de fe ff       	call   c0014328 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264a5:	83 c4 20             	add    esp,0x20
c00264a8:	89 c2                	mov    edx,eax
c00264aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ae:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264b4:	b8 00 00 00 00       	mov    eax,0x0
c00264b9:	5b                   	pop    ebx
c00264ba:	5e                   	pop    esi
c00264bb:	5f                   	pop    edi
c00264bc:	c3                   	ret    
c00264bd:	90                   	nop

c00264be <APICTimer::APICTimer()>:
c00264be:	83 ec 0c             	sub    esp,0xc
c00264c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c5:	83 ec 08             	sub    esp,0x8
c00264c8:	68 fc d4 02 c0       	push   0xc002d4fc
c00264cd:	50                   	push   eax
c00264ce:	e8 f9 07 ff ff       	call   c0016ccc <Timer::Timer(char const*)>
c00264d3:	83 c4 10             	add    esp,0x10
c00264d6:	ba 10 d5 02 c0       	mov    edx,0xc002d510
c00264db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264df:	89 10                	mov    DWORD PTR [eax],edx
c00264e1:	90                   	nop
c00264e2:	83 c4 0c             	add    esp,0xc
c00264e5:	c3                   	ret    

c00264e6 <PIT::write(int)>:
c00264e6:	83 ec 10             	sub    esp,0x10
c00264e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264f1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264fb:	a3 24 2a 03 c0       	mov    ds:0xc0032a24,eax
c0026500:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026505:	99                   	cdq    
c0026506:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002650a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002650e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026515:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002651a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002651e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026523:	ee                   	out    dx,al
c0026524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026528:	0f b6 c0             	movzx  eax,al
c002652b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026532:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026536:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002653a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002653f:	ee                   	out    dx,al
c0026540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026544:	c1 f8 08             	sar    eax,0x8
c0026547:	0f b6 c0             	movzx  eax,al
c002654a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026551:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026555:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026559:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002655e:	ee                   	out    dx,al
c002655f:	90                   	nop
c0026560:	83 c4 10             	add    esp,0x10
c0026563:	c3                   	ret    

c0026564 <pitHandler(regs*, void*)>:
c0026564:	83 ec 0c             	sub    esp,0xc
c0026567:	a1 24 2a 03 c0       	mov    eax,ds:0xc0032a24
c002656c:	99                   	cdq    
c002656d:	52                   	push   edx
c002656e:	50                   	push   eax
c002656f:	6a 00                	push   0x0
c0026571:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026576:	e8 b1 04 00 00       	call   c0026a2c <__udivdi3>
c002657b:	83 c4 10             	add    esp,0x10
c002657e:	83 ec 08             	sub    esp,0x8
c0026581:	52                   	push   edx
c0026582:	50                   	push   eax
c0026583:	e8 d3 07 ff ff       	call   c0016d5b <timerHandler(unsigned long long)>
c0026588:	83 c4 10             	add    esp,0x10
c002658b:	90                   	nop
c002658c:	83 c4 0c             	add    esp,0xc
c002658f:	c3                   	ret    

c0026590 <PIT::open(int, int, void*)>:
c0026590:	83 ec 0c             	sub    esp,0xc
c0026593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026597:	8b 00                	mov    eax,DWORD PTR [eax]
c0026599:	83 c0 24             	add    eax,0x24
c002659c:	8b 00                	mov    eax,DWORD PTR [eax]
c002659e:	83 ec 08             	sub    esp,0x8
c00265a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265a9:	ff d0                	call   eax
c00265ab:	83 c4 10             	add    esp,0x10
c00265ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b2:	83 ec 0c             	sub    esp,0xc
c00265b5:	6a 00                	push   0x0
c00265b7:	6a 01                	push   0x1
c00265b9:	68 64 65 02 c0       	push   0xc0026564
c00265be:	6a 00                	push   0x0
c00265c0:	50                   	push   eax
c00265c1:	e8 62 dd fe ff       	call   c0014328 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00265c6:	83 c4 20             	add    esp,0x20
c00265c9:	89 c2                	mov    edx,eax
c00265cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265cf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265d5:	b8 00 00 00 00       	mov    eax,0x0
c00265da:	83 c4 0c             	add    esp,0xc
c00265dd:	c3                   	ret    

c00265de <PIT::close(int, int, void*)>:
c00265de:	83 ec 0c             	sub    esp,0xc
c00265e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00265ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f3:	6a 01                	push   0x1
c00265f5:	68 64 65 02 c0       	push   0xc0026564
c00265fa:	6a 00                	push   0x0
c00265fc:	50                   	push   eax
c00265fd:	e8 64 dd fe ff       	call   c0014366 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026602:	83 c4 10             	add    esp,0x10
c0026605:	b8 00 00 00 00       	mov    eax,0x0
c002660a:	83 c4 0c             	add    esp,0xc
c002660d:	c3                   	ret    

c002660e <PIT::PIT()>:
c002660e:	83 ec 0c             	sub    esp,0xc
c0026611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026615:	83 ec 08             	sub    esp,0x8
c0026618:	68 38 d5 02 c0       	push   0xc002d538
c002661d:	50                   	push   eax
c002661e:	e8 a9 06 ff ff       	call   c0016ccc <Timer::Timer(char const*)>
c0026623:	83 c4 10             	add    esp,0x10
c0026626:	ba 60 d5 02 c0       	mov    edx,0xc002d560
c002662b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002662f:	89 10                	mov    DWORD PTR [eax],edx
c0026631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026635:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002663b:	0f b6 d0             	movzx  edx,al
c002663e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026642:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002664d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026653:	0f b6 d0             	movzx  edx,al
c0026656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002665a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002665f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026663:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026669:	8d 50 01             	lea    edx,[eax+0x1]
c002666c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026670:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026676:	0f b6 d0             	movzx  edx,al
c0026679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002667d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026681:	83 e1 3f             	and    ecx,0x3f
c0026684:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026688:	90                   	nop
c0026689:	83 c4 0c             	add    esp,0xc
c002668c:	c3                   	ret    
c002668d:	66 90                	xchg   ax,ax
c002668f:	90                   	nop

c0026690 <avxDetect>:
c0026690:	b8 00 00 00 00       	mov    eax,0x0
c0026695:	c3                   	ret    

c0026696 <avxSave>:
c0026696:	c3                   	ret    

c0026697 <avxLoad>:
c0026697:	c3                   	ret    

c0026698 <avxInit>:
c0026698:	c3                   	ret    

c0026699 <avxClose>:
c0026699:	c3                   	ret    

c002669a <wouldSheSayYes>:
c002669a:	c3                   	ret    
c002669b:	49                   	dec    ecx
c002669c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00266a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00266a4:	75 20                	jne    c00266c6 <sseDetect.noSSE+0x1>
c00266a6:	4e                   	dec    esi
c00266a7:	79 61                	jns    c002670a <x87Detect+0x14>
c00266a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00266ae:	66 90                	xchg   ax,ax

c00266b0 <absolutelyNoChanceInHell>:
c00266b0:	b8 01 00 00 00       	mov    eax,0x1
c00266b5:	0f a2                	cpuid  
c00266b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00266bd:	74 06                	je     c00266c5 <sseDetect.noSSE>
c00266bf:	b8 01 00 00 00       	mov    eax,0x1
c00266c4:	c3                   	ret    

c00266c5 <sseDetect.noSSE>:
c00266c5:	31 c0                	xor    eax,eax
c00266c7:	c3                   	ret    

c00266c8 <sseSave>:
c00266c8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00266cd:	c3                   	ret    

c00266ce <sseLoad>:
c00266ce:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00266d3:	c3                   	ret    

c00266d4 <sseInit>:
c00266d4:	e8 43 00 00 00       	call   c002671c <x87Init>
c00266d9:	0f 20 e0             	mov    eax,cr4
c00266dc:	66 0d 00 06          	or     ax,0x600
c00266e0:	0f 22 e0             	mov    cr4,eax
c00266e3:	c3                   	ret    

c00266e4 <sseClose>:
c00266e4:	c3                   	ret    
c00266e5:	66 90                	xchg   ax,ax
c00266e7:	66 90                	xchg   ax,ax
c00266e9:	66 90                	xchg   ax,ax
c00266eb:	66 90                	xchg   ax,ax
c00266ed:	66 90                	xchg   ax,ax
c00266ef:	90                   	nop

c00266f0 <value_37F>:
c00266f0:	7f 03                	jg     c00266f5 <value_37A+0x1>

c00266f2 <value_37E>:
c00266f2:	7e 03                	jle    c00266f7 <x87Detect+0x1>

c00266f4 <value_37A>:
c00266f4:	7a 03                	jp     c00266f9 <x87Detect+0x3>

c00266f6 <x87Detect>:
c00266f6:	b8 01 00 00 00       	mov    eax,0x1
c00266fb:	0f a2                	cpuid  
c00266fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026703:	74 06                	je     c002670b <x87Detect.nox87>
c0026705:	b8 01 00 00 00       	mov    eax,0x1
c002670a:	c3                   	ret    

c002670b <x87Detect.nox87>:
c002670b:	b8 00 00 00 00       	mov    eax,0x0
c0026710:	c3                   	ret    

c0026711 <x87Save>:
c0026711:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026716:	c3                   	ret    

c0026717 <x87Load>:
c0026717:	dd 64 24 08          	frstor [esp+0x8]
c002671b:	c3                   	ret    

c002671c <x87Init>:
c002671c:	9b db e3             	finit  
c002671f:	0f 20 c0             	mov    eax,cr0
c0026722:	66 25 fb ff          	and    ax,0xfffb
c0026726:	66 0d 22 00          	or     ax,0x22
c002672a:	0f 22 c0             	mov    cr0,eax
c002672d:	0f 06                	clts   
c002672f:	d9 2d f4 66 02 c0    	fldcw  WORD PTR ds:0xc00266f4
c0026735:	c3                   	ret    

c0026736 <x87Close>:
c0026736:	c3                   	ret    
c0026737:	90                   	nop

c0026738 <__do_global_ctors_aux>:
c0026738:	a1 7c 92 02 c0       	mov    eax,ds:0xc002927c
c002673d:	83 f8 ff             	cmp    eax,0xffffffff
c0026740:	74 1a                	je     c002675c <__do_global_ctors_aux+0x24>
c0026742:	55                   	push   ebp
c0026743:	89 e5                	mov    ebp,esp
c0026745:	53                   	push   ebx
c0026746:	52                   	push   edx
c0026747:	bb 7c 92 02 c0       	mov    ebx,0xc002927c
c002674c:	ff d0                	call   eax
c002674e:	83 eb 04             	sub    ebx,0x4
c0026751:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026753:	83 f8 ff             	cmp    eax,0xffffffff
c0026756:	75 f4                	jne    c002674c <__do_global_ctors_aux+0x14>
c0026758:	58                   	pop    eax
c0026759:	5b                   	pop    ebx
c002675a:	5d                   	pop    ebp
c002675b:	c3                   	ret    
c002675c:	c3                   	ret    
c002675d:	66 90                	xchg   ax,ax
c002675f:	90                   	nop

c0026760 <__divdi3>:
c0026760:	55                   	push   ebp
c0026761:	57                   	push   edi
c0026762:	56                   	push   esi
c0026763:	53                   	push   ebx
c0026764:	83 ec 1c             	sub    esp,0x1c
c0026767:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002676b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002676f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026772:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026776:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002677a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002677e:	85 db                	test   ebx,ebx
c0026780:	0f 88 8e 00 00 00    	js     c0026814 <__divdi3+0xb4>
c0026786:	89 dd                	mov    ebp,ebx
c0026788:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026790:	89 d3                	mov    ebx,edx
c0026792:	85 d2                	test   edx,edx
c0026794:	79 0d                	jns    c00267a3 <__divdi3+0x43>
c0026796:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002679a:	f7 d8                	neg    eax
c002679c:	83 d2 00             	adc    edx,0x0
c002679f:	f7 da                	neg    edx
c00267a1:	89 d3                	mov    ebx,edx
c00267a3:	89 c7                	mov    edi,eax
c00267a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267a8:	85 db                	test   ebx,ebx
c00267aa:	75 48                	jne    c00267f4 <__divdi3+0x94>
c00267ac:	39 ef                	cmp    edi,ebp
c00267ae:	76 24                	jbe    c00267d4 <__divdi3+0x74>
c00267b0:	89 ea                	mov    edx,ebp
c00267b2:	f7 f7                	div    edi
c00267b4:	89 c1                	mov    ecx,eax
c00267b6:	31 f6                	xor    esi,esi
c00267b8:	89 c8                	mov    eax,ecx
c00267ba:	89 f2                	mov    edx,esi
c00267bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267c0:	85 c9                	test   ecx,ecx
c00267c2:	74 07                	je     c00267cb <__divdi3+0x6b>
c00267c4:	f7 d8                	neg    eax
c00267c6:	83 d2 00             	adc    edx,0x0
c00267c9:	f7 da                	neg    edx
c00267cb:	83 c4 1c             	add    esp,0x1c
c00267ce:	5b                   	pop    ebx
c00267cf:	5e                   	pop    esi
c00267d0:	5f                   	pop    edi
c00267d1:	5d                   	pop    ebp
c00267d2:	c3                   	ret    
c00267d3:	90                   	nop
c00267d4:	85 ff                	test   edi,edi
c00267d6:	75 0b                	jne    c00267e3 <__divdi3+0x83>
c00267d8:	b8 01 00 00 00       	mov    eax,0x1
c00267dd:	31 d2                	xor    edx,edx
c00267df:	f7 f3                	div    ebx
c00267e1:	89 c7                	mov    edi,eax
c00267e3:	31 d2                	xor    edx,edx
c00267e5:	89 e8                	mov    eax,ebp
c00267e7:	f7 f7                	div    edi
c00267e9:	89 c6                	mov    esi,eax
c00267eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267ee:	f7 f7                	div    edi
c00267f0:	89 c1                	mov    ecx,eax
c00267f2:	eb c4                	jmp    c00267b8 <__divdi3+0x58>
c00267f4:	39 eb                	cmp    ebx,ebp
c00267f6:	77 3c                	ja     c0026834 <__divdi3+0xd4>
c00267f8:	0f bd f3             	bsr    esi,ebx
c00267fb:	83 f6 1f             	xor    esi,0x1f
c00267fe:	75 40                	jne    c0026840 <__divdi3+0xe0>
c0026800:	39 eb                	cmp    ebx,ebp
c0026802:	72 09                	jb     c002680d <__divdi3+0xad>
c0026804:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026807:	0f 87 97 00 00 00    	ja     c00268a4 <__divdi3+0x144>
c002680d:	b9 01 00 00 00       	mov    ecx,0x1
c0026812:	eb a4                	jmp    c00267b8 <__divdi3+0x58>
c0026814:	f7 d9                	neg    ecx
c0026816:	83 d3 00             	adc    ebx,0x0
c0026819:	f7 db                	neg    ebx
c002681b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002681e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026822:	89 dd                	mov    ebp,ebx
c0026824:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002682c:	e9 5f ff ff ff       	jmp    c0026790 <__divdi3+0x30>
c0026831:	8d 76 00             	lea    esi,[esi+0x0]
c0026834:	31 f6                	xor    esi,esi
c0026836:	31 c9                	xor    ecx,ecx
c0026838:	e9 7b ff ff ff       	jmp    c00267b8 <__divdi3+0x58>
c002683d:	8d 76 00             	lea    esi,[esi+0x0]
c0026840:	b8 20 00 00 00       	mov    eax,0x20
c0026845:	29 f0                	sub    eax,esi
c0026847:	89 f1                	mov    ecx,esi
c0026849:	d3 e3                	shl    ebx,cl
c002684b:	89 fa                	mov    edx,edi
c002684d:	88 c1                	mov    cl,al
c002684f:	d3 ea                	shr    edx,cl
c0026851:	09 da                	or     edx,ebx
c0026853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026857:	89 f1                	mov    ecx,esi
c0026859:	d3 e7                	shl    edi,cl
c002685b:	89 eb                	mov    ebx,ebp
c002685d:	88 c1                	mov    cl,al
c002685f:	d3 eb                	shr    ebx,cl
c0026861:	89 f1                	mov    ecx,esi
c0026863:	d3 e5                	shl    ebp,cl
c0026865:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026868:	88 c1                	mov    cl,al
c002686a:	d3 ea                	shr    edx,cl
c002686c:	09 d5                	or     ebp,edx
c002686e:	89 e8                	mov    eax,ebp
c0026870:	89 da                	mov    edx,ebx
c0026872:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026876:	89 d3                	mov    ebx,edx
c0026878:	89 c5                	mov    ebp,eax
c002687a:	f7 e7                	mul    edi
c002687c:	39 d3                	cmp    ebx,edx
c002687e:	72 18                	jb     c0026898 <__divdi3+0x138>
c0026880:	74 0a                	je     c002688c <__divdi3+0x12c>
c0026882:	89 e9                	mov    ecx,ebp
c0026884:	31 f6                	xor    esi,esi
c0026886:	e9 2d ff ff ff       	jmp    c00267b8 <__divdi3+0x58>
c002688b:	90                   	nop
c002688c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002688f:	89 f1                	mov    ecx,esi
c0026891:	d3 e7                	shl    edi,cl
c0026893:	39 c7                	cmp    edi,eax
c0026895:	73 eb                	jae    c0026882 <__divdi3+0x122>
c0026897:	90                   	nop
c0026898:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002689b:	31 f6                	xor    esi,esi
c002689d:	e9 16 ff ff ff       	jmp    c00267b8 <__divdi3+0x58>
c00268a2:	66 90                	xchg   ax,ax
c00268a4:	31 c9                	xor    ecx,ecx
c00268a6:	e9 0d ff ff ff       	jmp    c00267b8 <__divdi3+0x58>
c00268ab:	90                   	nop

c00268ac <__moddi3>:
c00268ac:	55                   	push   ebp
c00268ad:	57                   	push   edi
c00268ae:	56                   	push   esi
c00268af:	53                   	push   ebx
c00268b0:	83 ec 2c             	sub    esp,0x2c
c00268b3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00268b7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00268bb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00268bf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00268c3:	85 db                	test   ebx,ebx
c00268c5:	0f 88 85 00 00 00    	js     c0026950 <__moddi3+0xa4>
c00268cb:	89 de                	mov    esi,ebx
c00268cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00268d5:	89 d7                	mov    edi,edx
c00268d7:	85 d2                	test   edx,edx
c00268d9:	79 09                	jns    c00268e4 <__moddi3+0x38>
c00268db:	f7 d8                	neg    eax
c00268dd:	83 d2 00             	adc    edx,0x0
c00268e0:	f7 da                	neg    edx
c00268e2:	89 d7                	mov    edi,edx
c00268e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268e8:	89 cd                	mov    ebp,ecx
c00268ea:	85 ff                	test   edi,edi
c00268ec:	75 52                	jne    c0026940 <__moddi3+0x94>
c00268ee:	89 c3                	mov    ebx,eax
c00268f0:	39 f0                	cmp    eax,esi
c00268f2:	76 24                	jbe    c0026918 <__moddi3+0x6c>
c00268f4:	89 c8                	mov    eax,ecx
c00268f6:	89 f2                	mov    edx,esi
c00268f8:	f7 f3                	div    ebx
c00268fa:	89 d6                	mov    esi,edx
c00268fc:	89 f0                	mov    eax,esi
c00268fe:	31 d2                	xor    edx,edx
c0026900:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026904:	85 c9                	test   ecx,ecx
c0026906:	74 07                	je     c002690f <__moddi3+0x63>
c0026908:	f7 d8                	neg    eax
c002690a:	83 d2 00             	adc    edx,0x0
c002690d:	f7 da                	neg    edx
c002690f:	83 c4 2c             	add    esp,0x2c
c0026912:	5b                   	pop    ebx
c0026913:	5e                   	pop    esi
c0026914:	5f                   	pop    edi
c0026915:	5d                   	pop    ebp
c0026916:	c3                   	ret    
c0026917:	90                   	nop
c0026918:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002691c:	85 db                	test   ebx,ebx
c002691e:	75 0d                	jne    c002692d <__moddi3+0x81>
c0026920:	b8 01 00 00 00       	mov    eax,0x1
c0026925:	31 d2                	xor    edx,edx
c0026927:	f7 f7                	div    edi
c0026929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002692d:	89 f0                	mov    eax,esi
c002692f:	31 d2                	xor    edx,edx
c0026931:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026935:	f7 f7                	div    edi
c0026937:	89 e8                	mov    eax,ebp
c0026939:	f7 f7                	div    edi
c002693b:	89 d6                	mov    esi,edx
c002693d:	eb bd                	jmp    c00268fc <__moddi3+0x50>
c002693f:	90                   	nop
c0026940:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026944:	39 f7                	cmp    edi,esi
c0026946:	76 20                	jbe    c0026968 <__moddi3+0xbc>
c0026948:	89 c8                	mov    eax,ecx
c002694a:	89 f2                	mov    edx,esi
c002694c:	eb b2                	jmp    c0026900 <__moddi3+0x54>
c002694e:	66 90                	xchg   ax,ax
c0026950:	f7 d9                	neg    ecx
c0026952:	83 d3 00             	adc    ebx,0x0
c0026955:	f7 db                	neg    ebx
c0026957:	89 de                	mov    esi,ebx
c0026959:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026961:	e9 6f ff ff ff       	jmp    c00268d5 <__moddi3+0x29>
c0026966:	66 90                	xchg   ax,ax
c0026968:	0f bd c7             	bsr    eax,edi
c002696b:	83 f0 1f             	xor    eax,0x1f
c002696e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026972:	75 24                	jne    c0026998 <__moddi3+0xec>
c0026974:	39 f7                	cmp    edi,esi
c0026976:	72 06                	jb     c002697e <__moddi3+0xd2>
c0026978:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002697c:	77 0c                	ja     c002698a <__moddi3+0xde>
c002697e:	89 e9                	mov    ecx,ebp
c0026980:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026984:	19 fe                	sbb    esi,edi
c0026986:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002698a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002698e:	89 f2                	mov    edx,esi
c0026990:	e9 6b ff ff ff       	jmp    c0026900 <__moddi3+0x54>
c0026995:	8d 76 00             	lea    esi,[esi+0x0]
c0026998:	b8 20 00 00 00       	mov    eax,0x20
c002699d:	89 c2                	mov    edx,eax
c002699f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00269a3:	29 da                	sub    edx,ebx
c00269a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00269a9:	88 d9                	mov    cl,bl
c00269ab:	d3 e7                	shl    edi,cl
c00269ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00269b1:	88 d1                	mov    cl,dl
c00269b3:	d3 e8                	shr    eax,cl
c00269b5:	09 c7                	or     edi,eax
c00269b7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00269bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269bf:	89 d8                	mov    eax,ebx
c00269c1:	88 d9                	mov    cl,bl
c00269c3:	d3 e7                	shl    edi,cl
c00269c5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269c9:	89 f3                	mov    ebx,esi
c00269cb:	88 d1                	mov    cl,dl
c00269cd:	d3 eb                	shr    ebx,cl
c00269cf:	89 c7                	mov    edi,eax
c00269d1:	88 c1                	mov    cl,al
c00269d3:	d3 e6                	shl    esi,cl
c00269d5:	89 e8                	mov    eax,ebp
c00269d7:	88 d1                	mov    cl,dl
c00269d9:	d3 e8                	shr    eax,cl
c00269db:	09 f0                	or     eax,esi
c00269dd:	89 f9                	mov    ecx,edi
c00269df:	d3 e5                	shl    ebp,cl
c00269e1:	89 da                	mov    edx,ebx
c00269e3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00269e7:	89 d3                	mov    ebx,edx
c00269e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269ed:	89 c6                	mov    esi,eax
c00269ef:	89 d1                	mov    ecx,edx
c00269f1:	39 d3                	cmp    ebx,edx
c00269f3:	72 27                	jb     c0026a1c <__moddi3+0x170>
c00269f5:	74 21                	je     c0026a18 <__moddi3+0x16c>
c00269f7:	29 f5                	sub    ebp,esi
c00269f9:	19 cb                	sbb    ebx,ecx
c00269fb:	89 de                	mov    esi,ebx
c00269fd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a01:	d3 e6                	shl    esi,cl
c0026a03:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a07:	89 f9                	mov    ecx,edi
c0026a09:	d3 ed                	shr    ebp,cl
c0026a0b:	09 ee                	or     esi,ebp
c0026a0d:	89 f0                	mov    eax,esi
c0026a0f:	d3 eb                	shr    ebx,cl
c0026a11:	89 da                	mov    edx,ebx
c0026a13:	e9 e8 fe ff ff       	jmp    c0026900 <__moddi3+0x54>
c0026a18:	39 c5                	cmp    ebp,eax
c0026a1a:	73 db                	jae    c00269f7 <__moddi3+0x14b>
c0026a1c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a20:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a24:	89 d1                	mov    ecx,edx
c0026a26:	89 c6                	mov    esi,eax
c0026a28:	eb cd                	jmp    c00269f7 <__moddi3+0x14b>
c0026a2a:	66 90                	xchg   ax,ax

c0026a2c <__udivdi3>:
c0026a2c:	55                   	push   ebp
c0026a2d:	57                   	push   edi
c0026a2e:	56                   	push   esi
c0026a2f:	53                   	push   ebx
c0026a30:	83 ec 1c             	sub    esp,0x1c
c0026a33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a37:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a3b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a3f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a43:	85 d2                	test   edx,edx
c0026a45:	75 41                	jne    c0026a88 <__udivdi3+0x5c>
c0026a47:	39 f7                	cmp    edi,esi
c0026a49:	76 15                	jbe    c0026a60 <__udivdi3+0x34>
c0026a4b:	89 e8                	mov    eax,ebp
c0026a4d:	89 f2                	mov    edx,esi
c0026a4f:	f7 f7                	div    edi
c0026a51:	31 db                	xor    ebx,ebx
c0026a53:	89 da                	mov    edx,ebx
c0026a55:	83 c4 1c             	add    esp,0x1c
c0026a58:	5b                   	pop    ebx
c0026a59:	5e                   	pop    esi
c0026a5a:	5f                   	pop    edi
c0026a5b:	5d                   	pop    ebp
c0026a5c:	c3                   	ret    
c0026a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a60:	89 f9                	mov    ecx,edi
c0026a62:	85 ff                	test   edi,edi
c0026a64:	75 0b                	jne    c0026a71 <__udivdi3+0x45>
c0026a66:	b8 01 00 00 00       	mov    eax,0x1
c0026a6b:	31 d2                	xor    edx,edx
c0026a6d:	f7 f7                	div    edi
c0026a6f:	89 c1                	mov    ecx,eax
c0026a71:	31 d2                	xor    edx,edx
c0026a73:	89 f0                	mov    eax,esi
c0026a75:	f7 f1                	div    ecx
c0026a77:	89 c3                	mov    ebx,eax
c0026a79:	89 e8                	mov    eax,ebp
c0026a7b:	f7 f1                	div    ecx
c0026a7d:	89 da                	mov    edx,ebx
c0026a7f:	83 c4 1c             	add    esp,0x1c
c0026a82:	5b                   	pop    ebx
c0026a83:	5e                   	pop    esi
c0026a84:	5f                   	pop    edi
c0026a85:	5d                   	pop    ebp
c0026a86:	c3                   	ret    
c0026a87:	90                   	nop
c0026a88:	39 f2                	cmp    edx,esi
c0026a8a:	77 1c                	ja     c0026aa8 <__udivdi3+0x7c>
c0026a8c:	0f bd da             	bsr    ebx,edx
c0026a8f:	83 f3 1f             	xor    ebx,0x1f
c0026a92:	75 24                	jne    c0026ab8 <__udivdi3+0x8c>
c0026a94:	39 f2                	cmp    edx,esi
c0026a96:	72 08                	jb     c0026aa0 <__udivdi3+0x74>
c0026a98:	39 ef                	cmp    edi,ebp
c0026a9a:	0f 87 84 00 00 00    	ja     c0026b24 <__udivdi3+0xf8>
c0026aa0:	b8 01 00 00 00       	mov    eax,0x1
c0026aa5:	eb ac                	jmp    c0026a53 <__udivdi3+0x27>
c0026aa7:	90                   	nop
c0026aa8:	31 db                	xor    ebx,ebx
c0026aaa:	31 c0                	xor    eax,eax
c0026aac:	89 da                	mov    edx,ebx
c0026aae:	83 c4 1c             	add    esp,0x1c
c0026ab1:	5b                   	pop    ebx
c0026ab2:	5e                   	pop    esi
c0026ab3:	5f                   	pop    edi
c0026ab4:	5d                   	pop    ebp
c0026ab5:	c3                   	ret    
c0026ab6:	66 90                	xchg   ax,ax
c0026ab8:	b8 20 00 00 00       	mov    eax,0x20
c0026abd:	29 d8                	sub    eax,ebx
c0026abf:	88 d9                	mov    cl,bl
c0026ac1:	d3 e2                	shl    edx,cl
c0026ac3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026ac7:	89 fa                	mov    edx,edi
c0026ac9:	88 c1                	mov    cl,al
c0026acb:	d3 ea                	shr    edx,cl
c0026acd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ad1:	09 d1                	or     ecx,edx
c0026ad3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ad7:	88 d9                	mov    cl,bl
c0026ad9:	d3 e7                	shl    edi,cl
c0026adb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026adf:	89 f7                	mov    edi,esi
c0026ae1:	88 c1                	mov    cl,al
c0026ae3:	d3 ef                	shr    edi,cl
c0026ae5:	88 d9                	mov    cl,bl
c0026ae7:	d3 e6                	shl    esi,cl
c0026ae9:	89 ea                	mov    edx,ebp
c0026aeb:	88 c1                	mov    cl,al
c0026aed:	d3 ea                	shr    edx,cl
c0026aef:	09 d6                	or     esi,edx
c0026af1:	89 f0                	mov    eax,esi
c0026af3:	89 fa                	mov    edx,edi
c0026af5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026af9:	89 d7                	mov    edi,edx
c0026afb:	89 c6                	mov    esi,eax
c0026afd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b01:	39 d7                	cmp    edi,edx
c0026b03:	72 13                	jb     c0026b18 <__udivdi3+0xec>
c0026b05:	74 09                	je     c0026b10 <__udivdi3+0xe4>
c0026b07:	89 f0                	mov    eax,esi
c0026b09:	31 db                	xor    ebx,ebx
c0026b0b:	e9 43 ff ff ff       	jmp    c0026a53 <__udivdi3+0x27>
c0026b10:	88 d9                	mov    cl,bl
c0026b12:	d3 e5                	shl    ebp,cl
c0026b14:	39 c5                	cmp    ebp,eax
c0026b16:	73 ef                	jae    c0026b07 <__udivdi3+0xdb>
c0026b18:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b1b:	31 db                	xor    ebx,ebx
c0026b1d:	e9 31 ff ff ff       	jmp    c0026a53 <__udivdi3+0x27>
c0026b22:	66 90                	xchg   ax,ax
c0026b24:	31 c0                	xor    eax,eax
c0026b26:	e9 28 ff ff ff       	jmp    c0026a53 <__udivdi3+0x27>
c0026b2b:	90                   	nop

c0026b2c <__umoddi3>:
c0026b2c:	55                   	push   ebp
c0026b2d:	57                   	push   edi
c0026b2e:	56                   	push   esi
c0026b2f:	53                   	push   ebx
c0026b30:	83 ec 1c             	sub    esp,0x1c
c0026b33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b3b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b43:	89 da                	mov    edx,ebx
c0026b45:	85 c0                	test   eax,eax
c0026b47:	75 37                	jne    c0026b80 <__umoddi3+0x54>
c0026b49:	39 df                	cmp    edi,ebx
c0026b4b:	76 13                	jbe    c0026b60 <__umoddi3+0x34>
c0026b4d:	89 f0                	mov    eax,esi
c0026b4f:	f7 f7                	div    edi
c0026b51:	89 d0                	mov    eax,edx
c0026b53:	31 d2                	xor    edx,edx
c0026b55:	83 c4 1c             	add    esp,0x1c
c0026b58:	5b                   	pop    ebx
c0026b59:	5e                   	pop    esi
c0026b5a:	5f                   	pop    edi
c0026b5b:	5d                   	pop    ebp
c0026b5c:	c3                   	ret    
c0026b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b60:	89 fd                	mov    ebp,edi
c0026b62:	85 ff                	test   edi,edi
c0026b64:	75 0b                	jne    c0026b71 <__umoddi3+0x45>
c0026b66:	b8 01 00 00 00       	mov    eax,0x1
c0026b6b:	31 d2                	xor    edx,edx
c0026b6d:	f7 f7                	div    edi
c0026b6f:	89 c5                	mov    ebp,eax
c0026b71:	89 d8                	mov    eax,ebx
c0026b73:	31 d2                	xor    edx,edx
c0026b75:	f7 f5                	div    ebp
c0026b77:	89 f0                	mov    eax,esi
c0026b79:	f7 f5                	div    ebp
c0026b7b:	89 d0                	mov    eax,edx
c0026b7d:	eb d4                	jmp    c0026b53 <__umoddi3+0x27>
c0026b7f:	90                   	nop
c0026b80:	89 f1                	mov    ecx,esi
c0026b82:	39 d8                	cmp    eax,ebx
c0026b84:	76 0a                	jbe    c0026b90 <__umoddi3+0x64>
c0026b86:	89 f0                	mov    eax,esi
c0026b88:	83 c4 1c             	add    esp,0x1c
c0026b8b:	5b                   	pop    ebx
c0026b8c:	5e                   	pop    esi
c0026b8d:	5f                   	pop    edi
c0026b8e:	5d                   	pop    ebp
c0026b8f:	c3                   	ret    
c0026b90:	0f bd e8             	bsr    ebp,eax
c0026b93:	83 f5 1f             	xor    ebp,0x1f
c0026b96:	75 1c                	jne    c0026bb4 <__umoddi3+0x88>
c0026b98:	39 d8                	cmp    eax,ebx
c0026b9a:	72 04                	jb     c0026ba0 <__umoddi3+0x74>
c0026b9c:	39 f7                	cmp    edi,esi
c0026b9e:	77 08                	ja     c0026ba8 <__umoddi3+0x7c>
c0026ba0:	89 da                	mov    edx,ebx
c0026ba2:	29 fe                	sub    esi,edi
c0026ba4:	19 c2                	sbb    edx,eax
c0026ba6:	89 f1                	mov    ecx,esi
c0026ba8:	89 c8                	mov    eax,ecx
c0026baa:	83 c4 1c             	add    esp,0x1c
c0026bad:	5b                   	pop    ebx
c0026bae:	5e                   	pop    esi
c0026baf:	5f                   	pop    edi
c0026bb0:	5d                   	pop    ebp
c0026bb1:	c3                   	ret    
c0026bb2:	66 90                	xchg   ax,ax
c0026bb4:	ba 20 00 00 00       	mov    edx,0x20
c0026bb9:	29 ea                	sub    edx,ebp
c0026bbb:	89 e9                	mov    ecx,ebp
c0026bbd:	d3 e0                	shl    eax,cl
c0026bbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bc3:	89 f8                	mov    eax,edi
c0026bc5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026bc9:	88 d1                	mov    cl,dl
c0026bcb:	d3 e8                	shr    eax,cl
c0026bcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026bd1:	09 c1                	or     ecx,eax
c0026bd3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026bd7:	89 e9                	mov    ecx,ebp
c0026bd9:	d3 e7                	shl    edi,cl
c0026bdb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026bdf:	89 d8                	mov    eax,ebx
c0026be1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026be5:	88 d1                	mov    cl,dl
c0026be7:	d3 e8                	shr    eax,cl
c0026be9:	89 c7                	mov    edi,eax
c0026beb:	89 e9                	mov    ecx,ebp
c0026bed:	d3 e3                	shl    ebx,cl
c0026bef:	89 f0                	mov    eax,esi
c0026bf1:	88 d1                	mov    cl,dl
c0026bf3:	d3 e8                	shr    eax,cl
c0026bf5:	09 d8                	or     eax,ebx
c0026bf7:	89 e9                	mov    ecx,ebp
c0026bf9:	d3 e6                	shl    esi,cl
c0026bfb:	89 f3                	mov    ebx,esi
c0026bfd:	89 fa                	mov    edx,edi
c0026bff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c03:	89 d1                	mov    ecx,edx
c0026c05:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c09:	89 c6                	mov    esi,eax
c0026c0b:	89 d7                	mov    edi,edx
c0026c0d:	39 d1                	cmp    ecx,edx
c0026c0f:	72 27                	jb     c0026c38 <__umoddi3+0x10c>
c0026c11:	74 21                	je     c0026c34 <__umoddi3+0x108>
c0026c13:	89 ca                	mov    edx,ecx
c0026c15:	29 f3                	sub    ebx,esi
c0026c17:	19 fa                	sbb    edx,edi
c0026c19:	89 d0                	mov    eax,edx
c0026c1b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c1f:	d3 e0                	shl    eax,cl
c0026c21:	89 e9                	mov    ecx,ebp
c0026c23:	d3 eb                	shr    ebx,cl
c0026c25:	09 d8                	or     eax,ebx
c0026c27:	d3 ea                	shr    edx,cl
c0026c29:	83 c4 1c             	add    esp,0x1c
c0026c2c:	5b                   	pop    ebx
c0026c2d:	5e                   	pop    esi
c0026c2e:	5f                   	pop    edi
c0026c2f:	5d                   	pop    ebp
c0026c30:	c3                   	ret    
c0026c31:	8d 76 00             	lea    esi,[esi+0x0]
c0026c34:	39 c3                	cmp    ebx,eax
c0026c36:	73 db                	jae    c0026c13 <__umoddi3+0xe7>
c0026c38:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c3c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c40:	89 d7                	mov    edi,edx
c0026c42:	89 c6                	mov    esi,eax
c0026c44:	eb cd                	jmp    c0026c13 <__umoddi3+0xe7>

c0026c46 <__addsf3>:
c0026c46:	55                   	push   ebp
c0026c47:	89 e5                	mov    ebp,esp
c0026c49:	57                   	push   edi
c0026c4a:	56                   	push   esi
c0026c4b:	53                   	push   ebx
c0026c4c:	83 ec 08             	sub    esp,0x8
c0026c4f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c52:	89 fa                	mov    edx,edi
c0026c54:	89 f8                	mov    eax,edi
c0026c56:	c1 f8 17             	sar    eax,0x17
c0026c59:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c5c:	c1 e2 08             	shl    edx,0x8
c0026c5f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c65:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c68:	89 de                	mov    esi,ebx
c0026c6a:	c1 fe 17             	sar    esi,0x17
c0026c6d:	c1 e3 08             	shl    ebx,0x8
c0026c70:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c76:	31 f0                	xor    eax,esi
c0026c78:	0f 88 3b 01 00 00    	js     c0026db9 <__addsf3+0x173>
c0026c7e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c81:	29 f1                	sub    ecx,esi
c0026c83:	85 c9                	test   ecx,ecx
c0026c85:	7e 54                	jle    c0026cdb <__addsf3+0x95>
c0026c87:	89 f0                	mov    eax,esi
c0026c89:	84 c0                	test   al,al
c0026c8b:	75 10                	jne    c0026c9d <__addsf3+0x57>
c0026c8d:	85 db                	test   ebx,ebx
c0026c8f:	0f 84 aa 02 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026c95:	49                   	dec    ecx
c0026c96:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c99:	74 38                	je     c0026cd3 <__addsf3+0x8d>
c0026c9b:	eb 13                	jmp    c0026cb0 <__addsf3+0x6a>
c0026c9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ca0:	f7 d0                	not    eax
c0026ca2:	84 c0                	test   al,al
c0026ca4:	0f 84 95 02 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026caa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cb0:	83 f9 1f             	cmp    ecx,0x1f
c0026cb3:	0f 8f 86 02 00 00    	jg     c0026f3f <__addsf3+0x2f9>
c0026cb9:	89 de                	mov    esi,ebx
c0026cbb:	d3 ee                	shr    esi,cl
c0026cbd:	b8 20 00 00 00       	mov    eax,0x20
c0026cc2:	29 c8                	sub    eax,ecx
c0026cc4:	89 c1                	mov    ecx,eax
c0026cc6:	d3 e3                	shl    ebx,cl
c0026cc8:	31 c0                	xor    eax,eax
c0026cca:	85 db                	test   ebx,ebx
c0026ccc:	0f 95 c0             	setne  al
c0026ccf:	09 f0                	or     eax,esi
c0026cd1:	01 d0                	add    eax,edx
c0026cd3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026cd6:	e9 b6 00 00 00       	jmp    c0026d91 <__addsf3+0x14b>
c0026cdb:	74 5c                	je     c0026d39 <__addsf3+0xf3>
c0026cdd:	89 f1                	mov    ecx,esi
c0026cdf:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026ce2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ce5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ce9:	75 14                	jne    c0026cff <__addsf3+0xb9>
c0026ceb:	85 d2                	test   edx,edx
c0026ced:	0f 84 4c 02 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026cf3:	49                   	dec    ecx
c0026cf4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cf7:	0f 84 94 00 00 00    	je     c0026d91 <__addsf3+0x14b>
c0026cfd:	eb 12                	jmp    c0026d11 <__addsf3+0xcb>
c0026cff:	89 f0                	mov    eax,esi
c0026d01:	f7 d0                	not    eax
c0026d03:	84 c0                	test   al,al
c0026d05:	0f 84 34 02 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026d0b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d11:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d14:	83 f9 1f             	cmp    ecx,0x1f
c0026d17:	0f 8f 22 02 00 00    	jg     c0026f3f <__addsf3+0x2f9>
c0026d1d:	89 d7                	mov    edi,edx
c0026d1f:	d3 ef                	shr    edi,cl
c0026d21:	b8 20 00 00 00       	mov    eax,0x20
c0026d26:	29 c8                	sub    eax,ecx
c0026d28:	89 c1                	mov    ecx,eax
c0026d2a:	d3 e2                	shl    edx,cl
c0026d2c:	31 c0                	xor    eax,eax
c0026d2e:	85 d2                	test   edx,edx
c0026d30:	0f 95 c0             	setne  al
c0026d33:	09 f8                	or     eax,edi
c0026d35:	01 d8                	add    eax,ebx
c0026d37:	eb 58                	jmp    c0026d91 <__addsf3+0x14b>
c0026d39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d3c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d3f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d45:	75 32                	jne    c0026d79 <__addsf3+0x133>
c0026d47:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d4b:	75 1f                	jne    c0026d6c <__addsf3+0x126>
c0026d4d:	85 d2                	test   edx,edx
c0026d4f:	0f 84 e0 01 00 00    	je     c0026f35 <__addsf3+0x2ef>
c0026d55:	85 db                	test   ebx,ebx
c0026d57:	0f 84 e2 01 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026d5d:	89 d0                	mov    eax,edx
c0026d5f:	01 d8                	add    eax,ebx
c0026d61:	0f 89 a9 01 00 00    	jns    c0026f10 <__addsf3+0x2ca>
c0026d67:	e9 9d 01 00 00       	jmp    c0026f09 <__addsf3+0x2c3>
c0026d6c:	85 d2                	test   edx,edx
c0026d6e:	0f 85 cb 01 00 00    	jne    c0026f3f <__addsf3+0x2f9>
c0026d74:	e9 bc 01 00 00       	jmp    c0026f35 <__addsf3+0x2ef>
c0026d79:	31 c0                	xor    eax,eax
c0026d7b:	89 f1                	mov    ecx,esi
c0026d7d:	f7 d1                	not    ecx
c0026d7f:	84 c9                	test   cl,cl
c0026d81:	0f 84 90 01 00 00    	je     c0026f17 <__addsf3+0x2d1>
c0026d87:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d8a:	d1 e8                	shr    eax,1
c0026d8c:	e9 86 01 00 00       	jmp    c0026f17 <__addsf3+0x2d1>
c0026d91:	85 c0                	test   eax,eax
c0026d93:	0f 89 7e 01 00 00    	jns    c0026f17 <__addsf3+0x2d1>
c0026d99:	46                   	inc    esi
c0026d9a:	89 f2                	mov    edx,esi
c0026d9c:	f7 d2                	not    edx
c0026d9e:	84 d2                	test   dl,dl
c0026da0:	0f 84 6f 01 00 00    	je     c0026f15 <__addsf3+0x2cf>
c0026da6:	89 c2                	mov    edx,eax
c0026da8:	83 e2 01             	and    edx,0x1
c0026dab:	d1 e8                	shr    eax,1
c0026dad:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026db2:	09 d0                	or     eax,edx
c0026db4:	e9 5e 01 00 00       	jmp    c0026f17 <__addsf3+0x2d1>
c0026db9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026dbd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026dc0:	89 f0                	mov    eax,esi
c0026dc2:	0f b6 c0             	movzx  eax,al
c0026dc5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026dc8:	29 c1                	sub    ecx,eax
c0026dca:	85 c9                	test   ecx,ecx
c0026dcc:	7e 55                	jle    c0026e23 <__addsf3+0x1dd>
c0026dce:	85 c0                	test   eax,eax
c0026dd0:	75 11                	jne    c0026de3 <__addsf3+0x19d>
c0026dd2:	85 db                	test   ebx,ebx
c0026dd4:	0f 84 65 01 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026dda:	49                   	dec    ecx
c0026ddb:	75 19                	jne    c0026df6 <__addsf3+0x1b0>
c0026ddd:	89 d0                	mov    eax,edx
c0026ddf:	29 d8                	sub    eax,ebx
c0026de1:	eb 38                	jmp    c0026e1b <__addsf3+0x1d5>
c0026de3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026de6:	f7 d0                	not    eax
c0026de8:	84 c0                	test   al,al
c0026dea:	0f 84 4f 01 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026df0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026df6:	83 f9 1f             	cmp    ecx,0x1f
c0026df9:	0f 8f 40 01 00 00    	jg     c0026f3f <__addsf3+0x2f9>
c0026dff:	89 de                	mov    esi,ebx
c0026e01:	d3 ee                	shr    esi,cl
c0026e03:	b8 20 00 00 00       	mov    eax,0x20
c0026e08:	29 c8                	sub    eax,ecx
c0026e0a:	89 c1                	mov    ecx,eax
c0026e0c:	d3 e3                	shl    ebx,cl
c0026e0e:	31 c0                	xor    eax,eax
c0026e10:	85 db                	test   ebx,ebx
c0026e12:	0f 95 c0             	setne  al
c0026e15:	09 f0                	or     eax,esi
c0026e17:	29 c2                	sub    edx,eax
c0026e19:	89 d0                	mov    eax,edx
c0026e1b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e1e:	e9 af 00 00 00       	jmp    c0026ed2 <__addsf3+0x28c>
c0026e23:	74 5c                	je     c0026e81 <__addsf3+0x23b>
c0026e25:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e28:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e2b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e2f:	75 14                	jne    c0026e45 <__addsf3+0x1ff>
c0026e31:	85 d2                	test   edx,edx
c0026e33:	0f 84 06 01 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026e39:	48                   	dec    eax
c0026e3a:	75 1b                	jne    c0026e57 <__addsf3+0x211>
c0026e3c:	89 d8                	mov    eax,ebx
c0026e3e:	29 d0                	sub    eax,edx
c0026e40:	e9 8d 00 00 00       	jmp    c0026ed2 <__addsf3+0x28c>
c0026e45:	89 f1                	mov    ecx,esi
c0026e47:	f7 d1                	not    ecx
c0026e49:	84 c9                	test   cl,cl
c0026e4b:	0f 84 ee 00 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026e51:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e57:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e5a:	83 f8 1f             	cmp    eax,0x1f
c0026e5d:	0f 8f dc 00 00 00    	jg     c0026f3f <__addsf3+0x2f9>
c0026e63:	89 d7                	mov    edi,edx
c0026e65:	88 c1                	mov    cl,al
c0026e67:	d3 ef                	shr    edi,cl
c0026e69:	b9 20 00 00 00       	mov    ecx,0x20
c0026e6e:	29 c1                	sub    ecx,eax
c0026e70:	d3 e2                	shl    edx,cl
c0026e72:	31 c0                	xor    eax,eax
c0026e74:	85 d2                	test   edx,edx
c0026e76:	0f 95 c0             	setne  al
c0026e79:	09 f8                	or     eax,edi
c0026e7b:	29 c3                	sub    ebx,eax
c0026e7d:	89 d8                	mov    eax,ebx
c0026e7f:	eb 51                	jmp    c0026ed2 <__addsf3+0x28c>
c0026e81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e84:	40                   	inc    eax
c0026e85:	a8 fe                	test   al,0xfe
c0026e87:	75 3d                	jne    c0026ec6 <__addsf3+0x280>
c0026e89:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e8d:	0f 85 a7 00 00 00    	jne    c0026f3a <__addsf3+0x2f4>
c0026e93:	85 d2                	test   edx,edx
c0026e95:	75 12                	jne    c0026ea9 <__addsf3+0x263>
c0026e97:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e9a:	85 db                	test   ebx,ebx
c0026e9c:	0f 85 9d 00 00 00    	jne    c0026f3f <__addsf3+0x2f9>
c0026ea2:	31 ff                	xor    edi,edi
c0026ea4:	e9 96 00 00 00       	jmp    c0026f3f <__addsf3+0x2f9>
c0026ea9:	85 db                	test   ebx,ebx
c0026eab:	0f 84 8e 00 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026eb1:	89 d0                	mov    eax,edx
c0026eb3:	29 d8                	sub    eax,ebx
c0026eb5:	79 06                	jns    c0026ebd <__addsf3+0x277>
c0026eb7:	89 d8                	mov    eax,ebx
c0026eb9:	29 d0                	sub    eax,edx
c0026ebb:	eb 5a                	jmp    c0026f17 <__addsf3+0x2d1>
c0026ebd:	bf 00 00 00 00       	mov    edi,0x0
c0026ec2:	74 7b                	je     c0026f3f <__addsf3+0x2f9>
c0026ec4:	eb 4a                	jmp    c0026f10 <__addsf3+0x2ca>
c0026ec6:	89 d0                	mov    eax,edx
c0026ec8:	29 d8                	sub    eax,ebx
c0026eca:	79 12                	jns    c0026ede <__addsf3+0x298>
c0026ecc:	89 d8                	mov    eax,ebx
c0026ece:	29 d0                	sub    eax,edx
c0026ed0:	eb 09                	jmp    c0026edb <__addsf3+0x295>
c0026ed2:	85 c0                	test   eax,eax
c0026ed4:	79 41                	jns    c0026f17 <__addsf3+0x2d1>
c0026ed6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026edb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026ede:	31 f6                	xor    esi,esi
c0026ee0:	85 c0                	test   eax,eax
c0026ee2:	74 33                	je     c0026f17 <__addsf3+0x2d1>
c0026ee4:	0f bd c8             	bsr    ecx,eax
c0026ee7:	83 f1 1f             	xor    ecx,0x1f
c0026eea:	d3 e0                	shl    eax,cl
c0026eec:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ef0:	39 ca                	cmp    edx,ecx
c0026ef2:	7f 10                	jg     c0026f04 <__addsf3+0x2be>
c0026ef4:	29 d1                	sub    ecx,edx
c0026ef6:	41                   	inc    ecx
c0026ef7:	d3 e8                	shr    eax,cl
c0026ef9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026efc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f02:	eb 13                	jmp    c0026f17 <__addsf3+0x2d1>
c0026f04:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f07:	29 ce                	sub    esi,ecx
c0026f09:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f0e:	eb 07                	jmp    c0026f17 <__addsf3+0x2d1>
c0026f10:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f13:	eb 02                	jmp    c0026f17 <__addsf3+0x2d1>
c0026f15:	31 c0                	xor    eax,eax
c0026f17:	89 c2                	mov    edx,eax
c0026f19:	c1 ea 08             	shr    edx,0x8
c0026f1c:	a8 7f                	test   al,0x7f
c0026f1e:	0f 95 c1             	setne  cl
c0026f21:	09 d1                	or     ecx,edx
c0026f23:	83 e1 01             	and    ecx,0x1
c0026f26:	c1 e8 07             	shr    eax,0x7
c0026f29:	21 c8                	and    eax,ecx
c0026f2b:	c1 e6 17             	shl    esi,0x17
c0026f2e:	09 d6                	or     esi,edx
c0026f30:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f33:	eb 0a                	jmp    c0026f3f <__addsf3+0x2f9>
c0026f35:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f38:	eb 05                	jmp    c0026f3f <__addsf3+0x2f9>
c0026f3a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f3f:	89 f8                	mov    eax,edi
c0026f41:	5a                   	pop    edx
c0026f42:	59                   	pop    ecx
c0026f43:	5b                   	pop    ebx
c0026f44:	5e                   	pop    esi
c0026f45:	5f                   	pop    edi
c0026f46:	5d                   	pop    ebp
c0026f47:	c3                   	ret    

c0026f48 <__subsf3>:
c0026f48:	55                   	push   ebp
c0026f49:	89 e5                	mov    ebp,esp
c0026f4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f4e:	05 00 00 00 80       	add    eax,0x80000000
c0026f53:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f56:	5d                   	pop    ebp
c0026f57:	e9 ea fc ff ff       	jmp    c0026c46 <__addsf3>

c0026f5c <__negsf2>:
c0026f5c:	55                   	push   ebp
c0026f5d:	89 e5                	mov    ebp,esp
c0026f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f62:	05 00 00 00 80       	add    eax,0x80000000
c0026f67:	5d                   	pop    ebp
c0026f68:	c3                   	ret    

c0026f69 <__mulsf3>:
c0026f69:	55                   	push   ebp
c0026f6a:	89 e5                	mov    ebp,esp
c0026f6c:	57                   	push   edi
c0026f6d:	56                   	push   esi
c0026f6e:	53                   	push   ebx
c0026f6f:	83 ec 1c             	sub    esp,0x1c
c0026f72:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f75:	89 f0                	mov    eax,esi
c0026f77:	89 f1                	mov    ecx,esi
c0026f79:	c1 f9 17             	sar    ecx,0x17
c0026f7c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f7f:	c1 e0 08             	shl    eax,0x8
c0026f82:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f87:	89 c1                	mov    ecx,eax
c0026f89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f8c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f8f:	89 c7                	mov    edi,eax
c0026f91:	c1 ff 17             	sar    edi,0x17
c0026f94:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f98:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f9b:	89 f8                	mov    eax,edi
c0026f9d:	0f b6 c0             	movzx  eax,al
c0026fa0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fa3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026fa7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026faa:	42                   	inc    edx
c0026fab:	80 e2 fe             	and    dl,0xfe
c0026fae:	75 7b                	jne    c002702b <__mulsf3+0xc2>
c0026fb0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fb4:	74 54                	je     c002700a <__mulsf3+0xa1>
c0026fb6:	85 c9                	test   ecx,ecx
c0026fb8:	0f 85 64 01 00 00    	jne    c0027122 <__mulsf3+0x1b9>
c0026fbe:	8d 57 01             	lea    edx,[edi+0x1]
c0026fc1:	80 e2 fe             	and    dl,0xfe
c0026fc4:	75 1f                	jne    c0026fe5 <__mulsf3+0x7c>
c0026fc6:	85 c0                	test   eax,eax
c0026fc8:	b8 00 00 00 00       	mov    eax,0x0
c0026fcd:	74 29                	je     c0026ff8 <__mulsf3+0x8f>
c0026fcf:	53                   	push   ebx
c0026fd0:	53                   	push   ebx
c0026fd1:	50                   	push   eax
c0026fd2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fd5:	e8 96 05 00 00       	call   c0027570 <__nesf2>
c0026fda:	83 c4 10             	add    esp,0x10
c0026fdd:	85 c0                	test   eax,eax
c0026fdf:	0f 85 3a 01 00 00    	jne    c002711f <__mulsf3+0x1b6>
c0026fe5:	85 ff                	test   edi,edi
c0026fe7:	0f 89 35 01 00 00    	jns    c0027122 <__mulsf3+0x1b9>
c0026fed:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026ff3:	e9 2a 01 00 00       	jmp    c0027122 <__mulsf3+0x1b9>
c0026ff8:	51                   	push   ecx
c0026ff9:	51                   	push   ecx
c0026ffa:	50                   	push   eax
c0026ffb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ffe:	e8 6d 05 00 00       	call   c0027570 <__nesf2>
c0027003:	83 c4 10             	add    esp,0x10
c0027006:	85 c0                	test   eax,eax
c0027008:	eb 15                	jmp    c002701f <__mulsf3+0xb6>
c002700a:	85 c9                	test   ecx,ecx
c002700c:	74 0b                	je     c0027019 <__mulsf3+0xb0>
c002700e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027011:	01 c9                	add    ecx,ecx
c0027013:	78 16                	js     c002702b <__mulsf3+0xc2>
c0027015:	89 d3                	mov    ebx,edx
c0027017:	eb f5                	jmp    c002700e <__mulsf3+0xa5>
c0027019:	89 f8                	mov    eax,edi
c002701b:	f7 d0                	not    eax
c002701d:	84 c0                	test   al,al
c002701f:	75 c4                	jne    c0026fe5 <__mulsf3+0x7c>
c0027021:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027026:	e9 f7 00 00 00       	jmp    c0027122 <__mulsf3+0x1b9>
c002702b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002702e:	c1 e6 08             	shl    esi,0x8
c0027031:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027037:	8d 57 01             	lea    edx,[edi+0x1]
c002703a:	80 e2 fe             	and    dl,0xfe
c002703d:	75 63                	jne    c00270a2 <__mulsf3+0x139>
c002703f:	85 c0                	test   eax,eax
c0027041:	74 2f                	je     c0027072 <__mulsf3+0x109>
c0027043:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027047:	0f 89 d2 00 00 00    	jns    c002711f <__mulsf3+0x1b6>
c002704d:	52                   	push   edx
c002704e:	52                   	push   edx
c002704f:	6a 00                	push   0x0
c0027051:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027054:	e8 dc 04 00 00       	call   c0027535 <__eqsf2>
c0027059:	83 c4 10             	add    esp,0x10
c002705c:	85 c0                	test   eax,eax
c002705e:	0f 85 bb 00 00 00    	jne    c002711f <__mulsf3+0x1b6>
c0027064:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027067:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002706d:	e9 b0 00 00 00       	jmp    c0027122 <__mulsf3+0x1b9>
c0027072:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027075:	50                   	push   eax
c0027076:	50                   	push   eax
c0027077:	6a 00                	push   0x0
c0027079:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002707c:	e8 b4 04 00 00       	call   c0027535 <__eqsf2>
c0027081:	83 c4 10             	add    esp,0x10
c0027084:	85 c0                	test   eax,eax
c0027086:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027089:	75 0c                	jne    c0027097 <__mulsf3+0x12e>
c002708b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002708f:	0f 89 8a 00 00 00    	jns    c002711f <__mulsf3+0x1b6>
c0027095:	eb cd                	jmp    c0027064 <__mulsf3+0xfb>
c0027097:	8d 43 ff             	lea    eax,[ebx-0x1]
c002709a:	01 f6                	add    esi,esi
c002709c:	78 04                	js     c00270a2 <__mulsf3+0x139>
c002709e:	89 c3                	mov    ebx,eax
c00270a0:	eb f5                	jmp    c0027097 <__mulsf3+0x12e>
c00270a2:	89 c8                	mov    eax,ecx
c00270a4:	0d 00 00 00 80       	or     eax,0x80000000
c00270a9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00270af:	f7 e6                	mul    esi
c00270b1:	85 c0                	test   eax,eax
c00270b3:	0f 95 c0             	setne  al
c00270b6:	0f b6 c0             	movzx  eax,al
c00270b9:	09 c2                	or     edx,eax
c00270bb:	78 03                	js     c00270c0 <__mulsf3+0x157>
c00270bd:	01 d2                	add    edx,edx
c00270bf:	4b                   	dec    ebx
c00270c0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00270c6:	7f 22                	jg     c00270ea <__mulsf3+0x181>
c00270c8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00270ce:	85 db                	test   ebx,ebx
c00270d0:	7f 23                	jg     c00270f5 <__mulsf3+0x18c>
c00270d2:	83 fb e9             	cmp    ebx,0xffffffe9
c00270d5:	7c 1a                	jl     c00270f1 <__mulsf3+0x188>
c00270d7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270dd:	b9 01 00 00 00       	mov    ecx,0x1
c00270e2:	29 d9                	sub    ecx,ebx
c00270e4:	d3 ea                	shr    edx,cl
c00270e6:	31 db                	xor    ebx,ebx
c00270e8:	eb 0b                	jmp    c00270f5 <__mulsf3+0x18c>
c00270ea:	bb ff 00 00 00       	mov    ebx,0xff
c00270ef:	eb 02                	jmp    c00270f3 <__mulsf3+0x18a>
c00270f1:	31 db                	xor    ebx,ebx
c00270f3:	31 d2                	xor    edx,edx
c00270f5:	89 d0                	mov    eax,edx
c00270f7:	c1 e8 08             	shr    eax,0x8
c00270fa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270fd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027103:	09 fb                	or     ebx,edi
c0027105:	c1 e3 17             	shl    ebx,0x17
c0027108:	09 c3                	or     ebx,eax
c002710a:	f6 c2 7f             	test   dl,0x7f
c002710d:	0f 95 c1             	setne  cl
c0027110:	09 c8                	or     eax,ecx
c0027112:	83 e0 01             	and    eax,0x1
c0027115:	c1 ea 07             	shr    edx,0x7
c0027118:	21 c2                	and    edx,eax
c002711a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002711d:	eb 03                	jmp    c0027122 <__mulsf3+0x1b9>
c002711f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027122:	89 f0                	mov    eax,esi
c0027124:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027127:	5b                   	pop    ebx
c0027128:	5e                   	pop    esi
c0027129:	5f                   	pop    edi
c002712a:	5d                   	pop    ebp
c002712b:	c3                   	ret    

c002712c <__divsf3>:
c002712c:	55                   	push   ebp
c002712d:	89 e5                	mov    ebp,esp
c002712f:	57                   	push   edi
c0027130:	56                   	push   esi
c0027131:	53                   	push   ebx
c0027132:	83 ec 1c             	sub    esp,0x1c
c0027135:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027138:	89 d8                	mov    eax,ebx
c002713a:	89 d9                	mov    ecx,ebx
c002713c:	c1 f9 17             	sar    ecx,0x17
c002713f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027142:	c1 e0 08             	shl    eax,0x8
c0027145:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002714a:	89 c1                	mov    ecx,eax
c002714c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002714f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027152:	89 c7                	mov    edi,eax
c0027154:	c1 ff 17             	sar    edi,0x17
c0027157:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002715b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002715e:	89 f8                	mov    eax,edi
c0027160:	0f b6 c0             	movzx  eax,al
c0027163:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027166:	29 c6                	sub    esi,eax
c0027168:	83 c6 7f             	add    esi,0x7f
c002716b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002716e:	42                   	inc    edx
c002716f:	80 e2 fe             	and    dl,0xfe
c0027172:	0f 85 9c 00 00 00    	jne    c0027214 <__divsf3+0xe8>
c0027178:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002717c:	74 33                	je     c00271b1 <__divsf3+0x85>
c002717e:	85 c9                	test   ecx,ecx
c0027180:	0f 85 c7 01 00 00    	jne    c002734d <__divsf3+0x221>
c0027186:	8d 57 01             	lea    edx,[edi+0x1]
c0027189:	80 e2 fe             	and    dl,0xfe
c002718c:	75 2f                	jne    c00271bd <__divsf3+0x91>
c002718e:	85 c0                	test   eax,eax
c0027190:	74 2b                	je     c00271bd <__divsf3+0x91>
c0027192:	51                   	push   ecx
c0027193:	51                   	push   ecx
c0027194:	6a 00                	push   0x0
c0027196:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027199:	e8 d2 03 00 00       	call   c0027570 <__nesf2>
c002719e:	83 c4 10             	add    esp,0x10
c00271a1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271a4:	85 c0                	test   eax,eax
c00271a6:	0f 85 a1 01 00 00    	jne    c002734d <__divsf3+0x221>
c00271ac:	e9 92 01 00 00       	jmp    c0027343 <__divsf3+0x217>
c00271b1:	85 c9                	test   ecx,ecx
c00271b3:	75 1b                	jne    c00271d0 <__divsf3+0xa4>
c00271b5:	8d 57 01             	lea    edx,[edi+0x1]
c00271b8:	80 e2 fe             	and    dl,0xfe
c00271bb:	74 1e                	je     c00271db <__divsf3+0xaf>
c00271bd:	85 ff                	test   edi,edi
c00271bf:	0f 89 88 01 00 00    	jns    c002734d <__divsf3+0x221>
c00271c5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00271cb:	e9 7d 01 00 00       	jmp    c002734d <__divsf3+0x221>
c00271d0:	8d 56 ff             	lea    edx,[esi-0x1]
c00271d3:	01 c9                	add    ecx,ecx
c00271d5:	78 3d                	js     c0027214 <__divsf3+0xe8>
c00271d7:	89 d6                	mov    esi,edx
c00271d9:	eb f5                	jmp    c00271d0 <__divsf3+0xa4>
c00271db:	85 c0                	test   eax,eax
c00271dd:	b8 00 00 00 00       	mov    eax,0x0
c00271e2:	74 18                	je     c00271fc <__divsf3+0xd0>
c00271e4:	52                   	push   edx
c00271e5:	52                   	push   edx
c00271e6:	50                   	push   eax
c00271e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271ea:	e8 81 03 00 00       	call   c0027570 <__nesf2>
c00271ef:	83 c4 10             	add    esp,0x10
c00271f2:	85 c0                	test   eax,eax
c00271f4:	0f 85 50 01 00 00    	jne    c002734a <__divsf3+0x21e>
c00271fa:	eb c1                	jmp    c00271bd <__divsf3+0x91>
c00271fc:	56                   	push   esi
c00271fd:	56                   	push   esi
c00271fe:	50                   	push   eax
c00271ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027202:	e8 69 03 00 00       	call   c0027570 <__nesf2>
c0027207:	83 c4 10             	add    esp,0x10
c002720a:	85 c0                	test   eax,eax
c002720c:	0f 84 31 01 00 00    	je     c0027343 <__divsf3+0x217>
c0027212:	eb a9                	jmp    c00271bd <__divsf3+0x91>
c0027214:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027217:	c1 e3 08             	shl    ebx,0x8
c002721a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027220:	8d 57 01             	lea    edx,[edi+0x1]
c0027223:	80 e2 fe             	and    dl,0xfe
c0027226:	75 71                	jne    c0027299 <__divsf3+0x16d>
c0027228:	85 c0                	test   eax,eax
c002722a:	ba 00 00 00 00       	mov    edx,0x0
c002722f:	74 2f                	je     c0027260 <__divsf3+0x134>
c0027231:	51                   	push   ecx
c0027232:	51                   	push   ecx
c0027233:	52                   	push   edx
c0027234:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027237:	e8 f9 02 00 00       	call   c0027535 <__eqsf2>
c002723c:	83 c4 10             	add    esp,0x10
c002723f:	85 c0                	test   eax,eax
c0027241:	0f 85 03 01 00 00    	jne    c002734a <__divsf3+0x21e>
c0027247:	31 d2                	xor    edx,edx
c0027249:	89 d3                	mov    ebx,edx
c002724b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002724e:	31 f8                	xor    eax,edi
c0027250:	0f 89 f7 00 00 00    	jns    c002734d <__divsf3+0x221>
c0027256:	bb 00 00 00 80       	mov    ebx,0x80000000
c002725b:	e9 ed 00 00 00       	jmp    c002734d <__divsf3+0x221>
c0027260:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027263:	50                   	push   eax
c0027264:	50                   	push   eax
c0027265:	52                   	push   edx
c0027266:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027269:	e8 c7 02 00 00       	call   c0027535 <__eqsf2>
c002726e:	83 c4 10             	add    esp,0x10
c0027271:	85 c0                	test   eax,eax
c0027273:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027276:	75 16                	jne    c002728e <__divsf3+0x162>
c0027278:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002727b:	31 fb                	xor    ebx,edi
c002727d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027283:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027289:	e9 bf 00 00 00       	jmp    c002734d <__divsf3+0x221>
c002728e:	8d 46 01             	lea    eax,[esi+0x1]
c0027291:	01 db                	add    ebx,ebx
c0027293:	78 04                	js     c0027299 <__divsf3+0x16d>
c0027295:	89 c6                	mov    esi,eax
c0027297:	eb f5                	jmp    c002728e <__divsf3+0x162>
c0027299:	89 c8                	mov    eax,ecx
c002729b:	0d 00 00 00 80       	or     eax,0x80000000
c00272a0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00272a6:	31 d2                	xor    edx,edx
c00272a8:	39 d8                	cmp    eax,ebx
c00272aa:	72 07                	jb     c00272b3 <__divsf3+0x187>
c00272ac:	29 d8                	sub    eax,ebx
c00272ae:	ba 01 00 00 00       	mov    edx,0x1
c00272b3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00272ba:	01 d2                	add    edx,edx
c00272bc:	89 c1                	mov    ecx,eax
c00272be:	01 c0                	add    eax,eax
c00272c0:	85 c9                	test   ecx,ecx
c00272c2:	78 04                	js     c00272c8 <__divsf3+0x19c>
c00272c4:	39 c3                	cmp    ebx,eax
c00272c6:	77 05                	ja     c00272cd <__divsf3+0x1a1>
c00272c8:	29 d8                	sub    eax,ebx
c00272ca:	83 ca 01             	or     edx,0x1
c00272cd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00272d0:	75 e8                	jne    c00272ba <__divsf3+0x18e>
c00272d2:	85 c0                	test   eax,eax
c00272d4:	0f 95 c0             	setne  al
c00272d7:	0f b6 c0             	movzx  eax,al
c00272da:	c1 e2 06             	shl    edx,0x6
c00272dd:	09 c2                	or     edx,eax
c00272df:	78 03                	js     c00272e4 <__divsf3+0x1b8>
c00272e1:	01 d2                	add    edx,edx
c00272e3:	4e                   	dec    esi
c00272e4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00272ea:	7f 22                	jg     c002730e <__divsf3+0x1e2>
c00272ec:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272f2:	85 f6                	test   esi,esi
c00272f4:	7f 23                	jg     c0027319 <__divsf3+0x1ed>
c00272f6:	83 fe e9             	cmp    esi,0xffffffe9
c00272f9:	7c 1a                	jl     c0027315 <__divsf3+0x1e9>
c00272fb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027301:	b9 01 00 00 00       	mov    ecx,0x1
c0027306:	29 f1                	sub    ecx,esi
c0027308:	d3 ea                	shr    edx,cl
c002730a:	31 f6                	xor    esi,esi
c002730c:	eb 0b                	jmp    c0027319 <__divsf3+0x1ed>
c002730e:	be ff 00 00 00       	mov    esi,0xff
c0027313:	eb 02                	jmp    c0027317 <__divsf3+0x1eb>
c0027315:	31 f6                	xor    esi,esi
c0027317:	31 d2                	xor    edx,edx
c0027319:	89 d0                	mov    eax,edx
c002731b:	c1 e8 08             	shr    eax,0x8
c002731e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027321:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027327:	09 fe                	or     esi,edi
c0027329:	c1 e6 17             	shl    esi,0x17
c002732c:	09 c6                	or     esi,eax
c002732e:	f6 c2 7f             	test   dl,0x7f
c0027331:	0f 95 c1             	setne  cl
c0027334:	09 c8                	or     eax,ecx
c0027336:	83 e0 01             	and    eax,0x1
c0027339:	c1 ea 07             	shr    edx,0x7
c002733c:	21 c2                	and    edx,eax
c002733e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027341:	eb 0a                	jmp    c002734d <__divsf3+0x221>
c0027343:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027348:	eb 03                	jmp    c002734d <__divsf3+0x221>
c002734a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002734d:	89 d8                	mov    eax,ebx
c002734f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027352:	5b                   	pop    ebx
c0027353:	5e                   	pop    esi
c0027354:	5f                   	pop    edi
c0027355:	5d                   	pop    ebp
c0027356:	c3                   	ret    

c0027357 <__floatsisf>:
c0027357:	55                   	push   ebp
c0027358:	89 e5                	mov    ebp,esp
c002735a:	53                   	push   ebx
c002735b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002735e:	85 d2                	test   edx,edx
c0027360:	7e 2b                	jle    c002738d <__floatsisf+0x36>
c0027362:	0f bd ca             	bsr    ecx,edx
c0027365:	83 f1 1f             	xor    ecx,0x1f
c0027368:	d3 e2                	shl    edx,cl
c002736a:	89 d0                	mov    eax,edx
c002736c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027371:	89 c3                	mov    ebx,eax
c0027373:	c1 eb 08             	shr    ebx,0x8
c0027376:	80 e2 7f             	and    dl,0x7f
c0027379:	0f 95 c2             	setne  dl
c002737c:	09 da                	or     edx,ebx
c002737e:	83 e2 01             	and    edx,0x1
c0027381:	c1 e8 07             	shr    eax,0x7
c0027384:	21 c2                	and    edx,eax
c0027386:	b8 9e 00 00 00       	mov    eax,0x9e
c002738b:	eb 32                	jmp    c00273bf <__floatsisf+0x68>
c002738d:	b8 00 00 00 00       	mov    eax,0x0
c0027392:	74 34                	je     c00273c8 <__floatsisf+0x71>
c0027394:	f7 da                	neg    edx
c0027396:	0f bd ca             	bsr    ecx,edx
c0027399:	83 f1 1f             	xor    ecx,0x1f
c002739c:	d3 e2                	shl    edx,cl
c002739e:	89 d0                	mov    eax,edx
c00273a0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273a5:	89 c3                	mov    ebx,eax
c00273a7:	c1 eb 08             	shr    ebx,0x8
c00273aa:	80 e2 7f             	and    dl,0x7f
c00273ad:	0f 95 c2             	setne  dl
c00273b0:	09 da                	or     edx,ebx
c00273b2:	83 e2 01             	and    edx,0x1
c00273b5:	c1 e8 07             	shr    eax,0x7
c00273b8:	21 c2                	and    edx,eax
c00273ba:	b8 9e 01 00 00       	mov    eax,0x19e
c00273bf:	29 c8                	sub    eax,ecx
c00273c1:	c1 e0 17             	shl    eax,0x17
c00273c4:	09 d8                	or     eax,ebx
c00273c6:	01 d0                	add    eax,edx
c00273c8:	5b                   	pop    ebx
c00273c9:	5d                   	pop    ebp
c00273ca:	c3                   	ret    

c00273cb <__floatunsisf>:
c00273cb:	55                   	push   ebp
c00273cc:	89 e5                	mov    ebp,esp
c00273ce:	53                   	push   ebx
c00273cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273d2:	31 c0                	xor    eax,eax
c00273d4:	85 d2                	test   edx,edx
c00273d6:	74 32                	je     c002740a <__floatunsisf+0x3f>
c00273d8:	0f bd ca             	bsr    ecx,edx
c00273db:	83 f1 1f             	xor    ecx,0x1f
c00273de:	d3 e2                	shl    edx,cl
c00273e0:	89 d0                	mov    eax,edx
c00273e2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273e7:	89 c3                	mov    ebx,eax
c00273e9:	c1 eb 08             	shr    ebx,0x8
c00273ec:	80 e2 7f             	and    dl,0x7f
c00273ef:	0f 95 c2             	setne  dl
c00273f2:	09 da                	or     edx,ebx
c00273f4:	83 e2 01             	and    edx,0x1
c00273f7:	c1 e8 07             	shr    eax,0x7
c00273fa:	21 c2                	and    edx,eax
c00273fc:	b8 9e 00 00 00       	mov    eax,0x9e
c0027401:	29 c8                	sub    eax,ecx
c0027403:	c1 e0 17             	shl    eax,0x17
c0027406:	09 d8                	or     eax,ebx
c0027408:	01 d0                	add    eax,edx
c002740a:	5b                   	pop    ebx
c002740b:	5d                   	pop    ebp
c002740c:	c3                   	ret    

c002740d <__fixsfsi>:
c002740d:	55                   	push   ebp
c002740e:	89 e5                	mov    ebp,esp
c0027410:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027413:	89 d1                	mov    ecx,edx
c0027415:	c1 e1 08             	shl    ecx,0x8
c0027418:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002741e:	c1 fa 17             	sar    edx,0x17
c0027421:	78 1c                	js     c002743f <__fixsfsi+0x32>
c0027423:	83 ea 7f             	sub    edx,0x7f
c0027426:	31 c0                	xor    eax,eax
c0027428:	83 fa 1e             	cmp    edx,0x1e
c002742b:	77 40                	ja     c002746d <__fixsfsi+0x60>
c002742d:	89 c8                	mov    eax,ecx
c002742f:	0d 00 00 00 80       	or     eax,0x80000000
c0027434:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027439:	29 d1                	sub    ecx,edx
c002743b:	d3 e8                	shr    eax,cl
c002743d:	eb 2e                	jmp    c002746d <__fixsfsi+0x60>
c002743f:	31 c0                	xor    eax,eax
c0027441:	81 c2 81 00 00 00    	add    edx,0x81
c0027447:	78 24                	js     c002746d <__fixsfsi+0x60>
c0027449:	83 fa 1e             	cmp    edx,0x1e
c002744c:	7e 09                	jle    c0027457 <__fixsfsi+0x4a>
c002744e:	83 fa 1f             	cmp    edx,0x1f
c0027451:	75 18                	jne    c002746b <__fixsfsi+0x5e>
c0027453:	85 c9                	test   ecx,ecx
c0027455:	75 14                	jne    c002746b <__fixsfsi+0x5e>
c0027457:	89 c8                	mov    eax,ecx
c0027459:	0d 00 00 00 80       	or     eax,0x80000000
c002745e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027463:	29 d1                	sub    ecx,edx
c0027465:	d3 e8                	shr    eax,cl
c0027467:	f7 d8                	neg    eax
c0027469:	eb 02                	jmp    c002746d <__fixsfsi+0x60>
c002746b:	31 c0                	xor    eax,eax
c002746d:	5d                   	pop    ebp
c002746e:	c3                   	ret    

c002746f <__fixunssfsi>:
c002746f:	55                   	push   ebp
c0027470:	89 e5                	mov    ebp,esp
c0027472:	53                   	push   ebx
c0027473:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027476:	89 d3                	mov    ebx,edx
c0027478:	c1 fb 17             	sar    ebx,0x17
c002747b:	83 eb 7f             	sub    ebx,0x7f
c002747e:	31 c0                	xor    eax,eax
c0027480:	83 fb 1f             	cmp    ebx,0x1f
c0027483:	77 18                	ja     c002749d <__fixunssfsi+0x2e>
c0027485:	89 d0                	mov    eax,edx
c0027487:	c1 e0 08             	shl    eax,0x8
c002748a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002748f:	0d 00 00 00 80       	or     eax,0x80000000
c0027494:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027499:	29 d9                	sub    ecx,ebx
c002749b:	d3 e8                	shr    eax,cl
c002749d:	5b                   	pop    ebx
c002749e:	5d                   	pop    ebp
c002749f:	c3                   	ret    

c00274a0 <__cmpsf2>:
c00274a0:	55                   	push   ebp
c00274a1:	89 e5                	mov    ebp,esp
c00274a3:	57                   	push   edi
c00274a4:	56                   	push   esi
c00274a5:	53                   	push   ebx
c00274a6:	83 ec 24             	sub    esp,0x24
c00274a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274af:	e8 4f 10 00 00       	call   c0028503 <__truncdfsf2>
c00274b4:	5a                   	pop    edx
c00274b5:	59                   	pop    ecx
c00274b6:	89 c3                	mov    ebx,eax
c00274b8:	c1 e8 17             	shr    eax,0x17
c00274bb:	0f b6 f0             	movzx  esi,al
c00274be:	89 d8                	mov    eax,ebx
c00274c0:	c1 e8 1f             	shr    eax,0x1f
c00274c3:	31 c6                	xor    esi,eax
c00274c5:	c1 e3 08             	shl    ebx,0x8
c00274c8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00274cb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00274ce:	e8 30 10 00 00       	call   c0028503 <__truncdfsf2>
c00274d3:	83 c4 10             	add    esp,0x10
c00274d6:	89 c1                	mov    ecx,eax
c00274d8:	c1 e9 17             	shr    ecx,0x17
c00274db:	0f b6 c9             	movzx  ecx,cl
c00274de:	89 c7                	mov    edi,eax
c00274e0:	c1 ef 1f             	shr    edi,0x1f
c00274e3:	89 ca                	mov    edx,ecx
c00274e5:	31 fa                	xor    edx,edi
c00274e7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00274ea:	c1 e0 08             	shl    eax,0x8
c00274ed:	89 c2                	mov    edx,eax
c00274ef:	89 d8                	mov    eax,ebx
c00274f1:	09 d0                	or     eax,edx
c00274f3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274f8:	09 f0                	or     eax,esi
c00274fa:	75 08                	jne    c0027504 <__cmpsf2+0x64>
c00274fc:	31 c0                	xor    eax,eax
c00274fe:	39 f9                	cmp    ecx,edi
c0027500:	75 0c                	jne    c002750e <__cmpsf2+0x6e>
c0027502:	eb 29                	jmp    c002752d <__cmpsf2+0x8d>
c0027504:	b8 01 00 00 00       	mov    eax,0x1
c0027509:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002750c:	7f 1f                	jg     c002752d <__cmpsf2+0x8d>
c002750e:	83 c8 ff             	or     eax,0xffffffff
c0027511:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027514:	7c 17                	jl     c002752d <__cmpsf2+0x8d>
c0027516:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002751c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027522:	b8 01 00 00 00       	mov    eax,0x1
c0027527:	39 d3                	cmp    ebx,edx
c0027529:	77 02                	ja     c002752d <__cmpsf2+0x8d>
c002752b:	19 c0                	sbb    eax,eax
c002752d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027530:	5b                   	pop    ebx
c0027531:	5e                   	pop    esi
c0027532:	5f                   	pop    edi
c0027533:	5d                   	pop    ebp
c0027534:	c3                   	ret    

c0027535 <__eqsf2>:
c0027535:	55                   	push   ebp
c0027536:	89 e5                	mov    ebp,esp
c0027538:	83 ec 24             	sub    esp,0x24
c002753b:	6a 01                	push   0x1
c002753d:	83 ec 0c             	sub    esp,0xc
c0027540:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027543:	e8 df 10 00 00       	call   c0028627 <__extendsfdf2>
c0027548:	83 c4 10             	add    esp,0x10
c002754b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002754e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027551:	52                   	push   edx
c0027552:	50                   	push   eax
c0027553:	50                   	push   eax
c0027554:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027557:	e8 cb 10 00 00       	call   c0028627 <__extendsfdf2>
c002755c:	59                   	pop    ecx
c002755d:	59                   	pop    ecx
c002755e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027561:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027564:	52                   	push   edx
c0027565:	50                   	push   eax
c0027566:	e8 35 ff ff ff       	call   c00274a0 <__cmpsf2>
c002756b:	83 c4 20             	add    esp,0x20
c002756e:	c9                   	leave  
c002756f:	c3                   	ret    

c0027570 <__nesf2>:
c0027570:	eb c3                	jmp    c0027535 <__eqsf2>

c0027572 <__gtsf2>:
c0027572:	55                   	push   ebp
c0027573:	89 e5                	mov    ebp,esp
c0027575:	83 ec 24             	sub    esp,0x24
c0027578:	6a ff                	push   0xffffffff
c002757a:	83 ec 0c             	sub    esp,0xc
c002757d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027580:	e8 a2 10 00 00       	call   c0028627 <__extendsfdf2>
c0027585:	83 c4 10             	add    esp,0x10
c0027588:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002758b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002758e:	52                   	push   edx
c002758f:	50                   	push   eax
c0027590:	50                   	push   eax
c0027591:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027594:	e8 8e 10 00 00       	call   c0028627 <__extendsfdf2>
c0027599:	59                   	pop    ecx
c002759a:	59                   	pop    ecx
c002759b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002759e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275a1:	52                   	push   edx
c00275a2:	50                   	push   eax
c00275a3:	e8 f8 fe ff ff       	call   c00274a0 <__cmpsf2>
c00275a8:	83 c4 20             	add    esp,0x20
c00275ab:	c9                   	leave  
c00275ac:	c3                   	ret    

c00275ad <__gesf2>:
c00275ad:	eb c3                	jmp    c0027572 <__gtsf2>

c00275af <__ltsf2>:
c00275af:	eb 84                	jmp    c0027535 <__eqsf2>

c00275b1 <__lesf2>:
c00275b1:	eb 82                	jmp    c0027535 <__eqsf2>

c00275b3 <__adddf3>:
c00275b3:	55                   	push   ebp
c00275b4:	89 e5                	mov    ebp,esp
c00275b6:	57                   	push   edi
c00275b7:	56                   	push   esi
c00275b8:	53                   	push   ebx
c00275b9:	83 ec 24             	sub    esp,0x24
c00275bc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00275bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00275c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00275c5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00275c8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00275cb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00275ce:	89 c8                	mov    eax,ecx
c00275d0:	89 ce                	mov    esi,ecx
c00275d2:	c1 fe 14             	sar    esi,0x14
c00275d5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00275d8:	89 fb                	mov    ebx,edi
c00275da:	89 fa                	mov    edx,edi
c00275dc:	c1 e2 0b             	shl    edx,0xb
c00275df:	c1 e0 0b             	shl    eax,0xb
c00275e2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00275e7:	c1 eb 15             	shr    ebx,0x15
c00275ea:	09 d8                	or     eax,ebx
c00275ec:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00275ef:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275f2:	c1 fe 14             	sar    esi,0x14
c00275f5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275f8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275fb:	89 f3                	mov    ebx,esi
c00275fd:	c1 e3 0b             	shl    ebx,0xb
c0027600:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027603:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027606:	c1 e3 0b             	shl    ebx,0xb
c0027609:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002760f:	c1 ee 15             	shr    esi,0x15
c0027612:	09 f3                	or     ebx,esi
c0027614:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027617:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002761a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002761d:	0f 88 5f 02 00 00    	js     c0027882 <__adddf3+0x2cf>
c0027623:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027626:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027629:	85 db                	test   ebx,ebx
c002762b:	0f 8e c7 00 00 00    	jle    c00276f8 <__adddf3+0x145>
c0027631:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027638:	75 1a                	jne    c0027654 <__adddf3+0xa1>
c002763a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002763d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027640:	0f 84 b2 05 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027646:	4b                   	dec    ebx
c0027647:	75 23                	jne    c002766c <__adddf3+0xb9>
c0027649:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002764c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002764f:	e9 99 00 00 00       	jmp    c00276ed <__adddf3+0x13a>
c0027654:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027657:	f7 d6                	not    esi
c0027659:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002765f:	0f 84 93 05 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027665:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002766c:	83 fb 1f             	cmp    ebx,0x1f
c002766f:	7e 42                	jle    c00276b3 <__adddf3+0x100>
c0027671:	83 fb 3f             	cmp    ebx,0x3f
c0027674:	0f 8f 7e 05 00 00    	jg     c0027bf8 <__adddf3+0x645>
c002767a:	83 e3 1f             	and    ebx,0x1f
c002767d:	89 d9                	mov    ecx,ebx
c002767f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027682:	d3 ef                	shr    edi,cl
c0027684:	31 db                	xor    ebx,ebx
c0027686:	85 c9                	test   ecx,ecx
c0027688:	74 15                	je     c002769f <__adddf3+0xec>
c002768a:	be 20 00 00 00       	mov    esi,0x20
c002768f:	29 ce                	sub    esi,ecx
c0027691:	89 f1                	mov    ecx,esi
c0027693:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027696:	d3 e6                	shl    esi,cl
c0027698:	31 db                	xor    ebx,ebx
c002769a:	85 f6                	test   esi,esi
c002769c:	0f 95 c3             	setne  bl
c002769f:	31 c9                	xor    ecx,ecx
c00276a1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276a5:	0f 95 c1             	setne  cl
c00276a8:	09 cf                	or     edi,ecx
c00276aa:	09 fb                	or     ebx,edi
c00276ac:	01 da                	add    edx,ebx
c00276ae:	83 d0 00             	adc    eax,0x0
c00276b1:	eb 3a                	jmp    c00276ed <__adddf3+0x13a>
c00276b3:	bf 20 00 00 00       	mov    edi,0x20
c00276b8:	29 df                	sub    edi,ebx
c00276ba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276bd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276c0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276c3:	d3 e6                	shl    esi,cl
c00276c5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276c8:	88 d9                	mov    cl,bl
c00276ca:	d3 ef                	shr    edi,cl
c00276cc:	09 fe                	or     esi,edi
c00276ce:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276d1:	88 d9                	mov    cl,bl
c00276d3:	d3 ef                	shr    edi,cl
c00276d5:	89 fb                	mov    ebx,edi
c00276d7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276da:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276dd:	d3 e7                	shl    edi,cl
c00276df:	85 ff                	test   edi,edi
c00276e1:	0f 95 c1             	setne  cl
c00276e4:	0f b6 c9             	movzx  ecx,cl
c00276e7:	09 ce                	or     esi,ecx
c00276e9:	01 f2                	add    edx,esi
c00276eb:	11 d8                	adc    eax,ebx
c00276ed:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276f0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276f3:	e9 52 01 00 00       	jmp    c002784a <__adddf3+0x297>
c00276f8:	0f 84 d5 00 00 00    	je     c00277d3 <__adddf3+0x220>
c00276fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027701:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027704:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027707:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002770a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027711:	75 20                	jne    c0027733 <__adddf3+0x180>
c0027713:	89 d6                	mov    esi,edx
c0027715:	09 c6                	or     esi,eax
c0027717:	0f 84 db 04 00 00    	je     c0027bf8 <__adddf3+0x645>
c002771d:	4b                   	dec    ebx
c002771e:	75 29                	jne    c0027749 <__adddf3+0x196>
c0027720:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027723:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027726:	01 d1                	add    ecx,edx
c0027728:	11 c6                	adc    esi,eax
c002772a:	89 f0                	mov    eax,esi
c002772c:	89 ca                	mov    edx,ecx
c002772e:	e9 17 01 00 00       	jmp    c002784a <__adddf3+0x297>
c0027733:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027736:	f7 d6                	not    esi
c0027738:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002773e:	0f 84 b4 04 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027744:	0d 00 00 00 80       	or     eax,0x80000000
c0027749:	83 fb 1f             	cmp    ebx,0x1f
c002774c:	7e 48                	jle    c0027796 <__adddf3+0x1e3>
c002774e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027751:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027754:	83 fb 3f             	cmp    ebx,0x3f
c0027757:	0f 8f 9b 04 00 00    	jg     c0027bf8 <__adddf3+0x645>
c002775d:	83 e3 1f             	and    ebx,0x1f
c0027760:	89 d9                	mov    ecx,ebx
c0027762:	89 c7                	mov    edi,eax
c0027764:	d3 ef                	shr    edi,cl
c0027766:	31 db                	xor    ebx,ebx
c0027768:	85 c9                	test   ecx,ecx
c002776a:	74 12                	je     c002777e <__adddf3+0x1cb>
c002776c:	be 20 00 00 00       	mov    esi,0x20
c0027771:	29 ce                	sub    esi,ecx
c0027773:	89 f1                	mov    ecx,esi
c0027775:	d3 e0                	shl    eax,cl
c0027777:	31 db                	xor    ebx,ebx
c0027779:	85 c0                	test   eax,eax
c002777b:	0f 95 c3             	setne  bl
c002777e:	31 c0                	xor    eax,eax
c0027780:	85 d2                	test   edx,edx
c0027782:	0f 95 c0             	setne  al
c0027785:	09 c7                	or     edi,eax
c0027787:	09 fb                	or     ebx,edi
c0027789:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002778c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002778f:	01 da                	add    edx,ebx
c0027791:	83 d6 00             	adc    esi,0x0
c0027794:	eb 39                	jmp    c00277cf <__adddf3+0x21c>
c0027796:	be 20 00 00 00       	mov    esi,0x20
c002779b:	29 de                	sub    esi,ebx
c002779d:	89 c7                	mov    edi,eax
c002779f:	89 f1                	mov    ecx,esi
c00277a1:	d3 e7                	shl    edi,cl
c00277a3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277a6:	89 d7                	mov    edi,edx
c00277a8:	88 d9                	mov    cl,bl
c00277aa:	d3 ef                	shr    edi,cl
c00277ac:	89 f9                	mov    ecx,edi
c00277ae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277b1:	09 cf                	or     edi,ecx
c00277b3:	88 d9                	mov    cl,bl
c00277b5:	d3 e8                	shr    eax,cl
c00277b7:	89 f1                	mov    ecx,esi
c00277b9:	d3 e2                	shl    edx,cl
c00277bb:	85 d2                	test   edx,edx
c00277bd:	0f 95 c2             	setne  dl
c00277c0:	0f b6 d2             	movzx  edx,dl
c00277c3:	09 d7                	or     edi,edx
c00277c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277cb:	01 fa                	add    edx,edi
c00277cd:	11 c6                	adc    esi,eax
c00277cf:	89 f0                	mov    eax,esi
c00277d1:	eb 77                	jmp    c002784a <__adddf3+0x297>
c00277d3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277d6:	46                   	inc    esi
c00277d7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00277da:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277e0:	75 41                	jne    c0027823 <__adddf3+0x270>
c00277e2:	89 d3                	mov    ebx,edx
c00277e4:	09 c3                	or     ebx,eax
c00277e6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277ed:	75 27                	jne    c0027816 <__adddf3+0x263>
c00277ef:	85 db                	test   ebx,ebx
c00277f1:	0f 84 fb 03 00 00    	je     c0027bf2 <__adddf3+0x63f>
c00277f7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277fa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277fd:	0f 84 f5 03 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027803:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027806:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027809:	85 c0                	test   eax,eax
c002780b:	0f 89 91 03 00 00    	jns    c0027ba2 <__adddf3+0x5ef>
c0027811:	e9 85 03 00 00       	jmp    c0027b9b <__adddf3+0x5e8>
c0027816:	85 db                	test   ebx,ebx
c0027818:	0f 85 da 03 00 00    	jne    c0027bf8 <__adddf3+0x645>
c002781e:	e9 cf 03 00 00       	jmp    c0027bf2 <__adddf3+0x63f>
c0027823:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027826:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027829:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002782c:	f7 d1                	not    ecx
c002782e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027834:	0f 84 70 03 00 00    	je     c0027baa <__adddf3+0x5f7>
c002783a:	d1 ea                	shr    edx,1
c002783c:	89 c1                	mov    ecx,eax
c002783e:	c1 e1 1f             	shl    ecx,0x1f
c0027841:	09 ca                	or     edx,ecx
c0027843:	d1 e8                	shr    eax,1
c0027845:	e9 6f 03 00 00       	jmp    c0027bb9 <__adddf3+0x606>
c002784a:	85 c0                	test   eax,eax
c002784c:	0f 89 67 03 00 00    	jns    c0027bb9 <__adddf3+0x606>
c0027852:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027855:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027858:	f7 d1                	not    ecx
c002785a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027860:	0f 84 44 03 00 00    	je     c0027baa <__adddf3+0x5f7>
c0027866:	89 d1                	mov    ecx,edx
c0027868:	d1 e9                	shr    ecx,1
c002786a:	83 e2 01             	and    edx,0x1
c002786d:	09 ca                	or     edx,ecx
c002786f:	89 c1                	mov    ecx,eax
c0027871:	c1 e1 1f             	shl    ecx,0x1f
c0027874:	09 ca                	or     edx,ecx
c0027876:	d1 e8                	shr    eax,1
c0027878:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002787d:	e9 37 03 00 00       	jmp    c0027bb9 <__adddf3+0x606>
c0027882:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027885:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002788b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002788e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027891:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027897:	29 de                	sub    esi,ebx
c0027899:	85 f6                	test   esi,esi
c002789b:	0f 8e bd 00 00 00    	jle    c002795e <__adddf3+0x3ab>
c00278a1:	85 db                	test   ebx,ebx
c00278a3:	75 17                	jne    c00278bc <__adddf3+0x309>
c00278a5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278a8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278ab:	0f 84 47 03 00 00    	je     c0027bf8 <__adddf3+0x645>
c00278b1:	4e                   	dec    esi
c00278b2:	75 20                	jne    c00278d4 <__adddf3+0x321>
c00278b4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278b7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278ba:	eb 5b                	jmp    c0027917 <__adddf3+0x364>
c00278bc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278bf:	f7 d3                	not    ebx
c00278c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278c7:	0f 84 2b 03 00 00    	je     c0027bf8 <__adddf3+0x645>
c00278cd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00278d4:	83 fe 1f             	cmp    esi,0x1f
c00278d7:	7e 49                	jle    c0027922 <__adddf3+0x36f>
c00278d9:	83 fe 3f             	cmp    esi,0x3f
c00278dc:	0f 8f 16 03 00 00    	jg     c0027bf8 <__adddf3+0x645>
c00278e2:	83 e6 1f             	and    esi,0x1f
c00278e5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278e8:	89 f1                	mov    ecx,esi
c00278ea:	d3 ef                	shr    edi,cl
c00278ec:	31 db                	xor    ebx,ebx
c00278ee:	85 f6                	test   esi,esi
c00278f0:	74 13                	je     c0027905 <__adddf3+0x352>
c00278f2:	b9 20 00 00 00       	mov    ecx,0x20
c00278f7:	29 f1                	sub    ecx,esi
c00278f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278fc:	d3 e6                	shl    esi,cl
c00278fe:	31 db                	xor    ebx,ebx
c0027900:	85 f6                	test   esi,esi
c0027902:	0f 95 c3             	setne  bl
c0027905:	31 c9                	xor    ecx,ecx
c0027907:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002790b:	0f 95 c1             	setne  cl
c002790e:	09 cf                	or     edi,ecx
c0027910:	09 fb                	or     ebx,edi
c0027912:	29 da                	sub    edx,ebx
c0027914:	83 d8 00             	sbb    eax,0x0
c0027917:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002791a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002791d:	e9 aa 01 00 00       	jmp    c0027acc <__adddf3+0x519>
c0027922:	bf 20 00 00 00       	mov    edi,0x20
c0027927:	29 f7                	sub    edi,esi
c0027929:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002792c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002792f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027932:	d3 e3                	shl    ebx,cl
c0027934:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027937:	89 f1                	mov    ecx,esi
c0027939:	d3 ef                	shr    edi,cl
c002793b:	09 fb                	or     ebx,edi
c002793d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027940:	89 f1                	mov    ecx,esi
c0027942:	d3 ef                	shr    edi,cl
c0027944:	89 fe                	mov    esi,edi
c0027946:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027949:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002794c:	d3 e7                	shl    edi,cl
c002794e:	85 ff                	test   edi,edi
c0027950:	0f 95 c1             	setne  cl
c0027953:	0f b6 c9             	movzx  ecx,cl
c0027956:	09 cb                	or     ebx,ecx
c0027958:	29 da                	sub    edx,ebx
c002795a:	19 f0                	sbb    eax,esi
c002795c:	eb b9                	jmp    c0027917 <__adddf3+0x364>
c002795e:	0f 84 cd 00 00 00    	je     c0027a31 <__adddf3+0x47e>
c0027964:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027967:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002796a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002796d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027971:	75 1b                	jne    c002798e <__adddf3+0x3db>
c0027973:	89 d6                	mov    esi,edx
c0027975:	09 c6                	or     esi,eax
c0027977:	0f 84 7b 02 00 00    	je     c0027bf8 <__adddf3+0x645>
c002797d:	4b                   	dec    ebx
c002797e:	75 24                	jne    c00279a4 <__adddf3+0x3f1>
c0027980:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027983:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027986:	29 d1                	sub    ecx,edx
c0027988:	19 c6                	sbb    esi,eax
c002798a:	89 ca                	mov    edx,ecx
c002798c:	eb 61                	jmp    c00279ef <__adddf3+0x43c>
c002798e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027991:	f7 d6                	not    esi
c0027993:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027999:	0f 84 59 02 00 00    	je     c0027bf8 <__adddf3+0x645>
c002799f:	0d 00 00 00 80       	or     eax,0x80000000
c00279a4:	83 fb 1f             	cmp    ebx,0x1f
c00279a7:	7e 4d                	jle    c00279f6 <__adddf3+0x443>
c00279a9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279ac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279af:	83 fb 3f             	cmp    ebx,0x3f
c00279b2:	0f 8f 40 02 00 00    	jg     c0027bf8 <__adddf3+0x645>
c00279b8:	83 e3 1f             	and    ebx,0x1f
c00279bb:	89 d9                	mov    ecx,ebx
c00279bd:	89 c7                	mov    edi,eax
c00279bf:	d3 ef                	shr    edi,cl
c00279c1:	31 db                	xor    ebx,ebx
c00279c3:	85 c9                	test   ecx,ecx
c00279c5:	74 12                	je     c00279d9 <__adddf3+0x426>
c00279c7:	be 20 00 00 00       	mov    esi,0x20
c00279cc:	29 ce                	sub    esi,ecx
c00279ce:	89 f1                	mov    ecx,esi
c00279d0:	d3 e0                	shl    eax,cl
c00279d2:	31 db                	xor    ebx,ebx
c00279d4:	85 c0                	test   eax,eax
c00279d6:	0f 95 c3             	setne  bl
c00279d9:	31 c0                	xor    eax,eax
c00279db:	85 d2                	test   edx,edx
c00279dd:	0f 95 c0             	setne  al
c00279e0:	09 c7                	or     edi,eax
c00279e2:	09 fb                	or     ebx,edi
c00279e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279e7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279ea:	29 da                	sub    edx,ebx
c00279ec:	83 de 00             	sbb    esi,0x0
c00279ef:	89 f0                	mov    eax,esi
c00279f1:	e9 d6 00 00 00       	jmp    c0027acc <__adddf3+0x519>
c00279f6:	be 20 00 00 00       	mov    esi,0x20
c00279fb:	29 de                	sub    esi,ebx
c00279fd:	89 c7                	mov    edi,eax
c00279ff:	89 f1                	mov    ecx,esi
c0027a01:	d3 e7                	shl    edi,cl
c0027a03:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a06:	89 d7                	mov    edi,edx
c0027a08:	88 d9                	mov    cl,bl
c0027a0a:	d3 ef                	shr    edi,cl
c0027a0c:	89 f9                	mov    ecx,edi
c0027a0e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a11:	09 cf                	or     edi,ecx
c0027a13:	88 d9                	mov    cl,bl
c0027a15:	d3 e8                	shr    eax,cl
c0027a17:	89 f1                	mov    ecx,esi
c0027a19:	d3 e2                	shl    edx,cl
c0027a1b:	85 d2                	test   edx,edx
c0027a1d:	0f 95 c2             	setne  dl
c0027a20:	0f b6 d2             	movzx  edx,dl
c0027a23:	09 d7                	or     edi,edx
c0027a25:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a28:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a2b:	29 fa                	sub    edx,edi
c0027a2d:	19 c6                	sbb    esi,eax
c0027a2f:	eb be                	jmp    c00279ef <__adddf3+0x43c>
c0027a31:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a34:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a37:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a3d:	75 6a                	jne    c0027aa9 <__adddf3+0x4f6>
c0027a3f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a43:	75 58                	jne    c0027a9d <__adddf3+0x4ea>
c0027a45:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a48:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a4b:	89 d6                	mov    esi,edx
c0027a4d:	09 c6                	or     esi,eax
c0027a4f:	75 17                	jne    c0027a68 <__adddf3+0x4b5>
c0027a51:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a54:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a57:	85 db                	test   ebx,ebx
c0027a59:	0f 85 99 01 00 00    	jne    c0027bf8 <__adddf3+0x645>
c0027a5f:	31 ff                	xor    edi,edi
c0027a61:	31 c9                	xor    ecx,ecx
c0027a63:	e9 90 01 00 00       	jmp    c0027bf8 <__adddf3+0x645>
c0027a68:	85 db                	test   ebx,ebx
c0027a6a:	0f 84 88 01 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027a70:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a73:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a76:	85 c0                	test   eax,eax
c0027a78:	79 10                	jns    c0027a8a <__adddf3+0x4d7>
c0027a7a:	31 c9                	xor    ecx,ecx
c0027a7c:	f7 da                	neg    edx
c0027a7e:	0f 95 c1             	setne  cl
c0027a81:	01 c8                	add    eax,ecx
c0027a83:	f7 d8                	neg    eax
c0027a85:	e9 2f 01 00 00       	jmp    c0027bb9 <__adddf3+0x606>
c0027a8a:	31 ff                	xor    edi,edi
c0027a8c:	31 c9                	xor    ecx,ecx
c0027a8e:	89 c3                	mov    ebx,eax
c0027a90:	09 d3                	or     ebx,edx
c0027a92:	0f 84 60 01 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027a98:	e9 05 01 00 00       	jmp    c0027ba2 <__adddf3+0x5ef>
c0027a9d:	31 ff                	xor    edi,edi
c0027a9f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027aa4:	e9 4f 01 00 00       	jmp    c0027bf8 <__adddf3+0x645>
c0027aa9:	89 c1                	mov    ecx,eax
c0027aab:	89 d0                	mov    eax,edx
c0027aad:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027ab0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027ab3:	89 ca                	mov    edx,ecx
c0027ab5:	85 c9                	test   ecx,ecx
c0027ab7:	79 2c                	jns    c0027ae5 <__adddf3+0x532>
c0027ab9:	31 c9                	xor    ecx,ecx
c0027abb:	f7 d8                	neg    eax
c0027abd:	0f 95 c1             	setne  cl
c0027ac0:	01 ca                	add    edx,ecx
c0027ac2:	f7 da                	neg    edx
c0027ac4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ac7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027aca:	eb 19                	jmp    c0027ae5 <__adddf3+0x532>
c0027acc:	85 c0                	test   eax,eax
c0027ace:	0f 89 e5 00 00 00    	jns    c0027bb9 <__adddf3+0x606>
c0027ad4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ad9:	89 c1                	mov    ecx,eax
c0027adb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ade:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027ae1:	89 d0                	mov    eax,edx
c0027ae3:	89 ca                	mov    edx,ecx
c0027ae5:	85 d2                	test   edx,edx
c0027ae7:	74 59                	je     c0027b42 <__adddf3+0x58f>
c0027ae9:	0f bd da             	bsr    ebx,edx
c0027aec:	83 f3 1f             	xor    ebx,0x1f
c0027aef:	88 d9                	mov    cl,bl
c0027af1:	d3 e2                	shl    edx,cl
c0027af3:	bf 20 00 00 00       	mov    edi,0x20
c0027af8:	89 f9                	mov    ecx,edi
c0027afa:	29 d9                	sub    ecx,ebx
c0027afc:	89 c6                	mov    esi,eax
c0027afe:	d3 ee                	shr    esi,cl
c0027b00:	09 d6                	or     esi,edx
c0027b02:	88 d9                	mov    cl,bl
c0027b04:	d3 e0                	shl    eax,cl
c0027b06:	89 c2                	mov    edx,eax
c0027b08:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b0b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b10:	39 d8                	cmp    eax,ebx
c0027b12:	7f 22                	jg     c0027b36 <__adddf3+0x583>
c0027b14:	29 c3                	sub    ebx,eax
c0027b16:	43                   	inc    ebx
c0027b17:	88 d9                	mov    cl,bl
c0027b19:	d3 ea                	shr    edx,cl
c0027b1b:	29 df                	sub    edi,ebx
c0027b1d:	89 f9                	mov    ecx,edi
c0027b1f:	89 f0                	mov    eax,esi
c0027b21:	d3 e0                	shl    eax,cl
c0027b23:	09 c2                	or     edx,eax
c0027b25:	89 f0                	mov    eax,esi
c0027b27:	88 d9                	mov    cl,bl
c0027b29:	d3 e8                	shr    eax,cl
c0027b2b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b2e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b34:	eb 6f                	jmp    c0027ba5 <__adddf3+0x5f2>
c0027b36:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b39:	29 d8                	sub    eax,ebx
c0027b3b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b3e:	89 f0                	mov    eax,esi
c0027b40:	eb 59                	jmp    c0027b9b <__adddf3+0x5e8>
c0027b42:	85 c0                	test   eax,eax
c0027b44:	74 6a                	je     c0027bb0 <__adddf3+0x5fd>
c0027b46:	0f bd c8             	bsr    ecx,eax
c0027b49:	83 f1 1f             	xor    ecx,0x1f
c0027b4c:	d3 e0                	shl    eax,cl
c0027b4e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b51:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b57:	83 c1 20             	add    ecx,0x20
c0027b5a:	39 cb                	cmp    ebx,ecx
c0027b5c:	7f 35                	jg     c0027b93 <__adddf3+0x5e0>
c0027b5e:	29 d9                	sub    ecx,ebx
c0027b60:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b63:	83 fe 1f             	cmp    esi,0x1f
c0027b66:	7e 09                	jle    c0027b71 <__adddf3+0x5be>
c0027b68:	83 e9 1f             	sub    ecx,0x1f
c0027b6b:	d3 e8                	shr    eax,cl
c0027b6d:	89 c3                	mov    ebx,eax
c0027b6f:	eb 11                	jmp    c0027b82 <__adddf3+0x5cf>
c0027b71:	b9 20 00 00 00       	mov    ecx,0x20
c0027b76:	29 f1                	sub    ecx,esi
c0027b78:	89 c3                	mov    ebx,eax
c0027b7a:	d3 e3                	shl    ebx,cl
c0027b7c:	89 f1                	mov    ecx,esi
c0027b7e:	d3 e8                	shr    eax,cl
c0027b80:	89 c2                	mov    edx,eax
c0027b82:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b85:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b8a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b8d:	89 d0                	mov    eax,edx
c0027b8f:	89 da                	mov    edx,ebx
c0027b91:	eb 26                	jmp    c0027bb9 <__adddf3+0x606>
c0027b93:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b96:	29 cf                	sub    edi,ecx
c0027b98:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b9b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ba0:	eb 17                	jmp    c0027bb9 <__adddf3+0x606>
c0027ba2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ba5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ba8:	eb 0f                	jmp    c0027bb9 <__adddf3+0x606>
c0027baa:	31 d2                	xor    edx,edx
c0027bac:	31 c0                	xor    eax,eax
c0027bae:	eb 09                	jmp    c0027bb9 <__adddf3+0x606>
c0027bb0:	89 c2                	mov    edx,eax
c0027bb2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027bb9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bbc:	c1 e1 14             	shl    ecx,0x14
c0027bbf:	89 c3                	mov    ebx,eax
c0027bc1:	c1 eb 0b             	shr    ebx,0xb
c0027bc4:	09 d9                	or     ecx,ebx
c0027bc6:	89 d3                	mov    ebx,edx
c0027bc8:	c1 eb 0b             	shr    ebx,0xb
c0027bcb:	c1 e0 15             	shl    eax,0x15
c0027bce:	09 d8                	or     eax,ebx
c0027bd0:	89 c7                	mov    edi,eax
c0027bd2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027bd8:	0f 95 c0             	setne  al
c0027bdb:	89 c6                	mov    esi,eax
c0027bdd:	09 f3                	or     ebx,esi
c0027bdf:	83 e3 01             	and    ebx,0x1
c0027be2:	c1 ea 0a             	shr    edx,0xa
c0027be5:	21 da                	and    edx,ebx
c0027be7:	89 f8                	mov    eax,edi
c0027be9:	01 d0                	add    eax,edx
c0027beb:	83 d1 00             	adc    ecx,0x0
c0027bee:	89 c7                	mov    edi,eax
c0027bf0:	eb 06                	jmp    c0027bf8 <__adddf3+0x645>
c0027bf2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bf5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bf8:	89 f8                	mov    eax,edi
c0027bfa:	89 ca                	mov    edx,ecx
c0027bfc:	83 c4 24             	add    esp,0x24
c0027bff:	5b                   	pop    ebx
c0027c00:	5e                   	pop    esi
c0027c01:	5f                   	pop    edi
c0027c02:	5d                   	pop    ebp
c0027c03:	c3                   	ret    

c0027c04 <__subdf3>:
c0027c04:	55                   	push   ebp
c0027c05:	89 e5                	mov    ebp,esp
c0027c07:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c0a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c0d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c13:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c16:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c19:	5d                   	pop    ebp
c0027c1a:	e9 94 f9 ff ff       	jmp    c00275b3 <__adddf3>

c0027c1f <__negdf2>:
c0027c1f:	55                   	push   ebp
c0027c20:	89 e5                	mov    ebp,esp
c0027c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c25:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c28:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c2e:	5d                   	pop    ebp
c0027c2f:	c3                   	ret    

c0027c30 <__muldf3>:
c0027c30:	55                   	push   ebp
c0027c31:	89 e5                	mov    ebp,esp
c0027c33:	57                   	push   edi
c0027c34:	56                   	push   esi
c0027c35:	53                   	push   ebx
c0027c36:	83 ec 24             	sub    esp,0x24
c0027c39:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c3f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c45:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c48:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c4b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c4e:	89 c8                	mov    eax,ecx
c0027c50:	c1 f8 14             	sar    eax,0x14
c0027c53:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c56:	89 f8                	mov    eax,edi
c0027c58:	89 fb                	mov    ebx,edi
c0027c5a:	c1 e3 0b             	shl    ebx,0xb
c0027c5d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c60:	c1 e1 0b             	shl    ecx,0xb
c0027c63:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c69:	c1 e8 15             	shr    eax,0x15
c0027c6c:	09 c1                	or     ecx,eax
c0027c6e:	89 d6                	mov    esi,edx
c0027c70:	89 d0                	mov    eax,edx
c0027c72:	c1 f8 14             	sar    eax,0x14
c0027c75:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c78:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c7b:	89 c3                	mov    ebx,eax
c0027c7d:	c1 e3 0b             	shl    ebx,0xb
c0027c80:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c83:	c1 e6 0b             	shl    esi,0xb
c0027c86:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c8c:	c1 e8 15             	shr    eax,0x15
c0027c8f:	09 c6                	or     esi,eax
c0027c91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c94:	25 ff 07 00 00       	and    eax,0x7ff
c0027c99:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c9c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c9f:	25 ff 07 00 00       	and    eax,0x7ff
c0027ca4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ca7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027caa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027cad:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027cb4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cb7:	40                   	inc    eax
c0027cb8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cbd:	0f 85 8d 00 00 00    	jne    c0027d50 <__muldf3+0x120>
c0027cc3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cc6:	09 c8                	or     eax,ecx
c0027cc8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027ccc:	74 44                	je     c0027d12 <__muldf3+0xe2>
c0027cce:	85 c0                	test   eax,eax
c0027cd0:	0f 85 31 02 00 00    	jne    c0027f07 <__muldf3+0x2d7>
c0027cd6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cd9:	40                   	inc    eax
c0027cda:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cdf:	75 13                	jne    c0027cf4 <__muldf3+0xc4>
c0027ce1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ce4:	09 f1                	or     ecx,esi
c0027ce6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cea:	74 22                	je     c0027d0e <__muldf3+0xde>
c0027cec:	85 c9                	test   ecx,ecx
c0027cee:	0f 85 0d 02 00 00    	jne    c0027f01 <__muldf3+0x2d1>
c0027cf4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027cf8:	0f 89 09 02 00 00    	jns    c0027f07 <__muldf3+0x2d7>
c0027cfe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d01:	05 00 00 00 80       	add    eax,0x80000000
c0027d06:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d09:	e9 f9 01 00 00       	jmp    c0027f07 <__muldf3+0x2d7>
c0027d0e:	85 c9                	test   ecx,ecx
c0027d10:	eb 2e                	jmp    c0027d40 <__muldf3+0x110>
c0027d12:	85 c0                	test   eax,eax
c0027d14:	74 20                	je     c0027d36 <__muldf3+0x106>
c0027d16:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d1c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d1f:	c1 ef 1f             	shr    edi,0x1f
c0027d22:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d25:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d28:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d2b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d2e:	09 f9                	or     ecx,edi
c0027d30:	78 1e                	js     c0027d50 <__muldf3+0x120>
c0027d32:	89 c3                	mov    ebx,eax
c0027d34:	eb e0                	jmp    c0027d16 <__muldf3+0xe6>
c0027d36:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d39:	f7 d0                	not    eax
c0027d3b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d40:	75 b2                	jne    c0027cf4 <__muldf3+0xc4>
c0027d42:	31 ff                	xor    edi,edi
c0027d44:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d4b:	e9 b7 01 00 00       	jmp    c0027f07 <__muldf3+0x2d7>
c0027d50:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d53:	40                   	inc    eax
c0027d54:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d59:	75 57                	jne    c0027db2 <__muldf3+0x182>
c0027d5b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d5e:	09 f0                	or     eax,esi
c0027d60:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d64:	74 23                	je     c0027d89 <__muldf3+0x159>
c0027d66:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d6a:	0f 89 91 01 00 00    	jns    c0027f01 <__muldf3+0x2d1>
c0027d70:	85 c0                	test   eax,eax
c0027d72:	0f 85 89 01 00 00    	jne    c0027f01 <__muldf3+0x2d1>
c0027d78:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d7b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d81:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d84:	e9 7e 01 00 00       	jmp    c0027f07 <__muldf3+0x2d7>
c0027d89:	85 c0                	test   eax,eax
c0027d8b:	75 0c                	jne    c0027d99 <__muldf3+0x169>
c0027d8d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d91:	0f 89 6a 01 00 00    	jns    c0027f01 <__muldf3+0x2d1>
c0027d97:	eb df                	jmp    c0027d78 <__muldf3+0x148>
c0027d99:	01 f6                	add    esi,esi
c0027d9b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d9e:	c1 ea 1f             	shr    edx,0x1f
c0027da1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027da4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027da7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027daa:	09 d6                	or     esi,edx
c0027dac:	78 04                	js     c0027db2 <__muldf3+0x182>
c0027dae:	89 c3                	mov    ebx,eax
c0027db0:	eb e7                	jmp    c0027d99 <__muldf3+0x169>
c0027db2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027db8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dbe:	89 c8                	mov    eax,ecx
c0027dc0:	f7 e6                	mul    esi
c0027dc2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027dc5:	89 c7                	mov    edi,eax
c0027dc7:	89 c8                	mov    eax,ecx
c0027dc9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027dcc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027dcf:	89 c1                	mov    ecx,eax
c0027dd1:	89 f0                	mov    eax,esi
c0027dd3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027dd6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027dd9:	89 c6                	mov    esi,eax
c0027ddb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dde:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027de1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027de4:	31 c0                	xor    eax,eax
c0027de6:	01 f1                	add    ecx,esi
c0027de8:	0f 92 c0             	setb   al
c0027deb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027dee:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027df1:	83 d6 00             	adc    esi,0x0
c0027df4:	01 c7                	add    edi,eax
c0027df6:	83 d6 00             	adc    esi,0x0
c0027df9:	01 ca                	add    edx,ecx
c0027dfb:	0f 92 c1             	setb   cl
c0027dfe:	0f b6 c9             	movzx  ecx,cl
c0027e01:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e04:	83 d6 00             	adc    esi,0x0
c0027e07:	01 cf                	add    edi,ecx
c0027e09:	83 d6 00             	adc    esi,0x0
c0027e0c:	31 c9                	xor    ecx,ecx
c0027e0e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e11:	0f 95 c1             	setne  cl
c0027e14:	09 cf                	or     edi,ecx
c0027e16:	85 f6                	test   esi,esi
c0027e18:	78 0c                	js     c0027e26 <__muldf3+0x1f6>
c0027e1a:	01 f6                	add    esi,esi
c0027e1c:	89 f8                	mov    eax,edi
c0027e1e:	c1 e8 1f             	shr    eax,0x1f
c0027e21:	09 c6                	or     esi,eax
c0027e23:	01 ff                	add    edi,edi
c0027e25:	4b                   	dec    ebx
c0027e26:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e2c:	0f 8f 85 00 00 00    	jg     c0027eb7 <__muldf3+0x287>
c0027e32:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e38:	85 db                	test   ebx,ebx
c0027e3a:	0f 8f 84 00 00 00    	jg     c0027ec4 <__muldf3+0x294>
c0027e40:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e43:	7c 79                	jl     c0027ebe <__muldf3+0x28e>
c0027e45:	ba 01 00 00 00       	mov    edx,0x1
c0027e4a:	29 da                	sub    edx,ebx
c0027e4c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e52:	83 fa 1f             	cmp    edx,0x1f
c0027e55:	7e 30                	jle    c0027e87 <__muldf3+0x257>
c0027e57:	83 fa 20             	cmp    edx,0x20
c0027e5a:	75 0b                	jne    c0027e67 <__muldf3+0x237>
c0027e5c:	31 c0                	xor    eax,eax
c0027e5e:	85 ff                	test   edi,edi
c0027e60:	0f 95 c0             	setne  al
c0027e63:	89 c7                	mov    edi,eax
c0027e65:	eb 1a                	jmp    c0027e81 <__muldf3+0x251>
c0027e67:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e6a:	89 f0                	mov    eax,esi
c0027e6c:	d3 e0                	shl    eax,cl
c0027e6e:	09 f8                	or     eax,edi
c0027e70:	0f 95 c0             	setne  al
c0027e73:	0f b6 c0             	movzx  eax,al
c0027e76:	89 c7                	mov    edi,eax
c0027e78:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e7d:	29 d9                	sub    ecx,ebx
c0027e7f:	d3 ee                	shr    esi,cl
c0027e81:	09 f7                	or     edi,esi
c0027e83:	31 db                	xor    ebx,ebx
c0027e85:	eb 3b                	jmp    c0027ec2 <__muldf3+0x292>
c0027e87:	83 c3 1f             	add    ebx,0x1f
c0027e8a:	89 f0                	mov    eax,esi
c0027e8c:	88 d9                	mov    cl,bl
c0027e8e:	d3 e0                	shl    eax,cl
c0027e90:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e93:	89 f8                	mov    eax,edi
c0027e95:	88 d1                	mov    cl,dl
c0027e97:	d3 e8                	shr    eax,cl
c0027e99:	89 c1                	mov    ecx,eax
c0027e9b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e9e:	09 c8                	or     eax,ecx
c0027ea0:	88 d9                	mov    cl,bl
c0027ea2:	d3 e7                	shl    edi,cl
c0027ea4:	31 db                	xor    ebx,ebx
c0027ea6:	85 ff                	test   edi,edi
c0027ea8:	0f 95 c3             	setne  bl
c0027eab:	89 df                	mov    edi,ebx
c0027ead:	09 c7                	or     edi,eax
c0027eaf:	88 d1                	mov    cl,dl
c0027eb1:	d3 ee                	shr    esi,cl
c0027eb3:	31 db                	xor    ebx,ebx
c0027eb5:	eb 0d                	jmp    c0027ec4 <__muldf3+0x294>
c0027eb7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027ebc:	eb 02                	jmp    c0027ec0 <__muldf3+0x290>
c0027ebe:	31 db                	xor    ebx,ebx
c0027ec0:	31 ff                	xor    edi,edi
c0027ec2:	31 f6                	xor    esi,esi
c0027ec4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ec7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027eca:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ecf:	09 c3                	or     ebx,eax
c0027ed1:	c1 e3 14             	shl    ebx,0x14
c0027ed4:	89 f0                	mov    eax,esi
c0027ed6:	c1 e8 0b             	shr    eax,0xb
c0027ed9:	09 c3                	or     ebx,eax
c0027edb:	89 f8                	mov    eax,edi
c0027edd:	c1 e8 0b             	shr    eax,0xb
c0027ee0:	c1 e6 15             	shl    esi,0x15
c0027ee3:	09 c6                	or     esi,eax
c0027ee5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027eeb:	0f 95 c1             	setne  cl
c0027eee:	09 c8                	or     eax,ecx
c0027ef0:	83 e0 01             	and    eax,0x1
c0027ef3:	c1 ef 0a             	shr    edi,0xa
c0027ef6:	21 c7                	and    edi,eax
c0027ef8:	01 f7                	add    edi,esi
c0027efa:	83 d3 00             	adc    ebx,0x0
c0027efd:	89 da                	mov    edx,ebx
c0027eff:	eb 03                	jmp    c0027f04 <__muldf3+0x2d4>
c0027f01:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f04:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f07:	89 f8                	mov    eax,edi
c0027f09:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f0c:	83 c4 24             	add    esp,0x24
c0027f0f:	5b                   	pop    ebx
c0027f10:	5e                   	pop    esi
c0027f11:	5f                   	pop    edi
c0027f12:	5d                   	pop    ebp
c0027f13:	c3                   	ret    

c0027f14 <__divdf3>:
c0027f14:	55                   	push   ebp
c0027f15:	89 e5                	mov    ebp,esp
c0027f17:	57                   	push   edi
c0027f18:	56                   	push   esi
c0027f19:	53                   	push   ebx
c0027f1a:	83 ec 2c             	sub    esp,0x2c
c0027f1d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f20:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f23:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f26:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f29:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f2c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f2f:	89 ce                	mov    esi,ecx
c0027f31:	89 c8                	mov    eax,ecx
c0027f33:	c1 f8 14             	sar    eax,0x14
c0027f36:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f39:	89 f8                	mov    eax,edi
c0027f3b:	89 fb                	mov    ebx,edi
c0027f3d:	c1 e3 0b             	shl    ebx,0xb
c0027f40:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f43:	c1 e6 0b             	shl    esi,0xb
c0027f46:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f4c:	c1 e8 15             	shr    eax,0x15
c0027f4f:	09 c6                	or     esi,eax
c0027f51:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f54:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f57:	89 c2                	mov    edx,eax
c0027f59:	c1 fa 14             	sar    edx,0x14
c0027f5c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f5f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f62:	89 de                	mov    esi,ebx
c0027f64:	c1 e6 0b             	shl    esi,0xb
c0027f67:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f6a:	c1 e0 0b             	shl    eax,0xb
c0027f6d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f72:	c1 eb 15             	shr    ebx,0x15
c0027f75:	09 d8                	or     eax,ebx
c0027f77:	89 c2                	mov    edx,eax
c0027f79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f7c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f81:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f84:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f87:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f8d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f90:	29 d8                	sub    eax,ebx
c0027f92:	05 ff 03 00 00       	add    eax,0x3ff
c0027f97:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f9a:	46                   	inc    esi
c0027f9b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fa1:	0f 85 a5 00 00 00    	jne    c002804c <__divdf3+0x138>
c0027fa7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027faa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027fad:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027fb1:	74 2a                	je     c0027fdd <__divdf3+0xc9>
c0027fb3:	85 f6                	test   esi,esi
c0027fb5:	0f 85 cc 02 00 00    	jne    c0028287 <__divdf3+0x373>
c0027fbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fbe:	40                   	inc    eax
c0027fbf:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fc4:	75 26                	jne    c0027fec <__divdf3+0xd8>
c0027fc6:	85 db                	test   ebx,ebx
c0027fc8:	74 22                	je     c0027fec <__divdf3+0xd8>
c0027fca:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fcd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fd3:	09 d0                	or     eax,edx
c0027fd5:	0f 85 ac 02 00 00    	jne    c0028287 <__divdf3+0x373>
c0027fdb:	eb 63                	jmp    c0028040 <__divdf3+0x12c>
c0027fdd:	85 f6                	test   esi,esi
c0027fdf:	75 22                	jne    c0028003 <__divdf3+0xef>
c0027fe1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fe4:	40                   	inc    eax
c0027fe5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fea:	74 36                	je     c0028022 <__divdf3+0x10e>
c0027fec:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ff0:	0f 89 91 02 00 00    	jns    c0028287 <__divdf3+0x373>
c0027ff6:	89 f8                	mov    eax,edi
c0027ff8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ffe:	e9 80 02 00 00       	jmp    c0028283 <__divdf3+0x36f>
c0028003:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028006:	01 f6                	add    esi,esi
c0028008:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002800b:	c1 ef 1f             	shr    edi,0x1f
c002800e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028011:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028014:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028017:	09 f7                	or     edi,esi
c0028019:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002801c:	78 2e                	js     c002804c <__divdf3+0x138>
c002801e:	89 c8                	mov    eax,ecx
c0028020:	eb e1                	jmp    c0028003 <__divdf3+0xef>
c0028022:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028025:	09 d0                	or     eax,edx
c0028027:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002802b:	74 0f                	je     c002803c <__divdf3+0x128>
c002802d:	85 c0                	test   eax,eax
c002802f:	74 bb                	je     c0027fec <__divdf3+0xd8>
c0028031:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028034:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028037:	e9 4b 02 00 00       	jmp    c0028287 <__divdf3+0x373>
c002803c:	85 c0                	test   eax,eax
c002803e:	75 ac                	jne    c0027fec <__divdf3+0xd8>
c0028040:	31 ff                	xor    edi,edi
c0028042:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028047:	e9 3b 02 00 00       	jmp    c0028287 <__divdf3+0x373>
c002804c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002804f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028052:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028058:	75 6b                	jne    c00280c5 <__divdf3+0x1b1>
c002805a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002805d:	09 d6                	or     esi,edx
c002805f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028063:	74 28                	je     c002808d <__divdf3+0x179>
c0028065:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028068:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002806b:	85 f6                	test   esi,esi
c002806d:	0f 85 14 02 00 00    	jne    c0028287 <__divdf3+0x373>
c0028073:	31 ff                	xor    edi,edi
c0028075:	31 c9                	xor    ecx,ecx
c0028077:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002807a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002807d:	0f 89 04 02 00 00    	jns    c0028287 <__divdf3+0x373>
c0028083:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028088:	e9 fa 01 00 00       	jmp    c0028287 <__divdf3+0x373>
c002808d:	85 f6                	test   esi,esi
c002808f:	75 1b                	jne    c00280ac <__divdf3+0x198>
c0028091:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028094:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028097:	25 00 00 00 80       	and    eax,0x80000000
c002809c:	31 c9                	xor    ecx,ecx
c002809e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00280a3:	89 cf                	mov    edi,ecx
c00280a5:	89 c1                	mov    ecx,eax
c00280a7:	e9 db 01 00 00       	jmp    c0028287 <__divdf3+0x373>
c00280ac:	01 d2                	add    edx,edx
c00280ae:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280b1:	c1 eb 1f             	shr    ebx,0x1f
c00280b4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280b7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00280ba:	8d 48 01             	lea    ecx,[eax+0x1]
c00280bd:	09 da                	or     edx,ebx
c00280bf:	78 04                	js     c00280c5 <__divdf3+0x1b1>
c00280c1:	89 c8                	mov    eax,ecx
c00280c3:	eb e7                	jmp    c00280ac <__divdf3+0x198>
c00280c5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280c8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00280ce:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280d4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00280d7:	39 d6                	cmp    esi,edx
c00280d9:	77 0d                	ja     c00280e8 <__divdf3+0x1d4>
c00280db:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00280de:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00280e1:	72 1b                	jb     c00280fe <__divdf3+0x1ea>
c00280e3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00280e6:	75 16                	jne    c00280fe <__divdf3+0x1ea>
c00280e8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280ee:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280f1:	83 de 00             	sbb    esi,0x0
c00280f4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280f7:	ba 01 00 00 00       	mov    edx,0x1
c00280fc:	eb 02                	jmp    c0028100 <__divdf3+0x1ec>
c00280fe:	31 d2                	xor    edx,edx
c0028100:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028107:	31 ff                	xor    edi,edi
c0028109:	01 ff                	add    edi,edi
c002810b:	89 d1                	mov    ecx,edx
c002810d:	c1 e9 1f             	shr    ecx,0x1f
c0028110:	09 cf                	or     edi,ecx
c0028112:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028115:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028118:	89 da                	mov    edx,ebx
c002811a:	89 f3                	mov    ebx,esi
c002811c:	8d 34 36             	lea    esi,[esi+esi*1]
c002811f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028122:	c1 e9 1f             	shr    ecx,0x1f
c0028125:	09 ce                	or     esi,ecx
c0028127:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002812a:	01 c9                	add    ecx,ecx
c002812c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002812f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028132:	85 db                	test   ebx,ebx
c0028134:	78 29                	js     c002815f <__divdf3+0x24b>
c0028136:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028139:	72 07                	jb     c0028142 <__divdf3+0x22e>
c002813b:	75 3c                	jne    c0028179 <__divdf3+0x265>
c002813d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028140:	77 37                	ja     c0028179 <__divdf3+0x265>
c0028142:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028145:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028148:	31 d2                	xor    edx,edx
c002814a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002814d:	0f 97 c2             	seta   dl
c0028150:	29 d6                	sub    esi,edx
c0028152:	89 d9                	mov    ecx,ebx
c0028154:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028157:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002815a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002815d:	eb 17                	jmp    c0028176 <__divdf3+0x262>
c002815f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028162:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028165:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028168:	0f 97 c1             	seta   cl
c002816b:	0f b6 c9             	movzx  ecx,cl
c002816e:	29 ce                	sub    esi,ecx
c0028170:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028173:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028176:	83 ca 01             	or     edx,0x1
c0028179:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002817c:	75 8b                	jne    c0028109 <__divdf3+0x1f5>
c002817e:	c1 e7 09             	shl    edi,0x9
c0028181:	89 d1                	mov    ecx,edx
c0028183:	c1 e9 17             	shr    ecx,0x17
c0028186:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028189:	09 f3                	or     ebx,esi
c002818b:	0f 95 c3             	setne  bl
c002818e:	0f b6 db             	movzx  ebx,bl
c0028191:	c1 e2 09             	shl    edx,0x9
c0028194:	09 d3                	or     ebx,edx
c0028196:	89 ca                	mov    edx,ecx
c0028198:	09 fa                	or     edx,edi
c002819a:	78 0c                	js     c00281a8 <__divdf3+0x294>
c002819c:	01 d2                	add    edx,edx
c002819e:	89 d9                	mov    ecx,ebx
c00281a0:	c1 e9 1f             	shr    ecx,0x1f
c00281a3:	09 ca                	or     edx,ecx
c00281a5:	01 db                	add    ebx,ebx
c00281a7:	48                   	dec    eax
c00281a8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00281ad:	0f 8f 83 00 00 00    	jg     c0028236 <__divdf3+0x322>
c00281b3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00281b9:	85 c0                	test   eax,eax
c00281bb:	0f 8f 82 00 00 00    	jg     c0028243 <__divdf3+0x32f>
c00281c1:	83 f8 cc             	cmp    eax,0xffffffcc
c00281c4:	7c 77                	jl     c002823d <__divdf3+0x329>
c00281c6:	be 01 00 00 00       	mov    esi,0x1
c00281cb:	29 c6                	sub    esi,eax
c00281cd:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281d3:	83 fe 1f             	cmp    esi,0x1f
c00281d6:	7e 2f                	jle    c0028207 <__divdf3+0x2f3>
c00281d8:	83 fe 20             	cmp    esi,0x20
c00281db:	75 0a                	jne    c00281e7 <__divdf3+0x2d3>
c00281dd:	85 db                	test   ebx,ebx
c00281df:	0f 95 c3             	setne  bl
c00281e2:	0f b6 db             	movzx  ebx,bl
c00281e5:	eb 1a                	jmp    c0028201 <__divdf3+0x2ed>
c00281e7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00281ea:	89 d7                	mov    edi,edx
c00281ec:	d3 e7                	shl    edi,cl
c00281ee:	89 f9                	mov    ecx,edi
c00281f0:	09 d9                	or     ecx,ebx
c00281f2:	0f 95 c3             	setne  bl
c00281f5:	0f b6 db             	movzx  ebx,bl
c00281f8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281fd:	29 c1                	sub    ecx,eax
c00281ff:	d3 ea                	shr    edx,cl
c0028201:	09 d3                	or     ebx,edx
c0028203:	31 c0                	xor    eax,eax
c0028205:	eb 3a                	jmp    c0028241 <__divdf3+0x32d>
c0028207:	83 c0 1f             	add    eax,0x1f
c002820a:	89 d7                	mov    edi,edx
c002820c:	88 c1                	mov    cl,al
c002820e:	d3 e7                	shl    edi,cl
c0028210:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028213:	89 df                	mov    edi,ebx
c0028215:	89 f1                	mov    ecx,esi
c0028217:	d3 ef                	shr    edi,cl
c0028219:	89 f9                	mov    ecx,edi
c002821b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002821e:	09 cf                	or     edi,ecx
c0028220:	88 c1                	mov    cl,al
c0028222:	d3 e3                	shl    ebx,cl
c0028224:	85 db                	test   ebx,ebx
c0028226:	0f 95 c3             	setne  bl
c0028229:	0f b6 db             	movzx  ebx,bl
c002822c:	09 fb                	or     ebx,edi
c002822e:	89 f1                	mov    ecx,esi
c0028230:	d3 ea                	shr    edx,cl
c0028232:	31 c0                	xor    eax,eax
c0028234:	eb 0d                	jmp    c0028243 <__divdf3+0x32f>
c0028236:	b8 ff 07 00 00       	mov    eax,0x7ff
c002823b:	eb 02                	jmp    c002823f <__divdf3+0x32b>
c002823d:	31 c0                	xor    eax,eax
c002823f:	31 db                	xor    ebx,ebx
c0028241:	31 d2                	xor    edx,edx
c0028243:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028246:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028249:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002824f:	09 c8                	or     eax,ecx
c0028251:	c1 e0 14             	shl    eax,0x14
c0028254:	89 d1                	mov    ecx,edx
c0028256:	c1 e9 0b             	shr    ecx,0xb
c0028259:	09 c8                	or     eax,ecx
c002825b:	89 c6                	mov    esi,eax
c002825d:	89 d9                	mov    ecx,ebx
c002825f:	c1 e9 0b             	shr    ecx,0xb
c0028262:	c1 e2 15             	shl    edx,0x15
c0028265:	09 ca                	or     edx,ecx
c0028267:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002826d:	0f 95 c0             	setne  al
c0028270:	09 c1                	or     ecx,eax
c0028272:	83 e1 01             	and    ecx,0x1
c0028275:	c1 eb 0a             	shr    ebx,0xa
c0028278:	21 cb                	and    ebx,ecx
c002827a:	01 d3                	add    ebx,edx
c002827c:	89 d8                	mov    eax,ebx
c002827e:	83 d6 00             	adc    esi,0x0
c0028281:	89 f2                	mov    edx,esi
c0028283:	89 c7                	mov    edi,eax
c0028285:	89 d1                	mov    ecx,edx
c0028287:	89 f8                	mov    eax,edi
c0028289:	89 ca                	mov    edx,ecx
c002828b:	83 c4 2c             	add    esp,0x2c
c002828e:	5b                   	pop    ebx
c002828f:	5e                   	pop    esi
c0028290:	5f                   	pop    edi
c0028291:	5d                   	pop    ebp
c0028292:	c3                   	ret    

c0028293 <__floatsidf>:
c0028293:	55                   	push   ebp
c0028294:	89 e5                	mov    ebp,esp
c0028296:	56                   	push   esi
c0028297:	53                   	push   ebx
c0028298:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002829b:	85 db                	test   ebx,ebx
c002829d:	7e 15                	jle    c00282b4 <__floatsidf+0x21>
c002829f:	0f bd cb             	bsr    ecx,ebx
c00282a2:	83 f1 1f             	xor    ecx,0x1f
c00282a5:	d3 e3                	shl    ebx,cl
c00282a7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282ad:	b8 1e 04 00 00       	mov    eax,0x41e
c00282b2:	eb 21                	jmp    c00282d5 <__floatsidf+0x42>
c00282b4:	b8 00 00 00 00       	mov    eax,0x0
c00282b9:	ba 00 00 00 00       	mov    edx,0x0
c00282be:	74 2a                	je     c00282ea <__floatsidf+0x57>
c00282c0:	f7 db                	neg    ebx
c00282c2:	0f bd cb             	bsr    ecx,ebx
c00282c5:	83 f1 1f             	xor    ecx,0x1f
c00282c8:	d3 e3                	shl    ebx,cl
c00282ca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282d0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00282d5:	29 c8                	sub    eax,ecx
c00282d7:	c1 e0 14             	shl    eax,0x14
c00282da:	89 c1                	mov    ecx,eax
c00282dc:	89 de                	mov    esi,ebx
c00282de:	c1 ee 0b             	shr    esi,0xb
c00282e1:	09 f1                	or     ecx,esi
c00282e3:	89 ca                	mov    edx,ecx
c00282e5:	c1 e3 15             	shl    ebx,0x15
c00282e8:	89 d8                	mov    eax,ebx
c00282ea:	5b                   	pop    ebx
c00282eb:	5e                   	pop    esi
c00282ec:	5d                   	pop    ebp
c00282ed:	c3                   	ret    

c00282ee <__floatunsidf>:
c00282ee:	55                   	push   ebp
c00282ef:	89 e5                	mov    ebp,esp
c00282f1:	56                   	push   esi
c00282f2:	53                   	push   ebx
c00282f3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282f6:	85 db                	test   ebx,ebx
c00282f8:	74 2a                	je     c0028324 <__floatunsidf+0x36>
c00282fa:	0f bd cb             	bsr    ecx,ebx
c00282fd:	83 f1 1f             	xor    ecx,0x1f
c0028300:	d3 e3                	shl    ebx,cl
c0028302:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028308:	b8 1e 04 00 00       	mov    eax,0x41e
c002830d:	29 c8                	sub    eax,ecx
c002830f:	c1 e0 14             	shl    eax,0x14
c0028312:	89 c1                	mov    ecx,eax
c0028314:	89 de                	mov    esi,ebx
c0028316:	c1 ee 0b             	shr    esi,0xb
c0028319:	09 f1                	or     ecx,esi
c002831b:	89 ca                	mov    edx,ecx
c002831d:	c1 e3 15             	shl    ebx,0x15
c0028320:	89 d8                	mov    eax,ebx
c0028322:	eb 04                	jmp    c0028328 <__floatunsidf+0x3a>
c0028324:	31 c0                	xor    eax,eax
c0028326:	31 d2                	xor    edx,edx
c0028328:	5b                   	pop    ebx
c0028329:	5e                   	pop    esi
c002832a:	5d                   	pop    ebp
c002832b:	c3                   	ret    

c002832c <__fixdfsi>:
c002832c:	55                   	push   ebp
c002832d:	89 e5                	mov    ebp,esp
c002832f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028332:	89 d1                	mov    ecx,edx
c0028334:	c1 e1 0b             	shl    ecx,0xb
c0028337:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002833d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028340:	c1 e8 15             	shr    eax,0x15
c0028343:	09 c1                	or     ecx,eax
c0028345:	c1 fa 14             	sar    edx,0x14
c0028348:	78 1f                	js     c0028369 <__fixdfsi+0x3d>
c002834a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028350:	31 c0                	xor    eax,eax
c0028352:	83 fa 1e             	cmp    edx,0x1e
c0028355:	77 40                	ja     c0028397 <__fixdfsi+0x6b>
c0028357:	89 c8                	mov    eax,ecx
c0028359:	0d 00 00 00 80       	or     eax,0x80000000
c002835e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028363:	29 d1                	sub    ecx,edx
c0028365:	d3 e8                	shr    eax,cl
c0028367:	eb 2e                	jmp    c0028397 <__fixdfsi+0x6b>
c0028369:	31 c0                	xor    eax,eax
c002836b:	81 c2 01 04 00 00    	add    edx,0x401
c0028371:	78 24                	js     c0028397 <__fixdfsi+0x6b>
c0028373:	83 fa 1e             	cmp    edx,0x1e
c0028376:	7e 09                	jle    c0028381 <__fixdfsi+0x55>
c0028378:	83 fa 1f             	cmp    edx,0x1f
c002837b:	75 18                	jne    c0028395 <__fixdfsi+0x69>
c002837d:	85 c9                	test   ecx,ecx
c002837f:	75 14                	jne    c0028395 <__fixdfsi+0x69>
c0028381:	89 c8                	mov    eax,ecx
c0028383:	0d 00 00 00 80       	or     eax,0x80000000
c0028388:	b9 1f 00 00 00       	mov    ecx,0x1f
c002838d:	29 d1                	sub    ecx,edx
c002838f:	d3 e8                	shr    eax,cl
c0028391:	f7 d8                	neg    eax
c0028393:	eb 02                	jmp    c0028397 <__fixdfsi+0x6b>
c0028395:	31 c0                	xor    eax,eax
c0028397:	5d                   	pop    ebp
c0028398:	c3                   	ret    

c0028399 <__fixunsdfsi>:
c0028399:	55                   	push   ebp
c002839a:	89 e5                	mov    ebp,esp
c002839c:	53                   	push   ebx
c002839d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00283a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283a3:	89 d3                	mov    ebx,edx
c00283a5:	c1 fb 14             	sar    ebx,0x14
c00283a8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00283ae:	31 c0                	xor    eax,eax
c00283b0:	83 fb 1f             	cmp    ebx,0x1f
c00283b3:	77 1d                	ja     c00283d2 <__fixunsdfsi+0x39>
c00283b5:	89 d0                	mov    eax,edx
c00283b7:	c1 e0 0b             	shl    eax,0xb
c00283ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283bf:	c1 e9 15             	shr    ecx,0x15
c00283c2:	09 c8                	or     eax,ecx
c00283c4:	0d 00 00 00 80       	or     eax,0x80000000
c00283c9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283ce:	29 d9                	sub    ecx,ebx
c00283d0:	d3 e8                	shr    eax,cl
c00283d2:	5b                   	pop    ebx
c00283d3:	5d                   	pop    ebp
c00283d4:	c3                   	ret    

c00283d5 <__cmpdf2>:
c00283d5:	55                   	push   ebp
c00283d6:	89 e5                	mov    ebp,esp
c00283d8:	57                   	push   edi
c00283d9:	56                   	push   esi
c00283da:	53                   	push   ebx
c00283db:	83 ec 0c             	sub    esp,0xc
c00283de:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00283e1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283e4:	89 ca                	mov    edx,ecx
c00283e6:	c1 ea 14             	shr    edx,0x14
c00283e9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00283ef:	89 cb                	mov    ebx,ecx
c00283f1:	c1 fb 1f             	sar    ebx,0x1f
c00283f4:	31 da                	xor    edx,ebx
c00283f6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283f9:	89 df                	mov    edi,ebx
c00283fb:	c1 e7 0b             	shl    edi,0xb
c00283fe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028401:	c1 e1 0b             	shl    ecx,0xb
c0028404:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002840a:	c1 eb 15             	shr    ebx,0x15
c002840d:	09 d9                	or     ecx,ebx
c002840f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028412:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028415:	89 ce                	mov    esi,ecx
c0028417:	c1 ee 14             	shr    esi,0x14
c002841a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028420:	89 cb                	mov    ebx,ecx
c0028422:	c1 fb 1f             	sar    ebx,0x1f
c0028425:	31 de                	xor    esi,ebx
c0028427:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002842a:	89 df                	mov    edi,ebx
c002842c:	c1 e7 0b             	shl    edi,0xb
c002842f:	c1 e1 0b             	shl    ecx,0xb
c0028432:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028438:	c1 eb 15             	shr    ebx,0x15
c002843b:	09 d9                	or     ecx,ebx
c002843d:	89 d3                	mov    ebx,edx
c002843f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028445:	43                   	inc    ebx
c0028446:	83 fb 01             	cmp    ebx,0x1
c0028449:	77 08                	ja     c0028453 <__cmpdf2+0x7e>
c002844b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002844e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028451:	75 68                	jne    c00284bb <__cmpdf2+0xe6>
c0028453:	89 f3                	mov    ebx,esi
c0028455:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002845b:	43                   	inc    ebx
c002845c:	83 fb 01             	cmp    ebx,0x1
c002845f:	77 06                	ja     c0028467 <__cmpdf2+0x92>
c0028461:	89 fb                	mov    ebx,edi
c0028463:	09 cb                	or     ebx,ecx
c0028465:	75 54                	jne    c00284bb <__cmpdf2+0xe6>
c0028467:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002846a:	09 f8                	or     eax,edi
c002846c:	09 c8                	or     eax,ecx
c002846e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028471:	75 12                	jne    c0028485 <__cmpdf2+0xb0>
c0028473:	8d 42 01             	lea    eax,[edx+0x1]
c0028476:	83 f8 01             	cmp    eax,0x1
c0028479:	77 0a                	ja     c0028485 <__cmpdf2+0xb0>
c002847b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002847e:	31 c0                	xor    eax,eax
c0028480:	83 fb 01             	cmp    ebx,0x1
c0028483:	76 36                	jbe    c00284bb <__cmpdf2+0xe6>
c0028485:	b8 01 00 00 00       	mov    eax,0x1
c002848a:	39 f2                	cmp    edx,esi
c002848c:	7f 2d                	jg     c00284bb <__cmpdf2+0xe6>
c002848e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028493:	7c 26                	jl     c00284bb <__cmpdf2+0xe6>
c0028495:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028498:	77 07                	ja     c00284a1 <__cmpdf2+0xcc>
c002849a:	72 16                	jb     c00284b2 <__cmpdf2+0xdd>
c002849c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002849f:	76 0a                	jbe    c00284ab <__cmpdf2+0xd6>
c00284a1:	89 d0                	mov    eax,edx
c00284a3:	c1 f8 1f             	sar    eax,0x1f
c00284a6:	83 c8 01             	or     eax,0x1
c00284a9:	eb 10                	jmp    c00284bb <__cmpdf2+0xe6>
c00284ab:	b8 00 00 00 00       	mov    eax,0x0
c00284b0:	73 09                	jae    c00284bb <__cmpdf2+0xe6>
c00284b2:	89 d0                	mov    eax,edx
c00284b4:	c1 f8 1f             	sar    eax,0x1f
c00284b7:	83 e0 02             	and    eax,0x2
c00284ba:	48                   	dec    eax
c00284bb:	83 c4 0c             	add    esp,0xc
c00284be:	5b                   	pop    ebx
c00284bf:	5e                   	pop    esi
c00284c0:	5f                   	pop    edi
c00284c1:	5d                   	pop    ebp
c00284c2:	c3                   	ret    

c00284c3 <__eqdf2>:
c00284c3:	55                   	push   ebp
c00284c4:	89 e5                	mov    ebp,esp
c00284c6:	50                   	push   eax
c00284c7:	6a 01                	push   0x1
c00284c9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284cc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284d5:	e8 fb fe ff ff       	call   c00283d5 <__cmpdf2>
c00284da:	83 c4 18             	add    esp,0x18
c00284dd:	c9                   	leave  
c00284de:	c3                   	ret    

c00284df <__nedf2>:
c00284df:	eb e2                	jmp    c00284c3 <__eqdf2>

c00284e1 <__gtdf2>:
c00284e1:	55                   	push   ebp
c00284e2:	89 e5                	mov    ebp,esp
c00284e4:	50                   	push   eax
c00284e5:	6a ff                	push   0xffffffff
c00284e7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284ea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284f3:	e8 dd fe ff ff       	call   c00283d5 <__cmpdf2>
c00284f8:	83 c4 18             	add    esp,0x18
c00284fb:	c9                   	leave  
c00284fc:	c3                   	ret    

c00284fd <__gedf2>:
c00284fd:	eb e2                	jmp    c00284e1 <__gtdf2>

c00284ff <__ltdf2>:
c00284ff:	eb c2                	jmp    c00284c3 <__eqdf2>

c0028501 <__ledf2>:
c0028501:	eb c0                	jmp    c00284c3 <__eqdf2>

c0028503 <__truncdfsf2>:
c0028503:	55                   	push   ebp
c0028504:	89 e5                	mov    ebp,esp
c0028506:	57                   	push   edi
c0028507:	56                   	push   esi
c0028508:	53                   	push   ebx
c0028509:	83 ec 0c             	sub    esp,0xc
c002850c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002850f:	89 d1                	mov    ecx,edx
c0028511:	c1 f9 14             	sar    ecx,0x14
c0028514:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028517:	89 df                	mov    edi,ebx
c0028519:	c1 e7 0b             	shl    edi,0xb
c002851c:	89 d0                	mov    eax,edx
c002851e:	c1 e0 0b             	shl    eax,0xb
c0028521:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028526:	c1 eb 15             	shr    ebx,0x15
c0028529:	09 d8                	or     eax,ebx
c002852b:	89 cb                	mov    ebx,ecx
c002852d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028533:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028539:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002853f:	0f 86 9e 00 00 00    	jbe    c00285e3 <__truncdfsf2+0xe0>
c0028545:	85 db                	test   ebx,ebx
c0028547:	75 0a                	jne    c0028553 <__truncdfsf2+0x50>
c0028549:	c1 fa 17             	sar    edx,0x17
c002854c:	30 d2                	xor    dl,dl
c002854e:	e9 84 00 00 00       	jmp    c00285d7 <__truncdfsf2+0xd4>
c0028553:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028559:	83 fe 83             	cmp    esi,0xffffff83
c002855c:	7d 4b                	jge    c00285a9 <__truncdfsf2+0xa6>
c002855e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028563:	29 f1                	sub    ecx,esi
c0028565:	83 f9 1f             	cmp    ecx,0x1f
c0028568:	7f 6b                	jg     c00285d5 <__truncdfsf2+0xd2>
c002856a:	0d 00 00 00 80       	or     eax,0x80000000
c002856f:	89 c3                	mov    ebx,eax
c0028571:	d3 eb                	shr    ebx,cl
c0028573:	be 01 00 00 00       	mov    esi,0x1
c0028578:	d3 e6                	shl    esi,cl
c002857a:	4e                   	dec    esi
c002857b:	21 f0                	and    eax,esi
c002857d:	09 f8                	or     eax,edi
c002857f:	0f 95 c0             	setne  al
c0028582:	0f b6 c0             	movzx  eax,al
c0028585:	09 c3                	or     ebx,eax
c0028587:	89 d9                	mov    ecx,ebx
c0028589:	c1 e9 08             	shr    ecx,0x8
c002858c:	f6 c3 7f             	test   bl,0x7f
c002858f:	0f 95 c0             	setne  al
c0028592:	09 c8                	or     eax,ecx
c0028594:	83 e0 01             	and    eax,0x1
c0028597:	c1 eb 07             	shr    ebx,0x7
c002859a:	21 c3                	and    ebx,eax
c002859c:	81 e2 00 00 00 80    	and    edx,0x80000000
c00285a2:	09 d1                	or     ecx,edx
c00285a4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00285a7:	eb 76                	jmp    c002861f <__truncdfsf2+0x11c>
c00285a9:	83 c6 80             	add    esi,0xffffff80
c00285ac:	7e 1d                	jle    c00285cb <__truncdfsf2+0xc8>
c00285ae:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00285b4:	75 0b                	jne    c00285c1 <__truncdfsf2+0xbe>
c00285b6:	09 f8                	or     eax,edi
c00285b8:	74 09                	je     c00285c3 <__truncdfsf2+0xc0>
c00285ba:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00285bf:	eb 02                	jmp    c00285c3 <__truncdfsf2+0xc0>
c00285c1:	31 c0                	xor    eax,eax
c00285c3:	c1 fa 17             	sar    edx,0x17
c00285c6:	80 ca ff             	or     dl,0xff
c00285c9:	eb 0e                	jmp    c00285d9 <__truncdfsf2+0xd6>
c00285cb:	c1 fa 1f             	sar    edx,0x1f
c00285ce:	c1 e2 08             	shl    edx,0x8
c00285d1:	09 ca                	or     edx,ecx
c00285d3:	eb 04                	jmp    c00285d9 <__truncdfsf2+0xd6>
c00285d5:	31 d2                	xor    edx,edx
c00285d7:	31 c0                	xor    eax,eax
c00285d9:	c1 e2 17             	shl    edx,0x17
c00285dc:	c1 e8 08             	shr    eax,0x8
c00285df:	09 d0                	or     eax,edx
c00285e1:	eb 3c                	jmp    c002861f <__truncdfsf2+0x11c>
c00285e3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00285e9:	89 ca                	mov    edx,ecx
c00285eb:	c1 fa 0b             	sar    edx,0xb
c00285ee:	c1 e2 08             	shl    edx,0x8
c00285f1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285f4:	31 db                	xor    ebx,ebx
c00285f6:	85 ff                	test   edi,edi
c00285f8:	0f 95 c3             	setne  bl
c00285fb:	09 d8                	or     eax,ebx
c00285fd:	89 c3                	mov    ebx,eax
c00285ff:	c1 eb 08             	shr    ebx,0x8
c0028602:	a8 7f                	test   al,0x7f
c0028604:	0f 95 c2             	setne  dl
c0028607:	89 d6                	mov    esi,edx
c0028609:	09 de                	or     esi,ebx
c002860b:	83 e6 01             	and    esi,0x1
c002860e:	c1 e8 07             	shr    eax,0x7
c0028611:	21 f0                	and    eax,esi
c0028613:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028616:	09 ca                	or     edx,ecx
c0028618:	c1 e2 17             	shl    edx,0x17
c002861b:	09 da                	or     edx,ebx
c002861d:	01 d0                	add    eax,edx
c002861f:	83 c4 0c             	add    esp,0xc
c0028622:	5b                   	pop    ebx
c0028623:	5e                   	pop    esi
c0028624:	5f                   	pop    edi
c0028625:	5d                   	pop    ebp
c0028626:	c3                   	ret    

c0028627 <__extendsfdf2>:
c0028627:	55                   	push   ebp
c0028628:	89 e5                	mov    ebp,esp
c002862a:	57                   	push   edi
c002862b:	56                   	push   esi
c002862c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002862f:	89 d1                	mov    ecx,edx
c0028631:	c1 f9 17             	sar    ecx,0x17
c0028634:	c1 e2 08             	shl    edx,0x8
c0028637:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002863d:	89 c8                	mov    eax,ecx
c002863f:	80 e4 f8             	and    ah,0xf8
c0028642:	8d 71 01             	lea    esi,[ecx+0x1]
c0028645:	81 e6 fe 00 00 00    	and    esi,0xfe
c002864b:	75 27                	jne    c0028674 <__extendsfdf2+0x4d>
c002864d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028653:	75 18                	jne    c002866d <__extendsfdf2+0x46>
c0028655:	85 d2                	test   edx,edx
c0028657:	74 20                	je     c0028679 <__extendsfdf2+0x52>
c0028659:	41                   	inc    ecx
c002865a:	01 d2                	add    edx,edx
c002865c:	79 fb                	jns    c0028659 <__extendsfdf2+0x32>
c002865e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028664:	29 c8                	sub    eax,ecx
c0028666:	05 81 03 00 00       	add    eax,0x381
c002866b:	eb 0c                	jmp    c0028679 <__extendsfdf2+0x52>
c002866d:	05 00 07 00 00       	add    eax,0x700
c0028672:	eb 05                	jmp    c0028679 <__extendsfdf2+0x52>
c0028674:	05 80 03 00 00       	add    eax,0x380
c0028679:	c1 e0 14             	shl    eax,0x14
c002867c:	89 c1                	mov    ecx,eax
c002867e:	89 d0                	mov    eax,edx
c0028680:	c1 e8 0b             	shr    eax,0xb
c0028683:	09 c1                	or     ecx,eax
c0028685:	c1 e2 15             	shl    edx,0x15
c0028688:	89 d0                	mov    eax,edx
c002868a:	89 ca                	mov    edx,ecx
c002868c:	5e                   	pop    esi
c002868d:	5f                   	pop    edi
c002868e:	5d                   	pop    ebp
c002868f:	c3                   	ret    

c0028690 <fabs>:
c0028690:	83 ec 0c             	sub    esp,0xc
c0028693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028697:	89 04 24             	mov    DWORD PTR [esp],eax
c002869a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002869e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00286a7:	dd 04 24             	fld    QWORD PTR [esp]
c00286aa:	83 c4 0c             	add    esp,0xc
c00286ad:	c3                   	ret    
c00286ae:	66 90                	xchg   ax,ax

c00286b0 <lrint>:
c00286b0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00286b4:	83 ec 04             	sub    esp,0x4
c00286b7:	db 1c 24             	fistp  DWORD PTR [esp]
c00286ba:	58                   	pop    eax
c00286bb:	c3                   	ret    

c00286bc <lrintf>:
c00286bc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00286c0:	83 ec 04             	sub    esp,0x4
c00286c3:	db 1c 24             	fistp  DWORD PTR [esp]
c00286c6:	58                   	pop    eax
c00286c7:	c3                   	ret    

Disassembly of section .init:

c00286c8 <_init>:
c00286c8:	55                   	push   ebp
c00286c9:	89 e5                	mov    ebp,esp
c00286cb:	e8 48 7a fd ff       	call   c0000118 <frame_dummy>
c00286d0:	e8 63 e0 ff ff       	call   c0026738 <__do_global_ctors_aux>
c00286d5:	5d                   	pop    ebp
c00286d6:	c3                   	ret    

Disassembly of section .fini:

c00286d7 <_fini>:
c00286d7:	55                   	push   ebp
c00286d8:	89 e5                	mov    ebp,esp
c00286da:	e8 c9 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00286df:	5d                   	pop    ebp
c00286e0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00286e2 <Computer::~Computer()>:
c00286e2:	83 ec 0c             	sub    esp,0xc
c00286e5:	ba 28 a2 02 c0       	mov    edx,0xc002a228
c00286ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ee:	89 10                	mov    DWORD PTR [eax],edx
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	83 ec 0c             	sub    esp,0xc
c00286f7:	50                   	push   eax
c00286f8:	e8 79 bb fe ff       	call   c0014276 <Device::~Device()>
c00286fd:	83 c4 10             	add    esp,0x10
c0028700:	90                   	nop
c0028701:	83 c4 0c             	add    esp,0xc
c0028704:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028706 <Computer::~Computer()>:
c0028706:	83 ec 0c             	sub    esp,0xc
c0028709:	83 ec 0c             	sub    esp,0xc
c002870c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028710:	e8 cd ff ff ff       	call   c00286e2 <Computer::~Computer()>
c0028715:	83 c4 10             	add    esp,0x10
c0028718:	83 ec 08             	sub    esp,0x8
c002871b:	68 ec 01 00 00       	push   0x1ec
c0028720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028724:	e8 74 a7 fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028729:	83 c4 10             	add    esp,0x10
c002872c:	83 c4 0c             	add    esp,0xc
c002872f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028730 <idleCommon()>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	e8 1c 57 ff ff       	call   c001de54 <lockScheduler()>
c0028738:	e8 53 5a ff ff       	call   c001e190 <schedule()>
c002873d:	83 c4 0c             	add    esp,0xc
c0028740:	e9 11 57 ff ff       	jmp    c001de56 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028746 <LinkedList<UnixFile>::~LinkedList()>:
c0028746:	90                   	nop
c0028747:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028748 <LinkedList<UnixFile>::LinkedList()>:
c0028748:	83 ec 0c             	sub    esp,0xc
c002874b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028759:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002876b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028779:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028784:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002878b:	83 ec 0c             	sub    esp,0xc
c002878e:	68 fa a4 02 c0       	push   0xc002a4fa
c0028793:	e8 e5 a7 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0028798:	83 c4 10             	add    esp,0x10
c002879b:	90                   	nop
c002879c:	83 c4 0c             	add    esp,0xc
c002879f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00287a0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00287a0:	83 ec 0c             	sub    esp,0xc
c00287a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287a8:	75 10                	jne    c00287ba <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00287aa:	83 ec 0c             	sub    esp,0xc
c00287ad:	68 14 a5 02 c0       	push   0xc002a514
c00287b2:	e8 78 1e ff ff       	call   c001a62f <Krnl::panic(char const*)>
c00287b7:	83 c4 10             	add    esp,0x10
c00287ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287be:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c0:	85 c0                	test   eax,eax
c00287c2:	74 34                	je     c00287f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287cb:	85 c0                	test   eax,eax
c00287cd:	74 29                	je     c00287f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287f6:	eb 65                	jmp    c002885d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287fe:	85 c0                	test   eax,eax
c0028800:	75 4b                	jne    c002884d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028809:	85 c0                	test   eax,eax
c002880b:	75 40                	jne    c002884d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002880d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028811:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028815:	89 10                	mov    DWORD PTR [eax],edx
c0028817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002881f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028829:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028834:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028837:	85 c0                	test   eax,eax
c0028839:	74 22                	je     c002885d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002883b:	83 ec 0c             	sub    esp,0xc
c002883e:	68 36 a5 02 c0       	push   0xc002a536
c0028843:	e8 e7 1d ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028848:	83 c4 10             	add    esp,0x10
c002884b:	eb 10                	jmp    c002885d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002884d:	83 ec 0c             	sub    esp,0xc
c0028850:	68 40 a5 02 c0       	push   0xc002a540
c0028855:	e8 d5 1d ff ff       	call   c001a62f <Krnl::panic(char const*)>
c002885a:	83 c4 10             	add    esp,0x10
c002885d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028861:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028864:	8d 50 01             	lea    edx,[eax+0x1]
c0028867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002886e:	90                   	nop
c002886f:	83 c4 0c             	add    esp,0xc
c0028872:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028874 <LinkedList<UnixFile>::getFirstElement()>:
c0028874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028878:	8b 00                	mov    eax,DWORD PTR [eax]
c002887a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002887c <LinkedList<UnixFile>::removeFirst()>:
c002887c:	83 ec 0c             	sub    esp,0xc
c002887f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028883:	8b 00                	mov    eax,DWORD PTR [eax]
c0028885:	85 c0                	test   eax,eax
c0028887:	75 12                	jne    c002889b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028889:	83 ec 0c             	sub    esp,0xc
c002888c:	68 4c a5 02 c0       	push   0xc002a54c
c0028891:	e8 99 1d ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028896:	83 c4 10             	add    esp,0x10
c0028899:	eb 7e                	jmp    c0028919 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002889b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a5:	85 c0                	test   eax,eax
c00288a7:	74 10                	je     c00288b9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00288a9:	83 ec 0c             	sub    esp,0xc
c00288ac:	68 97 a5 02 c0       	push   0xc002a597
c00288b1:	e8 79 1d ff ff       	call   c001a62f <Krnl::panic(char const*)>
c00288b6:	83 c4 10             	add    esp,0x10
c00288b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c2:	85 c0                	test   eax,eax
c00288c4:	75 33                	jne    c00288f9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00288c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e2:	83 f8 01             	cmp    eax,0x1
c00288e5:	74 21                	je     c0028908 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288e7:	83 ec 0c             	sub    esp,0xc
c00288ea:	68 70 a5 02 c0       	push   0xc002a570
c00288ef:	e8 3b 1d ff ff       	call   c001a62f <Krnl::panic(char const*)>
c00288f4:	83 c4 10             	add    esp,0x10
c00288f7:	eb 0f                	jmp    c0028908 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028906:	89 10                	mov    DWORD PTR [eax],edx
c0028908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002890f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028916:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028919:	83 c4 0c             	add    esp,0xc
c002891c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002891e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002891e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028922:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028925:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028926 <DriverlessDevice::~DriverlessDevice()>:
c0028926:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c002892b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002892f:	89 10                	mov    DWORD PTR [eax],edx
c0028931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028935:	50                   	push   eax
c0028936:	e8 3b b9 fe ff       	call   c0014276 <Device::~Device()>
c002893b:	83 c4 04             	add    esp,0x4
c002893e:	90                   	nop
c002893f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028940 <DriverlessDevice::~DriverlessDevice()>:
c0028940:	83 ec 0c             	sub    esp,0xc
c0028943:	83 ec 0c             	sub    esp,0xc
c0028946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002894a:	e8 d7 ff ff ff       	call   c0028926 <DriverlessDevice::~DriverlessDevice()>
c002894f:	83 c4 10             	add    esp,0x10
c0028952:	83 ec 08             	sub    esp,0x8
c0028955:	68 58 01 00 00       	push   0x158
c002895a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002895e:	e8 3a a5 fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028963:	83 c4 10             	add    esp,0x10
c0028966:	83 c4 0c             	add    esp,0xc
c0028969:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002896a <LinkedList<Device>::addElement(Device*)>:
c002896a:	83 ec 0c             	sub    esp,0xc
c002896d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028972:	75 10                	jne    c0028984 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028974:	83 ec 0c             	sub    esp,0xc
c0028977:	68 14 a5 02 c0       	push   0xc002a514
c002897c:	e8 ae 1c ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028981:	83 c4 10             	add    esp,0x10
c0028984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028988:	8b 00                	mov    eax,DWORD PTR [eax]
c002898a:	85 c0                	test   eax,eax
c002898c:	74 3a                	je     c00289c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002898e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028992:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028995:	85 c0                	test   eax,eax
c0028997:	74 2f                	je     c00289c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289a4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00289aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289bc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289c6:	eb 68                	jmp    c0028a30 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ce:	85 c0                	test   eax,eax
c00289d0:	75 4e                	jne    c0028a20 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289d9:	85 c0                	test   eax,eax
c00289db:	75 43                	jne    c0028a20 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289e5:	89 10                	mov    DWORD PTR [eax],edx
c00289e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a0a:	85 c0                	test   eax,eax
c0028a0c:	74 22                	je     c0028a30 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a0e:	83 ec 0c             	sub    esp,0xc
c0028a11:	68 36 a5 02 c0       	push   0xc002a536
c0028a16:	e8 14 1c ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028a1b:	83 c4 10             	add    esp,0x10
c0028a1e:	eb 10                	jmp    c0028a30 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a20:	83 ec 0c             	sub    esp,0xc
c0028a23:	68 40 a5 02 c0       	push   0xc002a540
c0028a28:	e8 02 1c ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028a2d:	83 c4 10             	add    esp,0x10
c0028a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a37:	8d 50 01             	lea    edx,[eax+0x1]
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a41:	90                   	nop
c0028a42:	83 c4 0c             	add    esp,0xc
c0028a45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a46 <LinkedList<Device>::LinkedList()>:
c0028a46:	83 ec 0c             	sub    esp,0xc
c0028a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a82:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a89:	83 ec 0c             	sub    esp,0xc
c0028a8c:	68 fa a4 02 c0       	push   0xc002a4fa
c0028a91:	e8 e7 a4 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0028a96:	83 c4 10             	add    esp,0x10
c0028a99:	90                   	nop
c0028a9a:	83 c4 0c             	add    esp,0xc
c0028a9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aa4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aac:	85 c0                	test   eax,eax
c0028aae:	75 0e                	jne    c0028abe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ab7:	85 c0                	test   eax,eax
c0028ab9:	75 03                	jne    c0028abe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028abb:	b0 01                	mov    al,0x1
c0028abd:	c3                   	ret    
c0028abe:	b0 00                	mov    al,0x0
c0028ac0:	90                   	nop
c0028ac1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028ac2:	83 ec 0c             	sub    esp,0xc
c0028ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028acb:	85 c0                	test   eax,eax
c0028acd:	75 15                	jne    c0028ae4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028acf:	83 ec 0c             	sub    esp,0xc
c0028ad2:	68 4c a5 02 c0       	push   0xc002a54c
c0028ad7:	e8 53 1b ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028adc:	83 c4 10             	add    esp,0x10
c0028adf:	e9 88 00 00 00       	jmp    c0028b6c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aeb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028aee:	85 c0                	test   eax,eax
c0028af0:	0f 95 c0             	setne  al
c0028af3:	84 c0                	test   al,al
c0028af5:	74 10                	je     c0028b07 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028af7:	83 ec 0c             	sub    esp,0xc
c0028afa:	68 97 a5 02 c0       	push   0xc002a597
c0028aff:	e8 2b 1b ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028b04:	83 c4 10             	add    esp,0x10
c0028b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b0d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b10:	85 c0                	test   eax,eax
c0028b12:	0f 94 c0             	sete   al
c0028b15:	84 c0                	test   al,al
c0028b17:	74 33                	je     c0028b4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b35:	83 f8 01             	cmp    eax,0x1
c0028b38:	74 21                	je     c0028b5b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b3a:	83 ec 0c             	sub    esp,0xc
c0028b3d:	68 70 a5 02 c0       	push   0xc002a570
c0028b42:	e8 e8 1a ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028b47:	83 c4 10             	add    esp,0x10
c0028b4a:	eb 0f                	jmp    c0028b5b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b52:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b59:	89 10                	mov    DWORD PTR [eax],edx
c0028b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b62:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b6c:	83 c4 0c             	add    esp,0xc
c0028b6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b70:	83 ec 0c             	sub    esp,0xc
c0028b73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b78:	75 10                	jne    c0028b8a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b7a:	83 ec 0c             	sub    esp,0xc
c0028b7d:	68 14 a5 02 c0       	push   0xc002a514
c0028b82:	e8 a8 1a ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028b87:	83 c4 10             	add    esp,0x10
c0028b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b90:	85 c0                	test   eax,eax
c0028b92:	74 34                	je     c0028bc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b9b:	85 c0                	test   eax,eax
c0028b9d:	74 29                	je     c0028bc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ba6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028baa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bb5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bbf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bc6:	eb 65                	jmp    c0028c2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bce:	85 c0                	test   eax,eax
c0028bd0:	75 4b                	jne    c0028c1d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bd9:	85 c0                	test   eax,eax
c0028bdb:	75 40                	jne    c0028c1d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028be5:	89 10                	mov    DWORD PTR [eax],edx
c0028be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028beb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bf9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c07:	85 c0                	test   eax,eax
c0028c09:	74 22                	je     c0028c2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c0b:	83 ec 0c             	sub    esp,0xc
c0028c0e:	68 36 a5 02 c0       	push   0xc002a536
c0028c13:	e8 17 1a ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028c18:	83 c4 10             	add    esp,0x10
c0028c1b:	eb 10                	jmp    c0028c2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c1d:	83 ec 0c             	sub    esp,0xc
c0028c20:	68 40 a5 02 c0       	push   0xc002a540
c0028c25:	e8 05 1a ff ff       	call   c001a62f <Krnl::panic(char const*)>
c0028c2a:	83 c4 10             	add    esp,0x10
c0028c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c34:	8d 50 01             	lea    edx,[eax+0x1]
c0028c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c3e:	90                   	nop
c0028c3f:	83 c4 0c             	add    esp,0xc
c0028c42:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c44 <ACPI::~ACPI()>:
c0028c44:	83 ec 0c             	sub    esp,0xc
c0028c47:	ba d8 b7 02 c0       	mov    edx,0xc002b7d8
c0028c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c50:	89 10                	mov    DWORD PTR [eax],edx
c0028c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c56:	83 ec 0c             	sub    esp,0xc
c0028c59:	50                   	push   eax
c0028c5a:	e8 17 b6 fe ff       	call   c0014276 <Device::~Device()>
c0028c5f:	83 c4 10             	add    esp,0x10
c0028c62:	90                   	nop
c0028c63:	83 c4 0c             	add    esp,0xc
c0028c66:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c68 <ACPI::~ACPI()>:
c0028c68:	83 ec 0c             	sub    esp,0xc
c0028c6b:	83 ec 0c             	sub    esp,0xc
c0028c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c72:	e8 cd ff ff ff       	call   c0028c44 <ACPI::~ACPI()>
c0028c77:	83 c4 10             	add    esp,0x10
c0028c7a:	83 ec 08             	sub    esp,0x8
c0028c7d:	68 68 12 00 00       	push   0x1268
c0028c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c86:	e8 12 a2 fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028c8b:	83 c4 10             	add    esp,0x10
c0028c8e:	83 c4 0c             	add    esp,0xc
c0028c91:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c92 <CPU::~CPU()>:
c0028c92:	83 ec 0c             	sub    esp,0xc
c0028c95:	ba c8 bb 02 c0       	mov    edx,0xc002bbc8
c0028c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9e:	89 10                	mov    DWORD PTR [eax],edx
c0028ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca4:	83 ec 0c             	sub    esp,0xc
c0028ca7:	50                   	push   eax
c0028ca8:	e8 c9 b5 fe ff       	call   c0014276 <Device::~Device()>
c0028cad:	83 c4 10             	add    esp,0x10
c0028cb0:	90                   	nop
c0028cb1:	83 c4 0c             	add    esp,0xc
c0028cb4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028cb6 <CPU::~CPU()>:
c0028cb6:	83 ec 0c             	sub    esp,0xc
c0028cb9:	83 ec 0c             	sub    esp,0xc
c0028cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc0:	e8 cd ff ff ff       	call   c0028c92 <CPU::~CPU()>
c0028cc5:	83 c4 10             	add    esp,0x10
c0028cc8:	83 ec 08             	sub    esp,0x8
c0028ccb:	68 98 11 00 00       	push   0x1198
c0028cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd4:	e8 c4 a1 fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028cd9:	83 c4 10             	add    esp,0x10
c0028cdc:	83 c4 0c             	add    esp,0xc
c0028cdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028ce0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028ce0:	90                   	nop
c0028ce1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028ce2 <ThreadControlBlock::ThreadControlBlock()>:
c0028ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cfc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d07:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d12:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d1a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d1e:	90                   	nop
c0028d1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d63:	83 ec 0c             	sub    esp,0xc
c0028d66:	68 fa a4 02 c0       	push   0xc002a4fa
c0028d6b:	e8 0d a2 fe ff       	call   c0012f7d <Dbg::kprintf(char const*, ...)>
c0028d70:	83 c4 10             	add    esp,0x10
c0028d73:	90                   	nop
c0028d74:	83 c4 0c             	add    esp,0xc
c0028d77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d78 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d7f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d80 <Vm::_FPUState::_FPUState()>:
c0028d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d84:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d8b:	90                   	nop
c0028d8c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d8e <PCI::~PCI()>:
c0028d8e:	83 ec 0c             	sub    esp,0xc
c0028d91:	ba bc cc 02 c0       	mov    edx,0xc002ccbc
c0028d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9a:	89 10                	mov    DWORD PTR [eax],edx
c0028d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da0:	83 ec 0c             	sub    esp,0xc
c0028da3:	50                   	push   eax
c0028da4:	e8 a5 ae fe ff       	call   c0013c4e <Bus::~Bus()>
c0028da9:	83 c4 10             	add    esp,0x10
c0028dac:	90                   	nop
c0028dad:	83 c4 0c             	add    esp,0xc
c0028db0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028db2 <PCI::~PCI()>:
c0028db2:	83 ec 0c             	sub    esp,0xc
c0028db5:	83 ec 0c             	sub    esp,0xc
c0028db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dbc:	e8 cd ff ff ff       	call   c0028d8e <PCI::~PCI()>
c0028dc1:	83 c4 10             	add    esp,0x10
c0028dc4:	83 ec 08             	sub    esp,0x8
c0028dc7:	68 58 01 00 00       	push   0x158
c0028dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd0:	e8 c8 a0 fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028dd5:	83 c4 10             	add    esp,0x10
c0028dd8:	83 c4 0c             	add    esp,0xc
c0028ddb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028ddc <IDE::~IDE()>:
c0028ddc:	83 ec 0c             	sub    esp,0xc
c0028ddf:	ba 20 cf 02 c0       	mov    edx,0xc002cf20
c0028de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de8:	89 10                	mov    DWORD PTR [eax],edx
c0028dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dee:	83 ec 0c             	sub    esp,0xc
c0028df1:	50                   	push   eax
c0028df2:	e8 6f b9 fe ff       	call   c0014766 <HardDiskController::~HardDiskController()>
c0028df7:	83 c4 10             	add    esp,0x10
c0028dfa:	90                   	nop
c0028dfb:	83 c4 0c             	add    esp,0xc
c0028dfe:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e00 <IDE::~IDE()>:
c0028e00:	83 ec 0c             	sub    esp,0xc
c0028e03:	83 ec 0c             	sub    esp,0xc
c0028e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0a:	e8 cd ff ff ff       	call   c0028ddc <IDE::~IDE()>
c0028e0f:	83 c4 10             	add    esp,0x10
c0028e12:	83 ec 08             	sub    esp,0x8
c0028e15:	68 70 02 00 00       	push   0x270
c0028e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e1e:	e8 7a a0 fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028e23:	83 c4 10             	add    esp,0x10
c0028e26:	83 c4 0c             	add    esp,0xc
c0028e29:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e2a <SATABus::~SATABus()>:
c0028e2a:	83 ec 0c             	sub    esp,0xc
c0028e2d:	ba 00 d0 02 c0       	mov    edx,0xc002d000
c0028e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e36:	89 10                	mov    DWORD PTR [eax],edx
c0028e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3c:	83 ec 0c             	sub    esp,0xc
c0028e3f:	50                   	push   eax
c0028e40:	e8 21 b9 fe ff       	call   c0014766 <HardDiskController::~HardDiskController()>
c0028e45:	83 c4 10             	add    esp,0x10
c0028e48:	90                   	nop
c0028e49:	83 c4 0c             	add    esp,0xc
c0028e4c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e4e <SATABus::~SATABus()>:
c0028e4e:	83 ec 0c             	sub    esp,0xc
c0028e51:	83 ec 0c             	sub    esp,0xc
c0028e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e58:	e8 cd ff ff ff       	call   c0028e2a <SATABus::~SATABus()>
c0028e5d:	83 c4 10             	add    esp,0x10
c0028e60:	83 ec 08             	sub    esp,0x8
c0028e63:	68 64 01 00 00       	push   0x164
c0028e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e6c:	e8 2c a0 fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028e71:	83 c4 10             	add    esp,0x10
c0028e74:	83 c4 0c             	add    esp,0xc
c0028e77:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e78 <ATA::~ATA()>:
c0028e78:	83 ec 0c             	sub    esp,0xc
c0028e7b:	ba 4c d0 02 c0       	mov    edx,0xc002d04c
c0028e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e84:	89 10                	mov    DWORD PTR [eax],edx
c0028e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8a:	83 ec 0c             	sub    esp,0xc
c0028e8d:	50                   	push   eax
c0028e8e:	e8 c5 b9 fe ff       	call   c0014858 <PhysicalDisk::~PhysicalDisk()>
c0028e93:	83 c4 10             	add    esp,0x10
c0028e96:	90                   	nop
c0028e97:	83 c4 0c             	add    esp,0xc
c0028e9a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e9c <ATA::~ATA()>:
c0028e9c:	83 ec 0c             	sub    esp,0xc
c0028e9f:	83 ec 0c             	sub    esp,0xc
c0028ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea6:	e8 cd ff ff ff       	call   c0028e78 <ATA::~ATA()>
c0028eab:	83 c4 10             	add    esp,0x10
c0028eae:	83 ec 08             	sub    esp,0x8
c0028eb1:	68 7c 01 00 00       	push   0x17c
c0028eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eba:	e8 de 9f fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028ebf:	83 c4 10             	add    esp,0x10
c0028ec2:	83 c4 0c             	add    esp,0xc
c0028ec5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028ec6 <ATAPI::~ATAPI()>:
c0028ec6:	83 ec 0c             	sub    esp,0xc
c0028ec9:	ba 84 d0 02 c0       	mov    edx,0xc002d084
c0028ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed2:	89 10                	mov    DWORD PTR [eax],edx
c0028ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed8:	83 ec 0c             	sub    esp,0xc
c0028edb:	50                   	push   eax
c0028edc:	e8 77 b9 fe ff       	call   c0014858 <PhysicalDisk::~PhysicalDisk()>
c0028ee1:	83 c4 10             	add    esp,0x10
c0028ee4:	90                   	nop
c0028ee5:	83 c4 0c             	add    esp,0xc
c0028ee8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028eea <ATAPI::~ATAPI()>:
c0028eea:	83 ec 0c             	sub    esp,0xc
c0028eed:	83 ec 0c             	sub    esp,0xc
c0028ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef4:	e8 cd ff ff ff       	call   c0028ec6 <ATAPI::~ATAPI()>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	83 ec 08             	sub    esp,0x8
c0028eff:	68 80 01 00 00       	push   0x180
c0028f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f08:	e8 90 9f fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028f0d:	83 c4 10             	add    esp,0x10
c0028f10:	83 c4 0c             	add    esp,0xc
c0028f13:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f14 <SATA::~SATA()>:
c0028f14:	83 ec 0c             	sub    esp,0xc
c0028f17:	ba 38 d1 02 c0       	mov    edx,0xc002d138
c0028f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f20:	89 10                	mov    DWORD PTR [eax],edx
c0028f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f26:	83 ec 0c             	sub    esp,0xc
c0028f29:	50                   	push   eax
c0028f2a:	e8 29 b9 fe ff       	call   c0014858 <PhysicalDisk::~PhysicalDisk()>
c0028f2f:	83 c4 10             	add    esp,0x10
c0028f32:	90                   	nop
c0028f33:	83 c4 0c             	add    esp,0xc
c0028f36:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f38 <SATA::~SATA()>:
c0028f38:	83 ec 0c             	sub    esp,0xc
c0028f3b:	83 ec 0c             	sub    esp,0xc
c0028f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f42:	e8 cd ff ff ff       	call   c0028f14 <SATA::~SATA()>
c0028f47:	83 c4 10             	add    esp,0x10
c0028f4a:	83 ec 08             	sub    esp,0x8
c0028f4d:	68 7c 01 00 00       	push   0x17c
c0028f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f56:	e8 42 9f fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028f5b:	83 c4 10             	add    esp,0x10
c0028f5e:	83 c4 0c             	add    esp,0xc
c0028f61:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f62 <SATAPI::~SATAPI()>:
c0028f62:	83 ec 0c             	sub    esp,0xc
c0028f65:	ba 14 d2 02 c0       	mov    edx,0xc002d214
c0028f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6e:	89 10                	mov    DWORD PTR [eax],edx
c0028f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f74:	83 ec 0c             	sub    esp,0xc
c0028f77:	50                   	push   eax
c0028f78:	e8 db b8 fe ff       	call   c0014858 <PhysicalDisk::~PhysicalDisk()>
c0028f7d:	83 c4 10             	add    esp,0x10
c0028f80:	90                   	nop
c0028f81:	83 c4 0c             	add    esp,0xc
c0028f84:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f86 <SATAPI::~SATAPI()>:
c0028f86:	83 ec 0c             	sub    esp,0xc
c0028f89:	83 ec 0c             	sub    esp,0xc
c0028f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f90:	e8 cd ff ff ff       	call   c0028f62 <SATAPI::~SATAPI()>
c0028f95:	83 c4 10             	add    esp,0x10
c0028f98:	83 ec 08             	sub    esp,0x8
c0028f9b:	68 80 01 00 00       	push   0x180
c0028fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa4:	e8 f4 9e fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028fa9:	83 c4 10             	add    esp,0x10
c0028fac:	83 c4 0c             	add    esp,0xc
c0028faf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028fb0 <AVX::~AVX()>:
c0028fb0:	83 ec 0c             	sub    esp,0xc
c0028fb3:	ba 54 d2 02 c0       	mov    edx,0xc002d254
c0028fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbc:	89 10                	mov    DWORD PTR [eax],edx
c0028fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc2:	83 ec 0c             	sub    esp,0xc
c0028fc5:	50                   	push   eax
c0028fc6:	e8 11 b9 fe ff       	call   c00148dc <FPU::~FPU()>
c0028fcb:	83 c4 10             	add    esp,0x10
c0028fce:	90                   	nop
c0028fcf:	83 c4 0c             	add    esp,0xc
c0028fd2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028fd4 <AVX::~AVX()>:
c0028fd4:	83 ec 0c             	sub    esp,0xc
c0028fd7:	83 ec 0c             	sub    esp,0xc
c0028fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fde:	e8 cd ff ff ff       	call   c0028fb0 <AVX::~AVX()>
c0028fe3:	83 c4 10             	add    esp,0x10
c0028fe6:	83 ec 08             	sub    esp,0x8
c0028fe9:	68 58 01 00 00       	push   0x158
c0028fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff2:	e8 a6 9e fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0028ff7:	83 c4 10             	add    esp,0x10
c0028ffa:	83 c4 0c             	add    esp,0xc
c0028ffd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028ffe <MMX::~MMX()>:
c0028ffe:	83 ec 0c             	sub    esp,0xc
c0029001:	ba 94 d2 02 c0       	mov    edx,0xc002d294
c0029006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900a:	89 10                	mov    DWORD PTR [eax],edx
c002900c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029010:	83 ec 0c             	sub    esp,0xc
c0029013:	50                   	push   eax
c0029014:	e8 c3 b8 fe ff       	call   c00148dc <FPU::~FPU()>
c0029019:	83 c4 10             	add    esp,0x10
c002901c:	90                   	nop
c002901d:	83 c4 0c             	add    esp,0xc
c0029020:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029022 <MMX::~MMX()>:
c0029022:	83 ec 0c             	sub    esp,0xc
c0029025:	83 ec 0c             	sub    esp,0xc
c0029028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902c:	e8 cd ff ff ff       	call   c0028ffe <MMX::~MMX()>
c0029031:	83 c4 10             	add    esp,0x10
c0029034:	83 ec 08             	sub    esp,0x8
c0029037:	68 58 01 00 00       	push   0x158
c002903c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029040:	e8 58 9e fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0029045:	83 c4 10             	add    esp,0x10
c0029048:	83 c4 0c             	add    esp,0xc
c002904b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002904c <SSE::~SSE()>:
c002904c:	83 ec 0c             	sub    esp,0xc
c002904f:	ba d4 d2 02 c0       	mov    edx,0xc002d2d4
c0029054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029058:	89 10                	mov    DWORD PTR [eax],edx
c002905a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905e:	83 ec 0c             	sub    esp,0xc
c0029061:	50                   	push   eax
c0029062:	e8 75 b8 fe ff       	call   c00148dc <FPU::~FPU()>
c0029067:	83 c4 10             	add    esp,0x10
c002906a:	90                   	nop
c002906b:	83 c4 0c             	add    esp,0xc
c002906e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029070 <SSE::~SSE()>:
c0029070:	83 ec 0c             	sub    esp,0xc
c0029073:	83 ec 0c             	sub    esp,0xc
c0029076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907a:	e8 cd ff ff ff       	call   c002904c <SSE::~SSE()>
c002907f:	83 c4 10             	add    esp,0x10
c0029082:	83 ec 08             	sub    esp,0x8
c0029085:	68 58 01 00 00       	push   0x158
c002908a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002908e:	e8 0a 9e fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0029093:	83 c4 10             	add    esp,0x10
c0029096:	83 c4 0c             	add    esp,0xc
c0029099:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002909a <x87::~x87()>:
c002909a:	83 ec 0c             	sub    esp,0xc
c002909d:	ba 14 d3 02 c0       	mov    edx,0xc002d314
c00290a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a6:	89 10                	mov    DWORD PTR [eax],edx
c00290a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ac:	83 ec 0c             	sub    esp,0xc
c00290af:	50                   	push   eax
c00290b0:	e8 27 b8 fe ff       	call   c00148dc <FPU::~FPU()>
c00290b5:	83 c4 10             	add    esp,0x10
c00290b8:	90                   	nop
c00290b9:	83 c4 0c             	add    esp,0xc
c00290bc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00290be <x87::~x87()>:
c00290be:	83 ec 0c             	sub    esp,0xc
c00290c1:	83 ec 0c             	sub    esp,0xc
c00290c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c8:	e8 cd ff ff ff       	call   c002909a <x87::~x87()>
c00290cd:	83 c4 10             	add    esp,0x10
c00290d0:	83 ec 08             	sub    esp,0x8
c00290d3:	68 58 01 00 00       	push   0x158
c00290d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290dc:	e8 bc 9d fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00290e1:	83 c4 10             	add    esp,0x10
c00290e4:	83 c4 0c             	add    esp,0xc
c00290e7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290e8 <IOAPIC::~IOAPIC()>:
c00290e8:	83 ec 0c             	sub    esp,0xc
c00290eb:	ba 6c d4 02 c0       	mov    edx,0xc002d46c
c00290f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f4:	89 10                	mov    DWORD PTR [eax],edx
c00290f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fa:	83 ec 0c             	sub    esp,0xc
c00290fd:	50                   	push   eax
c00290fe:	e8 73 b1 fe ff       	call   c0014276 <Device::~Device()>
c0029103:	83 c4 10             	add    esp,0x10
c0029106:	90                   	nop
c0029107:	83 c4 0c             	add    esp,0xc
c002910a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002910c <IOAPIC::~IOAPIC()>:
c002910c:	83 ec 0c             	sub    esp,0xc
c002910f:	83 ec 0c             	sub    esp,0xc
c0029112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029116:	e8 cd ff ff ff       	call   c00290e8 <IOAPIC::~IOAPIC()>
c002911b:	83 c4 10             	add    esp,0x10
c002911e:	83 ec 08             	sub    esp,0x8
c0029121:	68 68 01 00 00       	push   0x168
c0029126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002912a:	e8 6e 9d fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c002912f:	83 c4 10             	add    esp,0x10
c0029132:	83 c4 0c             	add    esp,0xc
c0029135:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029136 <APIC::~APIC()>:
c0029136:	83 ec 0c             	sub    esp,0xc
c0029139:	ba 24 d4 02 c0       	mov    edx,0xc002d424
c002913e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029142:	89 10                	mov    DWORD PTR [eax],edx
c0029144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029148:	83 ec 0c             	sub    esp,0xc
c002914b:	50                   	push   eax
c002914c:	e8 55 bc fe ff       	call   c0014da6 <InterruptController::~InterruptController()>
c0029151:	83 c4 10             	add    esp,0x10
c0029154:	90                   	nop
c0029155:	83 c4 0c             	add    esp,0xc
c0029158:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002915a <APIC::~APIC()>:
c002915a:	83 ec 0c             	sub    esp,0xc
c002915d:	83 ec 0c             	sub    esp,0xc
c0029160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029164:	e8 cd ff ff ff       	call   c0029136 <APIC::~APIC()>
c0029169:	83 c4 10             	add    esp,0x10
c002916c:	83 ec 08             	sub    esp,0x8
c002916f:	68 58 21 00 00       	push   0x2158
c0029174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029178:	e8 20 9d fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c002917d:	83 c4 10             	add    esp,0x10
c0029180:	83 c4 0c             	add    esp,0xc
c0029183:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029184 <PIC::~PIC()>:
c0029184:	83 ec 0c             	sub    esp,0xc
c0029187:	ba bc d4 02 c0       	mov    edx,0xc002d4bc
c002918c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029190:	89 10                	mov    DWORD PTR [eax],edx
c0029192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029196:	83 ec 0c             	sub    esp,0xc
c0029199:	50                   	push   eax
c002919a:	e8 07 bc fe ff       	call   c0014da6 <InterruptController::~InterruptController()>
c002919f:	83 c4 10             	add    esp,0x10
c00291a2:	90                   	nop
c00291a3:	83 c4 0c             	add    esp,0xc
c00291a6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00291a8 <PIC::~PIC()>:
c00291a8:	83 ec 0c             	sub    esp,0xc
c00291ab:	83 ec 0c             	sub    esp,0xc
c00291ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b2:	e8 cd ff ff ff       	call   c0029184 <PIC::~PIC()>
c00291b7:	83 c4 10             	add    esp,0x10
c00291ba:	83 ec 08             	sub    esp,0x8
c00291bd:	68 58 21 00 00       	push   0x2158
c00291c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c6:	e8 d2 9c fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c00291cb:	83 c4 10             	add    esp,0x10
c00291ce:	83 c4 0c             	add    esp,0xc
c00291d1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00291d2 <APICTimer::~APICTimer()>:
c00291d2:	83 ec 0c             	sub    esp,0xc
c00291d5:	ba 10 d5 02 c0       	mov    edx,0xc002d510
c00291da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291de:	89 10                	mov    DWORD PTR [eax],edx
c00291e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e4:	83 ec 0c             	sub    esp,0xc
c00291e7:	50                   	push   eax
c00291e8:	e8 15 db fe ff       	call   c0016d02 <Timer::~Timer()>
c00291ed:	83 c4 10             	add    esp,0x10
c00291f0:	90                   	nop
c00291f1:	83 c4 0c             	add    esp,0xc
c00291f4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291f6 <APICTimer::~APICTimer()>:
c00291f6:	83 ec 0c             	sub    esp,0xc
c00291f9:	83 ec 0c             	sub    esp,0xc
c00291fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029200:	e8 cd ff ff ff       	call   c00291d2 <APICTimer::~APICTimer()>
c0029205:	83 c4 10             	add    esp,0x10
c0029208:	83 ec 08             	sub    esp,0x8
c002920b:	68 60 01 00 00       	push   0x160
c0029210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029214:	e8 84 9c fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0029219:	83 c4 10             	add    esp,0x10
c002921c:	83 c4 0c             	add    esp,0xc
c002921f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029220 <PIT::~PIT()>:
c0029220:	83 ec 0c             	sub    esp,0xc
c0029223:	ba 60 d5 02 c0       	mov    edx,0xc002d560
c0029228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922c:	89 10                	mov    DWORD PTR [eax],edx
c002922e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029232:	83 ec 0c             	sub    esp,0xc
c0029235:	50                   	push   eax
c0029236:	e8 c7 da fe ff       	call   c0016d02 <Timer::~Timer()>
c002923b:	83 c4 10             	add    esp,0x10
c002923e:	90                   	nop
c002923f:	83 c4 0c             	add    esp,0xc
c0029242:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029244 <PIT::~PIT()>:
c0029244:	83 ec 0c             	sub    esp,0xc
c0029247:	83 ec 0c             	sub    esp,0xc
c002924a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002924e:	e8 cd ff ff ff       	call   c0029220 <PIT::~PIT()>
c0029253:	83 c4 10             	add    esp,0x10
c0029256:	83 ec 08             	sub    esp,0x8
c0029259:	68 5c 01 00 00       	push   0x15c
c002925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029262:	e8 36 9c fe ff       	call   c0012e9d <operator delete(void*, unsigned long)>
c0029267:	83 c4 10             	add    esp,0x10
c002926a:	83 c4 0c             	add    esp,0xc
c002926d:	c3                   	ret    
