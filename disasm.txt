
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 08 64 01 00       	call   c0016428 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a4 47 03 c0       	mov    eax,0xc00347a4
c0000025:	3d a4 47 03 c0       	cmp    eax,0xc00347a4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a4 47 03 c0       	push   0xc00347a4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a4 47 03 c0       	mov    eax,0xc00347a4
c0000051:	2d a4 47 03 c0       	sub    eax,0xc00347a4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a4 47 03 c0       	push   0xc00347a4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 5c f3 02 c0       	mov    ebx,0xc002f35c
c0000097:	81 eb 58 f3 02 c0    	sub    ebx,0xc002f358
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 58 f3 02 c0       	mov    esi,0xc002f358
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a4 47 03 c0       	push   0xc00347a4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 a4 47 03 c0       	push   0xc00347a4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 0f 48 02 00       	call   c0024abc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 20 8d 01 00       	call   c0018fe5 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ed 47 02 00       	call   c0024abc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 fa 4c 02 00       	call   c0024fe8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 9d 51 02 00       	call   c0025494 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 c7 fe 01 00       	jmp    c0020246 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 f3 02 c0 02 	test   BYTE PTR [edx-0x3ffd0ca0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 f3 02 c0 01 	test   BYTE PTR [edx-0x3ffd0ca0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 f3 02 c0 08 	test   BYTE PTR [edx-0x3ffd0ca0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 f3 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0ca0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 f3 02 c0 01 	test   BYTE PTR [edx-0x3ffd0ca0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	83 ec 0c             	sub    esp,0xc
c0000c3f:	83 ec 0c             	sub    esp,0xc
c0000c42:	68 64 f4 02 c0       	push   0xc002f464
c0000c47:	e8 50 11 02 00       	call   c0021d9c <KeCPuts>
c0000c4c:	83 c4 10             	add    esp,0x10
c0000c4f:	90                   	nop
c0000c50:	83 c4 0c             	add    esp,0xc
c0000c53:	c3                   	ret    

c0000c54 <tcpip_callback_with_block>:
c0000c54:	83 ec 0c             	sub    esp,0xc
c0000c57:	83 ec 0c             	sub    esp,0xc
c0000c5a:	68 9f f4 02 c0       	push   0xc002f49f
c0000c5f:	e8 20 11 02 00       	call   c0021d84 <KeCPanic>
c0000c64:	83 c4 10             	add    esp,0x10
c0000c67:	90                   	nop
c0000c68:	83 c4 0c             	add    esp,0xc
c0000c6b:	c3                   	ret    

c0000c6c <sys_sem_new>:
c0000c6c:	83 ec 1c             	sub    esp,0x1c
c0000c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c7c:	83 ec 08             	sub    esp,0x8
c0000c7f:	50                   	push   eax
c0000c80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c84:	e8 3b 10 02 00       	call   c0021cc4 <KeNetCreateSemaphore>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	b0 00                	mov    al,0x0
c0000c8e:	83 c4 1c             	add    esp,0x1c
c0000c91:	c3                   	ret    
c0000c92:	66 90                	xchg   ax,ax

c0000c94 <sys_sem_free>:
c0000c94:	83 ec 0c             	sub    esp,0xc
c0000c97:	83 ec 0c             	sub    esp,0xc
c0000c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c9e:	e8 65 10 02 00       	call   c0021d08 <KeNetFreeSemaphore>
c0000ca3:	83 c4 10             	add    esp,0x10
c0000ca6:	90                   	nop
c0000ca7:	83 c4 0c             	add    esp,0xc
c0000caa:	c3                   	ret    
c0000cab:	90                   	nop

c0000cac <sys_sem_signal>:
c0000cac:	83 ec 0c             	sub    esp,0xc
c0000caf:	83 ec 0c             	sub    esp,0xc
c0000cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb6:	e8 69 10 02 00       	call   c0021d24 <KeNetSignalSemaphore>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	90                   	nop
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_arch_sem_wait>:
c0000cc4:	83 ec 0c             	sub    esp,0xc
c0000cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ccb:	83 ec 08             	sub    esp,0x8
c0000cce:	50                   	push   eax
c0000ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd3:	e8 68 10 02 00       	call   c0021d40 <KeNetWaitSemaphore>
c0000cd8:	83 c4 10             	add    esp,0x10
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_mbox_new>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	68 b9 f4 02 c0       	push   0xc002f4b9
c0000ceb:	e8 94 10 02 00       	call   c0021d84 <KeCPanic>
c0000cf0:	83 c4 10             	add    esp,0x10
c0000cf3:	b0 00                	mov    al,0x0
c0000cf5:	83 c4 0c             	add    esp,0xc
c0000cf8:	c3                   	ret    
c0000cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0000cfc <sys_mbox_free>:
c0000cfc:	83 ec 0c             	sub    esp,0xc
c0000cff:	83 ec 0c             	sub    esp,0xc
c0000d02:	68 c6 f4 02 c0       	push   0xc002f4c6
c0000d07:	e8 78 10 02 00       	call   c0021d84 <KeCPanic>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	90                   	nop
c0000d10:	83 c4 0c             	add    esp,0xc
c0000d13:	c3                   	ret    

c0000d14 <sys_mbox_post>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 d4 f4 02 c0       	push   0xc002f4d4
c0000d1f:	e8 60 10 02 00       	call   c0021d84 <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	90                   	nop
c0000d28:	83 c4 0c             	add    esp,0xc
c0000d2b:	c3                   	ret    

c0000d2c <sys_arch_mbox_fetch>:
c0000d2c:	83 ec 0c             	sub    esp,0xc
c0000d2f:	83 ec 0c             	sub    esp,0xc
c0000d32:	68 e2 f4 02 c0       	push   0xc002f4e2
c0000d37:	e8 48 10 02 00       	call   c0021d84 <KeCPanic>
c0000d3c:	83 c4 10             	add    esp,0x10
c0000d3f:	b8 00 00 00 00       	mov    eax,0x0
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_arch_mbox_tryfetch>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 f6 f4 02 c0       	push   0xc002f4f6
c0000d53:	e8 2c 10 02 00       	call   c0021d84 <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	b8 00 00 00 00       	mov    eax,0x0
c0000d60:	83 c4 0c             	add    esp,0xc
c0000d63:	c3                   	ret    

c0000d64 <sys_mbox_trypost>:
c0000d64:	83 ec 0c             	sub    esp,0xc
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	68 0d f5 02 c0       	push   0xc002f50d
c0000d6f:	e8 10 10 02 00       	call   c0021d84 <KeCPanic>
c0000d74:	83 c4 10             	add    esp,0x10
c0000d77:	90                   	nop
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_thread_new>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 08             	sub    esp,0x8
c0000d82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d8a:	e8 d1 0f 02 00       	call   c0021d60 <KeNetCreateThread>
c0000d8f:	83 c4 10             	add    esp,0x10
c0000d92:	b8 00 00 00 00       	mov    eax,0x0
c0000d97:	83 c4 0c             	add    esp,0xc
c0000d9a:	c3                   	ret    
c0000d9b:	90                   	nop

c0000d9c <sys_init>:
c0000d9c:	90                   	nop
c0000d9d:	c3                   	ret    

c0000d9e <largebin_index>:
c0000d9e:	89 c2                	mov    edx,eax
c0000da0:	c1 ea 08             	shr    edx,0x8
c0000da3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000da9:	77 10                	ja     c0000dbb <largebin_index+0x1d>
c0000dab:	0f bd d2             	bsr    edx,edx
c0000dae:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000db1:	d3 e8                	shr    eax,cl
c0000db3:	83 e0 03             	and    eax,0x3
c0000db6:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dba:	c3                   	ret    
c0000dbb:	b8 5f 00 00 00       	mov    eax,0x5f
c0000dc0:	c3                   	ret    

c0000dc1 <malloc_init_state>:
c0000dc1:	53                   	push   ebx
c0000dc2:	8d 50 34             	lea    edx,[eax+0x34]
c0000dc5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000dcb:	89 d1                	mov    ecx,edx
c0000dcd:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000dd0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000dd3:	83 c2 08             	add    edx,0x8
c0000dd6:	39 da                	cmp    edx,ebx
c0000dd8:	75 f3                	jne    c0000dcd <malloc_init_state+0xc>
c0000dda:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ddc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000de6:	83 e2 03             	and    edx,0x3
c0000de9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000df3:	83 ca 48             	or     edx,0x48
c0000df6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e00:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e0a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e11:	89 10                	mov    DWORD PTR [eax],edx
c0000e13:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e16:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e20:	5b                   	pop    ebx
c0000e21:	c3                   	ret    

c0000e22 <malloc_consolidate>:
c0000e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e24:	85 d2                	test   edx,edx
c0000e26:	0f 84 d8 00 00 00    	je     c0000f04 <malloc_consolidate+0xe2>
c0000e2c:	55                   	push   ebp
c0000e2d:	83 e2 fd             	and    edx,0xfffffffd
c0000e30:	57                   	push   edi
c0000e31:	89 c5                	mov    ebp,eax
c0000e33:	56                   	push   esi
c0000e34:	8d 78 34             	lea    edi,[eax+0x34]
c0000e37:	53                   	push   ebx
c0000e38:	83 ec 10             	sub    esp,0x10
c0000e3b:	89 10                	mov    DWORD PTR [eax],edx
c0000e3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e41:	c1 ea 03             	shr    edx,0x3
c0000e44:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e48:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e4c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e4f:	85 d2                	test   edx,edx
c0000e51:	0f 84 98 00 00 00    	je     c0000eef <malloc_consolidate+0xcd>
c0000e57:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e5e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e61:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e68:	89 f9                	mov    ecx,edi
c0000e6a:	83 e1 fe             	and    ecx,0xfffffffe
c0000e6d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000e70:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000e73:	83 e3 fc             	and    ebx,0xfffffffc
c0000e76:	83 e7 01             	and    edi,0x1
c0000e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000e7c:	75 14                	jne    c0000e92 <malloc_consolidate+0x70>
c0000e7e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000e80:	29 fa                	sub    edx,edi
c0000e82:	01 f9                	add    ecx,edi
c0000e84:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e87:	89 fb                	mov    ebx,edi
c0000e89:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e8c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e8f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e92:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e95:	74 40                	je     c0000ed7 <malloc_consolidate+0xb5>
c0000e97:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e9a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e9d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ea1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ea4:	83 e7 01             	and    edi,0x1
c0000ea7:	75 0e                	jne    c0000eb7 <malloc_consolidate+0x95>
c0000ea9:	01 d9                	add    ecx,ebx
c0000eab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000eae:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000eb1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000eb4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eb7:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eba:	89 ce                	mov    esi,ecx
c0000ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ebf:	83 ce 01             	or     esi,0x1
c0000ec2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ec5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ec8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ecb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ecf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ed2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ed5:	eb 0c                	jmp    c0000ee3 <malloc_consolidate+0xc1>
c0000ed7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000eda:	83 c9 01             	or     ecx,0x1
c0000edd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ee7:	85 d2                	test   edx,edx
c0000ee9:	0f 85 6f ff ff ff    	jne    c0000e5e <malloc_consolidate+0x3c>
c0000eef:	83 c5 04             	add    ebp,0x4
c0000ef2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ef6:	0f 85 50 ff ff ff    	jne    c0000e4c <malloc_consolidate+0x2a>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	5d                   	pop    ebp
c0000f03:	c3                   	ret    
c0000f04:	e9 b8 fe ff ff       	jmp    c0000dc1 <malloc_init_state>

c0000f09 <dlfree>:
c0000f09:	57                   	push   edi
c0000f0a:	56                   	push   esi
c0000f0b:	53                   	push   ebx
c0000f0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000f10:	85 db                	test   ebx,ebx
c0000f12:	0f 84 e2 00 00 00    	je     c0000ffa <dlfree+0xf1>
c0000f18:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000f1b:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000f21:	89 f0                	mov    eax,esi
c0000f23:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000f26:	83 e0 fc             	and    eax,0xfffffffc
c0000f29:	39 c1                	cmp    ecx,eax
c0000f2b:	72 24                	jb     c0000f51 <dlfree+0x48>
c0000f2d:	83 c9 03             	or     ecx,0x3
c0000f30:	c1 e8 03             	shr    eax,0x3
c0000f33:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f39:	83 e8 02             	sub    eax,0x2
c0000f3c:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000f43:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000f45:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f4c:	e9 a9 00 00 00       	jmp    c0000ffa <dlfree+0xf1>
c0000f51:	83 e6 02             	and    esi,0x2
c0000f54:	0f 85 a0 00 00 00    	jne    c0000ffa <dlfree+0xf1>
c0000f5a:	83 c9 01             	or     ecx,0x1
c0000f5d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f60:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f66:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000f69:	83 e1 fc             	and    ecx,0xfffffffc
c0000f6c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000f70:	75 13                	jne    c0000f85 <dlfree+0x7c>
c0000f72:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000f75:	29 da                	sub    edx,ebx
c0000f77:	01 d8                	add    eax,ebx
c0000f79:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000f7c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000f7f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000f82:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000f85:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000f8b:	74 40                	je     c0000fcd <dlfree+0xc4>
c0000f8d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000f91:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000f94:	80 e3 01             	and    bl,0x1
c0000f97:	75 0e                	jne    c0000fa7 <dlfree+0x9e>
c0000f99:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f9c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000f9f:	01 c8                	add    eax,ecx
c0000fa1:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000fa4:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000fa7:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fad:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fb4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000fb7:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000fbd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000fc0:	89 c1                	mov    ecx,eax
c0000fc2:	83 c9 01             	or     ecx,0x1
c0000fc5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fcb:	eb 10                	jmp    c0000fdd <dlfree+0xd4>
c0000fcd:	01 c8                	add    eax,ecx
c0000fcf:	89 c1                	mov    ecx,eax
c0000fd1:	83 c9 01             	or     ecx,0x1
c0000fd4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fd7:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000fdd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000fe2:	76 16                	jbe    c0000ffa <dlfree+0xf1>
c0000fe4:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000feb:	74 0d                	je     c0000ffa <dlfree+0xf1>
c0000fed:	5b                   	pop    ebx
c0000fee:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000ff3:	5e                   	pop    esi
c0000ff4:	5f                   	pop    edi
c0000ff5:	e9 28 fe ff ff       	jmp    c0000e22 <malloc_consolidate>
c0000ffa:	5b                   	pop    ebx
c0000ffb:	5e                   	pop    esi
c0000ffc:	5f                   	pop    edi
c0000ffd:	c3                   	ret    

c0000ffe <sYSMALLOc>:
c0000ffe:	55                   	push   ebp
c0000fff:	57                   	push   edi
c0001000:	56                   	push   esi
c0001001:	53                   	push   ebx
c0001002:	89 d3                	mov    ebx,edx
c0001004:	83 ec 2c             	sub    esp,0x2c
c0001007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000100b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0001011:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0001014:	8d 42 ff             	lea    eax,[edx-0x1]
c0001017:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000101b:	74 1f                	je     c000103c <sYSMALLOc+0x3e>
c000101d:	89 d8                	mov    eax,ebx
c000101f:	e8 fe fd ff ff       	call   c0000e22 <malloc_consolidate>
c0001024:	83 ec 0c             	sub    esp,0xc
c0001027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000102b:	83 e8 07             	sub    eax,0x7
c000102e:	50                   	push   eax
c000102f:	e8 2d 02 00 00       	call   c0001261 <dlmalloc>
c0001034:	83 c4 10             	add    esp,0x10
c0001037:	e9 1d 02 00 00       	jmp    c0001259 <sYSMALLOc+0x25b>
c000103c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c000103f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0001045:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0001048:	83 e0 fc             	and    eax,0xfffffffc
c000104b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000104f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001053:	83 c0 10             	add    eax,0x10
c0001056:	01 c1                	add    ecx,eax
c0001058:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000105c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001063:	74 04                	je     c0001069 <sYSMALLOc+0x6b>
c0001065:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0001069:	f7 da                	neg    edx
c000106b:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c000106f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001073:	21 d1                	and    ecx,edx
c0001075:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0001079:	7f 07                	jg     c0001082 <sYSMALLOc+0x84>
c000107b:	31 c0                	xor    eax,eax
c000107d:	e9 d7 01 00 00       	jmp    c0001259 <sYSMALLOc+0x25b>
c0001082:	83 ec 0c             	sub    esp,0xc
c0001085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0001089:	e8 02 52 01 00       	call   c0016290 <sbrk>
c000108e:	83 c4 10             	add    esp,0x10
c0001091:	89 c6                	mov    esi,eax
c0001093:	83 f8 ff             	cmp    eax,0xffffffff
c0001096:	74 e3                	je     c000107b <sYSMALLOc+0x7d>
c0001098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000109c:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000109f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010a3:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c00010a9:	39 f1                	cmp    ecx,esi
c00010ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00010af:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c00010b5:	75 13                	jne    c00010ca <sYSMALLOc+0xcc>
c00010b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010bb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00010bf:	83 c8 01             	or     eax,0x1
c00010c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00010c5:	e9 37 01 00 00       	jmp    c0001201 <sYSMALLOc+0x203>
c00010ca:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010d0:	89 d5                	mov    ebp,edx
c00010d2:	83 e5 01             	and    ebp,0x1
c00010d5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010da:	0f 95 c0             	setne  al
c00010dd:	21 e8                	and    eax,ebp
c00010df:	39 f1                	cmp    ecx,esi
c00010e1:	76 12                	jbe    c00010f5 <sYSMALLOc+0xf7>
c00010e3:	85 c0                	test   eax,eax
c00010e5:	74 0e                	je     c00010f5 <sYSMALLOc+0xf7>
c00010e7:	83 e2 fe             	and    edx,0xfffffffe
c00010ea:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010f0:	e9 82 00 00 00       	jmp    c0001177 <sYSMALLOc+0x179>
c00010f5:	85 ed                	test   ebp,ebp
c00010f7:	74 7e                	je     c0001177 <sYSMALLOc+0x179>
c00010f9:	85 c0                	test   eax,eax
c00010fb:	74 0e                	je     c000110b <sYSMALLOc+0x10d>
c00010fd:	89 f0                	mov    eax,esi
c00010ff:	29 c8                	sub    eax,ecx
c0001101:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0001105:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000110b:	89 f2                	mov    edx,esi
c000110d:	83 e2 07             	and    edx,0x7
c0001110:	74 0c                	je     c000111e <sYSMALLOc+0x120>
c0001112:	b8 08 00 00 00       	mov    eax,0x8
c0001117:	29 d0                	sub    eax,edx
c0001119:	8d 2c 06             	lea    ebp,[esi+eax*1]
c000111c:	eb 04                	jmp    c0001122 <sYSMALLOc+0x124>
c000111e:	89 f5                	mov    ebp,esi
c0001120:	31 c0                	xor    eax,eax
c0001122:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001126:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000112a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000112e:	01 c1                	add    ecx,eax
c0001130:	83 ec 0c             	sub    esp,0xc
c0001133:	01 f1                	add    ecx,esi
c0001135:	01 ca                	add    edx,ecx
c0001137:	29 c8                	sub    eax,ecx
c0001139:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c000113d:	01 c2                	add    edx,eax
c000113f:	52                   	push   edx
c0001140:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001144:	e8 47 51 01 00       	call   c0016290 <sbrk>
c0001149:	83 c4 10             	add    esp,0x10
c000114c:	83 f8 ff             	cmp    eax,0xffffffff
c000114f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001153:	75 0f                	jne    c0001164 <sYSMALLOc+0x166>
c0001155:	83 ec 0c             	sub    esp,0xc
c0001158:	6a 00                	push   0x0
c000115a:	e8 31 51 01 00       	call   c0016290 <sbrk>
c000115f:	83 c4 10             	add    esp,0x10
c0001162:	eb 30                	jmp    c0001194 <sYSMALLOc+0x196>
c0001164:	39 c6                	cmp    esi,eax
c0001166:	76 33                	jbe    c000119b <sYSMALLOc+0x19d>
c0001168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000116c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001173:	01 f0                	add    eax,esi
c0001175:	eb 1d                	jmp    c0001194 <sYSMALLOc+0x196>
c0001177:	83 ec 0c             	sub    esp,0xc
c000117a:	89 f5                	mov    ebp,esi
c000117c:	6a 00                	push   0x0
c000117e:	e8 0d 51 01 00       	call   c0016290 <sbrk>
c0001183:	89 c2                	mov    edx,eax
c0001185:	29 f2                	sub    edx,esi
c0001187:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000118b:	83 c4 10             	add    esp,0x10
c000118e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001194:	31 d2                	xor    edx,edx
c0001196:	83 f8 ff             	cmp    eax,0xffffffff
c0001199:	74 66                	je     c0001201 <sYSMALLOc+0x203>
c000119b:	29 e8                	sub    eax,ebp
c000119d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00011a0:	01 d0                	add    eax,edx
c00011a2:	83 c8 01             	or     eax,0x1
c00011a5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00011a8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00011ae:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011b3:	74 4c                	je     c0001201 <sYSMALLOc+0x203>
c00011b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011b9:	83 e8 0c             	sub    eax,0xc
c00011bc:	83 e0 f8             	and    eax,0xfffffff8
c00011bf:	89 c2                	mov    edx,eax
c00011c1:	83 ca 01             	or     edx,0x1
c00011c4:	83 f8 0f             	cmp    eax,0xf
c00011c7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00011ca:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00011d2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00011da:	76 25                	jbe    c0001201 <sYSMALLOc+0x203>
c00011dc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011e2:	83 ec 0c             	sub    esp,0xc
c00011e5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011ef:	83 c7 08             	add    edi,0x8
c00011f2:	57                   	push   edi
c00011f3:	e8 11 fd ff ff       	call   c0000f09 <dlfree>
c00011f8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011fe:	83 c4 10             	add    esp,0x10
c0001201:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001207:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000120d:	73 06                	jae    c0001215 <sYSMALLOc+0x217>
c000120f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001215:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000121b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001221:	73 06                	jae    c0001229 <sYSMALLOc+0x22b>
c0001223:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001229:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000122c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000122f:	83 e2 fc             	and    edx,0xfffffffc
c0001232:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001236:	0f 82 3f fe ff ff    	jb     c000107b <sYSMALLOc+0x7d>
c000123c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001240:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001243:	29 fa                	sub    edx,edi
c0001245:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001248:	83 ca 01             	or     edx,0x1
c000124b:	89 fb                	mov    ebx,edi
c000124d:	83 c0 08             	add    eax,0x8
c0001250:	83 cb 01             	or     ebx,0x1
c0001253:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001256:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001259:	83 c4 2c             	add    esp,0x2c
c000125c:	5b                   	pop    ebx
c000125d:	5e                   	pop    esi
c000125e:	5f                   	pop    edi
c000125f:	5d                   	pop    ebp
c0001260:	c3                   	ret    

c0001261 <dlmalloc>:
c0001261:	55                   	push   ebp
c0001262:	57                   	push   edi
c0001263:	56                   	push   esi
c0001264:	53                   	push   ebx
c0001265:	83 ec 1c             	sub    esp,0x1c
c0001268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000126c:	83 f8 df             	cmp    eax,0xffffffdf
c000126f:	0f 87 70 03 00 00    	ja     c00015e5 <dlmalloc+0x384>
c0001275:	83 c0 0b             	add    eax,0xb
c0001278:	be 10 00 00 00       	mov    esi,0x10
c000127d:	83 f8 0f             	cmp    eax,0xf
c0001280:	76 05                	jbe    c0001287 <dlmalloc+0x26>
c0001282:	83 e0 f8             	and    eax,0xfffffff8
c0001285:	89 c6                	mov    esi,eax
c0001287:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c000128d:	f7 c7 01 00 00 00    	test   edi,0x1
c0001293:	75 17                	jne    c00012ac <dlmalloc+0x4b>
c0001295:	85 ff                	test   edi,edi
c0001297:	0f 85 05 03 00 00    	jne    c00015a2 <dlmalloc+0x341>
c000129d:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00012a2:	e8 7b fb ff ff       	call   c0000e22 <malloc_consolidate>
c00012a7:	e9 f6 02 00 00       	jmp    c00015a2 <dlmalloc+0x341>
c00012ac:	39 f7                	cmp    edi,esi
c00012ae:	72 1f                	jb     c00012cf <dlmalloc+0x6e>
c00012b0:	89 f2                	mov    edx,esi
c00012b2:	c1 ea 03             	shr    edx,0x3
c00012b5:	83 ea 02             	sub    edx,0x2
c00012b8:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c00012bf:	85 c0                	test   eax,eax
c00012c1:	74 0c                	je     c00012cf <dlmalloc+0x6e>
c00012c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012c6:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c00012cd:	eb 30                	jmp    c00012ff <dlmalloc+0x9e>
c00012cf:	89 f0                	mov    eax,esi
c00012d1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d7:	77 2e                	ja     c0001307 <dlmalloc+0xa6>
c00012d9:	c1 e8 03             	shr    eax,0x3
c00012dc:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c00012e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012e7:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012ea:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012ed:	39 c3                	cmp    ebx,eax
c00012ef:	74 2e                	je     c000131f <dlmalloc+0xbe>
c00012f1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012f4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012f9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012fc:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012ff:	83 c0 08             	add    eax,0x8
c0001302:	e9 e0 02 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c0001307:	e8 92 fa ff ff       	call   c0000d9e <largebin_index>
c000130c:	83 e7 02             	and    edi,0x2
c000130f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001313:	74 0a                	je     c000131f <dlmalloc+0xbe>
c0001315:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c000131a:	e8 03 fb ff ff       	call   c0000e22 <malloc_consolidate>
c000131f:	8d 46 10             	lea    eax,[esi+0x10]
c0001322:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001326:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c000132c:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c0001332:	0f 84 13 01 00 00    	je     c000144b <dlmalloc+0x1ea>
c0001338:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000133b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000133e:	83 e7 fc             	and    edi,0xfffffffc
c0001341:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001347:	77 4c                	ja     c0001395 <dlmalloc+0x134>
c0001349:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c000134e:	75 45                	jne    c0001395 <dlmalloc+0x134>
c0001350:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c0001356:	75 3d                	jne    c0001395 <dlmalloc+0x134>
c0001358:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000135c:	73 37                	jae    c0001395 <dlmalloc+0x134>
c000135e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001361:	89 fa                	mov    edx,edi
c0001363:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c0001368:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c000136d:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c0001372:	29 f2                	sub    edx,esi
c0001374:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c000137b:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c0001382:	83 ce 01             	or     esi,0x1
c0001385:	89 d1                	mov    ecx,edx
c0001387:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000138a:	83 c9 01             	or     ecx,0x1
c000138d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001390:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001393:	eb 15                	jmp    c00013aa <dlmalloc+0x149>
c0001395:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c000139a:	39 fe                	cmp    esi,edi
c000139c:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00013a3:	75 0d                	jne    c00013b2 <dlmalloc+0x151>
c00013a5:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00013aa:	8d 43 08             	lea    eax,[ebx+0x8]
c00013ad:	e9 35 02 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c00013b2:	89 f8                	mov    eax,edi
c00013b4:	81 ff ff 00 00 00    	cmp    edi,0xff
c00013ba:	77 19                	ja     c00013d5 <dlmalloc+0x174>
c00013bc:	c1 e8 03             	shr    eax,0x3
c00013bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c2:	83 c2 0d             	add    edx,0xd
c00013c5:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c00013cc:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c00013d3:	eb 46                	jmp    c000141b <dlmalloc+0x1ba>
c00013d5:	e8 c4 f9 ff ff       	call   c0000d9e <largebin_index>
c00013da:	8d 14 00             	lea    edx,[eax+eax*1]
c00013dd:	83 c2 0d             	add    edx,0xd
c00013e0:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c00013e7:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c00013ee:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013f1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013f5:	89 d5                	mov    ebp,edx
c00013f7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013fb:	74 1e                	je     c000141b <dlmalloc+0x1ba>
c00013fd:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001400:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001403:	77 12                	ja     c0001417 <dlmalloc+0x1b6>
c0001405:	83 cf 01             	or     edi,0x1
c0001408:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000140b:	76 05                	jbe    c0001412 <dlmalloc+0x1b1>
c000140d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001410:	eb f6                	jmp    c0001408 <dlmalloc+0x1a7>
c0001412:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001415:	eb 04                	jmp    c000141b <dlmalloc+0x1ba>
c0001417:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000141b:	89 c7                	mov    edi,eax
c000141d:	88 c1                	mov    cl,al
c000141f:	c1 ff 05             	sar    edi,0x5
c0001422:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001426:	bf 01 00 00 00       	mov    edi,0x1
c000142b:	d3 e7                	shl    edi,cl
c000142d:	89 f8                	mov    eax,edi
c000142f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001433:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c000143a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000143d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001440:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001443:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001446:	e9 db fe ff ff       	jmp    c0001326 <dlmalloc+0xc5>
c000144b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001451:	76 78                	jbe    c00014cb <dlmalloc+0x26a>
c0001453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001457:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c000145e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001461:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001464:	39 ca                	cmp    edx,ecx
c0001466:	74 63                	je     c00014cb <dlmalloc+0x26a>
c0001468:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000146b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000146e:	83 e3 fc             	and    ebx,0xfffffffc
c0001471:	39 de                	cmp    esi,ebx
c0001473:	77 52                	ja     c00014c7 <dlmalloc+0x266>
c0001475:	89 df                	mov    edi,ebx
c0001477:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000147a:	29 f7                	sub    edi,esi
c000147c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000147f:	01 d3                	add    ebx,edx
c0001481:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001484:	83 ff 0f             	cmp    edi,0xf
c0001487:	8d 42 08             	lea    eax,[edx+0x8]
c000148a:	77 09                	ja     c0001495 <dlmalloc+0x234>
c000148c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001490:	e9 52 01 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c0001495:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001498:	83 ce 01             	or     esi,0x1
c000149b:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c00014a1:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c00014a7:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c00014ae:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c00014b5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00014b8:	89 fa                	mov    edx,edi
c00014ba:	83 ca 01             	or     edx,0x1
c00014bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014c0:	89 3b                	mov    DWORD PTR [ebx],edi
c00014c2:	e9 20 01 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c00014c7:	89 c2                	mov    edx,eax
c00014c9:	eb 99                	jmp    c0001464 <dlmalloc+0x203>
c00014cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014cf:	b8 01 00 00 00       	mov    eax,0x1
c00014d4:	41                   	inc    ecx
c00014d5:	89 cb                	mov    ebx,ecx
c00014d7:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c00014de:	c1 eb 05             	shr    ebx,0x5
c00014e1:	d3 e0                	shl    eax,cl
c00014e3:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c00014ea:	39 f8                	cmp    eax,edi
c00014ec:	77 04                	ja     c00014f2 <dlmalloc+0x291>
c00014ee:	85 c0                	test   eax,eax
c00014f0:	75 26                	jne    c0001518 <dlmalloc+0x2b7>
c00014f2:	43                   	inc    ebx
c00014f3:	83 fb 02             	cmp    ebx,0x2
c00014f6:	0f 87 a6 00 00 00    	ja     c00015a2 <dlmalloc+0x341>
c00014fc:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001503:	85 ff                	test   edi,edi
c0001505:	74 eb                	je     c00014f2 <dlmalloc+0x291>
c0001507:	89 d8                	mov    eax,ebx
c0001509:	c1 e0 06             	shl    eax,0x6
c000150c:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001513:	b8 01 00 00 00       	mov    eax,0x1
c0001518:	85 f8                	test   eax,edi
c000151a:	75 07                	jne    c0001523 <dlmalloc+0x2c2>
c000151c:	83 c2 08             	add    edx,0x8
c000151f:	01 c0                	add    eax,eax
c0001521:	eb f5                	jmp    c0001518 <dlmalloc+0x2b7>
c0001523:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001526:	39 ca                	cmp    edx,ecx
c0001528:	75 14                	jne    c000153e <dlmalloc+0x2dd>
c000152a:	89 c1                	mov    ecx,eax
c000152c:	83 c2 08             	add    edx,0x8
c000152f:	f7 d1                	not    ecx
c0001531:	01 c0                	add    eax,eax
c0001533:	21 cf                	and    edi,ecx
c0001535:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c000153c:	eb ac                	jmp    c00014ea <dlmalloc+0x289>
c000153e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001541:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001544:	83 e0 fc             	and    eax,0xfffffffc
c0001547:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000154a:	89 c3                	mov    ebx,eax
c000154c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000154f:	29 f3                	sub    ebx,esi
c0001551:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001554:	83 fb 0f             	cmp    ebx,0xf
c0001557:	8d 41 08             	lea    eax,[ecx+0x8]
c000155a:	77 09                	ja     c0001565 <dlmalloc+0x304>
c000155c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001560:	e9 82 00 00 00       	jmp    c00015e7 <dlmalloc+0x386>
c0001565:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001568:	81 fe ff 00 00 00    	cmp    esi,0xff
c000156e:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c0001574:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c000157a:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c0001581:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c0001588:	77 06                	ja     c0001590 <dlmalloc+0x32f>
c000158a:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c0001590:	83 ce 01             	or     esi,0x1
c0001593:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001596:	89 d9                	mov    ecx,ebx
c0001598:	83 c9 01             	or     ecx,0x1
c000159b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000159e:	89 1a                	mov    DWORD PTR [edx],ebx
c00015a0:	eb 45                	jmp    c00015e7 <dlmalloc+0x386>
c00015a2:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c00015a7:	8d 4e 10             	lea    ecx,[esi+0x10]
c00015aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015ad:	83 e2 fc             	and    edx,0xfffffffc
c00015b0:	39 d1                	cmp    ecx,edx
c00015b2:	77 1e                	ja     c00015d2 <dlmalloc+0x371>
c00015b4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015b7:	89 f3                	mov    ebx,esi
c00015b9:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c00015bf:	83 cb 01             	or     ebx,0x1
c00015c2:	29 f2                	sub    edx,esi
c00015c4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c7:	83 ca 01             	or     edx,0x1
c00015ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015cd:	e9 2d fd ff ff       	jmp    c00012ff <dlmalloc+0x9e>
c00015d2:	83 c4 1c             	add    esp,0x1c
c00015d5:	89 f0                	mov    eax,esi
c00015d7:	5b                   	pop    ebx
c00015d8:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c00015dd:	5e                   	pop    esi
c00015de:	5f                   	pop    edi
c00015df:	5d                   	pop    ebp
c00015e0:	e9 19 fa ff ff       	jmp    c0000ffe <sYSMALLOc>
c00015e5:	31 c0                	xor    eax,eax
c00015e7:	83 c4 1c             	add    esp,0x1c
c00015ea:	5b                   	pop    ebx
c00015eb:	5e                   	pop    esi
c00015ec:	5f                   	pop    edi
c00015ed:	5d                   	pop    ebp
c00015ee:	c3                   	ret    

c00015ef <iALLOc>:
c00015ef:	55                   	push   ebp
c00015f0:	89 c5                	mov    ebp,eax
c00015f2:	57                   	push   edi
c00015f3:	56                   	push   esi
c00015f4:	53                   	push   ebx
c00015f5:	83 ec 2c             	sub    esp,0x2c
c00015f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001604:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c000160b:	75 12                	jne    c000161f <iALLOc+0x30>
c000160d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001611:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001616:	e8 07 f8 ff ff       	call   c0000e22 <malloc_consolidate>
c000161b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000161f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001624:	74 12                	je     c0001638 <iALLOc+0x49>
c0001626:	85 ed                	test   ebp,ebp
c0001628:	0f 84 64 01 00 00    	je     c0001792 <iALLOc+0x1a3>
c000162e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001636:	eb 33                	jmp    c000166b <iALLOc+0x7c>
c0001638:	85 ed                	test   ebp,ebp
c000163a:	75 14                	jne    c0001650 <iALLOc+0x61>
c000163c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001644:	83 c4 2c             	add    esp,0x2c
c0001647:	5b                   	pop    ebx
c0001648:	5e                   	pop    esi
c0001649:	5f                   	pop    edi
c000164a:	5d                   	pop    ebp
c000164b:	e9 11 fc ff ff       	jmp    c0001261 <dlmalloc>
c0001650:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001657:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000165f:	83 f8 0f             	cmp    eax,0xf
c0001662:	76 07                	jbe    c000166b <iALLOc+0x7c>
c0001664:	83 e0 f8             	and    eax,0xfffffff8
c0001667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000166b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001670:	75 09                	jne    c000167b <iALLOc+0x8c>
c0001672:	89 d0                	mov    eax,edx
c0001674:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001677:	31 f6                	xor    esi,esi
c0001679:	eb 3b                	jmp    c00016b6 <iALLOc+0xc7>
c000167b:	8b 02                	mov    eax,DWORD PTR [edx]
c000167d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001685:	83 c0 0b             	add    eax,0xb
c0001688:	83 f8 0f             	cmp    eax,0xf
c000168b:	76 07                	jbe    c0001694 <iALLOc+0xa5>
c000168d:	83 e0 f8             	and    eax,0xfffffff8
c0001690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001694:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001698:	0f af f5             	imul   esi,ebp
c000169b:	eb 25                	jmp    c00016c2 <iALLOc+0xd3>
c000169d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000169f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00016a2:	bb 10 00 00 00       	mov    ebx,0x10
c00016a7:	83 f9 0f             	cmp    ecx,0xf
c00016aa:	76 05                	jbe    c00016b1 <iALLOc+0xc2>
c00016ac:	83 e1 f8             	and    ecx,0xfffffff8
c00016af:	89 cb                	mov    ebx,ecx
c00016b1:	01 de                	add    esi,ebx
c00016b3:	83 c0 04             	add    eax,0x4
c00016b6:	39 c7                	cmp    edi,eax
c00016b8:	75 e3                	jne    c000169d <iALLOc+0xae>
c00016ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016c6:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c00016d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016dd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016e1:	50                   	push   eax
c00016e2:	e8 7a fb ff ff       	call   c0001261 <dlmalloc>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c00016f0:	85 c0                	test   eax,eax
c00016f2:	0f 84 92 00 00 00    	je     c000178a <iALLOc+0x19b>
c00016f8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016fb:	8d 78 f8             	lea    edi,[eax-0x8]
c00016fe:	83 e3 fc             	and    ebx,0xfffffffc
c0001701:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001705:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000170a:	74 1e                	je     c000172a <iALLOc+0x13b>
c000170c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001710:	89 d9                	mov    ecx,ebx
c0001712:	52                   	push   edx
c0001713:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001717:	83 e9 04             	sub    ecx,0x4
c000171a:	51                   	push   ecx
c000171b:	6a 00                	push   0x0
c000171d:	50                   	push   eax
c000171e:	e8 cd ed ff ff       	call   c00004f0 <memset>
c0001723:	83 c4 10             	add    esp,0x10
c0001726:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000172a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000172f:	75 14                	jne    c0001745 <iALLOc+0x156>
c0001731:	8d 04 37             	lea    eax,[edi+esi*1]
c0001734:	29 f3                	sub    ebx,esi
c0001736:	8d 48 08             	lea    ecx,[eax+0x8]
c0001739:	83 cb 01             	or     ebx,0x1
c000173c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001740:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001743:	89 f3                	mov    ebx,esi
c0001745:	31 c0                	xor    eax,eax
c0001747:	4d                   	dec    ebp
c0001748:	8d 4f 08             	lea    ecx,[edi+0x8]
c000174b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000174f:	39 c5                	cmp    ebp,eax
c0001751:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001754:	74 2c                	je     c0001782 <iALLOc+0x193>
c0001756:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000175a:	85 c9                	test   ecx,ecx
c000175c:	75 15                	jne    c0001773 <iALLOc+0x184>
c000175e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001761:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001764:	b9 10 00 00 00       	mov    ecx,0x10
c0001769:	83 fe 0f             	cmp    esi,0xf
c000176c:	76 05                	jbe    c0001773 <iALLOc+0x184>
c000176e:	83 e6 f8             	and    esi,0xfffffff8
c0001771:	89 f1                	mov    ecx,esi
c0001773:	89 ce                	mov    esi,ecx
c0001775:	29 cb                	sub    ebx,ecx
c0001777:	83 ce 01             	or     esi,0x1
c000177a:	40                   	inc    eax
c000177b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000177e:	01 cf                	add    edi,ecx
c0001780:	eb c6                	jmp    c0001748 <iALLOc+0x159>
c0001782:	83 cb 01             	or     ebx,0x1
c0001785:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001788:	eb 08                	jmp    c0001792 <iALLOc+0x1a3>
c000178a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001796:	83 c4 2c             	add    esp,0x2c
c0001799:	5b                   	pop    ebx
c000179a:	5e                   	pop    esi
c000179b:	5f                   	pop    edi
c000179c:	5d                   	pop    ebp
c000179d:	c3                   	ret    

c000179e <dlrealloc>:
c000179e:	55                   	push   ebp
c000179f:	57                   	push   edi
c00017a0:	56                   	push   esi
c00017a1:	53                   	push   ebx
c00017a2:	83 ec 1c             	sub    esp,0x1c
c00017a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00017a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00017ad:	85 db                	test   ebx,ebx
c00017af:	75 10                	jne    c00017c1 <dlrealloc+0x23>
c00017b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00017b5:	83 c4 1c             	add    esp,0x1c
c00017b8:	5b                   	pop    ebx
c00017b9:	5e                   	pop    esi
c00017ba:	5f                   	pop    edi
c00017bb:	5d                   	pop    ebp
c00017bc:	e9 a0 fa ff ff       	jmp    c0001261 <dlmalloc>
c00017c1:	83 f8 df             	cmp    eax,0xffffffdf
c00017c4:	76 07                	jbe    c00017cd <dlrealloc+0x2f>
c00017c6:	31 db                	xor    ebx,ebx
c00017c8:	e9 6a 01 00 00       	jmp    c0001937 <dlrealloc+0x199>
c00017cd:	83 c0 0b             	add    eax,0xb
c00017d0:	bd 10 00 00 00       	mov    ebp,0x10
c00017d5:	83 f8 0f             	cmp    eax,0xf
c00017d8:	76 05                	jbe    c00017df <dlrealloc+0x41>
c00017da:	83 e0 f8             	and    eax,0xfffffff8
c00017dd:	89 c5                	mov    ebp,eax
c00017df:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00017e2:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017e5:	89 c6                	mov    esi,eax
c00017e7:	83 e6 fc             	and    esi,0xfffffffc
c00017ea:	a8 02                	test   al,0x2
c00017ec:	75 d8                	jne    c00017c6 <dlrealloc+0x28>
c00017ee:	39 f5                	cmp    ebp,esi
c00017f0:	0f 86 04 01 00 00    	jbe    c00018fa <dlrealloc+0x15c>
c00017f6:	8d 14 37             	lea    edx,[edi+esi*1]
c00017f9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017fc:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c0001802:	75 33                	jne    c0001837 <dlrealloc+0x99>
c0001804:	83 e1 fc             	and    ecx,0xfffffffc
c0001807:	01 f1                	add    ecx,esi
c0001809:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000180d:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001810:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001814:	77 49                	ja     c000185f <dlrealloc+0xc1>
c0001816:	01 ef                	add    edi,ebp
c0001818:	83 e0 01             	and    eax,0x1
c000181b:	09 e8                	or     eax,ebp
c000181d:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001820:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000182a:	29 e8                	sub    eax,ebp
c000182c:	83 c8 01             	or     eax,0x1
c000182f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001832:	e9 00 01 00 00       	jmp    c0001937 <dlrealloc+0x199>
c0001837:	89 c8                	mov    eax,ecx
c0001839:	83 e0 fe             	and    eax,0xfffffffe
c000183c:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001841:	75 1c                	jne    c000185f <dlrealloc+0xc1>
c0001843:	83 e1 fc             	and    ecx,0xfffffffc
c0001846:	01 f1                	add    ecx,esi
c0001848:	39 cd                	cmp    ebp,ecx
c000184a:	77 13                	ja     c000185f <dlrealloc+0xc1>
c000184c:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000184f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001852:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001855:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001858:	89 ce                	mov    esi,ecx
c000185a:	e9 9b 00 00 00       	jmp    c00018fa <dlrealloc+0x15c>
c000185f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001863:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001866:	83 ec 0c             	sub    esp,0xc
c0001869:	50                   	push   eax
c000186a:	e8 f2 f9 ff ff       	call   c0001261 <dlmalloc>
c000186f:	83 c4 10             	add    esp,0x10
c0001872:	85 c0                	test   eax,eax
c0001874:	0f 84 4c ff ff ff    	je     c00017c6 <dlrealloc+0x28>
c000187a:	8d 48 f8             	lea    ecx,[eax-0x8]
c000187d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001881:	39 ca                	cmp    edx,ecx
c0001883:	75 0a                	jne    c000188f <dlrealloc+0xf1>
c0001885:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001888:	83 e0 fc             	and    eax,0xfffffffc
c000188b:	01 c6                	add    esi,eax
c000188d:	eb 6b                	jmp    c00018fa <dlrealloc+0x15c>
c000188f:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001892:	83 f9 27             	cmp    ecx,0x27
c0001895:	76 08                	jbe    c000189f <dlrealloc+0x101>
c0001897:	89 de                	mov    esi,ebx
c0001899:	89 c7                	mov    edi,eax
c000189b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000189d:	eb 43                	jmp    c00018e2 <dlrealloc+0x144>
c000189f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00018a1:	83 f9 13             	cmp    ecx,0x13
c00018a4:	89 10                	mov    DWORD PTR [eax],edx
c00018a6:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00018a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00018ac:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00018af:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00018b2:	76 2e                	jbe    c00018e2 <dlrealloc+0x144>
c00018b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018b7:	83 f9 1b             	cmp    ecx,0x1b
c00018ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018bd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018c3:	76 1d                	jbe    c00018e2 <dlrealloc+0x144>
c00018c5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018c8:	83 f9 23             	cmp    ecx,0x23
c00018cb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018d4:	76 0c                	jbe    c00018e2 <dlrealloc+0x144>
c00018d6:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018d9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018dc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018df:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018e6:	83 ec 0c             	sub    esp,0xc
c00018e9:	53                   	push   ebx
c00018ea:	e8 1a f6 ff ff       	call   c0000f09 <dlfree>
c00018ef:	83 c4 10             	add    esp,0x10
c00018f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018f6:	89 c3                	mov    ebx,eax
c00018f8:	eb 3d                	jmp    c0001937 <dlrealloc+0x199>
c00018fa:	89 f2                	mov    edx,esi
c00018fc:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018ff:	29 ea                	sub    edx,ebp
c0001901:	83 e1 01             	and    ecx,0x1
c0001904:	8d 04 37             	lea    eax,[edi+esi*1]
c0001907:	83 fa 0f             	cmp    edx,0xf
c000190a:	77 0b                	ja     c0001917 <dlrealloc+0x179>
c000190c:	09 ce                	or     esi,ecx
c000190e:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001911:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001915:	eb 20                	jmp    c0001937 <dlrealloc+0x199>
c0001917:	01 ef                	add    edi,ebp
c0001919:	83 ec 0c             	sub    esp,0xc
c000191c:	09 cd                	or     ebp,ecx
c000191e:	83 ca 01             	or     edx,0x1
c0001921:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001924:	83 c7 08             	add    edi,0x8
c0001927:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c000192a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000192e:	57                   	push   edi
c000192f:	e8 d5 f5 ff ff       	call   c0000f09 <dlfree>
c0001934:	83 c4 10             	add    esp,0x10
c0001937:	83 c4 1c             	add    esp,0x1c
c000193a:	89 d8                	mov    eax,ebx
c000193c:	5b                   	pop    ebx
c000193d:	5e                   	pop    esi
c000193e:	5f                   	pop    edi
c000193f:	5d                   	pop    ebp
c0001940:	c3                   	ret    

c0001941 <dlmemalign>:
c0001941:	55                   	push   ebp
c0001942:	57                   	push   edi
c0001943:	56                   	push   esi
c0001944:	53                   	push   ebx
c0001945:	83 ec 0c             	sub    esp,0xc
c0001948:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000194c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001950:	83 fa 08             	cmp    edx,0x8
c0001953:	77 10                	ja     c0001965 <dlmemalign+0x24>
c0001955:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001959:	83 c4 0c             	add    esp,0xc
c000195c:	5b                   	pop    ebx
c000195d:	5e                   	pop    esi
c000195e:	5f                   	pop    edi
c000195f:	5d                   	pop    ebp
c0001960:	e9 fc f8 ff ff       	jmp    c0001261 <dlmalloc>
c0001965:	bf 10 00 00 00       	mov    edi,0x10
c000196a:	83 fa 0f             	cmp    edx,0xf
c000196d:	76 13                	jbe    c0001982 <dlmemalign+0x41>
c000196f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001972:	85 d1                	test   ecx,edx
c0001974:	75 04                	jne    c000197a <dlmemalign+0x39>
c0001976:	89 d7                	mov    edi,edx
c0001978:	eb 08                	jmp    c0001982 <dlmemalign+0x41>
c000197a:	39 d7                	cmp    edi,edx
c000197c:	73 04                	jae    c0001982 <dlmemalign+0x41>
c000197e:	01 ff                	add    edi,edi
c0001980:	eb f8                	jmp    c000197a <dlmemalign+0x39>
c0001982:	83 f8 df             	cmp    eax,0xffffffdf
c0001985:	76 07                	jbe    c000198e <dlmemalign+0x4d>
c0001987:	31 c0                	xor    eax,eax
c0001989:	e9 ce 00 00 00       	jmp    c0001a5c <dlmemalign+0x11b>
c000198e:	83 c0 0b             	add    eax,0xb
c0001991:	bd 10 00 00 00       	mov    ebp,0x10
c0001996:	83 f8 0f             	cmp    eax,0xf
c0001999:	76 05                	jbe    c00019a0 <dlmemalign+0x5f>
c000199b:	83 e0 f8             	and    eax,0xfffffff8
c000199e:	89 c5                	mov    ebp,eax
c00019a0:	83 ec 0c             	sub    esp,0xc
c00019a3:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019a7:	50                   	push   eax
c00019a8:	e8 b4 f8 ff ff       	call   c0001261 <dlmalloc>
c00019ad:	83 c4 10             	add    esp,0x10
c00019b0:	89 c1                	mov    ecx,eax
c00019b2:	85 c0                	test   eax,eax
c00019b4:	74 d1                	je     c0001987 <dlmemalign+0x46>
c00019b6:	31 d2                	xor    edx,edx
c00019b8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019bb:	f7 f7                	div    edi
c00019bd:	85 d2                	test   edx,edx
c00019bf:	74 62                	je     c0001a23 <dlmemalign+0xe2>
c00019c1:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019c5:	89 f8                	mov    eax,edi
c00019c7:	f7 d8                	neg    eax
c00019c9:	21 c3                	and    ebx,eax
c00019cb:	83 eb 08             	sub    ebx,0x8
c00019ce:	89 d8                	mov    eax,ebx
c00019d0:	29 f0                	sub    eax,esi
c00019d2:	83 f8 0f             	cmp    eax,0xf
c00019d5:	77 02                	ja     c00019d9 <dlmemalign+0x98>
c00019d7:	01 fb                	add    ebx,edi
c00019d9:	89 d8                	mov    eax,ebx
c00019db:	29 f0                	sub    eax,esi
c00019dd:	89 c6                	mov    esi,eax
c00019df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019e2:	89 c2                	mov    edx,eax
c00019e4:	83 e2 fc             	and    edx,0xfffffffc
c00019e7:	29 f2                	sub    edx,esi
c00019e9:	a8 02                	test   al,0x2
c00019eb:	74 10                	je     c00019fd <dlmemalign+0xbc>
c00019ed:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019f0:	83 ca 02             	or     edx,0x2
c00019f3:	8d 43 08             	lea    eax,[ebx+0x8]
c00019f6:	89 33                	mov    DWORD PTR [ebx],esi
c00019f8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019fb:	eb 5f                	jmp    c0001a5c <dlmemalign+0x11b>
c00019fd:	83 ec 0c             	sub    esp,0xc
c0001a00:	89 d0                	mov    eax,edx
c0001a02:	83 c8 01             	or     eax,0x1
c0001a05:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a08:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a0d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a10:	83 e0 01             	and    eax,0x1
c0001a13:	09 f0                	or     eax,esi
c0001a15:	89 de                	mov    esi,ebx
c0001a17:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a1a:	51                   	push   ecx
c0001a1b:	e8 e9 f4 ff ff       	call   c0000f09 <dlfree>
c0001a20:	83 c4 10             	add    esp,0x10
c0001a23:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a26:	a8 02                	test   al,0x2
c0001a28:	75 2f                	jne    c0001a59 <dlmemalign+0x118>
c0001a2a:	83 e0 fc             	and    eax,0xfffffffc
c0001a2d:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a30:	39 c2                	cmp    edx,eax
c0001a32:	73 25                	jae    c0001a59 <dlmemalign+0x118>
c0001a34:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a37:	83 ec 0c             	sub    esp,0xc
c0001a3a:	29 e8                	sub    eax,ebp
c0001a3c:	83 c2 08             	add    edx,0x8
c0001a3f:	83 c8 01             	or     eax,0x1
c0001a42:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	83 e0 01             	and    eax,0x1
c0001a4b:	09 c5                	or     ebp,eax
c0001a4d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a50:	52                   	push   edx
c0001a51:	e8 b3 f4 ff ff       	call   c0000f09 <dlfree>
c0001a56:	83 c4 10             	add    esp,0x10
c0001a59:	8d 46 08             	lea    eax,[esi+0x8]
c0001a5c:	83 c4 0c             	add    esp,0xc
c0001a5f:	5b                   	pop    ebx
c0001a60:	5e                   	pop    esi
c0001a61:	5f                   	pop    edi
c0001a62:	5d                   	pop    ebp
c0001a63:	c3                   	ret    

c0001a64 <dlcalloc>:
c0001a64:	53                   	push   ebx
c0001a65:	83 ec 14             	sub    esp,0x14
c0001a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a6c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a71:	50                   	push   eax
c0001a72:	e8 ea f7 ff ff       	call   c0001261 <dlmalloc>
c0001a77:	83 c4 10             	add    esp,0x10
c0001a7a:	89 c3                	mov    ebx,eax
c0001a7c:	85 c0                	test   eax,eax
c0001a7e:	74 77                	je     c0001af7 <dlcalloc+0x93>
c0001a80:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001a83:	89 d0                	mov    eax,edx
c0001a85:	83 e0 fc             	and    eax,0xfffffffc
c0001a88:	80 e2 02             	and    dl,0x2
c0001a8b:	75 5a                	jne    c0001ae7 <dlcalloc+0x83>
c0001a8d:	83 e8 04             	sub    eax,0x4
c0001a90:	83 f8 27             	cmp    eax,0x27
c0001a93:	76 03                	jbe    c0001a98 <dlcalloc+0x34>
c0001a95:	51                   	push   ecx
c0001a96:	eb 53                	jmp    c0001aeb <dlcalloc+0x87>
c0001a98:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aac:	83 f8 13             	cmp    eax,0x13
c0001aaf:	76 46                	jbe    c0001af7 <dlcalloc+0x93>
c0001ab1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab8:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abf:	83 f8 1b             	cmp    eax,0x1b
c0001ac2:	76 33                	jbe    c0001af7 <dlcalloc+0x93>
c0001ac4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001acb:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ad2:	83 f8 23             	cmp    eax,0x23
c0001ad5:	76 20                	jbe    c0001af7 <dlcalloc+0x93>
c0001ad7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ade:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae5:	eb 10                	jmp    c0001af7 <dlcalloc+0x93>
c0001ae7:	83 e8 08             	sub    eax,0x8
c0001aea:	52                   	push   edx
c0001aeb:	50                   	push   eax
c0001aec:	6a 00                	push   0x0
c0001aee:	53                   	push   ebx
c0001aef:	e8 fc e9 ff ff       	call   c00004f0 <memset>
c0001af4:	83 c4 10             	add    esp,0x10
c0001af7:	89 d8                	mov    eax,ebx
c0001af9:	83 c4 08             	add    esp,0x8
c0001afc:	5b                   	pop    ebx
c0001afd:	c3                   	ret    

c0001afe <dlcfree>:
c0001afe:	e9 06 f4 ff ff       	jmp    c0000f09 <dlfree>

c0001b03 <dlindependent_calloc>:
c0001b03:	83 ec 28             	sub    esp,0x28
c0001b06:	b9 03 00 00 00       	mov    ecx,0x3
c0001b0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b1f:	e8 cb fa ff ff       	call   c00015ef <iALLOc>
c0001b24:	83 c4 2c             	add    esp,0x2c
c0001b27:	c3                   	ret    

c0001b28 <dlindependent_comalloc>:
c0001b28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b30:	31 c9                	xor    ecx,ecx
c0001b32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b3a:	e9 b0 fa ff ff       	jmp    c00015ef <iALLOc>

c0001b3f <dlvalloc>:
c0001b3f:	83 ec 0c             	sub    esp,0xc
c0001b42:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001b49:	75 0a                	jne    c0001b55 <dlvalloc+0x16>
c0001b4b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b50:	e8 cd f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001b55:	50                   	push   eax
c0001b56:	50                   	push   eax
c0001b57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b5b:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001b61:	e8 db fd ff ff       	call   c0001941 <dlmemalign>
c0001b66:	83 c4 1c             	add    esp,0x1c
c0001b69:	c3                   	ret    

c0001b6a <dlpvalloc>:
c0001b6a:	83 ec 0c             	sub    esp,0xc
c0001b6d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001b74:	75 0a                	jne    c0001b80 <dlpvalloc+0x16>
c0001b76:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b7b:	e8 a2 f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001b80:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001b85:	89 c1                	mov    ecx,eax
c0001b87:	52                   	push   edx
c0001b88:	f7 d9                	neg    ecx
c0001b8a:	52                   	push   edx
c0001b8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b8f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b93:	21 ca                	and    edx,ecx
c0001b95:	52                   	push   edx
c0001b96:	50                   	push   eax
c0001b97:	e8 a5 fd ff ff       	call   c0001941 <dlmemalign>
c0001b9c:	83 c4 1c             	add    esp,0x1c
c0001b9f:	c3                   	ret    

c0001ba0 <dlmalloc_trim>:
c0001ba0:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001ba5:	e8 78 f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001baa:	31 c0                	xor    eax,eax
c0001bac:	c3                   	ret    

c0001bad <dlmalloc_usable_size>:
c0001bad:	53                   	push   ebx
c0001bae:	31 c0                	xor    eax,eax
c0001bb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bb4:	85 c9                	test   ecx,ecx
c0001bb6:	74 24                	je     c0001bdc <dlmalloc_usable_size+0x2f>
c0001bb8:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bbb:	f6 c2 02             	test   dl,0x2
c0001bbe:	74 08                	je     c0001bc8 <dlmalloc_usable_size+0x1b>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bc6:	eb 14                	jmp    c0001bdc <dlmalloc_usable_size+0x2f>
c0001bc8:	89 d3                	mov    ebx,edx
c0001bca:	31 c0                	xor    eax,eax
c0001bcc:	83 e3 fe             	and    ebx,0xfffffffe
c0001bcf:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bd4:	74 06                	je     c0001bdc <dlmalloc_usable_size+0x2f>
c0001bd6:	83 e2 fc             	and    edx,0xfffffffc
c0001bd9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bdc:	5b                   	pop    ebx
c0001bdd:	c3                   	ret    

c0001bde <dlmallinfo>:
c0001bde:	55                   	push   ebp
c0001bdf:	57                   	push   edi
c0001be0:	56                   	push   esi
c0001be1:	53                   	push   ebx
c0001be2:	83 ec 08             	sub    esp,0x8
c0001be5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001be9:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001bf0:	75 0a                	jne    c0001bfc <dlmallinfo+0x1e>
c0001bf2:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001bf7:	e8 26 f2 ff ff       	call   c0000e22 <malloc_consolidate>
c0001bfc:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001c01:	31 ed                	xor    ebp,ebp
c0001c03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c06:	31 c9                	xor    ecx,ecx
c0001c08:	83 e0 fc             	and    eax,0xfffffffc
c0001c0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c0f:	31 c0                	xor    eax,eax
c0001c11:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001c18:	85 d2                	test   edx,edx
c0001c1a:	74 0e                	je     c0001c2a <dlmallinfo+0x4c>
c0001c1c:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c1f:	45                   	inc    ebp
c0001c20:	83 e6 fc             	and    esi,0xfffffffc
c0001c23:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c26:	01 f1                	add    ecx,esi
c0001c28:	eb ee                	jmp    c0001c18 <dlmallinfo+0x3a>
c0001c2a:	40                   	inc    eax
c0001c2b:	83 f8 0a             	cmp    eax,0xa
c0001c2e:	75 e1                	jne    c0001c11 <dlmallinfo+0x33>
c0001c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c34:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c3b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c3e:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001c43:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c46:	39 f0                	cmp    eax,esi
c0001c48:	74 10                	je     c0001c5a <dlmallinfo+0x7c>
c0001c4a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c4d:	ff 04 24             	inc    DWORD PTR [esp]
c0001c50:	83 e7 fc             	and    edi,0xfffffffc
c0001c53:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c56:	01 fa                	add    edx,edi
c0001c58:	eb ec                	jmp    c0001c46 <dlmallinfo+0x68>
c0001c5a:	83 c0 08             	add    eax,0x8
c0001c5d:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001c62:	75 df                	jne    c0001c43 <dlmallinfo+0x65>
c0001c64:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c67:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c6a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c6d:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001c72:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c75:	89 03                	mov    DWORD PTR [ebx],eax
c0001c77:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c7a:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001c80:	29 d0                	sub    eax,edx
c0001c82:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c85:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c88:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c92:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c98:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001c9e:	89 d8                	mov    eax,ebx
c0001ca0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001ca3:	83 c4 08             	add    esp,0x8
c0001ca6:	5b                   	pop    ebx
c0001ca7:	5e                   	pop    esi
c0001ca8:	5f                   	pop    edi
c0001ca9:	5d                   	pop    ebp
c0001caa:	c2 04 00             	ret    0x4

c0001cad <dlmalloc_stats>:
c0001cad:	83 ec 30             	sub    esp,0x30
c0001cb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001cb4:	50                   	push   eax
c0001cb5:	e8 24 ff ff ff       	call   c0001bde <dlmallinfo>
c0001cba:	83 c4 30             	add    esp,0x30
c0001cbd:	c3                   	ret    

c0001cbe <dlmallopt>:
c0001cbe:	56                   	push   esi
c0001cbf:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001cc4:	53                   	push   ebx
c0001cc5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ccd:	e8 50 f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001cd2:	8d 46 04             	lea    eax,[esi+0x4]
c0001cd5:	83 f8 05             	cmp    eax,0x5
c0001cd8:	77 67                	ja     c0001d41 <dlmallopt+0x83>
c0001cda:	ff 24 85 20 f5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0ae0]
c0001ce1:	83 fb 50             	cmp    ebx,0x50
c0001ce4:	77 5b                	ja     c0001d41 <dlmallopt+0x83>
c0001ce6:	ba 08 00 00 00       	mov    edx,0x8
c0001ceb:	85 db                	test   ebx,ebx
c0001ced:	74 12                	je     c0001d01 <dlmallopt+0x43>
c0001cef:	83 c3 0b             	add    ebx,0xb
c0001cf2:	ba 10 00 00 00       	mov    edx,0x10
c0001cf7:	83 fb 0f             	cmp    ebx,0xf
c0001cfa:	76 05                	jbe    c0001d01 <dlmallopt+0x43>
c0001cfc:	89 da                	mov    edx,ebx
c0001cfe:	83 e2 f8             	and    edx,0xfffffff8
c0001d01:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001d06:	83 e0 03             	and    eax,0x3
c0001d09:	09 d0                	or     eax,edx
c0001d0b:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001d10:	eb 31                	jmp    c0001d43 <dlmallopt+0x85>
c0001d12:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001d18:	eb 06                	jmp    c0001d20 <dlmallopt+0x62>
c0001d1a:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001d20:	be 01 00 00 00       	mov    esi,0x1
c0001d25:	eb 1c                	jmp    c0001d43 <dlmallopt+0x85>
c0001d27:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001d2d:	eb f1                	jmp    c0001d20 <dlmallopt+0x62>
c0001d2f:	31 f6                	xor    esi,esi
c0001d31:	85 db                	test   ebx,ebx
c0001d33:	75 0e                	jne    c0001d43 <dlmallopt+0x85>
c0001d35:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001d3f:	eb df                	jmp    c0001d20 <dlmallopt+0x62>
c0001d41:	31 f6                	xor    esi,esi
c0001d43:	89 f0                	mov    eax,esi
c0001d45:	5b                   	pop    ebx
c0001d46:	5e                   	pop    esi
c0001d47:	c3                   	ret    

c0001d48 <isblank>:
c0001d48:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d4d:	74 09                	je     c0001d58 <isblank+0x10>
c0001d4f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d54:	75 0a                	jne    c0001d60 <isblank+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <iscntrl>:
c0001d68:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d6d:	7e 09                	jle    c0001d78 <iscntrl+0x10>
c0001d6f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d74:	75 0a                	jne    c0001d80 <iscntrl+0x18>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    
c0001d86:	66 90                	xchg   ax,ax

c0001d88 <isdigit>:
c0001d88:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d8d:	7e 0d                	jle    c0001d9c <isdigit+0x14>
c0001d8f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d94:	7f 06                	jg     c0001d9c <isdigit+0x14>
c0001d96:	b8 01 00 00 00       	mov    eax,0x1
c0001d9b:	c3                   	ret    
c0001d9c:	b8 00 00 00 00       	mov    eax,0x0
c0001da1:	c3                   	ret    
c0001da2:	66 90                	xchg   ax,ax

c0001da4 <islower>:
c0001da4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da9:	7e 0d                	jle    c0001db8 <islower+0x14>
c0001dab:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001db0:	7f 06                	jg     c0001db8 <islower+0x14>
c0001db2:	b8 01 00 00 00       	mov    eax,0x1
c0001db7:	c3                   	ret    
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax

c0001dc0 <isspace>:
c0001dc0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dc5:	7c 19                	jl     c0001de0 <isspace+0x20>
c0001dc7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dcc:	7e 0a                	jle    c0001dd8 <isspace+0x18>
c0001dce:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001dd3:	75 0b                	jne    c0001de0 <isspace+0x20>
c0001dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0001dd8:	b8 01 00 00 00       	mov    eax,0x1
c0001ddd:	c3                   	ret    
c0001dde:	66 90                	xchg   ax,ax
c0001de0:	b8 00 00 00 00       	mov    eax,0x0
c0001de5:	c3                   	ret    
c0001de6:	66 90                	xchg   ax,ax

c0001de8 <isupper>:
c0001de8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ded:	7e 0d                	jle    c0001dfc <isupper+0x14>
c0001def:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001df4:	7f 06                	jg     c0001dfc <isupper+0x14>
c0001df6:	b8 01 00 00 00       	mov    eax,0x1
c0001dfb:	c3                   	ret    
c0001dfc:	b8 00 00 00 00       	mov    eax,0x0
c0001e01:	c3                   	ret    
c0001e02:	66 90                	xchg   ax,ax

c0001e04 <isalpha>:
c0001e04:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e08:	e8 db ff ff ff       	call   c0001de8 <isupper>
c0001e0d:	83 c4 04             	add    esp,0x4
c0001e10:	85 c0                	test   eax,eax
c0001e12:	75 10                	jne    c0001e24 <isalpha+0x20>
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 87 ff ff ff       	call   c0001da4 <islower>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	74 08                	je     c0001e2c <isalpha+0x28>
c0001e24:	b8 01 00 00 00       	mov    eax,0x1
c0001e29:	c3                   	ret    
c0001e2a:	66 90                	xchg   ax,ax
c0001e2c:	b8 00 00 00 00       	mov    eax,0x0
c0001e31:	c3                   	ret    
c0001e32:	66 90                	xchg   ax,ax

c0001e34 <isalnum>:
c0001e34:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e38:	e8 c7 ff ff ff       	call   c0001e04 <isalpha>
c0001e3d:	83 c4 04             	add    esp,0x4
c0001e40:	85 c0                	test   eax,eax
c0001e42:	75 10                	jne    c0001e54 <isalnum+0x20>
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 3b ff ff ff       	call   c0001d88 <isdigit>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	74 08                	je     c0001e5c <isalnum+0x28>
c0001e54:	b8 01 00 00 00       	mov    eax,0x1
c0001e59:	c3                   	ret    
c0001e5a:	66 90                	xchg   ax,ax
c0001e5c:	b8 00 00 00 00       	mov    eax,0x0
c0001e61:	c3                   	ret    
c0001e62:	66 90                	xchg   ax,ax

c0001e64 <ispunct>:
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 c7 ff ff ff       	call   c0001e34 <isalnum>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 28                	jne    c0001e9c <ispunct+0x38>
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 43 ff ff ff       	call   c0001dc0 <isspace>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 18                	jne    c0001e9c <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 db fe ff ff       	call   c0001d68 <iscntrl>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 08                	jne    c0001e9c <ispunct+0x38>
c0001e94:	b8 01 00 00 00       	mov    eax,0x1
c0001e99:	c3                   	ret    
c0001e9a:	66 90                	xchg   ax,ax
c0001e9c:	b8 00 00 00 00       	mov    eax,0x0
c0001ea1:	c3                   	ret    
c0001ea2:	66 90                	xchg   ax,ax

c0001ea4 <isgraph>:
c0001ea4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ea8:	e8 87 ff ff ff       	call   c0001e34 <isalnum>
c0001ead:	83 c4 04             	add    esp,0x4
c0001eb0:	85 c0                	test   eax,eax
c0001eb2:	75 10                	jne    c0001ec4 <isgraph+0x20>
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 a7 ff ff ff       	call   c0001e64 <ispunct>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	74 08                	je     c0001ecc <isgraph+0x28>
c0001ec4:	b8 01 00 00 00       	mov    eax,0x1
c0001ec9:	c3                   	ret    
c0001eca:	66 90                	xchg   ax,ax
c0001ecc:	b8 00 00 00 00       	mov    eax,0x0
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax

c0001ed4 <isprint>:
c0001ed4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ed8:	e8 c7 ff ff ff       	call   c0001ea4 <isgraph>
c0001edd:	83 c4 04             	add    esp,0x4
c0001ee0:	85 c0                	test   eax,eax
c0001ee2:	75 08                	jne    c0001eec <isprint+0x18>
c0001ee4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ee9:	75 09                	jne    c0001ef4 <isprint+0x20>
c0001eeb:	90                   	nop
c0001eec:	b8 01 00 00 00       	mov    eax,0x1
c0001ef1:	c3                   	ret    
c0001ef2:	66 90                	xchg   ax,ax
c0001ef4:	b8 00 00 00 00       	mov    eax,0x0
c0001ef9:	c3                   	ret    
c0001efa:	66 90                	xchg   ax,ax

c0001efc <isxdigit>:
c0001efc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f00:	e8 83 fe ff ff       	call   c0001d88 <isdigit>
c0001f05:	83 c4 04             	add    esp,0x4
c0001f08:	85 c0                	test   eax,eax
c0001f0a:	75 20                	jne    c0001f2c <isxdigit+0x30>
c0001f0c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f11:	7e 09                	jle    c0001f1c <isxdigit+0x20>
c0001f13:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f18:	7e 12                	jle    c0001f2c <isxdigit+0x30>
c0001f1a:	66 90                	xchg   ax,ax
c0001f1c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f21:	7e 11                	jle    c0001f34 <isxdigit+0x38>
c0001f23:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f28:	7f 0a                	jg     c0001f34 <isxdigit+0x38>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	b8 01 00 00 00       	mov    eax,0x1
c0001f31:	c3                   	ret    
c0001f32:	66 90                	xchg   ax,ax
c0001f34:	b8 00 00 00 00       	mov    eax,0x0
c0001f39:	c3                   	ret    

c0001f3a <disk_status>:
c0001f3a:	31 c0                	xor    eax,eax
c0001f3c:	c3                   	ret    

c0001f3d <disk_initialize>:
c0001f3d:	31 c0                	xor    eax,eax
c0001f3f:	c3                   	ret    

c0001f40 <disk_read>:
c0001f40:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f45:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f51:	e9 5a 6a 02 00       	jmp    c00289b0 <fatWrapperReadDisk>

c0001f56 <disk_write>:
c0001f56:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f5b:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f67:	e9 84 6a 02 00       	jmp    c00289f0 <fatWrapperWriteDisk>

c0001f6c <disk_ioctl>:
c0001f6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001f71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 a5 6a 02 00       	jmp    c0028a30 <fatWrapperIoctl>

c0001f8b <ld_word>:
c0001f8b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001f8f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f92:	c1 e2 08             	shl    edx,0x8
c0001f95:	09 d0                	or     eax,edx
c0001f97:	c3                   	ret    

c0001f98 <ld_dword>:
c0001f98:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001f9c:	89 d1                	mov    ecx,edx
c0001f9e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fa2:	c1 e1 08             	shl    ecx,0x8
c0001fa5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fa8:	09 ca                	or     edx,ecx
c0001faa:	c1 e2 08             	shl    edx,0x8
c0001fad:	09 d0                	or     eax,edx
c0001faf:	c3                   	ret    

c0001fb0 <st_word>:
c0001fb0:	66 89 10             	mov    WORD PTR [eax],dx
c0001fb3:	c3                   	ret    

c0001fb4 <st_dword>:
c0001fb4:	89 10                	mov    DWORD PTR [eax],edx
c0001fb6:	c3                   	ret    

c0001fb7 <mem_cpy>:
c0001fb7:	85 c9                	test   ecx,ecx
c0001fb9:	74 10                	je     c0001fcb <mem_cpy+0x14>
c0001fbb:	57                   	push   edi
c0001fbc:	01 c1                	add    ecx,eax
c0001fbe:	56                   	push   esi
c0001fbf:	89 c7                	mov    edi,eax
c0001fc1:	89 d6                	mov    esi,edx
c0001fc3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001fc4:	39 f9                	cmp    ecx,edi
c0001fc6:	75 fb                	jne    c0001fc3 <mem_cpy+0xc>
c0001fc8:	5e                   	pop    esi
c0001fc9:	5f                   	pop    edi
c0001fca:	c3                   	ret    
c0001fcb:	c3                   	ret    

c0001fcc <mem_set>:
c0001fcc:	01 c1                	add    ecx,eax
c0001fce:	40                   	inc    eax
c0001fcf:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001fd2:	39 c8                	cmp    eax,ecx
c0001fd4:	75 f8                	jne    c0001fce <mem_set+0x2>
c0001fd6:	c3                   	ret    

c0001fd7 <mem_cmp>:
c0001fd7:	57                   	push   edi
c0001fd8:	56                   	push   esi
c0001fd9:	89 c6                	mov    esi,eax
c0001fdb:	53                   	push   ebx
c0001fdc:	46                   	inc    esi
c0001fdd:	42                   	inc    edx
c0001fde:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001fe2:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001fe6:	29 fb                	sub    ebx,edi
c0001fe8:	89 cf                	mov    edi,ecx
c0001fea:	29 f7                	sub    edi,esi
c0001fec:	01 c7                	add    edi,eax
c0001fee:	74 04                	je     c0001ff4 <mem_cmp+0x1d>
c0001ff0:	85 db                	test   ebx,ebx
c0001ff2:	74 e8                	je     c0001fdc <mem_cmp+0x5>
c0001ff4:	89 d8                	mov    eax,ebx
c0001ff6:	5b                   	pop    ebx
c0001ff7:	5e                   	pop    esi
c0001ff8:	5f                   	pop    edi
c0001ff9:	c3                   	ret    

c0001ffa <chk_chr>:
c0001ffa:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ffd:	85 c9                	test   ecx,ecx
c0001fff:	74 07                	je     c0002008 <chk_chr+0xe>
c0002001:	39 d1                	cmp    ecx,edx
c0002003:	74 03                	je     c0002008 <chk_chr+0xe>
c0002005:	40                   	inc    eax
c0002006:	eb f2                	jmp    c0001ffa <chk_chr>
c0002008:	89 c8                	mov    eax,ecx
c000200a:	c3                   	ret    

c000200b <dbc_1st>:
c000200b:	31 c0                	xor    eax,eax
c000200d:	c3                   	ret    

c000200e <dbc_2nd>:
c000200e:	31 c0                	xor    eax,eax
c0002010:	c3                   	ret    

c0002011 <tchar2uni>:
c0002011:	57                   	push   edi
c0002012:	56                   	push   esi
c0002013:	53                   	push   ebx
c0002014:	8b 18                	mov    ebx,DWORD PTR [eax]
c0002016:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0002018:	8d 73 01             	lea    esi,[ebx+0x1]
c000201b:	f6 c1 80             	test   cl,0x80
c000201e:	75 0a                	jne    c000202a <tchar2uni+0x19>
c0002020:	0f b6 d1             	movzx  edx,cl
c0002023:	89 f3                	mov    ebx,esi
c0002025:	e9 b2 00 00 00       	jmp    c00020dc <tchar2uni+0xcb>
c000202a:	89 ca                	mov    edx,ecx
c000202c:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002032:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0002038:	89 ca                	mov    edx,ecx
c000203a:	75 0a                	jne    c0002046 <tchar2uni+0x35>
c000203c:	83 e2 1f             	and    edx,0x1f
c000203f:	b9 01 00 00 00       	mov    ecx,0x1
c0002044:	eb 37                	jmp    c000207d <tchar2uni+0x6c>
c0002046:	81 e2 f0 00 00 00    	and    edx,0xf0
c000204c:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002052:	75 0c                	jne    c0002060 <tchar2uni+0x4f>
c0002054:	89 ca                	mov    edx,ecx
c0002056:	b9 02 00 00 00       	mov    ecx,0x2
c000205b:	83 e2 0f             	and    edx,0xf
c000205e:	eb 1d                	jmp    c000207d <tchar2uni+0x6c>
c0002060:	89 cf                	mov    edi,ecx
c0002062:	83 ca ff             	or     edx,0xffffffff
c0002065:	81 e7 f8 00 00 00    	and    edi,0xf8
c000206b:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002071:	75 70                	jne    c00020e3 <tchar2uni+0xd2>
c0002073:	89 ca                	mov    edx,ecx
c0002075:	b9 03 00 00 00       	mov    ecx,0x3
c000207a:	83 e2 07             	and    edx,0x7
c000207d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002081:	46                   	inc    esi
c0002082:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0002085:	89 cf                	mov    edi,ecx
c0002087:	81 e7 c0 00 00 00    	and    edi,0xc0
c000208d:	83 c7 80             	add    edi,0xffffff80
c0002090:	75 4e                	jne    c00020e0 <tchar2uni+0xcf>
c0002092:	c1 e2 06             	shl    edx,0x6
c0002095:	83 e1 3f             	and    ecx,0x3f
c0002098:	09 ca                	or     edx,ecx
c000209a:	39 de                	cmp    esi,ebx
c000209c:	75 e3                	jne    c0002081 <tchar2uni+0x70>
c000209e:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020a1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020a7:	77 37                	ja     c00020e0 <tchar2uni+0xcf>
c00020a9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020af:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020b5:	76 29                	jbe    c00020e0 <tchar2uni+0xcf>
c00020b7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020bd:	76 1d                	jbe    c00020dc <tchar2uni+0xcb>
c00020bf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020c5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c00020cb:	c1 e1 06             	shl    ecx,0x6
c00020ce:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c00020d4:	09 ca                	or     edx,ecx
c00020d6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c00020dc:	89 18                	mov    DWORD PTR [eax],ebx
c00020de:	eb 03                	jmp    c00020e3 <tchar2uni+0xd2>
c00020e0:	83 ca ff             	or     edx,0xffffffff
c00020e3:	5b                   	pop    ebx
c00020e4:	89 d0                	mov    eax,edx
c00020e6:	5e                   	pop    esi
c00020e7:	5f                   	pop    edi
c00020e8:	c3                   	ret    

c00020e9 <put_utf>:
c00020e9:	53                   	push   ebx
c00020ea:	83 f8 7f             	cmp    eax,0x7f
c00020ed:	89 c3                	mov    ebx,eax
c00020ef:	b0 00                	mov    al,0x0
c00020f1:	77 11                	ja     c0002104 <put_utf+0x1b>
c00020f3:	85 c9                	test   ecx,ecx
c00020f5:	0f 84 e5 00 00 00    	je     c00021e0 <put_utf+0xf7>
c00020fb:	88 1a                	mov    BYTE PTR [edx],bl
c00020fd:	b0 01                	mov    al,0x1
c00020ff:	e9 dc 00 00 00       	jmp    c00021e0 <put_utf+0xf7>
c0002104:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000210a:	77 23                	ja     c000212f <put_utf+0x46>
c000210c:	83 f9 01             	cmp    ecx,0x1
c000210f:	0f 86 cb 00 00 00    	jbe    c00021e0 <put_utf+0xf7>
c0002115:	89 d8                	mov    eax,ebx
c0002117:	83 e3 3f             	and    ebx,0x3f
c000211a:	c1 e8 06             	shr    eax,0x6
c000211d:	83 cb 80             	or     ebx,0xffffff80
c0002120:	83 c8 c0             	or     eax,0xffffffc0
c0002123:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002126:	88 02                	mov    BYTE PTR [edx],al
c0002128:	b0 02                	mov    al,0x2
c000212a:	e9 b1 00 00 00       	jmp    c00021e0 <put_utf+0xf7>
c000212f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002135:	77 40                	ja     c0002177 <put_utf+0x8e>
c0002137:	83 f9 02             	cmp    ecx,0x2
c000213a:	0f 86 a0 00 00 00    	jbe    c00021e0 <put_utf+0xf7>
c0002140:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0002146:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000214c:	0f 86 8e 00 00 00    	jbe    c00021e0 <put_utf+0xf7>
c0002152:	89 d8                	mov    eax,ebx
c0002154:	c1 e8 0c             	shr    eax,0xc
c0002157:	83 c8 e0             	or     eax,0xffffffe0
c000215a:	88 02                	mov    BYTE PTR [edx],al
c000215c:	89 d8                	mov    eax,ebx
c000215e:	83 e3 3f             	and    ebx,0x3f
c0002161:	c1 e8 06             	shr    eax,0x6
c0002164:	83 cb 80             	or     ebx,0xffffff80
c0002167:	83 e0 3f             	and    eax,0x3f
c000216a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c000216d:	83 c8 80             	or     eax,0xffffff80
c0002170:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002173:	b0 03                	mov    al,0x3
c0002175:	eb 69                	jmp    c00021e0 <put_utf+0xf7>
c0002177:	83 f9 03             	cmp    ecx,0x3
c000217a:	76 64                	jbe    c00021e0 <put_utf+0xf7>
c000217c:	89 d9                	mov    ecx,ebx
c000217e:	0f b7 c3             	movzx  eax,bx
c0002181:	66 31 c9             	xor    cx,cx
c0002184:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000218a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002190:	c1 e9 06             	shr    ecx,0x6
c0002193:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002199:	77 43                	ja     c00021de <put_utf+0xf5>
c000219b:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021a1:	77 3b                	ja     c00021de <put_utf+0xf5>
c00021a3:	09 cb                	or     ebx,ecx
c00021a5:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021ab:	89 d8                	mov    eax,ebx
c00021ad:	c1 e8 12             	shr    eax,0x12
c00021b0:	83 c8 f0             	or     eax,0xfffffff0
c00021b3:	88 02                	mov    BYTE PTR [edx],al
c00021b5:	89 d8                	mov    eax,ebx
c00021b7:	c1 e8 0c             	shr    eax,0xc
c00021ba:	83 e0 3f             	and    eax,0x3f
c00021bd:	83 c8 80             	or     eax,0xffffff80
c00021c0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021c3:	89 d8                	mov    eax,ebx
c00021c5:	83 e3 3f             	and    ebx,0x3f
c00021c8:	c1 e8 06             	shr    eax,0x6
c00021cb:	83 cb 80             	or     ebx,0xffffff80
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c00021d4:	83 c8 80             	or     eax,0xffffff80
c00021d7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c00021da:	b0 04                	mov    al,0x4
c00021dc:	eb 02                	jmp    c00021e0 <put_utf+0xf7>
c00021de:	31 c0                	xor    eax,eax
c00021e0:	5b                   	pop    ebx
c00021e1:	c3                   	ret    

c00021e2 <clst2sect>:
c00021e2:	8d 4a fe             	lea    ecx,[edx-0x2]
c00021e5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00021e8:	83 ea 02             	sub    edx,0x2
c00021eb:	39 ca                	cmp    edx,ecx
c00021ed:	76 0d                	jbe    c00021fc <clst2sect+0x1a>
c00021ef:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00021f3:	0f af d1             	imul   edx,ecx
c00021f6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c00021f9:	89 d0                	mov    eax,edx
c00021fb:	c3                   	ret    
c00021fc:	31 c0                	xor    eax,eax
c00021fe:	c3                   	ret    

c00021ff <pick_lfn>:
c00021ff:	55                   	push   ebp
c0002200:	57                   	push   edi
c0002201:	89 c7                	mov    edi,eax
c0002203:	56                   	push   esi
c0002204:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002207:	53                   	push   ebx
c0002208:	89 d3                	mov    ebx,edx
c000220a:	e8 7c fd ff ff       	call   c0001f8b <ld_word>
c000220f:	66 85 c0             	test   ax,ax
c0002212:	74 04                	je     c0002218 <pick_lfn+0x19>
c0002214:	31 c0                	xor    eax,eax
c0002216:	eb 62                	jmp    c000227a <pick_lfn+0x7b>
c0002218:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000221b:	bd 01 00 00 00       	mov    ebp,0x1
c0002220:	83 e1 bf             	and    ecx,0xffffffbf
c0002223:	31 f6                	xor    esi,esi
c0002225:	49                   	dec    ecx
c0002226:	6b c9 0d             	imul   ecx,ecx,0xd
c0002229:	0f b6 86 80 f6 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0980]
c0002230:	01 d8                	add    eax,ebx
c0002232:	e8 54 fd ff ff       	call   c0001f8b <ld_word>
c0002237:	66 85 ed             	test   bp,bp
c000223a:	74 11                	je     c000224d <pick_lfn+0x4e>
c000223c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002242:	77 d0                	ja     c0002214 <pick_lfn+0x15>
c0002244:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002248:	89 c5                	mov    ebp,eax
c000224a:	41                   	inc    ecx
c000224b:	eb 0a                	jmp    c0002257 <pick_lfn+0x58>
c000224d:	0f b7 c0             	movzx  eax,ax
c0002250:	3d ff ff 00 00       	cmp    eax,0xffff
c0002255:	75 bd                	jne    c0002214 <pick_lfn+0x15>
c0002257:	46                   	inc    esi
c0002258:	83 fe 0d             	cmp    esi,0xd
c000225b:	75 cc                	jne    c0002229 <pick_lfn+0x2a>
c000225d:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002260:	74 13                	je     c0002275 <pick_lfn+0x76>
c0002262:	66 85 ed             	test   bp,bp
c0002265:	74 0e                	je     c0002275 <pick_lfn+0x76>
c0002267:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000226d:	77 a5                	ja     c0002214 <pick_lfn+0x15>
c000226f:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c0002275:	b8 01 00 00 00       	mov    eax,0x1
c000227a:	5b                   	pop    ebx
c000227b:	5e                   	pop    esi
c000227c:	5f                   	pop    edi
c000227d:	5d                   	pop    ebp
c000227e:	c3                   	ret    

c000227f <put_lfn>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	89 d7                	mov    edi,edx
c0002283:	56                   	push   esi
c0002284:	31 f6                	xor    esi,esi
c0002286:	53                   	push   ebx
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000228e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0002296:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000229c:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000229f:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	e8 07 fd ff ff       	call   c0001fb0 <st_word>
c00022a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022b0:	0f b6 d9             	movzx  ebx,cl
c00022b3:	4b                   	dec    ebx
c00022b4:	6b db 0d             	imul   ebx,ebx,0xd
c00022b7:	0f b7 c6             	movzx  eax,si
c00022ba:	3d ff ff 00 00       	cmp    eax,0xffff
c00022bf:	74 09                	je     c00022ca <put_lfn+0x4b>
c00022c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022c5:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022c9:	43                   	inc    ebx
c00022ca:	0f b7 ee             	movzx  ebp,si
c00022cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00022d0:	89 ea                	mov    edx,ebp
c00022d2:	0f b6 80 80 f6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0980]
c00022d9:	01 f8                	add    eax,edi
c00022db:	e8 d0 fc ff ff       	call   c0001fb0 <st_word>
c00022e0:	85 ed                	test   ebp,ebp
c00022e2:	75 05                	jne    c00022e9 <put_lfn+0x6a>
c00022e4:	be ff ff 00 00       	mov    esi,0xffff
c00022e9:	ff 04 24             	inc    DWORD PTR [esp]
c00022ec:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c00022f0:	75 c5                	jne    c00022b7 <put_lfn+0x38>
c00022f2:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00022f8:	74 0b                	je     c0002305 <put_lfn+0x86>
c00022fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fe:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002303:	75 07                	jne    c000230c <put_lfn+0x8d>
c0002305:	83 c9 40             	or     ecx,0x40
c0002308:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000230c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002310:	88 07                	mov    BYTE PTR [edi],al
c0002312:	83 c4 0c             	add    esp,0xc
c0002315:	5b                   	pop    ebx
c0002316:	5e                   	pop    esi
c0002317:	5f                   	pop    edi
c0002318:	5d                   	pop    ebp
c0002319:	c3                   	ret    

c000231a <gen_numname>:
c000231a:	57                   	push   edi
c000231b:	89 cf                	mov    edi,ecx
c000231d:	56                   	push   esi
c000231e:	b9 0b 00 00 00       	mov    ecx,0xb
c0002323:	53                   	push   ebx
c0002324:	89 c6                	mov    esi,eax
c0002326:	83 ec 10             	sub    esp,0x10
c0002329:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000232d:	e8 85 fc ff ff       	call   c0001fb7 <mem_cpy>
c0002332:	83 fb 05             	cmp    ebx,0x5
c0002335:	76 30                	jbe    c0002367 <gen_numname+0x4d>
c0002337:	66 8b 07             	mov    ax,WORD PTR [edi]
c000233a:	66 85 c0             	test   ax,ax
c000233d:	74 28                	je     c0002367 <gen_numname+0x4d>
c000233f:	83 c7 02             	add    edi,0x2
c0002342:	ba 10 00 00 00       	mov    edx,0x10
c0002347:	01 db                	add    ebx,ebx
c0002349:	89 c1                	mov    ecx,eax
c000234b:	c1 e0 10             	shl    eax,0x10
c000234e:	83 e1 01             	and    ecx,0x1
c0002351:	c1 e8 11             	shr    eax,0x11
c0002354:	01 cb                	add    ebx,ecx
c0002356:	0f ba e3 10          	bt     ebx,0x10
c000235a:	73 06                	jae    c0002362 <gen_numname+0x48>
c000235c:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002362:	4a                   	dec    edx
c0002363:	75 e2                	jne    c0002347 <gen_numname+0x2d>
c0002365:	eb d0                	jmp    c0002337 <gen_numname+0x1d>
c0002367:	b8 07 00 00 00       	mov    eax,0x7
c000236c:	89 d9                	mov    ecx,ebx
c000236e:	83 e1 0f             	and    ecx,0xf
c0002371:	8d 79 30             	lea    edi,[ecx+0x30]
c0002374:	89 fa                	mov    edx,edi
c0002376:	83 ff 39             	cmp    edi,0x39
c0002379:	76 03                	jbe    c000237e <gen_numname+0x64>
c000237b:	8d 51 37             	lea    edx,[ecx+0x37]
c000237e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002381:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002385:	89 da                	mov    edx,ebx
c0002387:	c1 ea 04             	shr    edx,0x4
c000238a:	83 fb 0f             	cmp    ebx,0xf
c000238d:	76 06                	jbe    c0002395 <gen_numname+0x7b>
c000238f:	89 c8                	mov    eax,ecx
c0002391:	89 d3                	mov    ebx,edx
c0002393:	eb d7                	jmp    c000236c <gen_numname+0x52>
c0002395:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000239a:	31 d2                	xor    edx,edx
c000239c:	8d 58 fe             	lea    ebx,[eax-0x2]
c000239f:	8d 04 16             	lea    eax,[esi+edx*1]
c00023a2:	39 ca                	cmp    edx,ecx
c00023a4:	73 19                	jae    c00023bf <gen_numname+0xa5>
c00023a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023a9:	83 f8 20             	cmp    eax,0x20
c00023ac:	74 11                	je     c00023bf <gen_numname+0xa5>
c00023ae:	e8 58 fc ff ff       	call   c000200b <dbc_1st>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	74 05                	je     c00023bc <gen_numname+0xa2>
c00023b7:	39 d3                	cmp    ebx,edx
c00023b9:	74 04                	je     c00023bf <gen_numname+0xa5>
c00023bb:	42                   	inc    edx
c00023bc:	42                   	inc    edx
c00023bd:	eb e0                	jmp    c000239f <gen_numname+0x85>
c00023bf:	b0 20                	mov    al,0x20
c00023c1:	83 f9 07             	cmp    ecx,0x7
c00023c4:	77 05                	ja     c00023cb <gen_numname+0xb1>
c00023c6:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ca:	41                   	inc    ecx
c00023cb:	42                   	inc    edx
c00023cc:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00023d0:	83 fa 07             	cmp    edx,0x7
c00023d3:	76 ea                	jbe    c00023bf <gen_numname+0xa5>
c00023d5:	83 c4 10             	add    esp,0x10
c00023d8:	5b                   	pop    ebx
c00023d9:	5e                   	pop    esi
c00023da:	5f                   	pop    edi
c00023db:	c3                   	ret    

c00023dc <sum_sfn>:
c00023dc:	53                   	push   ebx
c00023dd:	31 c9                	xor    ecx,ecx
c00023df:	31 db                	xor    ebx,ebx
c00023e1:	0f b6 d1             	movzx  edx,cl
c00023e4:	c1 e1 07             	shl    ecx,0x7
c00023e7:	d1 ea                	shr    edx,1
c00023e9:	09 ca                	or     edx,ecx
c00023eb:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c00023ee:	43                   	inc    ebx
c00023ef:	01 ca                	add    edx,ecx
c00023f1:	83 fb 0b             	cmp    ebx,0xb
c00023f4:	88 d1                	mov    cl,dl
c00023f6:	75 e9                	jne    c00023e1 <sum_sfn+0x5>
c00023f8:	88 d0                	mov    al,dl
c00023fa:	5b                   	pop    ebx
c00023fb:	c3                   	ret    

c00023fc <get_ldnumber>:
c00023fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00023fe:	85 d2                	test   edx,edx
c0002400:	74 14                	je     c0002416 <get_ldnumber+0x1a>
c0002402:	56                   	push   esi
c0002403:	53                   	push   ebx
c0002404:	89 d3                	mov    ebx,edx
c0002406:	43                   	inc    ebx
c0002407:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000240a:	80 f9 1f             	cmp    cl,0x1f
c000240d:	76 0d                	jbe    c000241c <get_ldnumber+0x20>
c000240f:	80 f9 3a             	cmp    cl,0x3a
c0002412:	75 f2                	jne    c0002406 <get_ldnumber+0xa>
c0002414:	eb 0a                	jmp    c0002420 <get_ldnumber+0x24>
c0002416:	83 c9 ff             	or     ecx,0xffffffff
c0002419:	89 c8                	mov    eax,ecx
c000241b:	c3                   	ret    
c000241c:	31 c9                	xor    ecx,ecx
c000241e:	eb 24                	jmp    c0002444 <get_ldnumber+0x48>
c0002420:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002423:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002426:	80 f9 09             	cmp    cl,0x9
c0002429:	77 16                	ja     c0002441 <get_ldnumber+0x45>
c000242b:	83 c2 02             	add    edx,0x2
c000242e:	83 c9 ff             	or     ecx,0xffffffff
c0002431:	39 d3                	cmp    ebx,edx
c0002433:	75 0f                	jne    c0002444 <get_ldnumber+0x48>
c0002435:	89 f2                	mov    edx,esi
c0002437:	89 18                	mov    DWORD PTR [eax],ebx
c0002439:	0f be ca             	movsx  ecx,dl
c000243c:	83 e9 30             	sub    ecx,0x30
c000243f:	eb 03                	jmp    c0002444 <get_ldnumber+0x48>
c0002441:	83 c9 ff             	or     ecx,0xffffffff
c0002444:	89 c8                	mov    eax,ecx
c0002446:	5b                   	pop    ebx
c0002447:	5e                   	pop    esi
c0002448:	c3                   	ret    

c0002449 <validate>:
c0002449:	56                   	push   esi
c000244a:	53                   	push   ebx
c000244b:	89 d6                	mov    esi,edx
c000244d:	51                   	push   ecx
c000244e:	85 c0                	test   eax,eax
c0002450:	75 09                	jne    c000245b <validate+0x12>
c0002452:	b8 09 00 00 00       	mov    eax,0x9
c0002457:	31 c9                	xor    ecx,ecx
c0002459:	eb 2e                	jmp    c0002489 <validate+0x40>
c000245b:	89 c3                	mov    ebx,eax
c000245d:	8b 00                	mov    eax,DWORD PTR [eax]
c000245f:	85 c0                	test   eax,eax
c0002461:	74 ef                	je     c0002452 <validate+0x9>
c0002463:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002466:	74 ea                	je     c0002452 <validate+0x9>
c0002468:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000246b:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c000246f:	75 e1                	jne    c0002452 <validate+0x9>
c0002471:	83 ec 0c             	sub    esp,0xc
c0002474:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002478:	50                   	push   eax
c0002479:	e8 bc fa ff ff       	call   c0001f3a <disk_status>
c000247e:	83 c4 10             	add    esp,0x10
c0002481:	a8 01                	test   al,0x1
c0002483:	75 cd                	jne    c0002452 <validate+0x9>
c0002485:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002487:	31 c0                	xor    eax,eax
c0002489:	89 0e                	mov    DWORD PTR [esi],ecx
c000248b:	5a                   	pop    edx
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	c3                   	ret    

c000248f <sync_window>:
c000248f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002493:	74 58                	je     c00024ed <sync_window+0x5e>
c0002495:	56                   	push   esi
c0002496:	53                   	push   ebx
c0002497:	8d 70 34             	lea    esi,[eax+0x34]
c000249a:	51                   	push   ecx
c000249b:	89 c3                	mov    ebx,eax
c000249d:	6a 01                	push   0x1
c000249f:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024a2:	56                   	push   esi
c00024a3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024a7:	50                   	push   eax
c00024a8:	e8 a9 fa ff ff       	call   c0001f56 <disk_write>
c00024ad:	83 c4 10             	add    esp,0x10
c00024b0:	ba 01 00 00 00       	mov    edx,0x1
c00024b5:	85 c0                	test   eax,eax
c00024b7:	75 2e                	jne    c00024e7 <sync_window+0x58>
c00024b9:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024bf:	89 c1                	mov    ecx,eax
c00024c1:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024c5:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024c8:	39 d1                	cmp    ecx,edx
c00024ca:	73 19                	jae    c00024e5 <sync_window+0x56>
c00024cc:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00024d0:	75 13                	jne    c00024e5 <sync_window+0x56>
c00024d2:	6a 01                	push   0x1
c00024d4:	01 d0                	add    eax,edx
c00024d6:	50                   	push   eax
c00024d7:	56                   	push   esi
c00024d8:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 74 fa ff ff       	call   c0001f56 <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	31 d2                	xor    edx,edx
c00024e7:	89 d0                	mov    eax,edx
c00024e9:	5a                   	pop    edx
c00024ea:	5b                   	pop    ebx
c00024eb:	5e                   	pop    esi
c00024ec:	c3                   	ret    
c00024ed:	31 d2                	xor    edx,edx
c00024ef:	89 d0                	mov    eax,edx
c00024f1:	c3                   	ret    

c00024f2 <move_window>:
c00024f2:	57                   	push   edi
c00024f3:	56                   	push   esi
c00024f4:	31 f6                	xor    esi,esi
c00024f6:	53                   	push   ebx
c00024f7:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00024fa:	74 32                	je     c000252e <move_window+0x3c>
c00024fc:	89 c3                	mov    ebx,eax
c00024fe:	89 d7                	mov    edi,edx
c0002500:	e8 8a ff ff ff       	call   c000248f <sync_window>
c0002505:	89 c6                	mov    esi,eax
c0002507:	85 c0                	test   eax,eax
c0002509:	75 23                	jne    c000252e <move_window+0x3c>
c000250b:	6a 01                	push   0x1
c000250d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002510:	57                   	push   edi
c0002511:	50                   	push   eax
c0002512:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002516:	50                   	push   eax
c0002517:	e8 24 fa ff ff       	call   c0001f40 <disk_read>
c000251c:	83 c4 10             	add    esp,0x10
c000251f:	85 c0                	test   eax,eax
c0002521:	74 08                	je     c000252b <move_window+0x39>
c0002523:	be 01 00 00 00       	mov    esi,0x1
c0002528:	83 cf ff             	or     edi,0xffffffff
c000252b:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000252e:	89 f0                	mov    eax,esi
c0002530:	5b                   	pop    ebx
c0002531:	5e                   	pop    esi
c0002532:	5f                   	pop    edi
c0002533:	c3                   	ret    

c0002534 <check_fs>:
c0002534:	53                   	push   ebx
c0002535:	89 c3                	mov    ebx,eax
c0002537:	83 ec 08             	sub    esp,0x8
c000253a:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000253e:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002545:	e8 a8 ff ff ff       	call   c00024f2 <move_window>
c000254a:	ba 04 00 00 00       	mov    edx,0x4
c000254f:	85 c0                	test   eax,eax
c0002551:	75 68                	jne    c00025bb <check_fs+0x87>
c0002553:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002559:	e8 2d fa ff ff       	call   c0001f8b <ld_word>
c000255e:	ba 03 00 00 00       	mov    edx,0x3
c0002563:	66 3d 55 aa          	cmp    ax,0xaa55
c0002567:	75 52                	jne    c00025bb <check_fs+0x87>
c0002569:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c000256c:	8d 50 18             	lea    edx,[eax+0x18]
c000256f:	80 fa 01             	cmp    dl,0x1
c0002572:	76 09                	jbe    c000257d <check_fs+0x49>
c0002574:	ba 02 00 00 00       	mov    edx,0x2
c0002579:	3c eb                	cmp    al,0xeb
c000257b:	75 3e                	jne    c00025bb <check_fs+0x87>
c000257d:	ba a0 33 03 c0       	mov    edx,0xc00333a0
c0002582:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002585:	b9 03 00 00 00       	mov    ecx,0x3
c000258a:	e8 48 fa ff ff       	call   c0001fd7 <mem_cmp>
c000258f:	31 d2                	xor    edx,edx
c0002591:	85 c0                	test   eax,eax
c0002593:	74 26                	je     c00025bb <check_fs+0x87>
c0002595:	ba 38 f5 02 c0       	mov    edx,0xc002f538
c000259a:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025a0:	b9 05 00 00 00       	mov    ecx,0x5
c00025a5:	e8 2d fa ff ff       	call   c0001fd7 <mem_cmp>
c00025aa:	31 d2                	xor    edx,edx
c00025ac:	85 c0                	test   eax,eax
c00025ae:	74 0b                	je     c00025bb <check_fs+0x87>
c00025b0:	31 d2                	xor    edx,edx
c00025b2:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025b6:	0f 95 c2             	setne  dl
c00025b9:	01 d2                	add    edx,edx
c00025bb:	89 d0                	mov    eax,edx
c00025bd:	83 c4 08             	add    esp,0x8
c00025c0:	5b                   	pop    ebx
c00025c1:	c3                   	ret    

c00025c2 <find_volume>:
c00025c2:	55                   	push   ebp
c00025c3:	57                   	push   edi
c00025c4:	56                   	push   esi
c00025c5:	89 c6                	mov    esi,eax
c00025c7:	53                   	push   ebx
c00025c8:	89 d3                	mov    ebx,edx
c00025ca:	83 ec 2c             	sub    esp,0x2c
c00025cd:	31 d2                	xor    edx,edx
c00025cf:	e8 60 ff ff ff       	call   c0002534 <check_fs>
c00025d4:	83 f8 02             	cmp    eax,0x2
c00025d7:	74 06                	je     c00025df <find_volume+0x1d>
c00025d9:	77 62                	ja     c000263d <find_volume+0x7b>
c00025db:	85 db                	test   ebx,ebx
c00025dd:	74 5e                	je     c000263d <find_volume+0x7b>
c00025df:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c00025e3:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c00025e9:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c00025ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025f3:	89 cf                	mov    edi,ecx
c00025f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00025f9:	89 e8                	mov    eax,ebp
c00025fb:	83 c5 10             	add    ebp,0x10
c00025fe:	e8 95 f9 ff ff       	call   c0001f98 <ld_dword>
c0002603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002607:	89 01                	mov    DWORD PTR [ecx],eax
c0002609:	83 c1 04             	add    ecx,0x4
c000260c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002610:	75 e3                	jne    c00025f5 <find_volume+0x33>
c0002612:	31 ed                	xor    ebp,ebp
c0002614:	85 db                	test   ebx,ebx
c0002616:	74 03                	je     c000261b <find_volume+0x59>
c0002618:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000261b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000261e:	b8 03 00 00 00       	mov    eax,0x3
c0002623:	85 d2                	test   edx,edx
c0002625:	74 0c                	je     c0002633 <find_volume+0x71>
c0002627:	89 f0                	mov    eax,esi
c0002629:	e8 06 ff ff ff       	call   c0002534 <check_fs>
c000262e:	83 f8 01             	cmp    eax,0x1
c0002631:	76 0a                	jbe    c000263d <find_volume+0x7b>
c0002633:	85 db                	test   ebx,ebx
c0002635:	75 06                	jne    c000263d <find_volume+0x7b>
c0002637:	45                   	inc    ebp
c0002638:	83 fd 03             	cmp    ebp,0x3
c000263b:	76 de                	jbe    c000261b <find_volume+0x59>
c000263d:	83 c4 2c             	add    esp,0x2c
c0002640:	5b                   	pop    ebx
c0002641:	5e                   	pop    esi
c0002642:	5f                   	pop    edi
c0002643:	5d                   	pop    ebp
c0002644:	c3                   	ret    

c0002645 <mount_volume>:
c0002645:	55                   	push   ebp
c0002646:	89 d5                	mov    ebp,edx
c0002648:	57                   	push   edi
c0002649:	89 cf                	mov    edi,ecx
c000264b:	56                   	push   esi
c000264c:	53                   	push   ebx
c000264d:	bb 0b 00 00 00       	mov    ebx,0xb
c0002652:	83 ec 1c             	sub    esp,0x1c
c0002655:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000265b:	e8 9c fd ff ff       	call   c00023fc <get_ldnumber>
c0002660:	85 c0                	test   eax,eax
c0002662:	0f 88 c4 02 00 00    	js     c000292c <mount_volume+0x2e7>
c0002668:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c000266f:	89 c2                	mov    edx,eax
c0002671:	bb 0c 00 00 00       	mov    ebx,0xc
c0002676:	85 f6                	test   esi,esi
c0002678:	0f 84 ae 02 00 00    	je     c000292c <mount_volume+0x2e7>
c000267e:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002681:	83 e7 fe             	and    edi,0xfffffffe
c0002684:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002687:	74 3a                	je     c00026c3 <mount_volume+0x7e>
c0002689:	89 04 24             	mov    DWORD PTR [esp],eax
c000268c:	83 ec 0c             	sub    esp,0xc
c000268f:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002693:	50                   	push   eax
c0002694:	e8 a1 f8 ff ff       	call   c0001f3a <disk_status>
c0002699:	83 c4 10             	add    esp,0x10
c000269c:	a8 01                	test   al,0x1
c000269e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026a1:	75 20                	jne    c00026c3 <mount_volume+0x7e>
c00026a3:	31 db                	xor    ebx,ebx
c00026a5:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026ab:	0f 84 7b 02 00 00    	je     c000292c <mount_volume+0x2e7>
c00026b1:	a8 04                	test   al,0x4
c00026b3:	0f 84 73 02 00 00    	je     c000292c <mount_volume+0x2e7>
c00026b9:	bb 0a 00 00 00       	mov    ebx,0xa
c00026be:	e9 69 02 00 00       	jmp    c000292c <mount_volume+0x2e7>
c00026c3:	83 ec 0c             	sub    esp,0xc
c00026c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026c9:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c00026cc:	0f b6 c2             	movzx  eax,dl
c00026cf:	bb 03 00 00 00       	mov    ebx,0x3
c00026d4:	50                   	push   eax
c00026d5:	e8 63 f8 ff ff       	call   c0001f3d <disk_initialize>
c00026da:	83 c4 10             	add    esp,0x10
c00026dd:	a8 01                	test   al,0x1
c00026df:	0f 85 47 02 00 00    	jne    c000292c <mount_volume+0x2e7>
c00026e5:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026eb:	74 04                	je     c00026f1 <mount_volume+0xac>
c00026ed:	a8 04                	test   al,0x4
c00026ef:	75 c8                	jne    c00026b9 <mount_volume+0x74>
c00026f1:	31 d2                	xor    edx,edx
c00026f3:	89 f0                	mov    eax,esi
c00026f5:	bb 01 00 00 00       	mov    ebx,0x1
c00026fa:	e8 c3 fe ff ff       	call   c00025c2 <find_volume>
c00026ff:	83 f8 04             	cmp    eax,0x4
c0002702:	0f 84 24 02 00 00    	je     c000292c <mount_volume+0x2e7>
c0002708:	83 f8 01             	cmp    eax,0x1
c000270b:	76 0a                	jbe    c0002717 <mount_volume+0xd2>
c000270d:	bb 0d 00 00 00       	mov    ebx,0xd
c0002712:	e9 15 02 00 00       	jmp    c000292c <mount_volume+0x2e7>
c0002717:	8d 46 3f             	lea    eax,[esi+0x3f]
c000271a:	e8 6c f8 ff ff       	call   c0001f8b <ld_word>
c000271f:	66 3d 00 02          	cmp    ax,0x200
c0002723:	75 e8                	jne    c000270d <mount_volume+0xc8>
c0002725:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002728:	e8 5e f8 ff ff       	call   c0001f8b <ld_word>
c000272d:	0f b7 c0             	movzx  eax,ax
c0002730:	89 04 24             	mov    DWORD PTR [esp],eax
c0002733:	85 c0                	test   eax,eax
c0002735:	75 0b                	jne    c0002742 <mount_volume+0xfd>
c0002737:	8d 46 58             	lea    eax,[esi+0x58]
c000273a:	e8 59 f8 ff ff       	call   c0001f98 <ld_dword>
c000273f:	89 04 24             	mov    DWORD PTR [esp],eax
c0002742:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002745:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002749:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000274c:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000274f:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002752:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002756:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0002759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000275d:	48                   	dec    eax
c000275e:	3c 01                	cmp    al,0x1
c0002760:	77 ab                	ja     c000270d <mount_volume+0xc8>
c0002762:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0002766:	89 c3                	mov    ebx,eax
c0002768:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c000276c:	66 85 c0             	test   ax,ax
c000276f:	74 9c                	je     c000270d <mount_volume+0xc8>
c0002771:	8d 40 ff             	lea    eax,[eax-0x1]
c0002774:	85 d8                	test   eax,ebx
c0002776:	75 95                	jne    c000270d <mount_volume+0xc8>
c0002778:	8d 46 45             	lea    eax,[esi+0x45]
c000277b:	e8 0b f8 ff ff       	call   c0001f8b <ld_word>
c0002780:	89 c7                	mov    edi,eax
c0002782:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002786:	a8 0f                	test   al,0xf
c0002788:	75 83                	jne    c000270d <mount_volume+0xc8>
c000278a:	8d 46 47             	lea    eax,[esi+0x47]
c000278d:	e8 f9 f7 ff ff       	call   c0001f8b <ld_word>
c0002792:	0f b7 e8             	movzx  ebp,ax
c0002795:	85 ed                	test   ebp,ebp
c0002797:	75 0a                	jne    c00027a3 <mount_volume+0x15e>
c0002799:	8d 46 54             	lea    eax,[esi+0x54]
c000279c:	e8 f7 f7 ff ff       	call   c0001f98 <ld_dword>
c00027a1:	89 c5                	mov    ebp,eax
c00027a3:	8d 46 42             	lea    eax,[esi+0x42]
c00027a6:	e8 e0 f7 ff ff       	call   c0001f8b <ld_word>
c00027ab:	0f b7 c8             	movzx  ecx,ax
c00027ae:	85 c9                	test   ecx,ecx
c00027b0:	0f 84 57 ff ff ff    	je     c000270d <mount_volume+0xc8>
c00027b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027bb:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027c3:	0f b7 c7             	movzx  eax,di
c00027c6:	c1 e8 04             	shr    eax,0x4
c00027c9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00027cd:	01 c8                	add    eax,ecx
c00027cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d3:	39 c5                	cmp    ebp,eax
c00027d5:	0f 82 32 ff ff ff    	jb     c000270d <mount_volume+0xc8>
c00027db:	29 c5                	sub    ebp,eax
c00027dd:	31 d2                	xor    edx,edx
c00027df:	89 e8                	mov    eax,ebp
c00027e1:	f7 f3                	div    ebx
c00027e3:	39 dd                	cmp    ebp,ebx
c00027e5:	0f 82 22 ff ff ff    	jb     c000270d <mount_volume+0xc8>
c00027eb:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027f0:	0f 87 17 ff ff ff    	ja     c000270d <mount_volume+0xc8>
c00027f6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027fb:	0f 86 1c 01 00 00    	jbe    c000291d <mount_volume+0x2d8>
c0002801:	bb 03 00 00 00       	mov    ebx,0x3
c0002806:	8d 68 02             	lea    ebp,[eax+0x2]
c0002809:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000280d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002811:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002815:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002818:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000281b:	01 c8                	add    eax,ecx
c000281d:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002820:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002823:	83 fb 03             	cmp    ebx,0x3
c0002826:	75 23                	jne    c000284b <mount_volume+0x206>
c0002828:	8d 46 5e             	lea    eax,[esi+0x5e]
c000282b:	e8 5b f7 ff ff       	call   c0001f8b <ld_word>
c0002830:	09 c7                	or     edi,eax
c0002832:	66 85 ff             	test   di,di
c0002835:	0f 85 d2 fe ff ff    	jne    c000270d <mount_volume+0xc8>
c000283b:	8d 46 60             	lea    eax,[esi+0x60]
c000283e:	c1 e5 02             	shl    ebp,0x2
c0002841:	e8 52 f7 ff ff       	call   c0001f98 <ld_dword>
c0002846:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002849:	eb 24                	jmp    c000286f <mount_volume+0x22a>
c000284b:	66 85 ff             	test   di,di
c000284e:	0f 84 b9 fe ff ff    	je     c000270d <mount_volume+0xc8>
c0002854:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002858:	83 fb 02             	cmp    ebx,0x2
c000285b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000285e:	75 04                	jne    c0002864 <mount_volume+0x21f>
c0002860:	01 ed                	add    ebp,ebp
c0002862:	eb 0b                	jmp    c000286f <mount_volume+0x22a>
c0002864:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c0002868:	83 e5 01             	and    ebp,0x1
c000286b:	d1 e8                	shr    eax,1
c000286d:	01 c5                	add    ebp,eax
c000286f:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002875:	c1 ed 09             	shr    ebp,0x9
c0002878:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c000287b:	0f 87 8c fe ff ff    	ja     c000270d <mount_volume+0xc8>
c0002881:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002888:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000288f:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002893:	83 fb 03             	cmp    ebx,0x3
c0002896:	75 6e                	jne    c0002906 <mount_volume+0x2c1>
c0002898:	8d 46 64             	lea    eax,[esi+0x64]
c000289b:	e8 eb f6 ff ff       	call   c0001f8b <ld_word>
c00028a0:	66 48                	dec    ax
c00028a2:	75 62                	jne    c0002906 <mount_volume+0x2c1>
c00028a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028a8:	89 f0                	mov    eax,esi
c00028aa:	42                   	inc    edx
c00028ab:	e8 42 fc ff ff       	call   c00024f2 <move_window>
c00028b0:	85 c0                	test   eax,eax
c00028b2:	75 52                	jne    c0002906 <mount_volume+0x2c1>
c00028b4:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028b8:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028be:	e8 c8 f6 ff ff       	call   c0001f8b <ld_word>
c00028c3:	66 3d 55 aa          	cmp    ax,0xaa55
c00028c7:	75 3d                	jne    c0002906 <mount_volume+0x2c1>
c00028c9:	8d 46 34             	lea    eax,[esi+0x34]
c00028cc:	e8 c7 f6 ff ff       	call   c0001f98 <ld_dword>
c00028d1:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028d6:	75 2e                	jne    c0002906 <mount_volume+0x2c1>
c00028d8:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00028de:	e8 b5 f6 ff ff       	call   c0001f98 <ld_dword>
c00028e3:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028e8:	75 1c                	jne    c0002906 <mount_volume+0x2c1>
c00028ea:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00028f0:	e8 a3 f6 ff ff       	call   c0001f98 <ld_dword>
c00028f5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00028f8:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00028fe:	e8 95 f6 ff ff       	call   c0001f98 <ld_dword>
c0002903:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002906:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c000290c:	88 1e                	mov    BYTE PTR [esi],bl
c000290e:	40                   	inc    eax
c000290f:	31 db                	xor    ebx,ebx
c0002911:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002917:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000291b:	eb 0f                	jmp    c000292c <mount_volume+0x2e7>
c000291d:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002922:	19 db                	sbb    ebx,ebx
c0002924:	83 c3 02             	add    ebx,0x2
c0002927:	e9 da fe ff ff       	jmp    c0002806 <mount_volume+0x1c1>
c000292c:	83 c4 1c             	add    esp,0x1c
c000292f:	89 d8                	mov    eax,ebx
c0002931:	5b                   	pop    ebx
c0002932:	5e                   	pop    esi
c0002933:	5f                   	pop    edi
c0002934:	5d                   	pop    ebp
c0002935:	c3                   	ret    

c0002936 <put_fat>:
c0002936:	55                   	push   ebp
c0002937:	bd 02 00 00 00       	mov    ebp,0x2
c000293c:	57                   	push   edi
c000293d:	56                   	push   esi
c000293e:	53                   	push   ebx
c000293f:	83 ec 1c             	sub    esp,0x1c
c0002942:	83 fa 01             	cmp    edx,0x1
c0002945:	0f 86 38 01 00 00    	jbe    c0002a83 <put_fat+0x14d>
c000294b:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000294e:	0f 86 2f 01 00 00    	jbe    c0002a83 <put_fat+0x14d>
c0002954:	89 c6                	mov    esi,eax
c0002956:	89 cf                	mov    edi,ecx
c0002958:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000295b:	89 d3                	mov    ebx,edx
c000295d:	83 f8 02             	cmp    eax,0x2
c0002960:	0f 84 b1 00 00 00    	je     c0002a17 <put_fat+0xe1>
c0002966:	83 f8 03             	cmp    eax,0x3
c0002969:	0f 84 d5 00 00 00    	je     c0002a44 <put_fat+0x10e>
c000296f:	48                   	dec    eax
c0002970:	0f 85 0d 01 00 00    	jne    c0002a83 <put_fat+0x14d>
c0002976:	89 d1                	mov    ecx,edx
c0002978:	89 f0                	mov    eax,esi
c000297a:	d1 e9                	shr    ecx,1
c000297c:	01 d1                	add    ecx,edx
c000297e:	89 ca                	mov    edx,ecx
c0002980:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002984:	c1 ea 09             	shr    edx,0x9
c0002987:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000298a:	e8 63 fb ff ff       	call   c00024f2 <move_window>
c000298f:	89 c5                	mov    ebp,eax
c0002991:	85 c0                	test   eax,eax
c0002993:	0f 85 ea 00 00 00    	jne    c0002a83 <put_fat+0x14d>
c0002999:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000299d:	8d 46 34             	lea    eax,[esi+0x34]
c00029a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029a4:	8d 41 01             	lea    eax,[ecx+0x1]
c00029a7:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029b1:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029b5:	89 f8                	mov    eax,edi
c00029b7:	83 e3 01             	and    ebx,0x1
c00029ba:	74 11                	je     c00029cd <put_fat+0x97>
c00029bc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029be:	89 f8                	mov    eax,edi
c00029c0:	83 e2 0f             	and    edx,0xf
c00029c3:	c1 e0 04             	shl    eax,0x4
c00029c6:	25 f0 0f 00 00       	and    eax,0xff0
c00029cb:	09 d0                	or     eax,edx
c00029cd:	88 01                	mov    BYTE PTR [ecx],al
c00029cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00029d7:	c1 ea 09             	shr    edx,0x9
c00029da:	89 f0                	mov    eax,esi
c00029dc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029df:	e8 0e fb ff ff       	call   c00024f2 <move_window>
c00029e4:	89 c5                	mov    ebp,eax
c00029e6:	85 c0                	test   eax,eax
c00029e8:	0f 85 95 00 00 00    	jne    c0002a83 <put_fat+0x14d>
c00029ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029f2:	25 ff 01 00 00       	and    eax,0x1ff
c00029f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029fb:	85 db                	test   ebx,ebx
c00029fd:	74 07                	je     c0002a06 <put_fat+0xd0>
c00029ff:	c1 ef 04             	shr    edi,0x4
c0002a02:	89 f9                	mov    ecx,edi
c0002a04:	eb 0d                	jmp    c0002a13 <put_fat+0xdd>
c0002a06:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a08:	c1 ef 08             	shr    edi,0x8
c0002a0b:	83 e1 f0             	and    ecx,0xfffffff0
c0002a0e:	83 e7 0f             	and    edi,0xf
c0002a11:	09 f9                	or     ecx,edi
c0002a13:	88 08                	mov    BYTE PTR [eax],cl
c0002a15:	eb 27                	jmp    c0002a3e <put_fat+0x108>
c0002a17:	c1 ea 08             	shr    edx,0x8
c0002a1a:	89 f0                	mov    eax,esi
c0002a1c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a1f:	e8 ce fa ff ff       	call   c00024f2 <move_window>
c0002a24:	89 c5                	mov    ebp,eax
c0002a26:	85 c0                	test   eax,eax
c0002a28:	75 59                	jne    c0002a83 <put_fat+0x14d>
c0002a2a:	01 db                	add    ebx,ebx
c0002a2c:	0f b7 d7             	movzx  edx,di
c0002a2f:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a35:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a39:	e8 72 f5 ff ff       	call   c0001fb0 <st_word>
c0002a3e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a42:	eb 3f                	jmp    c0002a83 <put_fat+0x14d>
c0002a44:	c1 ea 07             	shr    edx,0x7
c0002a47:	89 f0                	mov    eax,esi
c0002a49:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a4c:	e8 a1 fa ff ff       	call   c00024f2 <move_window>
c0002a51:	89 c5                	mov    ebp,eax
c0002a53:	85 c0                	test   eax,eax
c0002a55:	75 2c                	jne    c0002a83 <put_fat+0x14d>
c0002a57:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a5d:	c1 e3 02             	shl    ebx,0x2
c0002a60:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a66:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a6a:	89 d8                	mov    eax,ebx
c0002a6c:	e8 27 f5 ff ff       	call   c0001f98 <ld_dword>
c0002a71:	25 00 00 00 f0       	and    eax,0xf0000000
c0002a76:	09 f8                	or     eax,edi
c0002a78:	89 c2                	mov    edx,eax
c0002a7a:	89 d8                	mov    eax,ebx
c0002a7c:	e8 33 f5 ff ff       	call   c0001fb4 <st_dword>
c0002a81:	eb bb                	jmp    c0002a3e <put_fat+0x108>
c0002a83:	83 c4 1c             	add    esp,0x1c
c0002a86:	89 e8                	mov    eax,ebp
c0002a88:	5b                   	pop    ebx
c0002a89:	5e                   	pop    esi
c0002a8a:	5f                   	pop    edi
c0002a8b:	5d                   	pop    ebp
c0002a8c:	c3                   	ret    

c0002a8d <dir_clear>:
c0002a8d:	55                   	push   ebp
c0002a8e:	57                   	push   edi
c0002a8f:	56                   	push   esi
c0002a90:	89 c6                	mov    esi,eax
c0002a92:	53                   	push   ebx
c0002a93:	83 ec 1c             	sub    esp,0x1c
c0002a96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002a9a:	e8 f0 f9 ff ff       	call   c000248f <sync_window>
c0002a9f:	85 c0                	test   eax,eax
c0002aa1:	0f 85 c0 00 00 00    	jne    c0002b67 <dir_clear+0xda>
c0002aa7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002aab:	89 f0                	mov    eax,esi
c0002aad:	e8 30 f7 ff ff       	call   c00021e2 <clst2sect>
c0002ab2:	31 d2                	xor    edx,edx
c0002ab4:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002ab7:	89 c5                	mov    ebp,eax
c0002ab9:	b9 00 02 00 00       	mov    ecx,0x200
c0002abe:	8d 46 34             	lea    eax,[esi+0x34]
c0002ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ac5:	e8 02 f5 ff ff       	call   c0001fcc <mem_set>
c0002aca:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002ace:	c1 e3 09             	shl    ebx,0x9
c0002ad1:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002ad7:	76 1b                	jbe    c0002af4 <dir_clear+0x67>
c0002ad9:	bb 00 80 00 00       	mov    ebx,0x8000
c0002ade:	eb 14                	jmp    c0002af4 <dir_clear+0x67>
c0002ae0:	83 ec 0c             	sub    esp,0xc
c0002ae3:	53                   	push   ebx
c0002ae4:	e8 eb 32 00 00       	call   c0005dd4 <ff_memalloc>
c0002ae9:	83 c4 10             	add    esp,0x10
c0002aec:	89 c7                	mov    edi,eax
c0002aee:	85 c0                	test   eax,eax
c0002af0:	75 7c                	jne    c0002b6e <dir_clear+0xe1>
c0002af2:	d1 eb                	shr    ebx,1
c0002af4:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002afa:	77 e4                	ja     c0002ae0 <dir_clear+0x53>
c0002afc:	31 db                	xor    ebx,ebx
c0002afe:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b02:	39 d8                	cmp    eax,ebx
c0002b04:	76 53                	jbe    c0002b59 <dir_clear+0xcc>
c0002b06:	6a 01                	push   0x1
c0002b08:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b0b:	50                   	push   eax
c0002b0c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b14:	50                   	push   eax
c0002b15:	e8 3c f4 ff ff       	call   c0001f56 <disk_write>
c0002b1a:	83 c4 10             	add    esp,0x10
c0002b1d:	85 c0                	test   eax,eax
c0002b1f:	75 38                	jne    c0002b59 <dir_clear+0xcc>
c0002b21:	43                   	inc    ebx
c0002b22:	eb da                	jmp    c0002afe <dir_clear+0x71>
c0002b24:	52                   	push   edx
c0002b25:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b2c:	50                   	push   eax
c0002b2d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b31:	57                   	push   edi
c0002b32:	50                   	push   eax
c0002b33:	e8 1e f4 ff ff       	call   c0001f56 <disk_write>
c0002b38:	83 c4 10             	add    esp,0x10
c0002b3b:	85 c0                	test   eax,eax
c0002b3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b41:	75 0a                	jne    c0002b4d <dir_clear+0xc0>
c0002b43:	01 d3                	add    ebx,edx
c0002b45:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b49:	39 d8                	cmp    eax,ebx
c0002b4b:	77 d7                	ja     c0002b24 <dir_clear+0x97>
c0002b4d:	83 ec 0c             	sub    esp,0xc
c0002b50:	57                   	push   edi
c0002b51:	e8 96 32 00 00       	call   c0005dec <ff_memfree>
c0002b56:	83 c4 10             	add    esp,0x10
c0002b59:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b5d:	39 d8                	cmp    eax,ebx
c0002b5f:	0f 95 c0             	setne  al
c0002b62:	0f b6 c0             	movzx  eax,al
c0002b65:	eb 19                	jmp    c0002b80 <dir_clear+0xf3>
c0002b67:	b8 01 00 00 00       	mov    eax,0x1
c0002b6c:	eb 12                	jmp    c0002b80 <dir_clear+0xf3>
c0002b6e:	89 d9                	mov    ecx,ebx
c0002b70:	31 d2                	xor    edx,edx
c0002b72:	e8 55 f4 ff ff       	call   c0001fcc <mem_set>
c0002b77:	89 da                	mov    edx,ebx
c0002b79:	31 db                	xor    ebx,ebx
c0002b7b:	c1 ea 09             	shr    edx,0x9
c0002b7e:	eb c5                	jmp    c0002b45 <dir_clear+0xb8>
c0002b80:	83 c4 1c             	add    esp,0x1c
c0002b83:	5b                   	pop    ebx
c0002b84:	5e                   	pop    esi
c0002b85:	5f                   	pop    edi
c0002b86:	5d                   	pop    ebp
c0002b87:	c3                   	ret    

c0002b88 <create_name>:
c0002b88:	55                   	push   ebp
c0002b89:	57                   	push   edi
c0002b8a:	89 d7                	mov    edi,edx
c0002b8c:	56                   	push   esi
c0002b8d:	31 f6                	xor    esi,esi
c0002b8f:	53                   	push   ebx
c0002b90:	83 ec 3c             	sub    esp,0x3c
c0002b93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b97:	8b 02                	mov    eax,DWORD PTR [edx]
c0002b99:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0002ba3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002ba6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002baa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002bae:	e8 5e f4 ff ff       	call   c0002011 <tchar2uni>
c0002bb3:	89 c3                	mov    ebx,eax
c0002bb5:	83 f8 ff             	cmp    eax,0xffffffff
c0002bb8:	75 0a                	jne    c0002bc4 <create_name+0x3c>
c0002bba:	b8 06 00 00 00       	mov    eax,0x6
c0002bbf:	e9 93 02 00 00       	jmp    c0002e57 <create_name+0x2cf>
c0002bc4:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bc9:	76 0c                	jbe    c0002bd7 <create_name+0x4f>
c0002bcb:	c1 e8 10             	shr    eax,0x10
c0002bce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bd2:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002bd6:	46                   	inc    esi
c0002bd7:	0f b7 d3             	movzx  edx,bx
c0002bda:	83 fa 1f             	cmp    edx,0x1f
c0002bdd:	76 4a                	jbe    c0002c29 <create_name+0xa1>
c0002bdf:	83 fa 5c             	cmp    edx,0x5c
c0002be2:	74 30                	je     c0002c14 <create_name+0x8c>
c0002be4:	83 fa 2f             	cmp    edx,0x2f
c0002be7:	74 2b                	je     c0002c14 <create_name+0x8c>
c0002be9:	83 fa 7f             	cmp    edx,0x7f
c0002bec:	77 0e                	ja     c0002bfc <create_name+0x74>
c0002bee:	b8 3e f5 02 c0       	mov    eax,0xc002f53e
c0002bf3:	e8 02 f4 ff ff       	call   c0001ffa <chk_chr>
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 be                	jne    c0002bba <create_name+0x32>
c0002bfc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c02:	77 b6                	ja     c0002bba <create_name+0x32>
c0002c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c08:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c0c:	46                   	inc    esi
c0002c0d:	eb 9b                	jmp    c0002baa <create_name+0x22>
c0002c0f:	40                   	inc    eax
c0002c10:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c18:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c1b:	83 fa 2f             	cmp    edx,0x2f
c0002c1e:	74 ef                	je     c0002c0f <create_name+0x87>
c0002c20:	83 fa 5c             	cmp    edx,0x5c
c0002c23:	74 ea                	je     c0002c0f <create_name+0x87>
c0002c25:	31 db                	xor    ebx,ebx
c0002c27:	eb 02                	jmp    c0002c2b <create_name+0xa3>
c0002c29:	b3 04                	mov    bl,0x4
c0002c2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c2f:	89 07                	mov    DWORD PTR [edi],eax
c0002c31:	85 f6                	test   esi,esi
c0002c33:	74 16                	je     c0002c4b <create_name+0xc3>
c0002c35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c39:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c3e:	83 f8 20             	cmp    eax,0x20
c0002c41:	74 05                	je     c0002c48 <create_name+0xc0>
c0002c43:	83 f8 2e             	cmp    eax,0x2e
c0002c46:	75 03                	jne    c0002c4b <create_name+0xc3>
c0002c48:	4e                   	dec    esi
c0002c49:	eb e6                	jmp    c0002c31 <create_name+0xa9>
c0002c4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c4f:	31 ff                	xor    edi,edi
c0002c51:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c57:	85 f6                	test   esi,esi
c0002c59:	0f 84 5b ff ff ff    	je     c0002bba <create_name+0x32>
c0002c5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c63:	8d 57 01             	lea    edx,[edi+0x1]
c0002c66:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c6a:	83 f8 20             	cmp    eax,0x20
c0002c6d:	75 04                	jne    c0002c73 <create_name+0xeb>
c0002c6f:	89 d7                	mov    edi,edx
c0002c71:	eb ec                	jmp    c0002c5f <create_name+0xd7>
c0002c73:	85 ff                	test   edi,edi
c0002c75:	75 05                	jne    c0002c7c <create_name+0xf4>
c0002c77:	83 f8 2e             	cmp    eax,0x2e
c0002c7a:	75 08                	jne    c0002c84 <create_name+0xfc>
c0002c7c:	83 cb 03             	or     ebx,0x3
c0002c7f:	eb 03                	jmp    c0002c84 <create_name+0xfc>
c0002c81:	4e                   	dec    esi
c0002c82:	74 0c                	je     c0002c90 <create_name+0x108>
c0002c84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c88:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002c8e:	75 f1                	jne    c0002c81 <create_name+0xf9>
c0002c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c94:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c99:	83 c0 20             	add    eax,0x20
c0002c9c:	ba 20 00 00 00       	mov    edx,0x20
c0002ca1:	31 ed                	xor    ebp,ebp
c0002ca3:	e8 24 f3 ff ff       	call   c0001fcc <mem_set>
c0002ca8:	b9 08 00 00 00       	mov    ecx,0x8
c0002cad:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002cb2:	8d 47 01             	lea    eax,[edi+0x1]
c0002cb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cc1:	89 c7                	mov    edi,eax
c0002cc3:	85 c0                	test   eax,eax
c0002cc5:	0f 84 25 01 00 00    	je     c0002df0 <create_name+0x268>
c0002ccb:	83 f8 20             	cmp    eax,0x20
c0002cce:	74 0f                	je     c0002cdf <create_name+0x157>
c0002cd0:	83 f8 2e             	cmp    eax,0x2e
c0002cd3:	75 13                	jne    c0002ce8 <create_name+0x160>
c0002cd5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002cd9:	0f 84 6a 01 00 00    	je     c0002e49 <create_name+0x2c1>
c0002cdf:	83 cb 03             	or     ebx,0x3
c0002ce2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002ce6:	eb ca                	jmp    c0002cb2 <create_name+0x12a>
c0002ce8:	39 cd                	cmp    ebp,ecx
c0002cea:	73 0b                	jae    c0002cf7 <create_name+0x16f>
c0002cec:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002cf0:	75 3f                	jne    c0002d31 <create_name+0x1a9>
c0002cf2:	e9 52 01 00 00       	jmp    c0002e49 <create_name+0x2c1>
c0002cf7:	83 f9 0b             	cmp    ecx,0xb
c0002cfa:	75 0d                	jne    c0002d09 <create_name+0x181>
c0002cfc:	83 cb 03             	or     ebx,0x3
c0002cff:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d04:	e9 e7 00 00 00       	jmp    c0002df0 <create_name+0x268>
c0002d09:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0d:	74 0d                	je     c0002d1c <create_name+0x194>
c0002d0f:	83 cb 03             	or     ebx,0x3
c0002d12:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d16:	0f 87 d4 00 00 00    	ja     c0002df0 <create_name+0x268>
c0002d1c:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d21:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d25:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d2a:	bd 08 00 00 00       	mov    ebp,0x8
c0002d2f:	eb b1                	jmp    c0002ce2 <create_name+0x15a>
c0002d31:	83 f8 7f             	cmp    eax,0x7f
c0002d34:	76 66                	jbe    c0002d9c <create_name+0x214>
c0002d36:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3a:	89 d9                	mov    ecx,ebx
c0002d3c:	83 c9 02             	or     ecx,0x2
c0002d3f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d43:	52                   	push   edx
c0002d44:	52                   	push   edx
c0002d45:	68 b5 01 00 00       	push   0x1b5
c0002d4a:	50                   	push   eax
c0002d4b:	e8 b4 30 00 00       	call   c0005e04 <ff_uni2oem>
c0002d50:	83 c4 10             	add    esp,0x10
c0002d53:	89 c7                	mov    edi,eax
c0002d55:	a8 80                	test   al,0x80
c0002d57:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d5b:	74 0c                	je     c0002d69 <create_name+0x1e1>
c0002d5d:	83 e7 7f             	and    edi,0x7f
c0002d60:	0f b6 bf 00 f6 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0a00]
c0002d67:	eb 2a                	jmp    c0002d93 <create_name+0x20b>
c0002d69:	0f b7 c0             	movzx  eax,ax
c0002d6c:	3d ff 00 00 00       	cmp    eax,0xff
c0002d71:	76 20                	jbe    c0002d93 <create_name+0x20b>
c0002d73:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002d76:	39 ea                	cmp    edx,ebp
c0002d78:	77 0a                	ja     c0002d84 <create_name+0x1fc>
c0002d7a:	83 cb 03             	or     ebx,0x3
c0002d7d:	89 cd                	mov    ebp,ecx
c0002d7f:	e9 5e ff ff ff       	jmp    c0002ce2 <create_name+0x15a>
c0002d84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002d88:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002d8c:	45                   	inc    ebp
c0002d8d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d91:	eb 4d                	jmp    c0002de0 <create_name+0x258>
c0002d93:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d97:	66 85 ff             	test   di,di
c0002d9a:	74 19                	je     c0002db5 <create_name+0x22d>
c0002d9c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002da0:	0f b7 d7             	movzx  edx,di
c0002da3:	b8 47 f5 02 c0       	mov    eax,0xc002f547
c0002da8:	e8 4d f2 ff ff       	call   c0001ffa <chk_chr>
c0002dad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002db1:	85 c0                	test   eax,eax
c0002db3:	74 0a                	je     c0002dbf <create_name+0x237>
c0002db5:	83 cb 03             	or     ebx,0x3
c0002db8:	bf 5f 00 00 00       	mov    edi,0x5f
c0002dbd:	eb 21                	jmp    c0002de0 <create_name+0x258>
c0002dbf:	8d 47 bf             	lea    eax,[edi-0x41]
c0002dc2:	66 83 f8 19          	cmp    ax,0x19
c0002dc6:	77 07                	ja     c0002dcf <create_name+0x247>
c0002dc8:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002dcd:	eb 11                	jmp    c0002de0 <create_name+0x258>
c0002dcf:	8d 47 9f             	lea    eax,[edi-0x61]
c0002dd2:	66 83 f8 19          	cmp    ax,0x19
c0002dd6:	77 08                	ja     c0002de0 <create_name+0x258>
c0002dd8:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002ddd:	83 ef 20             	sub    edi,0x20
c0002de0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002de4:	89 f8                	mov    eax,edi
c0002de6:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002dea:	45                   	inc    ebp
c0002deb:	e9 f2 fe ff ff       	jmp    c0002ce2 <create_name+0x15a>
c0002df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002df4:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002df8:	75 04                	jne    c0002dfe <create_name+0x276>
c0002dfa:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002dfe:	83 f9 08             	cmp    ecx,0x8
c0002e01:	75 05                	jne    c0002e08 <create_name+0x280>
c0002e03:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e0c:	83 e0 0c             	and    eax,0xc
c0002e0f:	83 f8 0c             	cmp    eax,0xc
c0002e12:	74 0c                	je     c0002e20 <create_name+0x298>
c0002e14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e18:	83 e0 03             	and    eax,0x3
c0002e1b:	83 f8 03             	cmp    eax,0x3
c0002e1e:	75 05                	jne    c0002e25 <create_name+0x29d>
c0002e20:	83 cb 02             	or     ebx,0x2
c0002e23:	eb 19                	jmp    c0002e3e <create_name+0x2b6>
c0002e25:	f6 c3 02             	test   bl,0x2
c0002e28:	75 14                	jne    c0002e3e <create_name+0x2b6>
c0002e2a:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e2f:	74 03                	je     c0002e34 <create_name+0x2ac>
c0002e31:	83 cb 10             	or     ebx,0x10
c0002e34:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e39:	74 03                	je     c0002e3e <create_name+0x2b6>
c0002e3b:	83 cb 08             	or     ebx,0x8
c0002e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e42:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e45:	31 c0                	xor    eax,eax
c0002e47:	eb 0e                	jmp    c0002e57 <create_name+0x2cf>
c0002e49:	83 f9 0b             	cmp    ecx,0xb
c0002e4c:	0f 85 ca fe ff ff    	jne    c0002d1c <create_name+0x194>
c0002e52:	e9 a5 fe ff ff       	jmp    c0002cfc <create_name+0x174>
c0002e57:	83 c4 3c             	add    esp,0x3c
c0002e5a:	5b                   	pop    ebx
c0002e5b:	5e                   	pop    esi
c0002e5c:	5f                   	pop    edi
c0002e5d:	5d                   	pop    ebp
c0002e5e:	c3                   	ret    

c0002e5f <cmp_lfn>:
c0002e5f:	55                   	push   ebp
c0002e60:	57                   	push   edi
c0002e61:	89 d7                	mov    edi,edx
c0002e63:	56                   	push   esi
c0002e64:	53                   	push   ebx
c0002e65:	83 ec 1c             	sub    esp,0x1c
c0002e68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e6c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002e6f:	e8 17 f1 ff ff       	call   c0001f8b <ld_word>
c0002e74:	66 85 c0             	test   ax,ax
c0002e77:	74 07                	je     c0002e80 <cmp_lfn+0x21>
c0002e79:	31 c0                	xor    eax,eax
c0002e7b:	e9 a1 00 00 00       	jmp    c0002f21 <cmp_lfn+0xc2>
c0002e80:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002e82:	bd 01 00 00 00       	mov    ebp,0x1
c0002e87:	83 e3 3f             	and    ebx,0x3f
c0002e8a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002e92:	4b                   	dec    ebx
c0002e93:	6b db 0d             	imul   ebx,ebx,0xd
c0002e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9a:	0f b6 80 80 f6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0980]
c0002ea1:	01 f8                	add    eax,edi
c0002ea3:	e8 e3 f0 ff ff       	call   c0001f8b <ld_word>
c0002ea8:	66 85 ed             	test   bp,bp
c0002eab:	89 c6                	mov    esi,eax
c0002ead:	74 3c                	je     c0002eeb <cmp_lfn+0x8c>
c0002eaf:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eb5:	77 c2                	ja     c0002e79 <cmp_lfn+0x1a>
c0002eb7:	83 ec 0c             	sub    esp,0xc
c0002eba:	0f b7 c0             	movzx  eax,ax
c0002ebd:	50                   	push   eax
c0002ebe:	e8 59 30 00 00       	call   c0005f1c <ff_wtoupper>
c0002ec3:	89 c5                	mov    ebp,eax
c0002ec5:	8d 43 01             	lea    eax,[ebx+0x1]
c0002ec8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ecc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002ed0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002ed4:	89 04 24             	mov    DWORD PTR [esp],eax
c0002ed7:	e8 40 30 00 00       	call   c0005f1c <ff_wtoupper>
c0002edc:	83 c4 10             	add    esp,0x10
c0002edf:	39 c5                	cmp    ebp,eax
c0002ee1:	75 96                	jne    c0002e79 <cmp_lfn+0x1a>
c0002ee3:	89 f5                	mov    ebp,esi
c0002ee5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002ee9:	eb 0b                	jmp    c0002ef6 <cmp_lfn+0x97>
c0002eeb:	0f b7 c8             	movzx  ecx,ax
c0002eee:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002ef4:	75 83                	jne    c0002e79 <cmp_lfn+0x1a>
c0002ef6:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002efa:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002eff:	75 95                	jne    c0002e96 <cmp_lfn+0x37>
c0002f01:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f04:	74 16                	je     c0002f1c <cmp_lfn+0xbd>
c0002f06:	66 85 ed             	test   bp,bp
c0002f09:	74 11                	je     c0002f1c <cmp_lfn+0xbd>
c0002f0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f0f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f14:	0f 94 c0             	sete   al
c0002f17:	0f b6 c0             	movzx  eax,al
c0002f1a:	eb 05                	jmp    c0002f21 <cmp_lfn+0xc2>
c0002f1c:	b8 01 00 00 00       	mov    eax,0x1
c0002f21:	83 c4 1c             	add    esp,0x1c
c0002f24:	5b                   	pop    ebx
c0002f25:	5e                   	pop    esi
c0002f26:	5f                   	pop    edi
c0002f27:	5d                   	pop    ebp
c0002f28:	c3                   	ret    

c0002f29 <sync_fs>:
c0002f29:	56                   	push   esi
c0002f2a:	53                   	push   ebx
c0002f2b:	53                   	push   ebx
c0002f2c:	89 c3                	mov    ebx,eax
c0002f2e:	e8 5c f5 ff ff       	call   c000248f <sync_window>
c0002f33:	85 c0                	test   eax,eax
c0002f35:	0f 85 9a 00 00 00    	jne    c0002fd5 <sync_fs+0xac>
c0002f3b:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f3e:	75 7b                	jne    c0002fbb <sync_fs+0x92>
c0002f40:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f44:	75 75                	jne    c0002fbb <sync_fs+0x92>
c0002f46:	b9 00 02 00 00       	mov    ecx,0x200
c0002f4b:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f4e:	31 d2                	xor    edx,edx
c0002f50:	89 f0                	mov    eax,esi
c0002f52:	e8 75 f0 ff ff       	call   c0001fcc <mem_set>
c0002f57:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f62:	e8 49 f0 ff ff       	call   c0001fb0 <st_word>
c0002f67:	ba 52 52 61 41       	mov    edx,0x41615252
c0002f6c:	89 f0                	mov    eax,esi
c0002f6e:	e8 41 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f73:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002f79:	ba 72 72 41 61       	mov    edx,0x61417272
c0002f7e:	e8 31 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002f86:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002f8c:	e8 23 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f91:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f94:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002f9a:	e8 15 f0 ff ff       	call   c0001fb4 <st_dword>
c0002f9f:	6a 01                	push   0x1
c0002fa1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fa4:	40                   	inc    eax
c0002fa5:	50                   	push   eax
c0002fa6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fa9:	56                   	push   esi
c0002faa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fae:	50                   	push   eax
c0002faf:	e8 a2 ef ff ff       	call   c0001f56 <disk_write>
c0002fb4:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fb8:	83 c4 10             	add    esp,0x10
c0002fbb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fbf:	51                   	push   ecx
c0002fc0:	6a 00                	push   0x0
c0002fc2:	6a 00                	push   0x0
c0002fc4:	50                   	push   eax
c0002fc5:	e8 a2 ef ff ff       	call   c0001f6c <disk_ioctl>
c0002fca:	83 c4 10             	add    esp,0x10
c0002fcd:	85 c0                	test   eax,eax
c0002fcf:	0f 95 c0             	setne  al
c0002fd2:	0f b6 c0             	movzx  eax,al
c0002fd5:	5a                   	pop    edx
c0002fd6:	5b                   	pop    ebx
c0002fd7:	5e                   	pop    esi
c0002fd8:	c3                   	ret    

c0002fd9 <create_partition>:
c0002fd9:	55                   	push   ebp
c0002fda:	0f b6 c0             	movzx  eax,al
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	83 ec 40             	sub    esp,0x40
c0002fe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002fe7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002feb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002fef:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002ff3:	50                   	push   eax
c0002ff4:	6a 01                	push   0x1
c0002ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002ffa:	e8 6d ef ff ff       	call   c0001f6c <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 85 6a 01 00 00    	jne    c0003174 <create_partition+0x19b>
c000300a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000300e:	b9 05 00 00 00       	mov    ecx,0x5
c0003013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003017:	be 08 00 00 00       	mov    esi,0x8
c000301c:	89 f0                	mov    eax,esi
c000301e:	31 d2                	xor    edx,edx
c0003020:	0f b6 d8             	movzx  ebx,al
c0003023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003027:	f7 f3                	div    ebx
c0003029:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000302e:	76 0a                	jbe    c000303a <create_partition+0x61>
c0003030:	d1 e6                	shl    esi,1
c0003032:	49                   	dec    ecx
c0003033:	75 e7                	jne    c000301c <create_partition+0x43>
c0003035:	be ff ff ff ff       	mov    esi,0xffffffff
c000303a:	b9 00 02 00 00       	mov    ecx,0x200
c000303f:	31 d2                	xor    edx,edx
c0003041:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003045:	e8 82 ef ff ff       	call   c0001fcc <mem_set>
c000304a:	b9 64 00 00 00       	mov    ecx,0x64
c000304f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003053:	31 d2                	xor    edx,edx
c0003055:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000305d:	f7 f1                	div    ecx
c000305f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003064:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003068:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000306c:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0003072:	89 f0                	mov    eax,esi
c0003074:	0f b6 c0             	movzx  eax,al
c0003077:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000307b:	85 c9                	test   ecx,ecx
c000307d:	75 34                	jne    c00030b3 <create_partition+0xda>
c000307f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003083:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003088:	05 fe 01 00 00       	add    eax,0x1fe
c000308d:	e8 1e ef ff ff       	call   c0001fb0 <st_word>
c0003092:	6a 01                	push   0x1
c0003094:	6a 00                	push   0x0
c0003096:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000309a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000309e:	e8 b3 ee ff ff       	call   c0001f56 <disk_write>
c00030a3:	83 c4 10             	add    esp,0x10
c00030a6:	85 c0                	test   eax,eax
c00030a8:	0f 95 c0             	setne  al
c00030ab:	0f b6 c0             	movzx  eax,al
c00030ae:	e9 c6 00 00 00       	jmp    c0003179 <create_partition+0x1a0>
c00030b3:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030b7:	76 c6                	jbe    c000307f <create_partition+0xa6>
c00030b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030c1:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030c4:	83 fe 64             	cmp    esi,0x64
c00030c7:	77 0d                	ja     c00030d6 <create_partition+0xfd>
c00030c9:	74 07                	je     c00030d2 <create_partition+0xf9>
c00030cb:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c00030d0:	eb 04                	jmp    c00030d6 <create_partition+0xfd>
c00030d2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00030d6:	31 c0                	xor    eax,eax
c00030d8:	89 f2                	mov    edx,esi
c00030da:	01 ca                	add    edx,ecx
c00030dc:	0f 92 c0             	setb   al
c00030df:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c00030e3:	77 04                	ja     c00030e9 <create_partition+0x110>
c00030e5:	85 c0                	test   eax,eax
c00030e7:	74 08                	je     c00030f1 <create_partition+0x118>
c00030e9:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00030ed:	29 ce                	sub    esi,ecx
c00030ef:	eb 04                	jmp    c00030f5 <create_partition+0x11c>
c00030f1:	85 f6                	test   esi,esi
c00030f3:	74 8a                	je     c000307f <create_partition+0xa6>
c00030f5:	89 ca                	mov    edx,ecx
c00030f7:	89 d8                	mov    eax,ebx
c00030f9:	bf 3f 00 00 00       	mov    edi,0x3f
c00030fe:	e8 b1 ee ff ff       	call   c0001fb4 <st_dword>
c0003103:	8d 43 04             	lea    eax,[ebx+0x4]
c0003106:	89 f2                	mov    edx,esi
c0003108:	83 c3 10             	add    ebx,0x10
c000310b:	e8 a4 ee ff ff       	call   c0001fb4 <st_dword>
c0003110:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003114:	31 d2                	xor    edx,edx
c0003116:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003119:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000311d:	89 c8                	mov    eax,ecx
c000311f:	01 f1                	add    ecx,esi
c0003121:	f7 f7                	div    edi
c0003123:	89 d5                	mov    ebp,edx
c0003125:	31 d2                	xor    edx,edx
c0003127:	45                   	inc    ebp
c0003128:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000312c:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c000312f:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003132:	89 c2                	mov    edx,eax
c0003134:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003137:	c1 ea 02             	shr    edx,0x2
c000313a:	83 e2 c0             	and    edx,0xffffffc0
c000313d:	09 ea                	or     edx,ebp
c000313f:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003142:	31 d2                	xor    edx,edx
c0003144:	f7 f7                	div    edi
c0003146:	89 d6                	mov    esi,edx
c0003148:	31 d2                	xor    edx,edx
c000314a:	46                   	inc    esi
c000314b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000314f:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003152:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003155:	89 c7                	mov    edi,eax
c0003157:	c1 ef 02             	shr    edi,0x2
c000315a:	83 e7 c0             	and    edi,0xffffffc0
c000315d:	09 fe                	or     esi,edi
c000315f:	89 f2                	mov    edx,esi
c0003161:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003164:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0003169:	0f 85 0c ff ff ff    	jne    c000307b <create_partition+0xa2>
c000316f:	e9 0b ff ff ff       	jmp    c000307f <create_partition+0xa6>
c0003174:	b8 01 00 00 00       	mov    eax,0x1
c0003179:	83 c4 3c             	add    esp,0x3c
c000317c:	5b                   	pop    ebx
c000317d:	5e                   	pop    esi
c000317e:	5f                   	pop    edi
c000317f:	5d                   	pop    ebp
c0003180:	c3                   	ret    

c0003181 <get_fileinfo>:
c0003181:	55                   	push   ebp
c0003182:	57                   	push   edi
c0003183:	56                   	push   esi
c0003184:	53                   	push   ebx
c0003185:	83 ec 1c             	sub    esp,0x1c
c0003188:	8b 30                	mov    esi,DWORD PTR [eax]
c000318a:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000318e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003192:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003196:	0f 84 d3 01 00 00    	je     c000336f <get_fileinfo+0x1ee>
c000319c:	89 d3                	mov    ebx,edx
c000319e:	89 c6                	mov    esi,eax
c00031a0:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031a4:	74 72                	je     c0003218 <get_fileinfo+0x97>
c00031a6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031ae:	31 ed                	xor    ebp,ebp
c00031b0:	31 ff                	xor    edi,edi
c00031b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031bd:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031c1:	89 c2                	mov    edx,eax
c00031c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031c7:	85 c0                	test   eax,eax
c00031c9:	74 41                	je     c000320c <get_fileinfo+0x8b>
c00031cb:	0f b7 c5             	movzx  eax,bp
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 0d                	jne    c00031df <get_fileinfo+0x5e>
c00031d2:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c00031d8:	66 81 f9 ff 07       	cmp    cx,0x7ff
c00031dd:	76 22                	jbe    c0003201 <get_fileinfo+0x80>
c00031df:	c1 e0 10             	shl    eax,0x10
c00031e2:	b9 ff 00 00 00       	mov    ecx,0xff
c00031e7:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00031eb:	29 f9                	sub    ecx,edi
c00031ed:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00031f1:	e8 f3 ee ff ff       	call   c00020e9 <put_utf>
c00031f6:	0f b6 c0             	movzx  eax,al
c00031f9:	85 c0                	test   eax,eax
c00031fb:	74 0d                	je     c000320a <get_fileinfo+0x89>
c00031fd:	01 c7                	add    edi,eax
c00031ff:	31 d2                	xor    edx,edx
c0003201:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003206:	89 d5                	mov    ebp,edx
c0003208:	eb a8                	jmp    c00031b2 <get_fileinfo+0x31>
c000320a:	31 ff                	xor    edi,edi
c000320c:	66 85 ed             	test   bp,bp
c000320f:	74 02                	je     c0003213 <get_fileinfo+0x92>
c0003211:	31 ff                	xor    edi,edi
c0003213:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003218:	31 ff                	xor    edi,edi
c000321a:	31 c9                	xor    ecx,ecx
c000321c:	83 f9 0a             	cmp    ecx,0xa
c000321f:	0f 87 ac 00 00 00    	ja     c00032d1 <get_fileinfo+0x150>
c0003225:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003228:	8d 69 01             	lea    ebp,[ecx+0x1]
c000322b:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000322f:	89 c2                	mov    edx,eax
c0003231:	83 f8 20             	cmp    eax,0x20
c0003234:	0f 84 90 00 00 00    	je     c00032ca <get_fileinfo+0x149>
c000323a:	83 f8 05             	cmp    eax,0x5
c000323d:	75 05                	jne    c0003244 <get_fileinfo+0xc3>
c000323f:	ba e5 00 00 00       	mov    edx,0xe5
c0003244:	83 ff 0b             	cmp    edi,0xb
c0003247:	77 0b                	ja     c0003254 <get_fileinfo+0xd3>
c0003249:	83 fd 09             	cmp    ebp,0x9
c000324c:	75 06                	jne    c0003254 <get_fileinfo+0xd3>
c000324e:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003253:	47                   	inc    edi
c0003254:	0f b7 c2             	movzx  eax,dx
c0003257:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000325b:	e8 ab ed ff ff       	call   c000200b <dbc_1st>
c0003260:	85 c0                	test   eax,eax
c0003262:	74 2f                	je     c0003293 <get_fileinfo+0x112>
c0003264:	83 fd 08             	cmp    ebp,0x8
c0003267:	74 2a                	je     c0003293 <get_fileinfo+0x112>
c0003269:	83 fd 0b             	cmp    ebp,0xb
c000326c:	74 25                	je     c0003293 <get_fileinfo+0x112>
c000326e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003271:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003275:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003279:	e8 90 ed ff ff       	call   c000200e <dbc_2nd>
c000327e:	85 c0                	test   eax,eax
c0003280:	74 11                	je     c0003293 <get_fileinfo+0x112>
c0003282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003286:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000328b:	c1 e0 08             	shl    eax,0x8
c000328e:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003291:	09 c2                	or     edx,eax
c0003293:	0f b7 d2             	movzx  edx,dx
c0003296:	50                   	push   eax
c0003297:	50                   	push   eax
c0003298:	68 b5 01 00 00       	push   0x1b5
c000329d:	52                   	push   edx
c000329e:	e8 01 2c 00 00       	call   c0005ea4 <ff_oem2uni>
c00032a3:	83 c4 10             	add    esp,0x10
c00032a6:	0f b7 c0             	movzx  eax,ax
c00032a9:	85 c0                	test   eax,eax
c00032ab:	75 04                	jne    c00032b1 <get_fileinfo+0x130>
c00032ad:	31 ff                	xor    edi,edi
c00032af:	eb 20                	jmp    c00032d1 <get_fileinfo+0x150>
c00032b1:	b9 0c 00 00 00       	mov    ecx,0xc
c00032b6:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ba:	29 f9                	sub    ecx,edi
c00032bc:	e8 28 ee ff ff       	call   c00020e9 <put_utf>
c00032c1:	0f b6 c0             	movzx  eax,al
c00032c4:	85 c0                	test   eax,eax
c00032c6:	74 e5                	je     c00032ad <get_fileinfo+0x12c>
c00032c8:	01 c7                	add    edi,eax
c00032ca:	89 e9                	mov    ecx,ebp
c00032cc:	e9 4b ff ff ff       	jmp    c000321c <get_fileinfo+0x9b>
c00032d1:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00032d6:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00032da:	75 5f                	jne    c000333b <get_fileinfo+0x1ba>
c00032dc:	85 ff                	test   edi,edi
c00032de:	75 0b                	jne    c00032eb <get_fileinfo+0x16a>
c00032e0:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00032e4:	ba 01 00 00 00       	mov    edx,0x1
c00032e9:	eb 3e                	jmp    c0003329 <get_fileinfo+0x1a8>
c00032eb:	bf 08 00 00 00       	mov    edi,0x8
c00032f0:	31 d2                	xor    edx,edx
c00032f2:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c00032f8:	84 c0                	test   al,al
c00032fa:	74 2d                	je     c0003329 <get_fileinfo+0x1a8>
c00032fc:	66 83 f8 2e          	cmp    ax,0x2e
c0003300:	74 1b                	je     c000331d <get_fileinfo+0x19c>
c0003302:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003305:	66 83 f9 19          	cmp    cx,0x19
c0003309:	77 17                	ja     c0003322 <get_fileinfo+0x1a1>
c000330b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000330e:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003311:	21 f9                	and    ecx,edi
c0003313:	80 e1 18             	and    cl,0x18
c0003316:	74 0a                	je     c0003322 <get_fileinfo+0x1a1>
c0003318:	83 c0 20             	add    eax,0x20
c000331b:	eb 05                	jmp    c0003322 <get_fileinfo+0x1a1>
c000331d:	bf 10 00 00 00       	mov    edi,0x10
c0003322:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003326:	42                   	inc    edx
c0003327:	eb c9                	jmp    c00032f2 <get_fileinfo+0x171>
c0003329:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000332e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003331:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003335:	75 04                	jne    c000333b <get_fileinfo+0x1ba>
c0003337:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c000333b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000333e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003341:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003344:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003347:	83 c0 1c             	add    eax,0x1c
c000334a:	e8 49 ec ff ff       	call   c0001f98 <ld_dword>
c000334f:	89 03                	mov    DWORD PTR [ebx],eax
c0003351:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003354:	83 c0 16             	add    eax,0x16
c0003357:	e8 2f ec ff ff       	call   c0001f8b <ld_word>
c000335c:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003360:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003363:	83 c0 18             	add    eax,0x18
c0003366:	e8 20 ec ff ff       	call   c0001f8b <ld_word>
c000336b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000336f:	83 c4 1c             	add    esp,0x1c
c0003372:	5b                   	pop    ebx
c0003373:	5e                   	pop    esi
c0003374:	5f                   	pop    edi
c0003375:	5d                   	pop    ebp
c0003376:	c3                   	ret    

c0003377 <ld_clust.isra.0>:
c0003377:	56                   	push   esi
c0003378:	89 c6                	mov    esi,eax
c000337a:	53                   	push   ebx
c000337b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000337e:	89 d3                	mov    ebx,edx
c0003380:	e8 06 ec ff ff       	call   c0001f8b <ld_word>
c0003385:	0f b7 c8             	movzx  ecx,ax
c0003388:	89 f0                	mov    eax,esi
c000338a:	3c 03                	cmp    al,0x3
c000338c:	75 0d                	jne    c000339b <ld_clust.isra.0+0x24>
c000338e:	8d 43 14             	lea    eax,[ebx+0x14]
c0003391:	e8 f5 eb ff ff       	call   c0001f8b <ld_word>
c0003396:	c1 e0 10             	shl    eax,0x10
c0003399:	09 c1                	or     ecx,eax
c000339b:	89 c8                	mov    eax,ecx
c000339d:	5b                   	pop    ebx
c000339e:	5e                   	pop    esi
c000339f:	c3                   	ret    

c00033a0 <st_clust.isra.1>:
c00033a0:	56                   	push   esi
c00033a1:	89 c6                	mov    esi,eax
c00033a3:	53                   	push   ebx
c00033a4:	89 d3                	mov    ebx,edx
c00033a6:	0f b7 d1             	movzx  edx,cx
c00033a9:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033ac:	e8 ff eb ff ff       	call   c0001fb0 <st_word>
c00033b1:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033b4:	75 0f                	jne    c00033c5 <st_clust.isra.1+0x25>
c00033b6:	c1 e9 10             	shr    ecx,0x10
c00033b9:	8d 43 14             	lea    eax,[ebx+0x14]
c00033bc:	89 ca                	mov    edx,ecx
c00033be:	5b                   	pop    ebx
c00033bf:	5e                   	pop    esi
c00033c0:	e9 eb eb ff ff       	jmp    c0001fb0 <st_word>
c00033c5:	5b                   	pop    ebx
c00033c6:	5e                   	pop    esi
c00033c7:	c3                   	ret    

c00033c8 <get_fat.isra.2>:
c00033c8:	b9 01 00 00 00       	mov    ecx,0x1
c00033cd:	83 fa 01             	cmp    edx,0x1
c00033d0:	0f 86 f3 00 00 00    	jbe    c00034c9 <get_fat.isra.2+0x101>
c00033d6:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00033d9:	0f 83 ea 00 00 00    	jae    c00034c9 <get_fat.isra.2+0x101>
c00033df:	55                   	push   ebp
c00033e0:	57                   	push   edi
c00033e1:	89 c7                	mov    edi,eax
c00033e3:	56                   	push   esi
c00033e4:	89 d6                	mov    esi,edx
c00033e6:	53                   	push   ebx
c00033e7:	83 ec 0c             	sub    esp,0xc
c00033ea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00033ed:	83 f8 02             	cmp    eax,0x2
c00033f0:	74 78                	je     c000346a <get_fat.isra.2+0xa2>
c00033f2:	83 f8 03             	cmp    eax,0x3
c00033f5:	0f 84 96 00 00 00    	je     c0003491 <get_fat.isra.2+0xc9>
c00033fb:	48                   	dec    eax
c00033fc:	0f 85 bd 00 00 00    	jne    c00034bf <get_fat.isra.2+0xf7>
c0003402:	89 d3                	mov    ebx,edx
c0003404:	89 f8                	mov    eax,edi
c0003406:	d1 eb                	shr    ebx,1
c0003408:	01 d3                	add    ebx,edx
c000340a:	89 da                	mov    edx,ebx
c000340c:	c1 ea 09             	shr    edx,0x9
c000340f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003412:	e8 db f0 ff ff       	call   c00024f2 <move_window>
c0003417:	85 c0                	test   eax,eax
c0003419:	74 08                	je     c0003423 <get_fat.isra.2+0x5b>
c000341b:	83 c9 ff             	or     ecx,0xffffffff
c000341e:	e9 9c 00 00 00       	jmp    c00034bf <get_fat.isra.2+0xf7>
c0003423:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003426:	89 f8                	mov    eax,edi
c0003428:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000342e:	89 ea                	mov    edx,ebp
c0003430:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003434:	c1 ea 09             	shr    edx,0x9
c0003437:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000343a:	e8 b3 f0 ff ff       	call   c00024f2 <move_window>
c000343f:	85 c0                	test   eax,eax
c0003441:	75 d8                	jne    c000341b <get_fat.isra.2+0x53>
c0003443:	0f b6 c3             	movzx  eax,bl
c0003446:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000344c:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003451:	c1 e3 08             	shl    ebx,0x8
c0003454:	09 c3                	or     ebx,eax
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000345e:	83 e6 01             	and    esi,0x1
c0003461:	74 5c                	je     c00034bf <get_fat.isra.2+0xf7>
c0003463:	89 d9                	mov    ecx,ebx
c0003465:	c1 e9 04             	shr    ecx,0x4
c0003468:	eb 55                	jmp    c00034bf <get_fat.isra.2+0xf7>
c000346a:	c1 ea 08             	shr    edx,0x8
c000346d:	89 f8                	mov    eax,edi
c000346f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003472:	e8 7b f0 ff ff       	call   c00024f2 <move_window>
c0003477:	85 c0                	test   eax,eax
c0003479:	75 a0                	jne    c000341b <get_fat.isra.2+0x53>
c000347b:	01 f6                	add    esi,esi
c000347d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003483:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003487:	e8 ff ea ff ff       	call   c0001f8b <ld_word>
c000348c:	0f b7 c8             	movzx  ecx,ax
c000348f:	eb 2e                	jmp    c00034bf <get_fat.isra.2+0xf7>
c0003491:	c1 ea 07             	shr    edx,0x7
c0003494:	89 f8                	mov    eax,edi
c0003496:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003499:	e8 54 f0 ff ff       	call   c00024f2 <move_window>
c000349e:	85 c0                	test   eax,eax
c00034a0:	0f 85 75 ff ff ff    	jne    c000341b <get_fat.isra.2+0x53>
c00034a6:	c1 e6 02             	shl    esi,0x2
c00034a9:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034af:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034b3:	e8 e0 ea ff ff       	call   c0001f98 <ld_dword>
c00034b8:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034bd:	89 c1                	mov    ecx,eax
c00034bf:	83 c4 0c             	add    esp,0xc
c00034c2:	89 c8                	mov    eax,ecx
c00034c4:	5b                   	pop    ebx
c00034c5:	5e                   	pop    esi
c00034c6:	5f                   	pop    edi
c00034c7:	5d                   	pop    ebp
c00034c8:	c3                   	ret    
c00034c9:	89 c8                	mov    eax,ecx
c00034cb:	c3                   	ret    

c00034cc <dir_sdi>:
c00034cc:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00034d2:	0f 87 b6 00 00 00    	ja     c000358e <dir_sdi+0xc2>
c00034d8:	55                   	push   ebp
c00034d9:	57                   	push   edi
c00034da:	56                   	push   esi
c00034db:	53                   	push   ebx
c00034dc:	89 d3                	mov    ebx,edx
c00034de:	83 ec 1c             	sub    esp,0x1c
c00034e1:	f6 c2 1f             	test   dl,0x1f
c00034e4:	74 0a                	je     c00034f0 <dir_sdi+0x24>
c00034e6:	b8 02 00 00 00       	mov    eax,0x2
c00034eb:	e9 96 00 00 00       	jmp    c0003586 <dir_sdi+0xba>
c00034f0:	89 c6                	mov    esi,eax
c00034f2:	8b 38                	mov    edi,DWORD PTR [eax]
c00034f4:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00034f7:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00034fa:	85 c9                	test   ecx,ecx
c00034fc:	75 23                	jne    c0003521 <dir_sdi+0x55>
c00034fe:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003501:	76 07                	jbe    c000350a <dir_sdi+0x3e>
c0003503:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003506:	85 c0                	test   eax,eax
c0003508:	75 15                	jne    c000351f <dir_sdi+0x53>
c000350a:	89 da                	mov    edx,ebx
c000350c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003510:	c1 ea 05             	shr    edx,0x5
c0003513:	39 c2                	cmp    edx,eax
c0003515:	73 cf                	jae    c00034e6 <dir_sdi+0x1a>
c0003517:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000351a:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000351d:	eb 3d                	jmp    c000355c <dir_sdi+0x90>
c000351f:	89 c1                	mov    ecx,eax
c0003521:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003525:	c1 e5 09             	shl    ebp,0x9
c0003528:	89 ca                	mov    edx,ecx
c000352a:	39 eb                	cmp    ebx,ebp
c000352c:	72 1c                	jb     c000354a <dir_sdi+0x7e>
c000352e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003530:	e8 93 fe ff ff       	call   c00033c8 <get_fat.isra.2>
c0003535:	89 c1                	mov    ecx,eax
c0003537:	83 f8 ff             	cmp    eax,0xffffffff
c000353a:	74 45                	je     c0003581 <dir_sdi+0xb5>
c000353c:	83 f8 01             	cmp    eax,0x1
c000353f:	76 a5                	jbe    c00034e6 <dir_sdi+0x1a>
c0003541:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003544:	76 a0                	jbe    c00034e6 <dir_sdi+0x1a>
c0003546:	29 eb                	sub    ebx,ebp
c0003548:	eb de                	jmp    c0003528 <dir_sdi+0x5c>
c000354a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000354e:	89 f8                	mov    eax,edi
c0003550:	e8 8d ec ff ff       	call   c00021e2 <clst2sect>
c0003555:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003559:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000355c:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c000355f:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003562:	85 d2                	test   edx,edx
c0003564:	74 80                	je     c00034e6 <dir_sdi+0x1a>
c0003566:	89 d8                	mov    eax,ebx
c0003568:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000356e:	c1 e8 09             	shr    eax,0x9
c0003571:	01 d0                	add    eax,edx
c0003573:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003576:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c000357a:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000357d:	31 c0                	xor    eax,eax
c000357f:	eb 05                	jmp    c0003586 <dir_sdi+0xba>
c0003581:	b8 01 00 00 00       	mov    eax,0x1
c0003586:	83 c4 1c             	add    esp,0x1c
c0003589:	5b                   	pop    ebx
c000358a:	5e                   	pop    esi
c000358b:	5f                   	pop    edi
c000358c:	5d                   	pop    ebp
c000358d:	c3                   	ret    
c000358e:	b8 02 00 00 00       	mov    eax,0x2
c0003593:	c3                   	ret    

c0003594 <create_chain>:
c0003594:	55                   	push   ebp
c0003595:	89 c5                	mov    ebp,eax
c0003597:	57                   	push   edi
c0003598:	89 d7                	mov    edi,edx
c000359a:	56                   	push   esi
c000359b:	53                   	push   ebx
c000359c:	83 ec 1c             	sub    esp,0x1c
c000359f:	85 d2                	test   edx,edx
c00035a1:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a3:	75 0e                	jne    c00035b3 <create_chain+0x1f>
c00035a5:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035a8:	85 c9                	test   ecx,ecx
c00035aa:	74 34                	je     c00035e0 <create_chain+0x4c>
c00035ac:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035af:	77 34                	ja     c00035e5 <create_chain+0x51>
c00035b1:	eb 2d                	jmp    c00035e0 <create_chain+0x4c>
c00035b3:	89 f0                	mov    eax,esi
c00035b5:	e8 0e fe ff ff       	call   c00033c8 <get_fat.isra.2>
c00035ba:	89 c3                	mov    ebx,eax
c00035bc:	83 f8 01             	cmp    eax,0x1
c00035bf:	77 0a                	ja     c00035cb <create_chain+0x37>
c00035c1:	bb 01 00 00 00       	mov    ebx,0x1
c00035c6:	e9 fe 00 00 00       	jmp    c00036c9 <create_chain+0x135>
c00035cb:	83 f8 ff             	cmp    eax,0xffffffff
c00035ce:	0f 84 f2 00 00 00    	je     c00036c6 <create_chain+0x132>
c00035d4:	89 f9                	mov    ecx,edi
c00035d6:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c00035d9:	76 0a                	jbe    c00035e5 <create_chain+0x51>
c00035db:	e9 e9 00 00 00       	jmp    c00036c9 <create_chain+0x135>
c00035e0:	b9 01 00 00 00       	mov    ecx,0x1
c00035e5:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c00035e9:	75 07                	jne    c00035f2 <create_chain+0x5e>
c00035eb:	31 db                	xor    ebx,ebx
c00035ed:	e9 d7 00 00 00       	jmp    c00036c9 <create_chain+0x135>
c00035f2:	39 f9                	cmp    ecx,edi
c00035f4:	75 46                	jne    c000363c <create_chain+0xa8>
c00035f6:	8d 59 01             	lea    ebx,[ecx+0x1]
c00035f9:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00035fc:	77 05                	ja     c0003603 <create_chain+0x6f>
c00035fe:	bb 02 00 00 00       	mov    ebx,0x2
c0003603:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003607:	89 da                	mov    edx,ebx
c0003609:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000360c:	e8 b7 fd ff ff       	call   c00033c8 <get_fat.isra.2>
c0003611:	83 f8 01             	cmp    eax,0x1
c0003614:	74 ab                	je     c00035c1 <create_chain+0x2d>
c0003616:	83 f8 ff             	cmp    eax,0xffffffff
c0003619:	0f 84 a7 00 00 00    	je     c00036c6 <create_chain+0x132>
c000361f:	85 c0                	test   eax,eax
c0003621:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003625:	74 11                	je     c0003638 <create_chain+0xa4>
c0003627:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000362a:	83 f8 01             	cmp    eax,0x1
c000362d:	76 0d                	jbe    c000363c <create_chain+0xa8>
c000362f:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003632:	73 08                	jae    c000363c <create_chain+0xa8>
c0003634:	89 c1                	mov    ecx,eax
c0003636:	eb 04                	jmp    c000363c <create_chain+0xa8>
c0003638:	85 db                	test   ebx,ebx
c000363a:	75 3d                	jne    c0003679 <create_chain+0xe5>
c000363c:	89 cb                	mov    ebx,ecx
c000363e:	43                   	inc    ebx
c000363f:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003642:	77 0a                	ja     c000364e <create_chain+0xba>
c0003644:	83 f9 01             	cmp    ecx,0x1
c0003647:	76 a2                	jbe    c00035eb <create_chain+0x57>
c0003649:	bb 02 00 00 00       	mov    ebx,0x2
c000364e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003652:	89 da                	mov    edx,ebx
c0003654:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003657:	e8 6c fd ff ff       	call   c00033c8 <get_fat.isra.2>
c000365c:	85 c0                	test   eax,eax
c000365e:	74 19                	je     c0003679 <create_chain+0xe5>
c0003660:	83 f8 01             	cmp    eax,0x1
c0003663:	0f 84 58 ff ff ff    	je     c00035c1 <create_chain+0x2d>
c0003669:	40                   	inc    eax
c000366a:	74 5a                	je     c00036c6 <create_chain+0x132>
c000366c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003670:	39 cb                	cmp    ebx,ecx
c0003672:	75 ca                	jne    c000363e <create_chain+0xaa>
c0003674:	e9 72 ff ff ff       	jmp    c00035eb <create_chain+0x57>
c0003679:	83 c9 ff             	or     ecx,0xffffffff
c000367c:	89 da                	mov    edx,ebx
c000367e:	89 f0                	mov    eax,esi
c0003680:	e8 b1 f2 ff ff       	call   c0002936 <put_fat>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 36                	jne    c00036bf <create_chain+0x12b>
c0003689:	85 ff                	test   edi,edi
c000368b:	75 16                	jne    c00036a3 <create_chain+0x10f>
c000368d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003690:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0003693:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c0003696:	8d 57 fe             	lea    edx,[edi-0x2]
c0003699:	39 d0                	cmp    eax,edx
c000369b:	77 17                	ja     c00036b4 <create_chain+0x120>
c000369d:	48                   	dec    eax
c000369e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036a1:	eb 11                	jmp    c00036b4 <create_chain+0x120>
c00036a3:	89 d9                	mov    ecx,ebx
c00036a5:	89 fa                	mov    edx,edi
c00036a7:	89 f0                	mov    eax,esi
c00036a9:	e8 88 f2 ff ff       	call   c0002936 <put_fat>
c00036ae:	85 c0                	test   eax,eax
c00036b0:	74 db                	je     c000368d <create_chain+0xf9>
c00036b2:	eb 0b                	jmp    c00036bf <create_chain+0x12b>
c00036b4:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036b7:	83 c8 01             	or     eax,0x1
c00036ba:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036bd:	eb 0a                	jmp    c00036c9 <create_chain+0x135>
c00036bf:	48                   	dec    eax
c00036c0:	0f 85 fb fe ff ff    	jne    c00035c1 <create_chain+0x2d>
c00036c6:	83 cb ff             	or     ebx,0xffffffff
c00036c9:	83 c4 1c             	add    esp,0x1c
c00036cc:	89 d8                	mov    eax,ebx
c00036ce:	5b                   	pop    ebx
c00036cf:	5e                   	pop    esi
c00036d0:	5f                   	pop    edi
c00036d1:	5d                   	pop    ebp
c00036d2:	c3                   	ret    

c00036d3 <remove_chain>:
c00036d3:	55                   	push   ebp
c00036d4:	57                   	push   edi
c00036d5:	56                   	push   esi
c00036d6:	89 d6                	mov    esi,edx
c00036d8:	53                   	push   ebx
c00036d9:	83 ec 0c             	sub    esp,0xc
c00036dc:	83 fa 01             	cmp    edx,0x1
c00036df:	8b 18                	mov    ebx,DWORD PTR [eax]
c00036e1:	76 6a                	jbe    c000374d <remove_chain+0x7a>
c00036e3:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00036e6:	76 65                	jbe    c000374d <remove_chain+0x7a>
c00036e8:	89 c5                	mov    ebp,eax
c00036ea:	89 ca                	mov    edx,ecx
c00036ec:	85 c9                	test   ecx,ecx
c00036ee:	74 0e                	je     c00036fe <remove_chain+0x2b>
c00036f0:	83 c9 ff             	or     ecx,0xffffffff
c00036f3:	89 d8                	mov    eax,ebx
c00036f5:	e8 3c f2 ff ff       	call   c0002936 <put_fat>
c00036fa:	85 c0                	test   eax,eax
c00036fc:	75 5b                	jne    c0003759 <remove_chain+0x86>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003703:	e8 c0 fc ff ff       	call   c00033c8 <get_fat.isra.2>
c0003708:	89 c7                	mov    edi,eax
c000370a:	85 c0                	test   eax,eax
c000370c:	75 04                	jne    c0003712 <remove_chain+0x3f>
c000370e:	31 c0                	xor    eax,eax
c0003710:	eb 47                	jmp    c0003759 <remove_chain+0x86>
c0003712:	83 f8 01             	cmp    eax,0x1
c0003715:	74 36                	je     c000374d <remove_chain+0x7a>
c0003717:	83 f8 ff             	cmp    eax,0xffffffff
c000371a:	74 38                	je     c0003754 <remove_chain+0x81>
c000371c:	31 c9                	xor    ecx,ecx
c000371e:	89 f2                	mov    edx,esi
c0003720:	89 d8                	mov    eax,ebx
c0003722:	e8 0f f2 ff ff       	call   c0002936 <put_fat>
c0003727:	85 c0                	test   eax,eax
c0003729:	75 2e                	jne    c0003759 <remove_chain+0x86>
c000372b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000372e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003731:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003734:	39 c8                	cmp    eax,ecx
c0003736:	73 0d                	jae    c0003745 <remove_chain+0x72>
c0003738:	40                   	inc    eax
c0003739:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000373c:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000373f:	83 c8 01             	or     eax,0x1
c0003742:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003745:	89 fe                	mov    esi,edi
c0003747:	39 fa                	cmp    edx,edi
c0003749:	77 b3                	ja     c00036fe <remove_chain+0x2b>
c000374b:	eb c1                	jmp    c000370e <remove_chain+0x3b>
c000374d:	b8 02 00 00 00       	mov    eax,0x2
c0003752:	eb 05                	jmp    c0003759 <remove_chain+0x86>
c0003754:	b8 01 00 00 00       	mov    eax,0x1
c0003759:	83 c4 0c             	add    esp,0xc
c000375c:	5b                   	pop    ebx
c000375d:	5e                   	pop    esi
c000375e:	5f                   	pop    edi
c000375f:	5d                   	pop    ebp
c0003760:	c3                   	ret    

c0003761 <dir_next>:
c0003761:	55                   	push   ebp
c0003762:	57                   	push   edi
c0003763:	56                   	push   esi
c0003764:	53                   	push   ebx
c0003765:	83 ec 1c             	sub    esp,0x1c
c0003768:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000376b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000376d:	83 c7 20             	add    edi,0x20
c0003770:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003776:	76 07                	jbe    c000377f <dir_next+0x1e>
c0003778:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000377f:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003782:	b9 04 00 00 00       	mov    ecx,0x4
c0003787:	85 f6                	test   esi,esi
c0003789:	0f 84 cd 00 00 00    	je     c000385c <dir_next+0xfb>
c000378f:	89 c3                	mov    ebx,eax
c0003791:	89 d1                	mov    ecx,edx
c0003793:	89 f8                	mov    eax,edi
c0003795:	25 ff 01 00 00       	and    eax,0x1ff
c000379a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000379e:	0f 85 a8 00 00 00    	jne    c000384c <dir_next+0xeb>
c00037a4:	46                   	inc    esi
c00037a5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037a8:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037ab:	85 d2                	test   edx,edx
c00037ad:	75 22                	jne    c00037d1 <dir_next+0x70>
c00037af:	89 fa                	mov    edx,edi
c00037b1:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037b5:	c1 ea 05             	shr    edx,0x5
c00037b8:	39 c2                	cmp    edx,eax
c00037ba:	0f 82 8c 00 00 00    	jb     c000384c <dir_next+0xeb>
c00037c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037c7:	b9 04 00 00 00       	mov    ecx,0x4
c00037cc:	e9 8b 00 00 00       	jmp    c000385c <dir_next+0xfb>
c00037d1:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037d5:	89 fe                	mov    esi,edi
c00037d7:	48                   	dec    eax
c00037d8:	c1 ee 09             	shr    esi,0x9
c00037db:	85 f0                	test   eax,esi
c00037dd:	75 6d                	jne    c000384c <dir_next+0xeb>
c00037df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037e3:	89 e8                	mov    eax,ebp
c00037e5:	e8 de fb ff ff       	call   c00033c8 <get_fat.isra.2>
c00037ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037ee:	89 c6                	mov    esi,eax
c00037f0:	83 f8 01             	cmp    eax,0x1
c00037f3:	77 07                	ja     c00037fc <dir_next+0x9b>
c00037f5:	b9 02 00 00 00       	mov    ecx,0x2
c00037fa:	eb 60                	jmp    c000385c <dir_next+0xfb>
c00037fc:	83 f8 ff             	cmp    eax,0xffffffff
c00037ff:	75 07                	jne    c0003808 <dir_next+0xa7>
c0003801:	b9 01 00 00 00       	mov    ecx,0x1
c0003806:	eb 54                	jmp    c000385c <dir_next+0xfb>
c0003808:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000380b:	77 30                	ja     c000383d <dir_next+0xdc>
c000380d:	85 c9                	test   ecx,ecx
c000380f:	74 af                	je     c00037c0 <dir_next+0x5f>
c0003811:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003814:	89 d8                	mov    eax,ebx
c0003816:	e8 79 fd ff ff       	call   c0003594 <create_chain>
c000381b:	b9 07 00 00 00       	mov    ecx,0x7
c0003820:	89 c6                	mov    esi,eax
c0003822:	85 c0                	test   eax,eax
c0003824:	74 36                	je     c000385c <dir_next+0xfb>
c0003826:	83 f8 01             	cmp    eax,0x1
c0003829:	74 ca                	je     c00037f5 <dir_next+0x94>
c000382b:	83 f8 ff             	cmp    eax,0xffffffff
c000382e:	74 d1                	je     c0003801 <dir_next+0xa0>
c0003830:	89 c2                	mov    edx,eax
c0003832:	89 e8                	mov    eax,ebp
c0003834:	e8 54 f2 ff ff       	call   c0002a8d <dir_clear>
c0003839:	85 c0                	test   eax,eax
c000383b:	75 c4                	jne    c0003801 <dir_next+0xa0>
c000383d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003840:	89 f2                	mov    edx,esi
c0003842:	89 e8                	mov    eax,ebp
c0003844:	e8 99 e9 ff ff       	call   c00021e2 <clst2sect>
c0003849:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000384c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003850:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003853:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003857:	31 c9                	xor    ecx,ecx
c0003859:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000385c:	83 c4 1c             	add    esp,0x1c
c000385f:	89 c8                	mov    eax,ecx
c0003861:	5b                   	pop    ebx
c0003862:	5e                   	pop    esi
c0003863:	5f                   	pop    edi
c0003864:	5d                   	pop    ebp
c0003865:	c3                   	ret    

c0003866 <dir_alloc>:
c0003866:	55                   	push   ebp
c0003867:	89 c5                	mov    ebp,eax
c0003869:	57                   	push   edi
c000386a:	89 d7                	mov    edi,edx
c000386c:	56                   	push   esi
c000386d:	31 d2                	xor    edx,edx
c000386f:	53                   	push   ebx
c0003870:	83 ec 0c             	sub    esp,0xc
c0003873:	8b 30                	mov    esi,DWORD PTR [eax]
c0003875:	e8 52 fc ff ff       	call   c00034cc <dir_sdi>
c000387a:	85 c0                	test   eax,eax
c000387c:	75 3b                	jne    c00038b9 <dir_alloc+0x53>
c000387e:	31 db                	xor    ebx,ebx
c0003880:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003883:	89 f0                	mov    eax,esi
c0003885:	e8 68 ec ff ff       	call   c00024f2 <move_window>
c000388a:	85 c0                	test   eax,eax
c000388c:	75 2b                	jne    c00038b9 <dir_alloc+0x53>
c000388e:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003891:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003894:	85 d2                	test   edx,edx
c0003896:	74 08                	je     c00038a0 <dir_alloc+0x3a>
c0003898:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000389e:	75 07                	jne    c00038a7 <dir_alloc+0x41>
c00038a0:	43                   	inc    ebx
c00038a1:	39 fb                	cmp    ebx,edi
c00038a3:	75 04                	jne    c00038a9 <dir_alloc+0x43>
c00038a5:	eb 1c                	jmp    c00038c3 <dir_alloc+0x5d>
c00038a7:	31 db                	xor    ebx,ebx
c00038a9:	ba 01 00 00 00       	mov    edx,0x1
c00038ae:	89 e8                	mov    eax,ebp
c00038b0:	e8 ac fe ff ff       	call   c0003761 <dir_next>
c00038b5:	85 c0                	test   eax,eax
c00038b7:	74 c7                	je     c0003880 <dir_alloc+0x1a>
c00038b9:	83 f8 04             	cmp    eax,0x4
c00038bc:	75 05                	jne    c00038c3 <dir_alloc+0x5d>
c00038be:	b8 07 00 00 00       	mov    eax,0x7
c00038c3:	83 c4 0c             	add    esp,0xc
c00038c6:	5b                   	pop    ebx
c00038c7:	5e                   	pop    esi
c00038c8:	5f                   	pop    edi
c00038c9:	5d                   	pop    ebp
c00038ca:	c3                   	ret    

c00038cb <dir_read>:
c00038cb:	55                   	push   ebp
c00038cc:	57                   	push   edi
c00038cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038d2:	56                   	push   esi
c00038d3:	be 04 00 00 00       	mov    esi,0x4
c00038d8:	53                   	push   ebx
c00038d9:	89 c3                	mov    ebx,eax
c00038db:	83 ec 1c             	sub    esp,0x1c
c00038de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038e2:	8b 28                	mov    ebp,DWORD PTR [eax]
c00038e4:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038ec:	85 d2                	test   edx,edx
c00038ee:	0f 84 e3 00 00 00    	je     c00039d7 <dir_read+0x10c>
c00038f4:	89 e8                	mov    eax,ebp
c00038f6:	e8 f7 eb ff ff       	call   c00024f2 <move_window>
c00038fb:	89 c6                	mov    esi,eax
c00038fd:	85 c0                	test   eax,eax
c00038ff:	0f 85 dd 00 00 00    	jne    c00039e2 <dir_read+0x117>
c0003905:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003908:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000390b:	88 04 24             	mov    BYTE PTR [esp],al
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 84 c7 00 00 00    	je     c00039dd <dir_read+0x112>
c0003916:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003919:	83 e1 3f             	and    ecx,0x3f
c000391c:	83 f8 2e             	cmp    eax,0x2e
c000391f:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003922:	0f 84 95 00 00 00    	je     c00039bd <dir_read+0xf2>
c0003928:	3d e5 00 00 00       	cmp    eax,0xe5
c000392d:	0f 84 8a 00 00 00    	je     c00039bd <dir_read+0xf2>
c0003933:	0f b6 c9             	movzx  ecx,cl
c0003936:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000393a:	83 e1 df             	and    ecx,0xffffffdf
c000393d:	83 f9 08             	cmp    ecx,0x8
c0003940:	0f 94 c1             	sete   cl
c0003943:	0f b6 c9             	movzx  ecx,cl
c0003946:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000394a:	75 71                	jne    c00039bd <dir_read+0xf2>
c000394c:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003951:	75 4a                	jne    c000399d <dir_read+0xd2>
c0003953:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003957:	74 16                	je     c000396f <dir_read+0xa4>
c0003959:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000395c:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003963:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003967:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000396a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000396d:	eb 0e                	jmp    c000397d <dir_read+0xb2>
c000396f:	89 f9                	mov    ecx,edi
c0003971:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003976:	0f b6 c9             	movzx  ecx,cl
c0003979:	39 c1                	cmp    ecx,eax
c000397b:	75 45                	jne    c00039c2 <dir_read+0xf7>
c000397d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003981:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003986:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003989:	75 37                	jne    c00039c2 <dir_read+0xf7>
c000398b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000398e:	e8 6c e8 ff ff       	call   c00021ff <pick_lfn>
c0003993:	85 c0                	test   eax,eax
c0003995:	74 2b                	je     c00039c2 <dir_read+0xf7>
c0003997:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000399a:	4f                   	dec    edi
c000399b:	eb 25                	jmp    c00039c2 <dir_read+0xf7>
c000399d:	89 f8                	mov    eax,edi
c000399f:	84 c0                	test   al,al
c00039a1:	75 11                	jne    c00039b4 <dir_read+0xe9>
c00039a3:	89 d0                	mov    eax,edx
c00039a5:	e8 32 ea ff ff       	call   c00023dc <sum_sfn>
c00039aa:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ae:	75 04                	jne    c00039b4 <dir_read+0xe9>
c00039b0:	31 f6                	xor    esi,esi
c00039b2:	eb 35                	jmp    c00039e9 <dir_read+0x11e>
c00039b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039bb:	eb 2c                	jmp    c00039e9 <dir_read+0x11e>
c00039bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039c2:	31 d2                	xor    edx,edx
c00039c4:	89 d8                	mov    eax,ebx
c00039c6:	e8 96 fd ff ff       	call   c0003761 <dir_next>
c00039cb:	89 c6                	mov    esi,eax
c00039cd:	85 c0                	test   eax,eax
c00039cf:	0f 84 14 ff ff ff    	je     c00038e9 <dir_read+0x1e>
c00039d5:	eb 0b                	jmp    c00039e2 <dir_read+0x117>
c00039d7:	85 f6                	test   esi,esi
c00039d9:	74 d5                	je     c00039b0 <dir_read+0xe5>
c00039db:	eb 05                	jmp    c00039e2 <dir_read+0x117>
c00039dd:	be 04 00 00 00       	mov    esi,0x4
c00039e2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039e9:	83 c4 1c             	add    esp,0x1c
c00039ec:	89 f0                	mov    eax,esi
c00039ee:	5b                   	pop    ebx
c00039ef:	5e                   	pop    esi
c00039f0:	5f                   	pop    edi
c00039f1:	5d                   	pop    ebp
c00039f2:	c3                   	ret    

c00039f3 <dir_remove>:
c00039f3:	57                   	push   edi
c00039f4:	56                   	push   esi
c00039f5:	53                   	push   ebx
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00039fb:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fd:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a00:	83 fa ff             	cmp    edx,0xffffffff
c0003a03:	74 09                	je     c0003a0e <dir_remove+0x1b>
c0003a05:	e8 c2 fa ff ff       	call   c00034cc <dir_sdi>
c0003a0a:	85 c0                	test   eax,eax
c0003a0c:	75 34                	jne    c0003a42 <dir_remove+0x4f>
c0003a0e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a11:	89 f0                	mov    eax,esi
c0003a13:	e8 da ea ff ff       	call   c00024f2 <move_window>
c0003a18:	85 c0                	test   eax,eax
c0003a1a:	75 1c                	jne    c0003a38 <dir_remove+0x45>
c0003a1c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a1f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a22:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a26:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a29:	73 17                	jae    c0003a42 <dir_remove+0x4f>
c0003a2b:	31 d2                	xor    edx,edx
c0003a2d:	89 d8                	mov    eax,ebx
c0003a2f:	e8 2d fd ff ff       	call   c0003761 <dir_next>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	74 d6                	je     c0003a0e <dir_remove+0x1b>
c0003a38:	83 f8 04             	cmp    eax,0x4
c0003a3b:	75 05                	jne    c0003a42 <dir_remove+0x4f>
c0003a3d:	b8 02 00 00 00       	mov    eax,0x2
c0003a42:	5b                   	pop    ebx
c0003a43:	5e                   	pop    esi
c0003a44:	5f                   	pop    edi
c0003a45:	c3                   	ret    

c0003a46 <dir_find>:
c0003a46:	55                   	push   ebp
c0003a47:	31 d2                	xor    edx,edx
c0003a49:	57                   	push   edi
c0003a4a:	56                   	push   esi
c0003a4b:	53                   	push   ebx
c0003a4c:	89 c3                	mov    ebx,eax
c0003a4e:	83 ec 1c             	sub    esp,0x1c
c0003a51:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a57:	89 d8                	mov    eax,ebx
c0003a59:	e8 6e fa ff ff       	call   c00034cc <dir_sdi>
c0003a5e:	89 c6                	mov    esi,eax
c0003a60:	85 c0                	test   eax,eax
c0003a62:	0f 85 1d 01 00 00    	jne    c0003b85 <dir_find+0x13f>
c0003a68:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a6f:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003a74:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a79:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a80:	e8 6d ea ff ff       	call   c00024f2 <move_window>
c0003a85:	89 c6                	mov    esi,eax
c0003a87:	85 c0                	test   eax,eax
c0003a89:	0f 85 f6 00 00 00    	jne    c0003b85 <dir_find+0x13f>
c0003a8f:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003a92:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003a96:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003a9a:	85 c9                	test   ecx,ecx
c0003a9c:	0f 84 de 00 00 00    	je     c0003b80 <dir_find+0x13a>
c0003aa2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003aa5:	89 d0                	mov    eax,edx
c0003aa7:	83 e0 3f             	and    eax,0x3f
c0003aaa:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ab0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ab3:	0f 84 a6 00 00 00    	je     c0003b5f <dir_find+0x119>
c0003ab9:	80 e2 08             	and    dl,0x8
c0003abc:	0f b6 c0             	movzx  eax,al
c0003abf:	74 0b                	je     c0003acc <dir_find+0x86>
c0003ac1:	83 f8 0f             	cmp    eax,0xf
c0003ac4:	0f 85 95 00 00 00    	jne    c0003b5f <dir_find+0x119>
c0003aca:	eb 05                	jmp    c0003ad1 <dir_find+0x8b>
c0003acc:	83 f8 0f             	cmp    eax,0xf
c0003acf:	75 62                	jne    c0003b33 <dir_find+0xed>
c0003ad1:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003ad5:	0f 85 90 00 00 00    	jne    c0003b6b <dir_find+0x125>
c0003adb:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003ae0:	74 17                	je     c0003af9 <dir_find+0xb3>
c0003ae2:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ae5:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003aed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003af1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003af4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003af7:	eb 13                	jmp    c0003b0c <dir_find+0xc6>
c0003af9:	89 f8                	mov    eax,edi
c0003afb:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b00:	0f b6 d0             	movzx  edx,al
c0003b03:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b08:	39 c2                	cmp    edx,eax
c0003b0a:	75 5f                	jne    c0003b6b <dir_find+0x125>
c0003b0c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b10:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b15:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b18:	75 51                	jne    c0003b6b <dir_find+0x125>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	89 ea                	mov    edx,ebp
c0003b20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b23:	e8 37 f3 ff ff       	call   c0002e5f <cmp_lfn>
c0003b28:	85 c0                	test   eax,eax
c0003b2a:	74 3f                	je     c0003b6b <dir_find+0x125>
c0003b2c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b30:	4f                   	dec    edi
c0003b31:	eb 38                	jmp    c0003b6b <dir_find+0x125>
c0003b33:	89 f8                	mov    eax,edi
c0003b35:	84 c0                	test   al,al
c0003b37:	75 0d                	jne    c0003b46 <dir_find+0x100>
c0003b39:	89 e8                	mov    eax,ebp
c0003b3b:	e8 9c e8 ff ff       	call   c00023dc <sum_sfn>
c0003b40:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b44:	74 3f                	je     c0003b85 <dir_find+0x13f>
c0003b46:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b4a:	75 13                	jne    c0003b5f <dir_find+0x119>
c0003b4c:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b54:	89 e8                	mov    eax,ebp
c0003b56:	e8 7c e4 ff ff       	call   c0001fd7 <mem_cmp>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	74 26                	je     c0003b85 <dir_find+0x13f>
c0003b5f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b66:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b6b:	31 d2                	xor    edx,edx
c0003b6d:	89 d8                	mov    eax,ebx
c0003b6f:	e8 ed fb ff ff       	call   c0003761 <dir_next>
c0003b74:	89 c6                	mov    esi,eax
c0003b76:	85 c0                	test   eax,eax
c0003b78:	0f 84 fb fe ff ff    	je     c0003a79 <dir_find+0x33>
c0003b7e:	eb 05                	jmp    c0003b85 <dir_find+0x13f>
c0003b80:	be 04 00 00 00       	mov    esi,0x4
c0003b85:	83 c4 1c             	add    esp,0x1c
c0003b88:	89 f0                	mov    eax,esi
c0003b8a:	5b                   	pop    ebx
c0003b8b:	5e                   	pop    esi
c0003b8c:	5f                   	pop    edi
c0003b8d:	5d                   	pop    ebp
c0003b8e:	c3                   	ret    

c0003b8f <follow_path>:
c0003b8f:	56                   	push   esi
c0003b90:	53                   	push   ebx
c0003b91:	89 c3                	mov    ebx,eax
c0003b93:	83 ec 14             	sub    esp,0x14
c0003b96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003b9a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ba0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003ba3:	83 fa 5c             	cmp    edx,0x5c
c0003ba6:	75 07                	jne    c0003baf <follow_path+0x20>
c0003ba8:	40                   	inc    eax
c0003ba9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bad:	eb ed                	jmp    c0003b9c <follow_path+0xd>
c0003baf:	83 fa 2f             	cmp    edx,0x2f
c0003bb2:	74 f4                	je     c0003ba8 <follow_path+0x19>
c0003bb4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bbb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bbe:	77 3e                	ja     c0003bfe <follow_path+0x6f>
c0003bc0:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bc4:	31 d2                	xor    edx,edx
c0003bc6:	89 d8                	mov    eax,ebx
c0003bc8:	e8 ff f8 ff ff       	call   c00034cc <dir_sdi>
c0003bcd:	eb 4f                	jmp    c0003c1e <follow_path+0x8f>
c0003bcf:	89 d8                	mov    eax,ebx
c0003bd1:	e8 70 fe ff ff       	call   c0003a46 <dir_find>
c0003bd6:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003bd9:	85 c0                	test   eax,eax
c0003bdb:	75 32                	jne    c0003c0f <follow_path+0x80>
c0003bdd:	80 e2 04             	and    dl,0x4
c0003be0:	75 3c                	jne    c0003c1e <follow_path+0x8f>
c0003be2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003be6:	74 31                	je     c0003c19 <follow_path+0x8a>
c0003be8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003beb:	25 ff 01 00 00       	and    eax,0x1ff
c0003bf0:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003bf4:	8a 06                	mov    al,BYTE PTR [esi]
c0003bf6:	e8 7c f7 ff ff       	call   c0003377 <ld_clust.isra.0>
c0003bfb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003bfe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c02:	89 d8                	mov    eax,ebx
c0003c04:	e8 7f ef ff ff       	call   c0002b88 <create_name>
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 c2                	je     c0003bcf <follow_path+0x40>
c0003c0d:	eb 0f                	jmp    c0003c1e <follow_path+0x8f>
c0003c0f:	83 f8 04             	cmp    eax,0x4
c0003c12:	75 0a                	jne    c0003c1e <follow_path+0x8f>
c0003c14:	80 e2 04             	and    dl,0x4
c0003c17:	75 05                	jne    c0003c1e <follow_path+0x8f>
c0003c19:	b8 05 00 00 00       	mov    eax,0x5
c0003c1e:	83 c4 14             	add    esp,0x14
c0003c21:	5b                   	pop    ebx
c0003c22:	5e                   	pop    esi
c0003c23:	c3                   	ret    

c0003c24 <dir_register>:
c0003c24:	55                   	push   ebp
c0003c25:	57                   	push   edi
c0003c26:	56                   	push   esi
c0003c27:	be 06 00 00 00       	mov    esi,0x6
c0003c2c:	53                   	push   ebx
c0003c2d:	83 ec 2c             	sub    esp,0x2c
c0003c30:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c33:	80 e2 a0             	and    dl,0xa0
c0003c36:	0f 85 66 01 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003c3c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c3e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c46:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c4d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c52:	74 06                	je     c0003c5a <dir_register+0x36>
c0003c54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c58:	eb ef                	jmp    c0003c49 <dir_register+0x25>
c0003c5a:	89 c3                	mov    ebx,eax
c0003c5c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c61:	8d 40 20             	lea    eax,[eax+0x20]
c0003c64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c68:	89 c2                	mov    edx,eax
c0003c6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003c6e:	e8 44 e3 ff ff       	call   c0001fb7 <mem_cpy>
c0003c73:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003c78:	74 48                	je     c0003cc2 <dir_register+0x9e>
c0003c7a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003c7e:	bd 01 00 00 00       	mov    ebp,0x1
c0003c83:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003c86:	55                   	push   ebp
c0003c87:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c8f:	e8 86 e6 ff ff       	call   c000231a <gen_numname>
c0003c94:	58                   	pop    eax
c0003c95:	89 d8                	mov    eax,ebx
c0003c97:	e8 aa fd ff ff       	call   c0003a46 <dir_find>
c0003c9c:	89 c6                	mov    esi,eax
c0003c9e:	85 c0                	test   eax,eax
c0003ca0:	75 10                	jne    c0003cb2 <dir_register+0x8e>
c0003ca2:	45                   	inc    ebp
c0003ca3:	83 fd 64             	cmp    ebp,0x64
c0003ca6:	75 db                	jne    c0003c83 <dir_register+0x5f>
c0003ca8:	be 07 00 00 00       	mov    esi,0x7
c0003cad:	e9 f0 00 00 00       	jmp    c0003da2 <dir_register+0x17e>
c0003cb2:	83 f8 04             	cmp    eax,0x4
c0003cb5:	0f 85 e7 00 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003cbb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cbf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cc2:	bd 01 00 00 00       	mov    ebp,0x1
c0003cc7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003ccc:	74 13                	je     c0003ce1 <dir_register+0xbd>
c0003cce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cd2:	b9 0d 00 00 00       	mov    ecx,0xd
c0003cd7:	83 c0 0c             	add    eax,0xc
c0003cda:	31 d2                	xor    edx,edx
c0003cdc:	f7 f1                	div    ecx
c0003cde:	8d 68 01             	lea    ebp,[eax+0x1]
c0003ce1:	89 ea                	mov    edx,ebp
c0003ce3:	89 d8                	mov    eax,ebx
c0003ce5:	e8 7c fb ff ff       	call   c0003866 <dir_alloc>
c0003cea:	89 c6                	mov    esi,eax
c0003cec:	85 c0                	test   eax,eax
c0003cee:	0f 85 ae 00 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003cf4:	4d                   	dec    ebp
c0003cf5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003cf9:	74 67                	je     c0003d62 <dir_register+0x13e>
c0003cfb:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003cfe:	89 e8                	mov    eax,ebp
c0003d00:	c1 e0 05             	shl    eax,0x5
c0003d03:	29 c2                	sub    edx,eax
c0003d05:	89 d8                	mov    eax,ebx
c0003d07:	e8 c0 f7 ff ff       	call   c00034cc <dir_sdi>
c0003d0c:	89 c6                	mov    esi,eax
c0003d0e:	85 c0                	test   eax,eax
c0003d10:	0f 85 8c 00 00 00    	jne    c0003da2 <dir_register+0x17e>
c0003d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d1a:	e8 bd e6 ff ff       	call   c00023dc <sum_sfn>
c0003d1f:	0f b6 e8             	movzx  ebp,al
c0003d22:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d25:	89 f8                	mov    eax,edi
c0003d27:	e8 c6 e7 ff ff       	call   c00024f2 <move_window>
c0003d2c:	89 c6                	mov    esi,eax
c0003d2e:	85 c0                	test   eax,eax
c0003d30:	75 70                	jne    c0003da2 <dir_register+0x17e>
c0003d32:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d37:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d3a:	83 ec 0c             	sub    esp,0xc
c0003d3d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d40:	55                   	push   ebp
c0003d41:	e8 39 e5 ff ff       	call   c000227f <put_lfn>
c0003d46:	31 d2                	xor    edx,edx
c0003d48:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d4c:	89 d8                	mov    eax,ebx
c0003d4e:	e8 0e fa ff ff       	call   c0003761 <dir_next>
c0003d53:	83 c4 10             	add    esp,0x10
c0003d56:	89 c6                	mov    esi,eax
c0003d58:	85 c0                	test   eax,eax
c0003d5a:	75 46                	jne    c0003da2 <dir_register+0x17e>
c0003d5c:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d60:	75 c0                	jne    c0003d22 <dir_register+0xfe>
c0003d62:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d65:	89 f8                	mov    eax,edi
c0003d67:	e8 86 e7 ff ff       	call   c00024f2 <move_window>
c0003d6c:	89 c6                	mov    esi,eax
c0003d6e:	85 c0                	test   eax,eax
c0003d70:	75 30                	jne    c0003da2 <dir_register+0x17e>
c0003d72:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d75:	b9 20 00 00 00       	mov    ecx,0x20
c0003d7a:	31 d2                	xor    edx,edx
c0003d7c:	e8 4b e2 ff ff       	call   c0001fcc <mem_set>
c0003d81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d88:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d8d:	e8 25 e2 ff ff       	call   c0001fb7 <mem_cpy>
c0003d92:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003d95:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d98:	83 e0 18             	and    eax,0x18
c0003d9b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003d9e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003da2:	83 c4 2c             	add    esp,0x2c
c0003da5:	89 f0                	mov    eax,esi
c0003da7:	5b                   	pop    ebx
c0003da8:	5e                   	pop    esi
c0003da9:	5f                   	pop    edi
c0003daa:	5d                   	pop    ebp
c0003dab:	c3                   	ret    

c0003dac <f_mount>:
c0003dac:	53                   	push   ebx
c0003dad:	83 ec 18             	sub    esp,0x18
c0003db0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003db4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003db8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003dc0:	e8 37 e6 ff ff       	call   c00023fc <get_ldnumber>
c0003dc5:	89 c2                	mov    edx,eax
c0003dc7:	b8 0b 00 00 00       	mov    eax,0xb
c0003dcc:	85 d2                	test   edx,edx
c0003dce:	78 39                	js     c0003e09 <f_mount+0x5d>
c0003dd0:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003dd7:	85 c0                	test   eax,eax
c0003dd9:	74 03                	je     c0003dde <f_mount+0x32>
c0003ddb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003de2:	85 c0                	test   eax,eax
c0003de4:	74 03                	je     c0003de9 <f_mount+0x3d>
c0003de6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ded:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003df4:	31 c0                	xor    eax,eax
c0003df6:	84 db                	test   bl,bl
c0003df8:	74 0f                	je     c0003e09 <f_mount+0x5d>
c0003dfa:	31 c9                	xor    ecx,ecx
c0003dfc:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e00:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e04:	e8 3c e8 ff ff       	call   c0002645 <mount_volume>
c0003e09:	83 c4 18             	add    esp,0x18
c0003e0c:	5b                   	pop    ebx
c0003e0d:	c3                   	ret    

c0003e0e <f_open>:
c0003e0e:	55                   	push   ebp
c0003e0f:	b8 09 00 00 00       	mov    eax,0x9
c0003e14:	57                   	push   edi
c0003e15:	56                   	push   esi
c0003e16:	53                   	push   ebx
c0003e17:	83 ec 5c             	sub    esp,0x5c
c0003e1a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e1e:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e22:	85 db                	test   ebx,ebx
c0003e24:	0f 84 9f 02 00 00    	je     c00040c9 <f_open+0x2bb>
c0003e2a:	89 fd                	mov    ebp,edi
c0003e2c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e30:	83 e5 3f             	and    ebp,0x3f
c0003e33:	89 e8                	mov    eax,ebp
c0003e35:	89 ee                	mov    esi,ebp
c0003e37:	0f b6 c8             	movzx  ecx,al
c0003e3a:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e3e:	e8 02 e8 ff ff       	call   c0002645 <mount_volume>
c0003e43:	85 c0                	test   eax,eax
c0003e45:	0f 85 78 02 00 00    	jne    c00040c3 <f_open+0x2b5>
c0003e4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e4f:	83 ec 0c             	sub    esp,0xc
c0003e52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e56:	68 00 02 00 00       	push   0x200
c0003e5b:	e8 74 1f 00 00       	call   c0005dd4 <ff_memalloc>
c0003e60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e64:	83 c4 10             	add    esp,0x10
c0003e67:	b8 11 00 00 00       	mov    eax,0x11
c0003e6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003e71:	0f 84 52 02 00 00    	je     c00040c9 <f_open+0x2bb>
c0003e77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e7b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e7f:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003e83:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003e86:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e8a:	e8 00 fd ff ff       	call   c0003b8f <follow_path>
c0003e8f:	85 c0                	test   eax,eax
c0003e91:	75 0c                	jne    c0003e9f <f_open+0x91>
c0003e93:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003e98:	74 05                	je     c0003e9f <f_open+0x91>
c0003e9a:	b8 06 00 00 00       	mov    eax,0x6
c0003e9f:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ea5:	0f 84 d5 00 00 00    	je     c0003f80 <f_open+0x172>
c0003eab:	85 c0                	test   eax,eax
c0003ead:	74 21                	je     c0003ed0 <f_open+0xc2>
c0003eaf:	83 f8 04             	cmp    eax,0x4
c0003eb2:	0f 85 f0 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003eb8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebc:	e8 63 fd ff ff       	call   c0003c24 <dir_register>
c0003ec1:	85 c0                	test   eax,eax
c0003ec3:	0f 85 df 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003ec9:	83 cd 08             	or     ebp,0x8
c0003ecc:	89 ee                	mov    esi,ebp
c0003ece:	eb 2c                	jmp    c0003efc <f_open+0xee>
c0003ed0:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ed4:	b8 07 00 00 00       	mov    eax,0x7
c0003ed9:	80 e2 11             	and    dl,0x11
c0003edc:	0f 85 c6 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003ee2:	b8 08 00 00 00       	mov    eax,0x8
c0003ee7:	f7 c7 04 00 00 00    	test   edi,0x4
c0003eed:	0f 85 b5 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003ef3:	83 e7 08             	and    edi,0x8
c0003ef6:	0f 84 b1 00 00 00    	je     c0003fad <f_open+0x19f>
c0003efc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f04:	89 ea                	mov    edx,ebp
c0003f06:	8a 00                	mov    al,BYTE PTR [eax]
c0003f08:	e8 6a f4 ff ff       	call   c0003377 <ld_clust.isra.0>
c0003f0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f12:	89 c7                	mov    edi,eax
c0003f14:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f17:	e8 98 e0 ff ff       	call   c0001fb4 <st_dword>
c0003f1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f20:	31 c9                	xor    ecx,ecx
c0003f22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f2a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f2e:	e8 6d f4 ff ff       	call   c00033a0 <st_clust.isra.1>
c0003f33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f37:	31 d2                	xor    edx,edx
c0003f39:	83 c0 1c             	add    eax,0x1c
c0003f3c:	e8 73 e0 ff ff       	call   c0001fb4 <st_dword>
c0003f41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f45:	85 ff                	test   edi,edi
c0003f47:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f4b:	74 60                	je     c0003fad <f_open+0x19f>
c0003f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f51:	31 c9                	xor    ecx,ecx
c0003f53:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f56:	89 fa                	mov    edx,edi
c0003f58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f5c:	e8 72 f7 ff ff       	call   c00036d3 <remove_chain>
c0003f61:	85 c0                	test   eax,eax
c0003f63:	0f 85 3f 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003f69:	89 ea                	mov    edx,ebp
c0003f6b:	4f                   	dec    edi
c0003f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f70:	e8 7d e5 ff ff       	call   c00024f2 <move_window>
c0003f75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f79:	85 c0                	test   eax,eax
c0003f7b:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003f7e:	eb 27                	jmp    c0003fa7 <f_open+0x199>
c0003f80:	85 c0                	test   eax,eax
c0003f82:	0f 85 20 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003f88:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f8c:	b8 04 00 00 00       	mov    eax,0x4
c0003f91:	f6 c2 10             	test   dl,0x10
c0003f94:	0f 85 0e 01 00 00    	jne    c00040a8 <f_open+0x29a>
c0003f9a:	83 e7 02             	and    edi,0x2
c0003f9d:	74 0e                	je     c0003fad <f_open+0x19f>
c0003f9f:	b8 07 00 00 00       	mov    eax,0x7
c0003fa4:	80 e2 01             	and    dl,0x1
c0003fa7:	0f 85 fb 00 00 00    	jne    c00040a8 <f_open+0x29a>
c0003fad:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fb3:	74 03                	je     c0003fb8 <f_open+0x1aa>
c0003fb5:	83 ce 40             	or     esi,0x40
c0003fb8:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003fbc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003fc0:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003fc3:	89 fa                	mov    edx,edi
c0003fc5:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003fc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003fcb:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003fce:	e8 a4 f3 ff ff       	call   c0003377 <ld_clust.isra.0>
c0003fd3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003fd6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003fd9:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003fdc:	e8 b7 df ff ff       	call   c0001f98 <ld_dword>
c0003fe1:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003fe3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003fe6:	31 d2                	xor    edx,edx
c0003fe8:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003fec:	b9 00 02 00 00       	mov    ecx,0x200
c0003ff1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003ff5:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003ff9:	89 f0                	mov    eax,esi
c0003ffb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004002:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004005:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000400c:	89 f8                	mov    eax,edi
c000400e:	e8 b9 df ff ff       	call   c0001fcc <mem_set>
c0004013:	83 e6 20             	and    esi,0x20
c0004016:	75 07                	jne    c000401f <f_open+0x211>
c0004018:	31 c0                	xor    eax,eax
c000401a:	e9 89 00 00 00       	jmp    c00040a8 <f_open+0x29a>
c000401f:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004022:	85 ed                	test   ebp,ebp
c0004024:	74 f2                	je     c0004018 <f_open+0x20a>
c0004026:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0004029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000402d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004030:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004034:	c1 e6 09             	shl    esi,0x9
c0004037:	39 ee                	cmp    esi,ebp
c0004039:	73 1c                	jae    c0004057 <f_open+0x249>
c000403b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000403d:	29 f5                	sub    ebp,esi
c000403f:	e8 84 f3 ff ff       	call   c00033c8 <get_fat.isra.2>
c0004044:	89 c2                	mov    edx,eax
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	76 10                	jbe    c000405b <f_open+0x24d>
c000404b:	83 f8 ff             	cmp    eax,0xffffffff
c000404e:	75 e7                	jne    c0004037 <f_open+0x229>
c0004050:	b8 01 00 00 00       	mov    eax,0x1
c0004055:	eb 09                	jmp    c0004060 <f_open+0x252>
c0004057:	31 c0                	xor    eax,eax
c0004059:	eb 05                	jmp    c0004060 <f_open+0x252>
c000405b:	b8 02 00 00 00       	mov    eax,0x2
c0004060:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004063:	85 c0                	test   eax,eax
c0004065:	75 41                	jne    c00040a8 <f_open+0x29a>
c0004067:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c000406d:	74 a9                	je     c0004018 <f_open+0x20a>
c000406f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004073:	89 f0                	mov    eax,esi
c0004075:	e8 68 e1 ff ff       	call   c00021e2 <clst2sect>
c000407a:	89 c2                	mov    edx,eax
c000407c:	b8 02 00 00 00       	mov    eax,0x2
c0004081:	85 d2                	test   edx,edx
c0004083:	74 23                	je     c00040a8 <f_open+0x29a>
c0004085:	c1 ed 09             	shr    ebp,0x9
c0004088:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c000408c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000408f:	6a 01                	push   0x1
c0004091:	50                   	push   eax
c0004092:	57                   	push   edi
c0004093:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0004097:	50                   	push   eax
c0004098:	e8 a3 de ff ff       	call   c0001f40 <disk_read>
c000409d:	83 c4 10             	add    esp,0x10
c00040a0:	85 c0                	test   eax,eax
c00040a2:	0f 95 c0             	setne  al
c00040a5:	0f b6 c0             	movzx  eax,al
c00040a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040ac:	83 ec 0c             	sub    esp,0xc
c00040af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040b3:	e8 34 1d 00 00       	call   c0005dec <ff_memfree>
c00040b8:	83 c4 10             	add    esp,0x10
c00040bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040bf:	85 c0                	test   eax,eax
c00040c1:	74 06                	je     c00040c9 <f_open+0x2bb>
c00040c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040c9:	83 c4 5c             	add    esp,0x5c
c00040cc:	5b                   	pop    ebx
c00040cd:	5e                   	pop    esi
c00040ce:	5f                   	pop    edi
c00040cf:	5d                   	pop    ebp
c00040d0:	c3                   	ret    

c00040d1 <f_read>:
c00040d1:	55                   	push   ebp
c00040d2:	57                   	push   edi
c00040d3:	56                   	push   esi
c00040d4:	53                   	push   ebx
c00040d5:	83 ec 2c             	sub    esp,0x2c
c00040d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00040e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00040e6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00040ee:	89 d8                	mov    eax,ebx
c00040f0:	e8 54 e3 ff ff       	call   c0002449 <validate>
c00040f5:	89 c5                	mov    ebp,eax
c00040f7:	85 c0                	test   eax,eax
c00040f9:	0f 85 c7 01 00 00    	jne    c00042c6 <f_read+0x1f5>
c00040ff:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004103:	85 ed                	test   ebp,ebp
c0004105:	0f 85 bb 01 00 00    	jne    c00042c6 <f_read+0x1f5>
c000410b:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c000410f:	0f 84 ac 01 00 00    	je     c00042c1 <f_read+0x1f0>
c0004115:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004118:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c000411b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000411f:	39 f0                	cmp    eax,esi
c0004121:	0f 86 b0 00 00 00    	jbe    c00041d7 <f_read+0x106>
c0004127:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000412b:	e9 a7 00 00 00       	jmp    c00041d7 <f_read+0x106>
c0004130:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004133:	a9 ff 01 00 00       	test   eax,0x1ff
c0004138:	0f 85 56 01 00 00    	jne    c0004294 <f_read+0x1c3>
c000413e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004142:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0004146:	89 c2                	mov    edx,eax
c0004148:	4f                   	dec    edi
c0004149:	c1 ea 09             	shr    edx,0x9
c000414c:	21 d7                	and    edi,edx
c000414e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004152:	0f 84 8f 00 00 00    	je     c00041e7 <f_read+0x116>
c0004158:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000415c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415f:	89 c8                	mov    eax,ecx
c0004161:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004165:	e8 78 e0 ff ff       	call   c00021e2 <clst2sect>
c000416a:	85 c0                	test   eax,eax
c000416c:	0f 84 8d 00 00 00    	je     c00041ff <f_read+0x12e>
c0004172:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004176:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c000417e:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0004181:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004185:	0f 86 bf 00 00 00    	jbe    c000424a <f_read+0x179>
c000418b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000418f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004193:	c1 ee 09             	shr    esi,0x9
c0004196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000419a:	01 f2                	add    edx,esi
c000419c:	39 c2                	cmp    edx,eax
c000419e:	76 06                	jbe    c00041a6 <f_read+0xd5>
c00041a0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041a4:	89 c6                	mov    esi,eax
c00041a6:	56                   	push   esi
c00041a7:	57                   	push   edi
c00041a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041b0:	50                   	push   eax
c00041b1:	e8 8a dd ff ff       	call   c0001f40 <disk_read>
c00041b6:	83 c4 10             	add    esp,0x10
c00041b9:	85 c0                	test   eax,eax
c00041bb:	75 55                	jne    c0004212 <f_read+0x141>
c00041bd:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041c1:	75 65                	jne    c0004228 <f_read+0x157>
c00041c3:	c1 e6 09             	shl    esi,0x9
c00041c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ca:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c00041ce:	01 30                	add    DWORD PTR [eax],esi
c00041d0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00041d4:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00041d7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00041dc:	0f 85 4e ff ff ff    	jne    c0004130 <f_read+0x5f>
c00041e2:	e9 df 00 00 00       	jmp    c00042c6 <f_read+0x1f5>
c00041e7:	85 c0                	test   eax,eax
c00041e9:	75 05                	jne    c00041f0 <f_read+0x11f>
c00041eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041ee:	eb 0a                	jmp    c00041fa <f_read+0x129>
c00041f0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041f5:	e8 ce f1 ff ff       	call   c00033c8 <get_fat.isra.2>
c00041fa:	83 f8 01             	cmp    eax,0x1
c00041fd:	77 0e                	ja     c000420d <f_read+0x13c>
c00041ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004203:	bd 02 00 00 00       	mov    ebp,0x2
c0004208:	e9 b9 00 00 00       	jmp    c00042c6 <f_read+0x1f5>
c000420d:	83 f8 ff             	cmp    eax,0xffffffff
c0004210:	75 0e                	jne    c0004220 <f_read+0x14f>
c0004212:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004216:	bd 01 00 00 00       	mov    ebp,0x1
c000421b:	e9 a6 00 00 00       	jmp    c00042c6 <f_read+0x1f5>
c0004220:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004223:	e9 30 ff ff ff       	jmp    c0004158 <f_read+0x87>
c0004228:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000422b:	29 f8                	sub    eax,edi
c000422d:	39 f0                	cmp    eax,esi
c000422f:	73 92                	jae    c00041c3 <f_read+0xf2>
c0004231:	c1 e0 09             	shl    eax,0x9
c0004234:	8d 53 28             	lea    edx,[ebx+0x28]
c0004237:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000423b:	b9 00 02 00 00       	mov    ecx,0x200
c0004240:	e8 72 dd ff ff       	call   c0001fb7 <mem_cpy>
c0004245:	e9 79 ff ff ff       	jmp    c00041c3 <f_read+0xf2>
c000424a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000424d:	39 f8                	cmp    eax,edi
c000424f:	74 40                	je     c0004291 <f_read+0x1c0>
c0004251:	8d 73 28             	lea    esi,[ebx+0x28]
c0004254:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004258:	74 1e                	je     c0004278 <f_read+0x1a7>
c000425a:	6a 01                	push   0x1
c000425c:	50                   	push   eax
c000425d:	56                   	push   esi
c000425e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004262:	50                   	push   eax
c0004263:	e8 ee dc ff ff       	call   c0001f56 <disk_write>
c0004268:	83 c4 10             	add    esp,0x10
c000426b:	85 c0                	test   eax,eax
c000426d:	75 a3                	jne    c0004212 <f_read+0x141>
c000426f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004272:	83 e0 7f             	and    eax,0x7f
c0004275:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004278:	6a 01                	push   0x1
c000427a:	57                   	push   edi
c000427b:	56                   	push   esi
c000427c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004280:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004284:	50                   	push   eax
c0004285:	e8 b6 dc ff ff       	call   c0001f40 <disk_read>
c000428a:	83 c4 10             	add    esp,0x10
c000428d:	85 c0                	test   eax,eax
c000428f:	75 81                	jne    c0004212 <f_read+0x141>
c0004291:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004294:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004297:	ba 00 02 00 00       	mov    edx,0x200
c000429c:	25 ff 01 00 00       	and    eax,0x1ff
c00042a1:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042a5:	29 c2                	sub    edx,eax
c00042a7:	39 d6                	cmp    esi,edx
c00042a9:	76 02                	jbe    c00042ad <f_read+0x1dc>
c00042ab:	89 d6                	mov    esi,edx
c00042ad:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042b1:	89 f1                	mov    ecx,esi
c00042b3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042b7:	e8 fb dc ff ff       	call   c0001fb7 <mem_cpy>
c00042bc:	e9 05 ff ff ff       	jmp    c00041c6 <f_read+0xf5>
c00042c1:	bd 07 00 00 00       	mov    ebp,0x7
c00042c6:	83 c4 2c             	add    esp,0x2c
c00042c9:	89 e8                	mov    eax,ebp
c00042cb:	5b                   	pop    ebx
c00042cc:	5e                   	pop    esi
c00042cd:	5f                   	pop    edi
c00042ce:	5d                   	pop    ebp
c00042cf:	c3                   	ret    

c00042d0 <f_write>:
c00042d0:	55                   	push   ebp
c00042d1:	57                   	push   edi
c00042d2:	56                   	push   esi
c00042d3:	53                   	push   ebx
c00042d4:	83 ec 2c             	sub    esp,0x2c
c00042d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00042db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00042e5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 59 e1 ff ff       	call   c0002449 <validate>
c00042f0:	89 c5                	mov    ebp,eax
c00042f2:	85 c0                	test   eax,eax
c00042f4:	0f 85 14 02 00 00    	jne    c000450e <f_write+0x23e>
c00042fa:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00042fe:	85 ed                	test   ebp,ebp
c0004300:	0f 85 08 02 00 00    	jne    c000450e <f_write+0x23e>
c0004306:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000430a:	0f 84 f9 01 00 00    	je     c0004509 <f_write+0x239>
c0004310:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004313:	89 c7                	mov    edi,eax
c0004315:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004319:	0f 83 ef 00 00 00    	jae    c000440e <f_write+0x13e>
c000431f:	f7 d0                	not    eax
c0004321:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004325:	e9 e4 00 00 00       	jmp    c000440e <f_write+0x13e>
c000432a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000432d:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004333:	0f 85 9a 01 00 00    	jne    c00044d3 <f_write+0x203>
c0004339:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000433d:	89 d1                	mov    ecx,edx
c000433f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004343:	c1 e9 09             	shr    ecx,0x9
c0004346:	48                   	dec    eax
c0004347:	21 c8                	and    eax,ecx
c0004349:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000434d:	0f 84 c8 00 00 00    	je     c000441b <f_write+0x14b>
c0004353:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004357:	0f 85 22 01 00 00    	jne    c000447f <f_write+0x1af>
c000435d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004361:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004364:	89 c8                	mov    eax,ecx
c0004366:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000436a:	e8 73 de ff ff       	call   c00021e2 <clst2sect>
c000436f:	85 c0                	test   eax,eax
c0004371:	0f 84 d2 00 00 00    	je     c0004449 <f_write+0x179>
c0004377:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000437b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000437f:	01 c7                	add    edi,eax
c0004381:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004389:	0f 86 1c 01 00 00    	jbe    c00044ab <f_write+0x1db>
c000438f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004393:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004397:	c1 ee 09             	shr    esi,0x9
c000439a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000439e:	01 f2                	add    edx,esi
c00043a0:	39 c2                	cmp    edx,eax
c00043a2:	76 06                	jbe    c00043aa <f_write+0xda>
c00043a4:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043a8:	89 c6                	mov    esi,eax
c00043aa:	56                   	push   esi
c00043ab:	57                   	push   edi
c00043ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043b4:	50                   	push   eax
c00043b5:	e8 9c db ff ff       	call   c0001f56 <disk_write>
c00043ba:	83 c4 10             	add    esp,0x10
c00043bd:	85 c0                	test   eax,eax
c00043bf:	0f 85 97 00 00 00    	jne    c000445c <f_write+0x18c>
c00043c5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043c8:	29 fa                	sub    edx,edi
c00043ca:	39 f2                	cmp    edx,esi
c00043cc:	73 1d                	jae    c00043eb <f_write+0x11b>
c00043ce:	8d 43 28             	lea    eax,[ebx+0x28]
c00043d1:	c1 e2 09             	shl    edx,0x9
c00043d4:	b9 00 02 00 00       	mov    ecx,0x200
c00043d9:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00043dd:	e8 d5 db ff ff       	call   c0001fb7 <mem_cpy>
c00043e2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e5:	83 e0 7f             	and    eax,0x7f
c00043e8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043eb:	c1 e6 09             	shl    esi,0x9
c00043ee:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00043f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00043f6:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00043fa:	01 30                	add    DWORD PTR [eax],esi
c00043fc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00043ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004402:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004405:	39 f0                	cmp    eax,esi
c0004407:	73 02                	jae    c000440b <f_write+0x13b>
c0004409:	89 f0                	mov    eax,esi
c000440b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000440e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004413:	0f 85 11 ff ff ff    	jne    c000432a <f_write+0x5a>
c0004419:	eb 1b                	jmp    c0004436 <f_write+0x166>
c000441b:	85 d2                	test   edx,edx
c000441d:	75 09                	jne    c0004428 <f_write+0x158>
c000441f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004422:	85 c0                	test   eax,eax
c0004424:	75 1e                	jne    c0004444 <f_write+0x174>
c0004426:	eb 03                	jmp    c000442b <f_write+0x15b>
c0004428:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000442b:	89 d8                	mov    eax,ebx
c000442d:	e8 62 f1 ff ff       	call   c0003594 <create_chain>
c0004432:	85 c0                	test   eax,eax
c0004434:	75 0e                	jne    c0004444 <f_write+0x174>
c0004436:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004439:	83 c8 40             	or     eax,0x40
c000443c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000443f:	e9 ca 00 00 00       	jmp    c000450e <f_write+0x23e>
c0004444:	83 f8 01             	cmp    eax,0x1
c0004447:	75 0e                	jne    c0004457 <f_write+0x187>
c0004449:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000444d:	bd 02 00 00 00       	mov    ebp,0x2
c0004452:	e9 b7 00 00 00       	jmp    c000450e <f_write+0x23e>
c0004457:	83 f8 ff             	cmp    eax,0xffffffff
c000445a:	75 0e                	jne    c000446a <f_write+0x19a>
c000445c:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004460:	bd 01 00 00 00       	mov    ebp,0x1
c0004465:	e9 a4 00 00 00       	jmp    c000450e <f_write+0x23e>
c000446a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000446d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004471:	0f 85 dc fe ff ff    	jne    c0004353 <f_write+0x83>
c0004477:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000447a:	e9 d4 fe ff ff       	jmp    c0004353 <f_write+0x83>
c000447f:	6a 01                	push   0x1
c0004481:	8d 43 28             	lea    eax,[ebx+0x28]
c0004484:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004487:	50                   	push   eax
c0004488:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000448c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004490:	50                   	push   eax
c0004491:	e8 c0 da ff ff       	call   c0001f56 <disk_write>
c0004496:	83 c4 10             	add    esp,0x10
c0004499:	85 c0                	test   eax,eax
c000449b:	75 bf                	jne    c000445c <f_write+0x18c>
c000449d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044a0:	83 e0 7f             	and    eax,0x7f
c00044a3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044a6:	e9 b2 fe ff ff       	jmp    c000435d <f_write+0x8d>
c00044ab:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044ae:	74 20                	je     c00044d0 <f_write+0x200>
c00044b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044b3:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044b6:	76 18                	jbe    c00044d0 <f_write+0x200>
c00044b8:	6a 01                	push   0x1
c00044ba:	8d 43 28             	lea    eax,[ebx+0x28]
c00044bd:	57                   	push   edi
c00044be:	50                   	push   eax
c00044bf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044c3:	50                   	push   eax
c00044c4:	e8 77 da ff ff       	call   c0001f40 <disk_read>
c00044c9:	83 c4 10             	add    esp,0x10
c00044cc:	85 c0                	test   eax,eax
c00044ce:	75 8c                	jne    c000445c <f_write+0x18c>
c00044d0:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00044d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044d6:	ba 00 02 00 00       	mov    edx,0x200
c00044db:	25 ff 01 00 00       	and    eax,0x1ff
c00044e0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00044e4:	29 c2                	sub    edx,eax
c00044e6:	39 d6                	cmp    esi,edx
c00044e8:	76 02                	jbe    c00044ec <f_write+0x21c>
c00044ea:	89 d6                	mov    esi,edx
c00044ec:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00044f0:	89 f1                	mov    ecx,esi
c00044f2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00044f6:	e8 bc da ff ff       	call   c0001fb7 <mem_cpy>
c00044fb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044fe:	83 c8 80             	or     eax,0xffffff80
c0004501:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004504:	e9 e5 fe ff ff       	jmp    c00043ee <f_write+0x11e>
c0004509:	bd 07 00 00 00       	mov    ebp,0x7
c000450e:	83 c4 2c             	add    esp,0x2c
c0004511:	89 e8                	mov    eax,ebp
c0004513:	5b                   	pop    ebx
c0004514:	5e                   	pop    esi
c0004515:	5f                   	pop    edi
c0004516:	5d                   	pop    ebp
c0004517:	c3                   	ret    

c0004518 <f_sync>:
c0004518:	56                   	push   esi
c0004519:	53                   	push   ebx
c000451a:	83 ec 14             	sub    esp,0x14
c000451d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004521:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004525:	89 d8                	mov    eax,ebx
c0004527:	e8 1d df ff ff       	call   c0002449 <validate>
c000452c:	85 c0                	test   eax,eax
c000452e:	0f 85 a3 00 00 00    	jne    c00045d7 <f_sync+0xbf>
c0004534:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004537:	f6 c2 40             	test   dl,0x40
c000453a:	0f 84 97 00 00 00    	je     c00045d7 <f_sync+0xbf>
c0004540:	80 e2 80             	and    dl,0x80
c0004543:	74 2e                	je     c0004573 <f_sync+0x5b>
c0004545:	6a 01                	push   0x1
c0004547:	8d 43 28             	lea    eax,[ebx+0x28]
c000454a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000454d:	50                   	push   eax
c000454e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004552:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004556:	50                   	push   eax
c0004557:	e8 fa d9 ff ff       	call   c0001f56 <disk_write>
c000455c:	83 c4 10             	add    esp,0x10
c000455f:	89 c2                	mov    edx,eax
c0004561:	b8 01 00 00 00       	mov    eax,0x1
c0004566:	85 d2                	test   edx,edx
c0004568:	75 6d                	jne    c00045d7 <f_sync+0xbf>
c000456a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000456d:	83 e0 7f             	and    eax,0x7f
c0004570:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004573:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004576:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000457a:	e8 73 df ff ff       	call   c00024f2 <move_window>
c000457f:	85 c0                	test   eax,eax
c0004581:	75 54                	jne    c00045d7 <f_sync+0xbf>
c0004583:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004586:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004589:	89 f2                	mov    edx,esi
c000458b:	83 c8 20             	or     eax,0x20
c000458e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004591:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004596:	e8 05 ee ff ff       	call   c00033a0 <st_clust.isra.1>
c000459b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000459e:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045a1:	e8 0e da ff ff       	call   c0001fb4 <st_dword>
c00045a6:	8d 46 16             	lea    eax,[esi+0x16]
c00045a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00045ae:	e8 01 da ff ff       	call   c0001fb4 <st_dword>
c00045b3:	31 d2                	xor    edx,edx
c00045b5:	8d 46 12             	lea    eax,[esi+0x12]
c00045b8:	e8 f3 d9 ff ff       	call   c0001fb0 <st_word>
c00045bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045c1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045c9:	e8 5b e9 ff ff       	call   c0002f29 <sync_fs>
c00045ce:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045d1:	83 e2 bf             	and    edx,0xffffffbf
c00045d4:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045d7:	83 c4 14             	add    esp,0x14
c00045da:	5b                   	pop    ebx
c00045db:	5e                   	pop    esi
c00045dc:	c3                   	ret    

c00045dd <f_close>:
c00045dd:	53                   	push   ebx
c00045de:	83 ec 24             	sub    esp,0x24
c00045e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00045e5:	53                   	push   ebx
c00045e6:	e8 2d ff ff ff       	call   c0004518 <f_sync>
c00045eb:	83 c4 10             	add    esp,0x10
c00045ee:	85 c0                	test   eax,eax
c00045f0:	75 15                	jne    c0004607 <f_close+0x2a>
c00045f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00045f6:	89 d8                	mov    eax,ebx
c00045f8:	e8 4c de ff ff       	call   c0002449 <validate>
c00045fd:	85 c0                	test   eax,eax
c00045ff:	75 06                	jne    c0004607 <f_close+0x2a>
c0004601:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004607:	83 c4 18             	add    esp,0x18
c000460a:	5b                   	pop    ebx
c000460b:	c3                   	ret    

c000460c <f_lseek>:
c000460c:	55                   	push   ebp
c000460d:	57                   	push   edi
c000460e:	56                   	push   esi
c000460f:	53                   	push   ebx
c0004610:	83 ec 2c             	sub    esp,0x2c
c0004613:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004617:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000461b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000461f:	89 d8                	mov    eax,ebx
c0004621:	e8 23 de ff ff       	call   c0002449 <validate>
c0004626:	89 c5                	mov    ebp,eax
c0004628:	85 c0                	test   eax,eax
c000462a:	0f 85 83 01 00 00    	jne    c00047b3 <f_lseek+0x1a7>
c0004630:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004634:	85 ed                	test   ebp,ebp
c0004636:	0f 85 77 01 00 00    	jne    c00047b3 <f_lseek+0x1a7>
c000463c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000463f:	39 f0                	cmp    eax,esi
c0004641:	73 08                	jae    c000464b <f_lseek+0x3f>
c0004643:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004647:	75 02                	jne    c000464b <f_lseek+0x3f>
c0004649:	89 c6                	mov    esi,eax
c000464b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000464e:	85 f6                	test   esi,esi
c0004650:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004657:	75 07                	jne    c0004660 <f_lseek+0x54>
c0004659:	31 f6                	xor    esi,esi
c000465b:	e9 e2 00 00 00       	jmp    c0004742 <f_lseek+0x136>
c0004660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004664:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004668:	c1 e7 09             	shl    edi,0x9
c000466b:	85 c9                	test   ecx,ecx
c000466d:	74 28                	je     c0004697 <f_lseek+0x8b>
c000466f:	49                   	dec    ecx
c0004670:	31 d2                	xor    edx,edx
c0004672:	8d 46 ff             	lea    eax,[esi-0x1]
c0004675:	f7 f7                	div    edi
c0004677:	31 d2                	xor    edx,edx
c0004679:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000467d:	89 c8                	mov    eax,ecx
c000467f:	f7 f7                	div    edi
c0004681:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004685:	72 10                	jb     c0004697 <f_lseek+0x8b>
c0004687:	89 f8                	mov    eax,edi
c0004689:	f7 d8                	neg    eax
c000468b:	21 c1                	and    ecx,eax
c000468d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004690:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004693:	29 ce                	sub    esi,ecx
c0004695:	eb 3c                	jmp    c00046d3 <f_lseek+0xc7>
c0004697:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000469a:	85 c0                	test   eax,eax
c000469c:	75 32                	jne    c00046d0 <f_lseek+0xc4>
c000469e:	31 d2                	xor    edx,edx
c00046a0:	89 d8                	mov    eax,ebx
c00046a2:	e8 ed ee ff ff       	call   c0003594 <create_chain>
c00046a7:	83 f8 01             	cmp    eax,0x1
c00046aa:	75 0e                	jne    c00046ba <f_lseek+0xae>
c00046ac:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046b0:	bd 02 00 00 00       	mov    ebp,0x2
c00046b5:	e9 f9 00 00 00       	jmp    c00047b3 <f_lseek+0x1a7>
c00046ba:	83 f8 ff             	cmp    eax,0xffffffff
c00046bd:	75 0e                	jne    c00046cd <f_lseek+0xc1>
c00046bf:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046c3:	bd 01 00 00 00       	mov    ebp,0x1
c00046c8:	e9 e6 00 00 00       	jmp    c00047b3 <f_lseek+0x1a7>
c00046cd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046d0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00046d3:	85 c0                	test   eax,eax
c00046d5:	74 82                	je     c0004659 <f_lseek+0x4d>
c00046d7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00046da:	39 fe                	cmp    esi,edi
c00046dc:	76 3d                	jbe    c000471b <f_lseek+0x10f>
c00046de:	01 fa                	add    edx,edi
c00046e0:	29 fe                	sub    esi,edi
c00046e2:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00046e5:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00046e9:	89 c2                	mov    edx,eax
c00046eb:	74 0d                	je     c00046fa <f_lseek+0xee>
c00046ed:	89 d8                	mov    eax,ebx
c00046ef:	e8 a0 ee ff ff       	call   c0003594 <create_chain>
c00046f4:	85 c0                	test   eax,eax
c00046f6:	75 09                	jne    c0004701 <f_lseek+0xf5>
c00046f8:	eb 1f                	jmp    c0004719 <f_lseek+0x10d>
c00046fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00046fc:	e8 c7 ec ff ff       	call   c00033c8 <get_fat.isra.2>
c0004701:	83 f8 ff             	cmp    eax,0xffffffff
c0004704:	74 b9                	je     c00046bf <f_lseek+0xb3>
c0004706:	83 f8 01             	cmp    eax,0x1
c0004709:	76 a1                	jbe    c00046ac <f_lseek+0xa0>
c000470b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000470f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004712:	76 98                	jbe    c00046ac <f_lseek+0xa0>
c0004714:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004717:	eb be                	jmp    c00046d7 <f_lseek+0xcb>
c0004719:	31 f6                	xor    esi,esi
c000471b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000471e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004724:	0f 84 2f ff ff ff    	je     c0004659 <f_lseek+0x4d>
c000472a:	89 c2                	mov    edx,eax
c000472c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004730:	e8 ad da ff ff       	call   c00021e2 <clst2sect>
c0004735:	85 c0                	test   eax,eax
c0004737:	0f 84 6f ff ff ff    	je     c00046ac <f_lseek+0xa0>
c000473d:	c1 ee 09             	shr    esi,0x9
c0004740:	01 c6                	add    esi,eax
c0004742:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004745:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004748:	76 0c                	jbe    c0004756 <f_lseek+0x14a>
c000474a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000474d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004750:	83 ca 40             	or     edx,0x40
c0004753:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004756:	a9 ff 01 00 00       	test   eax,0x1ff
c000475b:	74 56                	je     c00047b3 <f_lseek+0x1a7>
c000475d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004760:	39 f0                	cmp    eax,esi
c0004762:	74 4f                	je     c00047b3 <f_lseek+0x1a7>
c0004764:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004767:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000476b:	74 26                	je     c0004793 <f_lseek+0x187>
c000476d:	6a 01                	push   0x1
c000476f:	50                   	push   eax
c0004770:	57                   	push   edi
c0004771:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004775:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004779:	50                   	push   eax
c000477a:	e8 d7 d7 ff ff       	call   c0001f56 <disk_write>
c000477f:	83 c4 10             	add    esp,0x10
c0004782:	85 c0                	test   eax,eax
c0004784:	0f 85 35 ff ff ff    	jne    c00046bf <f_lseek+0xb3>
c000478a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000478d:	83 e0 7f             	and    eax,0x7f
c0004790:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004793:	6a 01                	push   0x1
c0004795:	56                   	push   esi
c0004796:	57                   	push   edi
c0004797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000479b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000479f:	50                   	push   eax
c00047a0:	e8 9b d7 ff ff       	call   c0001f40 <disk_read>
c00047a5:	83 c4 10             	add    esp,0x10
c00047a8:	85 c0                	test   eax,eax
c00047aa:	0f 85 0f ff ff ff    	jne    c00046bf <f_lseek+0xb3>
c00047b0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047b3:	83 c4 2c             	add    esp,0x2c
c00047b6:	89 e8                	mov    eax,ebp
c00047b8:	5b                   	pop    ebx
c00047b9:	5e                   	pop    esi
c00047ba:	5f                   	pop    edi
c00047bb:	5d                   	pop    ebp
c00047bc:	c3                   	ret    

c00047bd <f_opendir>:
c00047bd:	56                   	push   esi
c00047be:	b8 09 00 00 00       	mov    eax,0x9
c00047c3:	53                   	push   ebx
c00047c4:	83 ec 24             	sub    esp,0x24
c00047c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00047cb:	85 db                	test   ebx,ebx
c00047cd:	0f 84 af 00 00 00    	je     c0004882 <f_opendir+0xc5>
c00047d3:	31 c9                	xor    ecx,ecx
c00047d5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047d9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00047dd:	e8 63 de ff ff       	call   c0002645 <mount_volume>
c00047e2:	85 c0                	test   eax,eax
c00047e4:	0f 85 92 00 00 00    	jne    c000487c <f_opendir+0xbf>
c00047ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047ee:	83 ec 0c             	sub    esp,0xc
c00047f1:	89 03                	mov    DWORD PTR [ebx],eax
c00047f3:	68 00 02 00 00       	push   0x200
c00047f8:	e8 d7 15 00 00       	call   c0005dd4 <ff_memalloc>
c00047fd:	83 c4 10             	add    esp,0x10
c0004800:	89 c6                	mov    esi,eax
c0004802:	b8 11 00 00 00       	mov    eax,0x11
c0004807:	85 f6                	test   esi,esi
c0004809:	74 77                	je     c0004882 <f_opendir+0xc5>
c000480b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000480f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004813:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004816:	89 d8                	mov    eax,ebx
c0004818:	e8 72 f3 ff ff       	call   c0003b8f <follow_path>
c000481d:	85 c0                	test   eax,eax
c000481f:	75 37                	jne    c0004858 <f_opendir+0x9b>
c0004821:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004825:	75 1c                	jne    c0004843 <f_opendir+0x86>
c0004827:	b8 05 00 00 00       	mov    eax,0x5
c000482c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004830:	74 26                	je     c0004858 <f_opendir+0x9b>
c0004832:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004839:	8a 00                	mov    al,BYTE PTR [eax]
c000483b:	e8 37 eb ff ff       	call   c0003377 <ld_clust.isra.0>
c0004840:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004843:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004847:	31 d2                	xor    edx,edx
c0004849:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000484d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004851:	89 d8                	mov    eax,ebx
c0004853:	e8 74 ec ff ff       	call   c00034cc <dir_sdi>
c0004858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000485c:	83 ec 0c             	sub    esp,0xc
c000485f:	56                   	push   esi
c0004860:	e8 87 15 00 00       	call   c0005dec <ff_memfree>
c0004865:	83 c4 10             	add    esp,0x10
c0004868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000486c:	83 f8 04             	cmp    eax,0x4
c000486f:	74 06                	je     c0004877 <f_opendir+0xba>
c0004871:	85 c0                	test   eax,eax
c0004873:	74 0d                	je     c0004882 <f_opendir+0xc5>
c0004875:	eb 05                	jmp    c000487c <f_opendir+0xbf>
c0004877:	b8 05 00 00 00       	mov    eax,0x5
c000487c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004882:	83 c4 24             	add    esp,0x24
c0004885:	5b                   	pop    ebx
c0004886:	5e                   	pop    esi
c0004887:	c3                   	ret    

c0004888 <f_closedir>:
c0004888:	53                   	push   ebx
c0004889:	83 ec 18             	sub    esp,0x18
c000488c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004890:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004894:	89 d8                	mov    eax,ebx
c0004896:	e8 ae db ff ff       	call   c0002449 <validate>
c000489b:	85 c0                	test   eax,eax
c000489d:	75 06                	jne    c00048a5 <f_closedir+0x1d>
c000489f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048a5:	83 c4 18             	add    esp,0x18
c00048a8:	5b                   	pop    ebx
c00048a9:	c3                   	ret    

c00048aa <f_readdir>:
c00048aa:	57                   	push   edi
c00048ab:	56                   	push   esi
c00048ac:	53                   	push   ebx
c00048ad:	83 ec 20             	sub    esp,0x20
c00048b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048b8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bc:	89 d8                	mov    eax,ebx
c00048be:	e8 86 db ff ff       	call   c0002449 <validate>
c00048c3:	85 c0                	test   eax,eax
c00048c5:	75 6e                	jne    c0004935 <f_readdir+0x8b>
c00048c7:	85 ff                	test   edi,edi
c00048c9:	75 0b                	jne    c00048d6 <f_readdir+0x2c>
c00048cb:	31 d2                	xor    edx,edx
c00048cd:	89 d8                	mov    eax,ebx
c00048cf:	e8 f8 eb ff ff       	call   c00034cc <dir_sdi>
c00048d4:	eb 5f                	jmp    c0004935 <f_readdir+0x8b>
c00048d6:	83 ec 0c             	sub    esp,0xc
c00048d9:	68 00 02 00 00       	push   0x200
c00048de:	e8 f1 14 00 00       	call   c0005dd4 <ff_memalloc>
c00048e3:	83 c4 10             	add    esp,0x10
c00048e6:	89 c6                	mov    esi,eax
c00048e8:	b8 11 00 00 00       	mov    eax,0x11
c00048ed:	85 f6                	test   esi,esi
c00048ef:	74 44                	je     c0004935 <f_readdir+0x8b>
c00048f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048f5:	31 d2                	xor    edx,edx
c00048f7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00048fa:	89 d8                	mov    eax,ebx
c00048fc:	e8 ca ef ff ff       	call   c00038cb <dir_read>
c0004901:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004906:	75 19                	jne    c0004921 <f_readdir+0x77>
c0004908:	89 fa                	mov    edx,edi
c000490a:	89 d8                	mov    eax,ebx
c000490c:	e8 70 e8 ff ff       	call   c0003181 <get_fileinfo>
c0004911:	31 d2                	xor    edx,edx
c0004913:	89 d8                	mov    eax,ebx
c0004915:	e8 47 ee ff ff       	call   c0003761 <dir_next>
c000491a:	83 f8 04             	cmp    eax,0x4
c000491d:	75 02                	jne    c0004921 <f_readdir+0x77>
c000491f:	31 c0                	xor    eax,eax
c0004921:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004925:	83 ec 0c             	sub    esp,0xc
c0004928:	56                   	push   esi
c0004929:	e8 be 14 00 00       	call   c0005dec <ff_memfree>
c000492e:	83 c4 10             	add    esp,0x10
c0004931:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004935:	83 c4 20             	add    esp,0x20
c0004938:	5b                   	pop    ebx
c0004939:	5e                   	pop    esi
c000493a:	5f                   	pop    edi
c000493b:	c3                   	ret    

c000493c <f_stat>:
c000493c:	57                   	push   edi
c000493d:	31 c9                	xor    ecx,ecx
c000493f:	56                   	push   esi
c0004940:	53                   	push   ebx
c0004941:	83 ec 30             	sub    esp,0x30
c0004944:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004948:	89 e2                	mov    edx,esp
c000494a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000494e:	e8 f2 dc ff ff       	call   c0002645 <mount_volume>
c0004953:	89 c3                	mov    ebx,eax
c0004955:	85 c0                	test   eax,eax
c0004957:	75 59                	jne    c00049b2 <f_stat+0x76>
c0004959:	83 ec 0c             	sub    esp,0xc
c000495c:	bb 11 00 00 00       	mov    ebx,0x11
c0004961:	68 00 02 00 00       	push   0x200
c0004966:	e8 69 14 00 00       	call   c0005dd4 <ff_memalloc>
c000496b:	83 c4 10             	add    esp,0x10
c000496e:	89 c6                	mov    esi,eax
c0004970:	85 c0                	test   eax,eax
c0004972:	74 3e                	je     c00049b2 <f_stat+0x76>
c0004974:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004977:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000497b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000497e:	89 e0                	mov    eax,esp
c0004980:	e8 0a f2 ff ff       	call   c0003b8f <follow_path>
c0004985:	89 c3                	mov    ebx,eax
c0004987:	85 c0                	test   eax,eax
c0004989:	75 1b                	jne    c00049a6 <f_stat+0x6a>
c000498b:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004990:	75 0f                	jne    c00049a1 <f_stat+0x65>
c0004992:	85 ff                	test   edi,edi
c0004994:	74 10                	je     c00049a6 <f_stat+0x6a>
c0004996:	89 fa                	mov    edx,edi
c0004998:	89 e0                	mov    eax,esp
c000499a:	e8 e2 e7 ff ff       	call   c0003181 <get_fileinfo>
c000499f:	eb 05                	jmp    c00049a6 <f_stat+0x6a>
c00049a1:	bb 06 00 00 00       	mov    ebx,0x6
c00049a6:	83 ec 0c             	sub    esp,0xc
c00049a9:	56                   	push   esi
c00049aa:	e8 3d 14 00 00       	call   c0005dec <ff_memfree>
c00049af:	83 c4 10             	add    esp,0x10
c00049b2:	83 c4 30             	add    esp,0x30
c00049b5:	89 d8                	mov    eax,ebx
c00049b7:	5b                   	pop    ebx
c00049b8:	5e                   	pop    esi
c00049b9:	5f                   	pop    edi
c00049ba:	c3                   	ret    

c00049bb <f_getfree>:
c00049bb:	55                   	push   ebp
c00049bc:	31 c9                	xor    ecx,ecx
c00049be:	57                   	push   edi
c00049bf:	56                   	push   esi
c00049c0:	53                   	push   ebx
c00049c1:	83 ec 2c             	sub    esp,0x2c
c00049c4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049c8:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049cc:	e8 74 dc ff ff       	call   c0002645 <mount_volume>
c00049d1:	89 c7                	mov    edi,eax
c00049d3:	85 c0                	test   eax,eax
c00049d5:	0f 85 df 00 00 00    	jne    c0004aba <f_getfree+0xff>
c00049db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00049df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00049e3:	89 30                	mov    DWORD PTR [eax],esi
c00049e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00049e8:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00049eb:	8d 55 fe             	lea    edx,[ebp-0x2]
c00049ee:	39 d0                	cmp    eax,edx
c00049f0:	77 0b                	ja     c00049fd <f_getfree+0x42>
c00049f2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00049f6:	89 01                	mov    DWORD PTR [ecx],eax
c00049f8:	e9 bd 00 00 00       	jmp    c0004aba <f_getfree+0xff>
c00049fd:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a00:	75 29                	jne    c0004a2b <f_getfree+0x70>
c0004a02:	bd 02 00 00 00       	mov    ebp,0x2
c0004a07:	31 db                	xor    ebx,ebx
c0004a09:	89 ea                	mov    edx,ebp
c0004a0b:	89 f0                	mov    eax,esi
c0004a0d:	e8 b6 e9 ff ff       	call   c00033c8 <get_fat.isra.2>
c0004a12:	83 f8 ff             	cmp    eax,0xffffffff
c0004a15:	74 7d                	je     c0004a94 <f_getfree+0xd9>
c0004a17:	83 f8 01             	cmp    eax,0x1
c0004a1a:	74 7f                	je     c0004a9b <f_getfree+0xe0>
c0004a1c:	83 d3 00             	adc    ebx,0x0
c0004a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a23:	45                   	inc    ebp
c0004a24:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a27:	77 e0                	ja     c0004a09 <f_getfree+0x4e>
c0004a29:	eb 79                	jmp    c0004aa4 <f_getfree+0xe9>
c0004a2b:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a2e:	31 db                	xor    ebx,ebx
c0004a30:	31 f6                	xor    esi,esi
c0004a32:	85 f6                	test   esi,esi
c0004a34:	75 18                	jne    c0004a4e <f_getfree+0x93>
c0004a36:	8d 42 01             	lea    eax,[edx+0x1]
c0004a39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a41:	e8 ac da ff ff       	call   c00024f2 <move_window>
c0004a46:	85 c0                	test   eax,eax
c0004a48:	75 58                	jne    c0004aa2 <f_getfree+0xe7>
c0004a4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a4e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a56:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a5a:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a5d:	75 13                	jne    c0004a72 <f_getfree+0xb7>
c0004a5f:	e8 27 d5 ff ff       	call   c0001f8b <ld_word>
c0004a64:	0f b7 c0             	movzx  eax,ax
c0004a67:	83 f8 01             	cmp    eax,0x1
c0004a6a:	83 d3 00             	adc    ebx,0x0
c0004a6d:	83 c6 02             	add    esi,0x2
c0004a70:	eb 13                	jmp    c0004a85 <f_getfree+0xca>
c0004a72:	e8 21 d5 ff ff       	call   c0001f98 <ld_dword>
c0004a77:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004a7c:	83 f8 01             	cmp    eax,0x1
c0004a7f:	83 d3 00             	adc    ebx,0x0
c0004a82:	83 c6 04             	add    esi,0x4
c0004a85:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004a8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a8f:	4d                   	dec    ebp
c0004a90:	75 a0                	jne    c0004a32 <f_getfree+0x77>
c0004a92:	eb 10                	jmp    c0004aa4 <f_getfree+0xe9>
c0004a94:	bf 01 00 00 00       	mov    edi,0x1
c0004a99:	eb 09                	jmp    c0004aa4 <f_getfree+0xe9>
c0004a9b:	bf 02 00 00 00       	mov    edi,0x2
c0004aa0:	eb 02                	jmp    c0004aa4 <f_getfree+0xe9>
c0004aa2:	89 c7                	mov    edi,eax
c0004aa4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004aa8:	89 18                	mov    DWORD PTR [eax],ebx
c0004aaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004aae:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ab1:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ab4:	83 ca 01             	or     edx,0x1
c0004ab7:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aba:	83 c4 2c             	add    esp,0x2c
c0004abd:	89 f8                	mov    eax,edi
c0004abf:	5b                   	pop    ebx
c0004ac0:	5e                   	pop    esi
c0004ac1:	5f                   	pop    edi
c0004ac2:	5d                   	pop    ebp
c0004ac3:	c3                   	ret    

c0004ac4 <f_truncate>:
c0004ac4:	56                   	push   esi
c0004ac5:	53                   	push   ebx
c0004ac6:	83 ec 14             	sub    esp,0x14
c0004ac9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004acd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ad1:	89 d8                	mov    eax,ebx
c0004ad3:	e8 71 d9 ff ff       	call   c0002449 <validate>
c0004ad8:	89 c6                	mov    esi,eax
c0004ada:	85 c0                	test   eax,eax
c0004adc:	0f 85 c4 00 00 00    	jne    c0004ba6 <f_truncate+0xe2>
c0004ae2:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004ae6:	85 f6                	test   esi,esi
c0004ae8:	0f 85 b8 00 00 00    	jne    c0004ba6 <f_truncate+0xe2>
c0004aee:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004af2:	0f 84 a9 00 00 00    	je     c0004ba1 <f_truncate+0xdd>
c0004af8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004afb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004afe:	0f 83 a2 00 00 00    	jae    c0004ba6 <f_truncate+0xe2>
c0004b04:	85 c0                	test   eax,eax
c0004b06:	75 15                	jne    c0004b1d <f_truncate+0x59>
c0004b08:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b0b:	31 c9                	xor    ecx,ecx
c0004b0d:	89 d8                	mov    eax,ebx
c0004b0f:	e8 bf eb ff ff       	call   c00036d3 <remove_chain>
c0004b14:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b1b:	eb 35                	jmp    c0004b52 <f_truncate+0x8e>
c0004b1d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b22:	e8 a1 e8 ff ff       	call   c00033c8 <get_fat.isra.2>
c0004b27:	89 c2                	mov    edx,eax
c0004b29:	b8 01 00 00 00       	mov    eax,0x1
c0004b2e:	83 fa ff             	cmp    edx,0xffffffff
c0004b31:	74 1f                	je     c0004b52 <f_truncate+0x8e>
c0004b33:	b8 02 00 00 00       	mov    eax,0x2
c0004b38:	83 fa 01             	cmp    edx,0x1
c0004b3b:	74 15                	je     c0004b52 <f_truncate+0x8e>
c0004b3d:	31 c0                	xor    eax,eax
c0004b3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b43:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b46:	76 0a                	jbe    c0004b52 <f_truncate+0x8e>
c0004b48:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b4b:	89 d8                	mov    eax,ebx
c0004b4d:	e8 81 eb ff ff       	call   c00036d3 <remove_chain>
c0004b52:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b55:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b58:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b5b:	83 ca 40             	or     edx,0x40
c0004b5e:	85 c0                	test   eax,eax
c0004b60:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b63:	75 35                	jne    c0004b9a <f_truncate+0xd6>
c0004b65:	80 e2 80             	and    dl,0x80
c0004b68:	74 3c                	je     c0004ba6 <f_truncate+0xe2>
c0004b6a:	6a 01                	push   0x1
c0004b6c:	8d 43 28             	lea    eax,[ebx+0x28]
c0004b6f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004b72:	50                   	push   eax
c0004b73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004b77:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004b7b:	50                   	push   eax
c0004b7c:	e8 d5 d3 ff ff       	call   c0001f56 <disk_write>
c0004b81:	83 c4 10             	add    esp,0x10
c0004b84:	85 c0                	test   eax,eax
c0004b86:	75 0d                	jne    c0004b95 <f_truncate+0xd1>
c0004b88:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004b8b:	31 f6                	xor    esi,esi
c0004b8d:	83 e0 7f             	and    eax,0x7f
c0004b90:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004b93:	eb 11                	jmp    c0004ba6 <f_truncate+0xe2>
c0004b95:	b8 01 00 00 00       	mov    eax,0x1
c0004b9a:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004b9d:	89 c6                	mov    esi,eax
c0004b9f:	eb 05                	jmp    c0004ba6 <f_truncate+0xe2>
c0004ba1:	be 07 00 00 00       	mov    esi,0x7
c0004ba6:	89 f0                	mov    eax,esi
c0004ba8:	83 c4 14             	add    esp,0x14
c0004bab:	5b                   	pop    ebx
c0004bac:	5e                   	pop    esi
c0004bad:	c3                   	ret    

c0004bae <f_unlink>:
c0004bae:	55                   	push   ebp
c0004baf:	b9 02 00 00 00       	mov    ecx,0x2
c0004bb4:	57                   	push   edi
c0004bb5:	56                   	push   esi
c0004bb6:	53                   	push   ebx
c0004bb7:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bbd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bc1:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bc8:	e8 78 da ff ff       	call   c0002645 <mount_volume>
c0004bcd:	85 c0                	test   eax,eax
c0004bcf:	0f 85 f0 00 00 00    	jne    c0004cc5 <f_unlink+0x117>
c0004bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd9:	83 ec 0c             	sub    esp,0xc
c0004bdc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004be0:	68 00 02 00 00       	push   0x200
c0004be5:	e8 ea 11 00 00       	call   c0005dd4 <ff_memalloc>
c0004bea:	83 c4 10             	add    esp,0x10
c0004bed:	89 c3                	mov    ebx,eax
c0004bef:	b8 11 00 00 00       	mov    eax,0x11
c0004bf4:	85 db                	test   ebx,ebx
c0004bf6:	0f 84 c9 00 00 00    	je     c0004cc5 <f_unlink+0x117>
c0004bfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c00:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c07:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c0a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c0e:	e8 7c ef ff ff       	call   c0003b8f <follow_path>
c0004c13:	85 c0                	test   eax,eax
c0004c15:	0f 85 96 00 00 00    	jne    c0004cb1 <f_unlink+0x103>
c0004c1b:	b8 06 00 00 00       	mov    eax,0x6
c0004c20:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c25:	0f 85 86 00 00 00    	jne    c0004cb1 <f_unlink+0x103>
c0004c2b:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c30:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c36:	74 07                	je     c0004c3f <f_unlink+0x91>
c0004c38:	b8 07 00 00 00       	mov    eax,0x7
c0004c3d:	eb 72                	jmp    c0004cb1 <f_unlink+0x103>
c0004c3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c43:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c47:	8a 07                	mov    al,BYTE PTR [edi]
c0004c49:	e8 29 e7 ff ff       	call   c0003377 <ld_clust.isra.0>
c0004c4e:	83 e5 10             	and    ebp,0x10
c0004c51:	89 c6                	mov    esi,eax
c0004c53:	75 0f                	jne    c0004c64 <f_unlink+0xb6>
c0004c55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c59:	e8 95 ed ff ff       	call   c00039f3 <dir_remove>
c0004c5e:	85 c0                	test   eax,eax
c0004c60:	74 2f                	je     c0004c91 <f_unlink+0xe3>
c0004c62:	eb 4d                	jmp    c0004cb1 <f_unlink+0x103>
c0004c64:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c68:	31 d2                	xor    edx,edx
c0004c6a:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004c6e:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004c72:	e8 55 e8 ff ff       	call   c00034cc <dir_sdi>
c0004c77:	85 c0                	test   eax,eax
c0004c79:	75 36                	jne    c0004cb1 <f_unlink+0x103>
c0004c7b:	31 d2                	xor    edx,edx
c0004c7d:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004c81:	e8 45 ec ff ff       	call   c00038cb <dir_read>
c0004c86:	85 c0                	test   eax,eax
c0004c88:	74 ae                	je     c0004c38 <f_unlink+0x8a>
c0004c8a:	83 f8 04             	cmp    eax,0x4
c0004c8d:	75 22                	jne    c0004cb1 <f_unlink+0x103>
c0004c8f:	eb c4                	jmp    c0004c55 <f_unlink+0xa7>
c0004c91:	85 f6                	test   esi,esi
c0004c93:	75 0b                	jne    c0004ca0 <f_unlink+0xf2>
c0004c95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c99:	e8 8b e2 ff ff       	call   c0002f29 <sync_fs>
c0004c9e:	eb 11                	jmp    c0004cb1 <f_unlink+0x103>
c0004ca0:	31 c9                	xor    ecx,ecx
c0004ca2:	89 f2                	mov    edx,esi
c0004ca4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ca8:	e8 26 ea ff ff       	call   c00036d3 <remove_chain>
c0004cad:	85 c0                	test   eax,eax
c0004caf:	74 e4                	je     c0004c95 <f_unlink+0xe7>
c0004cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cb5:	83 ec 0c             	sub    esp,0xc
c0004cb8:	53                   	push   ebx
c0004cb9:	e8 2e 11 00 00       	call   c0005dec <ff_memfree>
c0004cbe:	83 c4 10             	add    esp,0x10
c0004cc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc5:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004ccb:	5b                   	pop    ebx
c0004ccc:	5e                   	pop    esi
c0004ccd:	5f                   	pop    edi
c0004cce:	5d                   	pop    ebp
c0004ccf:	c3                   	ret    

c0004cd0 <f_mkdir>:
c0004cd0:	57                   	push   edi
c0004cd1:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd6:	56                   	push   esi
c0004cd7:	53                   	push   ebx
c0004cd8:	83 ec 50             	sub    esp,0x50
c0004cdb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ce3:	e8 5d d9 ff ff       	call   c0002645 <mount_volume>
c0004ce8:	89 c3                	mov    ebx,eax
c0004cea:	85 c0                	test   eax,eax
c0004cec:	0f 85 70 01 00 00    	jne    c0004e62 <f_mkdir+0x192>
c0004cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf6:	bb 11 00 00 00       	mov    ebx,0x11
c0004cfb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004cff:	83 ec 0c             	sub    esp,0xc
c0004d02:	68 00 02 00 00       	push   0x200
c0004d07:	e8 c8 10 00 00       	call   c0005dd4 <ff_memalloc>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	89 c7                	mov    edi,eax
c0004d11:	85 c0                	test   eax,eax
c0004d13:	0f 84 49 01 00 00    	je     c0004e62 <f_mkdir+0x192>
c0004d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d1d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d21:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d24:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d28:	e8 62 ee ff ff       	call   c0003b8f <follow_path>
c0004d2d:	89 c3                	mov    ebx,eax
c0004d2f:	85 c0                	test   eax,eax
c0004d31:	74 3e                	je     c0004d71 <f_mkdir+0xa1>
c0004d33:	83 f8 04             	cmp    eax,0x4
c0004d36:	75 3e                	jne    c0004d76 <f_mkdir+0xa6>
c0004d38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d3c:	31 d2                	xor    edx,edx
c0004d3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d46:	e8 49 e8 ff ff       	call   c0003594 <create_chain>
c0004d4b:	89 c6                	mov    esi,eax
c0004d4d:	85 c0                	test   eax,eax
c0004d4f:	74 0c                	je     c0004d5d <f_mkdir+0x8d>
c0004d51:	bb 02 00 00 00       	mov    ebx,0x2
c0004d56:	83 f8 01             	cmp    eax,0x1
c0004d59:	74 07                	je     c0004d62 <f_mkdir+0x92>
c0004d5b:	eb 2a                	jmp    c0004d87 <f_mkdir+0xb7>
c0004d5d:	bb 07 00 00 00       	mov    ebx,0x7
c0004d62:	31 c9                	xor    ecx,ecx
c0004d64:	89 f2                	mov    edx,esi
c0004d66:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d6a:	e8 64 e9 ff ff       	call   c00036d3 <remove_chain>
c0004d6f:	eb 05                	jmp    c0004d76 <f_mkdir+0xa6>
c0004d71:	bb 08 00 00 00       	mov    ebx,0x8
c0004d76:	83 ec 0c             	sub    esp,0xc
c0004d79:	57                   	push   edi
c0004d7a:	e8 6d 10 00 00       	call   c0005dec <ff_memfree>
c0004d7f:	83 c4 10             	add    esp,0x10
c0004d82:	e9 db 00 00 00       	jmp    c0004e62 <f_mkdir+0x192>
c0004d87:	bb 01 00 00 00       	mov    ebx,0x1
c0004d8c:	83 f8 ff             	cmp    eax,0xffffffff
c0004d8f:	74 d1                	je     c0004d62 <f_mkdir+0x92>
c0004d91:	89 f2                	mov    edx,esi
c0004d93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d97:	e8 f1 dc ff ff       	call   c0002a8d <dir_clear>
c0004d9c:	89 c3                	mov    ebx,eax
c0004d9e:	85 c0                	test   eax,eax
c0004da0:	75 c0                	jne    c0004d62 <f_mkdir+0x92>
c0004da2:	b9 0b 00 00 00       	mov    ecx,0xb
c0004da7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dab:	ba 20 00 00 00       	mov    edx,0x20
c0004db0:	83 c0 34             	add    eax,0x34
c0004db3:	e8 14 d2 ff ff       	call   c0001fcc <mem_set>
c0004db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbc:	ba 00 00 21 50       	mov    edx,0x50210000
c0004dc1:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dc5:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dc9:	83 c0 4a             	add    eax,0x4a
c0004dcc:	e8 e3 d1 ff ff       	call   c0001fb4 <st_dword>
c0004dd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dd5:	89 f1                	mov    ecx,esi
c0004dd7:	8d 50 34             	lea    edx,[eax+0x34]
c0004dda:	e8 c1 e5 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de3:	b9 20 00 00 00       	mov    ecx,0x20
c0004de8:	8d 50 34             	lea    edx,[eax+0x34]
c0004deb:	83 c0 54             	add    eax,0x54
c0004dee:	e8 c4 d1 ff ff       	call   c0001fb7 <mem_cpy>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004dfb:	8d 50 54             	lea    edx,[eax+0x54]
c0004dfe:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e02:	e8 99 e5 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e0f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e13:	e8 0c ee ff ff       	call   c0003c24 <dir_register>
c0004e18:	89 c3                	mov    ebx,eax
c0004e1a:	85 c0                	test   eax,eax
c0004e1c:	0f 85 40 ff ff ff    	jne    c0004d62 <f_mkdir+0x92>
c0004e22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e26:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e2b:	83 c0 16             	add    eax,0x16
c0004e2e:	e8 81 d1 ff ff       	call   c0001fb4 <st_dword>
c0004e33:	89 f1                	mov    ecx,esi
c0004e35:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3d:	e8 5e e5 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004e42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e46:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e56:	e8 ce e0 ff ff       	call   c0002f29 <sync_fs>
c0004e5b:	89 c3                	mov    ebx,eax
c0004e5d:	e9 14 ff ff ff       	jmp    c0004d76 <f_mkdir+0xa6>
c0004e62:	83 c4 50             	add    esp,0x50
c0004e65:	89 d8                	mov    eax,ebx
c0004e67:	5b                   	pop    ebx
c0004e68:	5e                   	pop    esi
c0004e69:	5f                   	pop    edi
c0004e6a:	c3                   	ret    

c0004e6b <f_rename>:
c0004e6b:	57                   	push   edi
c0004e6c:	56                   	push   esi
c0004e6d:	53                   	push   ebx
c0004e6e:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004e74:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004e7b:	e8 7c d5 ff ff       	call   c00023fc <get_ldnumber>
c0004e80:	b9 02 00 00 00       	mov    ecx,0x2
c0004e85:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e89:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004e90:	e8 b0 d7 ff ff       	call   c0002645 <mount_volume>
c0004e95:	85 c0                	test   eax,eax
c0004e97:	0f 85 7c 01 00 00    	jne    c0005019 <f_rename+0x1ae>
c0004e9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea1:	83 ec 0c             	sub    esp,0xc
c0004ea4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ea8:	68 00 02 00 00       	push   0x200
c0004ead:	e8 22 0f 00 00       	call   c0005dd4 <ff_memalloc>
c0004eb2:	83 c4 10             	add    esp,0x10
c0004eb5:	89 c6                	mov    esi,eax
c0004eb7:	b8 11 00 00 00       	mov    eax,0x11
c0004ebc:	85 f6                	test   esi,esi
c0004ebe:	0f 84 55 01 00 00    	je     c0005019 <f_rename+0x1ae>
c0004ec4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ec8:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004ecf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ed2:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ed6:	e8 b4 ec ff ff       	call   c0003b8f <follow_path>
c0004edb:	85 c0                	test   eax,eax
c0004edd:	0f 85 22 01 00 00    	jne    c0005005 <f_rename+0x19a>
c0004ee3:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004ee7:	b8 06 00 00 00       	mov    eax,0x6
c0004eec:	80 e2 a0             	and    dl,0xa0
c0004eef:	0f 85 10 01 00 00    	jne    c0005005 <f_rename+0x19a>
c0004ef5:	b9 20 00 00 00       	mov    ecx,0x20
c0004efa:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004efe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f02:	e8 b0 d0 ff ff       	call   c0001fb7 <mem_cpy>
c0004f07:	b9 30 00 00 00       	mov    ecx,0x30
c0004f0c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f10:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f14:	e8 9e d0 ff ff       	call   c0001fb7 <mem_cpy>
c0004f19:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f20:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f24:	e8 66 ec ff ff       	call   c0003b8f <follow_path>
c0004f29:	85 c0                	test   eax,eax
c0004f2b:	75 20                	jne    c0004f4d <f_rename+0xe2>
c0004f2d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f31:	b8 08 00 00 00       	mov    eax,0x8
c0004f36:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f3a:	0f 85 c5 00 00 00    	jne    c0005005 <f_rename+0x19a>
c0004f40:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f44:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f4b:	eb 03                	jmp    c0004f50 <f_rename+0xe5>
c0004f4d:	83 f8 04             	cmp    eax,0x4
c0004f50:	0f 85 af 00 00 00    	jne    c0005005 <f_rename+0x19a>
c0004f56:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f5a:	e8 c5 ec ff ff       	call   c0003c24 <dir_register>
c0004f5f:	85 c0                	test   eax,eax
c0004f61:	0f 85 9e 00 00 00    	jne    c0005005 <f_rename+0x19a>
c0004f67:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004f6e:	b9 13 00 00 00       	mov    ecx,0x13
c0004f73:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004f76:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004f7a:	e8 38 d0 ff ff       	call   c0001fb7 <mem_cpy>
c0004f7f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004f83:	a8 10                	test   al,0x10
c0004f85:	75 03                	jne    c0004f8a <f_rename+0x11f>
c0004f87:	83 c8 20             	or     eax,0x20
c0004f8a:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f91:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f95:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004f99:	74 54                	je     c0004fef <f_rename+0x184>
c0004f9b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004f9f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fa3:	74 4a                	je     c0004fef <f_rename+0x184>
c0004fa5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fa9:	89 da                	mov    edx,ebx
c0004fab:	8a 07                	mov    al,BYTE PTR [edi]
c0004fad:	e8 c5 e3 ff ff       	call   c0003377 <ld_clust.isra.0>
c0004fb2:	89 c2                	mov    edx,eax
c0004fb4:	89 f8                	mov    eax,edi
c0004fb6:	e8 27 d2 ff ff       	call   c00021e2 <clst2sect>
c0004fbb:	89 c2                	mov    edx,eax
c0004fbd:	b8 02 00 00 00       	mov    eax,0x2
c0004fc2:	85 d2                	test   edx,edx
c0004fc4:	74 3f                	je     c0005005 <f_rename+0x19a>
c0004fc6:	89 f8                	mov    eax,edi
c0004fc8:	e8 25 d5 ff ff       	call   c00024f2 <move_window>
c0004fcd:	85 c0                	test   eax,eax
c0004fcf:	75 34                	jne    c0005005 <f_rename+0x19a>
c0004fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd5:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004fd9:	75 14                	jne    c0004fef <f_rename+0x184>
c0004fdb:	8d 50 54             	lea    edx,[eax+0x54]
c0004fde:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004fe2:	e8 b9 e3 ff ff       	call   c00033a0 <st_clust.isra.1>
c0004fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004feb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fef:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ff3:	e8 fb e9 ff ff       	call   c00039f3 <dir_remove>
c0004ff8:	85 c0                	test   eax,eax
c0004ffa:	75 09                	jne    c0005005 <f_rename+0x19a>
c0004ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005000:	e8 24 df ff ff       	call   c0002f29 <sync_fs>
c0005005:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005009:	83 ec 0c             	sub    esp,0xc
c000500c:	56                   	push   esi
c000500d:	e8 da 0d 00 00       	call   c0005dec <ff_memfree>
c0005012:	83 c4 10             	add    esp,0x10
c0005015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005019:	81 c4 a0 00 00 00    	add    esp,0xa0
c000501f:	5b                   	pop    ebx
c0005020:	5e                   	pop    esi
c0005021:	5f                   	pop    edi
c0005022:	c3                   	ret    

c0005023 <f_chmod>:
c0005023:	57                   	push   edi
c0005024:	b9 02 00 00 00       	mov    ecx,0x2
c0005029:	56                   	push   esi
c000502a:	53                   	push   ebx
c000502b:	83 ec 50             	sub    esp,0x50
c000502e:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005032:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0005036:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000503a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000503e:	e8 02 d6 ff ff       	call   c0002645 <mount_volume>
c0005043:	85 c0                	test   eax,eax
c0005045:	0f 85 81 00 00 00    	jne    c00050cc <f_chmod+0xa9>
c000504b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000504f:	83 ec 0c             	sub    esp,0xc
c0005052:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005056:	68 00 02 00 00       	push   0x200
c000505b:	e8 74 0d 00 00       	call   c0005dd4 <ff_memalloc>
c0005060:	83 c4 10             	add    esp,0x10
c0005063:	89 c6                	mov    esi,eax
c0005065:	b8 11 00 00 00       	mov    eax,0x11
c000506a:	85 f6                	test   esi,esi
c000506c:	74 5e                	je     c00050cc <f_chmod+0xa9>
c000506e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005072:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005076:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005079:	8d 44 24 20          	lea    eax,[esp+0x20]
c000507d:	e8 0d eb ff ff       	call   c0003b8f <follow_path>
c0005082:	85 c0                	test   eax,eax
c0005084:	75 32                	jne    c00050b8 <f_chmod+0x95>
c0005086:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000508a:	b8 06 00 00 00       	mov    eax,0x6
c000508f:	80 e2 a0             	and    dl,0xa0
c0005092:	75 24                	jne    c00050b8 <f_chmod+0x95>
c0005094:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005098:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c000509b:	31 d7                	xor    edi,edx
c000509d:	21 fb                	and    ebx,edi
c000509f:	83 e3 27             	and    ebx,0x27
c00050a2:	31 d3                	xor    ebx,edx
c00050a4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050b3:	e8 71 de ff ff       	call   c0002f29 <sync_fs>
c00050b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050bc:	83 ec 0c             	sub    esp,0xc
c00050bf:	56                   	push   esi
c00050c0:	e8 27 0d 00 00       	call   c0005dec <ff_memfree>
c00050c5:	83 c4 10             	add    esp,0x10
c00050c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050cc:	83 c4 50             	add    esp,0x50
c00050cf:	5b                   	pop    ebx
c00050d0:	5e                   	pop    esi
c00050d1:	5f                   	pop    edi
c00050d2:	c3                   	ret    

c00050d3 <f_utime>:
c00050d3:	56                   	push   esi
c00050d4:	b9 02 00 00 00       	mov    ecx,0x2
c00050d9:	53                   	push   ebx
c00050da:	83 ec 54             	sub    esp,0x54
c00050dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00050e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050e5:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050e9:	e8 57 d5 ff ff       	call   c0002645 <mount_volume>
c00050ee:	85 c0                	test   eax,eax
c00050f0:	0f 85 87 00 00 00    	jne    c000517d <f_utime+0xaa>
c00050f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fa:	83 ec 0c             	sub    esp,0xc
c00050fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005101:	68 00 02 00 00       	push   0x200
c0005106:	e8 c9 0c 00 00       	call   c0005dd4 <ff_memalloc>
c000510b:	83 c4 10             	add    esp,0x10
c000510e:	89 c3                	mov    ebx,eax
c0005110:	b8 11 00 00 00       	mov    eax,0x11
c0005115:	85 db                	test   ebx,ebx
c0005117:	74 64                	je     c000517d <f_utime+0xaa>
c0005119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000511d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005121:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005124:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005128:	e8 62 ea ff ff       	call   c0003b8f <follow_path>
c000512d:	85 c0                	test   eax,eax
c000512f:	75 38                	jne    c0005169 <f_utime+0x96>
c0005131:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005135:	b8 06 00 00 00       	mov    eax,0x6
c000513a:	80 e2 a0             	and    dl,0xa0
c000513d:	75 2a                	jne    c0005169 <f_utime+0x96>
c000513f:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005143:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005147:	c1 e2 10             	shl    edx,0x10
c000514a:	09 c2                	or     edx,eax
c000514c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005150:	83 c0 16             	add    eax,0x16
c0005153:	e8 5c ce ff ff       	call   c0001fb4 <st_dword>
c0005158:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000515c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005164:	e8 c0 dd ff ff       	call   c0002f29 <sync_fs>
c0005169:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000516d:	83 ec 0c             	sub    esp,0xc
c0005170:	53                   	push   ebx
c0005171:	e8 76 0c 00 00       	call   c0005dec <ff_memfree>
c0005176:	83 c4 10             	add    esp,0x10
c0005179:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000517d:	83 c4 54             	add    esp,0x54
c0005180:	5b                   	pop    ebx
c0005181:	5e                   	pop    esi
c0005182:	c3                   	ret    

c0005183 <f_getlabel>:
c0005183:	55                   	push   ebp
c0005184:	31 c9                	xor    ecx,ecx
c0005186:	57                   	push   edi
c0005187:	56                   	push   esi
c0005188:	53                   	push   ebx
c0005189:	83 ec 5c             	sub    esp,0x5c
c000518c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005190:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005194:	e8 ac d4 ff ff       	call   c0002645 <mount_volume>
c0005199:	89 c6                	mov    esi,eax
c000519b:	85 c0                	test   eax,eax
c000519d:	0f 85 27 01 00 00    	jne    c00052ca <f_getlabel+0x147>
c00051a3:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051a8:	0f 84 d0 00 00 00    	je     c000527e <f_getlabel+0xfb>
c00051ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b2:	31 d2                	xor    edx,edx
c00051b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051b8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051c4:	e8 03 e3 ff ff       	call   c00034cc <dir_sdi>
c00051c9:	85 c0                	test   eax,eax
c00051cb:	0f 85 a1 00 00 00    	jne    c0005272 <f_getlabel+0xef>
c00051d1:	ba 01 00 00 00       	mov    edx,0x1
c00051d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051da:	e8 ec e6 ff ff       	call   c00038cb <dir_read>
c00051df:	85 c0                	test   eax,eax
c00051e1:	0f 85 8b 00 00 00    	jne    c0005272 <f_getlabel+0xef>
c00051e7:	31 db                	xor    ebx,ebx
c00051e9:	31 c9                	xor    ecx,ecx
c00051eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00051ef:	8d 79 01             	lea    edi,[ecx+0x1]
c00051f2:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00051f7:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c00051fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005200:	e8 06 ce ff ff       	call   c000200b <dbc_1st>
c0005205:	85 c0                	test   eax,eax
c0005207:	74 16                	je     c000521f <f_getlabel+0x9c>
c0005209:	83 ff 0b             	cmp    edi,0xb
c000520c:	74 11                	je     c000521f <f_getlabel+0x9c>
c000520e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005217:	8d 79 02             	lea    edi,[ecx+0x2]
c000521a:	c1 e0 08             	shl    eax,0x8
c000521d:	09 c2                	or     edx,eax
c000521f:	0f b7 d2             	movzx  edx,dx
c0005222:	50                   	push   eax
c0005223:	50                   	push   eax
c0005224:	68 b5 01 00 00       	push   0x1b5
c0005229:	52                   	push   edx
c000522a:	e8 75 0c 00 00       	call   c0005ea4 <ff_oem2uni>
c000522f:	83 c4 10             	add    esp,0x10
c0005232:	0f b7 c0             	movzx  eax,ax
c0005235:	85 c0                	test   eax,eax
c0005237:	74 22                	je     c000525b <f_getlabel+0xd8>
c0005239:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000523d:	b9 04 00 00 00       	mov    ecx,0x4
c0005242:	01 da                	add    edx,ebx
c0005244:	e8 a0 ce ff ff       	call   c00020e9 <put_utf>
c0005249:	0f b6 c0             	movzx  eax,al
c000524c:	85 c0                	test   eax,eax
c000524e:	74 0b                	je     c000525b <f_getlabel+0xd8>
c0005250:	01 c3                	add    ebx,eax
c0005252:	83 ff 0b             	cmp    edi,0xb
c0005255:	74 06                	je     c000525d <f_getlabel+0xda>
c0005257:	89 f9                	mov    ecx,edi
c0005259:	eb 90                	jmp    c00051eb <f_getlabel+0x68>
c000525b:	31 db                	xor    ebx,ebx
c000525d:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005261:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005264:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0005268:	74 14                	je     c000527e <f_getlabel+0xfb>
c000526a:	4b                   	dec    ebx
c000526b:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c000526e:	74 f1                	je     c0005261 <f_getlabel+0xde>
c0005270:	eb 0c                	jmp    c000527e <f_getlabel+0xfb>
c0005272:	83 f8 04             	cmp    eax,0x4
c0005275:	75 51                	jne    c00052c8 <f_getlabel+0x145>
c0005277:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000527b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000527e:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0005283:	74 45                	je     c00052ca <f_getlabel+0x147>
c0005285:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005289:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000528c:	e8 61 d2 ff ff       	call   c00024f2 <move_window>
c0005291:	89 c6                	mov    esi,eax
c0005293:	85 c0                	test   eax,eax
c0005295:	75 33                	jne    c00052ca <f_getlabel+0x147>
c0005297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000529b:	b8 43 00 00 00       	mov    eax,0x43
c00052a0:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052a3:	83 f9 03             	cmp    ecx,0x3
c00052a6:	74 0f                	je     c00052b7 <f_getlabel+0x134>
c00052a8:	31 c0                	xor    eax,eax
c00052aa:	83 f9 04             	cmp    ecx,0x4
c00052ad:	0f 94 c0             	sete   al
c00052b0:	48                   	dec    eax
c00052b1:	83 e0 c3             	and    eax,0xffffffc3
c00052b4:	83 c0 64             	add    eax,0x64
c00052b7:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052bb:	e8 d8 cc ff ff       	call   c0001f98 <ld_dword>
c00052c0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052c4:	89 07                	mov    DWORD PTR [edi],eax
c00052c6:	eb 02                	jmp    c00052ca <f_getlabel+0x147>
c00052c8:	89 c6                	mov    esi,eax
c00052ca:	83 c4 5c             	add    esp,0x5c
c00052cd:	89 f0                	mov    eax,esi
c00052cf:	5b                   	pop    ebx
c00052d0:	5e                   	pop    esi
c00052d1:	5f                   	pop    edi
c00052d2:	5d                   	pop    ebp
c00052d3:	c3                   	ret    

c00052d4 <f_setlabel>:
c00052d4:	57                   	push   edi
c00052d5:	b9 02 00 00 00       	mov    ecx,0x2
c00052da:	56                   	push   esi
c00052db:	53                   	push   ebx
c00052dc:	83 ec 50             	sub    esp,0x50
c00052df:	8d 54 24 04          	lea    edx,[esp+0x4]
c00052e3:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052e7:	e8 59 d3 ff ff       	call   c0002645 <mount_volume>
c00052ec:	89 c6                	mov    esi,eax
c00052ee:	85 c0                	test   eax,eax
c00052f0:	0f 85 65 01 00 00    	jne    c000545b <f_setlabel+0x187>
c00052f6:	b9 0b 00 00 00       	mov    ecx,0xb
c00052fb:	ba 20 00 00 00       	mov    edx,0x20
c0005300:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005304:	31 db                	xor    ebx,ebx
c0005306:	e8 c1 cc ff ff       	call   c0001fcc <mem_set>
c000530b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000530f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005312:	76 5d                	jbe    c0005371 <f_setlabel+0x9d>
c0005314:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005318:	e8 f4 cc ff ff       	call   c0002011 <tchar2uni>
c000531d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005322:	76 0a                	jbe    c000532e <f_setlabel+0x5a>
c0005324:	be 06 00 00 00       	mov    esi,0x6
c0005329:	e9 2d 01 00 00       	jmp    c000545b <f_setlabel+0x187>
c000532e:	83 ec 0c             	sub    esp,0xc
c0005331:	50                   	push   eax
c0005332:	e8 e5 0b 00 00       	call   c0005f1c <ff_wtoupper>
c0005337:	5a                   	pop    edx
c0005338:	59                   	pop    ecx
c0005339:	68 b5 01 00 00       	push   0x1b5
c000533e:	50                   	push   eax
c000533f:	e8 c0 0a 00 00       	call   c0005e04 <ff_uni2oem>
c0005344:	83 c4 10             	add    esp,0x10
c0005347:	0f b7 f0             	movzx  esi,ax
c000534a:	89 f7                	mov    edi,esi
c000534c:	85 f6                	test   esi,esi
c000534e:	74 d4                	je     c0005324 <f_setlabel+0x50>
c0005350:	89 f2                	mov    edx,esi
c0005352:	b8 d0 f5 02 c0       	mov    eax,0xc002f5d0
c0005357:	e8 9e cc ff ff       	call   c0001ffa <chk_chr>
c000535c:	85 c0                	test   eax,eax
c000535e:	75 c4                	jne    c0005324 <f_setlabel+0x50>
c0005360:	81 fe ff 00 00 00    	cmp    esi,0xff
c0005366:	0f 87 c9 00 00 00    	ja     c0005435 <f_setlabel+0x161>
c000536c:	e9 e0 00 00 00       	jmp    c0005451 <f_setlabel+0x17d>
c0005371:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005376:	74 ac                	je     c0005324 <f_setlabel+0x50>
c0005378:	85 db                	test   ebx,ebx
c000537a:	74 0e                	je     c000538a <f_setlabel+0xb6>
c000537c:	8d 43 ff             	lea    eax,[ebx-0x1]
c000537f:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005384:	75 04                	jne    c000538a <f_setlabel+0xb6>
c0005386:	89 c3                	mov    ebx,eax
c0005388:	eb ee                	jmp    c0005378 <f_setlabel+0xa4>
c000538a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000538e:	31 d2                	xor    edx,edx
c0005390:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005394:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000539c:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053a0:	e8 27 e1 ff ff       	call   c00034cc <dir_sdi>
c00053a5:	89 c6                	mov    esi,eax
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 ac 00 00 00    	jne    c000545b <f_setlabel+0x187>
c00053af:	ba 01 00 00 00       	mov    edx,0x1
c00053b4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053b8:	e8 0e e5 ff ff       	call   c00038cb <dir_read>
c00053bd:	85 c0                	test   eax,eax
c00053bf:	75 18                	jne    c00053d9 <f_setlabel+0x105>
c00053c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053c5:	85 db                	test   ebx,ebx
c00053c7:	74 0b                	je     c00053d4 <f_setlabel+0x100>
c00053c9:	b9 0b 00 00 00       	mov    ecx,0xb
c00053ce:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00053d2:	eb 47                	jmp    c000541b <f_setlabel+0x147>
c00053d4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00053d7:	eb 47                	jmp    c0005420 <f_setlabel+0x14c>
c00053d9:	83 f8 04             	cmp    eax,0x4
c00053dc:	75 53                	jne    c0005431 <f_setlabel+0x15d>
c00053de:	85 db                	test   ebx,ebx
c00053e0:	74 79                	je     c000545b <f_setlabel+0x187>
c00053e2:	ba 01 00 00 00       	mov    edx,0x1
c00053e7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053eb:	e8 76 e4 ff ff       	call   c0003866 <dir_alloc>
c00053f0:	89 c6                	mov    esi,eax
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 65                	jne    c000545b <f_setlabel+0x187>
c00053f6:	b9 20 00 00 00       	mov    ecx,0x20
c00053fb:	31 d2                	xor    edx,edx
c00053fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005401:	e8 c6 cb ff ff       	call   c0001fcc <mem_set>
c0005406:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000540a:	b9 0b 00 00 00       	mov    ecx,0xb
c000540f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005413:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	e8 97 cb ff ff       	call   c0001fb7 <mem_cpy>
c0005420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005424:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000542c:	e8 f8 da ff ff       	call   c0002f29 <sync_fs>
c0005431:	89 c6                	mov    esi,eax
c0005433:	eb 26                	jmp    c000545b <f_setlabel+0x187>
c0005435:	83 fb 09             	cmp    ebx,0x9
c0005438:	0f 87 e6 fe ff ff    	ja     c0005324 <f_setlabel+0x50>
c000543e:	89 f0                	mov    eax,esi
c0005440:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005444:	43                   	inc    ebx
c0005445:	89 f8                	mov    eax,edi
c0005447:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000544b:	43                   	inc    ebx
c000544c:	e9 ba fe ff ff       	jmp    c000530b <f_setlabel+0x37>
c0005451:	83 fb 0a             	cmp    ebx,0xa
c0005454:	76 ef                	jbe    c0005445 <f_setlabel+0x171>
c0005456:	e9 c9 fe ff ff       	jmp    c0005324 <f_setlabel+0x50>
c000545b:	83 c4 50             	add    esp,0x50
c000545e:	89 f0                	mov    eax,esi
c0005460:	5b                   	pop    ebx
c0005461:	5e                   	pop    esi
c0005462:	5f                   	pop    edi
c0005463:	c3                   	ret    

c0005464 <f_expand>:
c0005464:	55                   	push   ebp
c0005465:	57                   	push   edi
c0005466:	56                   	push   esi
c0005467:	53                   	push   ebx
c0005468:	83 ec 2c             	sub    esp,0x2c
c000546b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000546f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005473:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005477:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000547b:	89 d8                	mov    eax,ebx
c000547d:	e8 c7 cf ff ff       	call   c0002449 <validate>
c0005482:	89 c6                	mov    esi,eax
c0005484:	85 c0                	test   eax,eax
c0005486:	0f 85 3b 01 00 00    	jne    c00055c7 <f_expand+0x163>
c000548c:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005490:	85 f6                	test   esi,esi
c0005492:	0f 85 2f 01 00 00    	jne    c00055c7 <f_expand+0x163>
c0005498:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000549d:	75 0a                	jne    c00054a9 <f_expand+0x45>
c000549f:	be 07 00 00 00       	mov    esi,0x7
c00054a4:	e9 1e 01 00 00       	jmp    c00055c7 <f_expand+0x163>
c00054a9:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054ad:	75 f0                	jne    c000549f <f_expand+0x3b>
c00054af:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054b3:	74 ea                	je     c000549f <f_expand+0x3b>
c00054b5:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054b9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054bd:	c1 e1 09             	shl    ecx,0x9
c00054c0:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054c3:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054c7:	0f 95 c0             	setne  al
c00054ca:	31 d2                	xor    edx,edx
c00054cc:	0f b6 c0             	movzx  eax,al
c00054cf:	89 c7                	mov    edi,eax
c00054d1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00054d5:	f7 f1                	div    ecx
c00054d7:	01 f8                	add    eax,edi
c00054d9:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00054dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00054e0:	83 ff 01             	cmp    edi,0x1
c00054e3:	76 05                	jbe    c00054ea <f_expand+0x86>
c00054e5:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00054e8:	77 05                	ja     c00054ef <f_expand+0x8b>
c00054ea:	bf 02 00 00 00       	mov    edi,0x2
c00054ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00054f2:	89 fd                	mov    ebp,edi
c00054f4:	31 c9                	xor    ecx,ecx
c00054f6:	89 ea                	mov    edx,ebp
c00054f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00054fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00054fe:	45                   	inc    ebp
c00054ff:	e8 c4 de ff ff       	call   c00033c8 <get_fat.isra.2>
c0005504:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005508:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000550c:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000550f:	77 05                	ja     c0005516 <f_expand+0xb2>
c0005511:	bd 02 00 00 00       	mov    ebp,0x2
c0005516:	83 f8 01             	cmp    eax,0x1
c0005519:	74 20                	je     c000553b <f_expand+0xd7>
c000551b:	83 f8 ff             	cmp    eax,0xffffffff
c000551e:	74 25                	je     c0005545 <f_expand+0xe1>
c0005520:	85 c0                	test   eax,eax
c0005522:	75 09                	jne    c000552d <f_expand+0xc9>
c0005524:	41                   	inc    ecx
c0005525:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005529:	75 07                	jne    c0005532 <f_expand+0xce>
c000552b:	eb 1f                	jmp    c000554c <f_expand+0xe8>
c000552d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005530:	31 c9                	xor    ecx,ecx
c0005532:	39 fd                	cmp    ebp,edi
c0005534:	75 c0                	jne    c00054f6 <f_expand+0x92>
c0005536:	e9 64 ff ff ff       	jmp    c000549f <f_expand+0x3b>
c000553b:	be 02 00 00 00       	mov    esi,0x2
c0005540:	e9 82 00 00 00       	jmp    c00055c7 <f_expand+0x163>
c0005545:	be 01 00 00 00       	mov    esi,0x1
c000554a:	eb 7b                	jmp    c00055c7 <f_expand+0x163>
c000554c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005551:	74 2b                	je     c000557e <f_expand+0x11a>
c0005553:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005556:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000555a:	85 ed                	test   ebp,ebp
c000555c:	74 24                	je     c0005582 <f_expand+0x11e>
c000555e:	83 c9 ff             	or     ecx,0xffffffff
c0005561:	83 fd 01             	cmp    ebp,0x1
c0005564:	74 03                	je     c0005569 <f_expand+0x105>
c0005566:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005569:	89 fa                	mov    edx,edi
c000556b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000556f:	e8 c2 d3 ff ff       	call   c0002936 <put_fat>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 4d                	jne    c00055c5 <f_expand+0x161>
c0005578:	89 f8                	mov    eax,edi
c000557a:	4d                   	dec    ebp
c000557b:	47                   	inc    edi
c000557c:	eb dc                	jmp    c000555a <f_expand+0xf6>
c000557e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005581:	48                   	dec    eax
c0005582:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005586:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000558b:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000558e:	74 37                	je     c00055c7 <f_expand+0x163>
c0005590:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005593:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005596:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000559a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000559d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055a0:	83 c8 40             	or     eax,0x40
c00055a3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055a6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055a9:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055ac:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055af:	39 c8                	cmp    eax,ecx
c00055b1:	77 14                	ja     c00055c7 <f_expand+0x163>
c00055b3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055b7:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055bd:	83 c8 01             	or     eax,0x1
c00055c0:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055c3:	eb 02                	jmp    c00055c7 <f_expand+0x163>
c00055c5:	89 c6                	mov    esi,eax
c00055c7:	83 c4 2c             	add    esp,0x2c
c00055ca:	89 f0                	mov    eax,esi
c00055cc:	5b                   	pop    ebx
c00055cd:	5e                   	pop    esi
c00055ce:	5f                   	pop    edi
c00055cf:	5d                   	pop    ebp
c00055d0:	c3                   	ret    

c00055d1 <f_mkfs>:
c00055d1:	55                   	push   ebp
c00055d2:	57                   	push   edi
c00055d3:	56                   	push   esi
c00055d4:	be 0b 00 00 00       	mov    esi,0xb
c00055d9:	53                   	push   ebx
c00055da:	83 ec 5c             	sub    esp,0x5c
c00055dd:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00055e1:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c00055e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00055e9:	e8 0e ce ff ff       	call   c00023fc <get_ldnumber>
c00055ee:	85 c0                	test   eax,eax
c00055f0:	0f 88 d1 07 00 00    	js     c0005dc7 <f_mkfs+0x7f6>
c00055f6:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c00055fd:	85 d2                	test   edx,edx
c00055ff:	74 03                	je     c0005604 <f_mkfs+0x33>
c0005601:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005604:	85 db                	test   ebx,ebx
c0005606:	75 05                	jne    c000560d <f_mkfs+0x3c>
c0005608:	bb c0 f5 02 c0       	mov    ebx,0xc002f5c0
c000560d:	83 ec 0c             	sub    esp,0xc
c0005610:	0f b6 c0             	movzx  eax,al
c0005613:	be 03 00 00 00       	mov    esi,0x3
c0005618:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000561c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005620:	e8 18 c9 ff ff       	call   c0001f3d <disk_initialize>
c0005625:	83 c4 10             	add    esp,0x10
c0005628:	a8 01                	test   al,0x1
c000562a:	0f 85 97 07 00 00    	jne    c0005dc7 <f_mkfs+0x7f6>
c0005630:	be 0a 00 00 00       	mov    esi,0xa
c0005635:	a8 04                	test   al,0x4
c0005637:	0f 85 8a 07 00 00    	jne    c0005dc7 <f_mkfs+0x7f6>
c000563d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005640:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005644:	85 c0                	test   eax,eax
c0005646:	75 20                	jne    c0005668 <f_mkfs+0x97>
c0005648:	51                   	push   ecx
c0005649:	8d 44 24 44          	lea    eax,[esp+0x44]
c000564d:	50                   	push   eax
c000564e:	6a 03                	push   0x3
c0005650:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005654:	e8 13 c9 ff ff       	call   c0001f6c <disk_ioctl>
c0005659:	83 c4 10             	add    esp,0x10
c000565c:	85 c0                	test   eax,eax
c000565e:	74 08                	je     c0005668 <f_mkfs+0x97>
c0005660:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005668:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000566c:	8d 42 ff             	lea    eax,[edx-0x1]
c000566f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005674:	77 04                	ja     c000567a <f_mkfs+0xa9>
c0005676:	85 c2                	test   edx,eax
c0005678:	74 08                	je     c0005682 <f_mkfs+0xb1>
c000567a:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005682:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005685:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005689:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000568d:	48                   	dec    eax
c000568e:	3c 01                	cmp    al,0x1
c0005690:	76 05                	jbe    c0005697 <f_mkfs+0xc6>
c0005692:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005697:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000569a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000569e:	48                   	dec    eax
c000569f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a4:	77 07                	ja     c00056ad <f_mkfs+0xdc>
c00056a6:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056ab:	74 08                	je     c00056b5 <f_mkfs+0xe4>
c00056ad:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056b5:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056b8:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056be:	77 07                	ja     c00056c7 <f_mkfs+0xf6>
c00056c0:	8d 47 ff             	lea    eax,[edi-0x1]
c00056c3:	85 f8                	test   eax,edi
c00056c5:	74 02                	je     c00056c9 <f_mkfs+0xf8>
c00056c7:	31 ff                	xor    edi,edi
c00056c9:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c00056d1:	77 0a                	ja     c00056dd <f_mkfs+0x10c>
c00056d3:	be 11 00 00 00       	mov    esi,0x11
c00056d8:	e9 ea 06 00 00       	jmp    c0005dc7 <f_mkfs+0x7f6>
c00056dd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00056df:	85 ed                	test   ebp,ebp
c00056e1:	89 eb                	mov    ebx,ebp
c00056e3:	75 1e                	jne    c0005703 <f_mkfs+0x132>
c00056e5:	83 ec 0c             	sub    esp,0xc
c00056e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00056ef:	25 00 fe ff ff       	and    eax,0xfffffe00
c00056f4:	50                   	push   eax
c00056f5:	e8 da 06 00 00       	call   c0005dd4 <ff_memalloc>
c00056fa:	83 c4 10             	add    esp,0x10
c00056fd:	89 c3                	mov    ebx,eax
c00056ff:	85 c0                	test   eax,eax
c0005701:	74 d0                	je     c00056d3 <f_mkfs+0x102>
c0005703:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000570b:	52                   	push   edx
c000570c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005710:	50                   	push   eax
c0005711:	6a 01                	push   0x1
c0005713:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005717:	e8 50 c8 ff ff       	call   c0001f6c <disk_ioctl>
c000571c:	83 c4 10             	add    esp,0x10
c000571f:	85 c0                	test   eax,eax
c0005721:	0f 85 49 06 00 00    	jne    c0005d70 <f_mkfs+0x79f>
c0005727:	89 f0                	mov    eax,esi
c0005729:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005731:	83 e0 08             	and    eax,0x8
c0005734:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005738:	75 18                	jne    c0005752 <f_mkfs+0x181>
c000573a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000573e:	83 f8 3f             	cmp    eax,0x3f
c0005741:	76 0f                	jbe    c0005752 <f_mkfs+0x181>
c0005743:	83 e8 3f             	sub    eax,0x3f
c0005746:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000574e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005752:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000575a:	83 f8 7f             	cmp    eax,0x7f
c000575d:	0f 86 5b 02 00 00    	jbe    c00059be <f_mkfs+0x3ed>
c0005763:	b9 80 00 00 00       	mov    ecx,0x80
c0005768:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000576e:	77 05                	ja     c0005775 <f_mkfs+0x1a4>
c0005770:	c1 ef 09             	shr    edi,0x9
c0005773:	89 f9                	mov    ecx,edi
c0005775:	89 f0                	mov    eax,esi
c0005777:	89 f7                	mov    edi,esi
c0005779:	83 e0 01             	and    eax,0x1
c000577c:	83 e7 02             	and    edi,0x2
c000577f:	0f b6 c0             	movzx  eax,al
c0005782:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005786:	74 0a                	je     c0005792 <f_mkfs+0x1c1>
c0005788:	85 c0                	test   eax,eax
c000578a:	0f 84 4f 01 00 00    	je     c00058df <f_mkfs+0x30e>
c0005790:	eb 37                	jmp    c00057c9 <f_mkfs+0x1f8>
c0005792:	be 13 00 00 00       	mov    esi,0x13
c0005797:	85 c0                	test   eax,eax
c0005799:	75 2e                	jne    c00057c9 <f_mkfs+0x1f8>
c000579b:	e9 e7 05 00 00       	jmp    c0005d87 <f_mkfs+0x7b6>
c00057a0:	83 f8 02             	cmp    eax,0x2
c00057a3:	0f 85 0d 02 00 00    	jne    c00059b6 <f_mkfs+0x3e5>
c00057a9:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057af:	0f 86 e4 01 00 00    	jbe    c0005999 <f_mkfs+0x3c8>
c00057b5:	85 c9                	test   ecx,ecx
c00057b7:	0f 85 dc 05 00 00    	jne    c0005d99 <f_mkfs+0x7c8>
c00057bd:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057c0:	83 f9 40             	cmp    ecx,0x40
c00057c3:	0f 87 e0 05 00 00    	ja     c0005da9 <f_mkfs+0x7d8>
c00057c9:	89 cf                	mov    edi,ecx
c00057cb:	85 c9                	test   ecx,ecx
c00057cd:	75 1c                	jne    c00057eb <f_mkfs+0x21a>
c00057cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00057d3:	b8 a0 f5 02 c0       	mov    eax,0xc002f5a0
c00057d8:	c1 ee 0c             	shr    esi,0xc
c00057db:	bf 01 00 00 00       	mov    edi,0x1
c00057e0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00057e3:	85 d2                	test   edx,edx
c00057e5:	0f 85 63 01 00 00    	jne    c000594e <f_mkfs+0x37d>
c00057eb:	31 d2                	xor    edx,edx
c00057ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00057f1:	f7 f7                	div    edi
c00057f3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00057f8:	0f 86 62 01 00 00    	jbe    c0005960 <f_mkfs+0x38f>
c00057fe:	83 c0 02             	add    eax,0x2
c0005801:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005806:	01 c0                	add    eax,eax
c0005808:	05 ff 01 00 00       	add    eax,0x1ff
c000580d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005815:	c1 e8 09             	shr    eax,0x9
c0005818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000581c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005820:	c1 e0 05             	shl    eax,0x5
c0005823:	c1 e8 09             	shr    eax,0x9
c0005826:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000582a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000582f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005837:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000583b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000583f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005843:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005848:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000584c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005850:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005854:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005858:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000585c:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005860:	f7 d8                	neg    eax
c0005862:	21 c6                	and    esi,eax
c0005864:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005869:	29 d6                	sub    esi,edx
c000586b:	83 f8 03             	cmp    eax,0x3
c000586e:	0f 85 ff 00 00 00    	jne    c0005973 <f_mkfs+0x3a2>
c0005874:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005878:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c000587c:	89 f8                	mov    eax,edi
c000587e:	c1 e0 04             	shl    eax,0x4
c0005881:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005885:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005889:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000588d:	0f 82 2b 01 00 00    	jb     c00059be <f_mkfs+0x3ed>
c0005893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005897:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000589b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c000589f:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058a4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058a8:	29 d0                	sub    eax,edx
c00058aa:	31 d2                	xor    edx,edx
c00058ac:	f7 f7                	div    edi
c00058ae:	89 c6                	mov    esi,eax
c00058b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058b5:	83 f8 03             	cmp    eax,0x3
c00058b8:	0f 85 e2 fe ff ff    	jne    c00057a0 <f_mkfs+0x1cf>
c00058be:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058c4:	0f 87 03 01 00 00    	ja     c00059cd <f_mkfs+0x3fc>
c00058ca:	85 c9                	test   ecx,ecx
c00058cc:	0f 85 ec 00 00 00    	jne    c00059be <f_mkfs+0x3ed>
c00058d2:	83 ff 01             	cmp    edi,0x1
c00058d5:	0f 86 e3 00 00 00    	jbe    c00059be <f_mkfs+0x3ed>
c00058db:	d1 ef                	shr    edi,1
c00058dd:	89 f9                	mov    ecx,edi
c00058df:	89 ce                	mov    esi,ecx
c00058e1:	85 c9                	test   ecx,ecx
c00058e3:	75 25                	jne    c000590a <f_mkfs+0x339>
c00058e5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00058e9:	b8 b0 f5 02 c0       	mov    eax,0xc002f5b0
c00058ee:	c1 ee 11             	shr    esi,0x11
c00058f1:	b9 01 00 00 00       	mov    ecx,0x1
c00058f6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00058f9:	85 d2                	test   edx,edx
c00058fb:	74 0b                	je     c0005908 <f_mkfs+0x337>
c00058fd:	83 c0 02             	add    eax,0x2
c0005900:	39 f2                	cmp    edx,esi
c0005902:	77 04                	ja     c0005908 <f_mkfs+0x337>
c0005904:	01 c9                	add    ecx,ecx
c0005906:	eb ee                	jmp    c00058f6 <f_mkfs+0x325>
c0005908:	31 f6                	xor    esi,esi
c000590a:	31 d2                	xor    edx,edx
c000590c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005910:	f7 f1                	div    ecx
c0005912:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005919:	2d f6 ff 00 00       	sub    eax,0xfff6
c000591e:	c1 ea 09             	shr    edx,0x9
c0005921:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005926:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000592a:	0f 87 8e 00 00 00    	ja     c00059be <f_mkfs+0x3ed>
c0005930:	89 cf                	mov    edi,ecx
c0005932:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000593a:	89 f1                	mov    ecx,esi
c000593c:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005944:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005949:	e9 dc fe ff ff       	jmp    c000582a <f_mkfs+0x259>
c000594e:	83 c0 02             	add    eax,0x2
c0005951:	39 f2                	cmp    edx,esi
c0005953:	0f 87 92 fe ff ff    	ja     c00057eb <f_mkfs+0x21a>
c0005959:	01 ff                	add    edi,edi
c000595b:	e9 80 fe ff ff       	jmp    c00057e0 <f_mkfs+0x20f>
c0005960:	8d 04 40             	lea    eax,[eax+eax*2]
c0005963:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005968:	40                   	inc    eax
c0005969:	d1 e8                	shr    eax,1
c000596b:	83 c0 03             	add    eax,0x3
c000596e:	e9 95 fe ff ff       	jmp    c0005808 <f_mkfs+0x237>
c0005973:	31 d2                	xor    edx,edx
c0005975:	89 f0                	mov    eax,esi
c0005977:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000597b:	85 d2                	test   edx,edx
c000597d:	74 09                	je     c0005988 <f_mkfs+0x3b7>
c000597f:	4e                   	dec    esi
c0005980:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005984:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005988:	89 f0                	mov    eax,esi
c000598a:	31 d2                	xor    edx,edx
c000598c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005990:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005994:	e9 e3 fe ff ff       	jmp    c000587c <f_mkfs+0x2ab>
c0005999:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000599f:	77 2c                	ja     c00059cd <f_mkfs+0x3fc>
c00059a1:	85 c9                	test   ecx,ecx
c00059a3:	75 19                	jne    c00059be <f_mkfs+0x3ed>
c00059a5:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059a8:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059ae:	0f 86 15 fe ff ff    	jbe    c00057c9 <f_mkfs+0x1f8>
c00059b4:	eb 08                	jmp    c00059be <f_mkfs+0x3ed>
c00059b6:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059bc:	76 0a                	jbe    c00059c8 <f_mkfs+0x3f7>
c00059be:	be 0e 00 00 00       	mov    esi,0xe
c00059c3:	e9 bf 03 00 00       	jmp    c0005d87 <f_mkfs+0x7b6>
c00059c8:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059cd:	31 d2                	xor    edx,edx
c00059cf:	b9 00 02 00 00       	mov    ecx,0x200
c00059d4:	89 d8                	mov    eax,ebx
c00059d6:	e8 f1 c5 ff ff       	call   c0001fcc <mem_set>
c00059db:	b9 0b 00 00 00       	mov    ecx,0xb
c00059e0:	ba 4e f5 02 c0       	mov    edx,0xc002f54e
c00059e5:	89 d8                	mov    eax,ebx
c00059e7:	e8 cb c5 ff ff       	call   c0001fb7 <mem_cpy>
c00059ec:	8d 43 0b             	lea    eax,[ebx+0xb]
c00059ef:	ba 00 02 00 00       	mov    edx,0x200
c00059f4:	e8 b7 c5 ff ff       	call   c0001fb0 <st_word>
c00059f9:	89 f8                	mov    eax,edi
c00059fb:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a00:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a03:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a06:	e8 a5 c5 ff ff       	call   c0001fb0 <st_word>
c0005a0b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a0f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a12:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a17:	83 f8 03             	cmp    eax,0x3
c0005a1a:	75 08                	jne    c0005a24 <f_mkfs+0x453>
c0005a1c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a28:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a2b:	e8 80 c5 ff ff       	call   c0001fb0 <st_word>
c0005a30:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a34:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a3a:	77 0a                	ja     c0005a46 <f_mkfs+0x475>
c0005a3c:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a3f:	e8 6c c5 ff ff       	call   c0001fb0 <st_word>
c0005a44:	eb 08                	jmp    c0005a4e <f_mkfs+0x47d>
c0005a46:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a49:	e8 66 c5 ff ff       	call   c0001fb4 <st_dword>
c0005a4e:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a51:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a56:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a5a:	e8 51 c5 ff ff       	call   c0001fb0 <st_word>
c0005a5f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a62:	ba ff 00 00 00       	mov    edx,0xff
c0005a67:	e8 44 c5 ff ff       	call   c0001fb0 <st_word>
c0005a6c:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005a6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a73:	e8 3c c5 ff ff       	call   c0001fb4 <st_dword>
c0005a78:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a7d:	83 f8 03             	cmp    eax,0x3
c0005a80:	75 57                	jne    c0005ad9 <f_mkfs+0x508>
c0005a82:	8d 43 43             	lea    eax,[ebx+0x43]
c0005a85:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a8a:	e8 25 c5 ff ff       	call   c0001fb4 <st_dword>
c0005a8f:	8d 43 24             	lea    eax,[ebx+0x24]
c0005a92:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a96:	e8 19 c5 ff ff       	call   c0001fb4 <st_dword>
c0005a9b:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005a9e:	ba 02 00 00 00       	mov    edx,0x2
c0005aa3:	e8 0c c5 ff ff       	call   c0001fb4 <st_dword>
c0005aa8:	8d 43 30             	lea    eax,[ebx+0x30]
c0005aab:	ba 01 00 00 00       	mov    edx,0x1
c0005ab0:	e8 fb c4 ff ff       	call   c0001fb0 <st_word>
c0005ab5:	8d 43 32             	lea    eax,[ebx+0x32]
c0005ab8:	ba 06 00 00 00       	mov    edx,0x6
c0005abd:	e8 ee c4 ff ff       	call   c0001fb0 <st_word>
c0005ac2:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005ac6:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aca:	8d 43 47             	lea    eax,[ebx+0x47]
c0005acd:	b9 13 00 00 00       	mov    ecx,0x13
c0005ad2:	ba 5a f5 02 c0       	mov    edx,0xc002f55a
c0005ad7:	eb 2f                	jmp    c0005b08 <f_mkfs+0x537>
c0005ad9:	8d 43 27             	lea    eax,[ebx+0x27]
c0005adc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ae1:	e8 ce c4 ff ff       	call   c0001fb4 <st_dword>
c0005ae6:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005aeb:	8d 43 16             	lea    eax,[ebx+0x16]
c0005aee:	e8 bd c4 ff ff       	call   c0001fb0 <st_word>
c0005af3:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005af7:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005afb:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005afe:	b9 13 00 00 00       	mov    ecx,0x13
c0005b03:	ba 6e f5 02 c0       	mov    edx,0xc002f56e
c0005b08:	e8 aa c4 ff ff       	call   c0001fb7 <mem_cpy>
c0005b0d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b13:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b1c:	e8 8f c4 ff ff       	call   c0001fb0 <st_word>
c0005b21:	6a 01                	push   0x1
c0005b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b27:	53                   	push   ebx
c0005b28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b2c:	e8 25 c4 ff ff       	call   c0001f56 <disk_write>
c0005b31:	83 c4 10             	add    esp,0x10
c0005b34:	85 c0                	test   eax,eax
c0005b36:	0f 85 34 02 00 00    	jne    c0005d70 <f_mkfs+0x79f>
c0005b3c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b41:	83 f8 03             	cmp    eax,0x3
c0005b44:	0f 85 98 00 00 00    	jne    c0005be2 <f_mkfs+0x611>
c0005b4a:	6a 01                	push   0x1
c0005b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b50:	83 c0 06             	add    eax,0x6
c0005b53:	50                   	push   eax
c0005b54:	53                   	push   ebx
c0005b55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b59:	e8 f8 c3 ff ff       	call   c0001f56 <disk_write>
c0005b5e:	b9 00 02 00 00       	mov    ecx,0x200
c0005b63:	31 d2                	xor    edx,edx
c0005b65:	89 d8                	mov    eax,ebx
c0005b67:	e8 60 c4 ff ff       	call   c0001fcc <mem_set>
c0005b6c:	ba 52 52 61 41       	mov    edx,0x41615252
c0005b71:	89 d8                	mov    eax,ebx
c0005b73:	e8 3c c4 ff ff       	call   c0001fb4 <st_dword>
c0005b78:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005b7e:	ba 72 72 41 61       	mov    edx,0x61417272
c0005b83:	e8 2c c4 ff ff       	call   c0001fb4 <st_dword>
c0005b88:	8d 56 ff             	lea    edx,[esi-0x1]
c0005b8b:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005b91:	e8 1e c4 ff ff       	call   c0001fb4 <st_dword>
c0005b96:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005b9c:	ba 02 00 00 00       	mov    edx,0x2
c0005ba1:	e8 0e c4 ff ff       	call   c0001fb4 <st_dword>
c0005ba6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005bab:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005bb1:	e8 fa c3 ff ff       	call   c0001fb0 <st_word>
c0005bb6:	6a 01                	push   0x1
c0005bb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bbc:	83 c0 07             	add    eax,0x7
c0005bbf:	50                   	push   eax
c0005bc0:	53                   	push   ebx
c0005bc1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bc5:	e8 8c c3 ff ff       	call   c0001f56 <disk_write>
c0005bca:	83 c4 20             	add    esp,0x20
c0005bcd:	6a 01                	push   0x1
c0005bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bd3:	40                   	inc    eax
c0005bd4:	50                   	push   eax
c0005bd5:	53                   	push   ebx
c0005bd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bda:	e8 77 c3 ff ff       	call   c0001f56 <disk_write>
c0005bdf:	83 c4 10             	add    esp,0x10
c0005be2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005be6:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005bea:	c1 e8 09             	shr    eax,0x9
c0005bed:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bf7:	31 d2                	xor    edx,edx
c0005bf9:	89 d8                	mov    eax,ebx
c0005bfb:	e8 cc c3 ff ff       	call   c0001fcc <mem_set>
c0005c00:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c05:	31 c9                	xor    ecx,ecx
c0005c07:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c0f:	83 f8 01             	cmp    eax,0x1
c0005c12:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c16:	0f 94 c1             	sete   cl
c0005c19:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c1d:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c21:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c29:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c31:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c36:	75 21                	jne    c0005c59 <f_mkfs+0x688>
c0005c38:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c3d:	89 d8                	mov    eax,ebx
c0005c3f:	e8 70 c3 ff ff       	call   c0001fb4 <st_dword>
c0005c44:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c47:	83 ca ff             	or     edx,0xffffffff
c0005c4a:	e8 65 c3 ff ff       	call   c0001fb4 <st_dword>
c0005c4f:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c52:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c57:	eb 06                	jmp    c0005c5f <f_mkfs+0x68e>
c0005c59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c5d:	89 d8                	mov    eax,ebx
c0005c5f:	e8 50 c3 ff ff       	call   c0001fb4 <st_dword>
c0005c64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005c6c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005c70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c74:	39 ce                	cmp    esi,ecx
c0005c76:	76 02                	jbe    c0005c7a <f_mkfs+0x6a9>
c0005c78:	89 ce                	mov    esi,ecx
c0005c7a:	56                   	push   esi
c0005c7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005c7f:	53                   	push   ebx
c0005c80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c84:	e8 cd c2 ff ff       	call   c0001f56 <disk_write>
c0005c89:	83 c4 10             	add    esp,0x10
c0005c8c:	85 c0                	test   eax,eax
c0005c8e:	0f 85 dc 00 00 00    	jne    c0005d70 <f_mkfs+0x79f>
c0005c94:	31 d2                	xor    edx,edx
c0005c96:	b9 00 02 00 00       	mov    ecx,0x200
c0005c9b:	89 d8                	mov    eax,ebx
c0005c9d:	e8 2a c3 ff ff       	call   c0001fcc <mem_set>
c0005ca2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005ca6:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005caa:	75 c0                	jne    c0005c6c <f_mkfs+0x69b>
c0005cac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005cb0:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005cb8:	40                   	inc    eax
c0005cb9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cbd:	0f 87 6e ff ff ff    	ja     c0005c31 <f_mkfs+0x660>
c0005cc3:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cc8:	83 f8 03             	cmp    eax,0x3
c0005ccb:	74 04                	je     c0005cd1 <f_mkfs+0x700>
c0005ccd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005cd1:	89 fe                	mov    esi,edi
c0005cd3:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005cd7:	76 04                	jbe    c0005cdd <f_mkfs+0x70c>
c0005cd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005cdd:	56                   	push   esi
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 6a c2 ff ff       	call   c0001f56 <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	75 7d                	jne    c0005d70 <f_mkfs+0x79f>
c0005cf3:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cf7:	29 f7                	sub    edi,esi
c0005cf9:	75 d6                	jne    c0005cd1 <f_mkfs+0x700>
c0005cfb:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d00:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d05:	83 f8 03             	cmp    eax,0x3
c0005d08:	74 1e                	je     c0005d28 <f_mkfs+0x757>
c0005d0a:	b9 06 00 00 00       	mov    ecx,0x6
c0005d0f:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d17:	77 0f                	ja     c0005d28 <f_mkfs+0x757>
c0005d19:	b9 04 00 00 00       	mov    ecx,0x4
c0005d1e:	83 f8 02             	cmp    eax,0x2
c0005d21:	74 05                	je     c0005d28 <f_mkfs+0x757>
c0005d23:	b9 01 00 00 00       	mov    ecx,0x1
c0005d28:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d2d:	75 2a                	jne    c0005d59 <f_mkfs+0x788>
c0005d2f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d33:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d3b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d3f:	83 ec 0c             	sub    esp,0xc
c0005d42:	53                   	push   ebx
c0005d43:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4b:	e8 89 d2 ff ff       	call   c0002fd9 <create_partition>
c0005d50:	83 c4 10             	add    esp,0x10
c0005d53:	89 c6                	mov    esi,eax
c0005d55:	85 c0                	test   eax,eax
c0005d57:	75 2e                	jne    c0005d87 <f_mkfs+0x7b6>
c0005d59:	31 f6                	xor    esi,esi
c0005d5b:	50                   	push   eax
c0005d5c:	6a 00                	push   0x0
c0005d5e:	6a 00                	push   0x0
c0005d60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d64:	e8 03 c2 ff ff       	call   c0001f6c <disk_ioctl>
c0005d69:	83 c4 10             	add    esp,0x10
c0005d6c:	85 c0                	test   eax,eax
c0005d6e:	74 17                	je     c0005d87 <f_mkfs+0x7b6>
c0005d70:	85 ed                	test   ebp,ebp
c0005d72:	75 0c                	jne    c0005d80 <f_mkfs+0x7af>
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	e8 6f 00 00 00       	call   c0005dec <ff_memfree>
c0005d7d:	83 c4 10             	add    esp,0x10
c0005d80:	be 01 00 00 00       	mov    esi,0x1
c0005d85:	eb 40                	jmp    c0005dc7 <f_mkfs+0x7f6>
c0005d87:	85 ed                	test   ebp,ebp
c0005d89:	75 3c                	jne    c0005dc7 <f_mkfs+0x7f6>
c0005d8b:	83 ec 0c             	sub    esp,0xc
c0005d8e:	53                   	push   ebx
c0005d8f:	e8 58 00 00 00       	call   c0005dec <ff_memfree>
c0005d94:	83 c4 10             	add    esp,0x10
c0005d97:	eb 2e                	jmp    c0005dc7 <f_mkfs+0x7f6>
c0005d99:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005d9e:	0f 85 3b fb ff ff    	jne    c00058df <f_mkfs+0x30e>
c0005da4:	e9 15 fc ff ff       	jmp    c00059be <f_mkfs+0x3ed>
c0005da9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dae:	0f 85 31 fb ff ff    	jne    c00058e5 <f_mkfs+0x314>
c0005db4:	89 cf                	mov    edi,ecx
c0005db6:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005dbc:	0f 86 29 fa ff ff    	jbe    c00057eb <f_mkfs+0x21a>
c0005dc2:	e9 f7 fb ff ff       	jmp    c00059be <f_mkfs+0x3ed>
c0005dc7:	83 c4 5c             	add    esp,0x5c
c0005dca:	89 f0                	mov    eax,esi
c0005dcc:	5b                   	pop    ebx
c0005dcd:	5e                   	pop    esi
c0005dce:	5f                   	pop    edi
c0005dcf:	5d                   	pop    ebp
c0005dd0:	c3                   	ret    
c0005dd1:	66 90                	xchg   ax,ax
c0005dd3:	90                   	nop

c0005dd4 <ff_memalloc>:
c0005dd4:	83 ec 0c             	sub    esp,0xc
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005dde:	e8 db 05 01 00       	call   c00163be <malloc>
c0005de3:	83 c4 10             	add    esp,0x10
c0005de6:	83 c4 0c             	add    esp,0xc
c0005de9:	c3                   	ret    
c0005dea:	66 90                	xchg   ax,ax

c0005dec <ff_memfree>:
c0005dec:	83 ec 0c             	sub    esp,0xc
c0005def:	83 ec 0c             	sub    esp,0xc
c0005df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005df6:	e8 e3 05 01 00       	call   c00163de <free>
c0005dfb:	83 c4 10             	add    esp,0x10
c0005dfe:	90                   	nop
c0005dff:	83 c4 0c             	add    esp,0xc
c0005e02:	c3                   	ret    
c0005e03:	90                   	nop

c0005e04 <ff_uni2oem>:
c0005e04:	83 ec 14             	sub    esp,0x14
c0005e07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e0b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e0f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e16:	c7 44 24 0c a0 f9 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f9a0
c0005e1e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e23:	77 0b                	ja     c0005e30 <ff_uni2oem+0x2c>
c0005e25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e2e:	eb 68                	jmp    c0005e98 <ff_uni2oem+0x94>
c0005e30:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e38:	77 5e                	ja     c0005e98 <ff_uni2oem+0x94>
c0005e3a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e3e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e43:	75 53                	jne    c0005e98 <ff_uni2oem+0x94>
c0005e45:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4c:	eb 12                	jmp    c0005e60 <ff_uni2oem+0x5c>
c0005e4e:	66 90                	xchg   ax,ax
c0005e50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e55:	83 c0 01             	add    eax,0x1
c0005e58:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0005e60:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e65:	83 f8 7f             	cmp    eax,0x7f
c0005e68:	77 1e                	ja     c0005e88 <ff_uni2oem+0x84>
c0005e6a:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e6f:	01 c0                	add    eax,eax
c0005e71:	89 c2                	mov    edx,eax
c0005e73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e77:	01 d0                	add    eax,edx
c0005e79:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7c:	0f b7 c0             	movzx  eax,ax
c0005e7f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005e83:	75 cb                	jne    c0005e50 <ff_uni2oem+0x4c>
c0005e85:	8d 76 00             	lea    esi,[esi+0x0]
c0005e88:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e8d:	83 e8 80             	sub    eax,0xffffff80
c0005e90:	0f b6 c0             	movzx  eax,al
c0005e93:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e98:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e9d:	83 c4 14             	add    esp,0x14
c0005ea0:	c3                   	ret    
c0005ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ea4 <ff_oem2uni>:
c0005ea4:	83 ec 18             	sub    esp,0x18
c0005ea7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005eaf:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005eb4:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eb8:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ebf:	c7 44 24 10 a0 f9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f9a0
c0005ec7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ecc:	83 f8 7f             	cmp    eax,0x7f
c0005ecf:	77 0b                	ja     c0005edc <ff_oem2uni+0x38>
c0005ed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ed5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005eda:	eb 34                	jmp    c0005f10 <ff_oem2uni+0x6c>
c0005edc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005ee0:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ee5:	75 29                	jne    c0005f10 <ff_oem2uni+0x6c>
c0005ee7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005eec:	3d ff 00 00 00       	cmp    eax,0xff
c0005ef1:	77 1d                	ja     c0005f10 <ff_oem2uni+0x6c>
c0005ef3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005efd:	01 c0                	add    eax,eax
c0005eff:	89 c2                	mov    edx,eax
c0005f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f05:	01 d0                	add    eax,edx
c0005f07:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f0a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0f:	90                   	nop
c0005f10:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f15:	83 c4 18             	add    esp,0x18
c0005f18:	c3                   	ret    
c0005f19:	8d 76 00             	lea    esi,[esi+0x0]

c0005f1c <ff_wtoupper>:
c0005f1c:	83 ec 10             	sub    esp,0x10
c0005f1f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f27:	0f 87 ab 01 00 00    	ja     c00060d8 <ff_wtoupper+0x1bc>
c0005f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f31:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f36:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f3b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f40:	77 0a                	ja     c0005f4c <ff_wtoupper+0x30>
c0005f42:	b8 a0 f7 02 c0       	mov    eax,0xc002f7a0
c0005f47:	eb 0b                	jmp    c0005f54 <ff_wtoupper+0x38>
c0005f49:	8d 76 00             	lea    esi,[esi+0x0]
c0005f4c:	b8 e0 f6 02 c0       	mov    eax,0xc002f6e0
c0005f51:	8d 76 00             	lea    esi,[esi+0x0]
c0005f54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f5c:	8d 50 02             	lea    edx,[eax+0x2]
c0005f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f63:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f66:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f6b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f70:	85 c0                	test   eax,eax
c0005f72:	0f 84 54 01 00 00    	je     c00060cc <ff_wtoupper+0x1b0>
c0005f78:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005f7d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f82:	39 c2                	cmp    edx,eax
c0005f84:	0f 82 42 01 00 00    	jb     c00060cc <ff_wtoupper+0x1b0>
c0005f8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f8e:	8d 50 02             	lea    edx,[eax+0x2]
c0005f91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f95:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f98:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005f9d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fa2:	c1 e8 08             	shr    eax,0x8
c0005fa5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005faa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005faf:	0f b6 c0             	movzx  eax,al
c0005fb2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fb7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005fbc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005fc1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005fc6:	01 ca                	add    edx,ecx
c0005fc8:	39 d0                	cmp    eax,edx
c0005fca:	0f 8d d8 00 00 00    	jge    c00060a8 <ff_wtoupper+0x18c>
c0005fd0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005fd5:	83 f8 08             	cmp    eax,0x8
c0005fd8:	0f 87 ea 00 00 00    	ja     c00060c8 <ff_wtoupper+0x1ac>
c0005fde:	8b 04 85 a0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0960]
c0005fe5:	ff e0                	jmp    eax
c0005fe7:	90                   	nop
c0005fe8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fed:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ff2:	29 c2                	sub    edx,eax
c0005ff4:	89 d0                	mov    eax,edx
c0005ff6:	01 c0                	add    eax,eax
c0005ff8:	89 c2                	mov    edx,eax
c0005ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ffe:	01 d0                	add    eax,edx
c0006000:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006003:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006008:	e9 97 00 00 00       	jmp    c00060a4 <ff_wtoupper+0x188>
c000600d:	8d 76 00             	lea    esi,[esi+0x0]
c0006010:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006015:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006019:	89 d1                	mov    ecx,edx
c000601b:	29 c1                	sub    ecx,eax
c000601d:	89 c8                	mov    eax,ecx
c000601f:	83 e0 01             	and    eax,0x1
c0006022:	89 c2                	mov    edx,eax
c0006024:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006029:	29 d0                	sub    eax,edx
c000602b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006030:	eb 72                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006032:	66 90                	xchg   ax,ax
c0006034:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006039:	83 e8 10             	sub    eax,0x10
c000603c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006041:	eb 61                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006043:	90                   	nop
c0006044:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006049:	83 e8 20             	sub    eax,0x20
c000604c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006051:	eb 51                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006053:	90                   	nop
c0006054:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006059:	83 e8 30             	sub    eax,0x30
c000605c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006061:	eb 41                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006063:	90                   	nop
c0006064:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006069:	83 e8 1a             	sub    eax,0x1a
c000606c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006071:	eb 31                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006073:	90                   	nop
c0006074:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006079:	83 c0 08             	add    eax,0x8
c000607c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006081:	eb 21                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006083:	90                   	nop
c0006084:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006089:	83 e8 50             	sub    eax,0x50
c000608c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006091:	eb 11                	jmp    c00060a4 <ff_wtoupper+0x188>
c0006093:	90                   	nop
c0006094:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006099:	2d 60 1c 00 00       	sub    eax,0x1c60
c000609e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a3:	90                   	nop
c00060a4:	eb 22                	jmp    c00060c8 <ff_wtoupper+0x1ac>
c00060a6:	66 90                	xchg   ax,ax
c00060a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060ad:	85 c0                	test   eax,eax
c00060af:	0f 85 a3 fe ff ff    	jne    c0005f58 <ff_wtoupper+0x3c>
c00060b5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ba:	01 c0                	add    eax,eax
c00060bc:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060c0:	e9 93 fe ff ff       	jmp    c0005f58 <ff_wtoupper+0x3c>
c00060c5:	8d 76 00             	lea    esi,[esi+0x0]
c00060c8:	90                   	nop
c00060c9:	8d 76 00             	lea    esi,[esi+0x0]
c00060cc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060d5:	8d 76 00             	lea    esi,[esi+0x0]
c00060d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060dc:	83 c4 10             	add    esp,0x10
c00060df:	c3                   	ret    

c00060e0 <utf2ucs>:
c00060e0:	57                   	push   edi
c00060e1:	31 c9                	xor    ecx,ecx
c00060e3:	56                   	push   esi
c00060e4:	89 d7                	mov    edi,edx
c00060e6:	53                   	push   ebx
c00060e7:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c00060eb:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c00060ef:	89 de                	mov    esi,ebx
c00060f1:	c1 fe 08             	sar    esi,0x8
c00060f4:	89 f2                	mov    edx,esi
c00060f6:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c00060f9:	41                   	inc    ecx
c00060fa:	85 db                	test   ebx,ebx
c00060fc:	75 e9                	jne    c00060e7 <utf2ucs+0x7>
c00060fe:	5b                   	pop    ebx
c00060ff:	5e                   	pop    esi
c0006100:	5f                   	pop    edi
c0006101:	c3                   	ret    

c0006102 <ucs2utfn>:
c0006102:	83 e1 fe             	and    ecx,0xfffffffe
c0006105:	01 d1                	add    ecx,edx
c0006107:	39 d1                	cmp    ecx,edx
c0006109:	75 04                	jne    c000610f <ucs2utfn+0xd>
c000610b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000610e:	c3                   	ret    
c000610f:	57                   	push   edi
c0006110:	56                   	push   esi
c0006111:	53                   	push   ebx
c0006112:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006115:	83 c2 02             	add    edx,0x2
c0006118:	89 de                	mov    esi,ebx
c000611a:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c000611e:	c1 e6 08             	shl    esi,0x8
c0006121:	09 f3                	or     ebx,esi
c0006123:	83 fb 3b             	cmp    ebx,0x3b
c0006126:	74 50                	je     c0006178 <ucs2utfn+0x76>
c0006128:	83 fb 7f             	cmp    ebx,0x7f
c000612b:	7f 05                	jg     c0006132 <ucs2utfn+0x30>
c000612d:	88 18                	mov    BYTE PTR [eax],bl
c000612f:	40                   	inc    eax
c0006130:	eb 42                	jmp    c0006174 <ucs2utfn+0x72>
c0006132:	89 de                	mov    esi,ebx
c0006134:	89 df                	mov    edi,ebx
c0006136:	c1 fe 06             	sar    esi,0x6
c0006139:	83 e7 3f             	and    edi,0x3f
c000613c:	83 cf 80             	or     edi,0xffffff80
c000613f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006145:	7f 12                	jg     c0006159 <ucs2utfn+0x57>
c0006147:	83 ce c0             	or     esi,0xffffffc0
c000614a:	83 c0 02             	add    eax,0x2
c000614d:	89 f3                	mov    ebx,esi
c000614f:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006152:	89 fb                	mov    ebx,edi
c0006154:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006157:	eb 1b                	jmp    c0006174 <ucs2utfn+0x72>
c0006159:	c1 fb 0c             	sar    ebx,0xc
c000615c:	83 e6 3f             	and    esi,0x3f
c000615f:	83 cb e0             	or     ebx,0xffffffe0
c0006162:	83 ce 80             	or     esi,0xffffff80
c0006165:	88 18                	mov    BYTE PTR [eax],bl
c0006167:	89 f3                	mov    ebx,esi
c0006169:	83 c0 03             	add    eax,0x3
c000616c:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000616f:	89 fb                	mov    ebx,edi
c0006171:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006174:	39 d1                	cmp    ecx,edx
c0006176:	75 9a                	jne    c0006112 <ucs2utfn+0x10>
c0006178:	5b                   	pop    ebx
c0006179:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000617c:	5e                   	pop    esi
c000617d:	5f                   	pop    edi
c000617e:	c3                   	ret    

c000617f <isjoliet>:
c000617f:	31 d2                	xor    edx,edx
c0006181:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0006184:	75 26                	jne    c00061ac <isjoliet+0x2d>
c0006186:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c000618a:	75 20                	jne    c00061ac <isjoliet+0x2d>
c000618c:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006190:	ba 02 00 00 00       	mov    edx,0x2
c0006195:	83 f8 43             	cmp    eax,0x43
c0006198:	74 12                	je     c00061ac <isjoliet+0x2d>
c000619a:	ba 03 00 00 00       	mov    edx,0x3
c000619f:	83 f8 45             	cmp    eax,0x45
c00061a2:	74 08                	je     c00061ac <isjoliet+0x2d>
c00061a4:	31 d2                	xor    edx,edx
c00061a6:	83 f8 40             	cmp    eax,0x40
c00061a9:	0f 94 c2             	sete   dl
c00061ac:	89 d0                	mov    eax,edx
c00061ae:	c3                   	ret    

c00061af <htohl_32>:
c00061af:	8b 00                	mov    eax,DWORD PTR [eax]
c00061b1:	c3                   	ret    

c00061b2 <iso_733>:
c00061b2:	eb fb                	jmp    c00061af <htohl_32>

c00061b4 <bgrad_cache>:
c00061b4:	83 fa 0e             	cmp    edx,0xe
c00061b7:	77 16                	ja     c00061cf <bgrad_cache+0x1b>
c00061b9:	53                   	push   ebx
c00061ba:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061bd:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061c1:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061c4:	42                   	inc    edx
c00061c5:	83 fa 0f             	cmp    edx,0xf
c00061c8:	75 f3                	jne    c00061bd <bgrad_cache+0x9>
c00061ca:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c00061cd:	5b                   	pop    ebx
c00061ce:	c3                   	ret    
c00061cf:	c3                   	ret    

c00061d0 <ucscompare>:
c00061d0:	55                   	push   ebp
c00061d1:	57                   	push   edi
c00061d2:	89 c7                	mov    edi,eax
c00061d4:	56                   	push   esi
c00061d5:	89 d6                	mov    esi,edx
c00061d7:	53                   	push   ebx
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 ec 1c             	sub    esp,0x1c
c00061dd:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c00061e1:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c00061e6:	c1 e3 08             	shl    ebx,0x8
c00061e9:	09 c3                	or     ebx,eax
c00061eb:	39 ca                	cmp    edx,ecx
c00061ed:	7d 42                	jge    c0006231 <ucscompare+0x61>
c00061ef:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c00061f3:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c00061f8:	c1 e0 08             	shl    eax,0x8
c00061fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00061ff:	09 e8                	or     eax,ebp
c0006201:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006205:	83 f8 3b             	cmp    eax,0x3b
c0006208:	74 27                	je     c0006231 <ucscompare+0x61>
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	50                   	push   eax
c000620e:	e8 3d a7 ff ff       	call   c0000950 <tolower>
c0006213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006216:	89 c5                	mov    ebp,eax
c0006218:	e8 33 a7 ff ff       	call   c0000950 <tolower>
c000621d:	83 c4 10             	add    esp,0x10
c0006220:	39 c5                	cmp    ebp,eax
c0006222:	75 20                	jne    c0006244 <ucscompare+0x74>
c0006224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006228:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000622c:	83 c2 02             	add    edx,0x2
c000622f:	eb ac                	jmp    c00061dd <ucscompare+0xd>
c0006231:	85 db                	test   ebx,ebx
c0006233:	0f 95 c2             	setne  dl
c0006236:	31 c0                	xor    eax,eax
c0006238:	83 fb 2f             	cmp    ebx,0x2f
c000623b:	0f 95 c0             	setne  al
c000623e:	21 d0                	and    eax,edx
c0006240:	f7 d8                	neg    eax
c0006242:	eb 03                	jmp    c0006247 <ucscompare+0x77>
c0006244:	83 c8 ff             	or     eax,0xffffffff
c0006247:	83 c4 1c             	add    esp,0x1c
c000624a:	5b                   	pop    ebx
c000624b:	5e                   	pop    esi
c000624c:	5f                   	pop    edi
c000624d:	5d                   	pop    ebp
c000624e:	c3                   	ret    

c000624f <fncompare>:
c000624f:	55                   	push   ebp
c0006250:	57                   	push   edi
c0006251:	89 c7                	mov    edi,eax
c0006253:	56                   	push   esi
c0006254:	89 ce                	mov    esi,ecx
c0006256:	53                   	push   ebx
c0006257:	31 db                	xor    ebx,ebx
c0006259:	83 ec 1c             	sub    esp,0x1c
c000625c:	39 d3                	cmp    ebx,edx
c000625e:	7d 45                	jge    c00062a5 <fncompare+0x56>
c0006260:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006264:	83 f8 3b             	cmp    eax,0x3b
c0006267:	74 3c                	je     c00062a5 <fncompare+0x56>
c0006269:	83 f8 2e             	cmp    eax,0x2e
c000626c:	75 0e                	jne    c000627c <fncompare+0x2d>
c000626e:	8d 4a ff             	lea    ecx,[edx-0x1]
c0006271:	39 d9                	cmp    ecx,ebx
c0006273:	74 30                	je     c00062a5 <fncompare+0x56>
c0006275:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000627a:	74 29                	je     c00062a5 <fncompare+0x56>
c000627c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006280:	83 ec 0c             	sub    esp,0xc
c0006283:	50                   	push   eax
c0006284:	e8 c7 a6 ff ff       	call   c0000950 <tolower>
c0006289:	89 c5                	mov    ebp,eax
c000628b:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c000628f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006292:	e8 b9 a6 ff ff       	call   c0000950 <tolower>
c0006297:	83 c4 10             	add    esp,0x10
c000629a:	39 c5                	cmp    ebp,eax
c000629c:	75 1e                	jne    c00062bc <fncompare+0x6d>
c000629e:	43                   	inc    ebx
c000629f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062a3:	eb b7                	jmp    c000625c <fncompare+0xd>
c00062a5:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062a9:	85 d2                	test   edx,edx
c00062ab:	0f 95 c1             	setne  cl
c00062ae:	31 c0                	xor    eax,eax
c00062b0:	83 fa 2f             	cmp    edx,0x2f
c00062b3:	0f 95 c0             	setne  al
c00062b6:	21 c8                	and    eax,ecx
c00062b8:	f7 d8                	neg    eax
c00062ba:	eb 03                	jmp    c00062bf <fncompare+0x70>
c00062bc:	83 c8 ff             	or     eax,0xffffffff
c00062bf:	83 c4 1c             	add    esp,0x1c
c00062c2:	5b                   	pop    ebx
c00062c3:	5e                   	pop    esi
c00062c4:	5f                   	pop    edi
c00062c5:	5d                   	pop    ebp
c00062c6:	c3                   	ret    

c00062c7 <bclear_cache>:
c00062c7:	83 ec 18             	sub    esp,0x18
c00062ca:	68 a0 fa 02 c0       	push   0xc002faa0
c00062cf:	e8 78 30 02 00       	call   c002934c <iso_kprintf>
c00062d4:	83 c4 10             	add    esp,0x10
c00062d7:	31 c0                	xor    eax,eax
c00062d9:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c00062e0:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00062e6:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c00062ed:	40                   	inc    eax
c00062ee:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00062f4:	83 f8 10             	cmp    eax,0x10
c00062f7:	75 e0                	jne    c00062d9 <bclear_cache+0x12>
c00062f9:	83 c4 0c             	add    esp,0xc
c00062fc:	c3                   	ret    

c00062fd <bclear>:
c00062fd:	eb c8                	jmp    c00062c7 <bclear_cache>

c00062ff <iso_break_all>:
c00062ff:	83 ec 18             	sub    esp,0x18
c0006302:	68 ae fa 02 c0       	push   0xc002faae
c0006307:	e8 40 30 02 00       	call   c002934c <iso_kprintf>
c000630c:	83 c4 10             	add    esp,0x10
c000630f:	31 c0                	xor    eax,eax
c0006311:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c000631b:	05 94 00 00 00       	add    eax,0x94
c0006320:	3d 40 09 00 00       	cmp    eax,0x940
c0006325:	75 ea                	jne    c0006311 <iso_break_all+0x12>
c0006327:	83 c4 0c             	add    esp,0xc
c000632a:	c3                   	ret    

c000632b <isoReadDiscSector>:
c000632b:	83 ec 0c             	sub    esp,0xc
c000632e:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c0006335:	50                   	push   eax
c0006336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000633a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000633e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006342:	e8 a9 2f 02 00       	call   c00292f0 <isoReadDiscSectorHelper>
c0006347:	83 c4 1c             	add    esp,0x1c
c000634a:	c3                   	ret    

c000634b <bread_cache>:
c000634b:	55                   	push   ebp
c000634c:	57                   	push   edi
c000634d:	89 d7                	mov    edi,edx
c000634f:	56                   	push   esi
c0006350:	ba 0f 00 00 00       	mov    edx,0xf
c0006355:	53                   	push   ebx
c0006356:	89 c6                	mov    esi,eax
c0006358:	83 ec 0c             	sub    esp,0xc
c000635b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000635e:	39 38                	cmp    DWORD PTR [eax],edi
c0006360:	74 3c                	je     c000639e <bread_cache+0x53>
c0006362:	4a                   	dec    edx
c0006363:	83 fa ff             	cmp    edx,0xffffffff
c0006366:	75 f3                	jne    c000635b <bread_cache+0x10>
c0006368:	31 db                	xor    ebx,ebx
c000636a:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c000636d:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0006370:	74 08                	je     c000637a <bread_cache+0x2f>
c0006372:	43                   	inc    ebx
c0006373:	83 fb 10             	cmp    ebx,0x10
c0006376:	75 f2                	jne    c000636a <bread_cache+0x1f>
c0006378:	31 db                	xor    ebx,ebx
c000637a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000637d:	50                   	push   eax
c000637e:	6a 01                	push   0x1
c0006380:	57                   	push   edi
c0006381:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006384:	83 c0 04             	add    eax,0x4
c0006387:	50                   	push   eax
c0006388:	e8 9e ff ff ff       	call   c000632b <isoReadDiscSector>
c000638d:	83 c4 10             	add    esp,0x10
c0006390:	83 c9 ff             	or     ecx,0xffffffff
c0006393:	85 c0                	test   eax,eax
c0006395:	78 13                	js     c00063aa <bread_cache+0x5f>
c0006397:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000639a:	89 da                	mov    edx,ebx
c000639c:	89 38                	mov    DWORD PTR [eax],edi
c000639e:	89 f0                	mov    eax,esi
c00063a0:	e8 0f fe ff ff       	call   c00061b4 <bgrad_cache>
c00063a5:	b9 0f 00 00 00       	mov    ecx,0xf
c00063aa:	83 c4 0c             	add    esp,0xc
c00063ad:	89 c8                	mov    eax,ecx
c00063af:	5b                   	pop    ebx
c00063b0:	5e                   	pop    esi
c00063b1:	5f                   	pop    edi
c00063b2:	5d                   	pop    ebp
c00063b3:	c3                   	ret    

c00063b4 <biread>:
c00063b4:	89 c2                	mov    edx,eax
c00063b6:	b8 80 60 03 c0       	mov    eax,0xc0036080
c00063bb:	eb 8e                	jmp    c000634b <bread_cache>

c00063bd <bdread>:
c00063bd:	89 c2                	mov    edx,eax
c00063bf:	b8 20 60 03 c0       	mov    eax,0xc0036020
c00063c4:	eb 85                	jmp    c000634b <bread_cache>

c00063c6 <strnicmp>:
c00063c6:	55                   	push   ebp
c00063c7:	57                   	push   edi
c00063c8:	31 ff                	xor    edi,edi
c00063ca:	56                   	push   esi
c00063cb:	53                   	push   ebx
c00063cc:	83 ec 0c             	sub    esp,0xc
c00063cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00063d3:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c00063d7:	74 43                	je     c000641c <strnicmp+0x56>
c00063d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00063dd:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c00063e1:	85 c0                	test   eax,eax
c00063e3:	74 37                	je     c000641c <strnicmp+0x56>
c00063e5:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c00063e9:	85 d2                	test   edx,edx
c00063eb:	74 2f                	je     c000641c <strnicmp+0x56>
c00063ed:	39 d0                	cmp    eax,edx
c00063ef:	8d 6f 01             	lea    ebp,[edi+0x1]
c00063f2:	75 04                	jne    c00063f8 <strnicmp+0x32>
c00063f4:	89 ef                	mov    edi,ebp
c00063f6:	eb db                	jmp    c00063d3 <strnicmp+0xd>
c00063f8:	83 ec 0c             	sub    esp,0xc
c00063fb:	50                   	push   eax
c00063fc:	e8 4f a5 ff ff       	call   c0000950 <tolower>
c0006401:	89 c3                	mov    ebx,eax
c0006403:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006407:	89 ef                	mov    edi,ebp
c0006409:	89 04 24             	mov    DWORD PTR [esp],eax
c000640c:	e8 3f a5 ff ff       	call   c0000950 <tolower>
c0006411:	83 c4 10             	add    esp,0x10
c0006414:	29 c3                	sub    ebx,eax
c0006416:	89 d8                	mov    eax,ebx
c0006418:	74 b9                	je     c00063d3 <strnicmp+0xd>
c000641a:	eb 02                	jmp    c000641e <strnicmp+0x58>
c000641c:	31 c0                	xor    eax,eax
c000641e:	83 c4 0c             	add    esp,0xc
c0006421:	5b                   	pop    ebx
c0006422:	5e                   	pop    esi
c0006423:	5f                   	pop    edi
c0006424:	5d                   	pop    ebp
c0006425:	c3                   	ret    

c0006426 <find_object>:
c0006426:	55                   	push   ebp
c0006427:	57                   	push   edi
c0006428:	89 c7                	mov    edi,eax
c000642a:	56                   	push   esi
c000642b:	53                   	push   ebx
c000642c:	89 d3                	mov    ebx,edx
c000642e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006434:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000643b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000643f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006443:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c000644a:	74 0b                	je     c0006457 <find_object+0x31>
c000644c:	89 fa                	mov    edx,edi
c000644e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006452:	e8 89 fc ff ff       	call   c00060e0 <utf2ucs>
c0006457:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000645a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000645e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006463:	7e 11                	jle    c0006476 <find_object+0x50>
c0006465:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006469:	e8 46 ff ff ff       	call   c00063b4 <biread>
c000646e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006472:	85 c0                	test   eax,eax
c0006474:	79 07                	jns    c000647d <find_object+0x57>
c0006476:	31 db                	xor    ebx,ebx
c0006478:	e9 56 01 00 00       	jmp    c00065d3 <find_object+0x1ad>
c000647d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006485:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006489:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000648d:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006494:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006498:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c000649b:	85 f6                	test   esi,esi
c000649d:	75 0e                	jne    c00064ad <find_object+0x87>
c000649f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064a3:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064ab:	eb b1                	jmp    c000645e <find_object+0x38>
c00064ad:	8b 2d 94 76 03 c0    	mov    ebp,DWORD PTR ds:0xc0037694
c00064b3:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064b7:	85 ed                	test   ebp,ebp
c00064b9:	89 c8                	mov    eax,ecx
c00064bb:	74 2b                	je     c00064e8 <find_object+0xc2>
c00064bd:	8d 43 21             	lea    eax,[ebx+0x21]
c00064c0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064c4:	e8 07 fd ff ff       	call   c00061d0 <ucscompare>
c00064c9:	85 c0                	test   eax,eax
c00064cb:	0f 84 bf 00 00 00    	je     c0006590 <find_object+0x16a>
c00064d1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00064d4:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c00064d8:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c00064e0:	0f 8e da 00 00 00    	jle    c00065c0 <find_object+0x19a>
c00064e6:	eb b7                	jmp    c000649f <find_object+0x79>
c00064e8:	29 ce                	sub    esi,ecx
c00064ea:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c00064ee:	a8 01                	test   al,0x1
c00064f0:	74 05                	je     c00064f7 <find_object+0xd1>
c00064f2:	83 ee 21             	sub    esi,0x21
c00064f5:	eb 5a                	jmp    c0006551 <find_object+0x12b>
c00064f7:	42                   	inc    edx
c00064f8:	83 ee 22             	sub    esi,0x22
c00064fb:	eb 54                	jmp    c0006551 <find_object+0x12b>
c00064fd:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006500:	48                   	dec    eax
c0006501:	3c 01                	cmp    al,0x1
c0006503:	77 51                	ja     c0006556 <find_object+0x130>
c0006505:	50                   	push   eax
c0006506:	6a 02                	push   0x2
c0006508:	68 bd fa 02 c0       	push   0xc002fabd
c000650d:	52                   	push   edx
c000650e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006512:	e8 c9 a2 ff ff       	call   c00007e0 <strncmp>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	85 c0                	test   eax,eax
c000651c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006520:	75 27                	jne    c0006549 <find_object+0x123>
c0006522:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006526:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006529:	50                   	push   eax
c000652a:	8d 42 05             	lea    eax,[edx+0x5]
c000652d:	55                   	push   ebp
c000652e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006532:	50                   	push   eax
c0006533:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006537:	50                   	push   eax
c0006538:	e8 43 a1 ff ff       	call   c0000680 <strncpy>
c000653d:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006542:	83 c4 10             	add    esp,0x10
c0006545:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006549:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000654d:	29 c6                	sub    esi,eax
c000654f:	01 c2                	add    edx,eax
c0006551:	83 fe 03             	cmp    esi,0x3
c0006554:	7f a7                	jg     c00064fd <find_object+0xd7>
c0006556:	85 ed                	test   ebp,ebp
c0006558:	7e 40                	jle    c000659a <find_object+0x174>
c000655a:	51                   	push   ecx
c000655b:	51                   	push   ecx
c000655c:	6a 2f                	push   0x2f
c000655e:	57                   	push   edi
c000655f:	e8 3c a2 ff ff       	call   c00007a0 <strchr>
c0006564:	83 c4 10             	add    esp,0x10
c0006567:	85 c0                	test   eax,eax
c0006569:	74 04                	je     c000656f <find_object+0x149>
c000656b:	29 f8                	sub    eax,edi
c000656d:	eb 0c                	jmp    c000657b <find_object+0x155>
c000656f:	83 ec 0c             	sub    esp,0xc
c0006572:	57                   	push   edi
c0006573:	e8 f8 9f ff ff       	call   c0000570 <strlen>
c0006578:	83 c4 10             	add    esp,0x10
c000657b:	52                   	push   edx
c000657c:	50                   	push   eax
c000657d:	57                   	push   edi
c000657e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006582:	50                   	push   eax
c0006583:	e8 3e fe ff ff       	call   c00063c6 <strnicmp>
c0006588:	83 c4 10             	add    esp,0x10
c000658b:	e9 39 ff ff ff       	jmp    c00064c9 <find_object+0xa3>
c0006590:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006594:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c0006598:	eb 1e                	jmp    c00065b8 <find_object+0x192>
c000659a:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000659e:	8d 43 21             	lea    eax,[ebx+0x21]
c00065a1:	89 f9                	mov    ecx,edi
c00065a3:	e8 a7 fc ff ff       	call   c000624f <fncompare>
c00065a8:	85 c0                	test   eax,eax
c00065aa:	0f 85 21 ff ff ff    	jne    c00064d1 <find_object+0xab>
c00065b0:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065b4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065b8:	0f 85 13 ff ff ff    	jne    c00064d1 <find_object+0xab>
c00065be:	eb 13                	jmp    c00065d3 <find_object+0x1ad>
c00065c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065c4:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065c8:	0f 8f b7 fe ff ff    	jg     c0006485 <find_object+0x5f>
c00065ce:	e9 cc fe ff ff       	jmp    c000649f <find_object+0x79>
c00065d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00065d9:	89 d8                	mov    eax,ebx
c00065db:	5b                   	pop    ebx
c00065dc:	5e                   	pop    esi
c00065dd:	5f                   	pop    edi
c00065de:	5d                   	pop    ebp
c00065df:	c3                   	ret    

c00065e0 <find_object_path>:
c00065e0:	55                   	push   ebp
c00065e1:	57                   	push   edi
c00065e2:	89 d7                	mov    edi,edx
c00065e4:	56                   	push   esi
c00065e5:	89 c6                	mov    esi,eax
c00065e7:	53                   	push   ebx
c00065e8:	89 cb                	mov    ebx,ecx
c00065ea:	83 ec 0c             	sub    esp,0xc
c00065ed:	50                   	push   eax
c00065ee:	50                   	push   eax
c00065ef:	6a 2f                	push   0x2f
c00065f1:	56                   	push   esi
c00065f2:	e8 a9 a1 ff ff       	call   c00007a0 <strchr>
c00065f7:	83 c4 10             	add    esp,0x10
c00065fa:	89 c5                	mov    ebp,eax
c00065fc:	85 c0                	test   eax,eax
c00065fe:	74 3a                	je     c000663a <find_object_path+0x5a>
c0006600:	39 ee                	cmp    esi,ebp
c0006602:	74 31                	je     c0006635 <find_object_path+0x55>
c0006604:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006607:	e8 a6 fb ff ff       	call   c00061b2 <iso_733>
c000660c:	89 c2                	mov    edx,eax
c000660e:	8d 43 02             	lea    eax,[ebx+0x2]
c0006611:	e8 9c fb ff ff       	call   c00061b2 <iso_733>
c0006616:	83 ec 0c             	sub    esp,0xc
c0006619:	89 c1                	mov    ecx,eax
c000661b:	52                   	push   edx
c000661c:	89 f0                	mov    eax,esi
c000661e:	ba 01 00 00 00       	mov    edx,0x1
c0006623:	e8 fe fd ff ff       	call   c0006426 <find_object>
c0006628:	83 c4 10             	add    esp,0x10
c000662b:	89 c3                	mov    ebx,eax
c000662d:	85 c0                	test   eax,eax
c000662f:	75 04                	jne    c0006635 <find_object_path+0x55>
c0006631:	31 db                	xor    ebx,ebx
c0006633:	eb 36                	jmp    c000666b <find_object_path+0x8b>
c0006635:	8d 75 01             	lea    esi,[ebp+0x1]
c0006638:	eb b3                	jmp    c00065ed <find_object_path+0xd>
c000663a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000663d:	74 28                	je     c0006667 <find_object_path+0x87>
c000663f:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006642:	e8 6b fb ff ff       	call   c00061b2 <iso_733>
c0006647:	89 c2                	mov    edx,eax
c0006649:	8d 43 02             	lea    eax,[ebx+0x2]
c000664c:	e8 61 fb ff ff       	call   c00061b2 <iso_733>
c0006651:	83 ec 0c             	sub    esp,0xc
c0006654:	89 c1                	mov    ecx,eax
c0006656:	52                   	push   edx
c0006657:	89 f0                	mov    eax,esi
c0006659:	89 fa                	mov    edx,edi
c000665b:	e8 c6 fd ff ff       	call   c0006426 <find_object>
c0006660:	83 c4 10             	add    esp,0x10
c0006663:	89 c3                	mov    ebx,eax
c0006665:	eb 04                	jmp    c000666b <find_object_path+0x8b>
c0006667:	85 ff                	test   edi,edi
c0006669:	74 c6                	je     c0006631 <find_object_path+0x51>
c000666b:	83 c4 0c             	add    esp,0xc
c000666e:	89 d8                	mov    eax,ebx
c0006670:	5b                   	pop    ebx
c0006671:	5e                   	pop    esi
c0006672:	5f                   	pop    edi
c0006673:	5d                   	pop    ebp
c0006674:	c3                   	ret    

c0006675 <stricmp>:
c0006675:	57                   	push   edi
c0006676:	56                   	push   esi
c0006677:	31 f6                	xor    esi,esi
c0006679:	53                   	push   ebx
c000667a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000667e:	83 ec 0c             	sub    esp,0xc
c0006681:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006685:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006689:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000668d:	50                   	push   eax
c000668e:	e8 9d a2 ff ff       	call   c0000930 <toupper>
c0006693:	89 04 24             	mov    DWORD PTR [esp],eax
c0006696:	e8 b5 a2 ff ff       	call   c0000950 <tolower>
c000669b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000669e:	89 c3                	mov    ebx,eax
c00066a0:	e8 8b a2 ff ff       	call   c0000930 <toupper>
c00066a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00066a8:	e8 a3 a2 ff ff       	call   c0000950 <tolower>
c00066ad:	83 c4 10             	add    esp,0x10
c00066b0:	39 c3                	cmp    ebx,eax
c00066b2:	75 05                	jne    c00066b9 <stricmp+0x44>
c00066b4:	46                   	inc    esi
c00066b5:	85 db                	test   ebx,ebx
c00066b7:	75 c1                	jne    c000667a <stricmp+0x5>
c00066b9:	29 c3                	sub    ebx,eax
c00066bb:	89 d8                	mov    eax,ebx
c00066bd:	5b                   	pop    ebx
c00066be:	5e                   	pop    esi
c00066bf:	5f                   	pop    edi
c00066c0:	c3                   	ret    

c00066c1 <iso_open>:
c00066c1:	57                   	push   edi
c00066c2:	31 c0                	xor    eax,eax
c00066c4:	56                   	push   esi
c00066c5:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c00066ca:	53                   	push   ebx
c00066cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00066d0:	0f 95 c0             	setne  al
c00066d3:	89 c2                	mov    edx,eax
c00066d5:	89 c6                	mov    esi,eax
c00066d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00066db:	e8 00 ff ff ff       	call   c00065e0 <find_object_path>
c00066e0:	83 ca ff             	or     edx,0xffffffff
c00066e3:	85 c0                	test   eax,eax
c00066e5:	74 5e                	je     c0006745 <iso_open+0x84>
c00066e7:	89 c1                	mov    ecx,eax
c00066e9:	31 d2                	xor    edx,edx
c00066eb:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c00066f1:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c00066f8:	75 42                	jne    c000673c <iso_open+0x7b>
c00066fa:	8d 41 02             	lea    eax,[ecx+0x2]
c00066fd:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006707:	e8 a6 fa ff ff       	call   c00061b2 <iso_733>
c000670c:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c0006712:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c0006718:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c0006722:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006725:	e8 88 fa ff ff       	call   c00061b2 <iso_733>
c000672a:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006734:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c000673a:	eb 09                	jmp    c0006745 <iso_open+0x84>
c000673c:	42                   	inc    edx
c000673d:	83 fa 10             	cmp    edx,0x10
c0006740:	75 a9                	jne    c00066eb <iso_open+0x2a>
c0006742:	83 ca ff             	or     edx,0xffffffff
c0006745:	5b                   	pop    ebx
c0006746:	89 d0                	mov    eax,edx
c0006748:	5e                   	pop    esi
c0006749:	5f                   	pop    edi
c000674a:	c3                   	ret    

c000674b <iso_close>:
c000674b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000674f:	83 f8 0f             	cmp    eax,0xf
c0006752:	7f 10                	jg     c0006764 <iso_close+0x19>
c0006754:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000675a:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c0006764:	e9 5e fb ff ff       	jmp    c00062c7 <bclear_cache>

c0006769 <iso_read>:
c0006769:	55                   	push   ebp
c000676a:	57                   	push   edi
c000676b:	56                   	push   esi
c000676c:	53                   	push   ebx
c000676d:	83 ec 1c             	sub    esp,0x1c
c0006770:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006774:	83 fd 0f             	cmp    ebp,0xf
c0006777:	7e 0a                	jle    c0006783 <iso_read+0x1a>
c0006779:	83 c8 ff             	or     eax,0xffffffff
c000677c:	89 c2                	mov    edx,eax
c000677e:	e9 f4 00 00 00       	jmp    c0006877 <iso_read+0x10e>
c0006783:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006789:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006790:	74 e7                	je     c0006779 <iso_read+0x10>
c0006792:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006798:	85 d2                	test   edx,edx
c000679a:	75 dd                	jne    c0006779 <iso_read+0x10>
c000679c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067a1:	0f 84 cd 00 00 00    	je     c0006874 <iso_read+0x10b>
c00067a7:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00067ad:	8b 8d 2c 6d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc92d4]
c00067b3:	29 c1                	sub    ecx,eax
c00067b5:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067b9:	76 04                	jbe    c00067bf <iso_read+0x56>
c00067bb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067bf:	85 c9                	test   ecx,ecx
c00067c1:	0f 84 ad 00 00 00    	je     c0006874 <iso_read+0x10b>
c00067c7:	89 c6                	mov    esi,eax
c00067c9:	bb 00 08 00 00       	mov    ebx,0x800
c00067ce:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00067d4:	c1 e8 0b             	shr    eax,0xb
c00067d7:	29 f3                	sub    ebx,esi
c00067d9:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c00067df:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00067e5:	7e 3f                	jle    c0006826 <iso_read+0xbd>
c00067e7:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00067ed:	75 37                	jne    c0006826 <iso_read+0xbd>
c00067ef:	be 20 00 00 00       	mov    esi,0x20
c00067f4:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00067fa:	7f 05                	jg     c0006801 <iso_read+0x98>
c00067fc:	89 ce                	mov    esi,ecx
c00067fe:	c1 fe 0b             	sar    esi,0xb
c0006801:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006805:	89 f3                	mov    ebx,esi
c0006807:	c1 e3 0b             	shl    ebx,0xb
c000680a:	52                   	push   edx
c000680b:	56                   	push   esi
c000680c:	50                   	push   eax
c000680d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006811:	e8 15 fb ff ff       	call   c000632b <isoReadDiscSector>
c0006816:	83 c4 10             	add    esp,0x10
c0006819:	85 c0                	test   eax,eax
c000681b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000681f:	7f 3e                	jg     c000685f <iso_read+0xf6>
c0006821:	e9 53 ff ff ff       	jmp    c0006779 <iso_read+0x10>
c0006826:	39 cb                	cmp    ebx,ecx
c0006828:	7e 02                	jle    c000682c <iso_read+0xc3>
c000682a:	89 cb                	mov    ebx,ecx
c000682c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006830:	e8 88 fb ff ff       	call   c00063bd <bdread>
c0006835:	85 c0                	test   eax,eax
c0006837:	0f 88 3c ff ff ff    	js     c0006779 <iso_read+0x10>
c000683d:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006844:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006848:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000684e:	25 ff 07 00 00       	and    eax,0x7ff
c0006853:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006857:	89 d9                	mov    ecx,ebx
c0006859:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000685b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000685f:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006863:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006869:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c000686d:	01 da                	add    edx,ebx
c000686f:	e9 28 ff ff ff       	jmp    c000679c <iso_read+0x33>
c0006874:	89 d0                	mov    eax,edx
c0006876:	99                   	cdq    
c0006877:	83 c4 1c             	add    esp,0x1c
c000687a:	5b                   	pop    ebx
c000687b:	5e                   	pop    esi
c000687c:	5f                   	pop    edi
c000687d:	5d                   	pop    ebp
c000687e:	c3                   	ret    

c000687f <iso_seek>:
c000687f:	55                   	push   ebp
c0006880:	83 c8 ff             	or     eax,0xffffffff
c0006883:	57                   	push   edi
c0006884:	89 c2                	mov    edx,eax
c0006886:	56                   	push   esi
c0006887:	53                   	push   ebx
c0006888:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000688c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006890:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006894:	83 fe 0f             	cmp    esi,0xf
c0006897:	7f 65                	jg     c00068fe <iso_seek+0x7f>
c0006899:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000689f:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c00068a5:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00068ac:	74 50                	je     c00068fe <iso_seek+0x7f>
c00068ae:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068b5:	75 47                	jne    c00068fe <iso_seek+0x7f>
c00068b7:	83 fb 01             	cmp    ebx,0x1
c00068ba:	74 0e                	je     c00068ca <iso_seek+0x4b>
c00068bc:	83 fb 02             	cmp    ebx,0x2
c00068bf:	74 0e                	je     c00068cf <iso_seek+0x50>
c00068c1:	85 db                	test   ebx,ebx
c00068c3:	75 39                	jne    c00068fe <iso_seek+0x7f>
c00068c5:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068c8:	eb 0d                	jmp    c00068d7 <iso_seek+0x58>
c00068ca:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00068cd:	eb 08                	jmp    c00068d7 <iso_seek+0x58>
c00068cf:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00068d2:	01 f8                	add    eax,edi
c00068d4:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00068d7:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00068dd:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c00068e3:	05 20 6d 03 c0       	add    eax,0xc0036d20
c00068e8:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00068eb:	76 03                	jbe    c00068f0 <iso_seek+0x71>
c00068ed:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00068f0:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00068f6:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c00068fc:	31 d2                	xor    edx,edx
c00068fe:	5b                   	pop    ebx
c00068ff:	5e                   	pop    esi
c0006900:	5f                   	pop    edi
c0006901:	5d                   	pop    ebp
c0006902:	c3                   	ret    

c0006903 <iso_tell>:
c0006903:	83 c8 ff             	or     eax,0xffffffff
c0006906:	53                   	push   ebx
c0006907:	89 c2                	mov    edx,eax
c0006909:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000690d:	83 f9 0f             	cmp    ecx,0xf
c0006910:	7f 20                	jg     c0006932 <iso_tell+0x2f>
c0006912:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006918:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c000691f:	74 11                	je     c0006932 <iso_tell+0x2f>
c0006921:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006928:	75 08                	jne    c0006932 <iso_tell+0x2f>
c000692a:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	c3                   	ret    

c0006934 <iso_total>:
c0006934:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006938:	83 c8 ff             	or     eax,0xffffffff
c000693b:	83 fa 0f             	cmp    edx,0xf
c000693e:	7f 1e                	jg     c000695e <iso_total+0x2a>
c0006940:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006946:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c000694d:	74 0f                	je     c000695e <iso_total+0x2a>
c000694f:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006956:	75 06                	jne    c000695e <iso_total+0x2a>
c0006958:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c000695e:	c3                   	ret    

c000695f <fn_postprocess>:
c000695f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006963:	89 d0                	mov    eax,edx
c0006965:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006968:	83 f9 3b             	cmp    ecx,0x3b
c000696b:	74 07                	je     c0006974 <fn_postprocess+0x15>
c000696d:	85 c9                	test   ecx,ecx
c000696f:	74 03                	je     c0006974 <fn_postprocess+0x15>
c0006971:	40                   	inc    eax
c0006972:	eb f1                	jmp    c0006965 <fn_postprocess+0x6>
c0006974:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006977:	39 d0                	cmp    eax,edx
c0006979:	76 0a                	jbe    c0006985 <fn_postprocess+0x26>
c000697b:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000697f:	75 04                	jne    c0006985 <fn_postprocess+0x26>
c0006981:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006985:	c3                   	ret    

c0006986 <iso_readdir>:
c0006986:	55                   	push   ebp
c0006987:	57                   	push   edi
c0006988:	56                   	push   esi
c0006989:	53                   	push   ebx
c000698a:	83 ec 1c             	sub    esp,0x1c
c000698d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006991:	83 fb 0f             	cmp    ebx,0xf
c0006994:	7f 28                	jg     c00069be <iso_readdir+0x38>
c0006996:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699c:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c00069a2:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c00069a9:	74 13                	je     c00069be <iso_readdir+0x38>
c00069ab:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069af:	74 0d                	je     c00069be <iso_readdir+0x38>
c00069b1:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069b8:	0f 84 b1 00 00 00    	je     c0006a6f <iso_readdir+0xe9>
c00069be:	83 ec 0c             	sub    esp,0xc
c00069c1:	68 c0 fa 02 c0       	push   0xc002fac0
c00069c6:	e8 81 29 02 00       	call   c002934c <iso_kprintf>
c00069cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00069ce:	e8 95 29 02 00       	call   c0029368 <iso_kprintfd>
c00069d3:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069d9:	c7 04 24 c5 fa 02 c0 	mov    DWORD PTR [esp],0xc002fac5
c00069e0:	e8 67 29 02 00       	call   c002934c <iso_kprintf>
c00069e5:	5d                   	pop    ebp
c00069e6:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c00069ec:	e8 77 29 02 00       	call   c0029368 <iso_kprintfd>
c00069f1:	c7 04 24 cb fa 02 c0 	mov    DWORD PTR [esp],0xc002facb
c00069f8:	e8 4f 29 02 00       	call   c002934c <iso_kprintf>
c00069fd:	58                   	pop    eax
c00069fe:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006a04:	e8 5f 29 02 00       	call   c0029368 <iso_kprintfd>
c0006a09:	c7 04 24 d1 fa 02 c0 	mov    DWORD PTR [esp],0xc002fad1
c0006a10:	e8 37 29 02 00       	call   c002934c <iso_kprintf>
c0006a15:	58                   	pop    eax
c0006a16:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006a1c:	e8 47 29 02 00       	call   c0029368 <iso_kprintfd>
c0006a21:	83 c4 10             	add    esp,0x10
c0006a24:	eb 42                	jmp    c0006a68 <iso_readdir+0xe2>
c0006a26:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a29:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006a30:	89 d1                	mov    ecx,edx
c0006a32:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a38:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a3c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a3f:	75 35                	jne    c0006a76 <iso_readdir+0xf0>
c0006a41:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a47:	81 c2 00 08 00 00    	add    edx,0x800
c0006a4d:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a50:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a53:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a56:	73 1e                	jae    c0006a76 <iso_readdir+0xf0>
c0006a58:	c1 ea 0b             	shr    edx,0xb
c0006a5b:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a5d:	01 d0                	add    eax,edx
c0006a5f:	e8 50 f9 ff ff       	call   c00063b4 <biread>
c0006a64:	85 c0                	test   eax,eax
c0006a66:	79 be                	jns    c0006a26 <iso_readdir+0xa0>
c0006a68:	31 c0                	xor    eax,eax
c0006a6a:	e9 66 01 00 00       	jmp    c0006bd5 <iso_readdir+0x24f>
c0006a6f:	31 f6                	xor    esi,esi
c0006a71:	83 c8 ff             	or     eax,0xffffffff
c0006a74:	eb da                	jmp    c0006a50 <iso_readdir+0xca>
c0006a76:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006a7c:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006a82:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006a88:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006a8b:	73 db                	jae    c0006a68 <iso_readdir+0xe2>
c0006a8d:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006a91:	75 34                	jne    c0006ac7 <iso_readdir+0x141>
c0006a93:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006a97:	75 2e                	jne    c0006ac7 <iso_readdir+0x141>
c0006a99:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006a9c:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006aa3:	01 f9                	add    ecx,edi
c0006aa5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006aa8:	89 c8                	mov    eax,ecx
c0006aaa:	25 ff 07 00 00       	and    eax,0x7ff
c0006aaf:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ab4:	01 c8                	add    eax,ecx
c0006ab6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006ab9:	25 ff 07 00 00       	and    eax,0x7ff
c0006abe:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006ac2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006ac5:	74 a1                	je     c0006a68 <iso_readdir+0xe2>
c0006ac7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006acd:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006ad1:	8d 56 21             	lea    edx,[esi+0x21]
c0006ad4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ad8:	8d a8 38 6d 03 c0    	lea    ebp,[eax-0x3ffc92c8]
c0006ade:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006ae5:	74 0c                	je     c0006af3 <iso_readdir+0x16d>
c0006ae7:	89 e8                	mov    eax,ebp
c0006ae9:	e8 14 f6 ff ff       	call   c0006102 <ucs2utfn>
c0006aee:	e9 a6 00 00 00       	jmp    c0006b99 <iso_readdir+0x213>
c0006af3:	57                   	push   edi
c0006af4:	51                   	push   ecx
c0006af5:	52                   	push   edx
c0006af6:	55                   	push   ebp
c0006af7:	e8 84 9b ff ff       	call   c0000680 <strncpy>
c0006afc:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b00:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b06:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b09:	c6 84 01 38 6d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc92c8],0x0
c0006b11:	e8 49 fe ff ff       	call   c000695f <fn_postprocess>
c0006b16:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b1a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b1d:	83 c4 10             	add    esp,0x10
c0006b20:	29 d0                	sub    eax,edx
c0006b22:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b26:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b2a:	74 05                	je     c0006b31 <iso_readdir+0x1ab>
c0006b2c:	83 e8 21             	sub    eax,0x21
c0006b2f:	eb 04                	jmp    c0006b35 <iso_readdir+0x1af>
c0006b31:	47                   	inc    edi
c0006b32:	83 e8 22             	sub    eax,0x22
c0006b35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b39:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b43:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b48:	7e 4f                	jle    c0006b99 <iso_readdir+0x213>
c0006b4a:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b4d:	48                   	dec    eax
c0006b4e:	3c 01                	cmp    al,0x1
c0006b50:	77 47                	ja     c0006b99 <iso_readdir+0x213>
c0006b52:	52                   	push   edx
c0006b53:	6a 02                	push   0x2
c0006b55:	68 bd fa 02 c0       	push   0xc002fabd
c0006b5a:	57                   	push   edi
c0006b5b:	e8 80 9c ff ff       	call   c00007e0 <strncmp>
c0006b60:	83 c4 10             	add    esp,0x10
c0006b63:	85 c0                	test   eax,eax
c0006b65:	75 26                	jne    c0006b8d <iso_readdir+0x207>
c0006b67:	50                   	push   eax
c0006b68:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b6c:	83 e8 05             	sub    eax,0x5
c0006b6f:	50                   	push   eax
c0006b70:	8d 47 05             	lea    eax,[edi+0x5]
c0006b73:	50                   	push   eax
c0006b74:	55                   	push   ebp
c0006b75:	e8 06 9b ff ff       	call   c0000680 <strncpy>
c0006b7a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006b7e:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b82:	83 c4 10             	add    esp,0x10
c0006b85:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006b8d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006b91:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006b95:	01 c7                	add    edi,eax
c0006b97:	eb aa                	jmp    c0006b43 <iso_readdir+0x1bd>
c0006b99:	83 c8 ff             	or     eax,0xffffffff
c0006b9c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006ba0:	89 c2                	mov    edx,eax
c0006ba2:	75 0a                	jne    c0006bae <iso_readdir+0x228>
c0006ba4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006ba7:	e8 06 f6 ff ff       	call   c00061b2 <iso_733>
c0006bac:	31 d2                	xor    edx,edx
c0006bae:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006bb4:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006bba:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006bc0:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006bc6:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bc9:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006bd0:	05 30 6d 03 c0       	add    eax,0xc0036d30
c0006bd5:	83 c4 1c             	add    esp,0x1c
c0006bd8:	5b                   	pop    ebx
c0006bd9:	5e                   	pop    esi
c0006bda:	5f                   	pop    edi
c0006bdb:	5d                   	pop    ebp
c0006bdc:	c3                   	ret    

c0006bdd <iso_reset>:
c0006bdd:	83 ec 18             	sub    esp,0x18
c0006be0:	68 da fa 02 c0       	push   0xc002fada
c0006be5:	e8 62 27 02 00       	call   c002934c <iso_kprintf>
c0006bea:	e8 10 f7 ff ff       	call   c00062ff <iso_break_all>
c0006bef:	e8 09 f7 ff ff       	call   c00062fd <bclear>
c0006bf4:	31 c0                	xor    eax,eax
c0006bf6:	83 c4 1c             	add    esp,0x1c
c0006bf9:	c3                   	ret    

c0006bfa <init_percd>:
c0006bfa:	57                   	push   edi
c0006bfb:	56                   	push   esi
c0006bfc:	53                   	push   ebx
c0006bfd:	bb 01 00 00 00       	mov    ebx,0x1
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006c0b:	e8 cd ff ff ff       	call   c0006bdd <iso_reset>
c0006c10:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006c1a:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006c1f:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c23:	e8 8c f7 ff ff       	call   c00063b4 <biread>
c0006c28:	89 c6                	mov    esi,eax
c0006c2a:	85 c0                	test   eax,eax
c0006c2c:	0f 88 ba 00 00 00    	js     c0006cec <init_percd+0xf2>
c0006c32:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006c39:	83 c0 04             	add    eax,0x4
c0006c3c:	52                   	push   edx
c0006c3d:	6a 06                	push   0x6
c0006c3f:	68 e5 fa 02 c0       	push   0xc002fae5
c0006c44:	50                   	push   eax
c0006c45:	e8 36 97 ff ff       	call   c0000380 <memcmp>
c0006c4a:	83 c4 10             	add    esp,0x10
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	74 08                	je     c0006c59 <init_percd+0x5f>
c0006c51:	43                   	inc    ebx
c0006c52:	83 fb 04             	cmp    ebx,0x4
c0006c55:	75 c3                	jne    c0006c1a <init_percd+0x20>
c0006c57:	eb 1a                	jmp    c0006c73 <init_percd+0x79>
c0006c59:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c60:	83 c0 5c             	add    eax,0x5c
c0006c63:	e8 17 f5 ff ff       	call   c000617f <isjoliet>
c0006c68:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006c6d:	85 c0                	test   eax,eax
c0006c6f:	74 e0                	je     c0006c51 <init_percd+0x57>
c0006c71:	eb 3e                	jmp    c0006cb1 <init_percd+0xb7>
c0006c73:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c7a:	75 35                	jne    c0006cb1 <init_percd+0xb7>
c0006c7c:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006c81:	83 c0 10             	add    eax,0x10
c0006c84:	e8 2b f7 ff ff       	call   c00063b4 <biread>
c0006c89:	89 c6                	mov    esi,eax
c0006c8b:	85 c0                	test   eax,eax
c0006c8d:	78 5f                	js     c0006cee <init_percd+0xf4>
c0006c8f:	83 cb ff             	or     ebx,0xffffffff
c0006c92:	50                   	push   eax
c0006c93:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c9a:	6a 06                	push   0x6
c0006c9c:	83 c0 04             	add    eax,0x4
c0006c9f:	68 ec fa 02 c0       	push   0xc002faec
c0006ca4:	50                   	push   eax
c0006ca5:	e8 d6 96 ff ff       	call   c0000380 <memcmp>
c0006caa:	83 c4 10             	add    esp,0x10
c0006cad:	85 c0                	test   eax,eax
c0006caf:	75 3d                	jne    c0006cee <init_percd+0xf4>
c0006cb1:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006cb8:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006cbd:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cc3:	b9 22 00 00 00       	mov    ecx,0x22
c0006cc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cca:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006ccf:	31 db                	xor    ebx,ebx
c0006cd1:	e8 dc f4 ff ff       	call   c00061b2 <iso_733>
c0006cd6:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006cdb:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006ce0:	e8 cd f4 ff ff       	call   c00061b2 <iso_733>
c0006ce5:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006cea:	eb 02                	jmp    c0006cee <init_percd+0xf4>
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	89 d8                	mov    eax,ebx
c0006cf0:	5b                   	pop    ebx
c0006cf1:	5e                   	pop    esi
c0006cf2:	5f                   	pop    edi
c0006cf3:	c3                   	ret    

c0006cf4 <iso_ioctl>:
c0006cf4:	83 ec 18             	sub    esp,0x18
c0006cf7:	68 f3 fa 02 c0       	push   0xc002faf3
c0006cfc:	e8 4b 26 02 00       	call   c002934c <iso_kprintf>
c0006d01:	e8 d7 fe ff ff       	call   c0006bdd <iso_reset>
c0006d06:	31 c0                	xor    eax,eax
c0006d08:	83 c4 1c             	add    esp,0x1c
c0006d0b:	c3                   	ret    

c0006d0c <fs_iso9660_init>:
c0006d0c:	53                   	push   ebx
c0006d0d:	31 db                	xor    ebx,ebx
c0006d0f:	83 ec 14             	sub    esp,0x14
c0006d12:	68 fe fa 02 c0       	push   0xc002fafe
c0006d17:	e8 30 26 02 00       	call   c002934c <iso_kprintf>
c0006d1c:	83 c4 0c             	add    esp,0xc
c0006d1f:	68 40 09 00 00       	push   0x940
c0006d24:	6a 00                	push   0x0
c0006d26:	68 20 6d 03 c0       	push   0xc0036d20
c0006d2b:	e8 c0 97 ff ff       	call   c00004f0 <memset>
c0006d30:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d37:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006d41:	e8 78 f6 00 00       	call   c00163be <malloc>
c0006d46:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d4d:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006d52:	e8 67 f6 00 00       	call   c00163be <malloc>
c0006d57:	83 c4 10             	add    esp,0x10
c0006d5a:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006d5f:	83 ec 0c             	sub    esp,0xc
c0006d62:	68 04 08 00 00       	push   0x804
c0006d67:	e8 52 f6 00 00       	call   c00163be <malloc>
c0006d6c:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006d73:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006d79:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006d80:	e8 39 f6 00 00       	call   c00163be <malloc>
c0006d85:	83 c4 10             	add    esp,0x10
c0006d88:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006d8f:	43                   	inc    ebx
c0006d90:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006d96:	83 fb 10             	cmp    ebx,0x10
c0006d99:	75 c4                	jne    c0006d5f <fs_iso9660_init+0x53>
c0006d9b:	31 c0                	xor    eax,eax
c0006d9d:	83 c4 08             	add    esp,0x8
c0006da0:	5b                   	pop    ebx
c0006da1:	c3                   	ret    

c0006da2 <fs_iso9660_shutdown>:
c0006da2:	53                   	push   ebx
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	83 ec 08             	sub    esp,0x8
c0006da8:	83 ec 0c             	sub    esp,0xc
c0006dab:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006db2:	e8 27 f6 00 00       	call   c00163de <free>
c0006db7:	58                   	pop    eax
c0006db8:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006dbf:	43                   	inc    ebx
c0006dc0:	e8 19 f6 00 00       	call   c00163de <free>
c0006dc5:	83 c4 10             	add    esp,0x10
c0006dc8:	83 fb 10             	cmp    ebx,0x10
c0006dcb:	75 db                	jne    c0006da8 <fs_iso9660_shutdown+0x6>
c0006dcd:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006dd2:	85 c0                	test   eax,eax
c0006dd4:	74 0c                	je     c0006de2 <fs_iso9660_shutdown+0x40>
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	50                   	push   eax
c0006dda:	e8 ff f5 00 00       	call   c00163de <free>
c0006ddf:	83 c4 10             	add    esp,0x10
c0006de2:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006de7:	85 c0                	test   eax,eax
c0006de9:	74 0c                	je     c0006df7 <fs_iso9660_shutdown+0x55>
c0006deb:	83 ec 0c             	sub    esp,0xc
c0006dee:	50                   	push   eax
c0006def:	e8 ea f5 00 00       	call   c00163de <free>
c0006df4:	83 c4 10             	add    esp,0x10
c0006df7:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006e01:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006e0b:	31 c0                	xor    eax,eax
c0006e0d:	83 c4 08             	add    esp,0x8
c0006e10:	5b                   	pop    ebx
c0006e11:	c3                   	ret    
c0006e12:	66 90                	xchg   ax,ax

c0006e14 <lwip_init>:
c0006e14:	83 ec 0c             	sub    esp,0xc
c0006e17:	e8 48 2c 00 00       	call   c0009a64 <stats_init>
c0006e1c:	e8 7b 9f ff ff       	call   c0000d9c <sys_init>
c0006e21:	e8 ae 01 00 00       	call   c0006fd4 <mem_init>
c0006e26:	e8 05 0a 00 00       	call   c0007830 <memp_init>
c0006e2b:	e8 e8 0c 00 00       	call   c0007b18 <netif_init>
c0006e30:	e8 07 9e ff ff       	call   c0000c3c <lwip_socket_init>
c0006e35:	e8 76 9d 00 00       	call   c0010bb0 <sys_timeouts_init>
c0006e3a:	90                   	nop
c0006e3b:	83 c4 0c             	add    esp,0xc
c0006e3e:	c3                   	ret    
c0006e3f:	90                   	nop

c0006e40 <plug_holes>:
c0006e40:	83 ec 1c             	sub    esp,0x1c
c0006e43:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e48:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e4c:	73 16                	jae    c0006e64 <plug_holes+0x24>
c0006e4e:	83 ec 08             	sub    esp,0x8
c0006e51:	68 0f fb 02 c0       	push   0xc002fb0f
c0006e56:	68 26 fb 02 c0       	push   0xc002fb26
c0006e5b:	e8 44 8d 01 00       	call   c001fba4 <CPrintf>
c0006e60:	83 c4 10             	add    esp,0x10
c0006e63:	90                   	nop
c0006e64:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e69:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e6d:	72 15                	jb     c0006e84 <plug_holes+0x44>
c0006e6f:	83 ec 08             	sub    esp,0x8
c0006e72:	68 33 fb 02 c0       	push   0xc002fb33
c0006e77:	68 26 fb 02 c0       	push   0xc002fb26
c0006e7c:	e8 23 8d 01 00       	call   c001fba4 <CPrintf>
c0006e81:	83 c4 10             	add    esp,0x10
c0006e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e88:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e8b:	0f b6 c0             	movzx  eax,al
c0006e8e:	85 c0                	test   eax,eax
c0006e90:	74 16                	je     c0006ea8 <plug_holes+0x68>
c0006e92:	83 ec 08             	sub    esp,0x8
c0006e95:	68 4d fb 02 c0       	push   0xc002fb4d
c0006e9a:	68 26 fb 02 c0       	push   0xc002fb26
c0006e9f:	e8 00 8d 01 00       	call   c001fba4 <CPrintf>
c0006ea4:	83 c4 10             	add    esp,0x10
c0006ea7:	90                   	nop
c0006ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eac:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006eaf:	0f b7 c0             	movzx  eax,ax
c0006eb2:	3d 40 06 00 00       	cmp    eax,0x640
c0006eb7:	76 17                	jbe    c0006ed0 <plug_holes+0x90>
c0006eb9:	83 ec 08             	sub    esp,0x8
c0006ebc:	68 e0 fb 02 c0       	push   0xc002fbe0
c0006ec1:	68 26 fb 02 c0       	push   0xc002fb26
c0006ec6:	e8 d9 8c 01 00       	call   c001fba4 <CPrintf>
c0006ecb:	83 c4 10             	add    esp,0x10
c0006ece:	66 90                	xchg   ax,ax
c0006ed0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eda:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006edd:	0f b7 c0             	movzx  eax,ax
c0006ee0:	01 d0                	add    eax,edx
c0006ee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eea:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006eee:	74 64                	je     c0006f54 <plug_holes+0x114>
c0006ef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ef4:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006ef7:	0f b6 c0             	movzx  eax,al
c0006efa:	85 c0                	test   eax,eax
c0006efc:	75 56                	jne    c0006f54 <plug_holes+0x114>
c0006efe:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f03:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f07:	74 4b                	je     c0006f54 <plug_holes+0x114>
c0006f09:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006f0e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f12:	75 0c                	jne    c0006f20 <plug_holes+0xe0>
c0006f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f18:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0006f20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f24:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006f2b:	66 89 02             	mov    WORD PTR [edx],ax
c0006f2e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006f37:	29 c2                	sub    edx,eax
c0006f39:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f43:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f46:	0f b7 c0             	movzx  eax,ax
c0006f49:	01 c1                	add    ecx,eax
c0006f4b:	89 d0                	mov    eax,edx
c0006f4d:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006f51:	8d 76 00             	lea    esi,[esi+0x0]
c0006f54:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f5e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006f62:	0f b7 c0             	movzx  eax,ax
c0006f65:	01 d0                	add    eax,edx
c0006f67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006f6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f6f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006f73:	74 57                	je     c0006fcc <plug_holes+0x18c>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006f7c:	0f b6 c0             	movzx  eax,al
c0006f7f:	85 c0                	test   eax,eax
c0006f81:	75 49                	jne    c0006fcc <plug_holes+0x18c>
c0006f83:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006f88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006f8c:	75 0a                	jne    c0006f98 <plug_holes+0x158>
c0006f8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f92:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f97:	90                   	nop
c0006f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f9c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fa3:	66 89 02             	mov    WORD PTR [edx],ax
c0006fa6:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006faf:	29 c2                	sub    edx,eax
c0006fb1:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006fbb:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006fbe:	0f b7 c0             	movzx  eax,ax
c0006fc1:	01 c1                	add    ecx,eax
c0006fc3:	89 d0                	mov    eax,edx
c0006fc5:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0006fcc:	90                   	nop
c0006fcd:	83 c4 1c             	add    esp,0x1c
c0006fd0:	c3                   	ret    
c0006fd1:	8d 76 00             	lea    esi,[esi+0x0]

c0006fd4 <mem_init>:
c0006fd4:	83 ec 1c             	sub    esp,0x1c
c0006fd7:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0006fe1:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fee:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006ff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ff7:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0006ffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007001:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007005:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000700a:	05 40 06 00 00       	add    eax,0x640
c000700f:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0007014:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007019:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000701d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007022:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0007027:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000702c:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0007032:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007037:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000703c:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0007045:	83 ec 08             	sub    esp,0x8
c0007048:	6a 01                	push   0x1
c000704a:	68 98 76 03 c0       	push   0xc0037698
c000704f:	e8 18 9c ff ff       	call   c0000c6c <sys_sem_new>
c0007054:	83 c4 10             	add    esp,0x10
c0007057:	0f be c0             	movsx  eax,al
c000705a:	85 c0                	test   eax,eax
c000705c:	74 16                	je     c0007074 <mem_init+0xa0>
c000705e:	83 ec 08             	sub    esp,0x8
c0007061:	68 68 fb 02 c0       	push   0xc002fb68
c0007066:	68 26 fb 02 c0       	push   0xc002fb26
c000706b:	e8 34 8b 01 00       	call   c001fba4 <CPrintf>
c0007070:	83 c4 10             	add    esp,0x10
c0007073:	90                   	nop
c0007074:	90                   	nop
c0007075:	83 c4 1c             	add    esp,0x1c
c0007078:	c3                   	ret    
c0007079:	8d 76 00             	lea    esi,[esi+0x0]

c000707c <mem_free>:
c000707c:	83 ec 1c             	sub    esp,0x1c
c000707f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0007084:	0f 84 0e 01 00 00    	je     c0007198 <mem_free+0x11c>
c000708a:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000708f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007093:	72 0b                	jb     c00070a0 <mem_free+0x24>
c0007095:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000709a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000709e:	72 18                	jb     c00070b8 <mem_free+0x3c>
c00070a0:	83 ec 08             	sub    esp,0x8
c00070a3:	68 83 fb 02 c0       	push   0xc002fb83
c00070a8:	68 26 fb 02 c0       	push   0xc002fb26
c00070ad:	e8 f2 8a 01 00       	call   c001fba4 <CPrintf>
c00070b2:	83 c4 10             	add    esp,0x10
c00070b5:	8d 76 00             	lea    esi,[esi+0x0]
c00070b8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070bd:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070c1:	72 0d                	jb     c00070d0 <mem_free+0x54>
c00070c3:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070c8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070cc:	72 22                	jb     c00070f0 <mem_free+0x74>
c00070ce:	66 90                	xchg   ax,ax
c00070d0:	e8 bf 8a 01 00       	call   c001fb94 <CLockScheduler>
c00070d5:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00070db:	83 c0 01             	add    eax,0x1
c00070de:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c00070e4:	e8 8f 8a 01 00       	call   c001fb78 <CUnlockScheduler>
c00070e9:	e9 ae 00 00 00       	jmp    c000719c <mem_free+0x120>
c00070ee:	66 90                	xchg   ax,ax
c00070f0:	83 ec 08             	sub    esp,0x8
c00070f3:	6a 00                	push   0x0
c00070f5:	68 98 76 03 c0       	push   0xc0037698
c00070fa:	e8 c5 9b ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007106:	83 e8 06             	sub    eax,0x6
c0007109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000710d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007111:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007114:	0f b6 c0             	movzx  eax,al
c0007117:	85 c0                	test   eax,eax
c0007119:	75 15                	jne    c0007130 <mem_free+0xb4>
c000711b:	83 ec 08             	sub    esp,0x8
c000711e:	68 9a fb 02 c0       	push   0xc002fb9a
c0007123:	68 26 fb 02 c0       	push   0xc002fb26
c0007128:	e8 77 8a 01 00       	call   c001fba4 <CPrintf>
c000712d:	83 c4 10             	add    esp,0x10
c0007130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007134:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007138:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000713d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0007141:	73 09                	jae    c000714c <mem_free+0xd0>
c0007143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007147:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000714c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007152:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007158:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000715c:	29 d1                	sub    ecx,edx
c000715e:	89 ca                	mov    edx,ecx
c0007160:	89 d1                	mov    ecx,edx
c0007162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007166:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007169:	29 d1                	sub    ecx,edx
c000716b:	89 ca                	mov    edx,ecx
c000716d:	01 d0                	add    eax,edx
c000716f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007175:	83 ec 0c             	sub    esp,0xc
c0007178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000717c:	e8 bf fc ff ff       	call   c0006e40 <plug_holes>
c0007181:	83 c4 10             	add    esp,0x10
c0007184:	83 ec 0c             	sub    esp,0xc
c0007187:	68 98 76 03 c0       	push   0xc0037698
c000718c:	e8 1b 9b ff ff       	call   c0000cac <sys_sem_signal>
c0007191:	83 c4 10             	add    esp,0x10
c0007194:	eb 06                	jmp    c000719c <mem_free+0x120>
c0007196:	66 90                	xchg   ax,ax
c0007198:	90                   	nop
c0007199:	8d 76 00             	lea    esi,[esi+0x0]
c000719c:	83 c4 1c             	add    esp,0x1c
c000719f:	c3                   	ret    

c00071a0 <mem_trim>:
c00071a0:	83 ec 2c             	sub    esp,0x2c
c00071a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00071a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00071ac:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071b1:	83 f8 0b             	cmp    eax,0xb
c00071b4:	77 0a                	ja     c00071c0 <mem_trim+0x20>
c00071b6:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00071bd:	8d 76 00             	lea    esi,[esi+0x0]
c00071c0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071c5:	3d 40 06 00 00       	cmp    eax,0x640
c00071ca:	76 0c                	jbe    c00071d8 <mem_trim+0x38>
c00071cc:	b8 00 00 00 00       	mov    eax,0x0
c00071d1:	e9 d6 02 00 00       	jmp    c00074ac <mem_trim+0x30c>
c00071d6:	66 90                	xchg   ax,ax
c00071d8:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071dd:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00071e1:	72 0d                	jb     c00071f0 <mem_trim+0x50>
c00071e3:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071e8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00071ec:	72 1a                	jb     c0007208 <mem_trim+0x68>
c00071ee:	66 90                	xchg   ax,ax
c00071f0:	83 ec 08             	sub    esp,0x8
c00071f3:	68 ae fb 02 c0       	push   0xc002fbae
c00071f8:	68 26 fb 02 c0       	push   0xc002fb26
c00071fd:	e8 a2 89 01 00       	call   c001fba4 <CPrintf>
c0007202:	83 c4 10             	add    esp,0x10
c0007205:	8d 76 00             	lea    esi,[esi+0x0]
c0007208:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000720d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007211:	72 0d                	jb     c0007220 <mem_trim+0x80>
c0007213:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007218:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000721c:	72 26                	jb     c0007244 <mem_trim+0xa4>
c000721e:	66 90                	xchg   ax,ax
c0007220:	e8 6f 89 01 00       	call   c001fb94 <CLockScheduler>
c0007225:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000722b:	83 c0 01             	add    eax,0x1
c000722e:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007234:	e8 3f 89 01 00       	call   c001fb78 <CUnlockScheduler>
c0007239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000723d:	e9 6a 02 00 00       	jmp    c00074ac <mem_trim+0x30c>
c0007242:	66 90                	xchg   ax,ax
c0007244:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007248:	83 e8 06             	sub    eax,0x6
c000724b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000724f:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007254:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007258:	29 c2                	sub    edx,eax
c000725a:	89 d0                	mov    eax,edx
c000725c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0007261:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007265:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007268:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000726d:	89 d1                	mov    ecx,edx
c000726f:	29 c1                	sub    ecx,eax
c0007271:	89 c8                	mov    eax,ecx
c0007273:	83 e8 06             	sub    eax,0x6
c0007276:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000727b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007280:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007285:	39 c2                	cmp    edx,eax
c0007287:	76 17                	jbe    c00072a0 <mem_trim+0x100>
c0007289:	83 ec 08             	sub    esp,0x8
c000728c:	68 0c fc 02 c0       	push   0xc002fc0c
c0007291:	68 26 fb 02 c0       	push   0xc002fb26
c0007296:	e8 09 89 01 00       	call   c001fba4 <CPrintf>
c000729b:	83 c4 10             	add    esp,0x10
c000729e:	66 90                	xchg   ax,ax
c00072a0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072a5:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072aa:	39 c2                	cmp    edx,eax
c00072ac:	76 0a                	jbe    c00072b8 <mem_trim+0x118>
c00072ae:	b8 00 00 00 00       	mov    eax,0x0
c00072b3:	e9 f4 01 00 00       	jmp    c00074ac <mem_trim+0x30c>
c00072b8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072bd:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072c2:	39 c2                	cmp    edx,eax
c00072c4:	75 0a                	jne    c00072d0 <mem_trim+0x130>
c00072c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00072ca:	e9 dd 01 00 00       	jmp    c00074ac <mem_trim+0x30c>
c00072cf:	90                   	nop
c00072d0:	83 ec 08             	sub    esp,0x8
c00072d3:	6a 00                	push   0x0
c00072d5:	68 98 76 03 c0       	push   0xc0037698
c00072da:	e8 e5 99 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00072df:	83 c4 10             	add    esp,0x10
c00072e2:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00072ec:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072ef:	0f b7 c0             	movzx  eax,ax
c00072f2:	01 d0                	add    eax,edx
c00072f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072fc:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072ff:	0f b6 c0             	movzx  eax,al
c0007302:	85 c0                	test   eax,eax
c0007304:	0f 85 c6 00 00 00    	jne    c00073d0 <mem_trim+0x230>
c000730a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000730e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007311:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0007316:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000731b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000731f:	01 d0                	add    eax,edx
c0007321:	83 c0 06             	add    eax,0x6
c0007324:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007329:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000732e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007332:	75 14                	jne    c0007348 <mem_trim+0x1a8>
c0007334:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000733a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000733f:	01 d0                	add    eax,edx
c0007341:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007346:	66 90                	xchg   ax,ax
c0007348:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000734e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007353:	01 d0                	add    eax,edx
c0007355:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007359:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000735d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007361:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007365:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000736a:	66 89 02             	mov    WORD PTR [edx],ax
c000736d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007371:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007376:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000737a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000737e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007382:	66 89 02             	mov    WORD PTR [edx],ax
c0007385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007389:	66 8b 00             	mov    ax,WORD PTR [eax]
c000738c:	0f b7 c0             	movzx  eax,ax
c000738f:	3d 40 06 00 00       	cmp    eax,0x640
c0007394:	74 1a                	je     c00073b0 <mem_trim+0x210>
c0007396:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000739c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073a0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073a3:	0f b7 c0             	movzx  eax,ax
c00073a6:	01 c2                	add    edx,eax
c00073a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073ac:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073b0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00073b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073be:	29 d1                	sub    ecx,edx
c00073c0:	89 ca                	mov    edx,ecx
c00073c2:	01 d0                	add    eax,edx
c00073c4:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00073ca:	e9 c9 00 00 00       	jmp    c0007498 <mem_trim+0x2f8>
c00073cf:	90                   	nop
c00073d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073d5:	8d 50 12             	lea    edx,[eax+0x12]
c00073d8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00073dd:	39 c2                	cmp    edx,eax
c00073df:	0f 87 b3 00 00 00    	ja     c0007498 <mem_trim+0x2f8>
c00073e5:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00073ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00073ee:	01 d0                	add    eax,edx
c00073f0:	83 c0 06             	add    eax,0x6
c00073f3:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00073f8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00073fe:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007403:	01 d0                	add    eax,edx
c0007405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007409:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000740e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007412:	73 0c                	jae    c0007420 <mem_trim+0x280>
c0007414:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007418:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000741d:	8d 76 00             	lea    esi,[esi+0x0]
c0007420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007424:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000742c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000742f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007433:	66 89 02             	mov    WORD PTR [edx],ax
c0007436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000743a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000743f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744b:	66 89 02             	mov    WORD PTR [edx],ax
c000744e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007452:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007455:	0f b7 c0             	movzx  eax,ax
c0007458:	3d 40 06 00 00       	cmp    eax,0x640
c000745d:	74 1d                	je     c000747c <mem_trim+0x2dc>
c000745f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007465:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007469:	66 8b 00             	mov    ax,WORD PTR [eax]
c000746c:	0f b7 c0             	movzx  eax,ax
c000746f:	01 c2                	add    edx,eax
c0007471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007475:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007479:	8d 76 00             	lea    esi,[esi+0x0]
c000747c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007482:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007486:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000748a:	29 d1                	sub    ecx,edx
c000748c:	89 ca                	mov    edx,ecx
c000748e:	01 d0                	add    eax,edx
c0007490:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007496:	66 90                	xchg   ax,ax
c0007498:	83 ec 0c             	sub    esp,0xc
c000749b:	68 98 76 03 c0       	push   0xc0037698
c00074a0:	e8 07 98 ff ff       	call   c0000cac <sys_sem_signal>
c00074a5:	83 c4 10             	add    esp,0x10
c00074a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074ac:	83 c4 2c             	add    esp,0x2c
c00074af:	c3                   	ret    

c00074b0 <mem_malloc>:
c00074b0:	53                   	push   ebx
c00074b1:	83 ec 28             	sub    esp,0x28
c00074b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074b8:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00074bd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074c2:	85 c0                	test   eax,eax
c00074c4:	75 0a                	jne    c00074d0 <mem_malloc+0x20>
c00074c6:	b8 00 00 00 00       	mov    eax,0x0
c00074cb:	e9 f4 02 00 00       	jmp    c00077c4 <mem_malloc+0x314>
c00074d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074d5:	83 f8 0b             	cmp    eax,0xb
c00074d8:	77 0a                	ja     c00074e4 <mem_malloc+0x34>
c00074da:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00074e1:	8d 76 00             	lea    esi,[esi+0x0]
c00074e4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074e9:	3d 40 06 00 00       	cmp    eax,0x640
c00074ee:	76 0c                	jbe    c00074fc <mem_malloc+0x4c>
c00074f0:	b8 00 00 00 00       	mov    eax,0x0
c00074f5:	e9 ca 02 00 00       	jmp    c00077c4 <mem_malloc+0x314>
c00074fa:	66 90                	xchg   ax,ax
c00074fc:	83 ec 08             	sub    esp,0x8
c00074ff:	6a 00                	push   0x0
c0007501:	68 98 76 03 c0       	push   0xc0037698
c0007506:	e8 b9 97 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c000750b:	83 c4 10             	add    esp,0x10
c000750e:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007514:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007519:	29 c2                	sub    edx,eax
c000751b:	89 d0                	mov    eax,edx
c000751d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007522:	e9 5d 02 00 00       	jmp    c0007784 <mem_malloc+0x2d4>
c0007527:	90                   	nop
c0007528:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000752e:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007533:	01 d0                	add    eax,edx
c0007535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007539:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000753d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007540:	0f b6 c0             	movzx  eax,al
c0007543:	85 c0                	test   eax,eax
c0007545:	0f 85 21 02 00 00    	jne    c000776c <mem_malloc+0x2bc>
c000754b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000754f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007552:	0f b7 d0             	movzx  edx,ax
c0007555:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000755a:	29 c2                	sub    edx,eax
c000755c:	89 d0                	mov    eax,edx
c000755e:	8d 50 fa             	lea    edx,[eax-0x6]
c0007561:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007566:	39 c2                	cmp    edx,eax
c0007568:	0f 82 fe 01 00 00    	jb     c000776c <mem_malloc+0x2bc>
c000756e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007575:	0f b7 d0             	movzx  edx,ax
c0007578:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000757d:	29 c2                	sub    edx,eax
c000757f:	89 d0                	mov    eax,edx
c0007581:	8d 50 fa             	lea    edx,[eax-0x6]
c0007584:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007589:	83 c0 12             	add    eax,0x12
c000758c:	39 c2                	cmp    edx,eax
c000758e:	0f 82 c4 00 00 00    	jb     c0007658 <mem_malloc+0x1a8>
c0007594:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759d:	01 d0                	add    eax,edx
c000759f:	83 c0 06             	add    eax,0x6
c00075a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00075a7:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075ad:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00075b2:	01 d0                	add    eax,edx
c00075b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075cb:	66 89 02             	mov    WORD PTR [edx],ax
c00075ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075d2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00075d7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00075db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075df:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00075e4:	66 89 02             	mov    WORD PTR [edx],ax
c00075e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075eb:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00075ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075f3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075f6:	0f b7 c0             	movzx  eax,ax
c00075f9:	3d 40 06 00 00       	cmp    eax,0x640
c00075fe:	74 1c                	je     c000761c <mem_malloc+0x16c>
c0007600:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000760a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000760d:	0f b7 c0             	movzx  eax,ax
c0007610:	01 c2                	add    edx,eax
c0007612:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0007617:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000761b:	90                   	nop
c000761c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007622:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007626:	01 d0                	add    eax,edx
c0007628:	83 c0 06             	add    eax,0x6
c000762b:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007631:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007638:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000763e:	0f b7 d2             	movzx  edx,dx
c0007641:	0f b7 c0             	movzx  eax,ax
c0007644:	39 c2                	cmp    edx,eax
c0007646:	73 60                	jae    c00076a8 <mem_malloc+0x1f8>
c0007648:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000764e:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007654:	eb 52                	jmp    c00076a8 <mem_malloc+0x1f8>
c0007656:	66 90                	xchg   ax,ax
c0007658:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765c:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007660:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007666:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000766a:	66 8b 12             	mov    dx,WORD PTR [edx]
c000766d:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0007673:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007677:	29 cb                	sub    ebx,ecx
c0007679:	89 d9                	mov    ecx,ebx
c000767b:	29 ca                	sub    edx,ecx
c000767d:	01 d0                	add    eax,edx
c000767f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007685:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c000768c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007692:	0f b7 d2             	movzx  edx,dx
c0007695:	0f b7 c0             	movzx  eax,ax
c0007698:	39 c2                	cmp    edx,eax
c000769a:	73 0c                	jae    c00076a8 <mem_malloc+0x1f8>
c000769c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00076a2:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00076a8:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076ad:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00076b1:	75 71                	jne    c0007724 <mem_malloc+0x274>
c00076b3:	eb 1b                	jmp    c00076d0 <mem_malloc+0x220>
c00076b5:	8d 76 00             	lea    esi,[esi+0x0]
c00076b8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076be:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076c3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076c6:	0f b7 c0             	movzx  eax,ax
c00076c9:	01 d0                	add    eax,edx
c00076cb:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00076d0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076d5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076d8:	0f b6 c0             	movzx  eax,al
c00076db:	85 c0                	test   eax,eax
c00076dd:	74 11                	je     c00076f0 <mem_malloc+0x240>
c00076df:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076e5:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00076ea:	39 c2                	cmp    edx,eax
c00076ec:	75 ca                	jne    c00076b8 <mem_malloc+0x208>
c00076ee:	66 90                	xchg   ax,ax
c00076f0:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076f6:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00076fb:	39 c2                	cmp    edx,eax
c00076fd:	74 25                	je     c0007724 <mem_malloc+0x274>
c00076ff:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007704:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007707:	0f b6 c0             	movzx  eax,al
c000770a:	85 c0                	test   eax,eax
c000770c:	74 16                	je     c0007724 <mem_malloc+0x274>
c000770e:	83 ec 08             	sub    esp,0x8
c0007711:	68 c5 fb 02 c0       	push   0xc002fbc5
c0007716:	68 26 fb 02 c0       	push   0xc002fb26
c000771b:	e8 84 84 01 00       	call   c001fba4 <CPrintf>
c0007720:	83 c4 10             	add    esp,0x10
c0007723:	90                   	nop
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	68 98 76 03 c0       	push   0xc0037698
c000772c:	e8 7b 95 ff ff       	call   c0000cac <sys_sem_signal>
c0007731:	83 c4 10             	add    esp,0x10
c0007734:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007739:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000773d:	01 d0                	add    eax,edx
c000773f:	8d 50 06             	lea    edx,[eax+0x6]
c0007742:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007747:	39 c2                	cmp    edx,eax
c0007749:	76 15                	jbe    c0007760 <mem_malloc+0x2b0>
c000774b:	83 ec 08             	sub    esp,0x8
c000774e:	68 2c fc 02 c0       	push   0xc002fc2c
c0007753:	68 26 fb 02 c0       	push   0xc002fb26
c0007758:	e8 47 84 01 00       	call   c001fba4 <CPrintf>
c000775d:	83 c4 10             	add    esp,0x10
c0007760:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007764:	83 c0 06             	add    eax,0x6
c0007767:	eb 5b                	jmp    c00077c4 <mem_malloc+0x314>
c0007769:	8d 76 00             	lea    esi,[esi+0x0]
c000776c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007772:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007777:	01 d0                	add    eax,edx
c0007779:	66 8b 00             	mov    ax,WORD PTR [eax]
c000777c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007781:	8d 76 00             	lea    esi,[esi+0x0]
c0007784:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007789:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000778e:	b9 40 06 00 00       	mov    ecx,0x640
c0007793:	29 d1                	sub    ecx,edx
c0007795:	89 ca                	mov    edx,ecx
c0007797:	39 d0                	cmp    eax,edx
c0007799:	0f 8c 89 fd ff ff    	jl     c0007528 <mem_malloc+0x78>
c000779f:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c00077a5:	83 c0 01             	add    eax,0x1
c00077a8:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c00077ae:	83 ec 0c             	sub    esp,0xc
c00077b1:	68 98 76 03 c0       	push   0xc0037698
c00077b6:	e8 f1 94 ff ff       	call   c0000cac <sys_sem_signal>
c00077bb:	83 c4 10             	add    esp,0x10
c00077be:	b8 00 00 00 00       	mov    eax,0x0
c00077c3:	90                   	nop
c00077c4:	83 c4 28             	add    esp,0x28
c00077c7:	5b                   	pop    ebx
c00077c8:	c3                   	ret    
c00077c9:	8d 76 00             	lea    esi,[esi+0x0]

c00077cc <mem_calloc>:
c00077cc:	83 ec 2c             	sub    esp,0x2c
c00077cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00077d7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00077dc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00077e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e9:	0f af c2             	imul   eax,edx
c00077ec:	0f b7 c0             	movzx  eax,ax
c00077ef:	83 ec 0c             	sub    esp,0xc
c00077f2:	50                   	push   eax
c00077f3:	e8 b8 fc ff ff       	call   c00074b0 <mem_malloc>
c00077f8:	83 c4 10             	add    esp,0x10
c00077fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077ff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0007804:	74 22                	je     c0007828 <mem_calloc+0x5c>
c0007806:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000780b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0007810:	0f af c2             	imul   eax,edx
c0007813:	83 ec 04             	sub    esp,0x4
c0007816:	50                   	push   eax
c0007817:	6a 00                	push   0x0
c0007819:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000781d:	e8 ce 8c ff ff       	call   c00004f0 <memset>
c0007822:	83 c4 10             	add    esp,0x10
c0007825:	8d 76 00             	lea    esi,[esi+0x0]
c0007828:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000782c:	83 c4 2c             	add    esp,0x2c
c000782f:	c3                   	ret    

c0007830 <memp_init>:
c0007830:	83 ec 10             	sub    esp,0x10
c0007833:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c000783a:	eb 78                	jmp    c00078b4 <memp_init+0x84>
c000783c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007841:	89 d0                	mov    eax,edx
c0007843:	c1 e0 02             	shl    eax,0x2
c0007846:	01 d0                	add    eax,edx
c0007848:	01 c0                	add    eax,eax
c000784a:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000784f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007854:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007859:	89 d0                	mov    eax,edx
c000785b:	c1 e0 02             	shl    eax,0x2
c000785e:	01 d0                	add    eax,edx
c0007860:	01 c0                	add    eax,eax
c0007862:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007867:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c000786c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007871:	89 d0                	mov    eax,edx
c0007873:	c1 e0 02             	shl    eax,0x2
c0007876:	01 d0                	add    eax,edx
c0007878:	01 c0                	add    eax,eax
c000787a:	05 d8 67 03 c0       	add    eax,0xc00367d8
c000787f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007884:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007889:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c000788e:	66 8b 94 00 7c fc 02 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffd0384]
c0007896:	89 c8                	mov    eax,ecx
c0007898:	c1 e0 02             	shl    eax,0x2
c000789b:	01 c8                	add    eax,ecx
c000789d:	01 c0                	add    eax,eax
c000789f:	05 d2 67 03 c0       	add    eax,0xc00367d2
c00078a4:	66 89 10             	mov    WORD PTR [eax],dx
c00078a7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00078ac:	83 c0 01             	add    eax,0x1
c00078af:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00078b4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078b9:	83 f8 0d             	cmp    eax,0xd
c00078bc:	0f 86 7a ff ff ff    	jbe    c000783c <memp_init+0xc>
c00078c2:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c00078ca:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00078d1:	e9 8a 00 00 00       	jmp    c0007960 <memp_init+0x130>
c00078d6:	66 90                	xchg   ax,ax
c00078d8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078dd:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c00078e8:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00078ef:	eb 47                	jmp    c0007938 <memp_init+0x108>
c00078f1:	8d 76 00             	lea    esi,[esi+0x0]
c00078f4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078f9:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007900:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007904:	89 10                	mov    DWORD PTR [eax],edx
c0007906:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000790b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000790f:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007916:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000791b:	66 8b 84 00 98 fc 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0368]
c0007923:	0f b7 c0             	movzx  eax,ax
c0007926:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000792a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000792e:	83 c0 01             	add    eax,0x1
c0007931:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007936:	66 90                	xchg   ax,ax
c0007938:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000793d:	66 8b 84 00 7c fc 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0384]
c0007945:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000794a:	0f b7 c0             	movzx  eax,ax
c000794d:	39 c2                	cmp    edx,eax
c000794f:	72 a3                	jb     c00078f4 <memp_init+0xc4>
c0007951:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007956:	83 c0 01             	add    eax,0x1
c0007959:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000795e:	66 90                	xchg   ax,ax
c0007960:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007965:	83 f8 0d             	cmp    eax,0xd
c0007968:	0f 86 6a ff ff ff    	jbe    c00078d8 <memp_init+0xa8>
c000796e:	90                   	nop
c000796f:	83 c4 10             	add    esp,0x10
c0007972:	c3                   	ret    
c0007973:	90                   	nop

c0007974 <memp_malloc>:
c0007974:	83 ec 1c             	sub    esp,0x1c
c0007977:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c000797c:	76 22                	jbe    c00079a0 <memp_malloc+0x2c>
c000797e:	83 ec 08             	sub    esp,0x8
c0007981:	68 5c fc 02 c0       	push   0xc002fc5c
c0007986:	68 26 fb 02 c0       	push   0xc002fb26
c000798b:	e8 14 82 01 00       	call   c001fba4 <CPrintf>
c0007990:	83 c4 10             	add    esp,0x10
c0007993:	b8 00 00 00 00       	mov    eax,0x0
c0007998:	e9 ff 00 00 00       	jmp    c0007a9c <memp_malloc+0x128>
c000799d:	8d 76 00             	lea    esi,[esi+0x0]
c00079a0:	e8 ef 81 01 00       	call   c001fb94 <CLockScheduler>
c00079a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079a9:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c00079b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00079b9:	0f 84 a1 00 00 00    	je     c0007a60 <memp_malloc+0xec>
c00079bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00079c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079c9:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c00079d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079d4:	89 d0                	mov    eax,edx
c00079d6:	c1 e0 02             	shl    eax,0x2
c00079d9:	01 d0                	add    eax,edx
c00079db:	01 c0                	add    eax,eax
c00079dd:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079e2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00079e5:	83 c0 01             	add    eax,0x1
c00079e8:	89 c2                	mov    edx,eax
c00079ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079ee:	89 c8                	mov    eax,ecx
c00079f0:	c1 e0 02             	shl    eax,0x2
c00079f3:	01 c8                	add    eax,ecx
c00079f5:	01 c0                	add    eax,eax
c00079f7:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079fc:	66 89 10             	mov    WORD PTR [eax],dx
c00079ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a03:	89 d0                	mov    eax,edx
c0007a05:	c1 e0 02             	shl    eax,0x2
c0007a08:	01 d0                	add    eax,edx
c0007a0a:	01 c0                	add    eax,eax
c0007a0c:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a11:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007a14:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a18:	89 c8                	mov    eax,ecx
c0007a1a:	c1 e0 02             	shl    eax,0x2
c0007a1d:	01 c8                	add    eax,ecx
c0007a1f:	01 c0                	add    eax,eax
c0007a21:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a29:	0f b7 d2             	movzx  edx,dx
c0007a2c:	0f b7 c0             	movzx  eax,ax
c0007a2f:	39 c2                	cmp    edx,eax
c0007a31:	73 5d                	jae    c0007a90 <memp_malloc+0x11c>
c0007a33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a37:	89 d0                	mov    eax,edx
c0007a39:	c1 e0 02             	shl    eax,0x2
c0007a3c:	01 d0                	add    eax,edx
c0007a3e:	01 c0                	add    eax,eax
c0007a40:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a45:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007a48:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a4c:	89 c8                	mov    eax,ecx
c0007a4e:	c1 e0 02             	shl    eax,0x2
c0007a51:	01 c8                	add    eax,ecx
c0007a53:	01 c0                	add    eax,eax
c0007a55:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a5a:	66 89 10             	mov    WORD PTR [eax],dx
c0007a5d:	eb 31                	jmp    c0007a90 <memp_malloc+0x11c>
c0007a5f:	90                   	nop
c0007a60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a64:	89 d0                	mov    eax,edx
c0007a66:	c1 e0 02             	shl    eax,0x2
c0007a69:	01 d0                	add    eax,edx
c0007a6b:	01 c0                	add    eax,eax
c0007a6d:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a72:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a75:	83 c0 01             	add    eax,0x1
c0007a78:	89 c2                	mov    edx,eax
c0007a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a7e:	89 c8                	mov    eax,ecx
c0007a80:	c1 e0 02             	shl    eax,0x2
c0007a83:	01 c8                	add    eax,ecx
c0007a85:	01 c0                	add    eax,eax
c0007a87:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a8c:	66 89 10             	mov    WORD PTR [eax],dx
c0007a8f:	90                   	nop
c0007a90:	e8 e3 80 01 00       	call   c001fb78 <CUnlockScheduler>
c0007a95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a99:	8d 76 00             	lea    esi,[esi+0x0]
c0007a9c:	83 c4 1c             	add    esp,0x1c
c0007a9f:	c3                   	ret    

c0007aa0 <memp_free>:
c0007aa0:	83 ec 1c             	sub    esp,0x1c
c0007aa3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007aa8:	74 66                	je     c0007b10 <memp_free+0x70>
c0007aaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007aae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ab2:	e8 dd 80 01 00       	call   c001fb94 <CLockScheduler>
c0007ab7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007abb:	89 d0                	mov    eax,edx
c0007abd:	c1 e0 02             	shl    eax,0x2
c0007ac0:	01 d0                	add    eax,edx
c0007ac2:	01 c0                	add    eax,eax
c0007ac4:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007ac9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007acc:	83 e8 01             	sub    eax,0x1
c0007acf:	89 c2                	mov    edx,eax
c0007ad1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ad5:	89 c8                	mov    eax,ecx
c0007ad7:	c1 e0 02             	shl    eax,0x2
c0007ada:	01 c8                	add    eax,ecx
c0007adc:	01 c0                	add    eax,eax
c0007ade:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007ae3:	66 89 10             	mov    WORD PTR [eax],dx
c0007ae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007aea:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007af1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007af5:	89 10                	mov    DWORD PTR [eax],edx
c0007af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007afb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007aff:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b06:	e8 6d 80 01 00       	call   c001fb78 <CUnlockScheduler>
c0007b0b:	eb 07                	jmp    c0007b14 <memp_free+0x74>
c0007b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007b10:	90                   	nop
c0007b11:	8d 76 00             	lea    esi,[esi+0x0]
c0007b14:	83 c4 1c             	add    esp,0x1c
c0007b17:	c3                   	ret    

c0007b18 <netif_init>:
c0007b18:	90                   	nop
c0007b19:	c3                   	ret    
c0007b1a:	66 90                	xchg   ax,ax

c0007b1c <netif_find>:
c0007b1c:	83 ec 10             	sub    esp,0x10
c0007b1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007b24:	75 0a                	jne    c0007b30 <netif_find+0x14>
c0007b26:	b8 00 00 00 00       	mov    eax,0x0
c0007b2b:	e9 80 00 00 00       	jmp    c0007bb0 <netif_find+0x94>
c0007b30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b34:	83 c0 02             	add    eax,0x2
c0007b37:	8a 00                	mov    al,BYTE PTR [eax]
c0007b39:	83 e8 30             	sub    eax,0x30
c0007b3c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007b40:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b49:	eb 59                	jmp    c0007ba4 <netif_find+0x88>
c0007b4b:	90                   	nop
c0007b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b50:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007b53:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007b58:	0f b6 c0             	movzx  eax,al
c0007b5b:	39 c2                	cmp    edx,eax
c0007b5d:	75 39                	jne    c0007b98 <netif_find+0x7c>
c0007b5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b63:	8a 10                	mov    dl,BYTE PTR [eax]
c0007b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b69:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007b6c:	0f be d2             	movsx  edx,dl
c0007b6f:	0f be c0             	movsx  eax,al
c0007b72:	39 c2                	cmp    edx,eax
c0007b74:	75 22                	jne    c0007b98 <netif_find+0x7c>
c0007b76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b7a:	83 c0 01             	add    eax,0x1
c0007b7d:	8a 10                	mov    dl,BYTE PTR [eax]
c0007b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b83:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007b86:	0f be d2             	movsx  edx,dl
c0007b89:	0f be c0             	movsx  eax,al
c0007b8c:	39 c2                	cmp    edx,eax
c0007b8e:	75 08                	jne    c0007b98 <netif_find+0x7c>
c0007b90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b94:	eb 1a                	jmp    c0007bb0 <netif_find+0x94>
c0007b96:	66 90                	xchg   ax,ax
c0007b98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ba2:	66 90                	xchg   ax,ax
c0007ba4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007ba9:	75 a1                	jne    c0007b4c <netif_find+0x30>
c0007bab:	b8 00 00 00 00       	mov    eax,0x0
c0007bb0:	83 c4 10             	add    esp,0x10
c0007bb3:	c3                   	ret    

c0007bb4 <netif_set_ipaddr>:
c0007bb4:	83 ec 1c             	sub    esp,0x1c
c0007bb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007bc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007bc4:	39 c2                	cmp    edx,eax
c0007bc6:	0f 84 bc 00 00 00    	je     c0007c88 <netif_set_ipaddr+0xd4>
c0007bcc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007bd5:	eb 45                	jmp    c0007c1c <netif_set_ipaddr+0x68>
c0007bd7:	90                   	nop
c0007bd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bdc:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007be2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007be5:	39 c2                	cmp    edx,eax
c0007be7:	75 27                	jne    c0007c10 <netif_set_ipaddr+0x5c>
c0007be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007bf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007bf4:	83 ec 0c             	sub    esp,0xc
c0007bf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007bfb:	e8 7c 36 00 00       	call   c000b27c <tcp_abort>
c0007c00:	83 c4 10             	add    esp,0x10
c0007c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c0b:	eb 0f                	jmp    c0007c1c <netif_set_ipaddr+0x68>
c0007c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007c10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c1b:	90                   	nop
c0007c1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007c21:	75 b5                	jne    c0007bd8 <netif_set_ipaddr+0x24>
c0007c23:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007c28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c2c:	eb 52                	jmp    c0007c80 <netif_set_ipaddr+0xcc>
c0007c2e:	66 90                	xchg   ax,ax
c0007c30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c34:	85 c0                	test   eax,eax
c0007c36:	74 3c                	je     c0007c74 <netif_set_ipaddr+0xc0>
c0007c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c3e:	85 c0                	test   eax,eax
c0007c40:	74 32                	je     c0007c74 <netif_set_ipaddr+0xc0>
c0007c42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c46:	8b 10                	mov    edx,DWORD PTR [eax]
c0007c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007c4f:	39 c2                	cmp    edx,eax
c0007c51:	75 21                	jne    c0007c74 <netif_set_ipaddr+0xc0>
c0007c53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c58:	74 0a                	je     c0007c64 <netif_set_ipaddr+0xb0>
c0007c5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c60:	eb 0a                	jmp    c0007c6c <netif_set_ipaddr+0xb8>
c0007c62:	66 90                	xchg   ax,ax
c0007c64:	b8 00 00 00 00       	mov    eax,0x0
c0007c69:	8d 76 00             	lea    esi,[esi+0x0]
c0007c6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c70:	89 02                	mov    DWORD PTR [edx],eax
c0007c72:	66 90                	xchg   ax,ax
c0007c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c7f:	90                   	nop
c0007c80:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c85:	75 a9                	jne    c0007c30 <netif_set_ipaddr+0x7c>
c0007c87:	90                   	nop
c0007c88:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c8d:	74 09                	je     c0007c98 <netif_set_ipaddr+0xe4>
c0007c8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c95:	eb 09                	jmp    c0007ca0 <netif_set_ipaddr+0xec>
c0007c97:	90                   	nop
c0007c98:	b8 00 00 00 00       	mov    eax,0x0
c0007c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0007ca0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ca4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007ca7:	90                   	nop
c0007ca8:	83 c4 1c             	add    esp,0x1c
c0007cab:	c3                   	ret    

c0007cac <netif_set_gw>:
c0007cac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cb1:	74 09                	je     c0007cbc <netif_set_gw+0x10>
c0007cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0007cb9:	eb 09                	jmp    c0007cc4 <netif_set_gw+0x18>
c0007cbb:	90                   	nop
c0007cbc:	b8 00 00 00 00       	mov    eax,0x0
c0007cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007cc8:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007ccb:	90                   	nop
c0007ccc:	c3                   	ret    
c0007ccd:	8d 76 00             	lea    esi,[esi+0x0]

c0007cd0 <netif_set_netmask>:
c0007cd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cd5:	74 09                	je     c0007ce0 <netif_set_netmask+0x10>
c0007cd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0007cdd:	eb 09                	jmp    c0007ce8 <netif_set_netmask+0x18>
c0007cdf:	90                   	nop
c0007ce0:	b8 00 00 00 00       	mov    eax,0x0
c0007ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0007ce8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007cec:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007cef:	90                   	nop
c0007cf0:	c3                   	ret    
c0007cf1:	8d 76 00             	lea    esi,[esi+0x0]

c0007cf4 <netif_set_addr>:
c0007cf4:	83 ec 0c             	sub    esp,0xc
c0007cf7:	83 ec 08             	sub    esp,0x8
c0007cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 ad fe ff ff       	call   c0007bb4 <netif_set_ipaddr>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007d11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d15:	e8 b6 ff ff ff       	call   c0007cd0 <netif_set_netmask>
c0007d1a:	83 c4 10             	add    esp,0x10
c0007d1d:	83 ec 08             	sub    esp,0x8
c0007d20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d28:	e8 7f ff ff ff       	call   c0007cac <netif_set_gw>
c0007d2d:	83 c4 10             	add    esp,0x10
c0007d30:	90                   	nop
c0007d31:	83 c4 0c             	add    esp,0xc
c0007d34:	c3                   	ret    
c0007d35:	8d 76 00             	lea    esi,[esi+0x0]

c0007d38 <netif_add>:
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007d40:	75 16                	jne    c0007d58 <netif_add+0x20>
c0007d42:	83 ec 08             	sub    esp,0x8
c0007d45:	68 b4 fc 02 c0       	push   0xc002fcb4
c0007d4a:	68 26 fb 02 c0       	push   0xc002fb26
c0007d4f:	e8 50 7e 01 00       	call   c001fba4 <CPrintf>
c0007d54:	83 c4 10             	add    esp,0x10
c0007d57:	90                   	nop
c0007d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d72:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d7d:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007d89:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007d8c:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007d91:	8d 50 01             	lea    edx,[eax+0x1]
c0007d94:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007d9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d9e:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007da9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 33 ff ff ff       	call   c0007cf4 <netif_set_addr>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 ec 0c             	sub    esp,0xc
c0007dc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007dcf:	ff d0                	call   eax
c0007dd1:	83 c4 10             	add    esp,0x10
c0007dd4:	0f be c0             	movsx  eax,al
c0007dd7:	85 c0                	test   eax,eax
c0007dd9:	74 09                	je     c0007de4 <netif_add+0xac>
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	eb 1e                	jmp    c0007e00 <netif_add+0xc8>
c0007de2:	66 90                	xchg   ax,ax
c0007de4:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dee:	89 10                	mov    DWORD PTR [eax],edx
c0007df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007df4:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0007e00:	83 c4 0c             	add    esp,0xc
c0007e03:	c3                   	ret    

c0007e04 <netif_set_default>:
c0007e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e08:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007e0d:	90                   	nop
c0007e0e:	c3                   	ret    
c0007e0f:	90                   	nop

c0007e10 <netif_set_up>:
c0007e10:	83 ec 0c             	sub    esp,0xc
c0007e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e17:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e1a:	0f b6 c0             	movzx  eax,al
c0007e1d:	83 e0 01             	and    eax,0x1
c0007e20:	75 4a                	jne    c0007e6c <netif_set_up+0x5c>
c0007e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e26:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e29:	83 c8 01             	or     eax,0x1
c0007e2c:	88 c2                	mov    dl,al
c0007e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e32:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e39:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e3c:	0f b6 c0             	movzx  eax,al
c0007e3f:	83 e0 10             	and    eax,0x10
c0007e42:	74 28                	je     c0007e6c <netif_set_up+0x5c>
c0007e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e48:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e4b:	0f b6 c0             	movzx  eax,al
c0007e4e:	83 e0 20             	and    eax,0x20
c0007e51:	74 19                	je     c0007e6c <netif_set_up+0x5c>
c0007e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e57:	83 c0 04             	add    eax,0x4
c0007e5a:	83 ec 08             	sub    esp,0x8
c0007e5d:	50                   	push   eax
c0007e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e62:	e8 bd a5 00 00       	call   c0012424 <etharp_request>
c0007e67:	83 c4 10             	add    esp,0x10
c0007e6a:	66 90                	xchg   ax,ax
c0007e6c:	90                   	nop
c0007e6d:	83 c4 0c             	add    esp,0xc
c0007e70:	c3                   	ret    
c0007e71:	8d 76 00             	lea    esi,[esi+0x0]

c0007e74 <netif_set_down>:
c0007e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e78:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e7b:	0f b6 c0             	movzx  eax,al
c0007e7e:	83 e0 01             	and    eax,0x1
c0007e81:	74 15                	je     c0007e98 <netif_set_down+0x24>
c0007e83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e87:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e8a:	83 e0 fe             	and    eax,0xfffffffe
c0007e8d:	88 c2                	mov    dl,al
c0007e8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e93:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e96:	66 90                	xchg   ax,ax
c0007e98:	90                   	nop
c0007e99:	c3                   	ret    
c0007e9a:	66 90                	xchg   ax,ax

c0007e9c <netif_remove>:
c0007e9c:	83 ec 10             	sub    esp,0x10
c0007e9f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007ea4:	0f 84 92 00 00 00    	je     c0007f3c <netif_remove+0xa0>
c0007eaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007eae:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eb1:	83 e0 01             	and    eax,0x1
c0007eb4:	0f b6 c0             	movzx  eax,al
c0007eb7:	85 c0                	test   eax,eax
c0007eb9:	74 0d                	je     c0007ec8 <netif_remove+0x2c>
c0007ebb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ebf:	e8 b0 ff ff ff       	call   c0007e74 <netif_set_down>
c0007ec4:	83 c4 04             	add    esp,0x4
c0007ec7:	90                   	nop
c0007ec8:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ecd:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007ed1:	75 0d                	jne    c0007ee0 <netif_remove+0x44>
c0007ed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ed7:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ed9:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007ede:	eb 44                	jmp    c0007f24 <netif_remove+0x88>
c0007ee0:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ee9:	eb 29                	jmp    c0007f14 <netif_remove+0x78>
c0007eeb:	90                   	nop
c0007eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ef2:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007ef6:	75 10                	jne    c0007f08 <netif_remove+0x6c>
c0007ef8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007efc:	8b 10                	mov    edx,DWORD PTR [eax]
c0007efe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f02:	89 10                	mov    DWORD PTR [eax],edx
c0007f04:	eb 16                	jmp    c0007f1c <netif_remove+0x80>
c0007f06:	66 90                	xchg   ax,ax
c0007f08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f12:	66 90                	xchg   ax,ax
c0007f14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f19:	75 d1                	jne    c0007eec <netif_remove+0x50>
c0007f1b:	90                   	nop
c0007f1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f21:	74 1d                	je     c0007f40 <netif_remove+0xa4>
c0007f23:	90                   	nop
c0007f24:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007f29:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007f2d:	75 15                	jne    c0007f44 <netif_remove+0xa8>
c0007f2f:	6a 00                	push   0x0
c0007f31:	e8 ce fe ff ff       	call   c0007e04 <netif_set_default>
c0007f36:	83 c4 04             	add    esp,0x4
c0007f39:	eb 09                	jmp    c0007f44 <netif_remove+0xa8>
c0007f3b:	90                   	nop
c0007f3c:	90                   	nop
c0007f3d:	eb 05                	jmp    c0007f44 <netif_remove+0xa8>
c0007f3f:	90                   	nop
c0007f40:	90                   	nop
c0007f41:	8d 76 00             	lea    esi,[esi+0x0]
c0007f44:	83 c4 10             	add    esp,0x10
c0007f47:	c3                   	ret    

c0007f48 <netif_set_link_up>:
c0007f48:	83 ec 0c             	sub    esp,0xc
c0007f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f4f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f52:	0f b6 c0             	movzx  eax,al
c0007f55:	83 e0 10             	and    eax,0x10
c0007f58:	75 4a                	jne    c0007fa4 <netif_set_link_up+0x5c>
c0007f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f5e:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f61:	83 c8 10             	or     eax,0x10
c0007f64:	88 c2                	mov    dl,al
c0007f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f6a:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f71:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f74:	0f b6 c0             	movzx  eax,al
c0007f77:	83 e0 01             	and    eax,0x1
c0007f7a:	74 28                	je     c0007fa4 <netif_set_link_up+0x5c>
c0007f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f80:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f83:	0f b6 c0             	movzx  eax,al
c0007f86:	83 e0 20             	and    eax,0x20
c0007f89:	74 19                	je     c0007fa4 <netif_set_link_up+0x5c>
c0007f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f8f:	83 c0 04             	add    eax,0x4
c0007f92:	83 ec 08             	sub    esp,0x8
c0007f95:	50                   	push   eax
c0007f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f9a:	e8 85 a4 00 00       	call   c0012424 <etharp_request>
c0007f9f:	83 c4 10             	add    esp,0x10
c0007fa2:	66 90                	xchg   ax,ax
c0007fa4:	90                   	nop
c0007fa5:	83 c4 0c             	add    esp,0xc
c0007fa8:	c3                   	ret    
c0007fa9:	8d 76 00             	lea    esi,[esi+0x0]

c0007fac <netif_set_link_down>:
c0007fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fb0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fb3:	0f b6 c0             	movzx  eax,al
c0007fb6:	83 e0 10             	and    eax,0x10
c0007fb9:	74 15                	je     c0007fd0 <netif_set_link_down+0x24>
c0007fbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fbf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fc2:	83 e0 ef             	and    eax,0xffffffef
c0007fc5:	88 c2                	mov    dl,al
c0007fc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fcb:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fce:	66 90                	xchg   ax,ax
c0007fd0:	90                   	nop
c0007fd1:	c3                   	ret    
c0007fd2:	66 90                	xchg   ax,ax

c0007fd4 <pbuf_free_ooseq>:
c0007fd4:	83 ec 1c             	sub    esp,0x1c
c0007fd7:	e8 b8 7b 01 00       	call   c001fb94 <CLockScheduler>
c0007fdc:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007fe3:	e8 90 7b 01 00       	call   c001fb78 <CUnlockScheduler>
c0007fe8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007fed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff1:	eb 41                	jmp    c0008034 <pbuf_free_ooseq+0x60>
c0007ff3:	90                   	nop
c0007ff4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ff8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007ffe:	85 c0                	test   eax,eax
c0008000:	74 26                	je     c0008028 <pbuf_free_ooseq+0x54>
c0008002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008006:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000800c:	83 ec 0c             	sub    esp,0xc
c000800f:	50                   	push   eax
c0008010:	e8 03 20 00 00       	call   c000a018 <tcp_segs_free>
c0008015:	83 c4 10             	add    esp,0x10
c0008018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000801c:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c0008026:	eb 14                	jmp    c000803c <pbuf_free_ooseq+0x68>
c0008028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000802c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000802f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008033:	90                   	nop
c0008034:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008039:	75 b9                	jne    c0007ff4 <pbuf_free_ooseq+0x20>
c000803b:	90                   	nop
c000803c:	83 c4 1c             	add    esp,0x1c
c000803f:	c3                   	ret    

c0008040 <pbuf_pool_is_empty>:
c0008040:	83 ec 1c             	sub    esp,0x1c
c0008043:	e8 4c 7b 01 00       	call   c001fb94 <CLockScheduler>
c0008048:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c000804d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008051:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0008058:	e8 1b 7b 01 00       	call   c001fb78 <CUnlockScheduler>
c000805d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008062:	85 c0                	test   eax,eax
c0008064:	75 2e                	jne    c0008094 <pbuf_pool_is_empty+0x54>
c0008066:	83 ec 04             	sub    esp,0x4
c0008069:	6a 00                	push   0x0
c000806b:	6a 00                	push   0x0
c000806d:	68 d4 7f 00 c0       	push   0xc0007fd4
c0008072:	e8 dd 8b ff ff       	call   c0000c54 <tcpip_callback_with_block>
c0008077:	83 c4 10             	add    esp,0x10
c000807a:	0f be c0             	movsx  eax,al
c000807d:	85 c0                	test   eax,eax
c000807f:	74 13                	je     c0008094 <pbuf_pool_is_empty+0x54>
c0008081:	e8 0e 7b 01 00       	call   c001fb94 <CLockScheduler>
c0008086:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c000808d:	e8 e6 7a 01 00       	call   c001fb78 <CUnlockScheduler>
c0008092:	66 90                	xchg   ax,ax
c0008094:	90                   	nop
c0008095:	83 c4 1c             	add    esp,0x1c
c0008098:	c3                   	ret    
c0008099:	8d 76 00             	lea    esi,[esi+0x0]

c000809c <pbuf_alloced_custom>:
c000809c:	83 ec 2c             	sub    esp,0x2c
c000809f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00080a3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00080a7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00080ac:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00080b1:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00080b8:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c00080bd:	74 29                	je     c00080e8 <pbuf_alloced_custom+0x4c>
c00080bf:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00080c4:	74 12                	je     c00080d8 <pbuf_alloced_custom+0x3c>
c00080c6:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c00080cb:	74 2b                	je     c00080f8 <pbuf_alloced_custom+0x5c>
c00080cd:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c00080d2:	74 54                	je     c0008128 <pbuf_alloced_custom+0x8c>
c00080d4:	eb 32                	jmp    c0008108 <pbuf_alloced_custom+0x6c>
c00080d6:	66 90                	xchg   ax,ax
c00080d8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00080dd:	83 c0 14             	add    eax,0x14
c00080e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00080e5:	8d 76 00             	lea    esi,[esi+0x0]
c00080e8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00080ed:	83 c0 14             	add    eax,0x14
c00080f0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00080f5:	8d 76 00             	lea    esi,[esi+0x0]
c00080f8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00080fd:	83 c0 0e             	add    eax,0xe
c0008100:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008105:	eb 25                	jmp    c000812c <pbuf_alloced_custom+0x90>
c0008107:	90                   	nop
c0008108:	83 ec 08             	sub    esp,0x8
c000810b:	68 cc fc 02 c0       	push   0xc002fccc
c0008110:	68 26 fb 02 c0       	push   0xc002fb26
c0008115:	e8 8a 7a 01 00       	call   c001fba4 <CPrintf>
c000811a:	83 c4 10             	add    esp,0x10
c000811d:	b8 00 00 00 00       	mov    eax,0x0
c0008122:	e9 95 00 00 00       	jmp    c00081bc <pbuf_alloced_custom+0x120>
c0008127:	90                   	nop
c0008128:	90                   	nop
c0008129:	8d 76 00             	lea    esi,[esi+0x0]
c000812c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008131:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008136:	01 c2                	add    edx,eax
c0008138:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000813d:	39 c2                	cmp    edx,eax
c000813f:	7d 07                	jge    c0008148 <pbuf_alloced_custom+0xac>
c0008141:	b8 00 00 00 00       	mov    eax,0x0
c0008146:	eb 74                	jmp    c00081bc <pbuf_alloced_custom+0x120>
c0008148:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000814c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008152:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008157:	74 17                	je     c0008170 <pbuf_alloced_custom+0xd4>
c0008159:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000815e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008162:	01 c2                	add    edx,eax
c0008164:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008168:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000816b:	eb 0f                	jmp    c000817c <pbuf_alloced_custom+0xe0>
c000816d:	8d 76 00             	lea    esi,[esi+0x0]
c0008170:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008174:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000817b:	90                   	nop
c000817c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008180:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c0008184:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008188:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000818c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008190:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008194:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008197:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000819b:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000819f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00081a3:	88 c2                	mov    dl,al
c00081a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081a9:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00081ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081b0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00081b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081ba:	66 90                	xchg   ax,ax
c00081bc:	83 c4 2c             	add    esp,0x2c
c00081bf:	c3                   	ret    

c00081c0 <pbuf_header>:
c00081c0:	83 ec 2c             	sub    esp,0x2c
c00081c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00081c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00081cc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00081d1:	75 15                	jne    c00081e8 <pbuf_header+0x28>
c00081d3:	83 ec 08             	sub    esp,0x8
c00081d6:	68 56 ff 02 c0       	push   0xc002ff56
c00081db:	68 26 fb 02 c0       	push   0xc002fb26
c00081e0:	e8 bf 79 01 00       	call   c001fba4 <CPrintf>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00081ed:	85 c0                	test   eax,eax
c00081ef:	74 07                	je     c00081f8 <pbuf_header+0x38>
c00081f1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00081f6:	75 08                	jne    c0008200 <pbuf_header+0x40>
c00081f8:	b0 00                	mov    al,0x0
c00081fa:	e9 59 01 00 00       	jmp    c0008358 <pbuf_header+0x198>
c00081ff:	90                   	nop
c0008200:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008205:	85 c0                	test   eax,eax
c0008207:	79 3b                	jns    c0008244 <pbuf_header+0x84>
c0008209:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000820d:	f7 d8                	neg    eax
c000820f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008218:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000821c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008221:	0f b7 c0             	movzx  eax,ax
c0008224:	39 c2                	cmp    edx,eax
c0008226:	76 28                	jbe    c0008250 <pbuf_header+0x90>
c0008228:	83 ec 08             	sub    esp,0x8
c000822b:	68 a7 fe 02 c0       	push   0xc002fea7
c0008230:	68 26 fb 02 c0       	push   0xc002fb26
c0008235:	e8 6a 79 01 00       	call   c001fba4 <CPrintf>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	b0 01                	mov    al,0x1
c000823f:	e9 14 01 00 00       	jmp    c0008358 <pbuf_header+0x198>
c0008244:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008248:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000824d:	8d 76 00             	lea    esi,[esi+0x0]
c0008250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008254:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008257:	0f b6 c0             	movzx  eax,al
c000825a:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000825f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008263:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008266:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000826a:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000826f:	85 c0                	test   eax,eax
c0008271:	74 0d                	je     c0008280 <pbuf_header+0xc0>
c0008273:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008278:	83 f8 03             	cmp    eax,0x3
c000827b:	75 3f                	jne    c00082bc <pbuf_header+0xfc>
c000827d:	8d 76 00             	lea    esi,[esi+0x0]
c0008280:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008284:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008287:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c000828c:	f7 da                	neg    edx
c000828e:	01 c2                	add    edx,eax
c0008290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008294:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000829b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000829e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00082a2:	83 c2 10             	add    edx,0x10
c00082a5:	39 d0                	cmp    eax,edx
c00082a7:	73 7f                	jae    c0008328 <pbuf_header+0x168>
c00082a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00082b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00082b4:	b0 01                	mov    al,0x1
c00082b6:	e9 9d 00 00 00       	jmp    c0008358 <pbuf_header+0x198>
c00082bb:	90                   	nop
c00082bc:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082c1:	83 f8 02             	cmp    eax,0x2
c00082c4:	74 0a                	je     c00082d0 <pbuf_header+0x110>
c00082c6:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082cb:	83 f8 01             	cmp    eax,0x1
c00082ce:	75 3c                	jne    c000830c <pbuf_header+0x14c>
c00082d0:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00082d5:	85 c0                	test   eax,eax
c00082d7:	79 2f                	jns    c0008308 <pbuf_header+0x148>
c00082d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082dd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00082e1:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082e6:	0f b7 c0             	movzx  eax,ax
c00082e9:	39 c2                	cmp    edx,eax
c00082eb:	77 1b                	ja     c0008308 <pbuf_header+0x148>
c00082ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082f4:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00082f9:	f7 da                	neg    edx
c00082fb:	01 c2                	add    edx,eax
c00082fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008301:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008304:	eb 22                	jmp    c0008328 <pbuf_header+0x168>
c0008306:	66 90                	xchg   ax,ax
c0008308:	b0 01                	mov    al,0x1
c000830a:	eb 4c                	jmp    c0008358 <pbuf_header+0x198>
c000830c:	83 ec 08             	sub    esp,0x8
c000830f:	68 c5 fe 02 c0       	push   0xc002fec5
c0008314:	68 26 fb 02 c0       	push   0xc002fb26
c0008319:	e8 86 78 01 00       	call   c001fba4 <CPrintf>
c000831e:	83 c4 10             	add    esp,0x10
c0008321:	b0 01                	mov    al,0x1
c0008323:	eb 33                	jmp    c0008358 <pbuf_header+0x198>
c0008325:	8d 76 00             	lea    esi,[esi+0x0]
c0008328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000832c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008334:	01 d0                	add    eax,edx
c0008336:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000833a:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000833e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008342:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008349:	01 d0                	add    eax,edx
c000834b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000834f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008353:	b0 00                	mov    al,0x0
c0008355:	8d 76 00             	lea    esi,[esi+0x0]
c0008358:	83 c4 2c             	add    esp,0x2c
c000835b:	c3                   	ret    

c000835c <pbuf_free>:
c000835c:	83 ec 1c             	sub    esp,0x1c
c000835f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008364:	75 26                	jne    c000838c <pbuf_free+0x30>
c0008366:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000836b:	75 17                	jne    c0008384 <pbuf_free+0x28>
c000836d:	83 ec 08             	sub    esp,0x8
c0008370:	68 56 ff 02 c0       	push   0xc002ff56
c0008375:	68 26 fb 02 c0       	push   0xc002fb26
c000837a:	e8 25 78 01 00       	call   c001fba4 <CPrintf>
c000837f:	83 c4 10             	add    esp,0x10
c0008382:	66 90                	xchg   ax,ax
c0008384:	b0 00                	mov    al,0x0
c0008386:	e9 a5 01 00 00       	jmp    c0008530 <pbuf_free+0x1d4>
c000838b:	90                   	nop
c000838c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008390:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008393:	0f b6 c0             	movzx  eax,al
c0008396:	85 c0                	test   eax,eax
c0008398:	74 42                	je     c00083dc <pbuf_free+0x80>
c000839a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000839e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083a1:	0f b6 c0             	movzx  eax,al
c00083a4:	83 f8 01             	cmp    eax,0x1
c00083a7:	74 33                	je     c00083dc <pbuf_free+0x80>
c00083a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083ad:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083b0:	0f b6 c0             	movzx  eax,al
c00083b3:	83 f8 02             	cmp    eax,0x2
c00083b6:	74 24                	je     c00083dc <pbuf_free+0x80>
c00083b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083bc:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083bf:	0f b6 c0             	movzx  eax,al
c00083c2:	83 f8 03             	cmp    eax,0x3
c00083c5:	74 15                	je     c00083dc <pbuf_free+0x80>
c00083c7:	83 ec 08             	sub    esp,0x8
c00083ca:	68 d3 fe 02 c0       	push   0xc002fed3
c00083cf:	68 26 fb 02 c0       	push   0xc002fb26
c00083d4:	e8 cb 77 01 00       	call   c001fba4 <CPrintf>
c00083d9:	83 c4 10             	add    esp,0x10
c00083dc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00083e1:	e9 3a 01 00 00       	jmp    c0008520 <pbuf_free+0x1c4>
c00083e6:	66 90                	xchg   ax,ax
c00083e8:	e8 a7 77 01 00       	call   c001fb94 <CLockScheduler>
c00083ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083f1:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00083f5:	0f b7 c0             	movzx  eax,ax
c00083f8:	85 c0                	test   eax,eax
c00083fa:	75 18                	jne    c0008414 <pbuf_free+0xb8>
c00083fc:	83 ec 08             	sub    esp,0x8
c00083ff:	68 e8 fe 02 c0       	push   0xc002fee8
c0008404:	68 26 fb 02 c0       	push   0xc002fb26
c0008409:	e8 96 77 01 00       	call   c001fba4 <CPrintf>
c000840e:	83 c4 10             	add    esp,0x10
c0008411:	8d 76 00             	lea    esi,[esi+0x0]
c0008414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008418:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000841c:	83 e8 01             	sub    eax,0x1
c000841f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008423:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000842b:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000842f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008434:	e8 3f 77 01 00       	call   c001fb78 <CUnlockScheduler>
c0008439:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000843e:	85 c0                	test   eax,eax
c0008440:	0f 85 d2 00 00 00    	jne    c0008518 <pbuf_free+0x1bc>
c0008446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000844a:	8b 00                	mov    eax,DWORD PTR [eax]
c000844c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008454:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008457:	0f b6 c0             	movzx  eax,al
c000845a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000845f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008463:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008466:	0f b6 c0             	movzx  eax,al
c0008469:	83 e0 02             	and    eax,0x2
c000846c:	74 3a                	je     c00084a8 <pbuf_free+0x14c>
c000846e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008472:	89 04 24             	mov    DWORD PTR [esp],eax
c0008475:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008478:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000847b:	85 c0                	test   eax,eax
c000847d:	75 15                	jne    c0008494 <pbuf_free+0x138>
c000847f:	83 ec 08             	sub    esp,0x8
c0008482:	68 f0 fc 02 c0       	push   0xc002fcf0
c0008487:	68 26 fb 02 c0       	push   0xc002fb26
c000848c:	e8 13 77 01 00       	call   c001fba4 <CPrintf>
c0008491:	83 c4 10             	add    esp,0x10
c0008494:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008497:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000849a:	83 ec 0c             	sub    esp,0xc
c000849d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00084a1:	ff d0                	call   eax
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	eb 58                	jmp    c0008500 <pbuf_free+0x1a4>
c00084a8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084ad:	83 f8 03             	cmp    eax,0x3
c00084b0:	75 16                	jne    c00084c8 <pbuf_free+0x16c>
c00084b2:	83 ec 08             	sub    esp,0x8
c00084b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084b9:	6a 0d                	push   0xd
c00084bb:	e8 e0 f5 ff ff       	call   c0007aa0 <memp_free>
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	eb 3b                	jmp    c0008500 <pbuf_free+0x1a4>
c00084c5:	8d 76 00             	lea    esi,[esi+0x0]
c00084c8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084cd:	83 f8 01             	cmp    eax,0x1
c00084d0:	74 0a                	je     c00084dc <pbuf_free+0x180>
c00084d2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084d7:	83 f8 02             	cmp    eax,0x2
c00084da:	75 14                	jne    c00084f0 <pbuf_free+0x194>
c00084dc:	83 ec 08             	sub    esp,0x8
c00084df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084e3:	6a 0c                	push   0xc
c00084e5:	e8 b6 f5 ff ff       	call   c0007aa0 <memp_free>
c00084ea:	83 c4 10             	add    esp,0x10
c00084ed:	eb 11                	jmp    c0008500 <pbuf_free+0x1a4>
c00084ef:	90                   	nop
c00084f0:	83 ec 0c             	sub    esp,0xc
c00084f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00084f7:	e8 80 eb ff ff       	call   c000707c <mem_free>
c00084fc:	83 c4 10             	add    esp,0x10
c00084ff:	90                   	nop
c0008500:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008504:	83 c0 01             	add    eax,0x1
c0008507:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000850b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000850f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008513:	eb 0b                	jmp    c0008520 <pbuf_free+0x1c4>
c0008515:	8d 76 00             	lea    esi,[esi+0x0]
c0008518:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008520:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008525:	0f 85 bd fe ff ff    	jne    c00083e8 <pbuf_free+0x8c>
c000852b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000852f:	90                   	nop
c0008530:	83 c4 1c             	add    esp,0x1c
c0008533:	c3                   	ret    

c0008534 <pbuf_alloc>:
c0008534:	83 ec 3c             	sub    esp,0x3c
c0008537:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000853b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008540:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0008547:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c000854c:	74 2a                	je     c0008578 <pbuf_alloc+0x44>
c000854e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008553:	74 13                	je     c0008568 <pbuf_alloc+0x34>
c0008555:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c000855a:	74 2c                	je     c0008588 <pbuf_alloc+0x54>
c000855c:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c0008561:	74 55                	je     c00085b8 <pbuf_alloc+0x84>
c0008563:	eb 33                	jmp    c0008598 <pbuf_alloc+0x64>
c0008565:	8d 76 00             	lea    esi,[esi+0x0]
c0008568:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000856d:	83 c0 14             	add    eax,0x14
c0008570:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008575:	8d 76 00             	lea    esi,[esi+0x0]
c0008578:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000857d:	83 c0 14             	add    eax,0x14
c0008580:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008585:	8d 76 00             	lea    esi,[esi+0x0]
c0008588:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000858d:	83 c0 0e             	add    eax,0xe
c0008590:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008595:	eb 25                	jmp    c00085bc <pbuf_alloc+0x88>
c0008597:	90                   	nop
c0008598:	83 ec 08             	sub    esp,0x8
c000859b:	68 fe fe 02 c0       	push   0xc002fefe
c00085a0:	68 26 fb 02 c0       	push   0xc002fb26
c00085a5:	e8 fa 75 01 00       	call   c001fba4 <CPrintf>
c00085aa:	83 c4 10             	add    esp,0x10
c00085ad:	b8 00 00 00 00       	mov    eax,0x0
c00085b2:	e9 71 03 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c00085b7:	90                   	nop
c00085b8:	90                   	nop
c00085b9:	8d 76 00             	lea    esi,[esi+0x0]
c00085bc:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c00085c1:	77 11                	ja     c00085d4 <pbuf_alloc+0xa0>
c00085c3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00085c8:	0f 85 c6 02 00 00    	jne    c0008894 <pbuf_alloc+0x360>
c00085ce:	e9 41 02 00 00       	jmp    c0008814 <pbuf_alloc+0x2e0>
c00085d3:	90                   	nop
c00085d4:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c00085d9:	0f 85 15 03 00 00    	jne    c00088f4 <pbuf_alloc+0x3c0>
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	6a 0d                	push   0xd
c00085e4:	e8 8b f3 ff ff       	call   c0007974 <memp_malloc>
c00085e9:	83 c4 10             	add    esp,0x10
c00085ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00085f0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00085f5:	75 11                	jne    c0008608 <pbuf_alloc+0xd4>
c00085f7:	e8 44 fa ff ff       	call   c0008040 <pbuf_pool_is_empty>
c00085fc:	b8 00 00 00 00       	mov    eax,0x0
c0008601:	e9 22 03 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c0008606:	66 90                	xchg   ax,ax
c0008608:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000860c:	88 c2                	mov    dl,al
c000860e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008612:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008615:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008619:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000861f:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008624:	8d 50 10             	lea    edx,[eax+0x10]
c0008627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000862b:	01 c2                	add    edx,eax
c000862d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008631:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008634:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000863c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008640:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008645:	ba 4e 02 00 00       	mov    edx,0x24e
c000864a:	29 c2                	sub    edx,eax
c000864c:	89 d0                	mov    eax,edx
c000864e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008653:	39 d0                	cmp    eax,edx
c0008655:	7e 05                	jle    c000865c <pbuf_alloc+0x128>
c0008657:	89 d0                	mov    eax,edx
c0008659:	8d 76 00             	lea    esi,[esi+0x0]
c000865c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008660:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008664:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008668:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000866b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000866f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008673:	0f b7 c0             	movzx  eax,ax
c0008676:	01 c2                	add    edx,eax
c0008678:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000867c:	05 5e 02 00 00       	add    eax,0x25e
c0008681:	39 c2                	cmp    edx,eax
c0008683:	76 17                	jbe    c000869c <pbuf_alloc+0x168>
c0008685:	83 ec 08             	sub    esp,0x8
c0008688:	68 14 fd 02 c0       	push   0xc002fd14
c000868d:	68 26 fb 02 c0       	push   0xc002fb26
c0008692:	e8 0d 75 01 00       	call   c001fba4 <CPrintf>
c0008697:	83 c4 10             	add    esp,0x10
c000869a:	66 90                	xchg   ax,ax
c000869c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00086a1:	ba 4e 02 00 00       	mov    edx,0x24e
c00086a6:	29 c2                	sub    edx,eax
c00086a8:	89 d0                	mov    eax,edx
c00086aa:	85 c0                	test   eax,eax
c00086ac:	7f 16                	jg     c00086c4 <pbuf_alloc+0x190>
c00086ae:	83 ec 08             	sub    esp,0x8
c00086b1:	68 48 fd 02 c0       	push   0xc002fd48
c00086b6:	68 26 fb 02 c0       	push   0xc002fb26
c00086bb:	e8 e4 74 01 00       	call   c001fba4 <CPrintf>
c00086c0:	83 c4 10             	add    esp,0x10
c00086c3:	90                   	nop
c00086c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086c8:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00086ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00086d6:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00086db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086df:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00086e3:	0f b7 c0             	movzx  eax,ax
c00086e6:	29 c2                	sub    edx,eax
c00086e8:	89 d0                	mov    eax,edx
c00086ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086ee:	e9 11 01 00 00       	jmp    c0008804 <pbuf_alloc+0x2d0>
c00086f3:	90                   	nop
c00086f4:	83 ec 0c             	sub    esp,0xc
c00086f7:	6a 0d                	push   0xd
c00086f9:	e8 76 f2 ff ff       	call   c0007974 <memp_malloc>
c00086fe:	83 c4 10             	add    esp,0x10
c0008701:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008705:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000870a:	75 20                	jne    c000872c <pbuf_alloc+0x1f8>
c000870c:	e8 2f f9 ff ff       	call   c0008040 <pbuf_pool_is_empty>
c0008711:	83 ec 0c             	sub    esp,0xc
c0008714:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008718:	e8 3f fc ff ff       	call   c000835c <pbuf_free>
c000871d:	83 c4 10             	add    esp,0x10
c0008720:	b8 00 00 00 00       	mov    eax,0x0
c0008725:	e9 fe 01 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c000872a:	66 90                	xchg   ax,ax
c000872c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008730:	88 c2                	mov    dl,al
c0008732:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008736:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008739:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000873d:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008741:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008745:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000874b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000874f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008753:	89 10                	mov    DWORD PTR [eax],edx
c0008755:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c000875d:	7e 15                	jle    c0008774 <pbuf_alloc+0x240>
c000875f:	83 ec 08             	sub    esp,0x8
c0008762:	68 19 ff 02 c0       	push   0xc002ff19
c0008767:	68 26 fb 02 c0       	push   0xc002fb26
c000876c:	e8 33 74 01 00       	call   c001fba4 <CPrintf>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008778:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000877c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008784:	0f b7 d0             	movzx  edx,ax
c0008787:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c000878d:	76 05                	jbe    c0008794 <pbuf_alloc+0x260>
c000878f:	b8 4e 02 00 00       	mov    eax,0x24e
c0008794:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008798:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000879c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087a0:	8d 50 10             	lea    edx,[eax+0x10]
c00087a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00087b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00087b9:	0f b7 c0             	movzx  eax,ax
c00087bc:	01 c2                	add    edx,eax
c00087be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c2:	05 5e 02 00 00       	add    eax,0x25e
c00087c7:	39 c2                	cmp    edx,eax
c00087c9:	76 15                	jbe    c00087e0 <pbuf_alloc+0x2ac>
c00087cb:	83 ec 08             	sub    esp,0x8
c00087ce:	68 14 fd 02 c0       	push   0xc002fd14
c00087d3:	68 26 fb 02 c0       	push   0xc002fb26
c00087d8:	e8 c7 73 01 00       	call   c001fba4 <CPrintf>
c00087dd:	83 c4 10             	add    esp,0x10
c00087e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087e4:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00087ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087ee:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00087f2:	0f b7 c0             	movzx  eax,ax
c00087f5:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c00087f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008801:	8d 76 00             	lea    esi,[esi+0x0]
c0008804:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008809:	0f 8f e5 fe ff ff    	jg     c00086f4 <pbuf_alloc+0x1c0>
c000880f:	e9 fc 00 00 00       	jmp    c0008910 <pbuf_alloc+0x3dc>
c0008814:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c0008819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881d:	01 d0                	add    eax,edx
c000881f:	83 c0 10             	add    eax,0x10
c0008822:	0f b7 c0             	movzx  eax,ax
c0008825:	83 ec 0c             	sub    esp,0xc
c0008828:	50                   	push   eax
c0008829:	e8 82 ec ff ff       	call   c00074b0 <mem_malloc>
c000882e:	83 c4 10             	add    esp,0x10
c0008831:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008835:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000883a:	75 0c                	jne    c0008848 <pbuf_alloc+0x314>
c000883c:	b8 00 00 00 00       	mov    eax,0x0
c0008841:	e9 e2 00 00 00       	jmp    c0008928 <pbuf_alloc+0x3f4>
c0008846:	66 90                	xchg   ax,ax
c0008848:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c000884d:	8d 50 10             	lea    edx,[eax+0x10]
c0008850:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008854:	01 c2                	add    edx,eax
c0008856:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000885a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000885d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008865:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008869:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008870:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008874:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000887c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008882:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008886:	88 c2                	mov    dl,al
c0008888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000888c:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000888f:	eb 7f                	jmp    c0008910 <pbuf_alloc+0x3dc>
c0008891:	8d 76 00             	lea    esi,[esi+0x0]
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	6a 0c                	push   0xc
c0008899:	e8 d6 f0 ff ff       	call   c0007974 <memp_malloc>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00088a5:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00088aa:	75 08                	jne    c00088b4 <pbuf_alloc+0x380>
c00088ac:	b8 00 00 00 00       	mov    eax,0x0
c00088b1:	eb 75                	jmp    c0008928 <pbuf_alloc+0x3f4>
c00088b3:	90                   	nop
c00088b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00088bf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00088c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088c7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00088cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00088d2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00088d6:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00088da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088e8:	88 c2                	mov    dl,al
c00088ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088ee:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088f1:	eb 1d                	jmp    c0008910 <pbuf_alloc+0x3dc>
c00088f3:	90                   	nop
c00088f4:	83 ec 08             	sub    esp,0x8
c00088f7:	68 2d ff 02 c0       	push   0xc002ff2d
c00088fc:	68 26 fb 02 c0       	push   0xc002fb26
c0008901:	e8 9e 72 01 00       	call   c001fba4 <CPrintf>
c0008906:	83 c4 10             	add    esp,0x10
c0008909:	b8 00 00 00 00       	mov    eax,0x0
c000890e:	eb 18                	jmp    c0008928 <pbuf_alloc+0x3f4>
c0008910:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008914:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000891a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000891e:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008922:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008926:	66 90                	xchg   ax,ax
c0008928:	83 c4 3c             	add    esp,0x3c
c000892b:	c3                   	ret    

c000892c <pbuf_realloc>:
c000892c:	83 ec 2c             	sub    esp,0x2c
c000892f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008933:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008938:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000893d:	75 15                	jne    c0008954 <pbuf_realloc+0x28>
c000893f:	83 ec 08             	sub    esp,0x8
c0008942:	68 48 ff 02 c0       	push   0xc002ff48
c0008947:	68 26 fb 02 c0       	push   0xc002fb26
c000894c:	e8 53 72 01 00       	call   c001fba4 <CPrintf>
c0008951:	83 c4 10             	add    esp,0x10
c0008954:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008958:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000895b:	0f b6 c0             	movzx  eax,al
c000895e:	83 f8 03             	cmp    eax,0x3
c0008961:	74 41                	je     c00089a4 <pbuf_realloc+0x78>
c0008963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008967:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000896a:	0f b6 c0             	movzx  eax,al
c000896d:	83 f8 01             	cmp    eax,0x1
c0008970:	74 32                	je     c00089a4 <pbuf_realloc+0x78>
c0008972:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008976:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008979:	0f b6 c0             	movzx  eax,al
c000897c:	85 c0                	test   eax,eax
c000897e:	74 24                	je     c00089a4 <pbuf_realloc+0x78>
c0008980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008984:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008987:	0f b6 c0             	movzx  eax,al
c000898a:	83 f8 02             	cmp    eax,0x2
c000898d:	74 15                	je     c00089a4 <pbuf_realloc+0x78>
c000898f:	83 ec 08             	sub    esp,0x8
c0008992:	68 60 ff 02 c0       	push   0xc002ff60
c0008997:	68 26 fb 02 c0       	push   0xc002fb26
c000899c:	e8 03 72 01 00       	call   c001fba4 <CPrintf>
c00089a1:	83 c4 10             	add    esp,0x10
c00089a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089ab:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089b0:	0f b7 c0             	movzx  eax,ax
c00089b3:	39 c2                	cmp    edx,eax
c00089b5:	0f 83 6d 01 00 00    	jae    c0008b28 <pbuf_realloc+0x1fc>
c00089bb:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089c7:	0f b7 c0             	movzx  eax,ax
c00089ca:	29 c2                	sub    edx,eax
c00089cc:	89 d0                	mov    eax,edx
c00089ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089d6:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00089db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089e3:	eb 77                	jmp    c0008a5c <pbuf_realloc+0x130>
c00089e5:	8d 76 00             	lea    esi,[esi+0x0]
c00089e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089ec:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089f0:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00089f5:	89 d1                	mov    ecx,edx
c00089f7:	29 c1                	sub    ecx,eax
c00089f9:	89 c8                	mov    eax,ecx
c00089fb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008a00:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008a08:	7e 16                	jle    c0008a20 <pbuf_realloc+0xf4>
c0008a0a:	83 ec 08             	sub    esp,0x8
c0008a0d:	68 7b ff 02 c0       	push   0xc002ff7b
c0008a12:	68 26 fb 02 c0       	push   0xc002fb26
c0008a17:	e8 88 71 01 00       	call   c001fba4 <CPrintf>
c0008a1c:	83 c4 10             	add    esp,0x10
c0008a1f:	90                   	nop
c0008a20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008a2b:	01 d0                	add    eax,edx
c0008a2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008a31:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a3f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008a44:	75 16                	jne    c0008a5c <pbuf_realloc+0x130>
c0008a46:	83 ec 08             	sub    esp,0x8
c0008a49:	68 8c ff 02 c0       	push   0xc002ff8c
c0008a4e:	68 26 fb 02 c0       	push   0xc002fb26
c0008a53:	e8 4c 71 01 00       	call   c001fba4 <CPrintf>
c0008a58:	83 c4 10             	add    esp,0x10
c0008a5b:	90                   	nop
c0008a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a60:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a64:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a69:	0f b7 c0             	movzx  eax,ax
c0008a6c:	39 c2                	cmp    edx,eax
c0008a6e:	0f 87 74 ff ff ff    	ja     c00089e8 <pbuf_realloc+0xbc>
c0008a74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a78:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008a7b:	0f b6 c0             	movzx  eax,al
c0008a7e:	85 c0                	test   eax,eax
c0008a80:	75 5e                	jne    c0008ae0 <pbuf_realloc+0x1b4>
c0008a82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a86:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a8a:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a8f:	0f b7 c0             	movzx  eax,ax
c0008a92:	39 c2                	cmp    edx,eax
c0008a94:	74 4a                	je     c0008ae0 <pbuf_realloc+0x1b4>
c0008a96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008a9d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008aa1:	89 c2                	mov    edx,eax
c0008aa3:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008aa8:	01 d0                	add    eax,edx
c0008aaa:	0f b7 c0             	movzx  eax,ax
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	50                   	push   eax
c0008ab1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008ab5:	e8 e6 e6 ff ff       	call   c00071a0 <mem_trim>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008ac6:	75 18                	jne    c0008ae0 <pbuf_realloc+0x1b4>
c0008ac8:	83 ec 08             	sub    esp,0x8
c0008acb:	68 a4 ff 02 c0       	push   0xc002ffa4
c0008ad0:	68 26 fb 02 c0       	push   0xc002fb26
c0008ad5:	e8 ca 70 01 00       	call   c001fba4 <CPrintf>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	8d 76 00             	lea    esi,[esi+0x0]
c0008ae0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ae4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008ae9:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008aed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008af1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008af5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008af9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b03:	85 c0                	test   eax,eax
c0008b05:	74 15                	je     c0008b1c <pbuf_realloc+0x1f0>
c0008b07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b0d:	83 ec 0c             	sub    esp,0xc
c0008b10:	50                   	push   eax
c0008b11:	e8 46 f8 ff ff       	call   c000835c <pbuf_free>
c0008b16:	83 c4 10             	add    esp,0x10
c0008b19:	8d 76 00             	lea    esi,[esi+0x0]
c0008b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008b26:	eb 04                	jmp    c0008b2c <pbuf_realloc+0x200>
c0008b28:	90                   	nop
c0008b29:	8d 76 00             	lea    esi,[esi+0x0]
c0008b2c:	83 c4 2c             	add    esp,0x2c
c0008b2f:	c3                   	ret    

c0008b30 <pbuf_clen>:
c0008b30:	83 ec 10             	sub    esp,0x10
c0008b33:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b38:	eb 1a                	jmp    c0008b54 <pbuf_clen+0x24>
c0008b3a:	66 90                	xchg   ax,ax
c0008b3c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b40:	83 c0 01             	add    eax,0x1
c0008b43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b51:	8d 76 00             	lea    esi,[esi+0x0]
c0008b54:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008b59:	75 e1                	jne    c0008b3c <pbuf_clen+0xc>
c0008b5b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b5f:	83 c4 10             	add    esp,0x10
c0008b62:	c3                   	ret    
c0008b63:	90                   	nop

c0008b64 <pbuf_ref>:
c0008b64:	83 ec 0c             	sub    esp,0xc
c0008b67:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008b6c:	74 1e                	je     c0008b8c <pbuf_ref+0x28>
c0008b6e:	e8 21 70 01 00       	call   c001fb94 <CLockScheduler>
c0008b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b77:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008b7b:	83 c0 01             	add    eax,0x1
c0008b7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b82:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008b86:	e8 ed 6f 01 00       	call   c001fb78 <CUnlockScheduler>
c0008b8b:	90                   	nop
c0008b8c:	90                   	nop
c0008b8d:	83 c4 0c             	add    esp,0xc
c0008b90:	c3                   	ret    
c0008b91:	8d 76 00             	lea    esi,[esi+0x0]

c0008b94 <pbuf_cat>:
c0008b94:	83 ec 1c             	sub    esp,0x1c
c0008b97:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008b9c:	74 0a                	je     c0008ba8 <pbuf_cat+0x14>
c0008b9e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ba3:	75 1f                	jne    c0008bc4 <pbuf_cat+0x30>
c0008ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0008ba8:	83 ec 08             	sub    esp,0x8
c0008bab:	68 7c fd 02 c0       	push   0xc002fd7c
c0008bb0:	68 26 fb 02 c0       	push   0xc002fb26
c0008bb5:	e8 ea 6f 01 00       	call   c001fba4 <CPrintf>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	e9 ae 00 00 00       	jmp    c0008c70 <pbuf_cat+0xdc>
c0008bc2:	66 90                	xchg   ax,ax
c0008bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008bcc:	eb 26                	jmp    c0008bf4 <pbuf_cat+0x60>
c0008bce:	66 90                	xchg   ax,ax
c0008bd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bd4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008bdb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bde:	01 d0                	add    eax,edx
c0008be0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008be4:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008be8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008bf2:	66 90                	xchg   ax,ax
c0008bf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bfa:	85 c0                	test   eax,eax
c0008bfc:	75 d2                	jne    c0008bd0 <pbuf_cat+0x3c>
c0008bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c02:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c09:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c0d:	0f b7 d2             	movzx  edx,dx
c0008c10:	0f b7 c0             	movzx  eax,ax
c0008c13:	39 c2                	cmp    edx,eax
c0008c15:	74 15                	je     c0008c2c <pbuf_cat+0x98>
c0008c17:	83 ec 08             	sub    esp,0x8
c0008c1a:	68 b4 fd 02 c0       	push   0xc002fdb4
c0008c1f:	68 26 fb 02 c0       	push   0xc002fb26
c0008c24:	e8 7b 6f 01 00       	call   c001fba4 <CPrintf>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c32:	85 c0                	test   eax,eax
c0008c34:	74 16                	je     c0008c4c <pbuf_cat+0xb8>
c0008c36:	83 ec 08             	sub    esp,0x8
c0008c39:	68 c0 ff 02 c0       	push   0xc002ffc0
c0008c3e:	68 26 fb 02 c0       	push   0xc002fb26
c0008c43:	e8 5c 6f 01 00       	call   c001fba4 <CPrintf>
c0008c48:	83 c4 10             	add    esp,0x10
c0008c4b:	90                   	nop
c0008c4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008c57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c5a:	01 d0                	add    eax,edx
c0008c5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008c60:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c68:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c6c:	89 10                	mov    DWORD PTR [eax],edx
c0008c6e:	66 90                	xchg   ax,ax
c0008c70:	83 c4 1c             	add    esp,0x1c
c0008c73:	c3                   	ret    

c0008c74 <pbuf_chain>:
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	83 ec 08             	sub    esp,0x8
c0008c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c82:	e8 0d ff ff ff       	call   c0008b94 <pbuf_cat>
c0008c87:	83 c4 10             	add    esp,0x10
c0008c8a:	83 ec 0c             	sub    esp,0xc
c0008c8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c91:	e8 ce fe ff ff       	call   c0008b64 <pbuf_ref>
c0008c96:	83 c4 10             	add    esp,0x10
c0008c99:	90                   	nop
c0008c9a:	83 c4 0c             	add    esp,0xc
c0008c9d:	c3                   	ret    
c0008c9e:	66 90                	xchg   ax,ax

c0008ca0 <pbuf_dechain>:
c0008ca0:	83 ec 1c             	sub    esp,0x1c
c0008ca3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008cb7:	0f 84 8b 00 00 00    	je     c0008d48 <pbuf_dechain+0xa8>
c0008cbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008cc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cc4:	0f b7 d0             	movzx  edx,ax
c0008cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ccb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cce:	0f b7 c8             	movzx  ecx,ax
c0008cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008cd9:	0f b7 c0             	movzx  eax,ax
c0008cdc:	29 c1                	sub    ecx,eax
c0008cde:	89 c8                	mov    eax,ecx
c0008ce0:	39 c2                	cmp    edx,eax
c0008ce2:	74 18                	je     c0008cfc <pbuf_dechain+0x5c>
c0008ce4:	83 ec 08             	sub    esp,0x8
c0008ce7:	68 e4 fd 02 c0       	push   0xc002fde4
c0008cec:	68 26 fb 02 c0       	push   0xc002fb26
c0008cf1:	e8 ae 6e 01 00       	call   c001fba4 <CPrintf>
c0008cf6:	83 c4 10             	add    esp,0x10
c0008cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d00:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d07:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d0b:	89 d1                	mov    ecx,edx
c0008d0d:	29 c1                	sub    ecx,eax
c0008d0f:	89 c8                	mov    eax,ecx
c0008d11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008d15:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008d23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d27:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008d2f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d33:	83 ec 0c             	sub    esp,0xc
c0008d36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3a:	e8 1d f6 ff ff       	call   c000835c <pbuf_free>
c0008d3f:	83 c4 10             	add    esp,0x10
c0008d42:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008d46:	66 90                	xchg   ax,ax
c0008d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d4c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d53:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d57:	0f b7 d2             	movzx  edx,dx
c0008d5a:	0f b7 c0             	movzx  eax,ax
c0008d5d:	39 c2                	cmp    edx,eax
c0008d5f:	74 17                	je     c0008d78 <pbuf_dechain+0xd8>
c0008d61:	83 ec 08             	sub    esp,0x8
c0008d64:	68 d0 ff 02 c0       	push   0xc002ffd0
c0008d69:	68 26 fb 02 c0       	push   0xc002fb26
c0008d6e:	e8 31 6e 01 00       	call   c001fba4 <CPrintf>
c0008d73:	83 c4 10             	add    esp,0x10
c0008d76:	66 90                	xchg   ax,ax
c0008d78:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008d7d:	85 c0                	test   eax,eax
c0008d7f:	75 07                	jne    c0008d88 <pbuf_dechain+0xe8>
c0008d81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d85:	eb 09                	jmp    c0008d90 <pbuf_dechain+0xf0>
c0008d87:	90                   	nop
c0008d88:	b8 00 00 00 00       	mov    eax,0x0
c0008d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d90:	83 c4 1c             	add    esp,0x1c
c0008d93:	c3                   	ret    

c0008d94 <pbuf_copy>:
c0008d94:	53                   	push   ebx
c0008d95:	83 ec 18             	sub    esp,0x18
c0008d98:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008d9f:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008da6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008dab:	74 1f                	je     c0008dcc <pbuf_copy+0x38>
c0008dad:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008db2:	74 18                	je     c0008dcc <pbuf_copy+0x38>
c0008db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008db8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008dbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008dc2:	0f b7 d2             	movzx  edx,dx
c0008dc5:	0f b7 c0             	movzx  eax,ax
c0008dc8:	39 c2                	cmp    edx,eax
c0008dca:	73 1c                	jae    c0008de8 <pbuf_copy+0x54>
c0008dcc:	83 ec 08             	sub    esp,0x8
c0008dcf:	68 08 fe 02 c0       	push   0xc002fe08
c0008dd4:	68 26 fb 02 c0       	push   0xc002fb26
c0008dd9:	e8 c6 6d 01 00       	call   c001fba4 <CPrintf>
c0008dde:	83 c4 10             	add    esp,0x10
c0008de1:	b0 f2                	mov    al,0xf2
c0008de3:	e9 0c 02 00 00       	jmp    c0008ff4 <pbuf_copy+0x260>
c0008de8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ded:	75 15                	jne    c0008e04 <pbuf_copy+0x70>
c0008def:	83 ec 08             	sub    esp,0x8
c0008df2:	68 e5 ff 02 c0       	push   0xc002ffe5
c0008df7:	68 26 fb 02 c0       	push   0xc002fb26
c0008dfc:	e8 a3 6d 01 00       	call   c001fba4 <CPrintf>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e08:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e0c:	0f b7 d0             	movzx  edx,ax
c0008e0f:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008e14:	89 d1                	mov    ecx,edx
c0008e16:	29 c1                	sub    ecx,eax
c0008e18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e1c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e20:	0f b7 d0             	movzx  edx,ax
c0008e23:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008e28:	29 c2                	sub    edx,eax
c0008e2a:	89 d0                	mov    eax,edx
c0008e2c:	39 c1                	cmp    ecx,eax
c0008e2e:	7c 1c                	jl     c0008e4c <pbuf_copy+0xb8>
c0008e30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e34:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e3c:	89 d3                	mov    ebx,edx
c0008e3e:	29 c3                	sub    ebx,eax
c0008e40:	89 d8                	mov    eax,ebx
c0008e42:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e47:	eb 1b                	jmp    c0008e64 <pbuf_copy+0xd0>
c0008e49:	8d 76 00             	lea    esi,[esi+0x0]
c0008e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e50:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e54:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008e59:	89 d3                	mov    ebx,edx
c0008e5b:	29 c3                	sub    ebx,eax
c0008e5d:	89 d8                	mov    eax,ebx
c0008e5f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e64:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008e69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e6d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008e70:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e75:	01 d1                	add    ecx,edx
c0008e77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008e7b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008e7e:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e83:	01 da                	add    edx,ebx
c0008e85:	83 ec 04             	sub    esp,0x4
c0008e88:	50                   	push   eax
c0008e89:	51                   	push   ecx
c0008e8a:	52                   	push   edx
c0008e8b:	e8 ea 74 ff ff       	call   c000037a <memcpy>
c0008e90:	83 c4 10             	add    esp,0x10
c0008e93:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008e98:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008e9d:	01 d0                	add    eax,edx
c0008e9f:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008ea4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ea8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008ead:	01 d0                	add    eax,edx
c0008eaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eb8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ebc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008ec1:	0f b7 c0             	movzx  eax,ax
c0008ec4:	39 c2                	cmp    edx,eax
c0008ec6:	76 18                	jbe    c0008ee0 <pbuf_copy+0x14c>
c0008ec8:	83 ec 08             	sub    esp,0x8
c0008ecb:	68 f2 ff 02 c0       	push   0xc002fff2
c0008ed0:	68 26 fb 02 c0       	push   0xc002fb26
c0008ed5:	e8 ca 6c 01 00       	call   c001fba4 <CPrintf>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	8d 76 00             	lea    esi,[esi+0x0]
c0008ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ee8:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008eed:	0f b7 c0             	movzx  eax,ax
c0008ef0:	39 c2                	cmp    edx,eax
c0008ef2:	75 14                	jne    c0008f08 <pbuf_copy+0x174>
c0008ef4:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eff:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f05:	8d 76 00             	lea    esi,[esi+0x0]
c0008f08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f0c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f10:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f15:	0f b7 c0             	movzx  eax,ax
c0008f18:	39 c2                	cmp    edx,eax
c0008f1a:	76 18                	jbe    c0008f34 <pbuf_copy+0x1a0>
c0008f1c:	83 ec 08             	sub    esp,0x8
c0008f1f:	68 09 00 03 c0       	push   0xc0030009
c0008f24:	68 26 fb 02 c0       	push   0xc002fb26
c0008f29:	e8 76 6c 01 00       	call   c001fba4 <CPrintf>
c0008f2e:	83 c4 10             	add    esp,0x10
c0008f31:	8d 76 00             	lea    esi,[esi+0x0]
c0008f34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f38:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f3c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f41:	0f b7 c0             	movzx  eax,ax
c0008f44:	39 c2                	cmp    edx,eax
c0008f46:	72 14                	jb     c0008f5c <pbuf_copy+0x1c8>
c0008f48:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f53:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008f59:	8d 76 00             	lea    esi,[esi+0x0]
c0008f5c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f61:	74 3d                	je     c0008fa0 <pbuf_copy+0x20c>
c0008f63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f67:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008f6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f72:	0f b7 d2             	movzx  edx,dx
c0008f75:	0f b7 c0             	movzx  eax,ax
c0008f78:	39 c2                	cmp    edx,eax
c0008f7a:	75 24                	jne    c0008fa0 <pbuf_copy+0x20c>
c0008f7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f80:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f82:	85 c0                	test   eax,eax
c0008f84:	74 1a                	je     c0008fa0 <pbuf_copy+0x20c>
c0008f86:	83 ec 08             	sub    esp,0x8
c0008f89:	68 38 fe 02 c0       	push   0xc002fe38
c0008f8e:	68 26 fb 02 c0       	push   0xc002fb26
c0008f93:	e8 0c 6c 01 00       	call   c001fba4 <CPrintf>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	b0 fa                	mov    al,0xfa
c0008f9d:	eb 55                	jmp    c0008ff4 <pbuf_copy+0x260>
c0008f9f:	90                   	nop
c0008fa0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008fa5:	74 3d                	je     c0008fe4 <pbuf_copy+0x250>
c0008fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fab:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fb3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008fb6:	0f b7 d2             	movzx  edx,dx
c0008fb9:	0f b7 c0             	movzx  eax,ax
c0008fbc:	39 c2                	cmp    edx,eax
c0008fbe:	75 24                	jne    c0008fe4 <pbuf_copy+0x250>
c0008fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fc6:	85 c0                	test   eax,eax
c0008fc8:	74 1a                	je     c0008fe4 <pbuf_copy+0x250>
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	68 38 fe 02 c0       	push   0xc002fe38
c0008fd2:	68 26 fb 02 c0       	push   0xc002fb26
c0008fd7:	e8 c8 6b 01 00       	call   c001fba4 <CPrintf>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	b0 fa                	mov    al,0xfa
c0008fe1:	eb 11                	jmp    c0008ff4 <pbuf_copy+0x260>
c0008fe3:	90                   	nop
c0008fe4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008fe9:	0f 85 f9 fd ff ff    	jne    c0008de8 <pbuf_copy+0x54>
c0008fef:	b0 00                	mov    al,0x0
c0008ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0008ff4:	83 c4 18             	add    esp,0x18
c0008ff7:	5b                   	pop    ebx
c0008ff8:	c3                   	ret    
c0008ff9:	8d 76 00             	lea    esi,[esi+0x0]

c0008ffc <pbuf_copy_partial>:
c0008ffc:	53                   	push   ebx
c0008ffd:	83 ec 28             	sub    esp,0x28
c0009000:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009004:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009008:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000900d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009012:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009019:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000901e:	75 20                	jne    c0009040 <pbuf_copy_partial+0x44>
c0009020:	83 ec 08             	sub    esp,0x8
c0009023:	68 64 fe 02 c0       	push   0xc002fe64
c0009028:	68 26 fb 02 c0       	push   0xc002fb26
c000902d:	e8 72 6b 01 00       	call   c001fba4 <CPrintf>
c0009032:	83 c4 10             	add    esp,0x10
c0009035:	b8 00 00 00 00       	mov    eax,0x0
c000903a:	e9 59 01 00 00       	jmp    c0009198 <pbuf_copy_partial+0x19c>
c000903f:	90                   	nop
c0009040:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009045:	75 21                	jne    c0009068 <pbuf_copy_partial+0x6c>
c0009047:	83 ec 08             	sub    esp,0x8
c000904a:	68 84 fe 02 c0       	push   0xc002fe84
c000904f:	68 26 fb 02 c0       	push   0xc002fb26
c0009054:	e8 4b 6b 01 00       	call   c001fba4 <CPrintf>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	b8 00 00 00 00       	mov    eax,0x0
c0009061:	e9 32 01 00 00       	jmp    c0009198 <pbuf_copy_partial+0x19c>
c0009066:	66 90                	xchg   ax,ax
c0009068:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c000906f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009074:	74 0a                	je     c0009080 <pbuf_copy_partial+0x84>
c0009076:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000907b:	75 0f                	jne    c000908c <pbuf_copy_partial+0x90>
c000907d:	8d 76 00             	lea    esi,[esi+0x0]
c0009080:	b8 00 00 00 00       	mov    eax,0x0
c0009085:	e9 0e 01 00 00       	jmp    c0009198 <pbuf_copy_partial+0x19c>
c000908a:	66 90                	xchg   ax,ax
c000908c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009090:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009094:	e9 e3 00 00 00       	jmp    c000917c <pbuf_copy_partial+0x180>
c0009099:	8d 76 00             	lea    esi,[esi+0x0]
c000909c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00090a1:	85 c0                	test   eax,eax
c00090a3:	74 33                	je     c00090d8 <pbuf_copy_partial+0xdc>
c00090a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090a9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090ad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00090b2:	0f b7 c0             	movzx  eax,ax
c00090b5:	39 c2                	cmp    edx,eax
c00090b7:	72 1f                	jb     c00090d8 <pbuf_copy_partial+0xdc>
c00090b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090bd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090c5:	89 d3                	mov    ebx,edx
c00090c7:	29 c3                	sub    ebx,eax
c00090c9:	89 d8                	mov    eax,ebx
c00090cb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00090d0:	e9 9b 00 00 00       	jmp    c0009170 <pbuf_copy_partial+0x174>
c00090d5:	8d 76 00             	lea    esi,[esi+0x0]
c00090d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090dc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00090e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00090e4:	89 d1                	mov    ecx,edx
c00090e6:	29 c1                	sub    ecx,eax
c00090e8:	89 c8                	mov    eax,ecx
c00090ea:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00090ef:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c00090f4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00090f9:	39 c2                	cmp    edx,eax
c00090fb:	76 0b                	jbe    c0009108 <pbuf_copy_partial+0x10c>
c00090fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009101:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009106:	66 90                	xchg   ax,ax
c0009108:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000910d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009111:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009114:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009119:	01 d1                	add    ecx,edx
c000911b:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c0009120:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009124:	01 da                	add    edx,ebx
c0009126:	83 ec 04             	sub    esp,0x4
c0009129:	50                   	push   eax
c000912a:	51                   	push   ecx
c000912b:	52                   	push   edx
c000912c:	e8 49 72 ff ff       	call   c000037a <memcpy>
c0009131:	83 c4 10             	add    esp,0x10
c0009134:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000913d:	01 d0                	add    eax,edx
c000913f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009144:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0009149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000914d:	01 d0                	add    eax,edx
c000914f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009154:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009158:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000915c:	89 d3                	mov    ebx,edx
c000915e:	29 c3                	sub    ebx,eax
c0009160:	89 d8                	mov    eax,ebx
c0009162:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009167:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c000916e:	66 90                	xchg   ax,ax
c0009170:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009174:	8b 00                	mov    eax,DWORD PTR [eax]
c0009176:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000917a:	66 90                	xchg   ax,ax
c000917c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009181:	85 c0                	test   eax,eax
c0009183:	74 0b                	je     c0009190 <pbuf_copy_partial+0x194>
c0009185:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000918a:	0f 85 0c ff ff ff    	jne    c000909c <pbuf_copy_partial+0xa0>
c0009190:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009195:	8d 76 00             	lea    esi,[esi+0x0]
c0009198:	83 c4 28             	add    esp,0x28
c000919b:	5b                   	pop    ebx
c000919c:	c3                   	ret    
c000919d:	8d 76 00             	lea    esi,[esi+0x0]

c00091a0 <pbuf_take>:
c00091a0:	83 ec 2c             	sub    esp,0x2c
c00091a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00091a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00091ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091b0:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00091b5:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091bc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091c1:	75 1d                	jne    c00091e0 <pbuf_take+0x40>
c00091c3:	83 ec 08             	sub    esp,0x8
c00091c6:	68 24 00 03 c0       	push   0xc0030024
c00091cb:	68 26 fb 02 c0       	push   0xc002fb26
c00091d0:	e8 cf 69 01 00       	call   c001fba4 <CPrintf>
c00091d5:	83 c4 10             	add    esp,0x10
c00091d8:	b0 00                	mov    al,0x0
c00091da:	e9 3d 01 00 00       	jmp    c000931c <pbuf_take+0x17c>
c00091df:	90                   	nop
c00091e0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00091e5:	75 1d                	jne    c0009204 <pbuf_take+0x64>
c00091e7:	83 ec 08             	sub    esp,0x8
c00091ea:	68 3b 00 03 c0       	push   0xc003003b
c00091ef:	68 26 fb 02 c0       	push   0xc002fb26
c00091f4:	e8 ab 69 01 00       	call   c001fba4 <CPrintf>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	b0 00                	mov    al,0x0
c00091fe:	e9 19 01 00 00       	jmp    c000931c <pbuf_take+0x17c>
c0009203:	90                   	nop
c0009204:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009209:	74 1d                	je     c0009228 <pbuf_take+0x88>
c000920b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009210:	74 16                	je     c0009228 <pbuf_take+0x88>
c0009212:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009216:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009219:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000921e:	0f b7 c0             	movzx  eax,ax
c0009221:	39 c2                	cmp    edx,eax
c0009223:	76 0b                	jbe    c0009230 <pbuf_take+0x90>
c0009225:	8d 76 00             	lea    esi,[esi+0x0]
c0009228:	b0 f2                	mov    al,0xf2
c000922a:	e9 ed 00 00 00       	jmp    c000931c <pbuf_take+0x17c>
c000922f:	90                   	nop
c0009230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009238:	e9 9f 00 00 00       	jmp    c00092dc <pbuf_take+0x13c>
c000923d:	8d 76 00             	lea    esi,[esi+0x0]
c0009240:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009245:	75 15                	jne    c000925c <pbuf_take+0xbc>
c0009247:	83 ec 08             	sub    esp,0x8
c000924a:	68 56 00 03 c0       	push   0xc0030056
c000924f:	68 26 fb 02 c0       	push   0xc002fb26
c0009254:	e8 4b 69 01 00       	call   c001fba4 <CPrintf>
c0009259:	83 c4 10             	add    esp,0x10
c000925c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009260:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009269:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000926d:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009272:	0f b7 c0             	movzx  eax,ax
c0009275:	39 c2                	cmp    edx,eax
c0009277:	76 0f                	jbe    c0009288 <pbuf_take+0xe8>
c0009279:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000927d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009281:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009286:	66 90                	xchg   ax,ax
c0009288:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c000928d:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c0009292:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009296:	01 c1                	add    ecx,eax
c0009298:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000929c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000929f:	83 ec 04             	sub    esp,0x4
c00092a2:	52                   	push   edx
c00092a3:	51                   	push   ecx
c00092a4:	50                   	push   eax
c00092a5:	e8 d0 70 ff ff       	call   c000037a <memcpy>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092b1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00092b6:	89 d1                	mov    ecx,edx
c00092b8:	29 c1                	sub    ecx,eax
c00092ba:	89 c8                	mov    eax,ecx
c00092bc:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092c1:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092c6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00092cb:	01 d0                	add    eax,edx
c00092cd:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00092d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00092d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092dc:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092e1:	85 c0                	test   eax,eax
c00092e3:	0f 85 57 ff ff ff    	jne    c0009240 <pbuf_take+0xa0>
c00092e9:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092ee:	85 c0                	test   eax,eax
c00092f0:	75 0e                	jne    c0009300 <pbuf_take+0x160>
c00092f2:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00092f7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00092fc:	39 c2                	cmp    edx,eax
c00092fe:	74 18                	je     c0009318 <pbuf_take+0x178>
c0009300:	83 ec 08             	sub    esp,0x8
c0009303:	68 6e 00 03 c0       	push   0xc003006e
c0009308:	68 26 fb 02 c0       	push   0xc002fb26
c000930d:	e8 92 68 01 00       	call   c001fba4 <CPrintf>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	8d 76 00             	lea    esi,[esi+0x0]
c0009318:	b0 00                	mov    al,0x0
c000931a:	66 90                	xchg   ax,ax
c000931c:	83 c4 2c             	add    esp,0x2c
c000931f:	c3                   	ret    

c0009320 <pbuf_coalesce>:
c0009320:	83 ec 1c             	sub    esp,0x1c
c0009323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009327:	8b 00                	mov    eax,DWORD PTR [eax]
c0009329:	85 c0                	test   eax,eax
c000932b:	75 07                	jne    c0009334 <pbuf_coalesce+0x14>
c000932d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009331:	eb 7d                	jmp    c00093b0 <pbuf_coalesce+0x90>
c0009333:	90                   	nop
c0009334:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009338:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000933b:	0f b7 c0             	movzx  eax,ax
c000933e:	83 ec 04             	sub    esp,0x4
c0009341:	6a 00                	push   0x0
c0009343:	50                   	push   eax
c0009344:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009348:	e8 e7 f1 ff ff       	call   c0008534 <pbuf_alloc>
c000934d:	83 c4 10             	add    esp,0x10
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009359:	75 09                	jne    c0009364 <pbuf_coalesce+0x44>
c000935b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000935f:	eb 4f                	jmp    c00093b0 <pbuf_coalesce+0x90>
c0009361:	8d 76 00             	lea    esi,[esi+0x0]
c0009364:	83 ec 08             	sub    esp,0x8
c0009367:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000936b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000936f:	e8 20 fa ff ff       	call   c0008d94 <pbuf_copy>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000937b:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009380:	85 c0                	test   eax,eax
c0009382:	74 18                	je     c000939c <pbuf_coalesce+0x7c>
c0009384:	83 ec 08             	sub    esp,0x8
c0009387:	68 84 00 03 c0       	push   0xc0030084
c000938c:	68 26 fb 02 c0       	push   0xc002fb26
c0009391:	e8 0e 68 01 00       	call   c001fba4 <CPrintf>
c0009396:	83 c4 10             	add    esp,0x10
c0009399:	8d 76 00             	lea    esi,[esi+0x0]
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093a3:	e8 b4 ef ff ff       	call   c000835c <pbuf_free>
c00093a8:	83 c4 10             	add    esp,0x10
c00093ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093af:	90                   	nop
c00093b0:	83 c4 1c             	add    esp,0x1c
c00093b3:	c3                   	ret    

c00093b4 <pbuf_get_at>:
c00093b4:	83 ec 14             	sub    esp,0x14
c00093b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093bb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00093bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00093c2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00093c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00093cf:	eb 27                	jmp    c00093f8 <pbuf_get_at+0x44>
c00093d1:	8d 76 00             	lea    esi,[esi+0x0]
c00093d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093dc:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00093e1:	89 d1                	mov    ecx,edx
c00093e3:	29 c1                	sub    ecx,eax
c00093e5:	89 c8                	mov    eax,ecx
c00093e7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00093ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00093f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00093f6:	66 90                	xchg   ax,ax
c00093f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00093fd:	74 15                	je     c0009414 <pbuf_get_at+0x60>
c00093ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009403:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009407:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000940c:	0f b7 c0             	movzx  eax,ax
c000940f:	39 c2                	cmp    edx,eax
c0009411:	73 c1                	jae    c00093d4 <pbuf_get_at+0x20>
c0009413:	90                   	nop
c0009414:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009419:	74 29                	je     c0009444 <pbuf_get_at+0x90>
c000941b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000941f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009423:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009428:	0f b7 c0             	movzx  eax,ax
c000942b:	39 c2                	cmp    edx,eax
c000942d:	73 15                	jae    c0009444 <pbuf_get_at+0x90>
c000942f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009433:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009436:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000943b:	01 d0                	add    eax,edx
c000943d:	8a 00                	mov    al,BYTE PTR [eax]
c000943f:	eb 07                	jmp    c0009448 <pbuf_get_at+0x94>
c0009441:	8d 76 00             	lea    esi,[esi+0x0]
c0009444:	b0 00                	mov    al,0x0
c0009446:	66 90                	xchg   ax,ax
c0009448:	83 c4 14             	add    esp,0x14
c000944b:	c3                   	ret    

c000944c <pbuf_memcmp>:
c000944c:	83 ec 18             	sub    esp,0x18
c000944f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009453:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009457:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000945c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009464:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000946d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009471:	eb 25                	jmp    c0009498 <pbuf_memcmp+0x4c>
c0009473:	90                   	nop
c0009474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009478:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000947c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009481:	89 d1                	mov    ecx,edx
c0009483:	29 c1                	sub    ecx,eax
c0009485:	89 c8                	mov    eax,ecx
c0009487:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000948c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009490:	8b 00                	mov    eax,DWORD PTR [eax]
c0009492:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009496:	66 90                	xchg   ax,ax
c0009498:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000949d:	74 15                	je     c00094b4 <pbuf_memcmp+0x68>
c000949f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094a7:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094ac:	0f b7 c0             	movzx  eax,ax
c00094af:	39 c2                	cmp    edx,eax
c00094b1:	73 c1                	jae    c0009474 <pbuf_memcmp+0x28>
c00094b3:	90                   	nop
c00094b4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00094b9:	0f 84 8d 00 00 00    	je     c000954c <pbuf_memcmp+0x100>
c00094bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094c7:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094cc:	0f b7 c0             	movzx  eax,ax
c00094cf:	39 c2                	cmp    edx,eax
c00094d1:	73 79                	jae    c000954c <pbuf_memcmp+0x100>
c00094d3:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00094da:	eb 5c                	jmp    c0009538 <pbuf_memcmp+0xec>
c00094dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00094e1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00094e6:	01 d0                	add    eax,edx
c00094e8:	0f b7 c0             	movzx  eax,ax
c00094eb:	50                   	push   eax
c00094ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f0:	e8 bf fe ff ff       	call   c00093b4 <pbuf_get_at>
c00094f5:	83 c4 08             	add    esp,0x8
c00094f8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00094fc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009501:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009505:	01 d0                	add    eax,edx
c0009507:	8a 00                	mov    al,BYTE PTR [eax]
c0009509:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000950d:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c0009512:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0009517:	39 c2                	cmp    edx,eax
c0009519:	74 0d                	je     c0009528 <pbuf_memcmp+0xdc>
c000951b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009520:	83 c0 01             	add    eax,0x1
c0009523:	eb 2f                	jmp    c0009554 <pbuf_memcmp+0x108>
c0009525:	8d 76 00             	lea    esi,[esi+0x0]
c0009528:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000952d:	83 c0 01             	add    eax,0x1
c0009530:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009535:	8d 76 00             	lea    esi,[esi+0x0]
c0009538:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000953d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009541:	39 c2                	cmp    edx,eax
c0009543:	72 97                	jb     c00094dc <pbuf_memcmp+0x90>
c0009545:	b8 00 00 00 00       	mov    eax,0x0
c000954a:	eb 08                	jmp    c0009554 <pbuf_memcmp+0x108>
c000954c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009551:	8d 76 00             	lea    esi,[esi+0x0]
c0009554:	83 c4 18             	add    esp,0x18
c0009557:	c3                   	ret    

c0009558 <pbuf_memfind>:
c0009558:	83 ec 18             	sub    esp,0x18
c000955b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000955f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009563:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009568:	66 89 04 24          	mov    WORD PTR [esp],ax
c000956c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009570:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0009573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009577:	89 d1                	mov    ecx,edx
c0009579:	29 c1                	sub    ecx,eax
c000957b:	89 c8                	mov    eax,ecx
c000957d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0009582:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009586:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009589:	0f b7 c0             	movzx  eax,ax
c000958c:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009591:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0009595:	01 ca                	add    edx,ecx
c0009597:	39 d0                	cmp    eax,edx
c0009599:	7c 65                	jl     c0009600 <pbuf_memfind+0xa8>
c000959b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000959e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00095a3:	eb 4b                	jmp    c00095f0 <pbuf_memfind+0x98>
c00095a5:	8d 76 00             	lea    esi,[esi+0x0]
c00095a8:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00095ad:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00095b2:	52                   	push   edx
c00095b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b7:	50                   	push   eax
c00095b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00095bc:	e8 8b fe ff ff       	call   c000944c <pbuf_memcmp>
c00095c1:	83 c4 10             	add    esp,0x10
c00095c4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00095c9:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095ce:	85 c0                	test   eax,eax
c00095d0:	75 0a                	jne    c00095dc <pbuf_memfind+0x84>
c00095d2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00095d7:	eb 2f                	jmp    c0009608 <pbuf_memfind+0xb0>
c00095d9:	8d 76 00             	lea    esi,[esi+0x0]
c00095dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00095e1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00095e6:	01 d0                	add    eax,edx
c00095e8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00095ed:	8d 76 00             	lea    esi,[esi+0x0]
c00095f0:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00095f5:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00095fa:	39 c2                	cmp    edx,eax
c00095fc:	76 aa                	jbe    c00095a8 <pbuf_memfind+0x50>
c00095fe:	66 90                	xchg   ax,ax
c0009600:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009605:	8d 76 00             	lea    esi,[esi+0x0]
c0009608:	83 c4 18             	add    esp,0x18
c000960b:	c3                   	ret    

c000960c <pbuf_strstr>:
c000960c:	83 ec 1c             	sub    esp,0x1c
c000960f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009614:	74 1e                	je     c0009634 <pbuf_strstr+0x28>
c0009616:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000961a:	8a 00                	mov    al,BYTE PTR [eax]
c000961c:	0f be c0             	movsx  eax,al
c000961f:	85 c0                	test   eax,eax
c0009621:	74 11                	je     c0009634 <pbuf_strstr+0x28>
c0009623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009627:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000962a:	0f b7 c0             	movzx  eax,ax
c000962d:	3d ff ff 00 00       	cmp    eax,0xffff
c0009632:	75 08                	jne    c000963c <pbuf_strstr+0x30>
c0009634:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009639:	eb 41                	jmp    c000967c <pbuf_strstr+0x70>
c000963b:	90                   	nop
c000963c:	83 ec 0c             	sub    esp,0xc
c000963f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009643:	e8 28 6f ff ff       	call   c0000570 <strlen>
c0009648:	83 c4 10             	add    esp,0x10
c000964b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000964f:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c0009657:	76 07                	jbe    c0009660 <pbuf_strstr+0x54>
c0009659:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000965e:	eb 1c                	jmp    c000967c <pbuf_strstr+0x70>
c0009660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009664:	0f b7 c0             	movzx  eax,ax
c0009667:	6a 00                	push   0x0
c0009669:	50                   	push   eax
c000966a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000966e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009672:	e8 e1 fe ff ff       	call   c0009558 <pbuf_memfind>
c0009677:	83 c4 10             	add    esp,0x10
c000967a:	66 90                	xchg   ax,ax
c000967c:	83 c4 1c             	add    esp,0x1c
c000967f:	c3                   	ret    

c0009680 <raw_input>:
c0009680:	83 ec 2c             	sub    esp,0x2c
c0009683:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009688:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000968c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000968f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009697:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000969a:	0f b6 c0             	movzx  eax,al
c000969d:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00096aa:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00096af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096b3:	e9 b8 00 00 00       	jmp    c0009770 <raw_input+0xf0>
c00096b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096bc:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00096bf:	0f b6 d0             	movzx  edx,al
c00096c2:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c00096c7:	39 c2                	cmp    edx,eax
c00096c9:	0f 85 8d 00 00 00    	jne    c000975c <raw_input+0xdc>
c00096cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d3:	85 c0                	test   eax,eax
c00096d5:	74 19                	je     c00096f0 <raw_input+0x70>
c00096d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096db:	8b 00                	mov    eax,DWORD PTR [eax]
c00096dd:	85 c0                	test   eax,eax
c00096df:	74 0f                	je     c00096f0 <raw_input+0x70>
c00096e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00096e7:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00096ec:	39 c2                	cmp    edx,eax
c00096ee:	75 6c                	jne    c000975c <raw_input+0xdc>
c00096f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00096f7:	85 c0                	test   eax,eax
c00096f9:	74 61                	je     c000975c <raw_input+0xdc>
c00096fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ff:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009706:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c0009709:	68 90 68 03 c0       	push   0xc0036890
c000970e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009716:	52                   	push   edx
c0009717:	ff d0                	call   eax
c0009719:	83 c4 10             	add    esp,0x10
c000971c:	0f b6 c0             	movzx  eax,al
c000971f:	85 c0                	test   eax,eax
c0009721:	74 39                	je     c000975c <raw_input+0xdc>
c0009723:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000972b:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c0009730:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009735:	74 25                	je     c000975c <raw_input+0xdc>
c0009737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000973b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000973e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009742:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009745:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c000974b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000974f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009752:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009756:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000975b:	90                   	nop
c000975c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009760:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009768:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000976b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000976f:	90                   	nop
c0009770:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0009775:	85 c0                	test   eax,eax
c0009777:	75 0b                	jne    c0009784 <raw_input+0x104>
c0009779:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000977e:	0f 85 34 ff ff ff    	jne    c00096b8 <raw_input+0x38>
c0009784:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009788:	83 c4 2c             	add    esp,0x2c
c000978b:	c3                   	ret    

c000978c <raw_bind>:
c000978c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009791:	74 09                	je     c000979c <raw_bind+0x10>
c0009793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009797:	8b 00                	mov    eax,DWORD PTR [eax]
c0009799:	eb 09                	jmp    c00097a4 <raw_bind+0x18>
c000979b:	90                   	nop
c000979c:	b8 00 00 00 00       	mov    eax,0x0
c00097a1:	8d 76 00             	lea    esi,[esi+0x0]
c00097a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a8:	89 02                	mov    DWORD PTR [edx],eax
c00097aa:	b0 00                	mov    al,0x0
c00097ac:	c3                   	ret    
c00097ad:	8d 76 00             	lea    esi,[esi+0x0]

c00097b0 <raw_connect>:
c00097b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00097b5:	74 09                	je     c00097c0 <raw_connect+0x10>
c00097b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00097bd:	eb 09                	jmp    c00097c8 <raw_connect+0x18>
c00097bf:	90                   	nop
c00097c0:	b8 00 00 00 00       	mov    eax,0x0
c00097c5:	8d 76 00             	lea    esi,[esi+0x0]
c00097c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097cc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00097cf:	b0 00                	mov    al,0x0
c00097d1:	c3                   	ret    
c00097d2:	66 90                	xchg   ax,ax

c00097d4 <raw_recv>:
c00097d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00097dc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00097df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097e7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00097ea:	90                   	nop
c00097eb:	c3                   	ret    

c00097ec <raw_sendto>:
c00097ec:	83 ec 1c             	sub    esp,0x1c
c00097ef:	83 ec 08             	sub    esp,0x8
c00097f2:	6a 14                	push   0x14
c00097f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097f8:	e8 c3 e9 ff ff       	call   c00081c0 <pbuf_header>
c00097fd:	83 c4 10             	add    esp,0x10
c0009800:	0f b6 c0             	movzx  eax,al
c0009803:	85 c0                	test   eax,eax
c0009805:	74 49                	je     c0009850 <raw_sendto+0x64>
c0009807:	83 ec 04             	sub    esp,0x4
c000980a:	6a 00                	push   0x0
c000980c:	6a 00                	push   0x0
c000980e:	6a 01                	push   0x1
c0009810:	e8 1f ed ff ff       	call   c0008534 <pbuf_alloc>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000981c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009821:	75 09                	jne    c000982c <raw_sendto+0x40>
c0009823:	b0 ff                	mov    al,0xff
c0009825:	e9 2a 01 00 00       	jmp    c0009954 <raw_sendto+0x168>
c000982a:	66 90                	xchg   ax,ax
c000982c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009830:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009833:	0f b7 c0             	movzx  eax,ax
c0009836:	85 c0                	test   eax,eax
c0009838:	74 52                	je     c000988c <raw_sendto+0xa0>
c000983a:	83 ec 08             	sub    esp,0x8
c000983d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009845:	e8 2a f4 ff ff       	call   c0008c74 <pbuf_chain>
c000984a:	83 c4 10             	add    esp,0x10
c000984d:	eb 3d                	jmp    c000988c <raw_sendto+0xa0>
c000984f:	90                   	nop
c0009850:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009854:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009858:	83 ec 08             	sub    esp,0x8
c000985b:	6a ec                	push   0xffffffec
c000985d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009861:	e8 5a e9 ff ff       	call   c00081c0 <pbuf_header>
c0009866:	83 c4 10             	add    esp,0x10
c0009869:	0f b6 c0             	movzx  eax,al
c000986c:	85 c0                	test   eax,eax
c000986e:	74 1c                	je     c000988c <raw_sendto+0xa0>
c0009870:	83 ec 08             	sub    esp,0x8
c0009873:	68 98 00 03 c0       	push   0xc0030098
c0009878:	68 26 fb 02 c0       	push   0xc002fb26
c000987d:	e8 22 63 01 00       	call   c001fba4 <CPrintf>
c0009882:	83 c4 10             	add    esp,0x10
c0009885:	b0 ff                	mov    al,0xff
c0009887:	e9 c8 00 00 00       	jmp    c0009954 <raw_sendto+0x168>
c000988c:	83 ec 0c             	sub    esp,0xc
c000988f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009893:	e8 6c 9d 00 00       	call   c0013604 <ip_route>
c0009898:	83 c4 10             	add    esp,0x10
c000989b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000989f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00098a4:	75 22                	jne    c00098c8 <raw_sendto+0xdc>
c00098a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098aa:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00098ae:	74 10                	je     c00098c0 <raw_sendto+0xd4>
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	e8 a0 ea ff ff       	call   c000835c <pbuf_free>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	90                   	nop
c00098c0:	b0 fc                	mov    al,0xfc
c00098c2:	e9 8d 00 00 00       	jmp    c0009954 <raw_sendto+0x168>
c00098c7:	90                   	nop
c00098c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098cc:	85 c0                	test   eax,eax
c00098ce:	74 0c                	je     c00098dc <raw_sendto+0xf0>
c00098d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00098d6:	85 c0                	test   eax,eax
c00098d8:	75 12                	jne    c00098ec <raw_sendto+0x100>
c00098da:	66 90                	xchg   ax,ax
c00098dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098e0:	83 c0 04             	add    eax,0x4
c00098e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098e7:	eb 0b                	jmp    c00098f4 <raw_sendto+0x108>
c00098e9:	8d 76 00             	lea    esi,[esi+0x0]
c00098ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098f8:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00098fb:	0f b6 c8             	movzx  ecx,al
c00098fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009902:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009905:	0f b6 d0             	movzx  edx,al
c0009908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000990c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000990f:	0f b6 c0             	movzx  eax,al
c0009912:	83 ec 04             	sub    esp,0x4
c0009915:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009919:	51                   	push   ecx
c000991a:	52                   	push   edx
c000991b:	50                   	push   eax
c000991c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009920:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009924:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009928:	e8 af a1 00 00       	call   c0013adc <ip_output_if>
c000992d:	83 c4 20             	add    esp,0x20
c0009930:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009938:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c000993c:	74 12                	je     c0009950 <raw_sendto+0x164>
c000993e:	83 ec 0c             	sub    esp,0xc
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	e8 12 ea ff ff       	call   c000835c <pbuf_free>
c000994a:	83 c4 10             	add    esp,0x10
c000994d:	8d 76 00             	lea    esi,[esi+0x0]
c0009950:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009954:	83 c4 1c             	add    esp,0x1c
c0009957:	c3                   	ret    

c0009958 <raw_send>:
c0009958:	83 ec 0c             	sub    esp,0xc
c000995b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000995f:	83 c0 04             	add    eax,0x4
c0009962:	83 ec 04             	sub    esp,0x4
c0009965:	50                   	push   eax
c0009966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000996a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000996e:	e8 79 fe ff ff       	call   c00097ec <raw_sendto>
c0009973:	83 c4 10             	add    esp,0x10
c0009976:	83 c4 0c             	add    esp,0xc
c0009979:	c3                   	ret    
c000997a:	66 90                	xchg   ax,ax

c000997c <raw_remove>:
c000997c:	83 ec 1c             	sub    esp,0x1c
c000997f:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009984:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009988:	75 12                	jne    c000999c <raw_remove+0x20>
c000998a:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c000998f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009992:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009997:	eb 4b                	jmp    c00099e4 <raw_remove+0x68>
c0009999:	8d 76 00             	lea    esi,[esi+0x0]
c000999c:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00099a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099a5:	eb 35                	jmp    c00099dc <raw_remove+0x60>
c00099a7:	90                   	nop
c00099a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099af:	85 c0                	test   eax,eax
c00099b1:	74 1d                	je     c00099d0 <raw_remove+0x54>
c00099b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099ba:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00099be:	75 10                	jne    c00099d0 <raw_remove+0x54>
c00099c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00099c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00099ce:	66 90                	xchg   ax,ax
c00099d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099db:	90                   	nop
c00099dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00099e1:	75 c5                	jne    c00099a8 <raw_remove+0x2c>
c00099e3:	90                   	nop
c00099e4:	83 ec 08             	sub    esp,0x8
c00099e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00099eb:	6a 00                	push   0x0
c00099ed:	e8 ae e0 ff ff       	call   c0007aa0 <memp_free>
c00099f2:	83 c4 10             	add    esp,0x10
c00099f5:	90                   	nop
c00099f6:	83 c4 1c             	add    esp,0x1c
c00099f9:	c3                   	ret    
c00099fa:	66 90                	xchg   ax,ax

c00099fc <raw_new>:
c00099fc:	83 ec 2c             	sub    esp,0x2c
c00099ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a03:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a07:	83 ec 0c             	sub    esp,0xc
c0009a0a:	6a 00                	push   0x0
c0009a0c:	e8 63 df ff ff       	call   c0007974 <memp_malloc>
c0009a11:	83 c4 10             	add    esp,0x10
c0009a14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a18:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009a1d:	74 3d                	je     c0009a5c <raw_new+0x60>
c0009a1f:	83 ec 04             	sub    esp,0x4
c0009a22:	6a 1c                	push   0x1c
c0009a24:	6a 00                	push   0x0
c0009a26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a2a:	e8 c1 6a ff ff       	call   c00004f0 <memset>
c0009a2f:	83 c4 10             	add    esp,0x10
c0009a32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a36:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009a3a:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009a3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a41:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009a45:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009a4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009a52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a56:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009a5b:	90                   	nop
c0009a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a60:	83 c4 2c             	add    esp,0x2c
c0009a63:	c3                   	ret    

c0009a64 <stats_init>:
c0009a64:	90                   	nop
c0009a65:	c3                   	ret    
c0009a66:	66 90                	xchg   ax,ax

c0009a68 <sys_msleep>:
c0009a68:	83 ec 1c             	sub    esp,0x1c
c0009a6b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009a70:	74 46                	je     c0009ab8 <sys_msleep+0x50>
c0009a72:	83 ec 08             	sub    esp,0x8
c0009a75:	6a 00                	push   0x0
c0009a77:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a7b:	50                   	push   eax
c0009a7c:	e8 eb 71 ff ff       	call   c0000c6c <sys_sem_new>
c0009a81:	83 c4 10             	add    esp,0x10
c0009a84:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009a88:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009a8d:	85 c0                	test   eax,eax
c0009a8f:	75 27                	jne    c0009ab8 <sys_msleep+0x50>
c0009a91:	83 ec 08             	sub    esp,0x8
c0009a94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a98:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a9c:	50                   	push   eax
c0009a9d:	e8 22 72 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0009aa2:	83 c4 10             	add    esp,0x10
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009aac:	50                   	push   eax
c0009aad:	e8 e2 71 ff ff       	call   c0000c94 <sys_sem_free>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ab8:	90                   	nop
c0009ab9:	83 c4 1c             	add    esp,0x1c
c0009abc:	c3                   	ret    
c0009abd:	66 90                	xchg   ax,ax
c0009abf:	90                   	nop

c0009ac0 <tcp_accept_null>:
c0009ac0:	83 ec 04             	sub    esp,0x4
c0009ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ac7:	88 04 24             	mov    BYTE PTR [esp],al
c0009aca:	b0 f6                	mov    al,0xf6
c0009acc:	83 c4 04             	add    esp,0x4
c0009acf:	c3                   	ret    

c0009ad0 <tcp_listen_with_backlog>:
c0009ad0:	83 ec 2c             	sub    esp,0x2c
c0009ad3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ad7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009adb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009adf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ae2:	85 c0                	test   eax,eax
c0009ae4:	74 22                	je     c0009b08 <tcp_listen_with_backlog+0x38>
c0009ae6:	83 ec 08             	sub    esp,0x8
c0009ae9:	68 c0 00 03 c0       	push   0xc00300c0
c0009aee:	68 26 fb 02 c0       	push   0xc002fb26
c0009af3:	e8 ac 60 01 00       	call   c001fba4 <CPrintf>
c0009af8:	83 c4 10             	add    esp,0x10
c0009afb:	b8 00 00 00 00       	mov    eax,0x0
c0009b00:	e9 77 01 00 00       	jmp    c0009c7c <tcp_listen_with_backlog+0x1ac>
c0009b05:	8d 76 00             	lea    esi,[esi+0x0]
c0009b08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009b0f:	83 f8 01             	cmp    eax,0x1
c0009b12:	75 0c                	jne    c0009b20 <tcp_listen_with_backlog+0x50>
c0009b14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b18:	e9 5f 01 00 00       	jmp    c0009c7c <tcp_listen_with_backlog+0x1ac>
c0009b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b20:	83 ec 0c             	sub    esp,0xc
c0009b23:	6a 03                	push   0x3
c0009b25:	e8 4a de ff ff       	call   c0007974 <memp_malloc>
c0009b2a:	83 c4 10             	add    esp,0x10
c0009b2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b31:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009b36:	75 0c                	jne    c0009b44 <tcp_listen_with_backlog+0x74>
c0009b38:	b8 00 00 00 00       	mov    eax,0x0
c0009b3d:	e9 3a 01 00 00       	jmp    c0009c7c <tcp_listen_with_backlog+0x1ac>
c0009b42:	66 90                	xchg   ax,ax
c0009b44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b48:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009b4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009b52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009b59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b5d:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009b61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b65:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b70:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009b73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b77:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009b7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b7e:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009b81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b85:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b8c:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009b8f:	83 c8 02             	or     eax,0x2
c0009b92:	88 c2                	mov    dl,al
c0009b94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b98:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b9f:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009ba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ba6:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009ba9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bad:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009bb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bb4:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009bb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bc1:	89 10                	mov    DWORD PTR [eax],edx
c0009bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009bca:	0f b7 c0             	movzx  eax,ax
c0009bcd:	85 c0                	test   eax,eax
c0009bcf:	74 6f                	je     c0009c40 <tcp_listen_with_backlog+0x170>
c0009bd1:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009bd6:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009bda:	75 10                	jne    c0009bec <tcp_listen_with_backlog+0x11c>
c0009bdc:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009be1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be4:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009be9:	eb 49                	jmp    c0009c34 <tcp_listen_with_backlog+0x164>
c0009beb:	90                   	nop
c0009bec:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009bf1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009bf6:	eb 30                	jmp    c0009c28 <tcp_listen_with_backlog+0x158>
c0009bf8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009bfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c00:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009c04:	75 12                	jne    c0009c18 <tcp_listen_with_backlog+0x148>
c0009c06:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009c0f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009c12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c15:	eb 1d                	jmp    c0009c34 <tcp_listen_with_backlog+0x164>
c0009c17:	90                   	nop
c0009c18:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c1d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c20:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009c25:	8d 76 00             	lea    esi,[esi+0x0]
c0009c28:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c2d:	85 c0                	test   eax,eax
c0009c2f:	75 c7                	jne    c0009bf8 <tcp_listen_with_backlog+0x128>
c0009c31:	8d 76 00             	lea    esi,[esi+0x0]
c0009c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c38:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009c3f:	90                   	nop
c0009c40:	83 ec 08             	sub    esp,0x8
c0009c43:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009c47:	6a 02                	push   0x2
c0009c49:	e8 52 de ff ff       	call   c0007aa0 <memp_free>
c0009c4e:	83 c4 10             	add    esp,0x10
c0009c51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c55:	c7 40 1c c0 9a 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009ac0
c0009c5c:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009c62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c66:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c6d:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009c72:	e8 a5 6e 00 00       	call   c0010b1c <tcp_timer_needed>
c0009c77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c7b:	90                   	nop
c0009c7c:	83 c4 2c             	add    esp,0x2c
c0009c7f:	c3                   	ret    

c0009c80 <tcp_update_rcv_ann_wnd>:
c0009c80:	83 ec 1c             	sub    esp,0x1c
c0009c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c87:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c8e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009c91:	0f b7 c0             	movzx  eax,ax
c0009c94:	01 d0                	add    eax,edx
c0009c96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c9e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ca8:	0f b7 c8             	movzx  ecx,ax
c0009cab:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009cb1:	76 05                	jbe    c0009cb8 <tcp_update_rcv_ann_wnd+0x38>
c0009cb3:	b8 30 04 00 00       	mov    eax,0x430
c0009cb8:	0f b7 c0             	movzx  eax,ax
c0009cbb:	01 c2                	add    edx,eax
c0009cbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cc1:	29 d0                	sub    eax,edx
c0009cc3:	78 23                	js     c0009ce8 <tcp_update_rcv_ann_wnd+0x68>
c0009cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cc9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009ccc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009cd0:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009cd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cd8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009cdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009cdf:	29 c2                	sub    edx,eax
c0009ce1:	89 d0                	mov    eax,edx
c0009ce3:	eb 73                	jmp    c0009d58 <tcp_update_rcv_ann_wnd+0xd8>
c0009ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cec:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009cef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cf3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009cf6:	29 c2                	sub    edx,eax
c0009cf8:	89 d0                	mov    eax,edx
c0009cfa:	85 c0                	test   eax,eax
c0009cfc:	7e 0e                	jle    c0009d0c <tcp_update_rcv_ann_wnd+0x8c>
c0009cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d02:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009d08:	eb 46                	jmp    c0009d50 <tcp_update_rcv_ann_wnd+0xd0>
c0009d0a:	66 90                	xchg   ax,ax
c0009d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d10:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009d13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d17:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009d1a:	29 c2                	sub    edx,eax
c0009d1c:	89 d0                	mov    eax,edx
c0009d1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d22:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009d2a:	76 18                	jbe    c0009d44 <tcp_update_rcv_ann_wnd+0xc4>
c0009d2c:	83 ec 08             	sub    esp,0x8
c0009d2f:	68 f4 02 03 c0       	push   0xc00302f4
c0009d34:	68 26 fb 02 c0       	push   0xc002fb26
c0009d39:	e8 66 5e 01 00       	call   c001fba4 <CPrintf>
c0009d3e:	83 c4 10             	add    esp,0x10
c0009d41:	8d 76 00             	lea    esi,[esi+0x0]
c0009d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009d4c:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009d50:	b8 00 00 00 00       	mov    eax,0x0
c0009d55:	8d 76 00             	lea    esi,[esi+0x0]
c0009d58:	83 c4 1c             	add    esp,0x1c
c0009d5b:	c3                   	ret    

c0009d5c <tcp_recved>:
c0009d5c:	83 ec 2c             	sub    esp,0x2c
c0009d5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d63:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009d68:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d71:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009d74:	0f b7 c0             	movzx  eax,ax
c0009d77:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009d7c:	29 c1                	sub    ecx,eax
c0009d7e:	89 c8                	mov    eax,ecx
c0009d80:	39 c2                	cmp    edx,eax
c0009d82:	7e 18                	jle    c0009d9c <tcp_recved+0x40>
c0009d84:	83 ec 08             	sub    esp,0x8
c0009d87:	68 e4 00 03 c0       	push   0xc00300e4
c0009d8c:	68 26 fb 02 c0       	push   0xc002fb26
c0009d91:	e8 0e 5e 01 00       	call   c001fba4 <CPrintf>
c0009d96:	83 c4 10             	add    esp,0x10
c0009d99:	8d 76 00             	lea    esi,[esi+0x0]
c0009d9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009da0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009da3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009da7:	01 d0                	add    eax,edx
c0009da9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009dad:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009db8:	0f b7 c0             	movzx  eax,ax
c0009dbb:	3d 60 08 00 00       	cmp    eax,0x860
c0009dc0:	76 0a                	jbe    c0009dcc <tcp_recved+0x70>
c0009dc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dc6:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009dcc:	83 ec 0c             	sub    esp,0xc
c0009dcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dd3:	e8 a8 fe ff ff       	call   c0009c80 <tcp_update_rcv_ann_wnd>
c0009dd8:	83 c4 10             	add    esp,0x10
c0009ddb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ddf:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009de7:	7e 23                	jle    c0009e0c <tcp_recved+0xb0>
c0009de9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ded:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009df0:	83 c8 02             	or     eax,0x2
c0009df3:	88 c2                	mov    dl,al
c0009df5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009dfc:	83 ec 0c             	sub    esp,0xc
c0009dff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e03:	e8 84 60 00 00       	call   c000fe8c <tcp_output>
c0009e08:	83 c4 10             	add    esp,0x10
c0009e0b:	90                   	nop
c0009e0c:	90                   	nop
c0009e0d:	83 c4 2c             	add    esp,0x2c
c0009e10:	c3                   	ret    
c0009e11:	8d 76 00             	lea    esi,[esi+0x0]

c0009e14 <tcp_new_port>:
c0009e14:	83 ec 10             	sub    esp,0x10
c0009e17:	90                   	nop
c0009e18:	66 a1 e0 3b 03 c0    	mov    ax,ds:0xc0033be0
c0009e1e:	8d 50 01             	lea    edx,[eax+0x1]
c0009e21:	66 89 15 e0 3b 03 c0 	mov    WORD PTR ds:0xc0033be0,dx
c0009e28:	0f b7 c0             	movzx  eax,ax
c0009e2b:	3d ff ff 00 00       	cmp    eax,0xffff
c0009e30:	75 0a                	jne    c0009e3c <tcp_new_port+0x28>
c0009e32:	66 c7 05 e0 3b 03 c0 00 c0 	mov    WORD PTR ds:0xc0033be0,0xc000
c0009e3b:	90                   	nop
c0009e3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009e44:	eb 4a                	jmp    c0009e90 <tcp_new_port+0x7c>
c0009e46:	66 90                	xchg   ax,ax
c0009e48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4c:	8b 04 85 00 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc00]
c0009e53:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e59:	eb 29                	jmp    c0009e84 <tcp_new_port+0x70>
c0009e5b:	90                   	nop
c0009e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e60:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009e63:	66 a1 e0 3b 03 c0    	mov    ax,ds:0xc0033be0
c0009e69:	0f b7 d2             	movzx  edx,dx
c0009e6c:	0f b7 c0             	movzx  eax,ax
c0009e6f:	39 c2                	cmp    edx,eax
c0009e71:	75 05                	jne    c0009e78 <tcp_new_port+0x64>
c0009e73:	eb a3                	jmp    c0009e18 <tcp_new_port+0x4>
c0009e75:	8d 76 00             	lea    esi,[esi+0x0]
c0009e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e83:	90                   	nop
c0009e84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009e89:	75 d1                	jne    c0009e5c <tcp_new_port+0x48>
c0009e8b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009e90:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009e95:	7e b1                	jle    c0009e48 <tcp_new_port+0x34>
c0009e97:	66 a1 e0 3b 03 c0    	mov    ax,ds:0xc0033be0
c0009e9d:	83 c4 10             	add    esp,0x10
c0009ea0:	c3                   	ret    
c0009ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0009ea4 <tcp_bind>:
c0009ea4:	83 ec 2c             	sub    esp,0x2c
c0009ea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009eb0:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009eb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ebf:	85 c0                	test   eax,eax
c0009ec1:	74 1d                	je     c0009ee0 <tcp_bind+0x3c>
c0009ec3:	83 ec 08             	sub    esp,0x8
c0009ec6:	68 08 01 03 c0       	push   0xc0030108
c0009ecb:	68 26 fb 02 c0       	push   0xc002fb26
c0009ed0:	e8 cf 5c 01 00       	call   c001fba4 <CPrintf>
c0009ed5:	83 c4 10             	add    esp,0x10
c0009ed8:	b0 fa                	mov    al,0xfa
c0009eda:	e9 f1 00 00 00       	jmp    c0009fd0 <tcp_bind+0x12c>
c0009edf:	90                   	nop
c0009ee0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009ee5:	85 c0                	test   eax,eax
c0009ee7:	75 0b                	jne    c0009ef4 <tcp_bind+0x50>
c0009ee9:	e8 26 ff ff ff       	call   c0009e14 <tcp_new_port>
c0009eee:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009ef3:	90                   	nop
c0009ef4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009efc:	eb 7a                	jmp    c0009f78 <tcp_bind+0xd4>
c0009efe:	66 90                	xchg   ax,ax
c0009f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f04:	8b 04 85 00 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc00]
c0009f0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f11:	eb 59                	jmp    c0009f6c <tcp_bind+0xc8>
c0009f13:	90                   	nop
c0009f14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f18:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009f1b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f20:	0f b7 c0             	movzx  eax,ax
c0009f23:	39 c2                	cmp    edx,eax
c0009f25:	75 39                	jne    c0009f60 <tcp_bind+0xbc>
c0009f27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f2b:	85 c0                	test   eax,eax
c0009f2d:	74 2d                	je     c0009f5c <tcp_bind+0xb8>
c0009f2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f35:	85 c0                	test   eax,eax
c0009f37:	74 23                	je     c0009f5c <tcp_bind+0xb8>
c0009f39:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f3e:	74 1c                	je     c0009f5c <tcp_bind+0xb8>
c0009f40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f46:	85 c0                	test   eax,eax
c0009f48:	74 12                	je     c0009f5c <tcp_bind+0xb8>
c0009f4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009f50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f54:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f56:	39 c2                	cmp    edx,eax
c0009f58:	75 06                	jne    c0009f60 <tcp_bind+0xbc>
c0009f5a:	66 90                	xchg   ax,ax
c0009f5c:	b0 f8                	mov    al,0xf8
c0009f5e:	eb 70                	jmp    c0009fd0 <tcp_bind+0x12c>
c0009f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6b:	90                   	nop
c0009f6c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009f71:	75 a1                	jne    c0009f14 <tcp_bind+0x70>
c0009f73:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f7c:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009f80:	0f 8c 7a ff ff ff    	jl     c0009f00 <tcp_bind+0x5c>
c0009f86:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f8b:	74 17                	je     c0009fa4 <tcp_bind+0x100>
c0009f8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f91:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f93:	85 c0                	test   eax,eax
c0009f95:	74 0d                	je     c0009fa4 <tcp_bind+0x100>
c0009f97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f9b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f9f:	8b 12                	mov    edx,DWORD PTR [edx]
c0009fa1:	89 10                	mov    DWORD PTR [eax],edx
c0009fa3:	90                   	nop
c0009fa4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009fa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fac:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009fb0:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009fb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009fbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fc1:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009fc6:	e8 51 6b 00 00       	call   c0010b1c <tcp_timer_needed>
c0009fcb:	b0 00                	mov    al,0x0
c0009fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0009fd0:	83 c4 2c             	add    esp,0x2c
c0009fd3:	c3                   	ret    

c0009fd4 <tcp_seg_free>:
c0009fd4:	83 ec 0c             	sub    esp,0xc
c0009fd7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009fdc:	74 32                	je     c000a010 <tcp_seg_free+0x3c>
c0009fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009fe5:	85 c0                	test   eax,eax
c0009fe7:	74 13                	je     c0009ffc <tcp_seg_free+0x28>
c0009fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009fed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009ff0:	83 ec 0c             	sub    esp,0xc
c0009ff3:	50                   	push   eax
c0009ff4:	e8 63 e3 ff ff       	call   c000835c <pbuf_free>
c0009ff9:	83 c4 10             	add    esp,0x10
c0009ffc:	83 ec 08             	sub    esp,0x8
c0009fff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a003:	6a 04                	push   0x4
c000a005:	e8 96 da ff ff       	call   c0007aa0 <memp_free>
c000a00a:	83 c4 10             	add    esp,0x10
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	90                   	nop
c000a011:	83 c4 0c             	add    esp,0xc
c000a014:	c3                   	ret    
c000a015:	8d 76 00             	lea    esi,[esi+0x0]

c000a018 <tcp_segs_free>:
c000a018:	83 ec 1c             	sub    esp,0x1c
c000a01b:	eb 27                	jmp    c000a044 <tcp_segs_free+0x2c>
c000a01d:	8d 76 00             	lea    esi,[esi+0x0]
c000a020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a024:	8b 00                	mov    eax,DWORD PTR [eax]
c000a026:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02a:	83 ec 0c             	sub    esp,0xc
c000a02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a031:	e8 9e ff ff ff       	call   c0009fd4 <tcp_seg_free>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a03d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a041:	8d 76 00             	lea    esi,[esi+0x0]
c000a044:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a049:	75 d5                	jne    c000a020 <tcp_segs_free+0x8>
c000a04b:	90                   	nop
c000a04c:	83 c4 1c             	add    esp,0x1c
c000a04f:	c3                   	ret    

c000a050 <tcp_setprio>:
c000a050:	83 ec 04             	sub    esp,0x4
c000a053:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a057:	88 04 24             	mov    BYTE PTR [esp],al
c000a05a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a05e:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a061:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a064:	90                   	nop
c000a065:	83 c4 04             	add    esp,0x4
c000a068:	c3                   	ret    
c000a069:	8d 76 00             	lea    esi,[esi+0x0]

c000a06c <tcp_seg_copy>:
c000a06c:	83 ec 1c             	sub    esp,0x1c
c000a06f:	83 ec 0c             	sub    esp,0xc
c000a072:	6a 04                	push   0x4
c000a074:	e8 fb d8 ff ff       	call   c0007974 <memp_malloc>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a080:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a085:	75 09                	jne    c000a090 <tcp_seg_copy+0x24>
c000a087:	b8 00 00 00 00       	mov    eax,0x0
c000a08c:	eb 2e                	jmp    c000a0bc <tcp_seg_copy+0x50>
c000a08e:	66 90                	xchg   ax,ax
c000a090:	83 ec 04             	sub    esp,0x4
c000a093:	6a 10                	push   0x10
c000a095:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a099:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a09d:	e8 d8 62 ff ff       	call   c000037a <memcpy>
c000a0a2:	83 c4 10             	add    esp,0x10
c000a0a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0ac:	83 ec 0c             	sub    esp,0xc
c000a0af:	50                   	push   eax
c000a0b0:	e8 af ea ff ff       	call   c0008b64 <pbuf_ref>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0bc:	83 c4 1c             	add    esp,0x1c
c000a0bf:	c3                   	ret    

c000a0c0 <tcp_arg>:
c000a0c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a0cb:	90                   	nop
c000a0cc:	c3                   	ret    
c000a0cd:	8d 76 00             	lea    esi,[esi+0x0]

c000a0d0 <tcp_recv>:
c000a0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0d8:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a0de:	90                   	nop
c000a0df:	c3                   	ret    

c000a0e0 <tcp_sent>:
c000a0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0e8:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a0ee:	90                   	nop
c000a0ef:	c3                   	ret    

c000a0f0 <tcp_err>:
c000a0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a0f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0f8:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a0fe:	90                   	nop
c000a0ff:	c3                   	ret    

c000a100 <tcp_accept>:
c000a100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a108:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a10b:	90                   	nop
c000a10c:	c3                   	ret    
c000a10d:	8d 76 00             	lea    esi,[esi+0x0]

c000a110 <tcp_poll>:
c000a110:	83 ec 04             	sub    esp,0x4
c000a113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a117:	88 04 24             	mov    BYTE PTR [esp],al
c000a11a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a11e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a122:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a12c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a12f:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a132:	90                   	nop
c000a133:	83 c4 04             	add    esp,0x4
c000a136:	c3                   	ret    
c000a137:	90                   	nop

c000a138 <tcp_pcb_purge>:
c000a138:	83 ec 0c             	sub    esp,0xc
c000a13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a13f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a142:	85 c0                	test   eax,eax
c000a144:	0f 84 ca 00 00 00    	je     c000a214 <tcp_pcb_purge+0xdc>
c000a14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a14e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a151:	83 f8 0a             	cmp    eax,0xa
c000a154:	0f 84 ba 00 00 00    	je     c000a214 <tcp_pcb_purge+0xdc>
c000a15a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a15e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a161:	83 f8 01             	cmp    eax,0x1
c000a164:	0f 84 aa 00 00 00    	je     c000a214 <tcp_pcb_purge+0xdc>
c000a16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a16e:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a174:	85 c0                	test   eax,eax
c000a176:	74 24                	je     c000a19c <tcp_pcb_purge+0x64>
c000a178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17c:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a182:	83 ec 0c             	sub    esp,0xc
c000a185:	50                   	push   eax
c000a186:	e8 d1 e1 ff ff       	call   c000835c <pbuf_free>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a192:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1a0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a1a6:	83 ec 0c             	sub    esp,0xc
c000a1a9:	50                   	push   eax
c000a1aa:	e8 69 fe ff ff       	call   c000a018 <tcp_segs_free>
c000a1af:	83 c4 10             	add    esp,0x10
c000a1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b6:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c4:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ce:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a1d1:	83 ec 0c             	sub    esp,0xc
c000a1d4:	50                   	push   eax
c000a1d5:	e8 3e fe ff ff       	call   c000a018 <tcp_segs_free>
c000a1da:	83 c4 10             	add    esp,0x10
c000a1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e1:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a1e4:	83 ec 0c             	sub    esp,0xc
c000a1e7:	50                   	push   eax
c000a1e8:	e8 2b fe ff ff       	call   c000a018 <tcp_segs_free>
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f4:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ff:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a206:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a20d:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a213:	90                   	nop
c000a214:	90                   	nop
c000a215:	83 c4 0c             	add    esp,0xc
c000a218:	c3                   	ret    
c000a219:	8d 76 00             	lea    esi,[esi+0x0]

c000a21c <tcp_slowtmr>:
c000a21c:	57                   	push   edi
c000a21d:	56                   	push   esi
c000a21e:	53                   	push   ebx
c000a21f:	83 ec 20             	sub    esp,0x20
c000a222:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a227:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a22c:	83 c0 01             	add    eax,0x1
c000a22f:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a234:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a23c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a241:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a245:	e9 16 06 00 00       	jmp    c000a860 <tcp_slowtmr+0x644>
c000a24a:	66 90                	xchg   ax,ax
c000a24c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a250:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a253:	85 c0                	test   eax,eax
c000a255:	75 15                	jne    c000a26c <tcp_slowtmr+0x50>
c000a257:	83 ec 08             	sub    esp,0x8
c000a25a:	68 30 01 03 c0       	push   0xc0030130
c000a25f:	68 26 fb 02 c0       	push   0xc002fb26
c000a264:	e8 3b 59 01 00       	call   c001fba4 <CPrintf>
c000a269:	83 c4 10             	add    esp,0x10
c000a26c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a270:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a273:	83 f8 01             	cmp    eax,0x1
c000a276:	75 18                	jne    c000a290 <tcp_slowtmr+0x74>
c000a278:	83 ec 08             	sub    esp,0x8
c000a27b:	68 5c 01 03 c0       	push   0xc003015c
c000a280:	68 26 fb 02 c0       	push   0xc002fb26
c000a285:	e8 1a 59 01 00       	call   c001fba4 <CPrintf>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	8d 76 00             	lea    esi,[esi+0x0]
c000a290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a294:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a297:	83 f8 0a             	cmp    eax,0xa
c000a29a:	75 18                	jne    c000a2b4 <tcp_slowtmr+0x98>
c000a29c:	83 ec 08             	sub    esp,0x8
c000a29f:	68 88 01 03 c0       	push   0xc0030188
c000a2a4:	68 26 fb 02 c0       	push   0xc002fb26
c000a2a9:	e8 f6 58 01 00       	call   c001fba4 <CPrintf>
c000a2ae:	83 c4 10             	add    esp,0x10
c000a2b1:	8d 76 00             	lea    esi,[esi+0x0]
c000a2b4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a2b9:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a2be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2c5:	83 f8 02             	cmp    eax,0x2
c000a2c8:	75 22                	jne    c000a2ec <tcp_slowtmr+0xd0>
c000a2ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2ce:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a2d1:	0f b6 c0             	movzx  eax,al
c000a2d4:	83 f8 06             	cmp    eax,0x6
c000a2d7:	75 13                	jne    c000a2ec <tcp_slowtmr+0xd0>
c000a2d9:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a2dd:	83 c0 01             	add    eax,0x1
c000a2e0:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a2e4:	e9 df 01 00 00       	jmp    c000a4c8 <tcp_slowtmr+0x2ac>
c000a2e9:	8d 76 00             	lea    esi,[esi+0x0]
c000a2ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2f0:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a2f3:	0f b6 c0             	movzx  eax,al
c000a2f6:	83 f8 0c             	cmp    eax,0xc
c000a2f9:	75 11                	jne    c000a30c <tcp_slowtmr+0xf0>
c000a2fb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a2ff:	83 c0 01             	add    eax,0x1
c000a302:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a306:	e9 bd 01 00 00       	jmp    c000a4c8 <tcp_slowtmr+0x2ac>
c000a30b:	90                   	nop
c000a30c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a310:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a316:	0f b6 c0             	movzx  eax,al
c000a319:	85 c0                	test   eax,eax
c000a31b:	0f 84 8f 00 00 00    	je     c000a3b0 <tcp_slowtmr+0x194>
c000a321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a325:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a32b:	8d 50 01             	lea    edx,[eax+0x1]
c000a32e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a332:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a338:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a33c:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a346:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a34c:	0f b6 c0             	movzx  eax,al
c000a34f:	83 e8 01             	sub    eax,0x1
c000a352:	8a 80 10 04 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfbf0]
c000a358:	0f b6 c0             	movzx  eax,al
c000a35b:	39 c2                	cmp    edx,eax
c000a35d:	0f 82 65 01 00 00    	jb     c000a4c8 <tcp_slowtmr+0x2ac>
c000a363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a367:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a375:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a37b:	0f b6 c0             	movzx  eax,al
c000a37e:	83 f8 06             	cmp    eax,0x6
c000a381:	77 19                	ja     c000a39c <tcp_slowtmr+0x180>
c000a383:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a387:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a38d:	83 c0 01             	add    eax,0x1
c000a390:	88 c2                	mov    dl,al
c000a392:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a396:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a39c:	83 ec 0c             	sub    esp,0xc
c000a39f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a3a3:	e8 e8 63 00 00       	call   c0010790 <tcp_zero_window_probe>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	e9 18 01 00 00       	jmp    c000a4c8 <tcp_slowtmr+0x2ac>
c000a3b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3b4:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a3b8:	98                   	cwde   
c000a3b9:	85 c0                	test   eax,eax
c000a3bb:	78 13                	js     c000a3d0 <tcp_slowtmr+0x1b4>
c000a3bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3c1:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a3c5:	83 c0 01             	add    eax,0x1
c000a3c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3cc:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a3d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3d4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a3d7:	85 c0                	test   eax,eax
c000a3d9:	0f 84 e9 00 00 00    	je     c000a4c8 <tcp_slowtmr+0x2ac>
c000a3df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e3:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a3e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3eb:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a3ee:	0f bf d2             	movsx  edx,dx
c000a3f1:	98                   	cwde   
c000a3f2:	39 c2                	cmp    edx,eax
c000a3f4:	0f 8c ce 00 00 00    	jl     c000a4c8 <tcp_slowtmr+0x2ac>
c000a3fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a401:	83 f8 02             	cmp    eax,0x2
c000a404:	74 3a                	je     c000a440 <tcp_slowtmr+0x224>
c000a406:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a40a:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a40d:	98                   	cwde   
c000a40e:	c1 f8 03             	sar    eax,0x3
c000a411:	0f bf d0             	movsx  edx,ax
c000a414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a418:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a41c:	98                   	cwde   
c000a41d:	01 c2                	add    edx,eax
c000a41f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a423:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a426:	0f b6 c0             	movzx  eax,al
c000a429:	8a 80 18 04 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfbe8]
c000a42f:	0f b6 c0             	movzx  eax,al
c000a432:	88 c1                	mov    cl,al
c000a434:	d3 e2                	shl    edx,cl
c000a436:	89 d0                	mov    eax,edx
c000a438:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a43c:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a444:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a44a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a44e:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a455:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a459:	0f b7 d8             	movzx  ebx,ax
c000a45c:	0f b7 ca             	movzx  ecx,dx
c000a45f:	39 cb                	cmp    ebx,ecx
c000a461:	76 05                	jbe    c000a468 <tcp_slowtmr+0x24c>
c000a463:	89 d0                	mov    eax,edx
c000a465:	8d 76 00             	lea    esi,[esi+0x0]
c000a468:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a46d:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a472:	d1 e8                	shr    eax,1
c000a474:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a478:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a47c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a480:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a483:	0f b7 d0             	movzx  edx,ax
c000a486:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a48a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a48d:	0f b7 c0             	movzx  eax,ax
c000a490:	01 c0                	add    eax,eax
c000a492:	39 c2                	cmp    edx,eax
c000a494:	7d 12                	jge    c000a4a8 <tcp_slowtmr+0x28c>
c000a496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a49a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a49d:	d1 e0                	shl    eax,1
c000a49f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4a3:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a4a7:	90                   	nop
c000a4a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4b3:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a4b7:	83 ec 0c             	sub    esp,0xc
c000a4ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a4be:	e8 c9 5f 00 00       	call   c001048c <tcp_rexmit_rto>
c000a4c3:	83 c4 10             	add    esp,0x10
c000a4c6:	66 90                	xchg   ax,ax
c000a4c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a4cf:	83 f8 06             	cmp    eax,0x6
c000a4d2:	75 24                	jne    c000a4f8 <tcp_slowtmr+0x2dc>
c000a4d4:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4de:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a4e1:	29 c2                	sub    edx,eax
c000a4e3:	89 d0                	mov    eax,edx
c000a4e5:	83 f8 28             	cmp    eax,0x28
c000a4e8:	76 0e                	jbe    c000a4f8 <tcp_slowtmr+0x2dc>
c000a4ea:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4ee:	83 c0 01             	add    eax,0x1
c000a4f1:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000a4f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4fc:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a4ff:	0f b6 c0             	movzx  eax,al
c000a502:	83 e0 08             	and    eax,0x8
c000a505:	0f 84 e1 00 00 00    	je     c000a5ec <tcp_slowtmr+0x3d0>
c000a50b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a50f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a512:	83 f8 04             	cmp    eax,0x4
c000a515:	74 11                	je     c000a528 <tcp_slowtmr+0x30c>
c000a517:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a51e:	83 f8 07             	cmp    eax,0x7
c000a521:	0f 85 c5 00 00 00    	jne    c000a5ec <tcp_slowtmr+0x3d0>
c000a527:	90                   	nop
c000a528:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a52e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a532:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a535:	89 d1                	mov    ecx,edx
c000a537:	29 c1                	sub    ecx,eax
c000a539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a53d:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a543:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a548:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a54d:	f7 e2                	mul    edx
c000a54f:	89 d0                	mov    eax,edx
c000a551:	c1 e8 05             	shr    eax,0x5
c000a554:	39 c1                	cmp    ecx,eax
c000a556:	76 18                	jbe    c000a570 <tcp_slowtmr+0x354>
c000a558:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a55c:	83 c0 01             	add    eax,0x1
c000a55f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a563:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a567:	83 c0 01             	add    eax,0x1
c000a56a:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a56e:	eb 7c                	jmp    c000a5ec <tcp_slowtmr+0x3d0>
c000a570:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a576:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a57d:	89 d3                	mov    ebx,edx
c000a57f:	29 c3                	sub    ebx,eax
c000a581:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a585:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a58b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a58f:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a595:	0f b6 d0             	movzx  edx,al
c000a598:	89 d0                	mov    eax,edx
c000a59a:	c1 e0 03             	shl    eax,0x3
c000a59d:	01 d0                	add    eax,edx
c000a59f:	c1 e0 03             	shl    eax,0x3
c000a5a2:	01 d0                	add    eax,edx
c000a5a4:	c1 e0 02             	shl    eax,0x2
c000a5a7:	01 d0                	add    eax,edx
c000a5a9:	c1 e0 05             	shl    eax,0x5
c000a5ac:	29 d0                	sub    eax,edx
c000a5ae:	c1 e0 03             	shl    eax,0x3
c000a5b1:	01 c8                	add    eax,ecx
c000a5b3:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a5b8:	f7 e2                	mul    edx
c000a5ba:	89 d0                	mov    eax,edx
c000a5bc:	c1 e8 05             	shr    eax,0x5
c000a5bf:	39 c3                	cmp    ebx,eax
c000a5c1:	76 29                	jbe    c000a5ec <tcp_slowtmr+0x3d0>
c000a5c3:	83 ec 0c             	sub    esp,0xc
c000a5c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a5ca:	e8 f9 60 00 00       	call   c00106c8 <tcp_keepalive>
c000a5cf:	83 c4 10             	add    esp,0x10
c000a5d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d6:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a5dc:	83 c0 01             	add    eax,0x1
c000a5df:	88 c2                	mov    dl,al
c000a5e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e5:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a5eb:	90                   	nop
c000a5ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5f0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a5f6:	85 c0                	test   eax,eax
c000a5f8:	74 4e                	je     c000a648 <tcp_slowtmr+0x42c>
c000a5fa:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a600:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a604:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a607:	89 d1                	mov    ecx,edx
c000a609:	29 c1                	sub    ecx,eax
c000a60b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60f:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a612:	0f bf d0             	movsx  edx,ax
c000a615:	89 d0                	mov    eax,edx
c000a617:	01 c0                	add    eax,eax
c000a619:	01 d0                	add    eax,edx
c000a61b:	01 c0                	add    eax,eax
c000a61d:	39 c1                	cmp    ecx,eax
c000a61f:	72 27                	jb     c000a648 <tcp_slowtmr+0x42c>
c000a621:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a625:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a62b:	83 ec 0c             	sub    esp,0xc
c000a62e:	50                   	push   eax
c000a62f:	e8 e4 f9 ff ff       	call   c000a018 <tcp_segs_free>
c000a634:	83 c4 10             	add    esp,0x10
c000a637:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a63b:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a645:	8d 76 00             	lea    esi,[esi+0x0]
c000a648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a64c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a64f:	83 f8 03             	cmp    eax,0x3
c000a652:	75 24                	jne    c000a678 <tcp_slowtmr+0x45c>
c000a654:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a65a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a65e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a661:	29 c2                	sub    edx,eax
c000a663:	89 d0                	mov    eax,edx
c000a665:	83 f8 28             	cmp    eax,0x28
c000a668:	76 0e                	jbe    c000a678 <tcp_slowtmr+0x45c>
c000a66a:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a66e:	83 c0 01             	add    eax,0x1
c000a671:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a675:	8d 76 00             	lea    esi,[esi+0x0]
c000a678:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a67c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a67f:	83 f8 09             	cmp    eax,0x9
c000a682:	75 24                	jne    c000a6a8 <tcp_slowtmr+0x48c>
c000a684:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a68a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a68e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a691:	29 c2                	sub    edx,eax
c000a693:	89 d0                	mov    eax,edx
c000a695:	3d f0 00 00 00       	cmp    eax,0xf0
c000a69a:	76 0c                	jbe    c000a6a8 <tcp_slowtmr+0x48c>
c000a69c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6a0:	83 c0 01             	add    eax,0x1
c000a6a3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6a7:	90                   	nop
c000a6a8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a6ad:	85 c0                	test   eax,eax
c000a6af:	0f 84 13 01 00 00    	je     c000a7c8 <tcp_slowtmr+0x5ac>
c000a6b5:	83 ec 0c             	sub    esp,0xc
c000a6b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a6bc:	e8 77 fa ff ff       	call   c000a138 <tcp_pcb_purge>
c000a6c1:	83 c4 10             	add    esp,0x10
c000a6c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a6c9:	74 31                	je     c000a6fc <tcp_slowtmr+0x4e0>
c000a6cb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a6d0:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a6d4:	75 16                	jne    c000a6ec <tcp_slowtmr+0x4d0>
c000a6d6:	83 ec 08             	sub    esp,0x8
c000a6d9:	68 b8 01 03 c0       	push   0xc00301b8
c000a6de:	68 26 fb 02 c0       	push   0xc002fb26
c000a6e3:	e8 bc 54 01 00       	call   c001fba4 <CPrintf>
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	90                   	nop
c000a6ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a6f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a6fa:	eb 2c                	jmp    c000a728 <tcp_slowtmr+0x50c>
c000a6fc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a701:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a705:	74 15                	je     c000a71c <tcp_slowtmr+0x500>
c000a707:	83 ec 08             	sub    esp,0x8
c000a70a:	68 e4 01 03 c0       	push   0xc00301e4
c000a70f:	68 26 fb 02 c0       	push   0xc002fb26
c000a714:	e8 8b 54 01 00       	call   c001fba4 <CPrintf>
c000a719:	83 c4 10             	add    esp,0x10
c000a71c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a720:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a723:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a72c:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a732:	85 c0                	test   eax,eax
c000a734:	74 1e                	je     c000a754 <tcp_slowtmr+0x538>
c000a736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a73a:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a744:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a747:	83 ec 08             	sub    esp,0x8
c000a74a:	6a f6                	push   0xfffffff6
c000a74c:	52                   	push   edx
c000a74d:	ff d0                	call   eax
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	66 90                	xchg   ax,ax
c000a754:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a759:	85 c0                	test   eax,eax
c000a75b:	74 3f                	je     c000a79c <tcp_slowtmr+0x580>
c000a75d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a761:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a765:	0f b7 f0             	movzx  esi,ax
c000a768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a76c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a76f:	0f b7 d8             	movzx  ebx,ax
c000a772:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a776:	8d 78 04             	lea    edi,[eax+0x4]
c000a779:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a77d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a781:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a788:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a78b:	83 ec 08             	sub    esp,0x8
c000a78e:	56                   	push   esi
c000a78f:	53                   	push   ebx
c000a790:	57                   	push   edi
c000a791:	51                   	push   ecx
c000a792:	52                   	push   edx
c000a793:	50                   	push   eax
c000a794:	e8 7f 5b 00 00       	call   c0010318 <tcp_rst>
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a7ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7af:	83 ec 08             	sub    esp,0x8
c000a7b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7b6:	6a 02                	push   0x2
c000a7b8:	e8 e3 d2 ff ff       	call   c0007aa0 <memp_free>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	e9 9b 00 00 00       	jmp    c000a860 <tcp_slowtmr+0x644>
c000a7c5:	8d 76 00             	lea    esi,[esi+0x0]
c000a7c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a7d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7df:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a7e2:	83 c0 01             	add    eax,0x1
c000a7e5:	88 c2                	mov    dl,al
c000a7e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7eb:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a7ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7f2:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a7f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7f9:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a7fc:	0f b6 d2             	movzx  edx,dl
c000a7ff:	0f b6 c0             	movzx  eax,al
c000a802:	39 c2                	cmp    edx,eax
c000a804:	72 5a                	jb     c000a860 <tcp_slowtmr+0x644>
c000a806:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a80a:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a80e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a812:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a818:	85 c0                	test   eax,eax
c000a81a:	74 24                	je     c000a840 <tcp_slowtmr+0x624>
c000a81c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a820:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a826:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a82a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a82d:	83 ec 08             	sub    esp,0x8
c000a830:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a834:	52                   	push   edx
c000a835:	ff d0                	call   eax
c000a837:	83 c4 10             	add    esp,0x10
c000a83a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a83e:	eb 08                	jmp    c000a848 <tcp_slowtmr+0x62c>
c000a840:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a845:	8d 76 00             	lea    esi,[esi+0x0]
c000a848:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a84d:	85 c0                	test   eax,eax
c000a84f:	75 0f                	jne    c000a860 <tcp_slowtmr+0x644>
c000a851:	83 ec 0c             	sub    esp,0xc
c000a854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a858:	e8 2f 56 00 00       	call   c000fe8c <tcp_output>
c000a85d:	83 c4 10             	add    esp,0x10
c000a860:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a865:	0f 85 e1 f9 ff ff    	jne    c000a24c <tcp_slowtmr+0x30>
c000a86b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a873:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a878:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a87c:	e9 0b 01 00 00       	jmp    c000a98c <tcp_slowtmr+0x770>
c000a881:	8d 76 00             	lea    esi,[esi+0x0]
c000a884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a888:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a88b:	83 f8 0a             	cmp    eax,0xa
c000a88e:	74 18                	je     c000a8a8 <tcp_slowtmr+0x68c>
c000a890:	83 ec 08             	sub    esp,0x8
c000a893:	68 10 02 03 c0       	push   0xc0030210
c000a898:	68 26 fb 02 c0       	push   0xc002fb26
c000a89d:	e8 02 53 01 00       	call   c001fba4 <CPrintf>
c000a8a2:	83 c4 10             	add    esp,0x10
c000a8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000a8a8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a8ad:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a8b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a8ba:	29 c2                	sub    edx,eax
c000a8bc:	89 d0                	mov    eax,edx
c000a8be:	3d f0 00 00 00       	cmp    eax,0xf0
c000a8c3:	76 0b                	jbe    c000a8d0 <tcp_slowtmr+0x6b4>
c000a8c5:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a8c9:	83 c0 01             	add    eax,0x1
c000a8cc:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a8d0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a8d5:	85 c0                	test   eax,eax
c000a8d7:	0f 84 9b 00 00 00    	je     c000a978 <tcp_slowtmr+0x75c>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a8e4:	e8 4f f8 ff ff       	call   c000a138 <tcp_pcb_purge>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a8f1:	74 31                	je     c000a924 <tcp_slowtmr+0x708>
c000a8f3:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a8f8:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a8fc:	75 16                	jne    c000a914 <tcp_slowtmr+0x6f8>
c000a8fe:	83 ec 08             	sub    esp,0x8
c000a901:	68 40 02 03 c0       	push   0xc0030240
c000a906:	68 26 fb 02 c0       	push   0xc002fb26
c000a90b:	e8 94 52 01 00       	call   c001fba4 <CPrintf>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	90                   	nop
c000a914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a918:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a91b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a91f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a922:	eb 2c                	jmp    c000a950 <tcp_slowtmr+0x734>
c000a924:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a929:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a92d:	74 15                	je     c000a944 <tcp_slowtmr+0x728>
c000a92f:	83 ec 08             	sub    esp,0x8
c000a932:	68 68 02 03 c0       	push   0xc0030268
c000a937:	68 26 fb 02 c0       	push   0xc002fb26
c000a93c:	e8 63 52 01 00       	call   c001fba4 <CPrintf>
c000a941:	83 c4 10             	add    esp,0x10
c000a944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a948:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a94b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a950:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a958:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a95c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a95f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a963:	83 ec 08             	sub    esp,0x8
c000a966:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a96a:	6a 02                	push   0x2
c000a96c:	e8 2f d1 ff ff       	call   c0007aa0 <memp_free>
c000a971:	83 c4 10             	add    esp,0x10
c000a974:	eb 16                	jmp    c000a98c <tcp_slowtmr+0x770>
c000a976:	66 90                	xchg   ax,ax
c000a978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a97c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a980:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a984:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a987:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a98b:	90                   	nop
c000a98c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a991:	0f 85 ed fe ff ff    	jne    c000a884 <tcp_slowtmr+0x668>
c000a997:	90                   	nop
c000a998:	83 c4 20             	add    esp,0x20
c000a99b:	5b                   	pop    ebx
c000a99c:	5e                   	pop    esi
c000a99d:	5f                   	pop    edi
c000a99e:	c3                   	ret    
c000a99f:	90                   	nop

c000a9a0 <tcp_pcb_remove>:
c000a9a0:	83 ec 0c             	sub    esp,0xc
c000a9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a9:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a9ad:	75 11                	jne    c000a9c0 <tcp_pcb_remove+0x20>
c000a9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9b5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9bc:	89 10                	mov    DWORD PTR [eax],edx
c000a9be:	eb 4c                	jmp    c000aa0c <tcp_pcb_remove+0x6c>
c000a9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9c6:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a9cb:	eb 33                	jmp    c000aa00 <tcp_pcb_remove+0x60>
c000a9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000a9d0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a9d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a9d8:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a9dc:	75 12                	jne    c000a9f0 <tcp_pcb_remove+0x50>
c000a9de:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a9e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a9e7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a9ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9ed:	eb 1d                	jmp    c000aa0c <tcp_pcb_remove+0x6c>
c000a9ef:	90                   	nop
c000a9f0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a9f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a9f8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a9fd:	8d 76 00             	lea    esi,[esi+0x0]
c000aa00:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa05:	85 c0                	test   eax,eax
c000aa07:	75 c7                	jne    c000a9d0 <tcp_pcb_remove+0x30>
c000aa09:	8d 76 00             	lea    esi,[esi+0x0]
c000aa0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa10:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aa17:	83 ec 0c             	sub    esp,0xc
c000aa1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa1e:	e8 15 f7 ff ff       	call   c000a138 <tcp_pcb_purge>
c000aa23:	83 c4 10             	add    esp,0x10
c000aa26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa2d:	83 f8 0a             	cmp    eax,0xa
c000aa30:	74 3e                	je     c000aa70 <tcp_pcb_remove+0xd0>
c000aa32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa36:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa39:	83 f8 01             	cmp    eax,0x1
c000aa3c:	74 32                	je     c000aa70 <tcp_pcb_remove+0xd0>
c000aa3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa42:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa45:	0f b6 c0             	movzx  eax,al
c000aa48:	83 e0 01             	and    eax,0x1
c000aa4b:	74 23                	je     c000aa70 <tcp_pcb_remove+0xd0>
c000aa4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa51:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa54:	83 c8 02             	or     eax,0x2
c000aa57:	88 c2                	mov    dl,al
c000aa59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa5d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aa60:	83 ec 0c             	sub    esp,0xc
c000aa63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa67:	e8 20 54 00 00       	call   c000fe8c <tcp_output>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	90                   	nop
c000aa70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa74:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa77:	83 f8 01             	cmp    eax,0x1
c000aa7a:	74 64                	je     c000aae0 <tcp_pcb_remove+0x140>
c000aa7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa80:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000aa83:	85 c0                	test   eax,eax
c000aa85:	74 15                	je     c000aa9c <tcp_pcb_remove+0xfc>
c000aa87:	83 ec 08             	sub    esp,0x8
c000aa8a:	68 0e 03 03 c0       	push   0xc003030e
c000aa8f:	68 26 fb 02 c0       	push   0xc002fb26
c000aa94:	e8 0b 51 01 00       	call   c001fba4 <CPrintf>
c000aa99:	83 c4 10             	add    esp,0x10
c000aa9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaa0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000aaa3:	85 c0                	test   eax,eax
c000aaa5:	74 15                	je     c000aabc <tcp_pcb_remove+0x11c>
c000aaa7:	83 ec 08             	sub    esp,0x8
c000aaaa:	68 26 03 03 c0       	push   0xc0030326
c000aaaf:	68 26 fb 02 c0       	push   0xc002fb26
c000aab4:	e8 eb 50 01 00       	call   c001fba4 <CPrintf>
c000aab9:	83 c4 10             	add    esp,0x10
c000aabc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aac0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000aac6:	85 c0                	test   eax,eax
c000aac8:	74 16                	je     c000aae0 <tcp_pcb_remove+0x140>
c000aaca:	83 ec 08             	sub    esp,0x8
c000aacd:	68 3f 03 03 c0       	push   0xc003033f
c000aad2:	68 26 fb 02 c0       	push   0xc002fb26
c000aad7:	e8 c8 50 01 00       	call   c001fba4 <CPrintf>
c000aadc:	83 c4 10             	add    esp,0x10
c000aadf:	90                   	nop
c000aae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aae4:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aaeb:	90                   	nop
c000aaec:	83 c4 0c             	add    esp,0xc
c000aaef:	c3                   	ret    

c000aaf0 <tcp_close_shutdown>:
c000aaf0:	57                   	push   edi
c000aaf1:	56                   	push   esi
c000aaf2:	53                   	push   ebx
c000aaf3:	83 ec 20             	sub    esp,0x20
c000aaf6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aafa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aafe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ab03:	85 c0                	test   eax,eax
c000ab05:	0f 84 41 01 00 00    	je     c000ac4c <tcp_close_shutdown+0x15c>
c000ab0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab12:	83 f8 01             	cmp    eax,0x1
c000ab15:	0f 84 31 01 00 00    	je     c000ac4c <tcp_close_shutdown+0x15c>
c000ab1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab1f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ab25:	85 c0                	test   eax,eax
c000ab27:	75 17                	jne    c000ab40 <tcp_close_shutdown+0x50>
c000ab29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab2d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ab30:	0f b7 c0             	movzx  eax,ax
c000ab33:	3d 60 08 00 00       	cmp    eax,0x860
c000ab38:	0f 84 0e 01 00 00    	je     c000ac4c <tcp_close_shutdown+0x15c>
c000ab3e:	66 90                	xchg   ax,ax
c000ab40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab44:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ab47:	0f b6 c0             	movzx  eax,al
c000ab4a:	83 e0 10             	and    eax,0x10
c000ab4d:	75 15                	jne    c000ab64 <tcp_close_shutdown+0x74>
c000ab4f:	83 ec 08             	sub    esp,0x8
c000ab52:	68 56 03 03 c0       	push   0xc0030356
c000ab57:	68 26 fb 02 c0       	push   0xc002fb26
c000ab5c:	e8 43 50 01 00       	call   c001fba4 <CPrintf>
c000ab61:	83 c4 10             	add    esp,0x10
c000ab64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab68:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ab6c:	0f b7 f0             	movzx  esi,ax
c000ab6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ab76:	0f b7 d8             	movzx  ebx,ax
c000ab79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab7d:	8d 78 04             	lea    edi,[eax+0x4]
c000ab80:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ab84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab88:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab8f:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ab92:	83 ec 08             	sub    esp,0x8
c000ab95:	56                   	push   esi
c000ab96:	53                   	push   ebx
c000ab97:	57                   	push   edi
c000ab98:	51                   	push   ecx
c000ab99:	52                   	push   edx
c000ab9a:	50                   	push   eax
c000ab9b:	e8 78 57 00 00       	call   c0010318 <tcp_rst>
c000aba0:	83 c4 20             	add    esp,0x20
c000aba3:	83 ec 0c             	sub    esp,0xc
c000aba6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abaa:	e8 89 f5 ff ff       	call   c000a138 <tcp_pcb_purge>
c000abaf:	83 c4 10             	add    esp,0x10
c000abb2:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abb7:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abbb:	75 0f                	jne    c000abcc <tcp_close_shutdown+0xdc>
c000abbd:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abc2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abc5:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000abca:	eb 48                	jmp    c000ac14 <tcp_close_shutdown+0x124>
c000abcc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abd1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000abd6:	eb 30                	jmp    c000ac08 <tcp_close_shutdown+0x118>
c000abd8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abdd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abe0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abe4:	75 12                	jne    c000abf8 <tcp_close_shutdown+0x108>
c000abe6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abeb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abef:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000abf2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abf5:	eb 1d                	jmp    c000ac14 <tcp_close_shutdown+0x124>
c000abf7:	90                   	nop
c000abf8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac00:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac05:	8d 76 00             	lea    esi,[esi+0x0]
c000ac08:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac0d:	85 c0                	test   eax,eax
c000ac0f:	75 c7                	jne    c000abd8 <tcp_close_shutdown+0xe8>
c000ac11:	8d 76 00             	lea    esi,[esi+0x0]
c000ac14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac18:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac23:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ac2a:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ac30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac34:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac3b:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ac40:	e8 d7 5e 00 00       	call   c0010b1c <tcp_timer_needed>
c000ac45:	b0 00                	mov    al,0x0
c000ac47:	e9 f4 01 00 00       	jmp    c000ae40 <tcp_close_shutdown+0x350>
c000ac4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac53:	83 f8 07             	cmp    eax,0x7
c000ac56:	0f 87 a4 01 00 00    	ja     c000ae00 <tcp_close_shutdown+0x310>
c000ac5c:	8b 04 85 e0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc20]
c000ac63:	ff e0                	jmp    eax
c000ac65:	8d 76 00             	lea    esi,[esi+0x0]
c000ac68:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac71:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ac74:	0f b7 c0             	movzx  eax,ax
c000ac77:	85 c0                	test   eax,eax
c000ac79:	74 71                	je     c000acec <tcp_close_shutdown+0x1fc>
c000ac7b:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac80:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ac84:	75 12                	jne    c000ac98 <tcp_close_shutdown+0x1a8>
c000ac86:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac8e:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ac93:	eb 4b                	jmp    c000ace0 <tcp_close_shutdown+0x1f0>
c000ac95:	8d 76 00             	lea    esi,[esi+0x0]
c000ac98:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac9d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000aca2:	eb 30                	jmp    c000acd4 <tcp_close_shutdown+0x1e4>
c000aca4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aca9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000acac:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000acb0:	75 12                	jne    c000acc4 <tcp_close_shutdown+0x1d4>
c000acb2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acb7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000acbb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000acbe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000acc1:	eb 1d                	jmp    c000ace0 <tcp_close_shutdown+0x1f0>
c000acc3:	90                   	nop
c000acc4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acc9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000accc:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000acd1:	8d 76 00             	lea    esi,[esi+0x0]
c000acd4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acd9:	85 c0                	test   eax,eax
c000acdb:	75 c7                	jne    c000aca4 <tcp_close_shutdown+0x1b4>
c000acdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ace0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ace4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aceb:	90                   	nop
c000acec:	83 ec 08             	sub    esp,0x8
c000acef:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000acf3:	6a 02                	push   0x2
c000acf5:	e8 a6 cd ff ff       	call   c0007aa0 <memp_free>
c000acfa:	83 c4 10             	add    esp,0x10
c000acfd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad05:	e9 12 01 00 00       	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ad0a:	66 90                	xchg   ax,ax
c000ad0c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad11:	83 ec 08             	sub    esp,0x8
c000ad14:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad18:	68 78 68 03 c0       	push   0xc0036878
c000ad1d:	e8 7e fc ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000ad22:	83 c4 10             	add    esp,0x10
c000ad25:	83 ec 08             	sub    esp,0x8
c000ad28:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad2c:	6a 03                	push   0x3
c000ad2e:	e8 6d cd ff ff       	call   c0007aa0 <memp_free>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad3e:	e9 d9 00 00 00       	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ad43:	90                   	nop
c000ad44:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad49:	83 ec 08             	sub    esp,0x8
c000ad4c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad50:	68 70 68 03 c0       	push   0xc0036870
c000ad55:	e8 46 fc ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000ad5a:	83 c4 10             	add    esp,0x10
c000ad5d:	83 ec 08             	sub    esp,0x8
c000ad60:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad64:	6a 02                	push   0x2
c000ad66:	e8 35 cd ff ff       	call   c0007aa0 <memp_free>
c000ad6b:	83 c4 10             	add    esp,0x10
c000ad6e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad76:	e9 a1 00 00 00       	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ad7b:	90                   	nop
c000ad7c:	83 ec 0c             	sub    esp,0xc
c000ad7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad83:	e8 54 4d 00 00       	call   c000fadc <tcp_send_fin>
c000ad88:	83 c4 10             	add    esp,0x10
c000ad8b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad8f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad94:	85 c0                	test   eax,eax
c000ad96:	75 78                	jne    c000ae10 <tcp_close_shutdown+0x320>
c000ad98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad9c:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ada3:	eb 6b                	jmp    c000ae10 <tcp_close_shutdown+0x320>
c000ada5:	8d 76 00             	lea    esi,[esi+0x0]
c000ada8:	83 ec 0c             	sub    esp,0xc
c000adab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000adaf:	e8 28 4d 00 00       	call   c000fadc <tcp_send_fin>
c000adb4:	83 c4 10             	add    esp,0x10
c000adb7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000adbb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adc0:	85 c0                	test   eax,eax
c000adc2:	75 50                	jne    c000ae14 <tcp_close_shutdown+0x324>
c000adc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adc8:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000adcf:	eb 43                	jmp    c000ae14 <tcp_close_shutdown+0x324>
c000add1:	8d 76 00             	lea    esi,[esi+0x0]
c000add4:	83 ec 0c             	sub    esp,0xc
c000add7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000addb:	e8 fc 4c 00 00       	call   c000fadc <tcp_send_fin>
c000ade0:	83 c4 10             	add    esp,0x10
c000ade3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ade7:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adec:	85 c0                	test   eax,eax
c000adee:	75 28                	jne    c000ae18 <tcp_close_shutdown+0x328>
c000adf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adf4:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000adfb:	eb 1b                	jmp    c000ae18 <tcp_close_shutdown+0x328>
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae05:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae0d:	eb 0d                	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ae0f:	90                   	nop
c000ae10:	90                   	nop
c000ae11:	eb 09                	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ae13:	90                   	nop
c000ae14:	90                   	nop
c000ae15:	eb 05                	jmp    c000ae1c <tcp_close_shutdown+0x32c>
c000ae17:	90                   	nop
c000ae18:	90                   	nop
c000ae19:	8d 76 00             	lea    esi,[esi+0x0]
c000ae1c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ae21:	74 19                	je     c000ae3c <tcp_close_shutdown+0x34c>
c000ae23:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ae28:	85 c0                	test   eax,eax
c000ae2a:	75 10                	jne    c000ae3c <tcp_close_shutdown+0x34c>
c000ae2c:	83 ec 0c             	sub    esp,0xc
c000ae2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae33:	e8 54 50 00 00       	call   c000fe8c <tcp_output>
c000ae38:	83 c4 10             	add    esp,0x10
c000ae3b:	90                   	nop
c000ae3c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ae40:	83 c4 20             	add    esp,0x20
c000ae43:	5b                   	pop    ebx
c000ae44:	5e                   	pop    esi
c000ae45:	5f                   	pop    edi
c000ae46:	c3                   	ret    
c000ae47:	90                   	nop

c000ae48 <tcp_close>:
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ae52:	83 f8 01             	cmp    eax,0x1
c000ae55:	74 15                	je     c000ae6c <tcp_close+0x24>
c000ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ae5e:	83 c8 10             	or     eax,0x10
c000ae61:	88 c2                	mov    dl,al
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ae6a:	66 90                	xchg   ax,ax
c000ae6c:	83 ec 08             	sub    esp,0x8
c000ae6f:	6a 01                	push   0x1
c000ae71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae75:	e8 76 fc ff ff       	call   c000aaf0 <tcp_close_shutdown>
c000ae7a:	83 c4 10             	add    esp,0x10
c000ae7d:	83 c4 0c             	add    esp,0xc
c000ae80:	c3                   	ret    
c000ae81:	8d 76 00             	lea    esi,[esi+0x0]

c000ae84 <tcp_recv_null>:
c000ae84:	83 ec 1c             	sub    esp,0x1c
c000ae87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ae8b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ae8f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ae94:	74 2e                	je     c000aec4 <tcp_recv_null+0x40>
c000ae96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ae9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ae9d:	0f b7 c0             	movzx  eax,ax
c000aea0:	83 ec 08             	sub    esp,0x8
c000aea3:	50                   	push   eax
c000aea4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000aea8:	e8 af ee ff ff       	call   c0009d5c <tcp_recved>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	83 ec 0c             	sub    esp,0xc
c000aeb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aeb7:	e8 a0 d4 ff ff       	call   c000835c <pbuf_free>
c000aebc:	83 c4 10             	add    esp,0x10
c000aebf:	eb 1f                	jmp    c000aee0 <tcp_recv_null+0x5c>
c000aec1:	8d 76 00             	lea    esi,[esi+0x0]
c000aec4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000aec9:	85 c0                	test   eax,eax
c000aecb:	75 13                	jne    c000aee0 <tcp_recv_null+0x5c>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000aed4:	e8 6f ff ff ff       	call   c000ae48 <tcp_close>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	eb 06                	jmp    c000aee4 <tcp_recv_null+0x60>
c000aede:	66 90                	xchg   ax,ax
c000aee0:	b0 00                	mov    al,0x0
c000aee2:	66 90                	xchg   ax,ax
c000aee4:	83 c4 1c             	add    esp,0x1c
c000aee7:	c3                   	ret    

c000aee8 <tcp_fasttmr>:
c000aee8:	83 ec 1c             	sub    esp,0x1c
c000aeeb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000aef0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aef4:	e9 03 01 00 00       	jmp    c000affc <tcp_fasttmr+0x114>
c000aef9:	8d 76 00             	lea    esi,[esi+0x0]
c000aefc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000af03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af0b:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af11:	85 c0                	test   eax,eax
c000af13:	0f 84 8f 00 00 00    	je     c000afa8 <tcp_fasttmr+0xc0>
c000af19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af1d:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af23:	85 c0                	test   eax,eax
c000af25:	74 31                	je     c000af58 <tcp_fasttmr+0x70>
c000af27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af2b:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af35:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000af3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af3f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000af42:	6a 00                	push   0x0
c000af44:	51                   	push   ecx
c000af45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af49:	52                   	push   edx
c000af4a:	ff d0                	call   eax
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000af53:	eb 23                	jmp    c000af78 <tcp_fasttmr+0x90>
c000af55:	8d 76 00             	lea    esi,[esi+0x0]
c000af58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af5c:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af62:	6a 00                	push   0x0
c000af64:	50                   	push   eax
c000af65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af69:	6a 00                	push   0x0
c000af6b:	e8 14 ff ff ff       	call   c000ae84 <tcp_recv_null>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000af77:	90                   	nop
c000af78:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000af7d:	85 c0                	test   eax,eax
c000af7f:	75 13                	jne    c000af94 <tcp_fasttmr+0xac>
c000af81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af85:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000af8f:	eb 17                	jmp    c000afa8 <tcp_fasttmr+0xc0>
c000af91:	8d 76 00             	lea    esi,[esi+0x0]
c000af94:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000af99:	83 f8 f6             	cmp    eax,0xfffffff6
c000af9c:	75 0a                	jne    c000afa8 <tcp_fasttmr+0xc0>
c000af9e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000afa6:	66 90                	xchg   ax,ax
c000afa8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000afad:	74 45                	je     c000aff4 <tcp_fasttmr+0x10c>
c000afaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afb3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afb6:	0f b6 c0             	movzx  eax,al
c000afb9:	83 e0 01             	and    eax,0x1
c000afbc:	74 36                	je     c000aff4 <tcp_fasttmr+0x10c>
c000afbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afc2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afc5:	83 c8 02             	or     eax,0x2
c000afc8:	88 c2                	mov    dl,al
c000afca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afce:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000afd1:	83 ec 0c             	sub    esp,0xc
c000afd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afd8:	e8 af 4e 00 00       	call   c000fe8c <tcp_output>
c000afdd:	83 c4 10             	add    esp,0x10
c000afe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afe4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afe7:	83 e0 fc             	and    eax,0xfffffffc
c000afea:	88 c2                	mov    dl,al
c000afec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aff0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aff3:	90                   	nop
c000aff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000affc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b001:	0f 85 f5 fe ff ff    	jne    c000aefc <tcp_fasttmr+0x14>
c000b007:	90                   	nop
c000b008:	83 c4 1c             	add    esp,0x1c
c000b00b:	c3                   	ret    

c000b00c <tcp_tmr>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	e8 d4 fe ff ff       	call   c000aee8 <tcp_fasttmr>
c000b014:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b019:	83 c0 01             	add    eax,0x1
c000b01c:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b021:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b026:	0f b6 c0             	movzx  eax,al
c000b029:	83 e0 01             	and    eax,0x1
c000b02c:	74 06                	je     c000b034 <tcp_tmr+0x28>
c000b02e:	e8 e9 f1 ff ff       	call   c000a21c <tcp_slowtmr>
c000b033:	90                   	nop
c000b034:	90                   	nop
c000b035:	83 c4 0c             	add    esp,0xc
c000b038:	c3                   	ret    
c000b039:	8d 76 00             	lea    esi,[esi+0x0]

c000b03c <tcp_shutdown>:
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b046:	83 f8 01             	cmp    eax,0x1
c000b049:	75 09                	jne    c000b054 <tcp_shutdown+0x18>
c000b04b:	b0 f3                	mov    al,0xf3
c000b04d:	e9 92 00 00 00       	jmp    c000b0e4 <tcp_shutdown+0xa8>
c000b052:	66 90                	xchg   ax,ax
c000b054:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b059:	74 49                	je     c000b0a4 <tcp_shutdown+0x68>
c000b05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b065:	85 c0                	test   eax,eax
c000b067:	74 27                	je     c000b090 <tcp_shutdown+0x54>
c000b069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06d:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	50                   	push   eax
c000b077:	e8 e0 d2 ff ff       	call   c000835c <pbuf_free>
c000b07c:	83 c4 10             	add    esp,0x10
c000b07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b083:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b08d:	8d 76 00             	lea    esi,[esi+0x0]
c000b090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b094:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b097:	83 c8 10             	or     eax,0x10
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b0a3:	90                   	nop
c000b0a4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b0a9:	74 2d                	je     c000b0d8 <tcp_shutdown+0x9c>
c000b0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b0b2:	83 f8 03             	cmp    eax,0x3
c000b0b5:	72 25                	jb     c000b0dc <tcp_shutdown+0xa0>
c000b0b7:	83 f8 04             	cmp    eax,0x4
c000b0ba:	76 08                	jbe    c000b0c4 <tcp_shutdown+0x88>
c000b0bc:	83 f8 07             	cmp    eax,0x7
c000b0bf:	75 1b                	jne    c000b0dc <tcp_shutdown+0xa0>
c000b0c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c4:	83 ec 08             	sub    esp,0x8
c000b0c7:	6a 00                	push   0x0
c000b0c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0cd:	e8 1e fa ff ff       	call   c000aaf0 <tcp_close_shutdown>
c000b0d2:	83 c4 10             	add    esp,0x10
c000b0d5:	eb 0d                	jmp    c000b0e4 <tcp_shutdown+0xa8>
c000b0d7:	90                   	nop
c000b0d8:	90                   	nop
c000b0d9:	eb 05                	jmp    c000b0e0 <tcp_shutdown+0xa4>
c000b0db:	90                   	nop
c000b0dc:	90                   	nop
c000b0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b0e0:	b0 00                	mov    al,0x0
c000b0e2:	66 90                	xchg   ax,ax
c000b0e4:	83 c4 0c             	add    esp,0xc
c000b0e7:	c3                   	ret    

c000b0e8 <tcp_abandon>:
c000b0e8:	83 ec 2c             	sub    esp,0x2c
c000b0eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b0f2:	83 f8 01             	cmp    eax,0x1
c000b0f5:	75 15                	jne    c000b10c <tcp_abandon+0x24>
c000b0f7:	83 ec 08             	sub    esp,0x8
c000b0fa:	68 90 02 03 c0       	push   0xc0030290
c000b0ff:	68 26 fb 02 c0       	push   0xc002fb26
c000b104:	e8 9b 4a 01 00       	call   c001fba4 <CPrintf>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b110:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b113:	83 f8 0a             	cmp    eax,0xa
c000b116:	75 2c                	jne    c000b144 <tcp_abandon+0x5c>
c000b118:	83 ec 08             	sub    esp,0x8
c000b11b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b11f:	68 84 68 03 c0       	push   0xc0036884
c000b124:	e8 77 f8 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	83 ec 08             	sub    esp,0x8
c000b12f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b133:	6a 02                	push   0x2
c000b135:	e8 66 c9 ff ff       	call   c0007aa0 <memp_free>
c000b13a:	83 c4 10             	add    esp,0x10
c000b13d:	e9 32 01 00 00       	jmp    c000b274 <tcp_abandon+0x18c>
c000b142:	66 90                	xchg   ax,ax
c000b144:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b148:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b14b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b14f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b153:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b156:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b15a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b15e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b160:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b164:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b168:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b16b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b16f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b173:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b176:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b17b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b17f:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b183:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b188:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b18c:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b19a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b19d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1a1:	83 ec 08             	sub    esp,0x8
c000b1a4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1a8:	68 70 68 03 c0       	push   0xc0036870
c000b1ad:	e8 ee f7 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1b9:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1bc:	85 c0                	test   eax,eax
c000b1be:	74 14                	je     c000b1d4 <tcp_abandon+0xec>
c000b1c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1c4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1c7:	83 ec 0c             	sub    esp,0xc
c000b1ca:	50                   	push   eax
c000b1cb:	e8 48 ee ff ff       	call   c000a018 <tcp_segs_free>
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	90                   	nop
c000b1d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1d8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b1db:	85 c0                	test   eax,eax
c000b1dd:	74 15                	je     c000b1f4 <tcp_abandon+0x10c>
c000b1df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1e3:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	50                   	push   eax
c000b1ea:	e8 29 ee ff ff       	call   c000a018 <tcp_segs_free>
c000b1ef:	83 c4 10             	add    esp,0x10
c000b1f2:	66 90                	xchg   ax,ax
c000b1f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1f8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b1fe:	85 c0                	test   eax,eax
c000b200:	74 16                	je     c000b218 <tcp_abandon+0x130>
c000b202:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b206:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b20c:	83 ec 0c             	sub    esp,0xc
c000b20f:	50                   	push   eax
c000b210:	e8 03 ee ff ff       	call   c000a018 <tcp_segs_free>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	83 ec 08             	sub    esp,0x8
c000b21b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b21f:	6a 02                	push   0x2
c000b221:	e8 7a c8 ff ff       	call   c0007aa0 <memp_free>
c000b226:	83 c4 10             	add    esp,0x10
c000b229:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b22e:	74 14                	je     c000b244 <tcp_abandon+0x15c>
c000b230:	83 ec 08             	sub    esp,0x8
c000b233:	6a f6                	push   0xfffffff6
c000b235:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b23d:	ff d0                	call   eax
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	66 90                	xchg   ax,ax
c000b244:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b249:	74 29                	je     c000b274 <tcp_abandon+0x18c>
c000b24b:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b250:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b255:	83 ec 08             	sub    esp,0x8
c000b258:	52                   	push   edx
c000b259:	50                   	push   eax
c000b25a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b25e:	50                   	push   eax
c000b25f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b263:	50                   	push   eax
c000b264:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b268:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b26c:	e8 a7 50 00 00       	call   c0010318 <tcp_rst>
c000b271:	83 c4 20             	add    esp,0x20
c000b274:	90                   	nop
c000b275:	83 c4 2c             	add    esp,0x2c
c000b278:	c3                   	ret    
c000b279:	8d 76 00             	lea    esi,[esi+0x0]

c000b27c <tcp_abort>:
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	83 ec 08             	sub    esp,0x8
c000b282:	6a 01                	push   0x1
c000b284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b288:	e8 5b fe ff ff       	call   c000b0e8 <tcp_abandon>
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	90                   	nop
c000b291:	83 c4 0c             	add    esp,0xc
c000b294:	c3                   	ret    
c000b295:	8d 76 00             	lea    esi,[esi+0x0]

c000b298 <tcp_kill_prio>:
c000b298:	83 ec 2c             	sub    esp,0x2c
c000b29b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b29f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b2a3:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b2a8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b2b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b2b8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b2bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2c1:	eb 75                	jmp    c000b338 <tcp_kill_prio+0xa0>
c000b2c3:	90                   	nop
c000b2c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b2cb:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b2d0:	0f b6 c0             	movzx  eax,al
c000b2d3:	39 c2                	cmp    edx,eax
c000b2d5:	72 55                	jb     c000b32c <tcp_kill_prio+0x94>
c000b2d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2db:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b2de:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b2e3:	0f b6 c0             	movzx  eax,al
c000b2e6:	39 c2                	cmp    edx,eax
c000b2e8:	72 42                	jb     c000b32c <tcp_kill_prio+0x94>
c000b2ea:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b2f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2f4:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b2f7:	29 c2                	sub    edx,eax
c000b2f9:	89 d0                	mov    eax,edx
c000b2fb:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b2ff:	77 2b                	ja     c000b32c <tcp_kill_prio+0x94>
c000b301:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b30b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b30e:	29 c2                	sub    edx,eax
c000b310:	89 d0                	mov    eax,edx
c000b312:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b31a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b31e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b322:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b325:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b329:	8d 76 00             	lea    esi,[esi+0x0]
c000b32c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b330:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b333:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b337:	90                   	nop
c000b338:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b33d:	75 85                	jne    c000b2c4 <tcp_kill_prio+0x2c>
c000b33f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b344:	74 12                	je     c000b358 <tcp_kill_prio+0xc0>
c000b346:	83 ec 0c             	sub    esp,0xc
c000b349:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b34d:	e8 2a ff ff ff       	call   c000b27c <tcp_abort>
c000b352:	83 c4 10             	add    esp,0x10
c000b355:	8d 76 00             	lea    esi,[esi+0x0]
c000b358:	90                   	nop
c000b359:	83 c4 2c             	add    esp,0x2c
c000b35c:	c3                   	ret    
c000b35d:	8d 76 00             	lea    esi,[esi+0x0]

c000b360 <tcp_kill_timewait>:
c000b360:	83 ec 1c             	sub    esp,0x1c
c000b363:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b36b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b373:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b378:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b37c:	eb 42                	jmp    c000b3c0 <tcp_kill_timewait+0x60>
c000b37e:	66 90                	xchg   ax,ax
c000b380:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b38a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b38d:	29 c2                	sub    edx,eax
c000b38f:	89 d0                	mov    eax,edx
c000b391:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b395:	77 1d                	ja     c000b3b4 <tcp_kill_timewait+0x54>
c000b397:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3a1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b3a4:	29 c2                	sub    edx,eax
c000b3a6:	89 d0                	mov    eax,edx
c000b3a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b3ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b3bf:	90                   	nop
c000b3c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b3c5:	75 b9                	jne    c000b380 <tcp_kill_timewait+0x20>
c000b3c7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b3cc:	74 12                	je     c000b3e0 <tcp_kill_timewait+0x80>
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 a2 fe ff ff       	call   c000b27c <tcp_abort>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b3e0:	90                   	nop
c000b3e1:	83 c4 1c             	add    esp,0x1c
c000b3e4:	c3                   	ret    
c000b3e5:	8d 76 00             	lea    esi,[esi+0x0]

c000b3e8 <tcp_next_iss>:
c000b3e8:	8b 15 dc 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033bdc
c000b3ee:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b3f3:	01 d0                	add    eax,edx
c000b3f5:	a3 dc 3b 03 c0       	mov    ds:0xc0033bdc,eax
c000b3fa:	a1 dc 3b 03 c0       	mov    eax,ds:0xc0033bdc
c000b3ff:	c3                   	ret    

c000b400 <tcp_alloc>:
c000b400:	83 ec 2c             	sub    esp,0x2c
c000b403:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b407:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b40b:	83 ec 0c             	sub    esp,0xc
c000b40e:	6a 02                	push   0x2
c000b410:	e8 5f c5 ff ff       	call   c0007974 <memp_malloc>
c000b415:	83 c4 10             	add    esp,0x10
c000b418:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b41c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b421:	75 6d                	jne    c000b490 <tcp_alloc+0x90>
c000b423:	e8 38 ff ff ff       	call   c000b360 <tcp_kill_timewait>
c000b428:	83 ec 0c             	sub    esp,0xc
c000b42b:	6a 02                	push   0x2
c000b42d:	e8 42 c5 ff ff       	call   c0007974 <memp_malloc>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b439:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b43e:	75 38                	jne    c000b478 <tcp_alloc+0x78>
c000b440:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	50                   	push   eax
c000b449:	e8 4a fe ff ff       	call   c000b298 <tcp_kill_prio>
c000b44e:	83 c4 10             	add    esp,0x10
c000b451:	83 ec 0c             	sub    esp,0xc
c000b454:	6a 02                	push   0x2
c000b456:	e8 19 c5 ff ff       	call   c0007974 <memp_malloc>
c000b45b:	83 c4 10             	add    esp,0x10
c000b45e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b462:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b467:	74 0f                	je     c000b478 <tcp_alloc+0x78>
c000b469:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b46f:	83 e8 01             	sub    eax,0x1
c000b472:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b478:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b47d:	74 11                	je     c000b490 <tcp_alloc+0x90>
c000b47f:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b485:	83 e8 01             	sub    eax,0x1
c000b488:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b48e:	66 90                	xchg   ax,ax
c000b490:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b495:	0f 84 09 01 00 00    	je     c000b5a4 <tcp_alloc+0x1a4>
c000b49b:	83 ec 04             	sub    esp,0x4
c000b49e:	68 a8 00 00 00       	push   0xa8
c000b4a3:	6a 00                	push   0x0
c000b4a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b4a9:	e8 42 50 ff ff       	call   c00004f0 <memset>
c000b4ae:	83 c4 10             	add    esp,0x10
c000b4b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b5:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b4b9:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b4bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c0:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ca:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4d4:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4de:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b4e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4e8:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b4ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f0:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b4f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f8:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b4fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b502:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b50c:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b516:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b51c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b520:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b52a:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b530:	e8 b3 fe ff ff       	call   c000b3e8 <tcp_next_iss>
c000b535:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b53d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b541:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b548:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b54c:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b54f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b553:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b557:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b55a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b55e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b562:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b565:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b56b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b56f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b572:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b576:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b57e:	c7 80 8c 00 00 00 84 ae 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000ae84
c000b588:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b58c:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b59a:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a8:	83 c4 2c             	add    esp,0x2c
c000b5ab:	c3                   	ret    

c000b5ac <tcp_new>:
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	83 ec 0c             	sub    esp,0xc
c000b5b2:	6a 40                	push   0x40
c000b5b4:	e8 47 fe ff ff       	call   c000b400 <tcp_alloc>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	83 c4 0c             	add    esp,0xc
c000b5bf:	c3                   	ret    

c000b5c0 <tcp_eff_send_mss>:
c000b5c0:	53                   	push   ebx
c000b5c1:	83 ec 28             	sub    esp,0x28
c000b5c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5c8:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b5cd:	83 ec 0c             	sub    esp,0xc
c000b5d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b5d4:	e8 2b 80 00 00       	call   c0013604 <ip_route>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5e0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5e5:	74 3d                	je     c000b624 <tcp_eff_send_mss+0x64>
c000b5e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b5ee:	0f b7 c0             	movzx  eax,ax
c000b5f1:	85 c0                	test   eax,eax
c000b5f3:	74 2f                	je     c000b624 <tcp_eff_send_mss+0x64>
c000b5f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b5fc:	83 e8 28             	sub    eax,0x28
c000b5ff:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b604:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b608:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b60d:	0f b7 d8             	movzx  ebx,ax
c000b610:	0f b7 ca             	movzx  ecx,dx
c000b613:	39 cb                	cmp    ebx,ecx
c000b615:	76 05                	jbe    c000b61c <tcp_eff_send_mss+0x5c>
c000b617:	89 d0                	mov    eax,edx
c000b619:	8d 76 00             	lea    esi,[esi+0x0]
c000b61c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b621:	8d 76 00             	lea    esi,[esi+0x0]
c000b624:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b628:	83 c4 28             	add    esp,0x28
c000b62b:	5b                   	pop    ebx
c000b62c:	c3                   	ret    
c000b62d:	8d 76 00             	lea    esi,[esi+0x0]

c000b630 <tcp_connect>:
c000b630:	83 ec 2c             	sub    esp,0x2c
c000b633:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b637:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b63c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b640:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b643:	85 c0                	test   eax,eax
c000b645:	74 1d                	je     c000b664 <tcp_connect+0x34>
c000b647:	83 ec 08             	sub    esp,0x8
c000b64a:	68 c4 02 03 c0       	push   0xc00302c4
c000b64f:	68 26 fb 02 c0       	push   0xc002fb26
c000b654:	e8 4b 45 01 00       	call   c001fba4 <CPrintf>
c000b659:	83 c4 10             	add    esp,0x10
c000b65c:	b0 f7                	mov    al,0xf7
c000b65e:	e9 39 02 00 00       	jmp    c000b89c <tcp_connect+0x26c>
c000b663:	90                   	nop
c000b664:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b669:	74 25                	je     c000b690 <tcp_connect+0x60>
c000b66b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b66f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b673:	8b 12                	mov    edx,DWORD PTR [edx]
c000b675:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b678:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b67c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b680:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b688:	85 c0                	test   eax,eax
c000b68a:	74 18                	je     c000b6a4 <tcp_connect+0x74>
c000b68c:	eb 0a                	jmp    c000b698 <tcp_connect+0x68>
c000b68e:	66 90                	xchg   ax,ax
c000b690:	b0 fa                	mov    al,0xfa
c000b692:	e9 05 02 00 00       	jmp    c000b89c <tcp_connect+0x26c>
c000b697:	90                   	nop
c000b698:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b69c:	8b 00                	mov    eax,DWORD PTR [eax]
c000b69e:	85 c0                	test   eax,eax
c000b6a0:	75 3a                	jne    c000b6dc <tcp_connect+0xac>
c000b6a2:	66 90                	xchg   ax,ax
c000b6a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a8:	83 c0 04             	add    eax,0x4
c000b6ab:	83 ec 0c             	sub    esp,0xc
c000b6ae:	50                   	push   eax
c000b6af:	e8 50 7f 00 00       	call   c0013604 <ip_route>
c000b6b4:	83 c4 10             	add    esp,0x10
c000b6b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6bb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b6c0:	75 0a                	jne    c000b6cc <tcp_connect+0x9c>
c000b6c2:	b0 fc                	mov    al,0xfc
c000b6c4:	e9 d3 01 00 00       	jmp    c000b89c <tcp_connect+0x26c>
c000b6c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b6cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b6d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6d7:	89 10                	mov    DWORD PTR [eax],edx
c000b6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b6dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b6e3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b6e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b6ef:	0f b7 c0             	movzx  eax,ax
c000b6f2:	85 c0                	test   eax,eax
c000b6f4:	75 0e                	jne    c000b704 <tcp_connect+0xd4>
c000b6f6:	e8 19 e7 ff ff       	call   c0009e14 <tcp_new_port>
c000b6fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b6ff:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b703:	90                   	nop
c000b704:	e8 df fc ff ff       	call   c000b3e8 <tcp_next_iss>
c000b709:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b70d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b711:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b71c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b720:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b723:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b727:	8d 50 ff             	lea    edx,[eax-0x1]
c000b72a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b72e:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b731:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b735:	8d 50 ff             	lea    edx,[eax-0x1]
c000b738:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b73c:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b73f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b743:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b74d:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b757:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b75e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b765:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b76b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b76f:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b779:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b77c:	0f b7 c0             	movzx  eax,ax
c000b77f:	83 ec 08             	sub    esp,0x8
c000b782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b786:	50                   	push   eax
c000b787:	e8 34 fe ff ff       	call   c000b5c0 <tcp_eff_send_mss>
c000b78c:	83 c4 10             	add    esp,0x10
c000b78f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b793:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79b:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b7a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7a8:	89 c2                	mov    edx,eax
c000b7aa:	c1 e2 02             	shl    edx,0x2
c000b7ad:	01 d0                	add    eax,edx
c000b7af:	d1 e0                	shl    eax,1
c000b7b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b7b5:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b7b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7bd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b7c1:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b7c7:	83 ec 08             	sub    esp,0x8
c000b7ca:	6a 02                	push   0x2
c000b7cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b7d0:	e8 1b 40 00 00       	call   c000f7f0 <tcp_enqueue_flags>
c000b7d5:	83 c4 10             	add    esp,0x10
c000b7d8:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b7dc:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b7e1:	85 c0                	test   eax,eax
c000b7e3:	0f 85 af 00 00 00    	jne    c000b898 <tcp_connect+0x268>
c000b7e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7ed:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b7f4:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b7f9:	85 c0                	test   eax,eax
c000b7fb:	74 6f                	je     c000b86c <tcp_connect+0x23c>
c000b7fd:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b802:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b806:	75 10                	jne    c000b818 <tcp_connect+0x1e8>
c000b808:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b80d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b810:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b815:	eb 49                	jmp    c000b860 <tcp_connect+0x230>
c000b817:	90                   	nop
c000b818:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b81d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b822:	eb 30                	jmp    c000b854 <tcp_connect+0x224>
c000b824:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b829:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b82c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b830:	75 12                	jne    c000b844 <tcp_connect+0x214>
c000b832:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b837:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b83b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b83e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b841:	eb 1d                	jmp    c000b860 <tcp_connect+0x230>
c000b843:	90                   	nop
c000b844:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b849:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b84c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b851:	8d 76 00             	lea    esi,[esi+0x0]
c000b854:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b859:	85 c0                	test   eax,eax
c000b85b:	75 c7                	jne    c000b824 <tcp_connect+0x1f4>
c000b85d:	8d 76 00             	lea    esi,[esi+0x0]
c000b860:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b864:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b86b:	90                   	nop
c000b86c:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b876:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b879:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b87d:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b882:	e8 95 52 00 00       	call   c0010b1c <tcp_timer_needed>
c000b887:	83 ec 0c             	sub    esp,0xc
c000b88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b88e:	e8 f9 45 00 00       	call   c000fe8c <tcp_output>
c000b893:	83 c4 10             	add    esp,0x10
c000b896:	66 90                	xchg   ax,ax
c000b898:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b89c:	83 c4 2c             	add    esp,0x2c
c000b89f:	c3                   	ret    

c000b8a0 <tcp_debug_state_str>:
c000b8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8a4:	8b 04 85 40 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfbc0]
c000b8ab:	c3                   	ret    

c000b8ac <tcp_timewait_input>:
c000b8ac:	53                   	push   ebx
c000b8ad:	83 ec 08             	sub    esp,0x8
c000b8b0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8b5:	0f b6 c0             	movzx  eax,al
c000b8b8:	83 e0 04             	and    eax,0x4
c000b8bb:	74 07                	je     c000b8c4 <tcp_timewait_input+0x18>
c000b8bd:	b0 00                	mov    al,0x0
c000b8bf:	e9 e8 00 00 00       	jmp    c000b9ac <tcp_timewait_input+0x100>
c000b8c4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8c9:	0f b6 c0             	movzx  eax,al
c000b8cc:	83 e0 02             	and    eax,0x2
c000b8cf:	0f 84 83 00 00 00    	je     c000b958 <tcp_timewait_input+0xac>
c000b8d5:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8df:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b8e2:	29 c2                	sub    edx,eax
c000b8e4:	89 d0                	mov    eax,edx
c000b8e6:	0f 88 88 00 00 00    	js     c000b974 <tcp_timewait_input+0xc8>
c000b8ec:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8fd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b900:	0f b7 c0             	movzx  eax,ax
c000b903:	01 c8                	add    eax,ecx
c000b905:	29 c2                	sub    edx,eax
c000b907:	89 d0                	mov    eax,edx
c000b909:	85 c0                	test   eax,eax
c000b90b:	7f 67                	jg     c000b974 <tcp_timewait_input+0xc8>
c000b90d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b912:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b915:	0f b7 c8             	movzx  ecx,ax
c000b918:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b91d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b921:	0f b7 d0             	movzx  edx,ax
c000b924:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b92a:	0f b7 d8             	movzx  ebx,ax
c000b92d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b932:	01 c3                	add    ebx,eax
c000b934:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b939:	83 ec 08             	sub    esp,0x8
c000b93c:	51                   	push   ecx
c000b93d:	52                   	push   edx
c000b93e:	68 90 68 03 c0       	push   0xc0036890
c000b943:	68 98 68 03 c0       	push   0xc0036898
c000b948:	53                   	push   ebx
c000b949:	50                   	push   eax
c000b94a:	e8 c9 49 00 00       	call   c0010318 <tcp_rst>
c000b94f:	83 c4 20             	add    esp,0x20
c000b952:	b0 00                	mov    al,0x0
c000b954:	eb 56                	jmp    c000b9ac <tcp_timewait_input+0x100>
c000b956:	66 90                	xchg   ax,ax
c000b958:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b95d:	0f b6 c0             	movzx  eax,al
c000b960:	83 e0 01             	and    eax,0x1
c000b963:	74 0f                	je     c000b974 <tcp_timewait_input+0xc8>
c000b965:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b96f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b972:	66 90                	xchg   ax,ax
c000b974:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b97a:	0f b7 c0             	movzx  eax,ax
c000b97d:	85 c0                	test   eax,eax
c000b97f:	74 27                	je     c000b9a8 <tcp_timewait_input+0xfc>
c000b981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b985:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b988:	83 c8 02             	or     eax,0x2
c000b98b:	88 c2                	mov    dl,al
c000b98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b991:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b994:	83 ec 0c             	sub    esp,0xc
c000b997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b99b:	e8 ec 44 00 00       	call   c000fe8c <tcp_output>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	eb 07                	jmp    c000b9ac <tcp_timewait_input+0x100>
c000b9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9a8:	b0 00                	mov    al,0x0
c000b9aa:	66 90                	xchg   ax,ax
c000b9ac:	83 c4 08             	add    esp,0x8
c000b9af:	5b                   	pop    ebx
c000b9b0:	c3                   	ret    
c000b9b1:	8d 76 00             	lea    esi,[esi+0x0]

c000b9b4 <tcp_oos_insert_segment>:
c000b9b4:	53                   	push   ebx
c000b9b5:	83 ec 18             	sub    esp,0x18
c000b9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9bf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b9c3:	0f b7 c0             	movzx  eax,ax
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	50                   	push   eax
c000b9ca:	e8 19 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	0f b7 c0             	movzx  eax,ax
c000b9d5:	83 e0 01             	and    eax,0x1
c000b9d8:	0f 84 8e 00 00 00    	je     c000ba6c <tcp_oos_insert_segment+0xb8>
c000b9de:	83 ec 0c             	sub    esp,0xc
c000b9e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b9e5:	e8 2e e6 ff ff       	call   c000a018 <tcp_segs_free>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000b9f5:	e9 16 01 00 00       	jmp    c000bb10 <tcp_oos_insert_segment+0x15c>
c000b9fa:	66 90                	xchg   ax,ax
c000b9fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba03:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ba07:	0f b7 c0             	movzx  eax,ax
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	50                   	push   eax
c000ba0e:	e8 d5 51 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ba13:	83 c4 10             	add    esp,0x10
c000ba16:	0f b7 c0             	movzx  eax,ax
c000ba19:	83 e0 01             	and    eax,0x1
c000ba1c:	74 2a                	je     c000ba48 <tcp_oos_insert_segment+0x94>
c000ba1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba25:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000ba29:	83 ec 0c             	sub    esp,0xc
c000ba2c:	6a 01                	push   0x1
c000ba2e:	e8 b5 51 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ba33:	83 c4 10             	add    esp,0x10
c000ba36:	89 c1                	mov    ecx,eax
c000ba38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba3c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ba3f:	89 d8                	mov    eax,ebx
c000ba41:	09 c8                	or     eax,ecx
c000ba43:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ba47:	90                   	nop
c000ba48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba54:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba56:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ba5a:	83 ec 0c             	sub    esp,0xc
c000ba5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba61:	e8 6e e5 ff ff       	call   c0009fd4 <tcp_seg_free>
c000ba66:	83 c4 10             	add    esp,0x10
c000ba69:	8d 76 00             	lea    esi,[esi+0x0]
c000ba6c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ba71:	74 35                	je     c000baa8 <tcp_oos_insert_segment+0xf4>
c000ba73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba7a:	0f b7 d0             	movzx  edx,ax
c000ba7d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba82:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ba85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ba8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba93:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba96:	0f b7 c0             	movzx  eax,ax
c000ba99:	01 d0                	add    eax,edx
c000ba9b:	29 c1                	sub    ecx,eax
c000ba9d:	89 c8                	mov    eax,ecx
c000ba9f:	0f 89 57 ff ff ff    	jns    c000b9fc <tcp_oos_insert_segment+0x48>
c000baa5:	8d 76 00             	lea    esi,[esi+0x0]
c000baa8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000baad:	74 61                	je     c000bb10 <tcp_oos_insert_segment+0x15c>
c000baaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bab6:	0f b7 d0             	movzx  edx,ax
c000bab9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000babe:	01 c2                	add    edx,eax
c000bac0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bac4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bac7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000baca:	29 c2                	sub    edx,eax
c000bacc:	89 d0                	mov    eax,edx
c000bace:	85 c0                	test   eax,eax
c000bad0:	7e 3e                	jle    c000bb10 <tcp_oos_insert_segment+0x15c>
c000bad2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bad6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bad9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000badc:	89 c2                	mov    edx,eax
c000bade:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bae3:	89 d3                	mov    ebx,edx
c000bae5:	29 c3                	sub    ebx,eax
c000bae7:	89 d8                	mov    eax,ebx
c000bae9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baed:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000baf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000baf8:	0f b7 d0             	movzx  edx,ax
c000bafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb02:	83 ec 08             	sub    esp,0x8
c000bb05:	52                   	push   edx
c000bb06:	50                   	push   eax
c000bb07:	e8 20 ce ff ff       	call   c000892c <pbuf_realloc>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	90                   	nop
c000bb10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb14:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bb18:	89 10                	mov    DWORD PTR [eax],edx
c000bb1a:	90                   	nop
c000bb1b:	83 c4 18             	add    esp,0x18
c000bb1e:	5b                   	pop    ebx
c000bb1f:	c3                   	ret    

c000bb20 <tcp_receive>:
c000bb20:	57                   	push   edi
c000bb21:	56                   	push   esi
c000bb22:	53                   	push   ebx
c000bb23:	83 ec 30             	sub    esp,0x30
c000bb26:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb2e:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bb33:	0f b6 c0             	movzx  eax,al
c000bb36:	83 e0 10             	and    eax,0x10
c000bb39:	0f 84 e5 07 00 00    	je     c000c324 <tcp_receive+0x804>
c000bb3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb43:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb46:	0f b7 d0             	movzx  edx,ax
c000bb49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb4d:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bb50:	01 d0                	add    eax,edx
c000bb52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb5a:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bb5d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bb62:	29 c2                	sub    edx,eax
c000bb64:	89 d0                	mov    eax,edx
c000bb66:	78 50                	js     c000bbb8 <tcp_receive+0x98>
c000bb68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb6c:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bb6f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bb74:	39 c2                	cmp    edx,eax
c000bb76:	75 14                	jne    c000bb8c <tcp_receive+0x6c>
c000bb78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb7c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb7f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb84:	29 c2                	sub    edx,eax
c000bb86:	89 d0                	mov    eax,edx
c000bb88:	78 2e                	js     c000bbb8 <tcp_receive+0x98>
c000bb8a:	66 90                	xchg   ax,ax
c000bb8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb90:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb93:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb98:	39 c2                	cmp    edx,eax
c000bb9a:	75 74                	jne    c000bc10 <tcp_receive+0xf0>
c000bb9c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bba1:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bba5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bba9:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbac:	0f b7 d2             	movzx  edx,dx
c000bbaf:	0f b7 c0             	movzx  eax,ax
c000bbb2:	39 c2                	cmp    edx,eax
c000bbb4:	76 5a                	jbe    c000bc10 <tcp_receive+0xf0>
c000bbb6:	66 90                	xchg   ax,ax
c000bbb8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bbbd:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bbc1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bbc5:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bbc9:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bbcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd3:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bbd6:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bbdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbe0:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bbe3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbe7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbea:	0f b7 c0             	movzx  eax,ax
c000bbed:	85 c0                	test   eax,eax
c000bbef:	74 1f                	je     c000bc10 <tcp_receive+0xf0>
c000bbf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbf5:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bbfb:	0f b6 c0             	movzx  eax,al
c000bbfe:	85 c0                	test   eax,eax
c000bc00:	74 0e                	je     c000bc10 <tcp_receive+0xf0>
c000bc02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc06:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc10:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc1a:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bc1d:	29 c2                	sub    edx,eax
c000bc1f:	89 d0                	mov    eax,edx
c000bc21:	85 c0                	test   eax,eax
c000bc23:	0f 8f ff 00 00 00    	jg     c000bd28 <tcp_receive+0x208>
c000bc29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc2d:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bc33:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bc39:	0f b7 c0             	movzx  eax,ax
c000bc3c:	85 c0                	test   eax,eax
c000bc3e:	0f 85 cc 00 00 00    	jne    c000bd10 <tcp_receive+0x1f0>
c000bc44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc48:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bc4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc4f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bc52:	0f b7 c0             	movzx  eax,ax
c000bc55:	01 d0                	add    eax,edx
c000bc57:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bc5b:	0f 85 af 00 00 00    	jne    c000bd10 <tcp_receive+0x1f0>
c000bc61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc65:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bc69:	98                   	cwde   
c000bc6a:	85 c0                	test   eax,eax
c000bc6c:	0f 88 9e 00 00 00    	js     c000bd10 <tcp_receive+0x1f0>
c000bc72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc76:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bc79:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bc7e:	39 c2                	cmp    edx,eax
c000bc80:	0f 85 8a 00 00 00    	jne    c000bd10 <tcp_receive+0x1f0>
c000bc86:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bc8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc92:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc95:	83 c0 01             	add    eax,0x1
c000bc98:	88 c2                	mov    dl,al
c000bc9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc9e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bca5:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bca8:	0f b6 c0             	movzx  eax,al
c000bcab:	83 f8 03             	cmp    eax,0x3
c000bcae:	76 40                	jbe    c000bcf0 <tcp_receive+0x1d0>
c000bcb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcb4:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bcb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bcbf:	01 d0                	add    eax,edx
c000bcc1:	89 c2                	mov    edx,eax
c000bcc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcc7:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bccb:	0f b7 d2             	movzx  edx,dx
c000bcce:	0f b7 c0             	movzx  eax,ax
c000bcd1:	39 c2                	cmp    edx,eax
c000bcd3:	76 3b                	jbe    c000bd10 <tcp_receive+0x1f0>
c000bcd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bcdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bce4:	01 d0                	add    eax,edx
c000bce6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcea:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bcee:	eb 20                	jmp    c000bd10 <tcp_receive+0x1f0>
c000bcf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf4:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bcf7:	0f b6 c0             	movzx  eax,al
c000bcfa:	83 f8 03             	cmp    eax,0x3
c000bcfd:	75 11                	jne    c000bd10 <tcp_receive+0x1f0>
c000bcff:	83 ec 0c             	sub    esp,0xc
c000bd02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd06:	e8 d9 48 00 00       	call   c00105e4 <tcp_rexmit_fast>
c000bd0b:	83 c4 10             	add    esp,0x10
c000bd0e:	66 90                	xchg   ax,ax
c000bd10:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bd15:	0f 85 99 04 00 00    	jne    c000c1b4 <tcp_receive+0x694>
c000bd1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1f:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd23:	e9 8c 04 00 00       	jmp    c000c1b4 <tcp_receive+0x694>
c000bd28:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd32:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd35:	29 c2                	sub    edx,eax
c000bd37:	89 d0                	mov    eax,edx
c000bd39:	83 e8 01             	sub    eax,0x1
c000bd3c:	0f 88 4a 03 00 00    	js     c000c08c <tcp_receive+0x56c>
c000bd42:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd4c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bd4f:	29 c2                	sub    edx,eax
c000bd51:	89 d0                	mov    eax,edx
c000bd53:	85 c0                	test   eax,eax
c000bd55:	0f 8f 31 03 00 00    	jg     c000c08c <tcp_receive+0x56c>
c000bd5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd5f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bd62:	0f b6 c0             	movzx  eax,al
c000bd65:	83 e0 04             	and    eax,0x4
c000bd68:	74 22                	je     c000bd8c <tcp_receive+0x26c>
c000bd6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bd71:	83 e0 fb             	and    eax,0xfffffffb
c000bd74:	88 c2                	mov    dl,al
c000bd76:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bd7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd81:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bd84:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd88:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bd8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd90:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bd94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd98:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bd9b:	98                   	cwde   
c000bd9c:	c1 f8 03             	sar    eax,0x3
c000bd9f:	89 c2                	mov    edx,eax
c000bda1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda5:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bda9:	01 d0                	add    eax,edx
c000bdab:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bdaf:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bdb3:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bdb8:	89 c2                	mov    edx,eax
c000bdba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdbe:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bdc1:	89 d7                	mov    edi,edx
c000bdc3:	29 c7                	sub    edi,eax
c000bdc5:	89 f8                	mov    eax,edi
c000bdc7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bdcb:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bdcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd3:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bdd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bddb:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bdde:	01 d0                	add    eax,edx
c000bde0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bde4:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bde8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdec:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bdf0:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bdf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfa:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bdfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be01:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000be04:	83 f8 03             	cmp    eax,0x3
c000be07:	0f 86 db 01 00 00    	jbe    c000bfe8 <tcp_receive+0x4c8>
c000be0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be11:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be19:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000be1c:	0f b7 d2             	movzx  edx,dx
c000be1f:	0f b7 c0             	movzx  eax,ax
c000be22:	39 c2                	cmp    edx,eax
c000be24:	73 4a                	jae    c000be70 <tcp_receive+0x350>
c000be26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2a:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be35:	01 d0                	add    eax,edx
c000be37:	89 c2                	mov    edx,eax
c000be39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3d:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be41:	0f b7 d2             	movzx  edx,dx
c000be44:	0f b7 c0             	movzx  eax,ax
c000be47:	39 c2                	cmp    edx,eax
c000be49:	0f 86 99 01 00 00    	jbe    c000bfe8 <tcp_receive+0x4c8>
c000be4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be53:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be5e:	01 d0                	add    eax,edx
c000be60:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be64:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be68:	e9 7b 01 00 00       	jmp    c000bfe8 <tcp_receive+0x4c8>
c000be6d:	8d 76 00             	lea    esi,[esi+0x0]
c000be70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be74:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000be78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be7f:	0f b7 d0             	movzx  edx,ax
c000be82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be89:	0f b7 c0             	movzx  eax,ax
c000be8c:	0f af d0             	imul   edx,eax
c000be8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be93:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be97:	0f b7 d8             	movzx  ebx,ax
c000be9a:	89 d0                	mov    eax,edx
c000be9c:	89 c2                	mov    edx,eax
c000be9e:	c1 fa 1f             	sar    edx,0x1f
c000bea1:	f7 fb                	idiv   ebx
c000bea3:	01 c8                	add    eax,ecx
c000bea5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000beaa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beae:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000beb2:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000beb7:	0f b7 c0             	movzx  eax,ax
c000beba:	39 c2                	cmp    edx,eax
c000bebc:	0f 86 26 01 00 00    	jbe    c000bfe8 <tcp_receive+0x4c8>
c000bec2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bec6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000becb:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000becf:	e9 14 01 00 00       	jmp    c000bfe8 <tcp_receive+0x4c8>
c000bed4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bed8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bedb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bee6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bee8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beec:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000beef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef3:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000bef6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000befa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000befd:	83 ec 0c             	sub    esp,0xc
c000bf00:	50                   	push   eax
c000bf01:	e8 2a cc ff ff       	call   c0008b30 <pbuf_clen>
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	0f b6 c0             	movzx  eax,al
c000bf0c:	0f b7 d3             	movzx  edx,bx
c000bf0f:	0f b7 c0             	movzx  eax,ax
c000bf12:	39 c2                	cmp    edx,eax
c000bf14:	73 16                	jae    c000bf2c <tcp_receive+0x40c>
c000bf16:	83 ec 08             	sub    esp,0x8
c000bf19:	68 6c 04 03 c0       	push   0xc003046c
c000bf1e:	68 26 fb 02 c0       	push   0xc002fb26
c000bf23:	e8 7c 3c 01 00       	call   c001fba4 <CPrintf>
c000bf28:	83 c4 10             	add    esp,0x10
c000bf2b:	90                   	nop
c000bf2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf30:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf33:	0f b7 c0             	movzx  eax,ax
c000bf36:	85 c0                	test   eax,eax
c000bf38:	74 36                	je     c000bf70 <tcp_receive+0x450>
c000bf3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf41:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bf45:	0f b7 c0             	movzx  eax,ax
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	50                   	push   eax
c000bf4c:	e8 97 4c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bf51:	83 c4 10             	add    esp,0x10
c000bf54:	0f b7 c0             	movzx  eax,ax
c000bf57:	83 e0 01             	and    eax,0x1
c000bf5a:	74 14                	je     c000bf70 <tcp_receive+0x450>
c000bf5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf60:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf63:	83 e8 01             	sub    eax,0x1
c000bf66:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf6a:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bf6e:	66 90                	xchg   ax,ax
c000bf70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf77:	83 ec 0c             	sub    esp,0xc
c000bf7a:	50                   	push   eax
c000bf7b:	e8 b0 cb ff ff       	call   c0008b30 <pbuf_clen>
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	88 c1                	mov    cl,al
c000bf85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf89:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bf8c:	0f b6 c1             	movzx  eax,cl
c000bf8f:	89 d7                	mov    edi,edx
c000bf91:	29 c7                	sub    edi,eax
c000bf93:	89 f8                	mov    eax,edi
c000bf95:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf99:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000bf9d:	83 ec 0c             	sub    esp,0xc
c000bfa0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bfa4:	e8 2b e0 ff ff       	call   c0009fd4 <tcp_seg_free>
c000bfa9:	83 c4 10             	add    esp,0x10
c000bfac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000bfb3:	0f b7 c0             	movzx  eax,ax
c000bfb6:	85 c0                	test   eax,eax
c000bfb8:	74 2e                	je     c000bfe8 <tcp_receive+0x4c8>
c000bfba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbe:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfc1:	85 c0                	test   eax,eax
c000bfc3:	75 23                	jne    c000bfe8 <tcp_receive+0x4c8>
c000bfc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bfcc:	85 c0                	test   eax,eax
c000bfce:	75 18                	jne    c000bfe8 <tcp_receive+0x4c8>
c000bfd0:	83 ec 08             	sub    esp,0x8
c000bfd3:	68 94 04 03 c0       	push   0xc0030494
c000bfd8:	68 26 fb 02 c0       	push   0xc002fb26
c000bfdd:	e8 c2 3b 01 00       	call   c001fba4 <CPrintf>
c000bfe2:	83 c4 10             	add    esp,0x10
c000bfe5:	8d 76 00             	lea    esi,[esi+0x0]
c000bfe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfec:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfef:	85 c0                	test   eax,eax
c000bff1:	74 69                	je     c000c05c <tcp_receive+0x53c>
c000bff3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bffa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bffd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c000:	83 ec 0c             	sub    esp,0xc
c000c003:	50                   	push   eax
c000c004:	e8 03 4c ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c009:	83 c4 10             	add    esp,0x10
c000c00c:	89 c3                	mov    ebx,eax
c000c00e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c012:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c015:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c018:	0f b7 f0             	movzx  esi,ax
c000c01b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c022:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c025:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c029:	0f b7 c0             	movzx  eax,ax
c000c02c:	83 ec 0c             	sub    esp,0xc
c000c02f:	50                   	push   eax
c000c030:	e8 b3 4b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c035:	83 c4 10             	add    esp,0x10
c000c038:	0f b7 c0             	movzx  eax,ax
c000c03b:	83 e0 03             	and    eax,0x3
c000c03e:	0f 95 c0             	setne  al
c000c041:	0f b6 c0             	movzx  eax,al
c000c044:	01 f0                	add    eax,esi
c000c046:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c049:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c04e:	29 c2                	sub    edx,eax
c000c050:	89 d0                	mov    eax,edx
c000c052:	85 c0                	test   eax,eax
c000c054:	0f 8e 7a fe ff ff    	jle    c000bed4 <tcp_receive+0x3b4>
c000c05a:	66 90                	xchg   ax,ax
c000c05c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c060:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c063:	85 c0                	test   eax,eax
c000c065:	75 0d                	jne    c000c074 <tcp_receive+0x554>
c000c067:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c06b:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c071:	eb 0d                	jmp    c000c080 <tcp_receive+0x560>
c000c073:	90                   	nop
c000c074:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c078:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c07e:	66 90                	xchg   ax,ax
c000c080:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c084:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c088:	eb 0e                	jmp    c000c098 <tcp_receive+0x578>
c000c08a:	66 90                	xchg   ax,ax
c000c08c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c090:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c096:	66 90                	xchg   ax,ax
c000c098:	e9 17 01 00 00       	jmp    c000c1b4 <tcp_receive+0x694>
c000c09d:	8d 76 00             	lea    esi,[esi+0x0]
c000c0a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0a4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0af:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0b8:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c0bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bf:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c0c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0c9:	83 ec 0c             	sub    esp,0xc
c000c0cc:	50                   	push   eax
c000c0cd:	e8 5e ca ff ff       	call   c0008b30 <pbuf_clen>
c000c0d2:	83 c4 10             	add    esp,0x10
c000c0d5:	0f b6 c0             	movzx  eax,al
c000c0d8:	0f b7 d3             	movzx  edx,bx
c000c0db:	0f b7 c0             	movzx  eax,ax
c000c0de:	39 c2                	cmp    edx,eax
c000c0e0:	73 16                	jae    c000c0f8 <tcp_receive+0x5d8>
c000c0e2:	83 ec 08             	sub    esp,0x8
c000c0e5:	68 6c 04 03 c0       	push   0xc003046c
c000c0ea:	68 26 fb 02 c0       	push   0xc002fb26
c000c0ef:	e8 b0 3a 01 00       	call   c001fba4 <CPrintf>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	90                   	nop
c000c0f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0fc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0ff:	0f b7 c0             	movzx  eax,ax
c000c102:	85 c0                	test   eax,eax
c000c104:	74 36                	je     c000c13c <tcp_receive+0x61c>
c000c106:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c10a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c10d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c111:	0f b7 c0             	movzx  eax,ax
c000c114:	83 ec 0c             	sub    esp,0xc
c000c117:	50                   	push   eax
c000c118:	e8 cb 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	0f b7 c0             	movzx  eax,ax
c000c123:	83 e0 01             	and    eax,0x1
c000c126:	74 14                	je     c000c13c <tcp_receive+0x61c>
c000c128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c12c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c12f:	83 e8 01             	sub    eax,0x1
c000c132:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c136:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c13a:	66 90                	xchg   ax,ax
c000c13c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	50                   	push   eax
c000c147:	e8 e4 c9 ff ff       	call   c0008b30 <pbuf_clen>
c000c14c:	83 c4 10             	add    esp,0x10
c000c14f:	88 c1                	mov    cl,al
c000c151:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c155:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c158:	0f b6 c1             	movzx  eax,cl
c000c15b:	89 d6                	mov    esi,edx
c000c15d:	29 c6                	sub    esi,eax
c000c15f:	89 f0                	mov    eax,esi
c000c161:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c165:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c169:	83 ec 0c             	sub    esp,0xc
c000c16c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c170:	e8 5f de ff ff       	call   c0009fd4 <tcp_seg_free>
c000c175:	83 c4 10             	add    esp,0x10
c000c178:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c17c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c17f:	0f b7 c0             	movzx  eax,ax
c000c182:	85 c0                	test   eax,eax
c000c184:	74 2e                	je     c000c1b4 <tcp_receive+0x694>
c000c186:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c18d:	85 c0                	test   eax,eax
c000c18f:	75 23                	jne    c000c1b4 <tcp_receive+0x694>
c000c191:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c195:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c198:	85 c0                	test   eax,eax
c000c19a:	75 18                	jne    c000c1b4 <tcp_receive+0x694>
c000c19c:	83 ec 08             	sub    esp,0x8
c000c19f:	68 94 04 03 c0       	push   0xc0030494
c000c1a4:	68 26 fb 02 c0       	push   0xc002fb26
c000c1a9:	e8 f6 39 01 00       	call   c001fba4 <CPrintf>
c000c1ae:	83 c4 10             	add    esp,0x10
c000c1b1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1bb:	85 c0                	test   eax,eax
c000c1bd:	74 7d                	je     c000c23c <tcp_receive+0x71c>
c000c1bf:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c1c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c1d2:	83 ec 0c             	sub    esp,0xc
c000c1d5:	50                   	push   eax
c000c1d6:	e8 31 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c1db:	83 c4 10             	add    esp,0x10
c000c1de:	89 c6                	mov    esi,eax
c000c1e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1e4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1ea:	0f b7 f8             	movzx  edi,ax
c000c1ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1f7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c1fb:	0f b7 c0             	movzx  eax,ax
c000c1fe:	83 ec 0c             	sub    esp,0xc
c000c201:	50                   	push   eax
c000c202:	e8 e1 49 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	0f b7 c0             	movzx  eax,ax
c000c20d:	83 e0 03             	and    eax,0x3
c000c210:	0f 95 c0             	setne  al
c000c213:	0f b6 c0             	movzx  eax,al
c000c216:	01 f8                	add    eax,edi
c000c218:	01 f0                	add    eax,esi
c000c21a:	29 c3                	sub    ebx,eax
c000c21c:	89 d8                	mov    eax,ebx
c000c21e:	78 1c                	js     c000c23c <tcp_receive+0x71c>
c000c220:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c226:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c22a:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c22d:	29 c2                	sub    edx,eax
c000c22f:	89 d0                	mov    eax,edx
c000c231:	85 c0                	test   eax,eax
c000c233:	0f 8e 67 fe ff ff    	jle    c000c0a0 <tcp_receive+0x580>
c000c239:	8d 76 00             	lea    esi,[esi+0x0]
c000c23c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c240:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c243:	85 c0                	test   eax,eax
c000c245:	0f 84 d9 00 00 00    	je     c000c324 <tcp_receive+0x804>
c000c24b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c24f:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c252:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c257:	29 c2                	sub    edx,eax
c000c259:	89 d0                	mov    eax,edx
c000c25b:	0f 89 c3 00 00 00    	jns    c000c324 <tcp_receive+0x804>
c000c261:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c266:	89 c2                	mov    edx,eax
c000c268:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c26c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c26f:	89 d7                	mov    edi,edx
c000c271:	29 c7                	sub    edi,eax
c000c273:	89 f8                	mov    eax,edi
c000c275:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c27a:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c27f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c283:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c286:	98                   	cwde   
c000c287:	c1 f8 03             	sar    eax,0x3
c000c28a:	89 d6                	mov    esi,edx
c000c28c:	29 c6                	sub    esi,eax
c000c28e:	89 f0                	mov    eax,esi
c000c290:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c295:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c299:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c29c:	89 c2                	mov    edx,eax
c000c29e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2a3:	01 d0                	add    eax,edx
c000c2a5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2a9:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c2ad:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c2b2:	85 c0                	test   eax,eax
c000c2b4:	79 0e                	jns    c000c2c4 <tcp_receive+0x7a4>
c000c2b6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2bb:	f7 d8                	neg    eax
c000c2bd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2c2:	66 90                	xchg   ax,ax
c000c2c4:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c2c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2cd:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c2d1:	98                   	cwde   
c000c2d2:	c1 f8 02             	sar    eax,0x2
c000c2d5:	89 d7                	mov    edi,edx
c000c2d7:	29 c7                	sub    edi,eax
c000c2d9:	89 f8                	mov    eax,edi
c000c2db:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2e4:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c2e8:	89 c2                	mov    edx,eax
c000c2ea:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2ef:	01 d0                	add    eax,edx
c000c2f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2f5:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c2f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2fd:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c300:	98                   	cwde   
c000c301:	c1 f8 03             	sar    eax,0x3
c000c304:	89 c2                	mov    edx,eax
c000c306:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c30a:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c30e:	01 d0                	add    eax,edx
c000c310:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c314:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c318:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c31c:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c323:	90                   	nop
c000c324:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c32a:	0f b7 c0             	movzx  eax,ax
c000c32d:	85 c0                	test   eax,eax
c000c32f:	0f 84 2f 0e 00 00    	je     c000d164 <tcp_receive+0x1644>
c000c335:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c339:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c33c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c341:	29 c2                	sub    edx,eax
c000c343:	89 d0                	mov    eax,edx
c000c345:	83 e8 01             	sub    eax,0x1
c000c348:	0f 88 c6 01 00 00    	js     c000c514 <tcp_receive+0x9f4>
c000c34e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c352:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c355:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c35b:	0f b7 c8             	movzx  ecx,ax
c000c35e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c363:	01 c8                	add    eax,ecx
c000c365:	29 c2                	sub    edx,eax
c000c367:	89 d0                	mov    eax,edx
c000c369:	83 c0 01             	add    eax,0x1
c000c36c:	85 c0                	test   eax,eax
c000c36e:	0f 8f a0 01 00 00    	jg     c000c514 <tcp_receive+0x9f4>
c000c374:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c378:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c37b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c380:	29 c2                	sub    edx,eax
c000c382:	89 d0                	mov    eax,edx
c000c384:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c388:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c38d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c391:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c396:	85 c0                	test   eax,eax
c000c398:	75 16                	jne    c000c3b0 <tcp_receive+0x890>
c000c39a:	83 ec 08             	sub    esp,0x8
c000c39d:	68 91 06 03 c0       	push   0xc0030691
c000c3a2:	68 26 fb 02 c0       	push   0xc002fb26
c000c3a7:	e8 f8 37 01 00       	call   c001fba4 <CPrintf>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	90                   	nop
c000c3b0:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c3b8:	7e 16                	jle    c000c3d0 <tcp_receive+0x8b0>
c000c3ba:	83 ec 08             	sub    esp,0x8
c000c3bd:	68 a1 06 03 c0       	push   0xc00306a1
c000c3c2:	68 26 fb 02 c0       	push   0xc002fb26
c000c3c7:	e8 d8 37 01 00       	call   c001fba4 <CPrintf>
c000c3cc:	83 c4 10             	add    esp,0x10
c000c3cf:	90                   	nop
c000c3d0:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3d5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3d9:	0f b7 c0             	movzx  eax,ax
c000c3dc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3e0:	0f 8e b6 00 00 00    	jle    c000c49c <tcp_receive+0x97c>
c000c3e6:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c3ee:	0f b7 c0             	movzx  eax,ax
c000c3f1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3f5:	7e 15                	jle    c000c40c <tcp_receive+0x8ec>
c000c3f7:	83 ec 08             	sub    esp,0x8
c000c3fa:	68 b0 06 03 c0       	push   0xc00306b0
c000c3ff:	68 26 fb 02 c0       	push   0xc002fb26
c000c404:	e8 9b 37 01 00       	call   c001fba4 <CPrintf>
c000c409:	83 c4 10             	add    esp,0x10
c000c40c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c411:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c414:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c418:	29 d0                	sub    eax,edx
c000c41a:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c41f:	eb 33                	jmp    c000c454 <tcp_receive+0x934>
c000c421:	8d 76 00             	lea    esi,[esi+0x0]
c000c424:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c428:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c42c:	0f b7 c0             	movzx  eax,ax
c000c42f:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c433:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c43b:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c43f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c443:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c449:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c44d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c44f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c453:	90                   	nop
c000c454:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c458:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c45c:	0f b7 c0             	movzx  eax,ax
c000c45f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c463:	7f bf                	jg     c000c424 <tcp_receive+0x904>
c000c465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c469:	f7 d8                	neg    eax
c000c46b:	98                   	cwde   
c000c46c:	83 ec 08             	sub    esp,0x8
c000c46f:	50                   	push   eax
c000c470:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c474:	e8 47 bd ff ff       	call   c00081c0 <pbuf_header>
c000c479:	83 c4 10             	add    esp,0x10
c000c47c:	0f b6 c0             	movzx  eax,al
c000c47f:	85 c0                	test   eax,eax
c000c481:	74 51                	je     c000c4d4 <tcp_receive+0x9b4>
c000c483:	83 ec 08             	sub    esp,0x8
c000c486:	68 c0 06 03 c0       	push   0xc00306c0
c000c48b:	68 26 fb 02 c0       	push   0xc002fb26
c000c490:	e8 0f 37 01 00       	call   c001fba4 <CPrintf>
c000c495:	83 c4 10             	add    esp,0x10
c000c498:	eb 3a                	jmp    c000c4d4 <tcp_receive+0x9b4>
c000c49a:	66 90                	xchg   ax,ax
c000c49c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4a0:	f7 d8                	neg    eax
c000c4a2:	0f bf d0             	movsx  edx,ax
c000c4a5:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c4aa:	83 ec 08             	sub    esp,0x8
c000c4ad:	52                   	push   edx
c000c4ae:	50                   	push   eax
c000c4af:	e8 0c bd ff ff       	call   c00081c0 <pbuf_header>
c000c4b4:	83 c4 10             	add    esp,0x10
c000c4b7:	0f b6 c0             	movzx  eax,al
c000c4ba:	85 c0                	test   eax,eax
c000c4bc:	74 16                	je     c000c4d4 <tcp_receive+0x9b4>
c000c4be:	83 ec 08             	sub    esp,0x8
c000c4c1:	68 c0 06 03 c0       	push   0xc00306c0
c000c4c6:	68 26 fb 02 c0       	push   0xc002fb26
c000c4cb:	e8 d4 36 01 00       	call   c001fba4 <CPrintf>
c000c4d0:	83 c4 10             	add    esp,0x10
c000c4d3:	90                   	nop
c000c4d4:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c4d9:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4df:	89 d1                	mov    ecx,edx
c000c4e1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c4e5:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c4e8:	89 ce                	mov    esi,ecx
c000c4ea:	29 d6                	sub    esi,edx
c000c4ec:	89 f2                	mov    edx,esi
c000c4ee:	01 d0                	add    eax,edx
c000c4f0:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c4f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4fa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c4fd:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c502:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c507:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c50d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c510:	eb 2a                	jmp    c000c53c <tcp_receive+0xa1c>
c000c512:	66 90                	xchg   ax,ax
c000c514:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c51a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c51e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c521:	29 c2                	sub    edx,eax
c000c523:	89 d0                	mov    eax,edx
c000c525:	79 15                	jns    c000c53c <tcp_receive+0xa1c>
c000c527:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c52b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c52e:	83 c8 02             	or     eax,0x2
c000c531:	88 c2                	mov    dl,al
c000c533:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c537:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c53a:	66 90                	xchg   ax,ax
c000c53c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c542:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c546:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c549:	29 c2                	sub    edx,eax
c000c54b:	89 d0                	mov    eax,edx
c000c54d:	0f 88 fd 0b 00 00    	js     c000d150 <tcp_receive+0x1630>
c000c553:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c559:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c55d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c560:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c564:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c567:	0f b7 c0             	movzx  eax,ax
c000c56a:	01 c8                	add    eax,ecx
c000c56c:	29 c2                	sub    edx,eax
c000c56e:	89 d0                	mov    eax,edx
c000c570:	83 c0 01             	add    eax,0x1
c000c573:	85 c0                	test   eax,eax
c000c575:	0f 8f d5 0b 00 00    	jg     c000d150 <tcp_receive+0x1630>
c000c57b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c57f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c582:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c587:	39 c2                	cmp    edx,eax
c000c589:	0f 85 1d 07 00 00    	jne    c000ccac <tcp_receive+0x118c>
c000c58f:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c595:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c59a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c59e:	0f b7 c0             	movzx  eax,ax
c000c5a1:	83 ec 0c             	sub    esp,0xc
c000c5a4:	50                   	push   eax
c000c5a5:	e8 3e 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5aa:	83 c4 10             	add    esp,0x10
c000c5ad:	0f b7 c0             	movzx  eax,ax
c000c5b0:	83 e0 03             	and    eax,0x3
c000c5b3:	0f 95 c0             	setne  al
c000c5b6:	0f b6 c0             	movzx  eax,al
c000c5b9:	01 d8                	add    eax,ebx
c000c5bb:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c5c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5c5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c5c8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c5ce:	0f b7 d2             	movzx  edx,dx
c000c5d1:	0f b7 c0             	movzx  eax,ax
c000c5d4:	39 c2                	cmp    edx,eax
c000c5d6:	0f 83 2c 01 00 00    	jae    c000c708 <tcp_receive+0xbe8>
c000c5dc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5e1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5e5:	0f b7 c0             	movzx  eax,ax
c000c5e8:	83 ec 0c             	sub    esp,0xc
c000c5eb:	50                   	push   eax
c000c5ec:	e8 f7 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	0f b7 c0             	movzx  eax,ax
c000c5f7:	83 e0 01             	and    eax,0x1
c000c5fa:	74 44                	je     c000c640 <tcp_receive+0xb20>
c000c5fc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c601:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c605:	80 e4 c0             	and    ah,0xc0
c000c608:	89 c3                	mov    ebx,eax
c000c60a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c60f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c613:	0f b7 c0             	movzx  eax,ax
c000c616:	83 ec 0c             	sub    esp,0xc
c000c619:	50                   	push   eax
c000c61a:	e8 c9 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	0f b7 c0             	movzx  eax,ax
c000c625:	83 e0 3e             	and    eax,0x3e
c000c628:	83 ec 0c             	sub    esp,0xc
c000c62b:	50                   	push   eax
c000c62c:	e8 b7 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	09 d8                	or     eax,ebx
c000c636:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c63c:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c640:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c644:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c647:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c64d:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c652:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c656:	0f b7 c0             	movzx  eax,ax
c000c659:	83 ec 0c             	sub    esp,0xc
c000c65c:	50                   	push   eax
c000c65d:	e8 86 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	0f b7 c0             	movzx  eax,ax
c000c668:	83 e0 02             	and    eax,0x2
c000c66b:	74 0f                	je     c000c67c <tcp_receive+0xb5c>
c000c66d:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c672:	83 e8 01             	sub    eax,0x1
c000c675:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c67b:	90                   	nop
c000c67c:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c681:	0f b7 d0             	movzx  edx,ax
c000c684:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c689:	83 ec 08             	sub    esp,0x8
c000c68c:	52                   	push   edx
c000c68d:	50                   	push   eax
c000c68e:	e8 99 c2 ff ff       	call   c000892c <pbuf_realloc>
c000c693:	83 c4 10             	add    esp,0x10
c000c696:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c69c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6a5:	0f b7 c0             	movzx  eax,ax
c000c6a8:	83 ec 0c             	sub    esp,0xc
c000c6ab:	50                   	push   eax
c000c6ac:	e8 37 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c6b1:	83 c4 10             	add    esp,0x10
c000c6b4:	0f b7 c0             	movzx  eax,ax
c000c6b7:	83 e0 03             	and    eax,0x3
c000c6ba:	0f 95 c0             	setne  al
c000c6bd:	0f b6 c0             	movzx  eax,al
c000c6c0:	01 d8                	add    eax,ebx
c000c6c2:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c6c8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c6ce:	0f b7 d0             	movzx  edx,ax
c000c6d1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c6d6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c6d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6dd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c6e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6e4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c6e7:	0f b7 c0             	movzx  eax,ax
c000c6ea:	01 d0                	add    eax,edx
c000c6ec:	39 c1                	cmp    ecx,eax
c000c6ee:	74 18                	je     c000c708 <tcp_receive+0xbe8>
c000c6f0:	83 ec 08             	sub    esp,0x8
c000c6f3:	68 b4 04 03 c0       	push   0xc00304b4
c000c6f8:	68 26 fb 02 c0       	push   0xc002fb26
c000c6fd:	e8 a2 34 01 00       	call   c001fba4 <CPrintf>
c000c702:	83 c4 10             	add    esp,0x10
c000c705:	8d 76 00             	lea    esi,[esi+0x0]
c000c708:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c70c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c712:	85 c0                	test   eax,eax
c000c714:	0f 84 7e 02 00 00    	je     c000c998 <tcp_receive+0xe78>
c000c71a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c71f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c723:	0f b7 c0             	movzx  eax,ax
c000c726:	83 ec 0c             	sub    esp,0xc
c000c729:	50                   	push   eax
c000c72a:	e8 b9 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	0f b7 c0             	movzx  eax,ax
c000c735:	83 e0 01             	and    eax,0x1
c000c738:	74 4a                	je     c000c784 <tcp_receive+0xc64>
c000c73a:	eb 34                	jmp    c000c770 <tcp_receive+0xc50>
c000c73c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c740:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c746:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c74a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c74e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c754:	8b 10                	mov    edx,DWORD PTR [eax]
c000c756:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75a:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c760:	83 ec 0c             	sub    esp,0xc
c000c763:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c767:	e8 68 d8 ff ff       	call   c0009fd4 <tcp_seg_free>
c000c76c:	83 c4 10             	add    esp,0x10
c000c76f:	90                   	nop
c000c770:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c774:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c77a:	85 c0                	test   eax,eax
c000c77c:	75 be                	jne    c000c73c <tcp_receive+0xc1c>
c000c77e:	e9 15 02 00 00       	jmp    c000c998 <tcp_receive+0xe78>
c000c783:	90                   	nop
c000c784:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c788:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c78e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c792:	e9 bd 00 00 00       	jmp    c000c854 <tcp_receive+0xd34>
c000c797:	90                   	nop
c000c798:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c79f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7a3:	0f b7 c0             	movzx  eax,ax
c000c7a6:	83 ec 0c             	sub    esp,0xc
c000c7a9:	50                   	push   eax
c000c7aa:	e8 39 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7af:	83 c4 10             	add    esp,0x10
c000c7b2:	0f b7 c0             	movzx  eax,ax
c000c7b5:	83 e0 01             	and    eax,0x1
c000c7b8:	74 76                	je     c000c830 <tcp_receive+0xd10>
c000c7ba:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7bf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7c3:	0f b7 c0             	movzx  eax,ax
c000c7c6:	83 ec 0c             	sub    esp,0xc
c000c7c9:	50                   	push   eax
c000c7ca:	e8 19 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7cf:	83 c4 10             	add    esp,0x10
c000c7d2:	0f b7 c0             	movzx  eax,ax
c000c7d5:	83 e0 02             	and    eax,0x2
c000c7d8:	75 56                	jne    c000c830 <tcp_receive+0xd10>
c000c7da:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7df:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c7e3:	83 ec 0c             	sub    esp,0xc
c000c7e6:	6a 01                	push   0x1
c000c7e8:	e8 fb 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7ed:	83 c4 10             	add    esp,0x10
c000c7f0:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c7f6:	09 d8                	or     eax,ebx
c000c7f8:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c7fc:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c802:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c807:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c80b:	0f b7 c0             	movzx  eax,ax
c000c80e:	83 ec 0c             	sub    esp,0xc
c000c811:	50                   	push   eax
c000c812:	e8 d1 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	0f b7 c0             	movzx  eax,ax
c000c81d:	83 e0 03             	and    eax,0x3
c000c820:	0f 95 c0             	setne  al
c000c823:	0f b6 c0             	movzx  eax,al
c000c826:	01 d8                	add    eax,ebx
c000c828:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c82e:	66 90                	xchg   ax,ax
c000c830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c834:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c838:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c83c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c83e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c842:	83 ec 0c             	sub    esp,0xc
c000c845:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c849:	e8 86 d7 ff ff       	call   c0009fd4 <tcp_seg_free>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	8d 76 00             	lea    esi,[esi+0x0]
c000c854:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c859:	74 31                	je     c000c88c <tcp_receive+0xd6c>
c000c85b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c861:	0f b7 d0             	movzx  edx,ax
c000c864:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c869:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c86c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c870:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c873:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c876:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c87a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c87d:	0f b7 c0             	movzx  eax,ax
c000c880:	01 d0                	add    eax,edx
c000c882:	29 c1                	sub    ecx,eax
c000c884:	89 c8                	mov    eax,ecx
c000c886:	0f 89 0c ff ff ff    	jns    c000c798 <tcp_receive+0xc78>
c000c88c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c891:	0f 84 f1 00 00 00    	je     c000c988 <tcp_receive+0xe68>
c000c897:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c89d:	0f b7 d0             	movzx  edx,ax
c000c8a0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8a5:	01 c2                	add    edx,eax
c000c8a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8b1:	29 c2                	sub    edx,eax
c000c8b3:	89 d0                	mov    eax,edx
c000c8b5:	85 c0                	test   eax,eax
c000c8b7:	0f 8e cb 00 00 00    	jle    c000c988 <tcp_receive+0xe68>
c000c8bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8c7:	89 c2                	mov    edx,eax
c000c8c9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8ce:	89 d7                	mov    edi,edx
c000c8d0:	29 c7                	sub    edi,eax
c000c8d2:	89 f8                	mov    eax,edi
c000c8d4:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c8da:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c8df:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8e3:	0f b7 c0             	movzx  eax,ax
c000c8e6:	83 ec 0c             	sub    esp,0xc
c000c8e9:	50                   	push   eax
c000c8ea:	e8 f9 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c8ef:	83 c4 10             	add    esp,0x10
c000c8f2:	0f b7 c0             	movzx  eax,ax
c000c8f5:	83 e0 02             	and    eax,0x2
c000c8f8:	74 0e                	je     c000c908 <tcp_receive+0xde8>
c000c8fa:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c8ff:	83 e8 01             	sub    eax,0x1
c000c902:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c908:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c90d:	0f b7 d0             	movzx  edx,ax
c000c910:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c915:	83 ec 08             	sub    esp,0x8
c000c918:	52                   	push   edx
c000c919:	50                   	push   eax
c000c91a:	e8 0d c0 ff ff       	call   c000892c <pbuf_realloc>
c000c91f:	83 c4 10             	add    esp,0x10
c000c922:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c928:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c92d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c931:	0f b7 c0             	movzx  eax,ax
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	50                   	push   eax
c000c938:	e8 ab 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	0f b7 c0             	movzx  eax,ax
c000c943:	83 e0 03             	and    eax,0x3
c000c946:	0f 95 c0             	setne  al
c000c949:	0f b6 c0             	movzx  eax,al
c000c94c:	01 d8                	add    eax,ebx
c000c94e:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c954:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c95a:	0f b7 d0             	movzx  edx,ax
c000c95d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c962:	01 c2                	add    edx,eax
c000c964:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c968:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c96b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c96e:	39 c2                	cmp    edx,eax
c000c970:	74 16                	je     c000c988 <tcp_receive+0xe68>
c000c972:	83 ec 08             	sub    esp,0x8
c000c975:	68 ec 04 03 c0       	push   0xc00304ec
c000c97a:	68 26 fb 02 c0       	push   0xc002fb26
c000c97f:	e8 20 32 01 00       	call   c001fba4 <CPrintf>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	90                   	nop
c000c988:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c98c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c990:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c996:	66 90                	xchg   ax,ax
c000c998:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c99e:	0f b7 d0             	movzx  edx,ax
c000c9a1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c9a6:	01 c2                	add    edx,eax
c000c9a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9ac:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c9af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9b3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c9b6:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9bc:	0f b7 d2             	movzx  edx,dx
c000c9bf:	0f b7 c0             	movzx  eax,ax
c000c9c2:	39 c2                	cmp    edx,eax
c000c9c4:	73 16                	jae    c000c9dc <tcp_receive+0xebc>
c000c9c6:	83 ec 08             	sub    esp,0x8
c000c9c9:	68 28 05 03 c0       	push   0xc0030528
c000c9ce:	68 26 fb 02 c0       	push   0xc002fb26
c000c9d3:	e8 cc 31 01 00       	call   c001fba4 <CPrintf>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	90                   	nop
c000c9dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c9e3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9e9:	89 d6                	mov    esi,edx
c000c9eb:	29 c6                	sub    esi,eax
c000c9ed:	89 f0                	mov    eax,esi
c000c9ef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c9f3:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000c9f7:	83 ec 0c             	sub    esp,0xc
c000c9fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9fe:	e8 7d d2 ff ff       	call   c0009c80 <tcp_update_rcv_ann_wnd>
c000ca03:	83 c4 10             	add    esp,0x10
c000ca06:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca0e:	0f b7 c0             	movzx  eax,ax
c000ca11:	85 c0                	test   eax,eax
c000ca13:	74 17                	je     c000ca2c <tcp_receive+0xf0c>
c000ca15:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca1a:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000ca1f:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000ca29:	8d 76 00             	lea    esi,[esi+0x0]
c000ca2c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000ca31:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca35:	0f b7 c0             	movzx  eax,ax
c000ca38:	83 ec 0c             	sub    esp,0xc
c000ca3b:	50                   	push   eax
c000ca3c:	e8 a7 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca41:	83 c4 10             	add    esp,0x10
c000ca44:	0f b7 c0             	movzx  eax,ax
c000ca47:	83 e0 01             	and    eax,0x1
c000ca4a:	0f 84 d8 01 00 00    	je     c000cc28 <tcp_receive+0x1108>
c000ca50:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000ca55:	83 c8 20             	or     eax,0x20
c000ca58:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000ca5d:	e9 c6 01 00 00       	jmp    c000cc28 <tcp_receive+0x1108>
c000ca62:	66 90                	xchg   ax,ax
c000ca64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca68:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca76:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca82:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000ca87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca8b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca8e:	0f b7 d8             	movzx  ebx,ax
c000ca91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca98:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca9c:	0f b7 c0             	movzx  eax,ax
c000ca9f:	83 ec 0c             	sub    esp,0xc
c000caa2:	50                   	push   eax
c000caa3:	e8 40 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000caa8:	83 c4 10             	add    esp,0x10
c000caab:	0f b7 c0             	movzx  eax,ax
c000caae:	83 e0 03             	and    eax,0x3
c000cab1:	0f 95 c0             	setne  al
c000cab4:	0f b6 c0             	movzx  eax,al
c000cab7:	8d 14 03             	lea    edx,[ebx+eax*1]
c000caba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cabe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cac1:	01 c2                	add    edx,eax
c000cac3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cac7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000caca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cace:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cad1:	0f b7 d8             	movzx  ebx,ax
c000cad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cadb:	0f b7 f0             	movzx  esi,ax
c000cade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cae2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cae5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cae9:	0f b7 c0             	movzx  eax,ax
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	50                   	push   eax
c000caf0:	e8 f3 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000caf5:	83 c4 10             	add    esp,0x10
c000caf8:	0f b7 c0             	movzx  eax,ax
c000cafb:	83 e0 03             	and    eax,0x3
c000cafe:	0f 95 c0             	setne  al
c000cb01:	0f b6 c0             	movzx  eax,al
c000cb04:	01 f0                	add    eax,esi
c000cb06:	39 c3                	cmp    ebx,eax
c000cb08:	7d 16                	jge    c000cb20 <tcp_receive+0x1000>
c000cb0a:	83 ec 08             	sub    esp,0x8
c000cb0d:	68 48 05 03 c0       	push   0xc0030548
c000cb12:	68 26 fb 02 c0       	push   0xc002fb26
c000cb17:	e8 88 30 01 00       	call   c001fba4 <CPrintf>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	90                   	nop
c000cb20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb27:	0f b7 d8             	movzx  ebx,ax
c000cb2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb31:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb35:	0f b7 c0             	movzx  eax,ax
c000cb38:	83 ec 0c             	sub    esp,0xc
c000cb3b:	50                   	push   eax
c000cb3c:	e8 a7 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cb41:	83 c4 10             	add    esp,0x10
c000cb44:	0f b7 c0             	movzx  eax,ax
c000cb47:	83 e0 03             	and    eax,0x3
c000cb4a:	0f 95 c0             	setne  al
c000cb4d:	0f b6 c0             	movzx  eax,al
c000cb50:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cb53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb57:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cb5a:	29 d0                	sub    eax,edx
c000cb5c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb60:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb6b:	e8 10 d1 ff ff       	call   c0009c80 <tcp_update_rcv_ann_wnd>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb7d:	0f b7 c0             	movzx  eax,ax
c000cb80:	85 c0                	test   eax,eax
c000cb82:	74 3c                	je     c000cbc0 <tcp_receive+0x10a0>
c000cb84:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb89:	85 c0                	test   eax,eax
c000cb8b:	74 1b                	je     c000cba8 <tcp_receive+0x1088>
c000cb8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb91:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cb94:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb99:	83 ec 08             	sub    esp,0x8
c000cb9c:	52                   	push   edx
c000cb9d:	50                   	push   eax
c000cb9e:	e8 f1 bf ff ff       	call   c0008b94 <pbuf_cat>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	eb 0c                	jmp    c000cbb4 <tcp_receive+0x1094>
c000cba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cbaf:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cbb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbbf:	90                   	nop
c000cbc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cbc7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cbcb:	0f b7 c0             	movzx  eax,ax
c000cbce:	83 ec 0c             	sub    esp,0xc
c000cbd1:	50                   	push   eax
c000cbd2:	e8 11 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cbd7:	83 c4 10             	add    esp,0x10
c000cbda:	0f b7 c0             	movzx  eax,ax
c000cbdd:	83 e0 01             	and    eax,0x1
c000cbe0:	74 26                	je     c000cc08 <tcp_receive+0x10e8>
c000cbe2:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cbe7:	83 c8 20             	or     eax,0x20
c000cbea:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cbef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbf3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cbf6:	83 f8 04             	cmp    eax,0x4
c000cbf9:	75 0d                	jne    c000cc08 <tcp_receive+0x10e8>
c000cbfb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbff:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cc06:	66 90                	xchg   ax,ax
c000cc08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc0c:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc12:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc18:	83 ec 0c             	sub    esp,0xc
c000cc1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc1f:	e8 b0 d3 ff ff       	call   c0009fd4 <tcp_seg_free>
c000cc24:	83 c4 10             	add    esp,0x10
c000cc27:	90                   	nop
c000cc28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc2c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc32:	85 c0                	test   eax,eax
c000cc34:	74 22                	je     c000cc58 <tcp_receive+0x1138>
c000cc36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc3a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cc46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cc4d:	39 c2                	cmp    edx,eax
c000cc4f:	0f 84 0f fe ff ff    	je     c000ca64 <tcp_receive+0xf44>
c000cc55:	8d 76 00             	lea    esi,[esi+0x0]
c000cc58:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc5f:	0f b6 c0             	movzx  eax,al
c000cc62:	83 e0 01             	and    eax,0x1
c000cc65:	74 2d                	je     c000cc94 <tcp_receive+0x1174>
c000cc67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc6e:	83 e0 fe             	and    eax,0xfffffffe
c000cc71:	88 c2                	mov    dl,al
c000cc73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc7e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc81:	83 c8 02             	or     eax,0x2
c000cc84:	88 c2                	mov    dl,al
c000cc86:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc8a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc8d:	e9 22 05 00 00       	jmp    c000d1b4 <tcp_receive+0x1694>
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc98:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc9b:	83 c8 01             	or     eax,0x1
c000cc9e:	88 c2                	mov    dl,al
c000cca0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cca4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cca7:	e9 08 05 00 00       	jmp    c000d1b4 <tcp_receive+0x1694>
c000ccac:	83 ec 0c             	sub    esp,0xc
c000ccaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ccb3:	e8 c4 2e 00 00       	call   c000fb7c <tcp_send_empty_ack>
c000ccb8:	83 c4 10             	add    esp,0x10
c000ccbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccbf:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ccc5:	85 c0                	test   eax,eax
c000ccc7:	75 23                	jne    c000ccec <tcp_receive+0x11cc>
c000ccc9:	83 ec 0c             	sub    esp,0xc
c000cccc:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ccd1:	e8 96 d3 ff ff       	call   c000a06c <tcp_seg_copy>
c000ccd6:	83 c4 10             	add    esp,0x10
c000ccd9:	89 c2                	mov    edx,eax
c000ccdb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccdf:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cce5:	e9 ca 04 00 00       	jmp    c000d1b4 <tcp_receive+0x1694>
c000ccea:	66 90                	xchg   ax,ax
c000ccec:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ccf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccf8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ccfe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cd02:	e9 21 04 00 00       	jmp    c000d128 <tcp_receive+0x1608>
c000cd07:	90                   	nop
c000cd08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd12:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cd17:	39 c2                	cmp    edx,eax
c000cd19:	75 75                	jne    c000cd90 <tcp_receive+0x1270>
c000cd1b:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cd21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd28:	0f b7 d2             	movzx  edx,dx
c000cd2b:	0f b7 c0             	movzx  eax,ax
c000cd2e:	39 c2                	cmp    edx,eax
c000cd30:	0f 86 02 04 00 00    	jbe    c000d138 <tcp_receive+0x1618>
c000cd36:	83 ec 0c             	sub    esp,0xc
c000cd39:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd3e:	e8 29 d3 ff ff       	call   c000a06c <tcp_seg_copy>
c000cd43:	83 c4 10             	add    esp,0x10
c000cd46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd4f:	0f 84 e7 03 00 00    	je     c000d13c <tcp_receive+0x161c>
c000cd55:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cd5a:	74 0c                	je     c000cd68 <tcp_receive+0x1248>
c000cd5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd64:	89 10                	mov    DWORD PTR [eax],edx
c000cd66:	eb 10                	jmp    c000cd78 <tcp_receive+0x1258>
c000cd68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd70:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd76:	66 90                	xchg   ax,ax
c000cd78:	83 ec 08             	sub    esp,0x8
c000cd7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd83:	e8 2c ec ff ff       	call   c000b9b4 <tcp_oos_insert_segment>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	e9 ac 03 00 00       	jmp    c000d13c <tcp_receive+0x161c>
c000cd90:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cd95:	75 61                	jne    c000cdf8 <tcp_receive+0x12d8>
c000cd97:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cda1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cda4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cda7:	29 c2                	sub    edx,eax
c000cda9:	89 d0                	mov    eax,edx
c000cdab:	0f 89 27 01 00 00    	jns    c000ced8 <tcp_receive+0x13b8>
c000cdb1:	83 ec 0c             	sub    esp,0xc
c000cdb4:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cdb9:	e8 ae d2 ff ff       	call   c000a06c <tcp_seg_copy>
c000cdbe:	83 c4 10             	add    esp,0x10
c000cdc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdc5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cdca:	0f 84 70 03 00 00    	je     c000d140 <tcp_receive+0x1620>
c000cdd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdd8:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdde:	83 ec 08             	sub    esp,0x8
c000cde1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cde5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cde9:	e8 c6 eb ff ff       	call   c000b9b4 <tcp_oos_insert_segment>
c000cdee:	83 c4 10             	add    esp,0x10
c000cdf1:	e9 4a 03 00 00       	jmp    c000d140 <tcp_receive+0x1620>
c000cdf6:	66 90                	xchg   ax,ax
c000cdf8:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cdfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce08:	29 c2                	sub    edx,eax
c000ce0a:	89 d0                	mov    eax,edx
c000ce0c:	83 e8 01             	sub    eax,0x1
c000ce0f:	0f 88 c3 00 00 00    	js     c000ced8 <tcp_receive+0x13b8>
c000ce15:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce25:	29 c2                	sub    edx,eax
c000ce27:	89 d0                	mov    eax,edx
c000ce29:	83 c0 01             	add    eax,0x1
c000ce2c:	85 c0                	test   eax,eax
c000ce2e:	0f 8f a4 00 00 00    	jg     c000ced8 <tcp_receive+0x13b8>
c000ce34:	83 ec 0c             	sub    esp,0xc
c000ce37:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce3c:	e8 2b d2 ff ff       	call   c000a06c <tcp_seg_copy>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce48:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ce4d:	0f 84 f1 02 00 00    	je     c000d144 <tcp_receive+0x1624>
c000ce53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce57:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce5a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ce5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce64:	0f b7 c0             	movzx  eax,ax
c000ce67:	01 c2                	add    edx,eax
c000ce69:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce6e:	29 c2                	sub    edx,eax
c000ce70:	89 d0                	mov    eax,edx
c000ce72:	85 c0                	test   eax,eax
c000ce74:	7e 3e                	jle    c000ceb4 <tcp_receive+0x1394>
c000ce76:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce7b:	89 c2                	mov    edx,eax
c000ce7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce87:	89 d7                	mov    edi,edx
c000ce89:	29 c7                	sub    edi,eax
c000ce8b:	89 f8                	mov    eax,edi
c000ce8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ce91:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ce95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce9c:	0f b7 d0             	movzx  edx,ax
c000ce9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cea3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cea6:	83 ec 08             	sub    esp,0x8
c000cea9:	52                   	push   edx
c000ceaa:	50                   	push   eax
c000ceab:	e8 7c ba ff ff       	call   c000892c <pbuf_realloc>
c000ceb0:	83 c4 10             	add    esp,0x10
c000ceb3:	90                   	nop
c000ceb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ceb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cebc:	89 10                	mov    DWORD PTR [eax],edx
c000cebe:	83 ec 08             	sub    esp,0x8
c000cec1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cec5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cec9:	e8 e6 ea ff ff       	call   c000b9b4 <tcp_oos_insert_segment>
c000cece:	83 c4 10             	add    esp,0x10
c000ced1:	e9 6e 02 00 00       	jmp    c000d144 <tcp_receive+0x1624>
c000ced6:	66 90                	xchg   ax,ax
c000ced8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cedc:	8b 00                	mov    eax,DWORD PTR [eax]
c000cede:	85 c0                	test   eax,eax
c000cee0:	0f 85 2e 02 00 00    	jne    c000d114 <tcp_receive+0x15f4>
c000cee6:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ceec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cef3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cef6:	29 c2                	sub    edx,eax
c000cef8:	89 d0                	mov    eax,edx
c000cefa:	85 c0                	test   eax,eax
c000cefc:	0f 8e 12 02 00 00    	jle    c000d114 <tcp_receive+0x15f4>
c000cf02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf06:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf09:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf0d:	0f b7 c0             	movzx  eax,ax
c000cf10:	83 ec 0c             	sub    esp,0xc
c000cf13:	50                   	push   eax
c000cf14:	e8 cf 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf19:	83 c4 10             	add    esp,0x10
c000cf1c:	0f b7 c0             	movzx  eax,ax
c000cf1f:	83 e0 01             	and    eax,0x1
c000cf22:	0f 85 20 02 00 00    	jne    c000d148 <tcp_receive+0x1628>
c000cf28:	83 ec 0c             	sub    esp,0xc
c000cf2b:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf30:	e8 37 d1 ff ff       	call   c000a06c <tcp_seg_copy>
c000cf35:	83 c4 10             	add    esp,0x10
c000cf38:	89 c2                	mov    edx,eax
c000cf3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf3e:	89 10                	mov    DWORD PTR [eax],edx
c000cf40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf44:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf46:	85 c0                	test   eax,eax
c000cf48:	0f 84 fe 01 00 00    	je     c000d14c <tcp_receive+0x162c>
c000cf4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf52:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf55:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cf58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf5f:	0f b7 c0             	movzx  eax,ax
c000cf62:	01 c2                	add    edx,eax
c000cf64:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf69:	29 c2                	sub    edx,eax
c000cf6b:	89 d0                	mov    eax,edx
c000cf6d:	85 c0                	test   eax,eax
c000cf6f:	7e 3f                	jle    c000cfb0 <tcp_receive+0x1490>
c000cf71:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf76:	89 c2                	mov    edx,eax
c000cf78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf82:	89 d6                	mov    esi,edx
c000cf84:	29 c6                	sub    esi,eax
c000cf86:	89 f0                	mov    eax,esi
c000cf88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cf8c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cf90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf97:	0f b7 d0             	movzx  edx,ax
c000cf9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfa1:	83 ec 08             	sub    esp,0x8
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	e8 81 b9 ff ff       	call   c000892c <pbuf_realloc>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	66 90                	xchg   ax,ax
c000cfb0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cfb6:	0f b7 d0             	movzx  edx,ax
c000cfb9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfbe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cfc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfc5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cfc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfcc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cfcf:	0f b7 c0             	movzx  eax,ax
c000cfd2:	01 d0                	add    eax,edx
c000cfd4:	39 c1                	cmp    ecx,eax
c000cfd6:	0f 86 70 01 00 00    	jbe    c000d14c <tcp_receive+0x162c>
c000cfdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfe0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfe2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfe5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cfe9:	0f b7 c0             	movzx  eax,ax
c000cfec:	83 ec 0c             	sub    esp,0xc
c000cfef:	50                   	push   eax
c000cff0:	e8 f3 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	0f b7 c0             	movzx  eax,ax
c000cffb:	83 e0 01             	and    eax,0x1
c000cffe:	74 50                	je     c000d050 <tcp_receive+0x1530>
c000d000:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d004:	8b 00                	mov    eax,DWORD PTR [eax]
c000d006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d009:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d00d:	80 e4 c0             	and    ah,0xc0
c000d010:	89 c3                	mov    ebx,eax
c000d012:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d016:	8b 00                	mov    eax,DWORD PTR [eax]
c000d018:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d01b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d01f:	0f b7 c0             	movzx  eax,ax
c000d022:	83 ec 0c             	sub    esp,0xc
c000d025:	50                   	push   eax
c000d026:	e8 bd 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d02b:	83 c4 10             	add    esp,0x10
c000d02e:	0f b7 c0             	movzx  eax,ax
c000d031:	83 e0 3e             	and    eax,0x3e
c000d034:	83 ec 0c             	sub    esp,0xc
c000d037:	50                   	push   eax
c000d038:	e8 ab 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	09 d8                	or     eax,ebx
c000d042:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d046:	8b 12                	mov    edx,DWORD PTR [edx]
c000d048:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000d04b:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000d04f:	90                   	nop
c000d050:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d054:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d057:	89 c2                	mov    edx,eax
c000d059:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d05d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d060:	01 d0                	add    eax,edx
c000d062:	89 c3                	mov    ebx,eax
c000d064:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d069:	89 c1                	mov    ecx,eax
c000d06b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d06f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d071:	89 d8                	mov    eax,ebx
c000d073:	29 c8                	sub    eax,ecx
c000d075:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d079:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d07d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d07f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d082:	0f b7 d0             	movzx  edx,ax
c000d085:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d089:	8b 00                	mov    eax,DWORD PTR [eax]
c000d08b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d08e:	83 ec 08             	sub    esp,0x8
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 94 b8 ff ff       	call   c000892c <pbuf_realloc>
c000d098:	83 c4 10             	add    esp,0x10
c000d09b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d09f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0a1:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d0a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ad:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0b1:	0f b7 c0             	movzx  eax,ax
c000d0b4:	83 ec 0c             	sub    esp,0xc
c000d0b7:	50                   	push   eax
c000d0b8:	e8 2b 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d0bd:	83 c4 10             	add    esp,0x10
c000d0c0:	0f b7 c0             	movzx  eax,ax
c000d0c3:	83 e0 03             	and    eax,0x3
c000d0c6:	0f 95 c0             	setne  al
c000d0c9:	0f b6 c0             	movzx  eax,al
c000d0cc:	01 d8                	add    eax,ebx
c000d0ce:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d0d4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d0da:	0f b7 d0             	movzx  edx,ax
c000d0dd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d0e2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d0e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0e9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d0ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0f0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d0f3:	0f b7 c0             	movzx  eax,ax
c000d0f6:	01 d0                	add    eax,edx
c000d0f8:	39 c1                	cmp    ecx,eax
c000d0fa:	74 50                	je     c000d14c <tcp_receive+0x162c>
c000d0fc:	83 ec 08             	sub    esp,0x8
c000d0ff:	68 b4 04 03 c0       	push   0xc00304b4
c000d104:	68 26 fb 02 c0       	push   0xc002fb26
c000d109:	e8 96 2a 01 00       	call   c001fba4 <CPrintf>
c000d10e:	83 c4 10             	add    esp,0x10
c000d111:	eb 39                	jmp    c000d14c <tcp_receive+0x162c>
c000d113:	90                   	nop
c000d114:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d118:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d11c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d120:	8b 00                	mov    eax,DWORD PTR [eax]
c000d122:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d126:	66 90                	xchg   ax,ax
c000d128:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d12d:	0f 85 d5 fb ff ff    	jne    c000cd08 <tcp_receive+0x11e8>
c000d133:	eb 7f                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d135:	8d 76 00             	lea    esi,[esi+0x0]
c000d138:	90                   	nop
c000d139:	eb 79                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d13b:	90                   	nop
c000d13c:	90                   	nop
c000d13d:	eb 75                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d13f:	90                   	nop
c000d140:	90                   	nop
c000d141:	eb 71                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d143:	90                   	nop
c000d144:	90                   	nop
c000d145:	eb 6d                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d147:	90                   	nop
c000d148:	90                   	nop
c000d149:	eb 69                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d14b:	90                   	nop
c000d14c:	90                   	nop
c000d14d:	eb 65                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d14f:	90                   	nop
c000d150:	83 ec 0c             	sub    esp,0xc
c000d153:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d157:	e8 20 2a 00 00       	call   c000fb7c <tcp_send_empty_ack>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	eb 53                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d161:	8d 76 00             	lea    esi,[esi+0x0]
c000d164:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d16a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d16e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d171:	29 c2                	sub    edx,eax
c000d173:	89 d0                	mov    eax,edx
c000d175:	78 25                	js     c000d19c <tcp_receive+0x167c>
c000d177:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d17d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d181:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d184:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d188:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d18b:	0f b7 c0             	movzx  eax,ax
c000d18e:	01 c8                	add    eax,ecx
c000d190:	29 c2                	sub    edx,eax
c000d192:	89 d0                	mov    eax,edx
c000d194:	83 c0 01             	add    eax,0x1
c000d197:	85 c0                	test   eax,eax
c000d199:	7e 19                	jle    c000d1b4 <tcp_receive+0x1694>
c000d19b:	90                   	nop
c000d19c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1a0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d1a3:	83 c8 02             	or     eax,0x2
c000d1a6:	88 c2                	mov    dl,al
c000d1a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1ac:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d1af:	eb 03                	jmp    c000d1b4 <tcp_receive+0x1694>
c000d1b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d1b4:	90                   	nop
c000d1b5:	83 c4 30             	add    esp,0x30
c000d1b8:	5b                   	pop    ebx
c000d1b9:	5e                   	pop    esi
c000d1ba:	5f                   	pop    edi
c000d1bb:	c3                   	ret    

c000d1bc <tcp_parseopt>:
c000d1bc:	83 ec 1c             	sub    esp,0x1c
c000d1bf:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1c4:	83 c0 14             	add    eax,0x14
c000d1c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1cb:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1d0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1d4:	0f b7 c0             	movzx  eax,ax
c000d1d7:	83 ec 0c             	sub    esp,0xc
c000d1da:	50                   	push   eax
c000d1db:	e8 08 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1e0:	83 c4 10             	add    esp,0x10
c000d1e3:	0f b7 c0             	movzx  eax,ax
c000d1e6:	c1 e8 0c             	shr    eax,0xc
c000d1e9:	0f b7 c0             	movzx  eax,ax
c000d1ec:	83 f8 05             	cmp    eax,0x5
c000d1ef:	0f 86 6f 01 00 00    	jbe    c000d364 <tcp_parseopt+0x1a8>
c000d1f5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1fa:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1fe:	0f b7 c0             	movzx  eax,ax
c000d201:	83 ec 0c             	sub    esp,0xc
c000d204:	50                   	push   eax
c000d205:	e8 de 39 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d20a:	83 c4 10             	add    esp,0x10
c000d20d:	0f b7 c0             	movzx  eax,ax
c000d210:	c1 e8 0c             	shr    eax,0xc
c000d213:	83 e8 05             	sub    eax,0x5
c000d216:	c1 e0 02             	shl    eax,0x2
c000d219:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d21e:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d225:	e9 1e 01 00 00       	jmp    c000d348 <tcp_parseopt+0x18c>
c000d22a:	66 90                	xchg   ax,ax
c000d22c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d235:	01 d0                	add    eax,edx
c000d237:	8a 00                	mov    al,BYTE PTR [eax]
c000d239:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d23d:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d242:	83 f8 01             	cmp    eax,0x1
c000d245:	74 15                	je     c000d25c <tcp_parseopt+0xa0>
c000d247:	83 f8 02             	cmp    eax,0x2
c000d24a:	74 24                	je     c000d270 <tcp_parseopt+0xb4>
c000d24c:	85 c0                	test   eax,eax
c000d24e:	0f 85 bc 00 00 00    	jne    c000d310 <tcp_parseopt+0x154>
c000d254:	e9 0b 01 00 00       	jmp    c000d364 <tcp_parseopt+0x1a8>
c000d259:	8d 76 00             	lea    esi,[esi+0x0]
c000d25c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d261:	83 c0 01             	add    eax,0x1
c000d264:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d269:	e9 da 00 00 00       	jmp    c000d348 <tcp_parseopt+0x18c>
c000d26e:	66 90                	xchg   ax,ax
c000d270:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d275:	8d 50 01             	lea    edx,[eax+0x1]
c000d278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d27c:	01 d0                	add    eax,edx
c000d27e:	8a 00                	mov    al,BYTE PTR [eax]
c000d280:	0f b6 c0             	movzx  eax,al
c000d283:	83 f8 04             	cmp    eax,0x4
c000d286:	0f 85 d0 00 00 00    	jne    c000d35c <tcp_parseopt+0x1a0>
c000d28c:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d291:	8d 50 03             	lea    edx,[eax+0x3]
c000d294:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d299:	39 c2                	cmp    edx,eax
c000d29b:	0f 8d bb 00 00 00    	jge    c000d35c <tcp_parseopt+0x1a0>
c000d2a1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2a6:	8d 50 02             	lea    edx,[eax+0x2]
c000d2a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2ad:	01 d0                	add    eax,edx
c000d2af:	8a 00                	mov    al,BYTE PTR [eax]
c000d2b1:	0f b6 c0             	movzx  eax,al
c000d2b4:	c1 e0 08             	shl    eax,0x8
c000d2b7:	89 c2                	mov    edx,eax
c000d2b9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2be:	8d 48 03             	lea    ecx,[eax+0x3]
c000d2c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2c5:	01 c8                	add    eax,ecx
c000d2c7:	8a 00                	mov    al,BYTE PTR [eax]
c000d2c9:	0f b6 c0             	movzx  eax,al
c000d2cc:	09 d0                	or     eax,edx
c000d2ce:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d2d3:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d2d8:	3d 18 02 00 00       	cmp    eax,0x218
c000d2dd:	77 11                	ja     c000d2f0 <tcp_parseopt+0x134>
c000d2df:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d2e4:	85 c0                	test   eax,eax
c000d2e6:	74 08                	je     c000d2f0 <tcp_parseopt+0x134>
c000d2e8:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d2ed:	eb 09                	jmp    c000d2f8 <tcp_parseopt+0x13c>
c000d2ef:	90                   	nop
c000d2f0:	b8 18 02 00 00       	mov    eax,0x218
c000d2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d2fc:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d300:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d305:	83 c0 04             	add    eax,0x4
c000d308:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d30d:	eb 39                	jmp    c000d348 <tcp_parseopt+0x18c>
c000d30f:	90                   	nop
c000d310:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d315:	8d 50 01             	lea    edx,[eax+0x1]
c000d318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d31c:	01 d0                	add    eax,edx
c000d31e:	8a 00                	mov    al,BYTE PTR [eax]
c000d320:	0f b6 c0             	movzx  eax,al
c000d323:	85 c0                	test   eax,eax
c000d325:	74 39                	je     c000d360 <tcp_parseopt+0x1a4>
c000d327:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d32c:	8d 50 01             	lea    edx,[eax+0x1]
c000d32f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d333:	01 d0                	add    eax,edx
c000d335:	8a 00                	mov    al,BYTE PTR [eax]
c000d337:	0f b6 c0             	movzx  eax,al
c000d33a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d33f:	01 d0                	add    eax,edx
c000d341:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d346:	66 90                	xchg   ax,ax
c000d348:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d34d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d352:	39 c2                	cmp    edx,eax
c000d354:	0f 82 d2 fe ff ff    	jb     c000d22c <tcp_parseopt+0x70>
c000d35a:	eb 08                	jmp    c000d364 <tcp_parseopt+0x1a8>
c000d35c:	90                   	nop
c000d35d:	eb 05                	jmp    c000d364 <tcp_parseopt+0x1a8>
c000d35f:	90                   	nop
c000d360:	90                   	nop
c000d361:	8d 76 00             	lea    esi,[esi+0x0]
c000d364:	83 c4 1c             	add    esp,0x1c
c000d367:	c3                   	ret    

c000d368 <tcp_listen_input>:
c000d368:	53                   	push   ebx
c000d369:	83 ec 18             	sub    esp,0x18
c000d36c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d371:	0f b6 c0             	movzx  eax,al
c000d374:	83 e0 10             	and    eax,0x10
c000d377:	74 4f                	je     c000d3c8 <tcp_listen_input+0x60>
c000d379:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d37e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d381:	0f b7 c8             	movzx  ecx,ax
c000d384:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d389:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d38d:	0f b7 d0             	movzx  edx,ax
c000d390:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d396:	0f b7 d8             	movzx  ebx,ax
c000d399:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d39e:	01 c3                	add    ebx,eax
c000d3a0:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d3a5:	83 c0 01             	add    eax,0x1
c000d3a8:	83 ec 08             	sub    esp,0x8
c000d3ab:	51                   	push   ecx
c000d3ac:	52                   	push   edx
c000d3ad:	68 90 68 03 c0       	push   0xc0036890
c000d3b2:	68 98 68 03 c0       	push   0xc0036898
c000d3b7:	53                   	push   ebx
c000d3b8:	50                   	push   eax
c000d3b9:	e8 5a 2f 00 00       	call   c0010318 <tcp_rst>
c000d3be:	83 c4 20             	add    esp,0x20
c000d3c1:	e9 a2 01 00 00       	jmp    c000d568 <tcp_listen_input+0x200>
c000d3c6:	66 90                	xchg   ax,ax
c000d3c8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d3cd:	0f b6 c0             	movzx  eax,al
c000d3d0:	83 e0 02             	and    eax,0x2
c000d3d3:	0f 84 8f 01 00 00    	je     c000d568 <tcp_listen_input+0x200>
c000d3d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3dd:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d3e0:	0f b6 c0             	movzx  eax,al
c000d3e3:	83 ec 0c             	sub    esp,0xc
c000d3e6:	50                   	push   eax
c000d3e7:	e8 14 e0 ff ff       	call   c000b400 <tcp_alloc>
c000d3ec:	83 c4 10             	add    esp,0x10
c000d3ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d3f3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d3f8:	75 16                	jne    c000d410 <tcp_listen_input+0xa8>
c000d3fa:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d400:	83 c0 01             	add    eax,0x1
c000d403:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d409:	b0 ff                	mov    al,0xff
c000d40b:	e9 5c 01 00 00       	jmp    c000d56c <tcp_listen_input+0x204>
c000d410:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d41a:	89 10                	mov    DWORD PTR [eax],edx
c000d41c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d420:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d423:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d427:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d42b:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d435:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d438:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d43d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d440:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d444:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d44c:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d453:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d458:	8d 50 01             	lea    edx,[eax+0x1]
c000d45b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d45f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d466:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d469:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d46d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d470:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d475:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d479:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d47d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d481:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d485:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d488:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d48c:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d490:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d495:	8d 50 ff             	lea    edx,[eax-0x1]
c000d498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d49c:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d49f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d4a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d4ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b1:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d4b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4b8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d4bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bf:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d4c2:	83 e0 8c             	and    eax,0xffffff8c
c000d4c5:	88 c2                	mov    dl,al
c000d4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4cb:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d4ce:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d4d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4d8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d4db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4df:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d4e4:	e8 33 36 00 00       	call   c0010b1c <tcp_timer_needed>
c000d4e9:	83 ec 0c             	sub    esp,0xc
c000d4ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4f0:	e8 c7 fc ff ff       	call   c000d1bc <tcp_parseopt>
c000d4f5:	83 c4 10             	add    esp,0x10
c000d4f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4fc:	8d 50 04             	lea    edx,[eax+0x4]
c000d4ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d503:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d506:	0f b7 c0             	movzx  eax,ax
c000d509:	83 ec 08             	sub    esp,0x8
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	e8 ad e0 ff ff       	call   c000b5c0 <tcp_eff_send_mss>
c000d513:	83 c4 10             	add    esp,0x10
c000d516:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d51a:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d51e:	83 ec 08             	sub    esp,0x8
c000d521:	6a 12                	push   0x12
c000d523:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d527:	e8 c4 22 00 00       	call   c000f7f0 <tcp_enqueue_flags>
c000d52c:	83 c4 10             	add    esp,0x10
c000d52f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d533:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d538:	85 c0                	test   eax,eax
c000d53a:	74 18                	je     c000d554 <tcp_listen_input+0x1ec>
c000d53c:	83 ec 08             	sub    esp,0x8
c000d53f:	6a 00                	push   0x0
c000d541:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d545:	e8 9e db ff ff       	call   c000b0e8 <tcp_abandon>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d551:	eb 19                	jmp    c000d56c <tcp_listen_input+0x204>
c000d553:	90                   	nop
c000d554:	83 ec 0c             	sub    esp,0xc
c000d557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d55b:	e8 2c 29 00 00       	call   c000fe8c <tcp_output>
c000d560:	83 c4 10             	add    esp,0x10
c000d563:	eb 07                	jmp    c000d56c <tcp_listen_input+0x204>
c000d565:	8d 76 00             	lea    esi,[esi+0x0]
c000d568:	b0 00                	mov    al,0x0
c000d56a:	66 90                	xchg   ax,ax
c000d56c:	83 c4 18             	add    esp,0x18
c000d56f:	5b                   	pop    ebx
c000d570:	c3                   	ret    
c000d571:	8d 76 00             	lea    esi,[esi+0x0]

c000d574 <tcp_process>:
c000d574:	53                   	push   ebx
c000d575:	83 ec 18             	sub    esp,0x18
c000d578:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d57d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d582:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d587:	0f b6 c0             	movzx  eax,al
c000d58a:	83 e0 04             	and    eax,0x4
c000d58d:	0f 84 bd 00 00 00    	je     c000d650 <tcp_process+0xdc>
c000d593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d59a:	83 f8 02             	cmp    eax,0x2
c000d59d:	75 19                	jne    c000d5b8 <tcp_process+0x44>
c000d59f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a3:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d5a6:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d5ab:	39 c2                	cmp    edx,eax
c000d5ad:	75 45                	jne    c000d5f4 <tcp_process+0x80>
c000d5af:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d5b4:	eb 3e                	jmp    c000d5f4 <tcp_process+0x80>
c000d5b6:	66 90                	xchg   ax,ax
c000d5b8:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d5c5:	29 c2                	sub    edx,eax
c000d5c7:	89 d0                	mov    eax,edx
c000d5c9:	78 29                	js     c000d5f4 <tcp_process+0x80>
c000d5cb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d5d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d5df:	0f b7 c0             	movzx  eax,ax
c000d5e2:	01 c8                	add    eax,ecx
c000d5e4:	29 c2                	sub    edx,eax
c000d5e6:	89 d0                	mov    eax,edx
c000d5e8:	85 c0                	test   eax,eax
c000d5ea:	7f 08                	jg     c000d5f4 <tcp_process+0x80>
c000d5ec:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d5f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5f4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d5f9:	85 c0                	test   eax,eax
c000d5fb:	74 4b                	je     c000d648 <tcp_process+0xd4>
c000d5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d601:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d604:	85 c0                	test   eax,eax
c000d606:	75 18                	jne    c000d620 <tcp_process+0xac>
c000d608:	83 ec 08             	sub    esp,0x8
c000d60b:	68 70 05 03 c0       	push   0xc0030570
c000d610:	68 26 fb 02 c0       	push   0xc002fb26
c000d615:	e8 8a 25 01 00       	call   c001fba4 <CPrintf>
c000d61a:	83 c4 10             	add    esp,0x10
c000d61d:	8d 76 00             	lea    esi,[esi+0x0]
c000d620:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d625:	83 c8 08             	or     eax,0x8
c000d628:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d62d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d631:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d634:	83 e0 fe             	and    eax,0xfffffffe
c000d637:	88 c2                	mov    dl,al
c000d639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d640:	b0 f5                	mov    al,0xf5
c000d642:	e9 bd 08 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d647:	90                   	nop
c000d648:	b0 00                	mov    al,0x0
c000d64a:	e9 b5 08 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d64f:	90                   	nop
c000d650:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d655:	0f b6 c0             	movzx  eax,al
c000d658:	83 e0 02             	and    eax,0x2
c000d65b:	74 33                	je     c000d690 <tcp_process+0x11c>
c000d65d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d661:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d664:	83 f8 02             	cmp    eax,0x2
c000d667:	74 27                	je     c000d690 <tcp_process+0x11c>
c000d669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d670:	83 f8 03             	cmp    eax,0x3
c000d673:	74 1b                	je     c000d690 <tcp_process+0x11c>
c000d675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d679:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d67c:	83 c8 02             	or     eax,0x2
c000d67f:	88 c2                	mov    dl,al
c000d681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d685:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d688:	b0 00                	mov    al,0x0
c000d68a:	e9 75 08 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d68f:	90                   	nop
c000d690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d694:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d697:	0f b6 c0             	movzx  eax,al
c000d69a:	83 e0 10             	and    eax,0x10
c000d69d:	75 0d                	jne    c000d6ac <tcp_process+0x138>
c000d69f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d6ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b0:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d6b7:	83 ec 0c             	sub    esp,0xc
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 f9 fa ff ff       	call   c000d1bc <tcp_parseopt>
c000d6c3:	83 c4 10             	add    esp,0x10
c000d6c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d6cd:	83 f8 09             	cmp    eax,0x9
c000d6d0:	0f 87 0a 08 00 00    	ja     c000dee0 <tcp_process+0x96c>
c000d6d6:	8b 04 85 18 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf8e8]
c000d6dd:	ff e0                	jmp    eax
c000d6df:	90                   	nop
c000d6e0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6e5:	0f b6 c0             	movzx  eax,al
c000d6e8:	83 e0 10             	and    eax,0x10
c000d6eb:	0f 84 ff 01 00 00    	je     c000d8f0 <tcp_process+0x37c>
c000d6f1:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6f6:	0f b6 c0             	movzx  eax,al
c000d6f9:	83 e0 02             	and    eax,0x2
c000d6fc:	0f 84 ee 01 00 00    	je     c000d8f0 <tcp_process+0x37c>
c000d702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d706:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d709:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70f:	83 ec 0c             	sub    esp,0xc
c000d712:	50                   	push   eax
c000d713:	e8 f4 34 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d718:	83 c4 10             	add    esp,0x10
c000d71b:	8d 50 01             	lea    edx,[eax+0x1]
c000d71e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d723:	39 c2                	cmp    edx,eax
c000d725:	0f 85 c5 01 00 00    	jne    c000d8f0 <tcp_process+0x37c>
c000d72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72f:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d733:	83 c0 01             	add    eax,0x1
c000d736:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d73a:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d73e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d743:	8d 50 01             	lea    edx,[eax+0x1]
c000d746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d74d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d751:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d758:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d75b:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d765:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d768:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d76d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d771:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d775:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d779:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d77e:	8d 50 ff             	lea    edx,[eax-0x1]
c000d781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d785:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d78c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d797:	8d 50 04             	lea    edx,[eax+0x4]
c000d79a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7a1:	0f b7 c0             	movzx  eax,ax
c000d7a4:	83 ec 08             	sub    esp,0x8
c000d7a7:	52                   	push   edx
c000d7a8:	50                   	push   eax
c000d7a9:	e8 12 de ff ff       	call   c000b5c0 <tcp_eff_send_mss>
c000d7ae:	83 c4 10             	add    esp,0x10
c000d7b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7b5:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d7b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7c0:	89 c2                	mov    edx,eax
c000d7c2:	c1 e2 02             	shl    edx,0x2
c000d7c5:	01 d0                	add    eax,edx
c000d7c7:	d1 e0                	shl    eax,1
c000d7c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7cd:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d5:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d7d9:	0f b7 c0             	movzx  eax,ax
c000d7dc:	83 f8 01             	cmp    eax,0x1
c000d7df:	75 0b                	jne    c000d7ec <tcp_process+0x278>
c000d7e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7e8:	d1 e0                	shl    eax,1
c000d7ea:	eb 08                	jmp    c000d7f4 <tcp_process+0x280>
c000d7ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7f3:	90                   	nop
c000d7f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7f8:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d800:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d803:	0f b7 c0             	movzx  eax,ax
c000d806:	85 c0                	test   eax,eax
c000d808:	75 16                	jne    c000d820 <tcp_process+0x2ac>
c000d80a:	83 ec 08             	sub    esp,0x8
c000d80d:	68 d3 06 03 c0       	push   0xc00306d3
c000d812:	68 26 fb 02 c0       	push   0xc002fb26
c000d817:	e8 88 23 01 00       	call   c001fba4 <CPrintf>
c000d81c:	83 c4 10             	add    esp,0x10
c000d81f:	90                   	nop
c000d820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d824:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d827:	83 e8 01             	sub    eax,0x1
c000d82a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d82e:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d836:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d83d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d841:	8b 10                	mov    edx,DWORD PTR [eax]
c000d843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d847:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d84a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d84e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d851:	85 c0                	test   eax,eax
c000d853:	75 0f                	jne    c000d864 <tcp_process+0x2f0>
c000d855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d859:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d85f:	eb 17                	jmp    c000d878 <tcp_process+0x304>
c000d861:	8d 76 00             	lea    esi,[esi+0x0]
c000d864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d868:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d86e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d872:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d876:	66 90                	xchg   ax,ax
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d87f:	e8 50 c7 ff ff       	call   c0009fd4 <tcp_seg_free>
c000d884:	83 c4 10             	add    esp,0x10
c000d887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d88b:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d891:	85 c0                	test   eax,eax
c000d893:	74 27                	je     c000d8bc <tcp_process+0x348>
c000d895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d899:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d89f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d8a3:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d8a6:	83 ec 04             	sub    esp,0x4
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d8af:	52                   	push   edx
c000d8b0:	ff d0                	call   eax
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d8b9:	eb 09                	jmp    c000d8c4 <tcp_process+0x350>
c000d8bb:	90                   	nop
c000d8bc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c4:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d8c9:	83 f8 f6             	cmp    eax,0xfffffff6
c000d8cc:	75 0a                	jne    c000d8d8 <tcp_process+0x364>
c000d8ce:	b0 f6                	mov    al,0xf6
c000d8d0:	e9 2f 06 00 00       	jmp    c000df04 <tcp_process+0x990>
c000d8d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8dc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d8df:	83 c8 02             	or     eax,0x2
c000d8e2:	88 c2                	mov    dl,al
c000d8e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d8eb:	e9 f4 05 00 00       	jmp    c000dee4 <tcp_process+0x970>
c000d8f0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8f5:	0f b6 c0             	movzx  eax,al
c000d8f8:	83 e0 10             	and    eax,0x10
c000d8fb:	0f 84 e3 05 00 00    	je     c000dee4 <tcp_process+0x970>
c000d901:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d906:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d909:	0f b7 c8             	movzx  ecx,ax
c000d90c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d911:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d915:	0f b7 d0             	movzx  edx,ax
c000d918:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d91e:	0f b7 d8             	movzx  ebx,ax
c000d921:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d926:	01 c3                	add    ebx,eax
c000d928:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d92d:	83 ec 08             	sub    esp,0x8
c000d930:	51                   	push   ecx
c000d931:	52                   	push   edx
c000d932:	68 90 68 03 c0       	push   0xc0036890
c000d937:	68 98 68 03 c0       	push   0xc0036898
c000d93c:	53                   	push   ebx
c000d93d:	50                   	push   eax
c000d93e:	e8 d5 29 00 00       	call   c0010318 <tcp_rst>
c000d943:	83 c4 20             	add    esp,0x20
c000d946:	e9 99 05 00 00       	jmp    c000dee4 <tcp_process+0x970>
c000d94b:	90                   	nop
c000d94c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d951:	0f b6 c0             	movzx  eax,al
c000d954:	83 e0 10             	and    eax,0x10
c000d957:	0f 84 a7 01 00 00    	je     c000db04 <tcp_process+0x590>
c000d95d:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d967:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d96a:	29 c2                	sub    edx,eax
c000d96c:	89 d0                	mov    eax,edx
c000d96e:	83 e8 01             	sub    eax,0x1
c000d971:	0f 88 41 01 00 00    	js     c000dab8 <tcp_process+0x544>
c000d977:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d981:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d984:	29 c2                	sub    edx,eax
c000d986:	89 d0                	mov    eax,edx
c000d988:	85 c0                	test   eax,eax
c000d98a:	0f 8f 28 01 00 00    	jg     c000dab8 <tcp_process+0x544>
c000d990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d994:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d9a2:	85 c0                	test   eax,eax
c000d9a4:	75 16                	jne    c000d9bc <tcp_process+0x448>
c000d9a6:	83 ec 08             	sub    esp,0x8
c000d9a9:	68 e9 06 03 c0       	push   0xc00306e9
c000d9ae:	68 26 fb 02 c0       	push   0xc002fb26
c000d9b3:	e8 ec 21 01 00       	call   c001fba4 <CPrintf>
c000d9b8:	83 c4 10             	add    esp,0x10
c000d9bb:	90                   	nop
c000d9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d9c3:	85 c0                	test   eax,eax
c000d9c5:	74 25                	je     c000d9ec <tcp_process+0x478>
c000d9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d9ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9d2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d9d5:	83 ec 04             	sub    esp,0x4
c000d9d8:	6a 00                	push   0x0
c000d9da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9de:	52                   	push   edx
c000d9df:	ff d0                	call   eax
c000d9e1:	83 c4 10             	add    esp,0x10
c000d9e4:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d9e8:	eb 0a                	jmp    c000d9f4 <tcp_process+0x480>
c000d9ea:	66 90                	xchg   ax,ax
c000d9ec:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000d9f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d9f4:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d9f9:	85 c0                	test   eax,eax
c000d9fb:	74 23                	je     c000da20 <tcp_process+0x4ac>
c000d9fd:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da02:	83 f8 f6             	cmp    eax,0xfffffff6
c000da05:	74 11                	je     c000da18 <tcp_process+0x4a4>
c000da07:	83 ec 0c             	sub    esp,0xc
c000da0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da0e:	e8 69 d8 ff ff       	call   c000b27c <tcp_abort>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	66 90                	xchg   ax,ax
c000da18:	b0 f6                	mov    al,0xf6
c000da1a:	e9 e5 04 00 00       	jmp    c000df04 <tcp_process+0x990>
c000da1f:	90                   	nop
c000da20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da24:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000da28:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000da2d:	83 ec 0c             	sub    esp,0xc
c000da30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da34:	e8 e7 e0 ff ff       	call   c000bb20 <tcp_receive>
c000da39:	83 c4 10             	add    esp,0x10
c000da3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da40:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000da43:	0f b7 c0             	movzx  eax,ax
c000da46:	85 c0                	test   eax,eax
c000da48:	74 12                	je     c000da5c <tcp_process+0x4e8>
c000da4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000da51:	83 e8 01             	sub    eax,0x1
c000da54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da58:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000da5c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000da61:	83 f8 01             	cmp    eax,0x1
c000da64:	75 0e                	jne    c000da74 <tcp_process+0x500>
c000da66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da6d:	d1 e0                	shl    eax,1
c000da6f:	eb 0b                	jmp    c000da7c <tcp_process+0x508>
c000da71:	8d 76 00             	lea    esi,[esi+0x0]
c000da74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da7b:	90                   	nop
c000da7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da80:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000da84:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000da89:	0f b6 c0             	movzx  eax,al
c000da8c:	83 e0 20             	and    eax,0x20
c000da8f:	0f 84 ab 00 00 00    	je     c000db40 <tcp_process+0x5cc>
c000da95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da99:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da9c:	83 c8 02             	or     eax,0x2
c000da9f:	88 c2                	mov    dl,al
c000daa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000daa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daac:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dab3:	e9 88 00 00 00       	jmp    c000db40 <tcp_process+0x5cc>
c000dab8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dabd:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dac0:	0f b7 c8             	movzx  ecx,ax
c000dac3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dac8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dacc:	0f b7 d0             	movzx  edx,ax
c000dacf:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dad5:	0f b7 d8             	movzx  ebx,ax
c000dad8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dadd:	01 c3                	add    ebx,eax
c000dadf:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dae4:	83 ec 08             	sub    esp,0x8
c000dae7:	51                   	push   ecx
c000dae8:	52                   	push   edx
c000dae9:	68 90 68 03 c0       	push   0xc0036890
c000daee:	68 98 68 03 c0       	push   0xc0036898
c000daf3:	53                   	push   ebx
c000daf4:	50                   	push   eax
c000daf5:	e8 1e 28 00 00       	call   c0010318 <tcp_rst>
c000dafa:	83 c4 20             	add    esp,0x20
c000dafd:	e9 e6 03 00 00       	jmp    c000dee8 <tcp_process+0x974>
c000db02:	66 90                	xchg   ax,ax
c000db04:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db09:	0f b6 c0             	movzx  eax,al
c000db0c:	83 e0 02             	and    eax,0x2
c000db0f:	0f 84 d3 03 00 00    	je     c000dee8 <tcp_process+0x974>
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db1c:	8d 50 ff             	lea    edx,[eax-0x1]
c000db1f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000db24:	39 c2                	cmp    edx,eax
c000db26:	0f 85 bc 03 00 00    	jne    c000dee8 <tcp_process+0x974>
c000db2c:	83 ec 0c             	sub    esp,0xc
c000db2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db33:	e8 e4 29 00 00       	call   c001051c <tcp_rexmit>
c000db38:	83 c4 10             	add    esp,0x10
c000db3b:	e9 a8 03 00 00       	jmp    c000dee8 <tcp_process+0x974>
c000db40:	90                   	nop
c000db41:	e9 a2 03 00 00       	jmp    c000dee8 <tcp_process+0x974>
c000db46:	66 90                	xchg   ax,ax
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db4f:	e8 cc df ff ff       	call   c000bb20 <tcp_receive>
c000db54:	83 c4 10             	add    esp,0x10
c000db57:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db5c:	0f b6 c0             	movzx  eax,al
c000db5f:	83 e0 20             	and    eax,0x20
c000db62:	0f 84 84 03 00 00    	je     c000deec <tcp_process+0x978>
c000db68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db6c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db6f:	83 c8 02             	or     eax,0x2
c000db72:	88 c2                	mov    dl,al
c000db74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db78:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db7f:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000db86:	e9 61 03 00 00       	jmp    c000deec <tcp_process+0x978>
c000db8b:	90                   	nop
c000db8c:	83 ec 0c             	sub    esp,0xc
c000db8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db93:	e8 88 df ff ff       	call   c000bb20 <tcp_receive>
c000db98:	83 c4 10             	add    esp,0x10
c000db9b:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dba0:	0f b6 c0             	movzx  eax,al
c000dba3:	83 e0 20             	and    eax,0x20
c000dba6:	0f 84 08 01 00 00    	je     c000dcb4 <tcp_process+0x740>
c000dbac:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dbb1:	0f b6 c0             	movzx  eax,al
c000dbb4:	83 e0 10             	and    eax,0x10
c000dbb7:	0f 84 d3 00 00 00    	je     c000dc90 <tcp_process+0x71c>
c000dbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc1:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dbc4:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dbc9:	39 c2                	cmp    edx,eax
c000dbcb:	0f 85 bf 00 00 00    	jne    c000dc90 <tcp_process+0x71c>
c000dbd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dbd8:	83 c8 02             	or     eax,0x2
c000dbdb:	88 c2                	mov    dl,al
c000dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbeb:	e8 48 c5 ff ff       	call   c000a138 <tcp_pcb_purge>
c000dbf0:	83 c4 10             	add    esp,0x10
c000dbf3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dbf8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dbfc:	75 12                	jne    c000dc10 <tcp_process+0x69c>
c000dbfe:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc06:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dc0b:	eb 4b                	jmp    c000dc58 <tcp_process+0x6e4>
c000dc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc10:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc15:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc1a:	eb 30                	jmp    c000dc4c <tcp_process+0x6d8>
c000dc1c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc24:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dc28:	75 12                	jne    c000dc3c <tcp_process+0x6c8>
c000dc2a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc33:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dc36:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc39:	eb 1d                	jmp    c000dc58 <tcp_process+0x6e4>
c000dc3b:	90                   	nop
c000dc3c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc44:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc49:	8d 76 00             	lea    esi,[esi+0x0]
c000dc4c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc51:	85 c0                	test   eax,eax
c000dc53:	75 c7                	jne    c000dc1c <tcp_process+0x6a8>
c000dc55:	8d 76 00             	lea    esi,[esi+0x0]
c000dc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc67:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dc6e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dc74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc78:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dc84:	e8 93 2e 00 00       	call   c0010b1c <tcp_timer_needed>
c000dc89:	e9 62 02 00 00       	jmp    c000def0 <tcp_process+0x97c>
c000dc8e:	66 90                	xchg   ax,ax
c000dc90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc94:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc97:	83 c8 02             	or     eax,0x2
c000dc9a:	88 c2                	mov    dl,al
c000dc9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca7:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dcae:	e9 3d 02 00 00       	jmp    c000def0 <tcp_process+0x97c>
c000dcb3:	90                   	nop
c000dcb4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dcb9:	0f b6 c0             	movzx  eax,al
c000dcbc:	83 e0 10             	and    eax,0x10
c000dcbf:	0f 84 2b 02 00 00    	je     c000def0 <tcp_process+0x97c>
c000dcc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc9:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dccc:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dcd1:	39 c2                	cmp    edx,eax
c000dcd3:	0f 85 17 02 00 00    	jne    c000def0 <tcp_process+0x97c>
c000dcd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcdd:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dce4:	e9 07 02 00 00       	jmp    c000def0 <tcp_process+0x97c>
c000dce9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcec:	83 ec 0c             	sub    esp,0xc
c000dcef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dcf3:	e8 28 de ff ff       	call   c000bb20 <tcp_receive>
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd00:	0f b6 c0             	movzx  eax,al
c000dd03:	83 e0 20             	and    eax,0x20
c000dd06:	0f 84 e8 01 00 00    	je     c000def4 <tcp_process+0x980>
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd13:	83 c8 02             	or     eax,0x2
c000dd16:	88 c2                	mov    dl,al
c000dd18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd1c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd1f:	83 ec 0c             	sub    esp,0xc
c000dd22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd26:	e8 0d c4 ff ff       	call   c000a138 <tcp_pcb_purge>
c000dd2b:	83 c4 10             	add    esp,0x10
c000dd2e:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd33:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd37:	75 0f                	jne    c000dd48 <tcp_process+0x7d4>
c000dd39:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd41:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dd46:	eb 48                	jmp    c000dd90 <tcp_process+0x81c>
c000dd48:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd4d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd52:	eb 30                	jmp    c000dd84 <tcp_process+0x810>
c000dd54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd5c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd60:	75 12                	jne    c000dd74 <tcp_process+0x800>
c000dd62:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd6b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dd6e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd71:	eb 1d                	jmp    c000dd90 <tcp_process+0x81c>
c000dd73:	90                   	nop
c000dd74:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd7c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd81:	8d 76 00             	lea    esi,[esi+0x0]
c000dd84:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd89:	85 c0                	test   eax,eax
c000dd8b:	75 c7                	jne    c000dd54 <tcp_process+0x7e0>
c000dd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd94:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dd9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd9f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dda6:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ddac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb7:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ddbc:	e8 5b 2d 00 00       	call   c0010b1c <tcp_timer_needed>
c000ddc1:	e9 2e 01 00 00       	jmp    c000def4 <tcp_process+0x980>
c000ddc6:	66 90                	xchg   ax,ax
c000ddc8:	83 ec 0c             	sub    esp,0xc
c000ddcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddcf:	e8 4c dd ff ff       	call   c000bb20 <tcp_receive>
c000ddd4:	83 c4 10             	add    esp,0x10
c000ddd7:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dddc:	0f b6 c0             	movzx  eax,al
c000dddf:	83 e0 10             	and    eax,0x10
c000dde2:	0f 84 10 01 00 00    	je     c000def8 <tcp_process+0x984>
c000dde8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddec:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ddef:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ddf4:	39 c2                	cmp    edx,eax
c000ddf6:	0f 85 fc 00 00 00    	jne    c000def8 <tcp_process+0x984>
c000ddfc:	83 ec 0c             	sub    esp,0xc
c000ddff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de03:	e8 30 c3 ff ff       	call   c000a138 <tcp_pcb_purge>
c000de08:	83 c4 10             	add    esp,0x10
c000de0b:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de10:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de14:	75 12                	jne    c000de28 <tcp_process+0x8b4>
c000de16:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de1e:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000de23:	eb 4b                	jmp    c000de70 <tcp_process+0x8fc>
c000de25:	8d 76 00             	lea    esi,[esi+0x0]
c000de28:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de2d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de32:	eb 30                	jmp    c000de64 <tcp_process+0x8f0>
c000de34:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de3c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de40:	75 12                	jne    c000de54 <tcp_process+0x8e0>
c000de42:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de4b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000de4e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de51:	eb 1d                	jmp    c000de70 <tcp_process+0x8fc>
c000de53:	90                   	nop
c000de54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de5c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de61:	8d 76 00             	lea    esi,[esi+0x0]
c000de64:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de69:	85 c0                	test   eax,eax
c000de6b:	75 c7                	jne    c000de34 <tcp_process+0x8c0>
c000de6d:	8d 76 00             	lea    esi,[esi+0x0]
c000de70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de74:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de7f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de86:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de90:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de97:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de9c:	e8 7b 2c 00 00       	call   c0010b1c <tcp_timer_needed>
c000dea1:	eb 55                	jmp    c000def8 <tcp_process+0x984>
c000dea3:	90                   	nop
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000deab:	e8 70 dc ff ff       	call   c000bb20 <tcp_receive>
c000deb0:	83 c4 10             	add    esp,0x10
c000deb3:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000deb8:	0f b6 c0             	movzx  eax,al
c000debb:	83 e0 10             	and    eax,0x10
c000debe:	74 3c                	je     c000defc <tcp_process+0x988>
c000dec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dec4:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dec7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000decc:	39 c2                	cmp    edx,eax
c000dece:	75 2c                	jne    c000defc <tcp_process+0x988>
c000ded0:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000ded5:	83 c8 10             	or     eax,0x10
c000ded8:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000dedd:	eb 1d                	jmp    c000defc <tcp_process+0x988>
c000dedf:	90                   	nop
c000dee0:	90                   	nop
c000dee1:	eb 1d                	jmp    c000df00 <tcp_process+0x98c>
c000dee3:	90                   	nop
c000dee4:	90                   	nop
c000dee5:	eb 19                	jmp    c000df00 <tcp_process+0x98c>
c000dee7:	90                   	nop
c000dee8:	90                   	nop
c000dee9:	eb 15                	jmp    c000df00 <tcp_process+0x98c>
c000deeb:	90                   	nop
c000deec:	90                   	nop
c000deed:	eb 11                	jmp    c000df00 <tcp_process+0x98c>
c000deef:	90                   	nop
c000def0:	90                   	nop
c000def1:	eb 0d                	jmp    c000df00 <tcp_process+0x98c>
c000def3:	90                   	nop
c000def4:	90                   	nop
c000def5:	eb 09                	jmp    c000df00 <tcp_process+0x98c>
c000def7:	90                   	nop
c000def8:	90                   	nop
c000def9:	eb 05                	jmp    c000df00 <tcp_process+0x98c>
c000defb:	90                   	nop
c000defc:	90                   	nop
c000defd:	8d 76 00             	lea    esi,[esi+0x0]
c000df00:	b0 00                	mov    al,0x0
c000df02:	66 90                	xchg   ax,ax
c000df04:	83 c4 18             	add    esp,0x18
c000df07:	5b                   	pop    ebx
c000df08:	c3                   	ret    
c000df09:	8d 76 00             	lea    esi,[esi+0x0]

c000df0c <tcp_input>:
c000df0c:	53                   	push   ebx
c000df0d:	83 ec 18             	sub    esp,0x18
c000df10:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000df16:	83 c0 01             	add    eax,0x1
c000df19:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000df1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df26:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000df2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2f:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000df32:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000df37:	66 8b 00             	mov    ax,WORD PTR [eax]
c000df3a:	0f b7 c0             	movzx  eax,ax
c000df3d:	83 ec 0c             	sub    esp,0xc
c000df40:	50                   	push   eax
c000df41:	e8 a2 2c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	0f b7 c0             	movzx  eax,ax
c000df4c:	c1 e8 08             	shr    eax,0x8
c000df4f:	0f b7 c0             	movzx  eax,ax
c000df52:	83 e0 0f             	and    eax,0xf
c000df55:	c1 e0 02             	shl    eax,0x2
c000df58:	01 d8                	add    eax,ebx
c000df5a:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000df5f:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000df64:	66 8b 00             	mov    ax,WORD PTR [eax]
c000df67:	0f b7 c0             	movzx  eax,ax
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	50                   	push   eax
c000df6e:	e8 75 2c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	0f b7 c0             	movzx  eax,ax
c000df79:	c1 e8 08             	shr    eax,0x8
c000df7c:	83 e0 0f             	and    eax,0xf
c000df7f:	c1 e0 02             	shl    eax,0x2
c000df82:	f7 d8                	neg    eax
c000df84:	98                   	cwde   
c000df85:	83 ec 08             	sub    esp,0x8
c000df88:	50                   	push   eax
c000df89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df8d:	e8 2e a2 ff ff       	call   c00081c0 <pbuf_header>
c000df92:	83 c4 10             	add    esp,0x10
c000df95:	0f b6 c0             	movzx  eax,al
c000df98:	85 c0                	test   eax,eax
c000df9a:	75 10                	jne    c000dfac <tcp_input+0xa0>
c000df9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dfa3:	0f b7 c0             	movzx  eax,ax
c000dfa6:	83 f8 13             	cmp    eax,0x13
c000dfa9:	77 35                	ja     c000dfe0 <tcp_input+0xd4>
c000dfab:	90                   	nop
c000dfac:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000dfb2:	83 c0 01             	add    eax,0x1
c000dfb5:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000dfbb:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000dfc1:	83 c0 01             	add    eax,0x1
c000dfc4:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000dfca:	83 ec 0c             	sub    esp,0xc
c000dfcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfd1:	e8 86 a3 ff ff       	call   c000835c <pbuf_free>
c000dfd6:	83 c4 10             	add    esp,0x10
c000dfd9:	e9 fa 09 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000dfde:	66 90                	xchg   ax,ax
c000dfe0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000dfe5:	83 ec 08             	sub    esp,0x8
c000dfe8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfec:	50                   	push   eax
c000dfed:	e8 5e 5e 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c000dff2:	83 c4 10             	add    esp,0x10
c000dff5:	0f b6 c0             	movzx  eax,al
c000dff8:	85 c0                	test   eax,eax
c000dffa:	75 14                	jne    c000e010 <tcp_input+0x104>
c000dffc:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e001:	25 f0 00 00 00       	and    eax,0xf0
c000e006:	3d e0 00 00 00       	cmp    eax,0xe0
c000e00b:	75 37                	jne    c000e044 <tcp_input+0x138>
c000e00d:	8d 76 00             	lea    esi,[esi+0x0]
c000e010:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e016:	83 c0 01             	add    eax,0x1
c000e019:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e01f:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e025:	83 c0 01             	add    eax,0x1
c000e028:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e035:	e8 22 a3 ff ff       	call   c000835c <pbuf_free>
c000e03a:	83 c4 10             	add    esp,0x10
c000e03d:	e9 96 09 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e042:	66 90                	xchg   ax,ax
c000e044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e048:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e04b:	0f b7 c0             	movzx  eax,ax
c000e04e:	83 ec 0c             	sub    esp,0xc
c000e051:	50                   	push   eax
c000e052:	6a 06                	push   0x6
c000e054:	68 98 68 03 c0       	push   0xc0036898
c000e059:	68 90 68 03 c0       	push   0xc0036890
c000e05e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e062:	e8 11 51 00 00       	call   c0013178 <inet_chksum_pseudo>
c000e067:	83 c4 20             	add    esp,0x20
c000e06a:	0f b7 c0             	movzx  eax,ax
c000e06d:	85 c0                	test   eax,eax
c000e06f:	74 33                	je     c000e0a4 <tcp_input+0x198>
c000e071:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e077:	83 c0 01             	add    eax,0x1
c000e07a:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e080:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e086:	83 c0 01             	add    eax,0x1
c000e089:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e08f:	83 ec 0c             	sub    esp,0xc
c000e092:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e096:	e8 c1 a2 ff ff       	call   c000835c <pbuf_free>
c000e09b:	83 c4 10             	add    esp,0x10
c000e09e:	e9 35 09 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e0a3:	90                   	nop
c000e0a4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0a9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e0ad:	0f b7 c0             	movzx  eax,ax
c000e0b0:	83 ec 0c             	sub    esp,0xc
c000e0b3:	50                   	push   eax
c000e0b4:	e8 2f 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0b9:	83 c4 10             	add    esp,0x10
c000e0bc:	0f b7 c0             	movzx  eax,ax
c000e0bf:	c1 e8 0c             	shr    eax,0xc
c000e0c2:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e0c6:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e0cb:	ba 00 00 00 00       	mov    edx,0x0
c000e0d0:	89 d1                	mov    ecx,edx
c000e0d2:	29 c1                	sub    ecx,eax
c000e0d4:	89 c8                	mov    eax,ecx
c000e0d6:	c1 e0 02             	shl    eax,0x2
c000e0d9:	98                   	cwde   
c000e0da:	83 ec 08             	sub    esp,0x8
c000e0dd:	50                   	push   eax
c000e0de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0e2:	e8 d9 a0 ff ff       	call   c00081c0 <pbuf_header>
c000e0e7:	83 c4 10             	add    esp,0x10
c000e0ea:	0f b6 c0             	movzx  eax,al
c000e0ed:	85 c0                	test   eax,eax
c000e0ef:	74 33                	je     c000e124 <tcp_input+0x218>
c000e0f1:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e0f7:	83 c0 01             	add    eax,0x1
c000e0fa:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e100:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e106:	83 c0 01             	add    eax,0x1
c000e109:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e10f:	83 ec 0c             	sub    esp,0xc
c000e112:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e116:	e8 41 a2 ff ff       	call   c000835c <pbuf_free>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	e9 b5 08 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e123:	90                   	nop
c000e124:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e129:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e12c:	0f b7 c0             	movzx  eax,ax
c000e12f:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e135:	83 ec 0c             	sub    esp,0xc
c000e138:	50                   	push   eax
c000e139:	e8 aa 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e13e:	83 c4 10             	add    esp,0x10
c000e141:	66 89 03             	mov    WORD PTR [ebx],ax
c000e144:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e149:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e14d:	0f b7 c0             	movzx  eax,ax
c000e150:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e156:	83 ec 0c             	sub    esp,0xc
c000e159:	50                   	push   eax
c000e15a:	e8 89 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e15f:	83 c4 10             	add    esp,0x10
c000e162:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e166:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e16b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e16e:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e174:	83 ec 0c             	sub    esp,0xc
c000e177:	50                   	push   eax
c000e178:	e8 8f 2a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e17d:	83 c4 10             	add    esp,0x10
c000e180:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e183:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e186:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e18b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e190:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e193:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e199:	83 ec 0c             	sub    esp,0xc
c000e19c:	50                   	push   eax
c000e19d:	e8 6a 2a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e1a8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e1ab:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e1b0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1b5:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e1b9:	0f b7 c0             	movzx  eax,ax
c000e1bc:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e1c2:	83 ec 0c             	sub    esp,0xc
c000e1c5:	50                   	push   eax
c000e1c6:	e8 1d 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e1cb:	83 c4 10             	add    esp,0x10
c000e1ce:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e1d2:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1d7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e1db:	0f b7 c0             	movzx  eax,ax
c000e1de:	83 ec 0c             	sub    esp,0xc
c000e1e1:	50                   	push   eax
c000e1e2:	e8 01 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e1e7:	83 c4 10             	add    esp,0x10
c000e1ea:	83 e0 3f             	and    eax,0x3f
c000e1ed:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e1f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e1f9:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e1fe:	0f b6 c0             	movzx  eax,al
c000e201:	83 e0 03             	and    eax,0x3
c000e204:	0f 95 c0             	setne  al
c000e207:	0f b6 c0             	movzx  eax,al
c000e20a:	01 d0                	add    eax,edx
c000e20c:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e212:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e21a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e21f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e223:	e9 50 01 00 00       	jmp    c000e378 <tcp_input+0x46c>
c000e228:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e22c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e22f:	85 c0                	test   eax,eax
c000e231:	75 15                	jne    c000e248 <tcp_input+0x33c>
c000e233:	83 ec 08             	sub    esp,0x8
c000e236:	68 90 05 03 c0       	push   0xc0030590
c000e23b:	68 26 fb 02 c0       	push   0xc002fb26
c000e240:	e8 5f 19 01 00       	call   c001fba4 <CPrintf>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e24c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e24f:	83 f8 0a             	cmp    eax,0xa
c000e252:	75 18                	jne    c000e26c <tcp_input+0x360>
c000e254:	83 ec 08             	sub    esp,0x8
c000e257:	68 b8 05 03 c0       	push   0xc00305b8
c000e25c:	68 26 fb 02 c0       	push   0xc002fb26
c000e261:	e8 3e 19 01 00       	call   c001fba4 <CPrintf>
c000e266:	83 c4 10             	add    esp,0x10
c000e269:	8d 76 00             	lea    esi,[esi+0x0]
c000e26c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e270:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e273:	83 f8 01             	cmp    eax,0x1
c000e276:	75 18                	jne    c000e290 <tcp_input+0x384>
c000e278:	83 ec 08             	sub    esp,0x8
c000e27b:	68 e4 05 03 c0       	push   0xc00305e4
c000e280:	68 26 fb 02 c0       	push   0xc002fb26
c000e285:	e8 1a 19 01 00       	call   c001fba4 <CPrintf>
c000e28a:	83 c4 10             	add    esp,0x10
c000e28d:	8d 76 00             	lea    esi,[esi+0x0]
c000e290:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e294:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e298:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e29d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e2a0:	0f b7 d2             	movzx  edx,dx
c000e2a3:	0f b7 c0             	movzx  eax,ax
c000e2a6:	39 c2                	cmp    edx,eax
c000e2a8:	0f 85 b6 00 00 00    	jne    c000e364 <tcp_input+0x458>
c000e2ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2b2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e2b5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2ba:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e2be:	0f b7 d2             	movzx  edx,dx
c000e2c1:	0f b7 c0             	movzx  eax,ax
c000e2c4:	39 c2                	cmp    edx,eax
c000e2c6:	0f 85 98 00 00 00    	jne    c000e364 <tcp_input+0x458>
c000e2cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e2d3:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e2d8:	39 c2                	cmp    edx,eax
c000e2da:	0f 85 84 00 00 00    	jne    c000e364 <tcp_input+0x458>
c000e2e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2e6:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e2eb:	39 c2                	cmp    edx,eax
c000e2ed:	75 75                	jne    c000e364 <tcp_input+0x458>
c000e2ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2f6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e2fa:	75 18                	jne    c000e314 <tcp_input+0x408>
c000e2fc:	83 ec 08             	sub    esp,0x8
c000e2ff:	68 0c 06 03 c0       	push   0xc003060c
c000e304:	68 26 fb 02 c0       	push   0xc002fb26
c000e309:	e8 96 18 01 00       	call   c001fba4 <CPrintf>
c000e30e:	83 c4 10             	add    esp,0x10
c000e311:	8d 76 00             	lea    esi,[esi+0x0]
c000e314:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e319:	74 25                	je     c000e340 <tcp_input+0x434>
c000e31b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e31f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e326:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e329:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e32f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e333:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e33a:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e33f:	90                   	nop
c000e340:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e344:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e347:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e34b:	75 3b                	jne    c000e388 <tcp_input+0x47c>
c000e34d:	83 ec 08             	sub    esp,0x8
c000e350:	68 38 06 03 c0       	push   0xc0030638
c000e355:	68 26 fb 02 c0       	push   0xc002fb26
c000e35a:	e8 45 18 01 00       	call   c001fba4 <CPrintf>
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	eb 24                	jmp    c000e388 <tcp_input+0x47c>
c000e364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e368:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e370:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e373:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e377:	90                   	nop
c000e378:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e37d:	0f 85 a5 fe ff ff    	jne    c000e228 <tcp_input+0x31c>
c000e383:	eb 07                	jmp    c000e38c <tcp_input+0x480>
c000e385:	8d 76 00             	lea    esi,[esi+0x0]
c000e388:	90                   	nop
c000e389:	8d 76 00             	lea    esi,[esi+0x0]
c000e38c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e391:	0f 85 89 01 00 00    	jne    c000e520 <tcp_input+0x614>
c000e397:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e39c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3a0:	e9 ab 00 00 00       	jmp    c000e450 <tcp_input+0x544>
c000e3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3af:	83 f8 0a             	cmp    eax,0xa
c000e3b2:	74 18                	je     c000e3cc <tcp_input+0x4c0>
c000e3b4:	83 ec 08             	sub    esp,0x8
c000e3b7:	68 64 06 03 c0       	push   0xc0030664
c000e3bc:	68 26 fb 02 c0       	push   0xc002fb26
c000e3c1:	e8 de 17 01 00       	call   c001fba4 <CPrintf>
c000e3c6:	83 c4 10             	add    esp,0x10
c000e3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3d0:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e3d4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e3dc:	0f b7 d2             	movzx  edx,dx
c000e3df:	0f b7 c0             	movzx  eax,ax
c000e3e2:	39 c2                	cmp    edx,eax
c000e3e4:	75 5e                	jne    c000e444 <tcp_input+0x538>
c000e3e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e3ed:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3f2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e3f6:	0f b7 d2             	movzx  edx,dx
c000e3f9:	0f b7 c0             	movzx  eax,ax
c000e3fc:	39 c2                	cmp    edx,eax
c000e3fe:	75 44                	jne    c000e444 <tcp_input+0x538>
c000e400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e404:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e407:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e40c:	39 c2                	cmp    edx,eax
c000e40e:	75 34                	jne    c000e444 <tcp_input+0x538>
c000e410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e414:	8b 10                	mov    edx,DWORD PTR [eax]
c000e416:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e41b:	39 c2                	cmp    edx,eax
c000e41d:	75 25                	jne    c000e444 <tcp_input+0x538>
c000e41f:	83 ec 0c             	sub    esp,0xc
c000e422:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e426:	e8 81 d4 ff ff       	call   c000b8ac <tcp_timewait_input>
c000e42b:	83 c4 10             	add    esp,0x10
c000e42e:	83 ec 0c             	sub    esp,0xc
c000e431:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e435:	e8 22 9f ff ff       	call   c000835c <pbuf_free>
c000e43a:	83 c4 10             	add    esp,0x10
c000e43d:	e9 96 05 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e442:	66 90                	xchg   ax,ax
c000e444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e448:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e44b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e44f:	90                   	nop
c000e450:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e455:	0f 85 4d ff ff ff    	jne    c000e3a8 <tcp_input+0x49c>
c000e45b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e463:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e468:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e46c:	eb 52                	jmp    c000e4c0 <tcp_input+0x5b4>
c000e46e:	66 90                	xchg   ax,ax
c000e470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e474:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e477:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e47c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e480:	0f b7 d2             	movzx  edx,dx
c000e483:	0f b7 c0             	movzx  eax,ax
c000e486:	39 c2                	cmp    edx,eax
c000e488:	75 22                	jne    c000e4ac <tcp_input+0x5a0>
c000e48a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e490:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e495:	39 c2                	cmp    edx,eax
c000e497:	74 2f                	je     c000e4c8 <tcp_input+0x5bc>
c000e499:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e49d:	85 c0                	test   eax,eax
c000e49f:	74 27                	je     c000e4c8 <tcp_input+0x5bc>
c000e4a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4a7:	85 c0                	test   eax,eax
c000e4a9:	74 1d                	je     c000e4c8 <tcp_input+0x5bc>
c000e4ab:	90                   	nop
c000e4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e4b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4bf:	90                   	nop
c000e4c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e4c5:	75 a9                	jne    c000e470 <tcp_input+0x564>
c000e4c7:	90                   	nop
c000e4c8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e4cd:	74 51                	je     c000e520 <tcp_input+0x614>
c000e4cf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4d4:	74 26                	je     c000e4fc <tcp_input+0x5f0>
c000e4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4e4:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e4ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4f5:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e4fa:	66 90                	xchg   ax,ax
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e503:	e8 60 ee ff ff       	call   c000d368 <tcp_listen_input>
c000e508:	83 c4 10             	add    esp,0x10
c000e50b:	83 ec 0c             	sub    esp,0xc
c000e50e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e512:	e8 45 9e ff ff       	call   c000835c <pbuf_free>
c000e517:	83 c4 10             	add    esp,0x10
c000e51a:	e9 b9 04 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e51f:	90                   	nop
c000e520:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e525:	0f 84 19 04 00 00    	je     c000e944 <tcp_input+0xa38>
c000e52b:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e539:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e53c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e546:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e54b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e550:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e555:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e55f:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e56a:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e570:	85 c0                	test   eax,eax
c000e572:	0f 84 b4 00 00 00    	je     c000e62c <tcp_input+0x720>
c000e578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e57c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e582:	85 c0                	test   eax,eax
c000e584:	74 2e                	je     c000e5b4 <tcp_input+0x6a8>
c000e586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e58a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e590:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e594:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e59a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e59e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e5a1:	6a 00                	push   0x0
c000e5a3:	51                   	push   ecx
c000e5a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5a8:	52                   	push   edx
c000e5a9:	ff d0                	call   eax
c000e5ab:	83 c4 10             	add    esp,0x10
c000e5ae:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e5b2:	eb 20                	jmp    c000e5d4 <tcp_input+0x6c8>
c000e5b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b8:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e5be:	6a 00                	push   0x0
c000e5c0:	50                   	push   eax
c000e5c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5c5:	6a 00                	push   0x0
c000e5c7:	e8 b8 c8 ff ff       	call   c000ae84 <tcp_recv_null>
c000e5cc:	83 c4 10             	add    esp,0x10
c000e5cf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e5d3:	90                   	nop
c000e5d4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5d9:	85 c0                	test   eax,eax
c000e5db:	75 13                	jne    c000e5f0 <tcp_input+0x6e4>
c000e5dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e1:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e5eb:	eb 3f                	jmp    c000e62c <tcp_input+0x720>
c000e5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5f5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e5f8:	74 0e                	je     c000e608 <tcp_input+0x6fc>
c000e5fa:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e600:	0f b7 c0             	movzx  eax,ax
c000e603:	85 c0                	test   eax,eax
c000e605:	74 25                	je     c000e62c <tcp_input+0x720>
c000e607:	90                   	nop
c000e608:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e60e:	83 c0 01             	add    eax,0x1
c000e611:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e617:	83 ec 0c             	sub    esp,0xc
c000e61a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e61e:	e8 39 9d ff ff       	call   c000835c <pbuf_free>
c000e623:	83 c4 10             	add    esp,0x10
c000e626:	e9 ad 03 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e62b:	90                   	nop
c000e62c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e630:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e635:	83 ec 0c             	sub    esp,0xc
c000e638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e63c:	e8 33 ef ff ff       	call   c000d574 <tcp_process>
c000e641:	83 c4 10             	add    esp,0x10
c000e644:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e648:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e64d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e650:	0f 84 9a 02 00 00    	je     c000e8f0 <tcp_input+0x9e4>
c000e656:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e65b:	0f b6 c0             	movzx  eax,al
c000e65e:	83 e0 08             	and    eax,0x8
c000e661:	74 59                	je     c000e6bc <tcp_input+0x7b0>
c000e663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e667:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e66d:	85 c0                	test   eax,eax
c000e66f:	74 1f                	je     c000e690 <tcp_input+0x784>
c000e671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e675:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e67b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e67f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e682:	83 ec 08             	sub    esp,0x8
c000e685:	6a f5                	push   0xfffffff5
c000e687:	52                   	push   edx
c000e688:	ff d0                	call   eax
c000e68a:	83 c4 10             	add    esp,0x10
c000e68d:	8d 76 00             	lea    esi,[esi+0x0]
c000e690:	83 ec 08             	sub    esp,0x8
c000e693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e697:	68 70 68 03 c0       	push   0xc0036870
c000e69c:	e8 ff c2 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000e6a1:	83 c4 10             	add    esp,0x10
c000e6a4:	83 ec 08             	sub    esp,0x8
c000e6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6ab:	6a 02                	push   0x2
c000e6ad:	e8 ee 93 ff ff       	call   c0007aa0 <memp_free>
c000e6b2:	83 c4 10             	add    esp,0x10
c000e6b5:	e9 46 02 00 00       	jmp    c000e900 <tcp_input+0x9f4>
c000e6ba:	66 90                	xchg   ax,ax
c000e6bc:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e6c1:	0f b6 c0             	movzx  eax,al
c000e6c4:	83 e0 10             	and    eax,0x10
c000e6c7:	74 2b                	je     c000e6f4 <tcp_input+0x7e8>
c000e6c9:	83 ec 08             	sub    esp,0x8
c000e6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6d0:	68 70 68 03 c0       	push   0xc0036870
c000e6d5:	e8 c6 c2 ff ff       	call   c000a9a0 <tcp_pcb_remove>
c000e6da:	83 c4 10             	add    esp,0x10
c000e6dd:	83 ec 08             	sub    esp,0x8
c000e6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6e4:	6a 02                	push   0x2
c000e6e6:	e8 b5 93 ff ff       	call   c0007aa0 <memp_free>
c000e6eb:	83 c4 10             	add    esp,0x10
c000e6ee:	e9 0d 02 00 00       	jmp    c000e900 <tcp_input+0x9f4>
c000e6f3:	90                   	nop
c000e6f4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e6f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6fd:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e700:	0f b7 c0             	movzx  eax,ax
c000e703:	85 c0                	test   eax,eax
c000e705:	74 55                	je     c000e75c <tcp_input+0x850>
c000e707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e70b:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e711:	85 c0                	test   eax,eax
c000e713:	74 2f                	je     c000e744 <tcp_input+0x838>
c000e715:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e719:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e71f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e723:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e726:	0f b7 c8             	movzx  ecx,ax
c000e729:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e72d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e730:	83 ec 04             	sub    esp,0x4
c000e733:	51                   	push   ecx
c000e734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e738:	50                   	push   eax
c000e739:	ff d2                	call   edx
c000e73b:	83 c4 10             	add    esp,0x10
c000e73e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e742:	eb 08                	jmp    c000e74c <tcp_input+0x840>
c000e744:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e749:	8d 76 00             	lea    esi,[esi+0x0]
c000e74c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e751:	83 f8 f6             	cmp    eax,0xfffffff6
c000e754:	0f 84 9a 01 00 00    	je     c000e8f4 <tcp_input+0x9e8>
c000e75a:	66 90                	xchg   ax,ax
c000e75c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e761:	85 c0                	test   eax,eax
c000e763:	0f 84 f3 00 00 00    	je     c000e85c <tcp_input+0x950>
c000e769:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e76d:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e773:	85 c0                	test   eax,eax
c000e775:	74 15                	je     c000e78c <tcp_input+0x880>
c000e777:	83 ec 08             	sub    esp,0x8
c000e77a:	68 fd 06 03 c0       	push   0xc00306fd
c000e77f:	68 26 fb 02 c0       	push   0xc002fb26
c000e784:	e8 1b 14 01 00       	call   c001fba4 <CPrintf>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e790:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e793:	0f b6 c0             	movzx  eax,al
c000e796:	83 e0 10             	and    eax,0x10
c000e799:	74 25                	je     c000e7c0 <tcp_input+0x8b4>
c000e79b:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	50                   	push   eax
c000e7a4:	e8 b3 9b ff ff       	call   c000835c <pbuf_free>
c000e7a9:	83 c4 10             	add    esp,0x10
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7b3:	e8 c4 ca ff ff       	call   c000b27c <tcp_abort>
c000e7b8:	83 c4 10             	add    esp,0x10
c000e7bb:	e9 40 01 00 00       	jmp    c000e900 <tcp_input+0x9f4>
c000e7c0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e7c5:	0f b6 c0             	movzx  eax,al
c000e7c8:	83 e0 08             	and    eax,0x8
c000e7cb:	74 13                	je     c000e7e0 <tcp_input+0x8d4>
c000e7cd:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7d2:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e7d5:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7da:	83 ca 01             	or     edx,0x1
c000e7dd:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e7e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e4:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7ea:	85 c0                	test   eax,eax
c000e7ec:	74 2a                	je     c000e818 <tcp_input+0x90c>
c000e7ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7f2:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7f8:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e7fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e802:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e805:	6a 00                	push   0x0
c000e807:	51                   	push   ecx
c000e808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e80c:	52                   	push   edx
c000e80d:	ff d0                	call   eax
c000e80f:	83 c4 10             	add    esp,0x10
c000e812:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e816:	eb 1c                	jmp    c000e834 <tcp_input+0x928>
c000e818:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e81d:	6a 00                	push   0x0
c000e81f:	50                   	push   eax
c000e820:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e824:	6a 00                	push   0x0
c000e826:	e8 59 c6 ff ff       	call   c000ae84 <tcp_recv_null>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e832:	66 90                	xchg   ax,ax
c000e834:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e839:	83 f8 f6             	cmp    eax,0xfffffff6
c000e83c:	0f 84 b6 00 00 00    	je     c000e8f8 <tcp_input+0x9ec>
c000e842:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e847:	85 c0                	test   eax,eax
c000e849:	74 11                	je     c000e85c <tcp_input+0x950>
c000e84b:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e855:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e85b:	90                   	nop
c000e85c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e861:	0f b6 c0             	movzx  eax,al
c000e864:	83 e0 20             	and    eax,0x20
c000e867:	74 6b                	je     c000e8d4 <tcp_input+0x9c8>
c000e869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e870:	0f b7 c0             	movzx  eax,ax
c000e873:	3d 60 08 00 00       	cmp    eax,0x860
c000e878:	74 12                	je     c000e88c <tcp_input+0x980>
c000e87a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e87e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e881:	83 c0 01             	add    eax,0x1
c000e884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e888:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000e88c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e890:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e896:	85 c0                	test   eax,eax
c000e898:	74 26                	je     c000e8c0 <tcp_input+0x9b4>
c000e89a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e89e:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e8a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8a8:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e8ab:	6a 00                	push   0x0
c000e8ad:	6a 00                	push   0x0
c000e8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b3:	52                   	push   edx
c000e8b4:	ff d0                	call   eax
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8bd:	eb 09                	jmp    c000e8c8 <tcp_input+0x9bc>
c000e8bf:	90                   	nop
c000e8c0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8cd:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8d0:	74 2a                	je     c000e8fc <tcp_input+0x9f0>
c000e8d2:	66 90                	xchg   ax,ax
c000e8d4:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e8de:	83 ec 0c             	sub    esp,0xc
c000e8e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8e5:	e8 a2 15 00 00       	call   c000fe8c <tcp_output>
c000e8ea:	83 c4 10             	add    esp,0x10
c000e8ed:	eb 11                	jmp    c000e900 <tcp_input+0x9f4>
c000e8ef:	90                   	nop
c000e8f0:	90                   	nop
c000e8f1:	eb 0d                	jmp    c000e900 <tcp_input+0x9f4>
c000e8f3:	90                   	nop
c000e8f4:	90                   	nop
c000e8f5:	eb 09                	jmp    c000e900 <tcp_input+0x9f4>
c000e8f7:	90                   	nop
c000e8f8:	90                   	nop
c000e8f9:	eb 05                	jmp    c000e900 <tcp_input+0x9f4>
c000e8fb:	90                   	nop
c000e8fc:	90                   	nop
c000e8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e900:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e90a:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e914:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e919:	85 c0                	test   eax,eax
c000e91b:	0f 84 b7 00 00 00    	je     c000e9d8 <tcp_input+0xacc>
c000e921:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e926:	83 ec 0c             	sub    esp,0xc
c000e929:	50                   	push   eax
c000e92a:	e8 2d 9a ff ff       	call   c000835c <pbuf_free>
c000e92f:	83 c4 10             	add    esp,0x10
c000e932:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e93c:	e9 97 00 00 00       	jmp    c000e9d8 <tcp_input+0xacc>
c000e941:	8d 76 00             	lea    esi,[esi+0x0]
c000e944:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e949:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e94d:	0f b7 c0             	movzx  eax,ax
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	50                   	push   eax
c000e954:	e8 8f 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	0f b7 c0             	movzx  eax,ax
c000e95f:	83 e0 04             	and    eax,0x4
c000e962:	75 64                	jne    c000e9c8 <tcp_input+0xabc>
c000e964:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e96a:	83 c0 01             	add    eax,0x1
c000e96d:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e973:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e979:	83 c0 01             	add    eax,0x1
c000e97c:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e982:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e987:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e98a:	0f b7 c8             	movzx  ecx,ax
c000e98d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e992:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e996:	0f b7 d0             	movzx  edx,ax
c000e999:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e99f:	0f b7 d8             	movzx  ebx,ax
c000e9a2:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000e9a7:	01 c3                	add    ebx,eax
c000e9a9:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e9ae:	83 ec 08             	sub    esp,0x8
c000e9b1:	51                   	push   ecx
c000e9b2:	52                   	push   edx
c000e9b3:	68 90 68 03 c0       	push   0xc0036890
c000e9b8:	68 98 68 03 c0       	push   0xc0036898
c000e9bd:	53                   	push   ebx
c000e9be:	50                   	push   eax
c000e9bf:	e8 54 19 00 00       	call   c0010318 <tcp_rst>
c000e9c4:	83 c4 20             	add    esp,0x20
c000e9c7:	90                   	nop
c000e9c8:	83 ec 0c             	sub    esp,0xc
c000e9cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e9cf:	e8 88 99 ff ff       	call   c000835c <pbuf_free>
c000e9d4:	83 c4 10             	add    esp,0x10
c000e9d7:	90                   	nop
c000e9d8:	83 c4 18             	add    esp,0x18
c000e9db:	5b                   	pop    ebx
c000e9dc:	c3                   	ret    
c000e9dd:	66 90                	xchg   ax,ax
c000e9df:	90                   	nop

c000e9e0 <tcp_output_alloc_header>:
c000e9e0:	83 ec 2c             	sub    esp,0x2c
c000e9e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e9e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9eb:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000e9f0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9fd:	01 d0                	add    eax,edx
c000e9ff:	83 c0 14             	add    eax,0x14
c000ea02:	0f b7 c0             	movzx  eax,ax
c000ea05:	83 ec 04             	sub    esp,0x4
c000ea08:	6a 00                	push   0x0
c000ea0a:	50                   	push   eax
c000ea0b:	6a 01                	push   0x1
c000ea0d:	e8 22 9b ff ff       	call   c0008534 <pbuf_alloc>
c000ea12:	83 c4 10             	add    esp,0x10
c000ea15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea19:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ea1e:	0f 84 10 01 00 00    	je     c000eb34 <tcp_output_alloc_header+0x154>
c000ea24:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ea29:	8d 50 13             	lea    edx,[eax+0x13]
c000ea2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea30:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ea34:	0f b7 c0             	movzx  eax,ax
c000ea37:	39 c2                	cmp    edx,eax
c000ea39:	7c 15                	jl     c000ea50 <tcp_output_alloc_header+0x70>
c000ea3b:	83 ec 08             	sub    esp,0x8
c000ea3e:	68 40 07 03 c0       	push   0xc0030740
c000ea43:	68 26 fb 02 c0       	push   0xc002fb26
c000ea48:	e8 57 11 01 00       	call   c001fba4 <CPrintf>
c000ea4d:	83 c4 10             	add    esp,0x10
c000ea50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ea62:	0f b7 c0             	movzx  eax,ax
c000ea65:	83 ec 0c             	sub    esp,0xc
c000ea68:	50                   	push   eax
c000ea69:	e8 7a 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea6e:	83 c4 10             	add    esp,0x10
c000ea71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea75:	66 89 02             	mov    WORD PTR [edx],ax
c000ea78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea7c:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ea80:	0f b7 c0             	movzx  eax,ax
c000ea83:	83 ec 0c             	sub    esp,0xc
c000ea86:	50                   	push   eax
c000ea87:	e8 5c 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea93:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ea97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea9b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ea9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eaa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaa6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000eaa9:	83 ec 0c             	sub    esp,0xc
c000eaac:	50                   	push   eax
c000eaad:	e8 5a 21 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000eab2:	83 c4 10             	add    esp,0x10
c000eab5:	89 c2                	mov    edx,eax
c000eab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eabb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eabe:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eac3:	c1 e8 02             	shr    eax,0x2
c000eac6:	83 c0 05             	add    eax,0x5
c000eac9:	c1 e0 0c             	shl    eax,0xc
c000eacc:	83 c8 10             	or     eax,0x10
c000eacf:	0f b7 c0             	movzx  eax,ax
c000ead2:	83 ec 0c             	sub    esp,0xc
c000ead5:	50                   	push   eax
c000ead6:	e8 0d 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eae2:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000eae6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaea:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eaee:	0f b7 c0             	movzx  eax,ax
c000eaf1:	83 ec 0c             	sub    esp,0xc
c000eaf4:	50                   	push   eax
c000eaf5:	e8 ee 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb01:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000eb05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb09:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eb0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb13:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eb19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb1d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000eb20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb24:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eb28:	0f b7 c0             	movzx  eax,ax
c000eb2b:	01 c2                	add    edx,eax
c000eb2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb31:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eb34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb38:	83 c4 2c             	add    esp,0x2c
c000eb3b:	c3                   	ret    

c000eb3c <tcp_create_segment>:
c000eb3c:	53                   	push   ebx
c000eb3d:	83 ec 28             	sub    esp,0x28
c000eb40:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb48:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000eb4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eb50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb55:	c1 e0 02             	shl    eax,0x2
c000eb58:	83 e0 04             	and    eax,0x4
c000eb5b:	88 c2                	mov    dl,al
c000eb5d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb62:	83 e0 02             	and    eax,0x2
c000eb65:	74 05                	je     c000eb6c <tcp_create_segment+0x30>
c000eb67:	b0 0c                	mov    al,0xc
c000eb69:	eb 05                	jmp    c000eb70 <tcp_create_segment+0x34>
c000eb6b:	90                   	nop
c000eb6c:	b0 00                	mov    al,0x0
c000eb6e:	66 90                	xchg   ax,ax
c000eb70:	01 d0                	add    eax,edx
c000eb72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000eb76:	83 ec 0c             	sub    esp,0xc
c000eb79:	6a 04                	push   0x4
c000eb7b:	e8 f4 8d ff ff       	call   c0007974 <memp_malloc>
c000eb80:	83 c4 10             	add    esp,0x10
c000eb83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb87:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb8c:	75 1a                	jne    c000eba8 <tcp_create_segment+0x6c>
c000eb8e:	83 ec 0c             	sub    esp,0xc
c000eb91:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb95:	e8 c2 97 ff ff       	call   c000835c <pbuf_free>
c000eb9a:	83 c4 10             	add    esp,0x10
c000eb9d:	b8 00 00 00 00       	mov    eax,0x0
c000eba2:	e9 31 01 00 00       	jmp    c000ecd8 <tcp_create_segment+0x19c>
c000eba7:	90                   	nop
c000eba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebac:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ebb0:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ebb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ebbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebc1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebc5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ebc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ebcc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ebcf:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ebd4:	89 d1                	mov    ecx,edx
c000ebd6:	29 c1                	sub    ecx,eax
c000ebd8:	89 c8                	mov    eax,ecx
c000ebda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ebde:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ebe2:	83 ec 08             	sub    esp,0x8
c000ebe5:	6a 14                	push   0x14
c000ebe7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ebeb:	e8 d0 95 ff ff       	call   c00081c0 <pbuf_header>
c000ebf0:	83 c4 10             	add    esp,0x10
c000ebf3:	0f b6 c0             	movzx  eax,al
c000ebf6:	85 c0                	test   eax,eax
c000ebf8:	74 2a                	je     c000ec24 <tcp_create_segment+0xe8>
c000ebfa:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ec00:	83 c0 01             	add    eax,0x1
c000ec03:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000ec09:	83 ec 0c             	sub    esp,0xc
c000ec0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec10:	e8 bf b3 ff ff       	call   c0009fd4 <tcp_seg_free>
c000ec15:	83 c4 10             	add    esp,0x10
c000ec18:	b8 00 00 00 00       	mov    eax,0x0
c000ec1d:	e9 b6 00 00 00       	jmp    c000ecd8 <tcp_create_segment+0x19c>
c000ec22:	66 90                	xchg   ax,ax
c000ec24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec2b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ec2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ec35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ec3c:	0f b7 c0             	movzx  eax,ax
c000ec3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec43:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec46:	83 ec 0c             	sub    esp,0xc
c000ec49:	50                   	push   eax
c000ec4a:	e8 99 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	66 89 03             	mov    WORD PTR [ebx],ax
c000ec55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec59:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec5d:	0f b7 c0             	movzx  eax,ax
c000ec60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec64:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec67:	83 ec 0c             	sub    esp,0xc
c000ec6a:	50                   	push   eax
c000ec6b:	e8 78 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec70:	83 c4 10             	add    esp,0x10
c000ec73:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ec77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec7b:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ec7e:	83 ec 0c             	sub    esp,0xc
c000ec81:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ec85:	e8 82 1f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ec8a:	83 c4 10             	add    esp,0x10
c000ec8d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ec90:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ec95:	c1 e8 02             	shr    eax,0x2
c000ec98:	0f b6 c0             	movzx  eax,al
c000ec9b:	83 c0 05             	add    eax,0x5
c000ec9e:	c1 e0 0c             	shl    eax,0xc
c000eca1:	89 c2                	mov    edx,eax
c000eca3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000eca8:	09 d0                	or     eax,edx
c000ecaa:	0f b7 c0             	movzx  eax,ax
c000ecad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecb1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	50                   	push   eax
c000ecb8:	e8 2b 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ecbd:	83 c4 10             	add    esp,0x10
c000ecc0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ecc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eccb:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ecd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecd5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd8:	83 c4 28             	add    esp,0x28
c000ecdb:	5b                   	pop    ebx
c000ecdc:	c3                   	ret    
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]

c000ece0 <tcp_pbuf_prealloc>:
c000ece0:	53                   	push   ebx
c000ece1:	83 ec 28             	sub    esp,0x28
c000ece4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ece8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ecec:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ecf0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ecf4:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ecf9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ecfe:	88 d8                	mov    al,bl
c000ed00:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed04:	88 c8                	mov    al,cl
c000ed06:	88 04 24             	mov    BYTE PTR [esp],al
c000ed09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed0d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed12:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ed17:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ed1c:	39 c2                	cmp    edx,eax
c000ed1e:	73 64                	jae    c000ed84 <tcp_pbuf_prealloc+0xa4>
c000ed20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ed25:	83 e0 02             	and    eax,0x2
c000ed28:	75 2e                	jne    c000ed58 <tcp_pbuf_prealloc+0x78>
c000ed2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed2e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ed31:	0f b6 c0             	movzx  eax,al
c000ed34:	83 e0 40             	and    eax,0x40
c000ed37:	75 4b                	jne    c000ed84 <tcp_pbuf_prealloc+0xa4>
c000ed39:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ed3d:	85 c0                	test   eax,eax
c000ed3f:	74 17                	je     c000ed58 <tcp_pbuf_prealloc+0x78>
c000ed41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed45:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ed48:	85 c0                	test   eax,eax
c000ed4a:	75 0c                	jne    c000ed58 <tcp_pbuf_prealloc+0x78>
c000ed4c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed50:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ed53:	85 c0                	test   eax,eax
c000ed55:	74 2d                	je     c000ed84 <tcp_pbuf_prealloc+0xa4>
c000ed57:	90                   	nop
c000ed58:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ed5d:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ed63:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ed68:	39 c2                	cmp    edx,eax
c000ed6a:	7d 0c                	jge    c000ed78 <tcp_pbuf_prealloc+0x98>
c000ed6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed70:	05 18 02 00 00       	add    eax,0x218
c000ed75:	eb 05                	jmp    c000ed7c <tcp_pbuf_prealloc+0x9c>
c000ed77:	90                   	nop
c000ed78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed7c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed81:	8d 76 00             	lea    esi,[esi+0x0]
c000ed84:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ed89:	83 ec 04             	sub    esp,0x4
c000ed8c:	6a 00                	push   0x0
c000ed8e:	50                   	push   eax
c000ed8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed93:	e8 9c 97 ff ff       	call   c0008534 <pbuf_alloc>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed9f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eda4:	75 0a                	jne    c000edb0 <tcp_pbuf_prealloc+0xd0>
c000eda6:	b8 00 00 00 00       	mov    eax,0x0
c000edab:	eb 5b                	jmp    c000ee08 <tcp_pbuf_prealloc+0x128>
c000edad:	8d 76 00             	lea    esi,[esi+0x0]
c000edb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000edb6:	85 c0                	test   eax,eax
c000edb8:	74 16                	je     c000edd0 <tcp_pbuf_prealloc+0xf0>
c000edba:	83 ec 08             	sub    esp,0x8
c000edbd:	68 c4 09 03 c0       	push   0xc00309c4
c000edc2:	68 26 fb 02 c0       	push   0xc002fb26
c000edc7:	e8 d8 0d 01 00       	call   c001fba4 <CPrintf>
c000edcc:	83 c4 10             	add    esp,0x10
c000edcf:	90                   	nop
c000edd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000edd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eddc:	89 d1                	mov    ecx,edx
c000edde:	29 c1                	sub    ecx,eax
c000ede0:	89 c8                	mov    eax,ecx
c000ede2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ede6:	66 89 02             	mov    WORD PTR [edx],ax
c000ede9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edf1:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000edf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edf9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee00:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ee04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee08:	83 c4 28             	add    esp,0x28
c000ee0b:	5b                   	pop    ebx
c000ee0c:	c3                   	ret    
c000ee0d:	8d 76 00             	lea    esi,[esi+0x0]

c000ee10 <tcp_write_checks>:
c000ee10:	83 ec 1c             	sub    esp,0x1c
c000ee13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ee17:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee23:	83 f8 04             	cmp    eax,0x4
c000ee26:	74 2c                	je     c000ee54 <tcp_write_checks+0x44>
c000ee28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee2f:	83 f8 07             	cmp    eax,0x7
c000ee32:	74 20                	je     c000ee54 <tcp_write_checks+0x44>
c000ee34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee38:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee3b:	83 f8 02             	cmp    eax,0x2
c000ee3e:	74 14                	je     c000ee54 <tcp_write_checks+0x44>
c000ee40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee44:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee47:	83 f8 03             	cmp    eax,0x3
c000ee4a:	74 08                	je     c000ee54 <tcp_write_checks+0x44>
c000ee4c:	b0 f3                	mov    al,0xf3
c000ee4e:	e9 f9 00 00 00       	jmp    c000ef4c <tcp_write_checks+0x13c>
c000ee53:	90                   	nop
c000ee54:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ee59:	85 c0                	test   eax,eax
c000ee5b:	75 07                	jne    c000ee64 <tcp_write_checks+0x54>
c000ee5d:	b0 00                	mov    al,0x0
c000ee5f:	e9 e8 00 00 00       	jmp    c000ef4c <tcp_write_checks+0x13c>
c000ee64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee68:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000ee6c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ee71:	0f b7 c0             	movzx  eax,ax
c000ee74:	39 c2                	cmp    edx,eax
c000ee76:	76 1c                	jbe    c000ee94 <tcp_write_checks+0x84>
c000ee78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee7f:	83 c8 80             	or     eax,0xffffff80
c000ee82:	88 c2                	mov    dl,al
c000ee84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee88:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ee8b:	b0 ff                	mov    al,0xff
c000ee8d:	e9 ba 00 00 00       	jmp    c000ef4c <tcp_write_checks+0x13c>
c000ee92:	66 90                	xchg   ax,ax
c000ee94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee98:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee9b:	0f b7 c0             	movzx  eax,ax
c000ee9e:	83 f8 01             	cmp    eax,0x1
c000eea1:	77 11                	ja     c000eeb4 <tcp_write_checks+0xa4>
c000eea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea7:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eeaa:	0f b7 c0             	movzx  eax,ax
c000eead:	3d fc ff 00 00       	cmp    eax,0xfffc
c000eeb2:	76 28                	jbe    c000eedc <tcp_write_checks+0xcc>
c000eeb4:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000eeba:	83 c0 01             	add    eax,0x1
c000eebd:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000eec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eeca:	83 c8 80             	or     eax,0xffffff80
c000eecd:	88 c2                	mov    dl,al
c000eecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000eed6:	b0 ff                	mov    al,0xff
c000eed8:	eb 72                	jmp    c000ef4c <tcp_write_checks+0x13c>
c000eeda:	66 90                	xchg   ax,ax
c000eedc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eee3:	0f b7 c0             	movzx  eax,ax
c000eee6:	85 c0                	test   eax,eax
c000eee8:	74 2e                	je     c000ef18 <tcp_write_checks+0x108>
c000eeea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeee:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eef1:	85 c0                	test   eax,eax
c000eef3:	75 53                	jne    c000ef48 <tcp_write_checks+0x138>
c000eef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eefc:	85 c0                	test   eax,eax
c000eefe:	75 48                	jne    c000ef48 <tcp_write_checks+0x138>
c000ef00:	83 ec 08             	sub    esp,0x8
c000ef03:	68 70 07 03 c0       	push   0xc0030770
c000ef08:	68 26 fb 02 c0       	push   0xc002fb26
c000ef0d:	e8 92 0c 01 00       	call   c001fba4 <CPrintf>
c000ef12:	83 c4 10             	add    esp,0x10
c000ef15:	eb 31                	jmp    c000ef48 <tcp_write_checks+0x138>
c000ef17:	90                   	nop
c000ef18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef1c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ef1f:	85 c0                	test   eax,eax
c000ef21:	75 0d                	jne    c000ef30 <tcp_write_checks+0x120>
c000ef23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef27:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef2a:	85 c0                	test   eax,eax
c000ef2c:	74 1a                	je     c000ef48 <tcp_write_checks+0x138>
c000ef2e:	66 90                	xchg   ax,ax
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	68 ac 07 03 c0       	push   0xc00307ac
c000ef38:	68 26 fb 02 c0       	push   0xc002fb26
c000ef3d:	e8 62 0c 01 00       	call   c001fba4 <CPrintf>
c000ef42:	83 c4 10             	add    esp,0x10
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	b0 00                	mov    al,0x0
c000ef4a:	66 90                	xchg   ax,ax
c000ef4c:	83 c4 1c             	add    esp,0x1c
c000ef4f:	c3                   	ret    

c000ef50 <tcp_write>:
c000ef50:	56                   	push   esi
c000ef51:	53                   	push   ebx
c000ef52:	83 ec 54             	sub    esp,0x54
c000ef55:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ef59:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000ef5d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ef62:	88 d0                	mov    al,dl
c000ef64:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ef68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef70:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000ef78:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000ef80:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000ef88:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000ef90:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000ef97:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ef9c:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000efa1:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000efa8:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000efaf:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000efb4:	75 1e                	jne    c000efd4 <tcp_write+0x84>
c000efb6:	83 ec 08             	sub    esp,0x8
c000efb9:	68 e0 07 03 c0       	push   0xc00307e0
c000efbe:	68 26 fb 02 c0       	push   0xc002fb26
c000efc3:	e8 dc 0b 01 00       	call   c001fba4 <CPrintf>
c000efc8:	83 c4 10             	add    esp,0x10
c000efcb:	b0 f2                	mov    al,0xf2
c000efcd:	e9 16 08 00 00       	jmp    c000f7e8 <tcp_write+0x898>
c000efd2:	66 90                	xchg   ax,ax
c000efd4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000efd9:	83 ec 08             	sub    esp,0x8
c000efdc:	50                   	push   eax
c000efdd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000efe1:	e8 2a fe ff ff       	call   c000ee10 <tcp_write_checks>
c000efe6:	83 c4 10             	add    esp,0x10
c000efe9:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000efed:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000eff2:	85 c0                	test   eax,eax
c000eff4:	74 0a                	je     c000f000 <tcp_write+0xb0>
c000eff6:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000effa:	e9 e9 07 00 00       	jmp    c000f7e8 <tcp_write+0x898>
c000efff:	90                   	nop
c000f000:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f004:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f007:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f00c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f010:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f013:	85 c0                	test   eax,eax
c000f015:	0f 84 79 02 00 00    	je     c000f294 <tcp_write+0x344>
c000f01b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f01f:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f022:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f026:	eb 0c                	jmp    c000f034 <tcp_write+0xe4>
c000f028:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f02c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f02e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f032:	66 90                	xchg   ax,ax
c000f034:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f038:	8b 00                	mov    eax,DWORD PTR [eax]
c000f03a:	85 c0                	test   eax,eax
c000f03c:	75 ea                	jne    c000f028 <tcp_write+0xd8>
c000f03e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f042:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f045:	0f b6 c0             	movzx  eax,al
c000f048:	c1 e0 02             	shl    eax,0x2
c000f04b:	83 e0 04             	and    eax,0x4
c000f04e:	89 c2                	mov    edx,eax
c000f050:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f054:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f057:	0f b6 c0             	movzx  eax,al
c000f05a:	83 e0 02             	and    eax,0x2
c000f05d:	74 09                	je     c000f068 <tcp_write+0x118>
c000f05f:	b8 0c 00 00 00       	mov    eax,0xc
c000f064:	eb 0a                	jmp    c000f070 <tcp_write+0x120>
c000f066:	66 90                	xchg   ax,ax
c000f068:	b8 00 00 00 00       	mov    eax,0x0
c000f06d:	8d 76 00             	lea    esi,[esi+0x0]
c000f070:	01 d0                	add    eax,edx
c000f072:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f077:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f07b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f07e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f082:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f085:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f08a:	01 ca                	add    edx,ecx
c000f08c:	29 d0                	sub    eax,edx
c000f08e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f093:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f097:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f09b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f0a0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f0a5:	0f b7 c0             	movzx  eax,ax
c000f0a8:	85 c0                	test   eax,eax
c000f0aa:	0f 84 84 00 00 00    	je     c000f134 <tcp_write+0x1e4>
c000f0b0:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f0b5:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f0ba:	39 c2                	cmp    edx,eax
c000f0bc:	76 16                	jbe    c000f0d4 <tcp_write+0x184>
c000f0be:	83 ec 08             	sub    esp,0x8
c000f0c1:	68 14 08 03 c0       	push   0xc0030814
c000f0c6:	68 26 fb 02 c0       	push   0xc002fb26
c000f0cb:	e8 d4 0a 01 00       	call   c001fba4 <CPrintf>
c000f0d0:	83 c4 10             	add    esp,0x10
c000f0d3:	90                   	nop
c000f0d4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0d8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0dc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f0e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0e5:	0f b7 d8             	movzx  ebx,ax
c000f0e8:	0f b7 ca             	movzx  ecx,dx
c000f0eb:	39 cb                	cmp    ebx,ecx
c000f0ed:	76 05                	jbe    c000f0f4 <tcp_write+0x1a4>
c000f0ef:	89 d0                	mov    eax,edx
c000f0f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0f4:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f0f9:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f0fe:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f103:	01 d0                	add    eax,edx
c000f105:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f10a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f10f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f114:	89 d6                	mov    esi,edx
c000f116:	29 c6                	sub    esi,eax
c000f118:	89 f0                	mov    eax,esi
c000f11a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f11f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f123:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f128:	89 d6                	mov    esi,edx
c000f12a:	29 c6                	sub    esi,eax
c000f12c:	89 f0                	mov    eax,esi
c000f12e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f133:	90                   	nop
c000f134:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f139:	0f b7 c0             	movzx  eax,ax
c000f13c:	85 c0                	test   eax,eax
c000f13e:	74 24                	je     c000f164 <tcp_write+0x214>
c000f140:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f145:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f14a:	39 c2                	cmp    edx,eax
c000f14c:	74 16                	je     c000f164 <tcp_write+0x214>
c000f14e:	83 ec 08             	sub    esp,0x8
c000f151:	68 d8 09 03 c0       	push   0xc00309d8
c000f156:	68 26 fb 02 c0       	push   0xc002fb26
c000f15b:	e8 44 0a 01 00       	call   c001fba4 <CPrintf>
c000f160:	83 c4 10             	add    esp,0x10
c000f163:	90                   	nop
c000f164:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f169:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f16e:	39 c2                	cmp    edx,eax
c000f170:	0f 83 ce 03 00 00    	jae    c000f544 <tcp_write+0x5f4>
c000f176:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f17b:	85 c0                	test   eax,eax
c000f17d:	0f 84 c1 03 00 00    	je     c000f544 <tcp_write+0x5f4>
c000f183:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f187:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f18a:	0f b7 c0             	movzx  eax,ax
c000f18d:	85 c0                	test   eax,eax
c000f18f:	0f 84 af 03 00 00    	je     c000f544 <tcp_write+0x5f4>
c000f195:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f19a:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f19f:	29 c2                	sub    edx,eax
c000f1a1:	89 d0                	mov    eax,edx
c000f1a3:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f1a8:	39 d0                	cmp    eax,edx
c000f1aa:	7e 04                	jle    c000f1b0 <tcp_write+0x260>
c000f1ac:	89 d0                	mov    eax,edx
c000f1ae:	66 90                	xchg   ax,ax
c000f1b0:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f1b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1bd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f1c2:	83 e0 01             	and    eax,0x1
c000f1c5:	74 61                	je     c000f228 <tcp_write+0x2d8>
c000f1c7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f1cc:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f1d1:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f1d6:	83 ec 04             	sub    esp,0x4
c000f1d9:	6a 01                	push   0x1
c000f1db:	51                   	push   ecx
c000f1dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f1e0:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f1e4:	51                   	push   ecx
c000f1e5:	52                   	push   edx
c000f1e6:	50                   	push   eax
c000f1e7:	6a 03                	push   0x3
c000f1e9:	e8 f2 fa ff ff       	call   c000ece0 <tcp_pbuf_prealloc>
c000f1ee:	83 c4 20             	add    esp,0x20
c000f1f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f1f5:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f1fa:	0f 84 44 05 00 00    	je     c000f744 <tcp_write+0x7f4>
c000f200:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f205:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f20a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f20e:	01 c1                	add    ecx,eax
c000f210:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f214:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f217:	83 ec 04             	sub    esp,0x4
c000f21a:	52                   	push   edx
c000f21b:	51                   	push   ecx
c000f21c:	50                   	push   eax
c000f21d:	e8 58 11 ff ff       	call   c000037a <memcpy>
c000f222:	83 c4 10             	add    esp,0x10
c000f225:	eb 39                	jmp    c000f260 <tcp_write+0x310>
c000f227:	90                   	nop
c000f228:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f22d:	83 ec 04             	sub    esp,0x4
c000f230:	6a 01                	push   0x1
c000f232:	50                   	push   eax
c000f233:	6a 03                	push   0x3
c000f235:	e8 fa 92 ff ff       	call   c0008534 <pbuf_alloc>
c000f23a:	83 c4 10             	add    esp,0x10
c000f23d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f241:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f246:	0f 84 fc 04 00 00    	je     c000f748 <tcp_write+0x7f8>
c000f24c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f251:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f255:	01 c2                	add    edx,eax
c000f257:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f25b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f25e:	66 90                	xchg   ax,ax
c000f260:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f265:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f269:	01 d0                	add    eax,edx
c000f26b:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f277:	e8 b4 98 ff ff       	call   c0008b30 <pbuf_clen>
c000f27c:	83 c4 10             	add    esp,0x10
c000f27f:	0f b6 c0             	movzx  eax,al
c000f282:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f286:	01 d0                	add    eax,edx
c000f288:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f28d:	e9 b2 02 00 00       	jmp    c000f544 <tcp_write+0x5f4>
c000f292:	66 90                	xchg   ax,ax
c000f294:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f298:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f29c:	0f b7 c0             	movzx  eax,ax
c000f29f:	85 c0                	test   eax,eax
c000f2a1:	0f 84 9d 02 00 00    	je     c000f544 <tcp_write+0x5f4>
c000f2a7:	83 ec 08             	sub    esp,0x8
c000f2aa:	68 34 08 03 c0       	push   0xc0030834
c000f2af:	68 26 fb 02 c0       	push   0xc002fb26
c000f2b4:	e8 eb 08 01 00       	call   c001fba4 <CPrintf>
c000f2b9:	83 c4 10             	add    esp,0x10
c000f2bc:	e9 83 02 00 00       	jmp    c000f544 <tcp_write+0x5f4>
c000f2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2c8:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f2cd:	89 d6                	mov    esi,edx
c000f2cf:	29 c6                	sub    esi,eax
c000f2d1:	89 f0                	mov    eax,esi
c000f2d3:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f2d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2dc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f2df:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f2e4:	89 d3                	mov    ebx,edx
c000f2e6:	29 c3                	sub    ebx,eax
c000f2e8:	89 d8                	mov    eax,ebx
c000f2ea:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f2ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f2f3:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f2f8:	0f b7 d8             	movzx  ebx,ax
c000f2fb:	0f b7 ca             	movzx  ecx,dx
c000f2fe:	39 cb                	cmp    ebx,ecx
c000f300:	76 02                	jbe    c000f304 <tcp_write+0x3b4>
c000f302:	89 d0                	mov    eax,edx
c000f304:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f309:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f30e:	83 e0 01             	and    eax,0x1
c000f311:	0f 84 b1 00 00 00    	je     c000f3c8 <tcp_write+0x478>
c000f317:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f31c:	0f 94 c0             	sete   al
c000f31f:	0f b6 f0             	movzx  esi,al
c000f322:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f327:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f32b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f32e:	0f b7 c8             	movzx  ecx,ax
c000f331:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f336:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f33b:	01 d0                	add    eax,edx
c000f33d:	0f b7 c0             	movzx  eax,ax
c000f340:	83 ec 04             	sub    esp,0x4
c000f343:	56                   	push   esi
c000f344:	53                   	push   ebx
c000f345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f349:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f34d:	52                   	push   edx
c000f34e:	51                   	push   ecx
c000f34f:	50                   	push   eax
c000f350:	6a 00                	push   0x0
c000f352:	e8 89 f9 ff ff       	call   c000ece0 <tcp_pbuf_prealloc>
c000f357:	83 c4 20             	add    esp,0x20
c000f35a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f35e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f363:	0f 84 e3 03 00 00    	je     c000f74c <tcp_write+0x7fc>
c000f369:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f36d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f371:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f376:	0f b7 c0             	movzx  eax,ax
c000f379:	39 c2                	cmp    edx,eax
c000f37b:	76 17                	jbe    c000f394 <tcp_write+0x444>
c000f37d:	83 ec 08             	sub    esp,0x8
c000f380:	68 64 08 03 c0       	push   0xc0030864
c000f385:	68 26 fb 02 c0       	push   0xc002fb26
c000f38a:	e8 15 08 01 00       	call   c001fba4 <CPrintf>
c000f38f:	83 c4 10             	add    esp,0x10
c000f392:	66 90                	xchg   ax,ax
c000f394:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f399:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f39e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f3a2:	01 d1                	add    ecx,edx
c000f3a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f3a8:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f3ab:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f3b0:	01 da                	add    edx,ebx
c000f3b2:	83 ec 04             	sub    esp,0x4
c000f3b5:	50                   	push   eax
c000f3b6:	51                   	push   ecx
c000f3b7:	52                   	push   edx
c000f3b8:	e8 bd 0f ff ff       	call   c000037a <memcpy>
c000f3bd:	83 c4 10             	add    esp,0x10
c000f3c0:	e9 a7 00 00 00       	jmp    c000f46c <tcp_write+0x51c>
c000f3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f3c8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f3cd:	0f b7 c0             	movzx  eax,ax
c000f3d0:	85 c0                	test   eax,eax
c000f3d2:	74 18                	je     c000f3ec <tcp_write+0x49c>
c000f3d4:	83 ec 08             	sub    esp,0x8
c000f3d7:	68 f6 09 03 c0       	push   0xc00309f6
c000f3dc:	68 26 fb 02 c0       	push   0xc002fb26
c000f3e1:	e8 be 07 01 00       	call   c001fba4 <CPrintf>
c000f3e6:	83 c4 10             	add    esp,0x10
c000f3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f3ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f3f1:	83 ec 04             	sub    esp,0x4
c000f3f4:	6a 01                	push   0x1
c000f3f6:	50                   	push   eax
c000f3f7:	6a 00                	push   0x0
c000f3f9:	e8 36 91 ff ff       	call   c0008534 <pbuf_alloc>
c000f3fe:	83 c4 10             	add    esp,0x10
c000f401:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f405:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f40a:	0f 84 40 03 00 00    	je     c000f750 <tcp_write+0x800>
c000f410:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f415:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f419:	01 c2                	add    edx,eax
c000f41b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f41f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f422:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f427:	83 ec 04             	sub    esp,0x4
c000f42a:	6a 00                	push   0x0
c000f42c:	50                   	push   eax
c000f42d:	6a 00                	push   0x0
c000f42f:	e8 00 91 ff ff       	call   c0008534 <pbuf_alloc>
c000f434:	83 c4 10             	add    esp,0x10
c000f437:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f43b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f440:	75 16                	jne    c000f458 <tcp_write+0x508>
c000f442:	83 ec 0c             	sub    esp,0xc
c000f445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f449:	e8 0e 8f ff ff       	call   c000835c <pbuf_free>
c000f44e:	83 c4 10             	add    esp,0x10
c000f451:	e9 02 03 00 00       	jmp    c000f758 <tcp_write+0x808>
c000f456:	66 90                	xchg   ax,ax
c000f458:	83 ec 08             	sub    esp,0x8
c000f45b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f45f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f463:	e8 2c 97 ff ff       	call   c0008b94 <pbuf_cat>
c000f468:	83 c4 10             	add    esp,0x10
c000f46b:	90                   	nop
c000f46c:	83 ec 0c             	sub    esp,0xc
c000f46f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f473:	e8 b8 96 ff ff       	call   c0008b30 <pbuf_clen>
c000f478:	83 c4 10             	add    esp,0x10
c000f47b:	0f b6 c0             	movzx  eax,al
c000f47e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f482:	01 d0                	add    eax,edx
c000f484:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f489:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f48e:	83 f8 02             	cmp    eax,0x2
c000f491:	77 0d                	ja     c000f4a0 <tcp_write+0x550>
c000f493:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f498:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f49d:	76 15                	jbe    c000f4b4 <tcp_write+0x564>
c000f49f:	90                   	nop
c000f4a0:	83 ec 0c             	sub    esp,0xc
c000f4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f4a7:	e8 b0 8e ff ff       	call   c000835c <pbuf_free>
c000f4ac:	83 c4 10             	add    esp,0x10
c000f4af:	e9 a4 02 00 00       	jmp    c000f758 <tcp_write+0x808>
c000f4b4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f4b9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f4bd:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f4c0:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f4c5:	01 ca                	add    edx,ecx
c000f4c7:	83 ec 0c             	sub    esp,0xc
c000f4ca:	50                   	push   eax
c000f4cb:	52                   	push   edx
c000f4cc:	6a 00                	push   0x0
c000f4ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f4d2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f4d6:	e8 61 f6 ff ff       	call   c000eb3c <tcp_create_segment>
c000f4db:	83 c4 20             	add    esp,0x20
c000f4de:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f4e2:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f4e7:	0f 84 67 02 00 00    	je     c000f754 <tcp_write+0x804>
c000f4ed:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4f2:	75 0c                	jne    c000f500 <tcp_write+0x5b0>
c000f4f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f4f8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f4fc:	eb 2a                	jmp    c000f528 <tcp_write+0x5d8>
c000f4fe:	66 90                	xchg   ax,ax
c000f500:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f505:	75 15                	jne    c000f51c <tcp_write+0x5cc>
c000f507:	83 ec 08             	sub    esp,0x8
c000f50a:	68 04 0a 03 c0       	push   0xc0030a04
c000f50f:	68 26 fb 02 c0       	push   0xc002fb26
c000f514:	e8 8b 06 01 00       	call   c001fba4 <CPrintf>
c000f519:	83 c4 10             	add    esp,0x10
c000f51c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f520:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f524:	89 10                	mov    DWORD PTR [eax],edx
c000f526:	66 90                	xchg   ax,ax
c000f528:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f52c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f530:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f535:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f53a:	01 d0                	add    eax,edx
c000f53c:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f541:	8d 76 00             	lea    esi,[esi+0x0]
c000f544:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f549:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f54e:	39 c2                	cmp    edx,eax
c000f550:	0f 82 6e fd ff ff    	jb     c000f2c4 <tcp_write+0x374>
c000f556:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f55b:	85 c0                	test   eax,eax
c000f55d:	0f 84 9d 00 00 00    	je     c000f600 <tcp_write+0x6b0>
c000f563:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f56a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f56e:	eb 70                	jmp    c000f5e0 <tcp_write+0x690>
c000f570:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f574:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f577:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f57c:	01 d0                	add    eax,edx
c000f57e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f582:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f586:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f58a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58c:	85 c0                	test   eax,eax
c000f58e:	75 44                	jne    c000f5d4 <tcp_write+0x684>
c000f590:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f595:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f599:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f5a4:	0f b7 c0             	movzx  eax,ax
c000f5a7:	01 c8                	add    eax,ecx
c000f5a9:	83 ec 04             	sub    esp,0x4
c000f5ac:	52                   	push   edx
c000f5ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f5b1:	50                   	push   eax
c000f5b2:	e8 c3 0d ff ff       	call   c000037a <memcpy>
c000f5b7:	83 c4 10             	add    esp,0x10
c000f5ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5be:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f5c2:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f5c7:	01 d0                	add    eax,edx
c000f5c9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f5cd:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f5de:	66 90                	xchg   ax,ax
c000f5e0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f5e5:	75 89                	jne    c000f570 <tcp_write+0x620>
c000f5e7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f5ee:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f5f3:	01 d0                	add    eax,edx
c000f5f5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f5f9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f600:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f605:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f609:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f60d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f612:	74 4c                	je     c000f660 <tcp_write+0x710>
c000f614:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f619:	75 15                	jne    c000f630 <tcp_write+0x6e0>
c000f61b:	83 ec 08             	sub    esp,0x8
c000f61e:	68 a4 08 03 c0       	push   0xc00308a4
c000f623:	68 26 fb 02 c0       	push   0xc002fb26
c000f628:	e8 77 05 01 00       	call   c001fba4 <CPrintf>
c000f62d:	83 c4 10             	add    esp,0x10
c000f630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f637:	83 ec 08             	sub    esp,0x8
c000f63a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f63e:	50                   	push   eax
c000f63f:	e8 50 95 ff ff       	call   c0008b94 <pbuf_cat>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f64b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f64e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f652:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f655:	01 d0                	add    eax,edx
c000f657:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f65b:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f65f:	90                   	nop
c000f660:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f665:	75 0d                	jne    c000f674 <tcp_write+0x724>
c000f667:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f66b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f66f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f672:	eb 0c                	jmp    c000f680 <tcp_write+0x730>
c000f674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f678:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f67c:	89 10                	mov    DWORD PTR [eax],edx
c000f67e:	66 90                	xchg   ax,ax
c000f680:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f684:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f687:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f68c:	01 c2                	add    edx,eax
c000f68e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f692:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f699:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6a1:	89 d6                	mov    esi,edx
c000f6a3:	29 c6                	sub    esi,eax
c000f6a5:	89 f0                	mov    eax,esi
c000f6a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f6ab:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f6af:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f6b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6b7:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f6bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6bf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f6c2:	0f b7 c0             	movzx  eax,ax
c000f6c5:	85 c0                	test   eax,eax
c000f6c7:	74 2b                	je     c000f6f4 <tcp_write+0x7a4>
c000f6c9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6cd:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f6d0:	85 c0                	test   eax,eax
c000f6d2:	75 20                	jne    c000f6f4 <tcp_write+0x7a4>
c000f6d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6d8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f6db:	85 c0                	test   eax,eax
c000f6dd:	75 15                	jne    c000f6f4 <tcp_write+0x7a4>
c000f6df:	83 ec 08             	sub    esp,0x8
c000f6e2:	68 15 0a 03 c0       	push   0xc0030a15
c000f6e7:	68 26 fb 02 c0       	push   0xc002fb26
c000f6ec:	e8 b3 04 01 00       	call   c001fba4 <CPrintf>
c000f6f1:	83 c4 10             	add    esp,0x10
c000f6f4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f6f9:	74 41                	je     c000f73c <tcp_write+0x7ec>
c000f6fb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f702:	85 c0                	test   eax,eax
c000f704:	74 36                	je     c000f73c <tcp_write+0x7ec>
c000f706:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f70b:	83 e0 02             	and    eax,0x2
c000f70e:	75 2c                	jne    c000f73c <tcp_write+0x7ec>
c000f710:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f714:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f717:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f71b:	83 ec 0c             	sub    esp,0xc
c000f71e:	6a 08                	push   0x8
c000f720:	e8 c3 14 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f725:	83 c4 10             	add    esp,0x10
c000f728:	89 c1                	mov    ecx,eax
c000f72a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f72e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f731:	89 d8                	mov    eax,ebx
c000f733:	09 c8                	or     eax,ecx
c000f735:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f739:	8d 76 00             	lea    esi,[esi+0x0]
c000f73c:	b0 00                	mov    al,0x0
c000f73e:	e9 a5 00 00 00       	jmp    c000f7e8 <tcp_write+0x898>
c000f743:	90                   	nop
c000f744:	90                   	nop
c000f745:	eb 11                	jmp    c000f758 <tcp_write+0x808>
c000f747:	90                   	nop
c000f748:	90                   	nop
c000f749:	eb 0d                	jmp    c000f758 <tcp_write+0x808>
c000f74b:	90                   	nop
c000f74c:	90                   	nop
c000f74d:	eb 09                	jmp    c000f758 <tcp_write+0x808>
c000f74f:	90                   	nop
c000f750:	90                   	nop
c000f751:	eb 05                	jmp    c000f758 <tcp_write+0x808>
c000f753:	90                   	nop
c000f754:	90                   	nop
c000f755:	8d 76 00             	lea    esi,[esi+0x0]
c000f758:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f75c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f75f:	83 c8 80             	or     eax,0xffffff80
c000f762:	88 c2                	mov    dl,al
c000f764:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f768:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f76b:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f771:	83 c0 01             	add    eax,0x1
c000f774:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f77a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f77f:	74 0f                	je     c000f790 <tcp_write+0x840>
c000f781:	83 ec 0c             	sub    esp,0xc
c000f784:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f788:	e8 cf 8b ff ff       	call   c000835c <pbuf_free>
c000f78d:	83 c4 10             	add    esp,0x10
c000f790:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f795:	74 11                	je     c000f7a8 <tcp_write+0x858>
c000f797:	83 ec 0c             	sub    esp,0xc
c000f79a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f79e:	e8 75 a8 ff ff       	call   c000a018 <tcp_segs_free>
c000f7a3:	83 c4 10             	add    esp,0x10
c000f7a6:	66 90                	xchg   ax,ax
c000f7a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7ac:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f7af:	0f b7 c0             	movzx  eax,ax
c000f7b2:	85 c0                	test   eax,eax
c000f7b4:	74 2e                	je     c000f7e4 <tcp_write+0x894>
c000f7b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7ba:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f7bd:	85 c0                	test   eax,eax
c000f7bf:	75 23                	jne    c000f7e4 <tcp_write+0x894>
c000f7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7c5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f7c8:	85 c0                	test   eax,eax
c000f7ca:	75 18                	jne    c000f7e4 <tcp_write+0x894>
c000f7cc:	83 ec 08             	sub    esp,0x8
c000f7cf:	68 15 0a 03 c0       	push   0xc0030a15
c000f7d4:	68 26 fb 02 c0       	push   0xc002fb26
c000f7d9:	e8 c6 03 01 00       	call   c001fba4 <CPrintf>
c000f7de:	83 c4 10             	add    esp,0x10
c000f7e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7e4:	b0 ff                	mov    al,0xff
c000f7e6:	66 90                	xchg   ax,ax
c000f7e8:	83 c4 54             	add    esp,0x54
c000f7eb:	5b                   	pop    ebx
c000f7ec:	5e                   	pop    esi
c000f7ed:	c3                   	ret    
c000f7ee:	66 90                	xchg   ax,ax

c000f7f0 <tcp_enqueue_flags>:
c000f7f0:	83 ec 3c             	sub    esp,0x3c
c000f7f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f7fb:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f800:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f805:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f80a:	83 e0 03             	and    eax,0x3
c000f80d:	75 15                	jne    c000f824 <tcp_enqueue_flags+0x34>
c000f80f:	83 ec 08             	sub    esp,0x8
c000f812:	68 dc 08 03 c0       	push   0xc00308dc
c000f817:	68 26 fb 02 c0       	push   0xc002fb26
c000f81c:	e8 83 03 01 00       	call   c001fba4 <CPrintf>
c000f821:	83 c4 10             	add    esp,0x10
c000f824:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f828:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f82b:	0f b7 c0             	movzx  eax,ax
c000f82e:	83 f8 01             	cmp    eax,0x1
c000f831:	77 11                	ja     c000f844 <tcp_enqueue_flags+0x54>
c000f833:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f837:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f83a:	0f b7 c0             	movzx  eax,ax
c000f83d:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f842:	76 2c                	jbe    c000f870 <tcp_enqueue_flags+0x80>
c000f844:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f84a:	83 c0 01             	add    eax,0x1
c000f84d:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f853:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f857:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f85a:	83 c8 80             	or     eax,0xffffff80
c000f85d:	88 c2                	mov    dl,al
c000f85f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f863:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f866:	b0 ff                	mov    al,0xff
c000f868:	e9 6b 02 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f86d:	8d 76 00             	lea    esi,[esi+0x0]
c000f870:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f875:	83 e0 02             	and    eax,0x2
c000f878:	74 06                	je     c000f880 <tcp_enqueue_flags+0x90>
c000f87a:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f87f:	90                   	nop
c000f880:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f885:	c1 e0 02             	shl    eax,0x2
c000f888:	83 e0 04             	and    eax,0x4
c000f88b:	88 c2                	mov    dl,al
c000f88d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f892:	83 e0 02             	and    eax,0x2
c000f895:	74 05                	je     c000f89c <tcp_enqueue_flags+0xac>
c000f897:	b0 0c                	mov    al,0xc
c000f899:	eb 05                	jmp    c000f8a0 <tcp_enqueue_flags+0xb0>
c000f89b:	90                   	nop
c000f89c:	b0 00                	mov    al,0x0
c000f89e:	66 90                	xchg   ax,ax
c000f8a0:	01 d0                	add    eax,edx
c000f8a2:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f8a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8aa:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f8ae:	0f b7 c0             	movzx  eax,ax
c000f8b1:	85 c0                	test   eax,eax
c000f8b3:	75 17                	jne    c000f8cc <tcp_enqueue_flags+0xdc>
c000f8b5:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f8bb:	83 c0 01             	add    eax,0x1
c000f8be:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8c4:	b0 ff                	mov    al,0xff
c000f8c6:	e9 0d 02 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f8cb:	90                   	nop
c000f8cc:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f8d1:	83 ec 04             	sub    esp,0x4
c000f8d4:	6a 00                	push   0x0
c000f8d6:	50                   	push   eax
c000f8d7:	6a 00                	push   0x0
c000f8d9:	e8 56 8c ff ff       	call   c0008534 <pbuf_alloc>
c000f8de:	83 c4 10             	add    esp,0x10
c000f8e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f8e5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f8ea:	75 2c                	jne    c000f918 <tcp_enqueue_flags+0x128>
c000f8ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8f0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f3:	83 c8 80             	or     eax,0xffffff80
c000f8f6:	88 c2                	mov    dl,al
c000f8f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8fc:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f8ff:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f905:	83 c0 01             	add    eax,0x1
c000f908:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f90e:	b0 ff                	mov    al,0xff
c000f910:	e9 c3 01 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f915:	8d 76 00             	lea    esi,[esi+0x0]
c000f918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f91c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f920:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f925:	0f b7 d2             	movzx  edx,dx
c000f928:	0f b7 c0             	movzx  eax,ax
c000f92b:	39 c2                	cmp    edx,eax
c000f92d:	73 15                	jae    c000f944 <tcp_enqueue_flags+0x154>
c000f92f:	83 ec 08             	sub    esp,0x8
c000f932:	68 34 09 03 c0       	push   0xc0030934
c000f937:	68 26 fb 02 c0       	push   0xc002fb26
c000f93c:	e8 63 02 01 00       	call   c001fba4 <CPrintf>
c000f941:	83 c4 10             	add    esp,0x10
c000f944:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f949:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f94d:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f950:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f955:	83 ec 0c             	sub    esp,0xc
c000f958:	51                   	push   ecx
c000f959:	52                   	push   edx
c000f95a:	50                   	push   eax
c000f95b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f95f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f963:	e8 d4 f1 ff ff       	call   c000eb3c <tcp_create_segment>
c000f968:	83 c4 20             	add    esp,0x20
c000f96b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f96f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f974:	75 2a                	jne    c000f9a0 <tcp_enqueue_flags+0x1b0>
c000f976:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f97a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f97d:	83 c8 80             	or     eax,0xffffff80
c000f980:	88 c2                	mov    dl,al
c000f982:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f986:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f989:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f98f:	83 c0 01             	add    eax,0x1
c000f992:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f998:	b0 ff                	mov    al,0xff
c000f99a:	e9 39 01 00 00       	jmp    c000fad8 <tcp_enqueue_flags+0x2e8>
c000f99f:	90                   	nop
c000f9a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f9a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f9a7:	0f b7 c0             	movzx  eax,ax
c000f9aa:	85 c0                	test   eax,eax
c000f9ac:	74 16                	je     c000f9c4 <tcp_enqueue_flags+0x1d4>
c000f9ae:	83 ec 08             	sub    esp,0x8
c000f9b1:	68 70 09 03 c0       	push   0xc0030970
c000f9b6:	68 26 fb 02 c0       	push   0xc002fb26
c000f9bb:	e8 e4 01 01 00       	call   c001fba4 <CPrintf>
c000f9c0:	83 c4 10             	add    esp,0x10
c000f9c3:	90                   	nop
c000f9c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9cb:	85 c0                	test   eax,eax
c000f9cd:	75 0d                	jne    c000f9dc <tcp_enqueue_flags+0x1ec>
c000f9cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9d7:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f9da:	eb 30                	jmp    c000fa0c <tcp_enqueue_flags+0x21c>
c000f9dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9e0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9e7:	eb 0f                	jmp    c000f9f8 <tcp_enqueue_flags+0x208>
c000f9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9f6:	66 90                	xchg   ax,ax
c000f9f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9fe:	85 c0                	test   eax,eax
c000fa00:	75 ea                	jne    c000f9ec <tcp_enqueue_flags+0x1fc>
c000fa02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fa0a:	89 10                	mov    DWORD PTR [eax],edx
c000fa0c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa10:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fa16:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa1b:	83 e0 02             	and    eax,0x2
c000fa1e:	75 0c                	jne    c000fa2c <tcp_enqueue_flags+0x23c>
c000fa20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa25:	83 e0 01             	and    eax,0x1
c000fa28:	74 26                	je     c000fa50 <tcp_enqueue_flags+0x260>
c000fa2a:	66 90                	xchg   ax,ax
c000fa2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa30:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fa33:	8d 50 01             	lea    edx,[eax+0x1]
c000fa36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa3a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fa3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa41:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa45:	83 e8 01             	sub    eax,0x1
c000fa48:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fa4c:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000fa50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa55:	83 e0 01             	and    eax,0x1
c000fa58:	74 16                	je     c000fa70 <tcp_enqueue_flags+0x280>
c000fa5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa5e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa61:	83 c8 20             	or     eax,0x20
c000fa64:	88 c2                	mov    dl,al
c000fa66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa6a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa77:	83 ec 0c             	sub    esp,0xc
c000fa7a:	50                   	push   eax
c000fa7b:	e8 b0 90 ff ff       	call   c0008b30 <pbuf_clen>
c000fa80:	83 c4 10             	add    esp,0x10
c000fa83:	88 c1                	mov    cl,al
c000fa85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa89:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fa8c:	0f b6 c1             	movzx  eax,cl
c000fa8f:	01 d0                	add    eax,edx
c000fa91:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fa95:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000fa99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa9d:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000faa0:	0f b7 c0             	movzx  eax,ax
c000faa3:	85 c0                	test   eax,eax
c000faa5:	74 2d                	je     c000fad4 <tcp_enqueue_flags+0x2e4>
c000faa7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000faab:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000faae:	85 c0                	test   eax,eax
c000fab0:	75 22                	jne    c000fad4 <tcp_enqueue_flags+0x2e4>
c000fab2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fab6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fab9:	85 c0                	test   eax,eax
c000fabb:	75 17                	jne    c000fad4 <tcp_enqueue_flags+0x2e4>
c000fabd:	83 ec 08             	sub    esp,0x8
c000fac0:	68 9c 09 03 c0       	push   0xc003099c
c000fac5:	68 26 fb 02 c0       	push   0xc002fb26
c000faca:	e8 d5 00 01 00       	call   c001fba4 <CPrintf>
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	66 90                	xchg   ax,ax
c000fad4:	b0 00                	mov    al,0x0
c000fad6:	66 90                	xchg   ax,ax
c000fad8:	83 c4 3c             	add    esp,0x3c
c000fadb:	c3                   	ret    

c000fadc <tcp_send_fin>:
c000fadc:	53                   	push   ebx
c000fadd:	83 ec 18             	sub    esp,0x18
c000fae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fae7:	85 c0                	test   eax,eax
c000fae9:	74 75                	je     c000fb60 <tcp_send_fin+0x84>
c000faeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faef:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000faf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000faf6:	eb 0c                	jmp    c000fb04 <tcp_send_fin+0x28>
c000faf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fafc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fafe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb02:	66 90                	xchg   ax,ax
c000fb04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb08:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb0a:	85 c0                	test   eax,eax
c000fb0c:	75 ea                	jne    c000faf8 <tcp_send_fin+0x1c>
c000fb0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb15:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fb19:	0f b7 c0             	movzx  eax,ax
c000fb1c:	83 ec 0c             	sub    esp,0xc
c000fb1f:	50                   	push   eax
c000fb20:	e8 c3 10 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fb25:	83 c4 10             	add    esp,0x10
c000fb28:	0f b7 c0             	movzx  eax,ax
c000fb2b:	83 e0 07             	and    eax,0x7
c000fb2e:	75 30                	jne    c000fb60 <tcp_send_fin+0x84>
c000fb30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb37:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fb3b:	83 ec 0c             	sub    esp,0xc
c000fb3e:	6a 01                	push   0x1
c000fb40:	e8 a3 10 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fb45:	83 c4 10             	add    esp,0x10
c000fb48:	89 c1                	mov    ecx,eax
c000fb4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb4e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb51:	89 d8                	mov    eax,ebx
c000fb53:	09 c8                	or     eax,ecx
c000fb55:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fb59:	b0 00                	mov    al,0x0
c000fb5b:	eb 17                	jmp    c000fb74 <tcp_send_fin+0x98>
c000fb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb60:	83 ec 08             	sub    esp,0x8
c000fb63:	6a 01                	push   0x1
c000fb65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb69:	e8 82 fc ff ff       	call   c000f7f0 <tcp_enqueue_flags>
c000fb6e:	83 c4 10             	add    esp,0x10
c000fb71:	8d 76 00             	lea    esi,[esi+0x0]
c000fb74:	83 c4 18             	add    esp,0x18
c000fb77:	5b                   	pop    ebx
c000fb78:	c3                   	ret    
c000fb79:	8d 76 00             	lea    esi,[esi+0x0]

c000fb7c <tcp_send_empty_ack>:
c000fb7c:	53                   	push   ebx
c000fb7d:	83 ec 18             	sub    esp,0x18
c000fb80:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb89:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fb8c:	83 ec 0c             	sub    esp,0xc
c000fb8f:	50                   	push   eax
c000fb90:	e8 77 10 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	89 c2                	mov    edx,eax
c000fb9a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fb9f:	52                   	push   edx
c000fba0:	6a 00                	push   0x0
c000fba2:	50                   	push   eax
c000fba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fba7:	e8 34 ee ff ff       	call   c000e9e0 <tcp_output_alloc_header>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fbb3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fbb8:	75 0a                	jne    c000fbc4 <tcp_send_empty_ack+0x48>
c000fbba:	b0 fe                	mov    al,0xfe
c000fbbc:	e9 97 00 00 00       	jmp    c000fc58 <tcp_send_empty_ack+0xdc>
c000fbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000fbc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbd6:	83 e0 fc             	and    eax,0xfffffffc
c000fbd9:	88 c2                	mov    dl,al
c000fbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbdf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fbe2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbe6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbe9:	0f b7 d0             	movzx  edx,ax
c000fbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf0:	8d 48 04             	lea    ecx,[eax+0x4]
c000fbf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf7:	83 ec 0c             	sub    esp,0xc
c000fbfa:	52                   	push   edx
c000fbfb:	6a 06                	push   0x6
c000fbfd:	51                   	push   ecx
c000fbfe:	50                   	push   eax
c000fbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc03:	e8 70 35 00 00       	call   c0013178 <inet_chksum_pseudo>
c000fc08:	83 c4 20             	add    esp,0x20
c000fc0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fc0f:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc17:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fc1a:	0f b6 c8             	movzx  ecx,al
c000fc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc21:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fc24:	0f b6 d0             	movzx  edx,al
c000fc27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc2b:	8d 58 04             	lea    ebx,[eax+0x4]
c000fc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc32:	83 ec 08             	sub    esp,0x8
c000fc35:	6a 06                	push   0x6
c000fc37:	51                   	push   ecx
c000fc38:	52                   	push   edx
c000fc39:	53                   	push   ebx
c000fc3a:	50                   	push   eax
c000fc3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc3f:	e8 68 41 00 00       	call   c0013dac <ip_output>
c000fc44:	83 c4 20             	add    esp,0x20
c000fc47:	83 ec 0c             	sub    esp,0xc
c000fc4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc4e:	e8 09 87 ff ff       	call   c000835c <pbuf_free>
c000fc53:	83 c4 10             	add    esp,0x10
c000fc56:	b0 00                	mov    al,0x0
c000fc58:	83 c4 18             	add    esp,0x18
c000fc5b:	5b                   	pop    ebx
c000fc5c:	c3                   	ret    
c000fc5d:	8d 76 00             	lea    esi,[esi+0x0]

c000fc60 <tcp_output_segment>:
c000fc60:	56                   	push   esi
c000fc61:	53                   	push   ebx
c000fc62:	83 ec 14             	sub    esp,0x14
c000fc65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc69:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fc6c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc70:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc73:	83 ec 0c             	sub    esp,0xc
c000fc76:	50                   	push   eax
c000fc77:	e8 90 0f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fc82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc86:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fc8a:	0f b7 c0             	movzx  eax,ax
c000fc8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc91:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc94:	83 ec 0c             	sub    esp,0xc
c000fc97:	50                   	push   eax
c000fc98:	e8 4b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fca4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fca8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fcab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcaf:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fcb3:	0f b7 c0             	movzx  eax,ax
c000fcb6:	01 c2                	add    edx,eax
c000fcb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcbc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fcbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcc6:	83 c0 14             	add    eax,0x14
c000fcc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcd1:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fcd4:	0f b6 c0             	movzx  eax,al
c000fcd7:	83 e0 01             	and    eax,0x1
c000fcda:	74 10                	je     c000fcec <tcp_output_segment+0x8c>
c000fcdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fce0:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fce6:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fceb:	90                   	nop
c000fcec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcf0:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fcf4:	98                   	cwde   
c000fcf5:	83 f8 ff             	cmp    eax,0xffffffff
c000fcf8:	75 0a                	jne    c000fd04 <tcp_output_segment+0xa4>
c000fcfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcfe:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fd04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd08:	85 c0                	test   eax,eax
c000fd0a:	74 0c                	je     c000fd18 <tcp_output_segment+0xb8>
c000fd0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd10:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd12:	85 c0                	test   eax,eax
c000fd14:	75 32                	jne    c000fd48 <tcp_output_segment+0xe8>
c000fd16:	66 90                	xchg   ax,ax
c000fd18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd1c:	83 c0 04             	add    eax,0x4
c000fd1f:	83 ec 0c             	sub    esp,0xc
c000fd22:	50                   	push   eax
c000fd23:	e8 dc 38 00 00       	call   c0013604 <ip_route>
c000fd28:	83 c4 10             	add    esp,0x10
c000fd2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd2f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd34:	0f 84 46 01 00 00    	je     c000fe80 <tcp_output_segment+0x220>
c000fd3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd3e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fd41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd45:	89 10                	mov    DWORD PTR [eax],edx
c000fd47:	90                   	nop
c000fd48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fd4f:	85 c0                	test   eax,eax
c000fd51:	75 2d                	jne    c000fd80 <tcp_output_segment+0x120>
c000fd53:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fd59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd5d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fd60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd6a:	83 ec 0c             	sub    esp,0xc
c000fd6d:	50                   	push   eax
c000fd6e:	e8 99 0e ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fd73:	83 c4 10             	add    esp,0x10
c000fd76:	89 c2                	mov    edx,eax
c000fd78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd7c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fd7f:	90                   	nop
c000fd80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd84:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fd87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd91:	29 c2                	sub    edx,eax
c000fd93:	89 d0                	mov    eax,edx
c000fd95:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fd9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fda1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fda5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fda9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fdac:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fdb1:	89 d6                	mov    esi,edx
c000fdb3:	29 c6                	sub    esi,eax
c000fdb5:	89 f0                	mov    eax,esi
c000fdb7:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000fdbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdc2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000fdc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fdcc:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fdd1:	89 d6                	mov    esi,edx
c000fdd3:	29 c6                	sub    esi,eax
c000fdd5:	89 f0                	mov    eax,esi
c000fdd7:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000fddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fddf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fde2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fde6:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fde9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fdec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fdf3:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fdf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe03:	0f b7 c8             	movzx  ecx,ax
c000fe06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe0a:	8d 70 04             	lea    esi,[eax+0x4]
c000fe0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fe1c:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000fe1f:	83 ec 0c             	sub    esp,0xc
c000fe22:	51                   	push   ecx
c000fe23:	6a 06                	push   0x6
c000fe25:	56                   	push   esi
c000fe26:	52                   	push   edx
c000fe27:	50                   	push   eax
c000fe28:	e8 4b 33 00 00       	call   c0013178 <inet_chksum_pseudo>
c000fe2d:	83 c4 20             	add    esp,0x20
c000fe30:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fe34:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fe3a:	83 c0 01             	add    eax,0x1
c000fe3d:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fe43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe47:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fe4a:	0f b6 d8             	movzx  ebx,al
c000fe4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe51:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe54:	0f b6 c8             	movzx  ecx,al
c000fe57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe5b:	8d 70 04             	lea    esi,[eax+0x4]
c000fe5e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe69:	83 ec 08             	sub    esp,0x8
c000fe6c:	6a 06                	push   0x6
c000fe6e:	53                   	push   ebx
c000fe6f:	51                   	push   ecx
c000fe70:	56                   	push   esi
c000fe71:	52                   	push   edx
c000fe72:	50                   	push   eax
c000fe73:	e8 34 3f 00 00       	call   c0013dac <ip_output>
c000fe78:	83 c4 20             	add    esp,0x20
c000fe7b:	eb 07                	jmp    c000fe84 <tcp_output_segment+0x224>
c000fe7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fe80:	90                   	nop
c000fe81:	8d 76 00             	lea    esi,[esi+0x0]
c000fe84:	83 c4 14             	add    esp,0x14
c000fe87:	5b                   	pop    ebx
c000fe88:	5e                   	pop    esi
c000fe89:	c3                   	ret    
c000fe8a:	66 90                	xchg   ax,ax

c000fe8c <tcp_output>:
c000fe8c:	56                   	push   esi
c000fe8d:	53                   	push   ebx
c000fe8e:	83 ec 24             	sub    esp,0x24
c000fe91:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000fe96:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000fe9a:	75 08                	jne    c000fea4 <tcp_output+0x18>
c000fe9c:	b0 00                	mov    al,0x0
c000fe9e:	e9 6d 04 00 00       	jmp    c0010310 <tcp_output+0x484>
c000fea3:	90                   	nop
c000fea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fea8:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000feac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000feb0:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c000feb3:	0f b7 d8             	movzx  ebx,ax
c000feb6:	0f b7 ca             	movzx  ecx,dx
c000feb9:	39 cb                	cmp    ebx,ecx
c000febb:	76 03                	jbe    c000fec0 <tcp_output+0x34>
c000febd:	89 d0                	mov    eax,edx
c000febf:	90                   	nop
c000fec0:	0f b7 c0             	movzx  eax,ax
c000fec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fec7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fecb:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fece:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fed6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fed9:	0f b6 c0             	movzx  eax,al
c000fedc:	83 e0 02             	and    eax,0x2
c000fedf:	74 4f                	je     c000ff30 <tcp_output+0xa4>
c000fee1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fee6:	74 34                	je     c000ff1c <tcp_output+0x90>
c000fee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	50                   	push   eax
c000fef6:	e8 11 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fefb:	83 c4 10             	add    esp,0x10
c000fefe:	89 c2                	mov    edx,eax
c000ff00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff04:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000ff07:	29 c2                	sub    edx,eax
c000ff09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ff10:	0f b7 c0             	movzx  eax,ax
c000ff13:	01 d0                	add    eax,edx
c000ff15:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000ff19:	73 15                	jae    c000ff30 <tcp_output+0xa4>
c000ff1b:	90                   	nop
c000ff1c:	83 ec 0c             	sub    esp,0xc
c000ff1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ff23:	e8 54 fc ff ff       	call   c000fb7c <tcp_send_empty_ack>
c000ff28:	83 c4 10             	add    esp,0x10
c000ff2b:	e9 e0 03 00 00       	jmp    c0010310 <tcp_output+0x484>
c000ff30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff34:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ff37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff3b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ff40:	0f 84 ea 02 00 00    	je     c0010230 <tcp_output+0x3a4>
c000ff46:	eb 0c                	jmp    c000ff54 <tcp_output+0xc8>
c000ff48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff52:	66 90                	xchg   ax,ax
c000ff54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff58:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff5a:	85 c0                	test   eax,eax
c000ff5c:	75 ea                	jne    c000ff48 <tcp_output+0xbc>
c000ff5e:	e9 cd 02 00 00       	jmp    c0010230 <tcp_output+0x3a4>
c000ff63:	90                   	nop
c000ff64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff6b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ff6f:	0f b7 c0             	movzx  eax,ax
c000ff72:	83 ec 0c             	sub    esp,0xc
c000ff75:	50                   	push   eax
c000ff76:	e8 6d 0c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ff7b:	83 c4 10             	add    esp,0x10
c000ff7e:	0f b7 c0             	movzx  eax,ax
c000ff81:	83 e0 04             	and    eax,0x4
c000ff84:	74 16                	je     c000ff9c <tcp_output+0x110>
c000ff86:	83 ec 08             	sub    esp,0x8
c000ff89:	68 33 0a 03 c0       	push   0xc0030a33
c000ff8e:	68 26 fb 02 c0       	push   0xc002fb26
c000ff93:	e8 0c fc 00 00       	call   c001fba4 <CPrintf>
c000ff98:	83 c4 10             	add    esp,0x10
c000ff9b:	90                   	nop
c000ff9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffa0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ffa3:	85 c0                	test   eax,eax
c000ffa5:	74 45                	je     c000ffec <tcp_output+0x160>
c000ffa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ffae:	0f b6 c0             	movzx  eax,al
c000ffb1:	83 e0 44             	and    eax,0x44
c000ffb4:	75 36                	jne    c000ffec <tcp_output+0x160>
c000ffb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffba:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffbd:	85 c0                	test   eax,eax
c000ffbf:	74 33                	je     c000fff4 <tcp_output+0x168>
c000ffc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffc5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffc8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffca:	85 c0                	test   eax,eax
c000ffcc:	75 1e                	jne    c000ffec <tcp_output+0x160>
c000ffce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffd2:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffd5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ffd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffdc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffdf:	0f b7 d2             	movzx  edx,dx
c000ffe2:	0f b7 c0             	movzx  eax,ax
c000ffe5:	39 c2                	cmp    edx,eax
c000ffe7:	72 0b                	jb     c000fff4 <tcp_output+0x168>
c000ffe9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffec:	b8 01 00 00 00       	mov    eax,0x1
c000fff1:	eb 09                	jmp    c000fffc <tcp_output+0x170>
c000fff3:	90                   	nop
c000fff4:	b8 00 00 00 00       	mov    eax,0x0
c000fff9:	8d 76 00             	lea    esi,[esi+0x0]
c000fffc:	85 c0                	test   eax,eax
c000fffe:	75 18                	jne    c0010018 <tcp_output+0x18c>
c0010000:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010004:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010007:	0f b6 c0             	movzx  eax,al
c001000a:	25 a0 00 00 00       	and    eax,0xa0
c001000f:	0f 84 5b 02 00 00    	je     c0010270 <tcp_output+0x3e4>
c0010015:	8d 76 00             	lea    esi,[esi+0x0]
c0010018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001001c:	8b 10                	mov    edx,DWORD PTR [eax]
c001001e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010022:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010025:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010029:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001002c:	83 f8 02             	cmp    eax,0x2
c001002f:	74 3f                	je     c0010070 <tcp_output+0x1e4>
c0010031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010035:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010038:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c001003c:	83 ec 0c             	sub    esp,0xc
c001003f:	6a 10                	push   0x10
c0010041:	e8 a2 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010046:	83 c4 10             	add    esp,0x10
c0010049:	89 c1                	mov    ecx,eax
c001004b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001004f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010052:	89 d8                	mov    eax,ebx
c0010054:	09 c8                	or     eax,ecx
c0010056:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c001005a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001005e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010061:	83 e0 fc             	and    eax,0xfffffffc
c0010064:	88 c2                	mov    dl,al
c0010066:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001006a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001006d:	8d 76 00             	lea    esi,[esi+0x0]
c0010070:	83 ec 08             	sub    esp,0x8
c0010073:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010077:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001007b:	e8 e0 fb ff ff       	call   c000fc60 <tcp_output_segment>
c0010080:	83 c4 10             	add    esp,0x10
c0010083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010087:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001008a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001008d:	83 ec 0c             	sub    esp,0xc
c0010090:	50                   	push   eax
c0010091:	e8 76 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010096:	83 c4 10             	add    esp,0x10
c0010099:	89 c3                	mov    ebx,eax
c001009b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001009f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100a2:	0f b7 f0             	movzx  esi,ax
c00100a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100ac:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00100b0:	0f b7 c0             	movzx  eax,ax
c00100b3:	83 ec 0c             	sub    esp,0xc
c00100b6:	50                   	push   eax
c00100b7:	e8 2c 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	0f b7 c0             	movzx  eax,ax
c00100c2:	83 e0 03             	and    eax,0x3
c00100c5:	0f 95 c0             	setne  al
c00100c8:	0f b6 c0             	movzx  eax,al
c00100cb:	01 f0                	add    eax,esi
c00100cd:	01 d8                	add    eax,ebx
c00100cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d7:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00100da:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00100de:	79 0c                	jns    c00100ec <tcp_output+0x260>
c00100e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100e8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c00100eb:	90                   	nop
c00100ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100f3:	0f b7 d8             	movzx  ebx,ax
c00100f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100fd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010101:	0f b7 c0             	movzx  eax,ax
c0010104:	83 ec 0c             	sub    esp,0xc
c0010107:	50                   	push   eax
c0010108:	e8 db 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001010d:	83 c4 10             	add    esp,0x10
c0010110:	0f b7 c0             	movzx  eax,ax
c0010113:	83 e0 03             	and    eax,0x3
c0010116:	0f 95 c0             	setne  al
c0010119:	0f b6 c0             	movzx  eax,al
c001011c:	01 d8                	add    eax,ebx
c001011e:	85 c0                	test   eax,eax
c0010120:	0f 8e ee 00 00 00    	jle    c0010214 <tcp_output+0x388>
c0010126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001012a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010130:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010134:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010137:	85 c0                	test   eax,eax
c0010139:	75 19                	jne    c0010154 <tcp_output+0x2c8>
c001013b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001013f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010143:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010146:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001014a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001014e:	e9 d1 00 00 00       	jmp    c0010224 <tcp_output+0x398>
c0010153:	90                   	nop
c0010154:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010158:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001015b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001015e:	83 ec 0c             	sub    esp,0xc
c0010161:	50                   	push   eax
c0010162:	e8 a5 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010167:	83 c4 10             	add    esp,0x10
c001016a:	89 c3                	mov    ebx,eax
c001016c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010170:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010173:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010176:	83 ec 0c             	sub    esp,0xc
c0010179:	50                   	push   eax
c001017a:	e8 8d 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001017f:	83 c4 10             	add    esp,0x10
c0010182:	29 c3                	sub    ebx,eax
c0010184:	89 d8                	mov    eax,ebx
c0010186:	79 74                	jns    c00101fc <tcp_output+0x370>
c0010188:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001018c:	83 c0 7c             	add    eax,0x7c
c001018f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010193:	eb 0f                	jmp    c00101a4 <tcp_output+0x318>
c0010195:	8d 76 00             	lea    esi,[esi+0x0]
c0010198:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001019c:	8b 00                	mov    eax,DWORD PTR [eax]
c001019e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101a2:	66 90                	xchg   ax,ax
c00101a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00101aa:	85 c0                	test   eax,eax
c00101ac:	74 36                	je     c00101e4 <tcp_output+0x358>
c00101ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00101b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101ba:	83 ec 0c             	sub    esp,0xc
c00101bd:	50                   	push   eax
c00101be:	e8 49 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00101c3:	83 c4 10             	add    esp,0x10
c00101c6:	89 c3                	mov    ebx,eax
c00101c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101d2:	83 ec 0c             	sub    esp,0xc
c00101d5:	50                   	push   eax
c00101d6:	e8 31 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	29 c3                	sub    ebx,eax
c00101e0:	89 d8                	mov    eax,ebx
c00101e2:	78 b4                	js     c0010198 <tcp_output+0x30c>
c00101e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00101ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ee:	89 10                	mov    DWORD PTR [eax],edx
c00101f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101f8:	89 10                	mov    DWORD PTR [eax],edx
c00101fa:	eb 28                	jmp    c0010224 <tcp_output+0x398>
c00101fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010200:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010204:	89 10                	mov    DWORD PTR [eax],edx
c0010206:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001020a:	8b 00                	mov    eax,DWORD PTR [eax]
c001020c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010210:	eb 12                	jmp    c0010224 <tcp_output+0x398>
c0010212:	66 90                	xchg   ax,ax
c0010214:	83 ec 0c             	sub    esp,0xc
c0010217:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001021b:	e8 b4 9d ff ff       	call   c0009fd4 <tcp_seg_free>
c0010220:	83 c4 10             	add    esp,0x10
c0010223:	90                   	nop
c0010224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010228:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001022b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001022f:	90                   	nop
c0010230:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010235:	74 3d                	je     c0010274 <tcp_output+0x3e8>
c0010237:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001023b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001023e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010241:	83 ec 0c             	sub    esp,0xc
c0010244:	50                   	push   eax
c0010245:	e8 c2 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001024a:	83 c4 10             	add    esp,0x10
c001024d:	89 c2                	mov    edx,eax
c001024f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010253:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c0010256:	29 c2                	sub    edx,eax
c0010258:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001025c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001025f:	0f b7 c0             	movzx  eax,ax
c0010262:	01 d0                	add    eax,edx
c0010264:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010268:	0f 83 f6 fc ff ff    	jae    c000ff64 <tcp_output+0xd8>
c001026e:	eb 04                	jmp    c0010274 <tcp_output+0x3e8>
c0010270:	90                   	nop
c0010271:	8d 76 00             	lea    esi,[esi+0x0]
c0010274:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010278:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001027b:	85 c0                	test   eax,eax
c001027d:	75 0d                	jne    c001028c <tcp_output+0x400>
c001027f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010283:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010289:	8d 76 00             	lea    esi,[esi+0x0]
c001028c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010291:	74 65                	je     c00102f8 <tcp_output+0x46c>
c0010293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010297:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c001029d:	0f b6 c0             	movzx  eax,al
c00102a0:	85 c0                	test   eax,eax
c00102a2:	75 54                	jne    c00102f8 <tcp_output+0x46c>
c00102a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102ae:	83 ec 0c             	sub    esp,0xc
c00102b1:	50                   	push   eax
c00102b2:	e8 55 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102b7:	83 c4 10             	add    esp,0x10
c00102ba:	89 c2                	mov    edx,eax
c00102bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102c0:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00102c3:	29 c2                	sub    edx,eax
c00102c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102cc:	0f b7 c0             	movzx  eax,ax
c00102cf:	01 c2                	add    edx,eax
c00102d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d5:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00102d8:	0f b7 c0             	movzx  eax,ax
c00102db:	39 c2                	cmp    edx,eax
c00102dd:	76 19                	jbe    c00102f8 <tcp_output+0x46c>
c00102df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102e3:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c00102ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102f1:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c00102f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102fc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00102ff:	83 e0 7f             	and    eax,0x7f
c0010302:	88 c2                	mov    dl,al
c0010304:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010308:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001030b:	b0 00                	mov    al,0x0
c001030d:	8d 76 00             	lea    esi,[esi+0x0]
c0010310:	83 c4 24             	add    esp,0x24
c0010313:	5b                   	pop    ebx
c0010314:	5e                   	pop    esi
c0010315:	c3                   	ret    
c0010316:	66 90                	xchg   ax,ax

c0010318 <tcp_rst>:
c0010318:	83 ec 2c             	sub    esp,0x2c
c001031b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001031f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010323:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010328:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001032d:	83 ec 04             	sub    esp,0x4
c0010330:	6a 00                	push   0x0
c0010332:	6a 14                	push   0x14
c0010334:	6a 01                	push   0x1
c0010336:	e8 f9 81 ff ff       	call   c0008534 <pbuf_alloc>
c001033b:	83 c4 10             	add    esp,0x10
c001033e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010342:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010347:	0f 84 37 01 00 00    	je     c0010484 <tcp_rst+0x16c>
c001034d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010351:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0010355:	0f b7 c0             	movzx  eax,ax
c0010358:	83 f8 13             	cmp    eax,0x13
c001035b:	77 17                	ja     c0010374 <tcp_rst+0x5c>
c001035d:	83 ec 08             	sub    esp,0x8
c0010360:	68 40 07 03 c0       	push   0xc0030740
c0010365:	68 26 fb 02 c0       	push   0xc002fb26
c001036a:	e8 35 f8 00 00       	call   c001fba4 <CPrintf>
c001036f:	83 c4 10             	add    esp,0x10
c0010372:	66 90                	xchg   ax,ax
c0010374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001037b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001037f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0010384:	83 ec 0c             	sub    esp,0xc
c0010387:	50                   	push   eax
c0010388:	e8 5b 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010394:	66 89 02             	mov    WORD PTR [edx],ax
c0010397:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c001039c:	83 ec 0c             	sub    esp,0xc
c001039f:	50                   	push   eax
c00103a0:	e8 43 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00103a5:	83 c4 10             	add    esp,0x10
c00103a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00103ac:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00103b0:	83 ec 0c             	sub    esp,0xc
c00103b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00103b7:	e8 50 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103bc:	83 c4 10             	add    esp,0x10
c00103bf:	89 c2                	mov    edx,eax
c00103c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00103c8:	83 ec 0c             	sub    esp,0xc
c00103cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00103cf:	e8 38 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103d4:	83 c4 10             	add    esp,0x10
c00103d7:	89 c2                	mov    edx,eax
c00103d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103dd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00103e0:	83 ec 0c             	sub    esp,0xc
c00103e3:	68 14 50 00 00       	push   0x5014
c00103e8:	e8 fb 07 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00103ed:	83 c4 10             	add    esp,0x10
c00103f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00103f4:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00103f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103fc:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c0010402:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010406:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c001040c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010410:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c0010416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001041a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001041d:	0f b7 c0             	movzx  eax,ax
c0010420:	83 ec 0c             	sub    esp,0xc
c0010423:	50                   	push   eax
c0010424:	6a 06                	push   0x6
c0010426:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001042a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001042e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010432:	e8 41 2d 00 00       	call   c0013178 <inet_chksum_pseudo>
c0010437:	83 c4 20             	add    esp,0x20
c001043a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001043e:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010442:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010448:	83 c0 01             	add    eax,0x1
c001044b:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010451:	83 ec 08             	sub    esp,0x8
c0010454:	6a 06                	push   0x6
c0010456:	6a 00                	push   0x0
c0010458:	68 ff 00 00 00       	push   0xff
c001045d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010461:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010465:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010469:	e8 3e 39 00 00       	call   c0013dac <ip_output>
c001046e:	83 c4 20             	add    esp,0x20
c0010471:	83 ec 0c             	sub    esp,0xc
c0010474:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010478:	e8 df 7e ff ff       	call   c000835c <pbuf_free>
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	eb 06                	jmp    c0010488 <tcp_rst+0x170>
c0010482:	66 90                	xchg   ax,ax
c0010484:	90                   	nop
c0010485:	8d 76 00             	lea    esi,[esi+0x0]
c0010488:	83 c4 2c             	add    esp,0x2c
c001048b:	c3                   	ret    

c001048c <tcp_rexmit_rto>:
c001048c:	83 ec 1c             	sub    esp,0x1c
c001048f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010493:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010496:	85 c0                	test   eax,eax
c0010498:	74 7a                	je     c0010514 <tcp_rexmit_rto+0x88>
c001049a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001049e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00104a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104a5:	eb 0d                	jmp    c00104b4 <tcp_rexmit_rto+0x28>
c00104a7:	90                   	nop
c00104a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00104ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104b2:	66 90                	xchg   ax,ax
c00104b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00104ba:	85 c0                	test   eax,eax
c00104bc:	75 ea                	jne    c00104a8 <tcp_rexmit_rto+0x1c>
c00104be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104c2:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c00104c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104c9:	89 10                	mov    DWORD PTR [eax],edx
c00104cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104cf:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c00104d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104d6:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00104d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104dd:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c00104e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104e8:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00104eb:	83 c0 01             	add    eax,0x1
c00104ee:	88 c2                	mov    dl,al
c00104f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104f4:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00104f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104fb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010502:	83 ec 0c             	sub    esp,0xc
c0010505:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010509:	e8 7e f9 ff ff       	call   c000fe8c <tcp_output>
c001050e:	83 c4 10             	add    esp,0x10
c0010511:	eb 05                	jmp    c0010518 <tcp_rexmit_rto+0x8c>
c0010513:	90                   	nop
c0010514:	90                   	nop
c0010515:	8d 76 00             	lea    esi,[esi+0x0]
c0010518:	83 c4 1c             	add    esp,0x1c
c001051b:	c3                   	ret    

c001051c <tcp_rexmit>:
c001051c:	53                   	push   ebx
c001051d:	83 ec 18             	sub    esp,0x18
c0010520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010524:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010527:	85 c0                	test   eax,eax
c0010529:	0f 84 a9 00 00 00    	je     c00105d8 <tcp_rexmit+0xbc>
c001052f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010533:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010536:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001053a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001053e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010544:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001054b:	83 c0 78             	add    eax,0x78
c001054e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010552:	eb 0c                	jmp    c0010560 <tcp_rexmit+0x44>
c0010554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010558:	8b 00                	mov    eax,DWORD PTR [eax]
c001055a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001055e:	66 90                	xchg   ax,ax
c0010560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010564:	8b 00                	mov    eax,DWORD PTR [eax]
c0010566:	85 c0                	test   eax,eax
c0010568:	74 36                	je     c00105a0 <tcp_rexmit+0x84>
c001056a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001056e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010570:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010576:	83 ec 0c             	sub    esp,0xc
c0010579:	50                   	push   eax
c001057a:	e8 8d 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	89 c3                	mov    ebx,eax
c0010584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010588:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001058b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001058e:	83 ec 0c             	sub    esp,0xc
c0010591:	50                   	push   eax
c0010592:	e8 75 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	29 c3                	sub    ebx,eax
c001059c:	89 d8                	mov    eax,ebx
c001059e:	78 b4                	js     c0010554 <tcp_rexmit+0x38>
c00105a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00105a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105aa:	89 10                	mov    DWORD PTR [eax],edx
c00105ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105b4:	89 10                	mov    DWORD PTR [eax],edx
c00105b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105ba:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00105bd:	83 c0 01             	add    eax,0x1
c00105c0:	88 c2                	mov    dl,al
c00105c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105c6:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00105c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105cd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00105d4:	eb 06                	jmp    c00105dc <tcp_rexmit+0xc0>
c00105d6:	66 90                	xchg   ax,ax
c00105d8:	90                   	nop
c00105d9:	8d 76 00             	lea    esi,[esi+0x0]
c00105dc:	83 c4 18             	add    esp,0x18
c00105df:	5b                   	pop    ebx
c00105e0:	c3                   	ret    
c00105e1:	8d 76 00             	lea    esi,[esi+0x0]

c00105e4 <tcp_rexmit_fast>:
c00105e4:	83 ec 0c             	sub    esp,0xc
c00105e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105eb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00105ee:	85 c0                	test   eax,eax
c00105f0:	0f 84 ca 00 00 00    	je     c00106c0 <tcp_rexmit_fast+0xdc>
c00105f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00105fd:	0f b6 c0             	movzx  eax,al
c0010600:	83 e0 04             	and    eax,0x4
c0010603:	0f 85 b7 00 00 00    	jne    c00106c0 <tcp_rexmit_fast+0xdc>
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010610:	e8 07 ff ff ff       	call   c001051c <tcp_rexmit>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010624:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010627:	0f b7 d2             	movzx  edx,dx
c001062a:	0f b7 c0             	movzx  eax,ax
c001062d:	39 c2                	cmp    edx,eax
c001062f:	76 17                	jbe    c0010648 <tcp_rexmit_fast+0x64>
c0010631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010635:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010638:	0f b7 c0             	movzx  eax,ax
c001063b:	d1 e8                	shr    eax,1
c001063d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010641:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010645:	eb 19                	jmp    c0010660 <tcp_rexmit_fast+0x7c>
c0010647:	90                   	nop
c0010648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064c:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010650:	0f b7 c0             	movzx  eax,ax
c0010653:	d1 e8                	shr    eax,1
c0010655:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010659:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c001065d:	8d 76 00             	lea    esi,[esi+0x0]
c0010660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010664:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c0010667:	0f b7 d0             	movzx  edx,ax
c001066a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010671:	0f b7 c0             	movzx  eax,ax
c0010674:	01 c0                	add    eax,eax
c0010676:	39 c2                	cmp    edx,eax
c0010678:	7d 12                	jge    c001068c <tcp_rexmit_fast+0xa8>
c001067a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010681:	d1 e0                	shl    eax,1
c0010683:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010687:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c001068b:	90                   	nop
c001068c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010690:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c0010693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010697:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001069a:	89 c1                	mov    ecx,eax
c001069c:	d1 e1                	shl    ecx,1
c001069e:	01 c8                	add    eax,ecx
c00106a0:	01 d0                	add    eax,edx
c00106a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00106a6:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c00106aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ae:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00106b1:	83 c8 04             	or     eax,0x4
c00106b4:	88 c2                	mov    dl,al
c00106b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ba:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00106bd:	8d 76 00             	lea    esi,[esi+0x0]
c00106c0:	90                   	nop
c00106c1:	83 c4 0c             	add    esp,0xc
c00106c4:	c3                   	ret    
c00106c5:	8d 76 00             	lea    esi,[esi+0x0]

c00106c8 <tcp_keepalive>:
c00106c8:	83 ec 1c             	sub    esp,0x1c
c00106cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106cf:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00106d2:	83 e8 01             	sub    eax,0x1
c00106d5:	83 ec 0c             	sub    esp,0xc
c00106d8:	50                   	push   eax
c00106d9:	e8 2e 05 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00106de:	83 c4 10             	add    esp,0x10
c00106e1:	50                   	push   eax
c00106e2:	6a 00                	push   0x0
c00106e4:	6a 00                	push   0x0
c00106e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106ea:	e8 f1 e2 ff ff       	call   c000e9e0 <tcp_output_alloc_header>
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00106fb:	0f 84 87 00 00 00    	je     c0010788 <tcp_keepalive+0xc0>
c0010701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010708:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001070c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010713:	0f b7 d0             	movzx  edx,ax
c0010716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001071a:	8d 48 04             	lea    ecx,[eax+0x4]
c001071d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010721:	83 ec 0c             	sub    esp,0xc
c0010724:	52                   	push   edx
c0010725:	6a 06                	push   0x6
c0010727:	51                   	push   ecx
c0010728:	50                   	push   eax
c0010729:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001072d:	e8 46 2a 00 00       	call   c0013178 <inet_chksum_pseudo>
c0010732:	83 c4 20             	add    esp,0x20
c0010735:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010739:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c001073d:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010743:	83 c0 01             	add    eax,0x1
c0010746:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c001074c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010750:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010753:	0f b6 d0             	movzx  edx,al
c0010756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075a:	8d 48 04             	lea    ecx,[eax+0x4]
c001075d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010761:	83 ec 08             	sub    esp,0x8
c0010764:	6a 06                	push   0x6
c0010766:	6a 00                	push   0x0
c0010768:	52                   	push   edx
c0010769:	51                   	push   ecx
c001076a:	50                   	push   eax
c001076b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001076f:	e8 38 36 00 00       	call   c0013dac <ip_output>
c0010774:	83 c4 20             	add    esp,0x20
c0010777:	83 ec 0c             	sub    esp,0xc
c001077a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001077e:	e8 d9 7b ff ff       	call   c000835c <pbuf_free>
c0010783:	83 c4 10             	add    esp,0x10
c0010786:	eb 04                	jmp    c001078c <tcp_keepalive+0xc4>
c0010788:	90                   	nop
c0010789:	8d 76 00             	lea    esi,[esi+0x0]
c001078c:	83 c4 1c             	add    esp,0x1c
c001078f:	c3                   	ret    

c0010790 <tcp_zero_window_probe>:
c0010790:	53                   	push   ebx
c0010791:	83 ec 28             	sub    esp,0x28
c0010794:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010798:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001079b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001079f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00107a4:	75 0e                	jne    c00107b4 <tcp_zero_window_probe+0x24>
c00107a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107aa:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00107ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00107b1:	8d 76 00             	lea    esi,[esi+0x0]
c00107b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00107b9:	0f 84 95 01 00 00    	je     c0010954 <tcp_zero_window_probe+0x1c4>
c00107bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107c6:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00107ca:	0f b7 c0             	movzx  eax,ax
c00107cd:	83 ec 0c             	sub    esp,0xc
c00107d0:	50                   	push   eax
c00107d1:	e8 12 04 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00107d6:	83 c4 10             	add    esp,0x10
c00107d9:	0f b7 c0             	movzx  eax,ax
c00107dc:	83 e0 01             	and    eax,0x1
c00107df:	74 17                	je     c00107f8 <tcp_zero_window_probe+0x68>
c00107e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00107e8:	0f b7 c0             	movzx  eax,ax
c00107eb:	85 c0                	test   eax,eax
c00107ed:	75 09                	jne    c00107f8 <tcp_zero_window_probe+0x68>
c00107ef:	b8 01 00 00 00       	mov    eax,0x1
c00107f4:	eb 0a                	jmp    c0010800 <tcp_zero_window_probe+0x70>
c00107f6:	66 90                	xchg   ax,ax
c00107f8:	b8 00 00 00 00       	mov    eax,0x0
c00107fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010800:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0010804:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010809:	85 c0                	test   eax,eax
c001080b:	0f 94 c0             	sete   al
c001080e:	0f b6 c0             	movzx  eax,al
c0010811:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0010816:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001081a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001081d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010820:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010825:	52                   	push   edx
c0010826:	50                   	push   eax
c0010827:	6a 00                	push   0x0
c0010829:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001082d:	e8 ae e1 ff ff       	call   c000e9e0 <tcp_output_alloc_header>
c0010832:	83 c4 10             	add    esp,0x10
c0010835:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010839:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001083e:	0f 84 14 01 00 00    	je     c0010958 <tcp_zero_window_probe+0x1c8>
c0010844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001084b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001084f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010854:	85 c0                	test   eax,eax
c0010856:	74 28                	je     c0010880 <tcp_zero_window_probe+0xf0>
c0010858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010860:	80 e4 c0             	and    ah,0xc0
c0010863:	89 c3                	mov    ebx,eax
c0010865:	83 ec 0c             	sub    esp,0xc
c0010868:	6a 11                	push   0x11
c001086a:	e8 79 03 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001086f:	83 c4 10             	add    esp,0x10
c0010872:	09 d8                	or     eax,ebx
c0010874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010878:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c001087c:	eb 5a                	jmp    c00108d8 <tcp_zero_window_probe+0x148>
c001087e:	66 90                	xchg   ax,ax
c0010880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010884:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010887:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001088a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001088e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010895:	83 c0 14             	add    eax,0x14
c0010898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001089c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108a0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00108a4:	0f b7 c0             	movzx  eax,ax
c00108a7:	83 ec 0c             	sub    esp,0xc
c00108aa:	50                   	push   eax
c00108ab:	e8 38 03 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00108b0:	83 c4 10             	add    esp,0x10
c00108b3:	0f b7 c0             	movzx  eax,ax
c00108b6:	c1 e8 0c             	shr    eax,0xc
c00108b9:	c1 e0 02             	shl    eax,0x2
c00108bc:	0f b7 d0             	movzx  edx,ax
c00108bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108c6:	52                   	push   edx
c00108c7:	6a 01                	push   0x1
c00108c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00108cd:	50                   	push   eax
c00108ce:	e8 29 87 ff ff       	call   c0008ffc <pbuf_copy_partial>
c00108d3:	83 c4 10             	add    esp,0x10
c00108d6:	66 90                	xchg   ax,ax
c00108d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108df:	0f b7 d0             	movzx  edx,ax
c00108e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108e6:	8d 48 04             	lea    ecx,[eax+0x4]
c00108e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108ed:	83 ec 0c             	sub    esp,0xc
c00108f0:	52                   	push   edx
c00108f1:	6a 06                	push   0x6
c00108f3:	51                   	push   ecx
c00108f4:	50                   	push   eax
c00108f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00108f9:	e8 7a 28 00 00       	call   c0013178 <inet_chksum_pseudo>
c00108fe:	83 c4 20             	add    esp,0x20
c0010901:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010905:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010909:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001090f:	83 c0 01             	add    eax,0x1
c0010912:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001091c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001091f:	0f b6 d0             	movzx  edx,al
c0010922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010926:	8d 48 04             	lea    ecx,[eax+0x4]
c0010929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001092d:	83 ec 08             	sub    esp,0x8
c0010930:	6a 06                	push   0x6
c0010932:	6a 00                	push   0x0
c0010934:	52                   	push   edx
c0010935:	51                   	push   ecx
c0010936:	50                   	push   eax
c0010937:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001093b:	e8 6c 34 00 00       	call   c0013dac <ip_output>
c0010940:	83 c4 20             	add    esp,0x20
c0010943:	83 ec 0c             	sub    esp,0xc
c0010946:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001094a:	e8 0d 7a ff ff       	call   c000835c <pbuf_free>
c001094f:	83 c4 10             	add    esp,0x10
c0010952:	eb 08                	jmp    c001095c <tcp_zero_window_probe+0x1cc>
c0010954:	90                   	nop
c0010955:	eb 05                	jmp    c001095c <tcp_zero_window_probe+0x1cc>
c0010957:	90                   	nop
c0010958:	90                   	nop
c0010959:	8d 76 00             	lea    esi,[esi+0x0]
c001095c:	83 c4 28             	add    esp,0x28
c001095f:	5b                   	pop    ebx
c0010960:	c3                   	ret    
c0010961:	66 90                	xchg   ax,ax
c0010963:	90                   	nop

c0010964 <sys_timeout>:
c0010964:	83 ec 1c             	sub    esp,0x1c
c0010967:	83 ec 0c             	sub    esp,0xc
c001096a:	6a 0b                	push   0xb
c001096c:	e8 03 70 ff ff       	call   c0007974 <memp_malloc>
c0010971:	83 c4 10             	add    esp,0x10
c0010974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010978:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001097d:	75 25                	jne    c00109a4 <sys_timeout+0x40>
c001097f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010984:	0f 85 3e 01 00 00    	jne    c0010ac8 <sys_timeout+0x164>
c001098a:	83 ec 08             	sub    esp,0x8
c001098d:	68 4c 0a 03 c0       	push   0xc0030a4c
c0010992:	68 26 fb 02 c0       	push   0xc002fb26
c0010997:	e8 08 f2 00 00       	call   c001fba4 <CPrintf>
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	e9 24 01 00 00       	jmp    c0010ac8 <sys_timeout+0x164>
c00109a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00109ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00109b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00109b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00109c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00109cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109cf:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109d4:	85 c0                	test   eax,eax
c00109d6:	75 10                	jne    c00109e8 <sys_timeout+0x84>
c00109d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109dc:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c00109e1:	e9 e6 00 00 00       	jmp    c0010acc <sys_timeout+0x168>
c00109e6:	66 90                	xchg   ax,ax
c00109e8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109f0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00109f4:	73 2e                	jae    c0010a24 <sys_timeout+0xc0>
c00109f6:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109fe:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a03:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010a07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a0a:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010a10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a14:	89 10                	mov    DWORD PTR [eax],edx
c0010a16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a1a:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010a1f:	e9 a8 00 00 00       	jmp    c0010acc <sys_timeout+0x168>
c0010a24:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a2d:	e9 86 00 00 00       	jmp    c0010ab8 <sys_timeout+0x154>
c0010a32:	66 90                	xchg   ax,ax
c0010a34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a42:	29 c2                	sub    edx,eax
c0010a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a51:	85 c0                	test   eax,eax
c0010a53:	74 17                	je     c0010a6c <sys_timeout+0x108>
c0010a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a5b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a65:	39 c2                	cmp    edx,eax
c0010a67:	76 43                	jbe    c0010aac <sys_timeout+0x148>
c0010a69:	8d 76 00             	lea    esi,[esi+0x0]
c0010a6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a72:	85 c0                	test   eax,eax
c0010a74:	74 1e                	je     c0010a94 <sys_timeout+0x130>
c0010a76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a7c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010a7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a83:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a8c:	29 d1                	sub    ecx,edx
c0010a8e:	89 ca                	mov    edx,ecx
c0010a90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a93:	90                   	nop
c0010a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a98:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a9e:	89 10                	mov    DWORD PTR [eax],edx
c0010aa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010aa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aa8:	89 10                	mov    DWORD PTR [eax],edx
c0010aaa:	eb 20                	jmp    c0010acc <sys_timeout+0x168>
c0010aac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ab6:	66 90                	xchg   ax,ax
c0010ab8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010abd:	0f 85 71 ff ff ff    	jne    c0010a34 <sys_timeout+0xd0>
c0010ac3:	eb 07                	jmp    c0010acc <sys_timeout+0x168>
c0010ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ac8:	90                   	nop
c0010ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0010acc:	83 c4 1c             	add    esp,0x1c
c0010acf:	c3                   	ret    

c0010ad0 <tcpip_tcp_timer>:
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	e8 34 a5 ff ff       	call   c000b00c <tcp_tmr>
c0010ad8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010add:	85 c0                	test   eax,eax
c0010adf:	75 0b                	jne    c0010aec <tcpip_tcp_timer+0x1c>
c0010ae1:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010ae6:	85 c0                	test   eax,eax
c0010ae8:	74 1e                	je     c0010b08 <tcpip_tcp_timer+0x38>
c0010aea:	66 90                	xchg   ax,ax
c0010aec:	83 ec 04             	sub    esp,0x4
c0010aef:	6a 00                	push   0x0
c0010af1:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010af6:	68 fa 00 00 00       	push   0xfa
c0010afb:	e8 64 fe ff ff       	call   c0010964 <sys_timeout>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	eb 0f                	jmp    c0010b14 <tcpip_tcp_timer+0x44>
c0010b05:	8d 76 00             	lea    esi,[esi+0x0]
c0010b08:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	90                   	nop
c0010b15:	83 c4 0c             	add    esp,0xc
c0010b18:	c3                   	ret    
c0010b19:	8d 76 00             	lea    esi,[esi+0x0]

c0010b1c <tcp_timer_needed>:
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010b24:	85 c0                	test   eax,eax
c0010b26:	75 38                	jne    c0010b60 <tcp_timer_needed+0x44>
c0010b28:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010b2d:	85 c0                	test   eax,eax
c0010b2f:	75 0b                	jne    c0010b3c <tcp_timer_needed+0x20>
c0010b31:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010b36:	85 c0                	test   eax,eax
c0010b38:	74 26                	je     c0010b60 <tcp_timer_needed+0x44>
c0010b3a:	66 90                	xchg   ax,ax
c0010b3c:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010b46:	83 ec 04             	sub    esp,0x4
c0010b49:	6a 00                	push   0x0
c0010b4b:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010b50:	68 fa 00 00 00       	push   0xfa
c0010b55:	e8 0a fe ff ff       	call   c0010964 <sys_timeout>
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b60:	90                   	nop
c0010b61:	83 c4 0c             	add    esp,0xc
c0010b64:	c3                   	ret    
c0010b65:	8d 76 00             	lea    esi,[esi+0x0]

c0010b68 <ip_reass_timer>:
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	e8 f0 3a 00 00       	call   c0014660 <ip_reass_tmr>
c0010b70:	83 ec 04             	sub    esp,0x4
c0010b73:	6a 00                	push   0x0
c0010b75:	68 68 0b 01 c0       	push   0xc0010b68
c0010b7a:	68 e8 03 00 00       	push   0x3e8
c0010b7f:	e8 e0 fd ff ff       	call   c0010964 <sys_timeout>
c0010b84:	83 c4 10             	add    esp,0x10
c0010b87:	90                   	nop
c0010b88:	83 c4 0c             	add    esp,0xc
c0010b8b:	c3                   	ret    

c0010b8c <arp_timer>:
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	e8 60 0d 00 00       	call   c00118f4 <etharp_tmr>
c0010b94:	83 ec 04             	sub    esp,0x4
c0010b97:	6a 00                	push   0x0
c0010b99:	68 8c 0b 01 c0       	push   0xc0010b8c
c0010b9e:	68 88 13 00 00       	push   0x1388
c0010ba3:	e8 bc fd ff ff       	call   c0010964 <sys_timeout>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	90                   	nop
c0010bac:	83 c4 0c             	add    esp,0xc
c0010baf:	c3                   	ret    

c0010bb0 <sys_timeouts_init>:
c0010bb0:	83 ec 0c             	sub    esp,0xc
c0010bb3:	83 ec 04             	sub    esp,0x4
c0010bb6:	6a 00                	push   0x0
c0010bb8:	68 68 0b 01 c0       	push   0xc0010b68
c0010bbd:	68 e8 03 00 00       	push   0x3e8
c0010bc2:	e8 9d fd ff ff       	call   c0010964 <sys_timeout>
c0010bc7:	83 c4 10             	add    esp,0x10
c0010bca:	83 ec 04             	sub    esp,0x4
c0010bcd:	6a 00                	push   0x0
c0010bcf:	68 8c 0b 01 c0       	push   0xc0010b8c
c0010bd4:	68 88 13 00 00       	push   0x1388
c0010bd9:	e8 86 fd ff ff       	call   c0010964 <sys_timeout>
c0010bde:	83 c4 10             	add    esp,0x10
c0010be1:	90                   	nop
c0010be2:	83 c4 0c             	add    esp,0xc
c0010be5:	c3                   	ret    
c0010be6:	66 90                	xchg   ax,ax

c0010be8 <sys_untimeout>:
c0010be8:	83 ec 1c             	sub    esp,0x1c
c0010beb:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	0f 84 b4 00 00 00    	je     c0010cac <sys_untimeout+0xc4>
c0010bf8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c09:	e9 8e 00 00 00       	jmp    c0010c9c <sys_untimeout+0xb4>
c0010c0e:	66 90                	xchg   ax,ax
c0010c10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c17:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010c1b:	75 6b                	jne    c0010c88 <sys_untimeout+0xa0>
c0010c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c24:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010c28:	75 5e                	jne    c0010c88 <sys_untimeout+0xa0>
c0010c2a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c2f:	75 0f                	jne    c0010c40 <sys_untimeout+0x58>
c0010c31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c37:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c3c:	eb 0e                	jmp    c0010c4c <sys_untimeout+0x64>
c0010c3e:	66 90                	xchg   ax,ax
c0010c40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c44:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c4a:	89 10                	mov    DWORD PTR [eax],edx
c0010c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c52:	85 c0                	test   eax,eax
c0010c54:	74 1e                	je     c0010c74 <sys_untimeout+0x8c>
c0010c56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c5c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c63:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c6c:	01 ca                	add    edx,ecx
c0010c6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c71:	8d 76 00             	lea    esi,[esi+0x0]
c0010c74:	83 ec 08             	sub    esp,0x8
c0010c77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c7b:	6a 0b                	push   0xb
c0010c7d:	e8 1e 6e ff ff       	call   c0007aa0 <memp_free>
c0010c82:	83 c4 10             	add    esp,0x10
c0010c85:	eb 29                	jmp    c0010cb0 <sys_untimeout+0xc8>
c0010c87:	90                   	nop
c0010c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c9a:	66 90                	xchg   ax,ax
c0010c9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ca1:	0f 85 69 ff ff ff    	jne    c0010c10 <sys_untimeout+0x28>
c0010ca7:	90                   	nop
c0010ca8:	eb 06                	jmp    c0010cb0 <sys_untimeout+0xc8>
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	90                   	nop
c0010cad:	8d 76 00             	lea    esi,[esi+0x0]
c0010cb0:	83 c4 1c             	add    esp,0x1c
c0010cb3:	c3                   	ret    

c0010cb4 <sys_timeouts_mbox_fetch>:
c0010cb4:	83 ec 1c             	sub    esp,0x1c
c0010cb7:	90                   	nop
c0010cb8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cbd:	85 c0                	test   eax,eax
c0010cbf:	75 1f                	jne    c0010ce0 <sys_timeouts_mbox_fetch+0x2c>
c0010cc1:	83 ec 04             	sub    esp,0x4
c0010cc4:	6a 00                	push   0x0
c0010cc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cce:	e8 59 00 ff ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010cd3:	83 c4 10             	add    esp,0x10
c0010cd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cda:	e9 cd 00 00 00       	jmp    c0010dac <sys_timeouts_mbox_fetch+0xf8>
c0010cdf:	90                   	nop
c0010ce0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce8:	85 c0                	test   eax,eax
c0010cea:	74 24                	je     c0010d10 <sys_timeouts_mbox_fetch+0x5c>
c0010cec:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf4:	83 ec 04             	sub    esp,0x4
c0010cf7:	50                   	push   eax
c0010cf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d00:	e8 27 00 ff ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010d05:	83 c4 10             	add    esp,0x10
c0010d08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d0c:	eb 0a                	jmp    c0010d18 <sys_timeouts_mbox_fetch+0x64>
c0010d0e:	66 90                	xchg   ax,ax
c0010d10:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010d18:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010d1d:	75 5d                	jne    c0010d7c <sys_timeouts_mbox_fetch+0xc8>
c0010d1f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d2e:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d45:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d48:	83 ec 08             	sub    esp,0x8
c0010d4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010d4f:	6a 0b                	push   0xb
c0010d51:	e8 4a 6d ff ff       	call   c0007aa0 <memp_free>
c0010d56:	83 c4 10             	add    esp,0x10
c0010d59:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010d5e:	0f 84 54 ff ff ff    	je     c0010cb8 <sys_timeouts_mbox_fetch+0x4>
c0010d64:	83 ec 0c             	sub    esp,0xc
c0010d67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010d6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d6f:	ff d0                	call   eax
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	e9 3f ff ff ff       	jmp    c0010cb8 <sys_timeouts_mbox_fetch+0x4>
c0010d79:	8d 76 00             	lea    esi,[esi+0x0]
c0010d7c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d84:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010d88:	73 16                	jae    c0010da0 <sys_timeouts_mbox_fetch+0xec>
c0010d8a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d8f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d92:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d97:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010d9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d9e:	eb 0c                	jmp    c0010dac <sys_timeouts_mbox_fetch+0xf8>
c0010da0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010da5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dac:	90                   	nop
c0010dad:	83 c4 1c             	add    esp,0x1c
c0010db0:	c3                   	ret    
c0010db1:	66 90                	xchg   ax,ax
c0010db3:	90                   	nop

c0010db4 <udp_input>:
c0010db4:	53                   	push   ebx
c0010db5:	83 ec 28             	sub    esp,0x28
c0010db8:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010dbe:	83 c0 01             	add    eax,0x1
c0010dc1:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010dd9:	0f b7 d8             	movzx  ebx,ax
c0010ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010de0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010de3:	0f b7 c0             	movzx  eax,ax
c0010de6:	83 ec 0c             	sub    esp,0xc
c0010de9:	50                   	push   eax
c0010dea:	e8 f9 fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010def:	83 c4 10             	add    esp,0x10
c0010df2:	0f b7 c0             	movzx  eax,ax
c0010df5:	c1 e8 08             	shr    eax,0x8
c0010df8:	0f b7 c0             	movzx  eax,ax
c0010dfb:	83 e0 0f             	and    eax,0xf
c0010dfe:	83 c0 02             	add    eax,0x2
c0010e01:	c1 e0 02             	shl    eax,0x2
c0010e04:	39 c3                	cmp    ebx,eax
c0010e06:	7c 3c                	jl     c0010e44 <udp_input+0x90>
c0010e08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e0f:	0f b7 c0             	movzx  eax,ax
c0010e12:	83 ec 0c             	sub    esp,0xc
c0010e15:	50                   	push   eax
c0010e16:	e8 cd fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	0f b7 c0             	movzx  eax,ax
c0010e21:	c1 e8 08             	shr    eax,0x8
c0010e24:	83 e0 0f             	and    eax,0xf
c0010e27:	c1 e0 02             	shl    eax,0x2
c0010e2a:	f7 d8                	neg    eax
c0010e2c:	98                   	cwde   
c0010e2d:	83 ec 08             	sub    esp,0x8
c0010e30:	50                   	push   eax
c0010e31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e35:	e8 86 73 ff ff       	call   c00081c0 <pbuf_header>
c0010e3a:	83 c4 10             	add    esp,0x10
c0010e3d:	0f b6 c0             	movzx  eax,al
c0010e40:	85 c0                	test   eax,eax
c0010e42:	74 34                	je     c0010e78 <udp_input+0xc4>
c0010e44:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010e4a:	83 c0 01             	add    eax,0x1
c0010e4d:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010e53:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010e59:	83 c0 01             	add    eax,0x1
c0010e5c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010e62:	83 ec 0c             	sub    esp,0xc
c0010e65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e69:	e8 ee 74 ff ff       	call   c000835c <pbuf_free>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	e9 aa 03 00 00       	jmp    c0011220 <udp_input+0x46c>
c0010e76:	66 90                	xchg   ax,ax
c0010e78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e83:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010e88:	83 ec 08             	sub    esp,0x8
c0010e8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e8f:	50                   	push   eax
c0010e90:	e8 bb 2f 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ea0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010ea3:	0f b7 c0             	movzx  eax,ax
c0010ea6:	83 ec 0c             	sub    esp,0xc
c0010ea9:	50                   	push   eax
c0010eaa:	e8 39 fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010eb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ebb:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010ebf:	0f b7 c0             	movzx  eax,ax
c0010ec2:	83 ec 0c             	sub    esp,0xc
c0010ec5:	50                   	push   eax
c0010ec6:	e8 1d fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010ecb:	83 c4 10             	add    esp,0x10
c0010ece:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010ed3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010edb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010ee0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ee8:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010eed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ef1:	e9 0a 01 00 00       	jmp    c0011000 <udp_input+0x24c>
c0010ef6:	66 90                	xchg   ax,ax
c0010ef8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010efd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f01:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010f05:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010f0a:	0f b7 c0             	movzx  eax,ax
c0010f0d:	39 c2                	cmp    edx,eax
c0010f0f:	75 57                	jne    c0010f68 <udp_input+0x1b4>
c0010f11:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f16:	85 c0                	test   eax,eax
c0010f18:	75 12                	jne    c0010f2c <udp_input+0x178>
c0010f1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1e:	85 c0                	test   eax,eax
c0010f20:	74 22                	je     c0010f44 <udp_input+0x190>
c0010f22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	74 18                	je     c0010f44 <udp_input+0x190>
c0010f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f32:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f37:	39 c2                	cmp    edx,eax
c0010f39:	74 09                	je     c0010f44 <udp_input+0x190>
c0010f3b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f40:	85 c0                	test   eax,eax
c0010f42:	74 24                	je     c0010f68 <udp_input+0x1b4>
c0010f44:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010f49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f4e:	75 18                	jne    c0010f68 <udp_input+0x1b4>
c0010f50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f54:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0010f57:	0f b6 c0             	movzx  eax,al
c0010f5a:	83 e0 04             	and    eax,0x4
c0010f5d:	75 09                	jne    c0010f68 <udp_input+0x1b4>
c0010f5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010f67:	90                   	nop
c0010f68:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0010f6d:	85 c0                	test   eax,eax
c0010f6f:	74 7b                	je     c0010fec <udp_input+0x238>
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010f78:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0010f7d:	0f b7 c0             	movzx  eax,ax
c0010f80:	39 c2                	cmp    edx,eax
c0010f82:	75 68                	jne    c0010fec <udp_input+0x238>
c0010f84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f88:	83 c0 04             	add    eax,0x4
c0010f8b:	74 1b                	je     c0010fa8 <udp_input+0x1f4>
c0010f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f94:	85 c0                	test   eax,eax
c0010f96:	74 10                	je     c0010fa8 <udp_input+0x1f4>
c0010f98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f9f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0010fa4:	39 c2                	cmp    edx,eax
c0010fa6:	75 44                	jne    c0010fec <udp_input+0x238>
c0010fa8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010fad:	74 29                	je     c0010fd8 <udp_input+0x224>
c0010faf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fb3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010fb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010fba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fbd:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0010fc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fce:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0010fd3:	eb 37                	jmp    c001100c <udp_input+0x258>
c0010fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd8:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0010fde:	83 c0 01             	add    eax,0x1
c0010fe1:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0010fe7:	eb 23                	jmp    c001100c <udp_input+0x258>
c0010fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ff8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fff:	90                   	nop
c0011000:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011005:	0f 85 ed fe ff ff    	jne    c0010ef8 <udp_input+0x144>
c001100b:	90                   	nop
c001100c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011011:	75 09                	jne    c001101c <udp_input+0x268>
c0011013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001101b:	90                   	nop
c001101c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011021:	75 15                	jne    c0011038 <udp_input+0x284>
c0011023:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011027:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001102a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001102f:	39 c2                	cmp    edx,eax
c0011031:	0f 85 d9 01 00 00    	jne    c0011210 <udp_input+0x45c>
c0011037:	90                   	nop
c0011038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001103c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0011040:	0f b7 c0             	movzx  eax,ax
c0011043:	85 c0                	test   eax,eax
c0011045:	74 61                	je     c00110a8 <udp_input+0x2f4>
c0011047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001104b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001104e:	0f b7 c0             	movzx  eax,ax
c0011051:	83 ec 0c             	sub    esp,0xc
c0011054:	50                   	push   eax
c0011055:	6a 11                	push   0x11
c0011057:	68 98 68 03 c0       	push   0xc0036898
c001105c:	68 90 68 03 c0       	push   0xc0036890
c0011061:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011065:	e8 0e 21 00 00       	call   c0013178 <inet_chksum_pseudo>
c001106a:	83 c4 20             	add    esp,0x20
c001106d:	0f b7 c0             	movzx  eax,ax
c0011070:	85 c0                	test   eax,eax
c0011072:	74 34                	je     c00110a8 <udp_input+0x2f4>
c0011074:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c001107a:	83 c0 01             	add    eax,0x1
c001107d:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c0011083:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011089:	83 c0 01             	add    eax,0x1
c001108c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011092:	83 ec 0c             	sub    esp,0xc
c0011095:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011099:	e8 be 72 ff ff       	call   c000835c <pbuf_free>
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	e9 7a 01 00 00       	jmp    c0011220 <udp_input+0x46c>
c00110a6:	66 90                	xchg   ax,ax
c00110a8:	83 ec 08             	sub    esp,0x8
c00110ab:	6a f8                	push   0xfffffff8
c00110ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110b1:	e8 0a 71 ff ff       	call   c00081c0 <pbuf_header>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	0f b6 c0             	movzx  eax,al
c00110bc:	85 c0                	test   eax,eax
c00110be:	74 38                	je     c00110f8 <udp_input+0x344>
c00110c0:	83 ec 08             	sub    esp,0x8
c00110c3:	68 89 0a 03 c0       	push   0xc0030a89
c00110c8:	68 26 fb 02 c0       	push   0xc002fb26
c00110cd:	e8 d2 ea 00 00       	call   c001fba4 <CPrintf>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00110db:	83 c0 01             	add    eax,0x1
c00110de:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110eb:	e8 6c 72 ff ff       	call   c000835c <pbuf_free>
c00110f0:	83 c4 10             	add    esp,0x10
c00110f3:	e9 28 01 00 00       	jmp    c0011220 <udp_input+0x46c>
c00110f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110fd:	74 51                	je     c0011150 <udp_input+0x39c>
c00110ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011103:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011106:	85 c0                	test   eax,eax
c0011108:	74 32                	je     c001113c <udp_input+0x388>
c001110a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001110e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011111:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0011116:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001111a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001111d:	83 ec 0c             	sub    esp,0xc
c0011120:	51                   	push   ecx
c0011121:	68 90 68 03 c0       	push   0xc0036890
c0011126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001112a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001112e:	52                   	push   edx
c001112f:	ff d0                	call   eax
c0011131:	83 c4 20             	add    esp,0x20
c0011134:	e9 e7 00 00 00       	jmp    c0011220 <udp_input+0x46c>
c0011139:	8d 76 00             	lea    esi,[esi+0x0]
c001113c:	83 ec 0c             	sub    esp,0xc
c001113f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011143:	e8 14 72 ff ff       	call   c000835c <pbuf_free>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	e9 d0 00 00 00       	jmp    c0011220 <udp_input+0x46c>
c0011150:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011155:	85 c0                	test   eax,eax
c0011157:	0f 85 83 00 00 00    	jne    c00111e0 <udp_input+0x42c>
c001115d:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011162:	25 f0 00 00 00       	and    eax,0xf0
c0011167:	3d e0 00 00 00       	cmp    eax,0xe0
c001116c:	74 72                	je     c00111e0 <udp_input+0x42c>
c001116e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011172:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011175:	0f b7 c0             	movzx  eax,ax
c0011178:	83 ec 0c             	sub    esp,0xc
c001117b:	50                   	push   eax
c001117c:	e8 67 fa fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011181:	83 c4 10             	add    esp,0x10
c0011184:	0f b7 c0             	movzx  eax,ax
c0011187:	c1 e8 08             	shr    eax,0x8
c001118a:	0f b7 c0             	movzx  eax,ax
c001118d:	83 e0 0f             	and    eax,0xf
c0011190:	83 c0 02             	add    eax,0x2
c0011193:	c1 e0 02             	shl    eax,0x2
c0011196:	98                   	cwde   
c0011197:	83 ec 08             	sub    esp,0x8
c001119a:	50                   	push   eax
c001119b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001119f:	e8 1c 70 ff ff       	call   c00081c0 <pbuf_header>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ae:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00111b2:	74 18                	je     c00111cc <udp_input+0x418>
c00111b4:	83 ec 08             	sub    esp,0x8
c00111b7:	68 9d 0a 03 c0       	push   0xc0030a9d
c00111bc:	68 26 fb 02 c0       	push   0xc002fb26
c00111c1:	e8 de e9 00 00       	call   c001fba4 <CPrintf>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	8d 76 00             	lea    esi,[esi+0x0]
c00111cc:	83 ec 08             	sub    esp,0x8
c00111cf:	6a 03                	push   0x3
c00111d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111d5:	e8 5e 1e 00 00       	call   c0013038 <icmp_dest_unreach>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	8d 76 00             	lea    esi,[esi+0x0]
c00111e0:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c00111e6:	83 c0 01             	add    eax,0x1
c00111e9:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c00111ef:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00111f5:	83 c0 01             	add    eax,0x1
c00111f8:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00111fe:	83 ec 0c             	sub    esp,0xc
c0011201:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011205:	e8 52 71 ff ff       	call   c000835c <pbuf_free>
c001120a:	83 c4 10             	add    esp,0x10
c001120d:	eb 11                	jmp    c0011220 <udp_input+0x46c>
c001120f:	90                   	nop
c0011210:	83 ec 0c             	sub    esp,0xc
c0011213:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011217:	e8 40 71 ff ff       	call   c000835c <pbuf_free>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	90                   	nop
c0011220:	90                   	nop
c0011221:	83 c4 28             	add    esp,0x28
c0011224:	5b                   	pop    ebx
c0011225:	c3                   	ret    
c0011226:	66 90                	xchg   ax,ax

c0011228 <udp_bind>:
c0011228:	83 ec 2c             	sub    esp,0x2c
c001122b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001122f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011234:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011239:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001123e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011242:	e9 8d 00 00 00       	jmp    c00112d4 <udp_bind+0xac>
c0011247:	90                   	nop
c0011248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001124c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011250:	75 26                	jne    c0011278 <udp_bind+0x50>
c0011252:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011257:	85 c0                	test   eax,eax
c0011259:	74 15                	je     c0011270 <udp_bind+0x48>
c001125b:	83 ec 08             	sub    esp,0x8
c001125e:	68 b1 0a 03 c0       	push   0xc0030ab1
c0011263:	68 26 fb 02 c0       	push   0xc002fb26
c0011268:	e8 37 e9 00 00       	call   c001fba4 <CPrintf>
c001126d:	83 c4 10             	add    esp,0x10
c0011270:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c0011275:	eb 51                	jmp    c00112c8 <udp_bind+0xa0>
c0011277:	90                   	nop
c0011278:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001127c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011280:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011285:	0f b7 c0             	movzx  eax,ax
c0011288:	39 c2                	cmp    edx,eax
c001128a:	75 3c                	jne    c00112c8 <udp_bind+0xa0>
c001128c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011290:	85 c0                	test   eax,eax
c0011292:	74 2c                	je     c00112c0 <udp_bind+0x98>
c0011294:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011298:	8b 00                	mov    eax,DWORD PTR [eax]
c001129a:	85 c0                	test   eax,eax
c001129c:	74 22                	je     c00112c0 <udp_bind+0x98>
c001129e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00112a3:	74 1b                	je     c00112c0 <udp_bind+0x98>
c00112a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00112ab:	85 c0                	test   eax,eax
c00112ad:	74 11                	je     c00112c0 <udp_bind+0x98>
c00112af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00112b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00112bb:	39 c2                	cmp    edx,eax
c00112bd:	75 09                	jne    c00112c8 <udp_bind+0xa0>
c00112bf:	90                   	nop
c00112c0:	b0 f8                	mov    al,0xf8
c00112c2:	e9 dd 00 00 00       	jmp    c00113a4 <udp_bind+0x17c>
c00112c7:	90                   	nop
c00112c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00112cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112d3:	90                   	nop
c00112d4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00112d9:	0f 85 69 ff ff ff    	jne    c0011248 <udp_bind+0x20>
c00112df:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00112e4:	74 0a                	je     c00112f0 <udp_bind+0xc8>
c00112e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00112ec:	eb 0a                	jmp    c00112f8 <udp_bind+0xd0>
c00112ee:	66 90                	xchg   ax,ax
c00112f0:	b8 00 00 00 00       	mov    eax,0x0
c00112f5:	8d 76 00             	lea    esi,[esi+0x0]
c00112f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112fc:	89 02                	mov    DWORD PTR [edx],eax
c00112fe:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011303:	85 c0                	test   eax,eax
c0011305:	75 6d                	jne    c0011374 <udp_bind+0x14c>
c0011307:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c001130e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011313:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011317:	eb 3b                	jmp    c0011354 <udp_bind+0x12c>
c0011319:	8d 76 00             	lea    esi,[esi+0x0]
c001131c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011320:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011324:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011329:	0f b7 c0             	movzx  eax,ax
c001132c:	39 c2                	cmp    edx,eax
c001132e:	75 18                	jne    c0011348 <udp_bind+0x120>
c0011330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011334:	83 c0 01             	add    eax,0x1
c0011337:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001133c:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011341:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011345:	eb 0d                	jmp    c0011354 <udp_bind+0x12c>
c0011347:	90                   	nop
c0011348:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001134f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011353:	90                   	nop
c0011354:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011359:	74 0d                	je     c0011368 <udp_bind+0x140>
c001135b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011360:	3d ff ff 00 00       	cmp    eax,0xffff
c0011365:	75 b5                	jne    c001131c <udp_bind+0xf4>
c0011367:	90                   	nop
c0011368:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001136d:	74 05                	je     c0011374 <udp_bind+0x14c>
c001136f:	b0 f8                	mov    al,0xf8
c0011371:	eb 31                	jmp    c00113a4 <udp_bind+0x17c>
c0011373:	90                   	nop
c0011374:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001137c:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c0011380:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011385:	85 c0                	test   eax,eax
c0011387:	75 17                	jne    c00113a0 <udp_bind+0x178>
c0011389:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c001138f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011393:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001139a:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001139f:	90                   	nop
c00113a0:	b0 00                	mov    al,0x0
c00113a2:	66 90                	xchg   ax,ax
c00113a4:	83 c4 2c             	add    esp,0x2c
c00113a7:	c3                   	ret    

c00113a8 <udp_sendto_if>:
c00113a8:	83 ec 2c             	sub    esp,0x2c
c00113ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00113af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113b8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113bc:	0f b7 c0             	movzx  eax,ax
c00113bf:	85 c0                	test   eax,eax
c00113c1:	75 39                	jne    c00113fc <udp_sendto_if+0x54>
c00113c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113c7:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113cb:	0f b7 d0             	movzx  edx,ax
c00113ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113d2:	83 ec 04             	sub    esp,0x4
c00113d5:	52                   	push   edx
c00113d6:	50                   	push   eax
c00113d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113db:	e8 48 fe ff ff       	call   c0011228 <udp_bind>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00113e7:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c00113ec:	85 c0                	test   eax,eax
c00113ee:	74 0c                	je     c00113fc <udp_sendto_if+0x54>
c00113f0:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00113f4:	e9 2b 02 00 00       	jmp    c0011624 <udp_sendto_if+0x27c>
c00113f9:	8d 76 00             	lea    esi,[esi+0x0]
c00113fc:	83 ec 08             	sub    esp,0x8
c00113ff:	6a 08                	push   0x8
c0011401:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011405:	e8 b6 6d ff ff       	call   c00081c0 <pbuf_header>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	0f b6 c0             	movzx  eax,al
c0011410:	85 c0                	test   eax,eax
c0011412:	74 48                	je     c001145c <udp_sendto_if+0xb4>
c0011414:	83 ec 04             	sub    esp,0x4
c0011417:	6a 00                	push   0x0
c0011419:	6a 08                	push   0x8
c001141b:	6a 01                	push   0x1
c001141d:	e8 12 71 ff ff       	call   c0008534 <pbuf_alloc>
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011429:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001142e:	75 08                	jne    c0011438 <udp_sendto_if+0x90>
c0011430:	b0 ff                	mov    al,0xff
c0011432:	e9 ed 01 00 00       	jmp    c0011624 <udp_sendto_if+0x27c>
c0011437:	90                   	nop
c0011438:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001143c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001143f:	0f b7 c0             	movzx  eax,ax
c0011442:	85 c0                	test   eax,eax
c0011444:	74 1e                	je     c0011464 <udp_sendto_if+0xbc>
c0011446:	83 ec 08             	sub    esp,0x8
c0011449:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001144d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011451:	e8 1e 78 ff ff       	call   c0008c74 <pbuf_chain>
c0011456:	83 c4 10             	add    esp,0x10
c0011459:	eb 09                	jmp    c0011464 <udp_sendto_if+0xbc>
c001145b:	90                   	nop
c001145c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011460:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011468:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001146c:	0f b7 c0             	movzx  eax,ax
c001146f:	83 f8 07             	cmp    eax,0x7
c0011472:	77 18                	ja     c001148c <udp_sendto_if+0xe4>
c0011474:	83 ec 08             	sub    esp,0x8
c0011477:	68 c0 0a 03 c0       	push   0xc0030ac0
c001147c:	68 26 fb 02 c0       	push   0xc002fb26
c0011481:	e8 1e e7 00 00       	call   c001fba4 <CPrintf>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	8d 76 00             	lea    esi,[esi+0x0]
c001148c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001149b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001149f:	0f b7 c0             	movzx  eax,ax
c00114a2:	83 ec 0c             	sub    esp,0xc
c00114a5:	50                   	push   eax
c00114a6:	e8 3d f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00114ab:	83 c4 10             	add    esp,0x10
c00114ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114b2:	66 89 02             	mov    WORD PTR [edx],ax
c00114b5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114ba:	83 ec 0c             	sub    esp,0xc
c00114bd:	50                   	push   eax
c00114be:	e8 25 f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00114c3:	83 c4 10             	add    esp,0x10
c00114c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114ca:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00114ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114d2:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00114d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114dc:	85 c0                	test   eax,eax
c00114de:	74 0c                	je     c00114ec <udp_sendto_if+0x144>
c00114e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e6:	85 c0                	test   eax,eax
c00114e8:	75 12                	jne    c00114fc <udp_sendto_if+0x154>
c00114ea:	66 90                	xchg   ax,ax
c00114ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114f0:	83 c0 04             	add    eax,0x4
c00114f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114f7:	eb 47                	jmp    c0011540 <udp_sendto_if+0x198>
c00114f9:	8d 76 00             	lea    esi,[esi+0x0]
c00114fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011500:	8b 10                	mov    edx,DWORD PTR [eax]
c0011502:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011509:	39 c2                	cmp    edx,eax
c001150b:	74 2b                	je     c0011538 <udp_sendto_if+0x190>
c001150d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011511:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011515:	74 19                	je     c0011530 <udp_sendto_if+0x188>
c0011517:	83 ec 0c             	sub    esp,0xc
c001151a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001151e:	e8 39 6e ff ff       	call   c000835c <pbuf_free>
c0011523:	83 c4 10             	add    esp,0x10
c0011526:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001152e:	66 90                	xchg   ax,ax
c0011530:	b0 fa                	mov    al,0xfa
c0011532:	e9 ed 00 00 00       	jmp    c0011624 <udp_sendto_if+0x27c>
c0011537:	90                   	nop
c0011538:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001153c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011540:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011544:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011547:	0f b7 c0             	movzx  eax,ax
c001154a:	83 ec 0c             	sub    esp,0xc
c001154d:	50                   	push   eax
c001154e:	e8 95 f6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011553:	83 c4 10             	add    esp,0x10
c0011556:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001155a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001155e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011562:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011565:	0f b6 c0             	movzx  eax,al
c0011568:	83 e0 01             	and    eax,0x1
c001156b:	75 4b                	jne    c00115b8 <udp_sendto_if+0x210>
c001156d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011571:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011574:	0f b7 c0             	movzx  eax,ax
c0011577:	83 ec 0c             	sub    esp,0xc
c001157a:	50                   	push   eax
c001157b:	6a 11                	push   0x11
c001157d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011585:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011589:	e8 ea 1b 00 00       	call   c0013178 <inet_chksum_pseudo>
c001158e:	83 c4 20             	add    esp,0x20
c0011591:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0011596:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c001159b:	85 c0                	test   eax,eax
c001159d:	75 09                	jne    c00115a8 <udp_sendto_if+0x200>
c001159f:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00115a6:	66 90                	xchg   ax,ax
c00115a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00115ac:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00115b1:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00115b5:	8d 76 00             	lea    esi,[esi+0x0]
c00115b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115bc:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00115bf:	0f b6 d0             	movzx  edx,al
c00115c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c6:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00115c9:	0f b6 c0             	movzx  eax,al
c00115cc:	83 ec 04             	sub    esp,0x4
c00115cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00115d3:	6a 11                	push   0x11
c00115d5:	52                   	push   edx
c00115d6:	50                   	push   eax
c00115d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115e3:	e8 f4 24 00 00       	call   c0013adc <ip_output_if>
c00115e8:	83 c4 20             	add    esp,0x20
c00115eb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00115ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115f3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00115f7:	74 17                	je     c0011610 <udp_sendto_if+0x268>
c00115f9:	83 ec 0c             	sub    esp,0xc
c00115fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011600:	e8 57 6d ff ff       	call   c000835c <pbuf_free>
c0011605:	83 c4 10             	add    esp,0x10
c0011608:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011610:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c0011616:	83 c0 01             	add    eax,0x1
c0011619:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c001161f:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011623:	90                   	nop
c0011624:	83 c4 2c             	add    esp,0x2c
c0011627:	c3                   	ret    

c0011628 <udp_sendto>:
c0011628:	83 ec 2c             	sub    esp,0x2c
c001162b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001162f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011634:	83 ec 0c             	sub    esp,0xc
c0011637:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001163b:	e8 c4 1f 00 00       	call   c0013604 <ip_route>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011647:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001164c:	75 16                	jne    c0011664 <udp_sendto+0x3c>
c001164e:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c0011654:	83 c0 01             	add    eax,0x1
c0011657:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c001165d:	b0 fc                	mov    al,0xfc
c001165f:	eb 27                	jmp    c0011688 <udp_sendto+0x60>
c0011661:	8d 76 00             	lea    esi,[esi+0x0]
c0011664:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011669:	83 ec 0c             	sub    esp,0xc
c001166c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011670:	50                   	push   eax
c0011671:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011675:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011679:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001167d:	e8 26 fd ff ff       	call   c00113a8 <udp_sendto_if>
c0011682:	83 c4 20             	add    esp,0x20
c0011685:	8d 76 00             	lea    esi,[esi+0x0]
c0011688:	83 c4 2c             	add    esp,0x2c
c001168b:	c3                   	ret    

c001168c <udp_send>:
c001168c:	83 ec 0c             	sub    esp,0xc
c001168f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011693:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011696:	0f b7 c0             	movzx  eax,ax
c0011699:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001169d:	83 c2 04             	add    edx,0x4
c00116a0:	50                   	push   eax
c00116a1:	52                   	push   edx
c00116a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116aa:	e8 79 ff ff ff       	call   c0011628 <udp_sendto>
c00116af:	83 c4 10             	add    esp,0x10
c00116b2:	83 c4 0c             	add    esp,0xc
c00116b5:	c3                   	ret    
c00116b6:	66 90                	xchg   ax,ax

c00116b8 <udp_connect>:
c00116b8:	83 ec 2c             	sub    esp,0x2c
c00116bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116bf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00116c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116c8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116cc:	0f b7 c0             	movzx  eax,ax
c00116cf:	85 c0                	test   eax,eax
c00116d1:	75 39                	jne    c001170c <udp_connect+0x54>
c00116d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d7:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116db:	0f b7 d0             	movzx  edx,ax
c00116de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e2:	83 ec 04             	sub    esp,0x4
c00116e5:	52                   	push   edx
c00116e6:	50                   	push   eax
c00116e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00116eb:	e8 38 fb ff ff       	call   c0011228 <udp_bind>
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00116f7:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c00116fc:	85 c0                	test   eax,eax
c00116fe:	74 0c                	je     c001170c <udp_connect+0x54>
c0011700:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011704:	e9 8b 00 00 00       	jmp    c0011794 <udp_connect+0xdc>
c0011709:	8d 76 00             	lea    esi,[esi+0x0]
c001170c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011711:	74 09                	je     c001171c <udp_connect+0x64>
c0011713:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011717:	8b 00                	mov    eax,DWORD PTR [eax]
c0011719:	eb 09                	jmp    c0011724 <udp_connect+0x6c>
c001171b:	90                   	nop
c001171c:	b8 00 00 00 00       	mov    eax,0x0
c0011721:	8d 76 00             	lea    esi,[esi+0x0]
c0011724:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011728:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001172b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001172f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011733:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0011737:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001173b:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001173e:	83 c8 04             	or     eax,0x4
c0011741:	88 c2                	mov    dl,al
c0011743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011747:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c001174a:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001174f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011753:	eb 1f                	jmp    c0011774 <udp_connect+0xbc>
c0011755:	8d 76 00             	lea    esi,[esi+0x0]
c0011758:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001175c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011760:	75 06                	jne    c0011768 <udp_connect+0xb0>
c0011762:	b0 00                	mov    al,0x0
c0011764:	eb 2e                	jmp    c0011794 <udp_connect+0xdc>
c0011766:	66 90                	xchg   ax,ax
c0011768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001176c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001176f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011773:	90                   	nop
c0011774:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011779:	75 dd                	jne    c0011758 <udp_connect+0xa0>
c001177b:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011781:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011785:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011788:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001178c:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011791:	b0 00                	mov    al,0x0
c0011793:	90                   	nop
c0011794:	83 c4 2c             	add    esp,0x2c
c0011797:	c3                   	ret    

c0011798 <udp_disconnect>:
c0011798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001179c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117a7:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00117ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117b1:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117b4:	83 e0 fb             	and    eax,0xfffffffb
c00117b7:	88 c2                	mov    dl,al
c00117b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117bd:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00117c0:	90                   	nop
c00117c1:	c3                   	ret    
c00117c2:	66 90                	xchg   ax,ax

c00117c4 <udp_recv>:
c00117c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00117d7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00117da:	90                   	nop
c00117db:	c3                   	ret    

c00117dc <udp_remove>:
c00117dc:	83 ec 1c             	sub    esp,0x1c
c00117df:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117e4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00117e8:	75 12                	jne    c00117fc <udp_remove+0x20>
c00117ea:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117f2:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00117f7:	eb 4b                	jmp    c0011844 <udp_remove+0x68>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011801:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011805:	eb 35                	jmp    c001183c <udp_remove+0x60>
c0011807:	90                   	nop
c0011808:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001180c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001180f:	85 c0                	test   eax,eax
c0011811:	74 1d                	je     c0011830 <udp_remove+0x54>
c0011813:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011817:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001181a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c001181e:	75 10                	jne    c0011830 <udp_remove+0x54>
c0011820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011824:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001182b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001182e:	66 90                	xchg   ax,ax
c0011830:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011834:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001183b:	90                   	nop
c001183c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011841:	75 c5                	jne    c0011808 <udp_remove+0x2c>
c0011843:	90                   	nop
c0011844:	83 ec 08             	sub    esp,0x8
c0011847:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001184b:	6a 01                	push   0x1
c001184d:	e8 4e 62 ff ff       	call   c0007aa0 <memp_free>
c0011852:	83 c4 10             	add    esp,0x10
c0011855:	90                   	nop
c0011856:	83 c4 1c             	add    esp,0x1c
c0011859:	c3                   	ret    
c001185a:	66 90                	xchg   ax,ax

c001185c <udp_new>:
c001185c:	83 ec 1c             	sub    esp,0x1c
c001185f:	83 ec 0c             	sub    esp,0xc
c0011862:	6a 01                	push   0x1
c0011864:	e8 0b 61 ff ff       	call   c0007974 <memp_malloc>
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011870:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011875:	74 1d                	je     c0011894 <udp_new+0x38>
c0011877:	83 ec 04             	sub    esp,0x4
c001187a:	6a 20                	push   0x20
c001187c:	6a 00                	push   0x0
c001187e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011882:	e8 69 ec fe ff       	call   c00004f0 <memset>
c0011887:	83 c4 10             	add    esp,0x10
c001188a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001188e:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011892:	66 90                	xchg   ax,ax
c0011894:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011898:	83 c4 1c             	add    esp,0x1c
c001189b:	c3                   	ret    

c001189c <free_entry>:
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a3:	c1 e0 04             	shl    eax,0x4
c00118a6:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00118ad:	85 c0                	test   eax,eax
c00118af:	74 2f                	je     c00118e0 <free_entry+0x44>
c00118b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b5:	c1 e0 04             	shl    eax,0x4
c00118b8:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00118bf:	83 ec 0c             	sub    esp,0xc
c00118c2:	50                   	push   eax
c00118c3:	e8 94 6a ff ff       	call   c000835c <pbuf_free>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118cf:	c1 e0 04             	shl    eax,0x4
c00118d2:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00118dd:	8d 76 00             	lea    esi,[esi+0x0]
c00118e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e4:	c1 e0 04             	shl    eax,0x4
c00118e7:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00118ec:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00118ef:	90                   	nop
c00118f0:	83 c4 0c             	add    esp,0xc
c00118f3:	c3                   	ret    

c00118f4 <etharp_tmr>:
c00118f4:	83 ec 1c             	sub    esp,0x1c
c00118f7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00118fc:	e9 a7 00 00 00       	jmp    c00119a8 <etharp_tmr+0xb4>
c0011901:	8d 76 00             	lea    esi,[esi+0x0]
c0011904:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011909:	c1 e0 04             	shl    eax,0x4
c001190c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011911:	8a 00                	mov    al,BYTE PTR [eax]
c0011913:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011917:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001191c:	85 c0                	test   eax,eax
c001191e:	74 7c                	je     c001199c <etharp_tmr+0xa8>
c0011920:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011925:	89 c2                	mov    edx,eax
c0011927:	c1 e2 04             	shl    edx,0x4
c001192a:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011930:	8a 12                	mov    dl,BYTE PTR [edx]
c0011932:	83 c2 01             	add    edx,0x1
c0011935:	c1 e0 04             	shl    eax,0x4
c0011938:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001193d:	88 10                	mov    BYTE PTR [eax],dl
c001193f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011944:	c1 e0 04             	shl    eax,0x4
c0011947:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001194c:	8a 00                	mov    al,BYTE PTR [eax]
c001194e:	0f b6 c0             	movzx  eax,al
c0011951:	3d ef 00 00 00       	cmp    eax,0xef
c0011956:	77 30                	ja     c0011988 <etharp_tmr+0x94>
c0011958:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001195d:	c1 e0 04             	shl    eax,0x4
c0011960:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011965:	8a 00                	mov    al,BYTE PTR [eax]
c0011967:	0f b6 c0             	movzx  eax,al
c001196a:	83 f8 01             	cmp    eax,0x1
c001196d:	75 2d                	jne    c001199c <etharp_tmr+0xa8>
c001196f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011974:	c1 e0 04             	shl    eax,0x4
c0011977:	05 0f a9 03 c0       	add    eax,0xc003a90f
c001197c:	8a 00                	mov    al,BYTE PTR [eax]
c001197e:	0f b6 c0             	movzx  eax,al
c0011981:	83 f8 01             	cmp    eax,0x1
c0011984:	76 16                	jbe    c001199c <etharp_tmr+0xa8>
c0011986:	66 90                	xchg   ax,ax
c0011988:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001198d:	83 ec 0c             	sub    esp,0xc
c0011990:	50                   	push   eax
c0011991:	e8 06 ff ff ff       	call   c001189c <free_entry>
c0011996:	83 c4 10             	add    esp,0x10
c0011999:	8d 76 00             	lea    esi,[esi+0x0]
c001199c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00119a0:	83 c0 01             	add    eax,0x1
c00119a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119a7:	90                   	nop
c00119a8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119ad:	83 f8 09             	cmp    eax,0x9
c00119b0:	0f 86 4e ff ff ff    	jbe    c0011904 <etharp_tmr+0x10>
c00119b6:	90                   	nop
c00119b7:	83 c4 1c             	add    esp,0x1c
c00119ba:	c3                   	ret    
c00119bb:	90                   	nop

c00119bc <find_entry>:
c00119bc:	83 ec 2c             	sub    esp,0x2c
c00119bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00119c7:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c00119cc:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c00119d1:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c00119d6:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119db:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00119e0:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c00119e5:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c00119ea:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c00119ef:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119f4:	e9 7f 01 00 00       	jmp    c0011b78 <find_entry+0x1bc>
c00119f9:	8d 76 00             	lea    esi,[esi+0x0]
c00119fc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a01:	c1 e0 04             	shl    eax,0x4
c0011a04:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a09:	8a 00                	mov    al,BYTE PTR [eax]
c0011a0b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011a0f:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011a14:	83 f8 0a             	cmp    eax,0xa
c0011a17:	75 17                	jne    c0011a30 <find_entry+0x74>
c0011a19:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a1e:	85 c0                	test   eax,eax
c0011a20:	75 0e                	jne    c0011a30 <find_entry+0x74>
c0011a22:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a26:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011a2a:	e9 3d 01 00 00       	jmp    c0011b6c <find_entry+0x1b0>
c0011a2f:	90                   	nop
c0011a30:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a35:	85 c0                	test   eax,eax
c0011a37:	0f 84 2f 01 00 00    	je     c0011b6c <find_entry+0x1b0>
c0011a3d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a42:	83 f8 01             	cmp    eax,0x1
c0011a45:	74 21                	je     c0011a68 <find_entry+0xac>
c0011a47:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a4c:	83 f8 02             	cmp    eax,0x2
c0011a4f:	74 17                	je     c0011a68 <find_entry+0xac>
c0011a51:	83 ec 08             	sub    esp,0x8
c0011a54:	68 f0 0a 03 c0       	push   0xc0030af0
c0011a59:	68 26 fb 02 c0       	push   0xc002fb26
c0011a5e:	e8 41 e1 00 00       	call   c001fba4 <CPrintf>
c0011a63:	83 c4 10             	add    esp,0x10
c0011a66:	66 90                	xchg   ax,ax
c0011a68:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011a6d:	74 25                	je     c0011a94 <find_entry+0xd8>
c0011a6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a73:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a75:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a7a:	c1 e0 04             	shl    eax,0x4
c0011a7d:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a84:	39 c2                	cmp    edx,eax
c0011a86:	75 0c                	jne    c0011a94 <find_entry+0xd8>
c0011a88:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a8c:	e9 53 02 00 00       	jmp    c0011ce4 <find_entry+0x328>
c0011a91:	8d 76 00             	lea    esi,[esi+0x0]
c0011a94:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a99:	83 f8 01             	cmp    eax,0x1
c0011a9c:	0f 85 8a 00 00 00    	jne    c0011b2c <find_entry+0x170>
c0011aa2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aa7:	c1 e0 04             	shl    eax,0x4
c0011aaa:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011aaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ab1:	85 c0                	test   eax,eax
c0011ab3:	74 3f                	je     c0011af4 <find_entry+0x138>
c0011ab5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aba:	c1 e0 04             	shl    eax,0x4
c0011abd:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ac2:	8a 00                	mov    al,BYTE PTR [eax]
c0011ac4:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011ac9:	0f b6 c0             	movzx  eax,al
c0011acc:	39 c2                	cmp    edx,eax
c0011ace:	0f 87 98 00 00 00    	ja     c0011b6c <find_entry+0x1b0>
c0011ad4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ad8:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011adc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ae1:	c1 e0 04             	shl    eax,0x4
c0011ae4:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ae9:	8a 00                	mov    al,BYTE PTR [eax]
c0011aeb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011aef:	eb 7b                	jmp    c0011b6c <find_entry+0x1b0>
c0011af1:	8d 76 00             	lea    esi,[esi+0x0]
c0011af4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011af9:	c1 e0 04             	shl    eax,0x4
c0011afc:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b01:	8a 00                	mov    al,BYTE PTR [eax]
c0011b03:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011b08:	0f b6 c0             	movzx  eax,al
c0011b0b:	39 c2                	cmp    edx,eax
c0011b0d:	77 5d                	ja     c0011b6c <find_entry+0x1b0>
c0011b0f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b13:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011b17:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b1c:	c1 e0 04             	shl    eax,0x4
c0011b1f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b24:	8a 00                	mov    al,BYTE PTR [eax]
c0011b26:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011b2a:	eb 40                	jmp    c0011b6c <find_entry+0x1b0>
c0011b2c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011b31:	83 f8 02             	cmp    eax,0x2
c0011b34:	75 36                	jne    c0011b6c <find_entry+0x1b0>
c0011b36:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b3b:	c1 e0 04             	shl    eax,0x4
c0011b3e:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b43:	8a 00                	mov    al,BYTE PTR [eax]
c0011b45:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011b4a:	0f b6 c0             	movzx  eax,al
c0011b4d:	39 c2                	cmp    edx,eax
c0011b4f:	77 1b                	ja     c0011b6c <find_entry+0x1b0>
c0011b51:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b55:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011b59:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b5e:	c1 e0 04             	shl    eax,0x4
c0011b61:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b66:	8a 00                	mov    al,BYTE PTR [eax]
c0011b68:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011b6c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b70:	83 c0 01             	add    eax,0x1
c0011b73:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b77:	90                   	nop
c0011b78:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b7d:	83 f8 09             	cmp    eax,0x9
c0011b80:	0f 86 76 fe ff ff    	jbe    c00119fc <find_entry+0x40>
c0011b86:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b8b:	83 e0 02             	and    eax,0x2
c0011b8e:	75 14                	jne    c0011ba4 <find_entry+0x1e8>
c0011b90:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011b95:	83 f8 0a             	cmp    eax,0xa
c0011b98:	75 12                	jne    c0011bac <find_entry+0x1f0>
c0011b9a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b9f:	83 e0 01             	and    eax,0x1
c0011ba2:	75 08                	jne    c0011bac <find_entry+0x1f0>
c0011ba4:	b0 ff                	mov    al,0xff
c0011ba6:	e9 39 01 00 00       	jmp    c0011ce4 <find_entry+0x328>
c0011bab:	90                   	nop
c0011bac:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bb1:	83 f8 09             	cmp    eax,0x9
c0011bb4:	7f 0e                	jg     c0011bc4 <find_entry+0x208>
c0011bb6:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011bba:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bbe:	e9 a1 00 00 00       	jmp    c0011c64 <find_entry+0x2a8>
c0011bc3:	90                   	nop
c0011bc4:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011bc9:	83 f8 09             	cmp    eax,0x9
c0011bcc:	7f 32                	jg     c0011c00 <find_entry+0x244>
c0011bce:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011bd2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bd6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bdb:	c1 e0 04             	shl    eax,0x4
c0011bde:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be5:	85 c0                	test   eax,eax
c0011be7:	74 47                	je     c0011c30 <find_entry+0x274>
c0011be9:	83 ec 08             	sub    esp,0x8
c0011bec:	68 69 0c 03 c0       	push   0xc0030c69
c0011bf1:	68 26 fb 02 c0       	push   0xc002fb26
c0011bf6:	e8 a9 df 00 00       	call   c001fba4 <CPrintf>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	eb 30                	jmp    c0011c30 <find_entry+0x274>
c0011c00:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011c05:	83 f8 09             	cmp    eax,0x9
c0011c08:	7f 0a                	jg     c0011c14 <find_entry+0x258>
c0011c0a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011c0e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c12:	eb 1c                	jmp    c0011c30 <find_entry+0x274>
c0011c14:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011c19:	83 f8 09             	cmp    eax,0x9
c0011c1c:	7f 0a                	jg     c0011c28 <find_entry+0x26c>
c0011c1e:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011c22:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c26:	eb 08                	jmp    c0011c30 <find_entry+0x274>
c0011c28:	b0 ff                	mov    al,0xff
c0011c2a:	e9 b5 00 00 00       	jmp    c0011ce4 <find_entry+0x328>
c0011c2f:	90                   	nop
c0011c30:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c35:	83 f8 09             	cmp    eax,0x9
c0011c38:	76 16                	jbe    c0011c50 <find_entry+0x294>
c0011c3a:	83 ec 08             	sub    esp,0x8
c0011c3d:	68 80 0c 03 c0       	push   0xc0030c80
c0011c42:	68 26 fb 02 c0       	push   0xc002fb26
c0011c47:	e8 58 df 00 00       	call   c001fba4 <CPrintf>
c0011c4c:	83 c4 10             	add    esp,0x10
c0011c4f:	90                   	nop
c0011c50:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c55:	83 ec 0c             	sub    esp,0xc
c0011c58:	50                   	push   eax
c0011c59:	e8 3e fc ff ff       	call   c001189c <free_entry>
c0011c5e:	83 c4 10             	add    esp,0x10
c0011c61:	8d 76 00             	lea    esi,[esi+0x0]
c0011c64:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c69:	83 f8 09             	cmp    eax,0x9
c0011c6c:	76 16                	jbe    c0011c84 <find_entry+0x2c8>
c0011c6e:	83 ec 08             	sub    esp,0x8
c0011c71:	68 80 0c 03 c0       	push   0xc0030c80
c0011c76:	68 26 fb 02 c0       	push   0xc002fb26
c0011c7b:	e8 24 df 00 00       	call   c001fba4 <CPrintf>
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	90                   	nop
c0011c84:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c89:	c1 e0 04             	shl    eax,0x4
c0011c8c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011c91:	8a 00                	mov    al,BYTE PTR [eax]
c0011c93:	0f b6 c0             	movzx  eax,al
c0011c96:	85 c0                	test   eax,eax
c0011c98:	74 16                	je     c0011cb0 <find_entry+0x2f4>
c0011c9a:	83 ec 08             	sub    esp,0x8
c0011c9d:	68 30 0b 03 c0       	push   0xc0030b30
c0011ca2:	68 26 fb 02 c0       	push   0xc002fb26
c0011ca7:	e8 f8 de 00 00       	call   c001fba4 <CPrintf>
c0011cac:	83 c4 10             	add    esp,0x10
c0011caf:	90                   	nop
c0011cb0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011cb5:	74 19                	je     c0011cd0 <find_entry+0x314>
c0011cb7:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc2:	c1 e2 04             	shl    edx,0x4
c0011cc5:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011ccb:	89 02                	mov    DWORD PTR [edx],eax
c0011ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd5:	c1 e0 04             	shl    eax,0x4
c0011cd8:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cdd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011ce0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ce4:	83 c4 2c             	add    esp,0x2c
c0011ce7:	c3                   	ret    

c0011ce8 <etharp_send_ip>:
c0011ce8:	83 ec 1c             	sub    esp,0x1c
c0011ceb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011cef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cfa:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011cfd:	0f b6 c0             	movzx  eax,al
c0011d00:	83 f8 06             	cmp    eax,0x6
c0011d03:	74 17                	je     c0011d1c <etharp_send_ip+0x34>
c0011d05:	83 ec 08             	sub    esp,0x8
c0011d08:	68 5c 0b 03 c0       	push   0xc0030b5c
c0011d0d:	68 26 fb 02 c0       	push   0xc002fb26
c0011d12:	e8 8d de 00 00       	call   c001fba4 <CPrintf>
c0011d17:	83 c4 10             	add    esp,0x10
c0011d1a:	66 90                	xchg   ax,ax
c0011d1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d20:	83 ec 04             	sub    esp,0x4
c0011d23:	6a 06                	push   0x6
c0011d25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d29:	50                   	push   eax
c0011d2a:	e8 4b e6 fe ff       	call   c000037a <memcpy>
c0011d2f:	83 c4 10             	add    esp,0x10
c0011d32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d36:	83 c0 06             	add    eax,0x6
c0011d39:	83 ec 04             	sub    esp,0x4
c0011d3c:	6a 06                	push   0x6
c0011d3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d42:	50                   	push   eax
c0011d43:	e8 32 e6 fe ff       	call   c000037a <memcpy>
c0011d48:	83 c4 10             	add    esp,0x10
c0011d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d4f:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d59:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011d5c:	83 ec 08             	sub    esp,0x8
c0011d5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d67:	ff d0                	call   eax
c0011d69:	83 c4 10             	add    esp,0x10
c0011d6c:	83 c4 1c             	add    esp,0x1c
c0011d6f:	c3                   	ret    

c0011d70 <update_arp_entry>:
c0011d70:	83 ec 2c             	sub    esp,0x2c
c0011d73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d77:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d7f:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011d82:	0f b6 c0             	movzx  eax,al
c0011d85:	83 f8 06             	cmp    eax,0x6
c0011d88:	74 16                	je     c0011da0 <update_arp_entry+0x30>
c0011d8a:	83 ec 08             	sub    esp,0x8
c0011d8d:	68 a0 0b 03 c0       	push   0xc0030ba0
c0011d92:	68 26 fb 02 c0       	push   0xc002fb26
c0011d97:	e8 08 de 00 00       	call   c001fba4 <CPrintf>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	90                   	nop
c0011da0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011da5:	74 39                	je     c0011de0 <update_arp_entry+0x70>
c0011da7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dad:	85 c0                	test   eax,eax
c0011daf:	74 2f                	je     c0011de0 <update_arp_entry+0x70>
c0011db1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db7:	83 ec 08             	sub    esp,0x8
c0011dba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011dbe:	50                   	push   eax
c0011dbf:	e8 8c 20 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	0f b6 c0             	movzx  eax,al
c0011dca:	85 c0                	test   eax,eax
c0011dcc:	75 12                	jne    c0011de0 <update_arp_entry+0x70>
c0011dce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd4:	25 f0 00 00 00       	and    eax,0xf0
c0011dd9:	3d e0 00 00 00       	cmp    eax,0xe0
c0011dde:	75 08                	jne    c0011de8 <update_arp_entry+0x78>
c0011de0:	b0 f2                	mov    al,0xf2
c0011de2:	e9 d9 00 00 00       	jmp    c0011ec0 <update_arp_entry+0x150>
c0011de7:	90                   	nop
c0011de8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011ded:	83 ec 08             	sub    esp,0x8
c0011df0:	50                   	push   eax
c0011df1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011df5:	e8 c2 fb ff ff       	call   c00119bc <find_entry>
c0011dfa:	83 c4 10             	add    esp,0x10
c0011dfd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011e01:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e06:	85 c0                	test   eax,eax
c0011e08:	79 0a                	jns    c0011e14 <update_arp_entry+0xa4>
c0011e0a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011e0e:	e9 ad 00 00 00       	jmp    c0011ec0 <update_arp_entry+0x150>
c0011e13:	90                   	nop
c0011e14:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e19:	c1 e0 04             	shl    eax,0x4
c0011e1c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e21:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011e24:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e29:	c1 e0 04             	shl    eax,0x4
c0011e2c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e31:	83 c0 08             	add    eax,0x8
c0011e34:	83 ec 04             	sub    esp,0x4
c0011e37:	6a 06                	push   0x6
c0011e39:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011e3d:	50                   	push   eax
c0011e3e:	e8 37 e5 fe ff       	call   c000037a <memcpy>
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e4b:	c1 e0 04             	shl    eax,0x4
c0011e4e:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011e53:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e56:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e5b:	c1 e0 04             	shl    eax,0x4
c0011e5e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e65:	85 c0                	test   eax,eax
c0011e67:	74 53                	je     c0011ebc <update_arp_entry+0x14c>
c0011e69:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e6e:	c1 e0 04             	shl    eax,0x4
c0011e71:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e7c:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e81:	c1 e0 04             	shl    eax,0x4
c0011e84:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e93:	83 c0 23             	add    eax,0x23
c0011e96:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e9a:	50                   	push   eax
c0011e9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ea3:	e8 40 fe ff ff       	call   c0011ce8 <etharp_send_ip>
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	83 ec 0c             	sub    esp,0xc
c0011eae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011eb2:	e8 a5 64 ff ff       	call   c000835c <pbuf_free>
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	66 90                	xchg   ax,ax
c0011ebc:	b0 00                	mov    al,0x0
c0011ebe:	66 90                	xchg   ax,ax
c0011ec0:	83 c4 2c             	add    esp,0x2c
c0011ec3:	c3                   	ret    

c0011ec4 <etharp_find_addr>:
c0011ec4:	83 ec 1c             	sub    esp,0x1c
c0011ec7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011ecc:	74 0a                	je     c0011ed8 <etharp_find_addr+0x14>
c0011ece:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011ed3:	75 1b                	jne    c0011ef0 <etharp_find_addr+0x2c>
c0011ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ed8:	83 ec 08             	sub    esp,0x8
c0011edb:	68 c8 0b 03 c0       	push   0xc0030bc8
c0011ee0:	68 26 fb 02 c0       	push   0xc002fb26
c0011ee5:	e8 ba dc 00 00       	call   c001fba4 <CPrintf>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	8d 76 00             	lea    esi,[esi+0x0]
c0011ef0:	83 ec 08             	sub    esp,0x8
c0011ef3:	6a 02                	push   0x2
c0011ef5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011ef9:	e8 be fa ff ff       	call   c00119bc <find_entry>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f05:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f0a:	85 c0                	test   eax,eax
c0011f0c:	78 4a                	js     c0011f58 <etharp_find_addr+0x94>
c0011f0e:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f13:	c1 e0 04             	shl    eax,0x4
c0011f16:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011f1b:	8a 00                	mov    al,BYTE PTR [eax]
c0011f1d:	0f b6 c0             	movzx  eax,al
c0011f20:	83 f8 02             	cmp    eax,0x2
c0011f23:	75 33                	jne    c0011f58 <etharp_find_addr+0x94>
c0011f25:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f2a:	c1 e0 04             	shl    eax,0x4
c0011f2d:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f32:	8d 50 08             	lea    edx,[eax+0x8]
c0011f35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f39:	89 10                	mov    DWORD PTR [eax],edx
c0011f3b:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f40:	c1 e0 04             	shl    eax,0x4
c0011f43:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f48:	8d 50 04             	lea    edx,[eax+0x4]
c0011f4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f4f:	89 10                	mov    DWORD PTR [eax],edx
c0011f51:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011f55:	eb 05                	jmp    c0011f5c <etharp_find_addr+0x98>
c0011f57:	90                   	nop
c0011f58:	b0 ff                	mov    al,0xff
c0011f5a:	66 90                	xchg   ax,ax
c0011f5c:	83 c4 1c             	add    esp,0x1c
c0011f5f:	c3                   	ret    

c0011f60 <etharp_arp_input>:
c0011f60:	83 ec 2c             	sub    esp,0x2c
c0011f63:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011f68:	75 1a                	jne    c0011f84 <etharp_arp_input+0x24>
c0011f6a:	83 ec 08             	sub    esp,0x8
c0011f6d:	68 93 0c 03 c0       	push   0xc0030c93
c0011f72:	68 26 fb 02 c0       	push   0xc002fb26
c0011f77:	e8 28 dc 00 00       	call   c001fba4 <CPrintf>
c0011f7c:	83 c4 10             	add    esp,0x10
c0011f7f:	e9 d0 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f4>
c0011f84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f88:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011f8c:	0f b7 c0             	movzx  eax,ax
c0011f8f:	83 f8 29             	cmp    eax,0x29
c0011f92:	77 34                	ja     c0011fc8 <etharp_arp_input+0x68>
c0011f94:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0011f9a:	83 c0 01             	add    eax,0x1
c0011f9d:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c0011fa3:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011fa9:	83 c0 01             	add    eax,0x1
c0011fac:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011fb9:	e8 9e 63 ff ff       	call   c000835c <pbuf_free>
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	e9 8e 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f4>
c0011fc6:	66 90                	xchg   ax,ax
c0011fc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011fcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fd7:	83 c0 0e             	add    eax,0xe
c0011fda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fe2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011fe5:	0f b7 c0             	movzx  eax,ax
c0011fe8:	3d 00 01 00 00       	cmp    eax,0x100
c0011fed:	75 31                	jne    c0012020 <etharp_arp_input+0xc0>
c0011fef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ff3:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0011ff6:	0f b6 c0             	movzx  eax,al
c0011ff9:	83 f8 06             	cmp    eax,0x6
c0011ffc:	75 22                	jne    c0012020 <etharp_arp_input+0xc0>
c0011ffe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012002:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0012005:	0f b6 c0             	movzx  eax,al
c0012008:	83 f8 04             	cmp    eax,0x4
c001200b:	75 13                	jne    c0012020 <etharp_arp_input+0xc0>
c001200d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012011:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012015:	0f b7 c0             	movzx  eax,ax
c0012018:	83 f8 08             	cmp    eax,0x8
c001201b:	74 37                	je     c0012054 <etharp_arp_input+0xf4>
c001201d:	8d 76 00             	lea    esi,[esi+0x0]
c0012020:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012026:	83 c0 01             	add    eax,0x1
c0012029:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c001202f:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012035:	83 c0 01             	add    eax,0x1
c0012038:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012045:	e8 12 63 ff ff       	call   c000835c <pbuf_free>
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	e9 02 02 00 00       	jmp    c0012254 <etharp_arp_input+0x2f4>
c0012052:	66 90                	xchg   ax,ax
c0012054:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c001205a:	83 c0 01             	add    eax,0x1
c001205d:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c0012063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012067:	83 c0 0e             	add    eax,0xe
c001206a:	83 ec 04             	sub    esp,0x4
c001206d:	6a 04                	push   0x4
c001206f:	50                   	push   eax
c0012070:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012074:	50                   	push   eax
c0012075:	e8 00 e3 fe ff       	call   c000037a <memcpy>
c001207a:	83 c4 10             	add    esp,0x10
c001207d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012081:	83 c0 18             	add    eax,0x18
c0012084:	83 ec 04             	sub    esp,0x4
c0012087:	6a 04                	push   0x4
c0012089:	50                   	push   eax
c001208a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001208e:	50                   	push   eax
c001208f:	e8 e6 e2 fe ff       	call   c000037a <memcpy>
c0012094:	83 c4 10             	add    esp,0x10
c0012097:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001209b:	83 c0 04             	add    eax,0x4
c001209e:	74 0c                	je     c00120ac <etharp_arp_input+0x14c>
c00120a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120a7:	85 c0                	test   eax,eax
c00120a9:	75 09                	jne    c00120b4 <etharp_arp_input+0x154>
c00120ab:	90                   	nop
c00120ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120b1:	eb 15                	jmp    c00120c8 <etharp_arp_input+0x168>
c00120b3:	90                   	nop
c00120b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120bf:	39 c2                	cmp    edx,eax
c00120c1:	0f 94 c0             	sete   al
c00120c4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00120c8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00120cd:	85 c0                	test   eax,eax
c00120cf:	74 07                	je     c00120d8 <etharp_arp_input+0x178>
c00120d1:	b8 01 00 00 00       	mov    eax,0x1
c00120d6:	eb 08                	jmp    c00120e0 <etharp_arp_input+0x180>
c00120d8:	b8 02 00 00 00       	mov    eax,0x2
c00120dd:	8d 76 00             	lea    esi,[esi+0x0]
c00120e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120e4:	83 c2 08             	add    edx,0x8
c00120e7:	50                   	push   eax
c00120e8:	52                   	push   edx
c00120e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00120ed:	50                   	push   eax
c00120ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120f2:	e8 79 fc ff ff       	call   c0011d70 <update_arp_entry>
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120fe:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0012102:	0f b7 c0             	movzx  eax,ax
c0012105:	3d 00 01 00 00       	cmp    eax,0x100
c001210a:	74 10                	je     c001211c <etharp_arp_input+0x1bc>
c001210c:	3d 00 02 00 00       	cmp    eax,0x200
c0012111:	0f 84 29 01 00 00    	je     c0012240 <etharp_arp_input+0x2e0>
c0012117:	e9 10 01 00 00       	jmp    c001222c <etharp_arp_input+0x2cc>
c001211c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012121:	85 c0                	test   eax,eax
c0012123:	0f 84 f7 00 00 00    	je     c0012220 <etharp_arp_input+0x2c0>
c0012129:	83 ec 0c             	sub    esp,0xc
c001212c:	6a 02                	push   0x2
c001212e:	e8 b5 ea fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012133:	83 c4 10             	add    esp,0x10
c0012136:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001213a:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001213e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012142:	8d 50 0e             	lea    edx,[eax+0xe]
c0012145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012149:	83 c0 18             	add    eax,0x18
c001214c:	83 ec 04             	sub    esp,0x4
c001214f:	6a 04                	push   0x4
c0012151:	52                   	push   edx
c0012152:	50                   	push   eax
c0012153:	e8 22 e2 fe ff       	call   c000037a <memcpy>
c0012158:	83 c4 10             	add    esp,0x10
c001215b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001215f:	8d 50 04             	lea    edx,[eax+0x4]
c0012162:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012166:	83 c0 0e             	add    eax,0xe
c0012169:	83 ec 04             	sub    esp,0x4
c001216c:	6a 04                	push   0x4
c001216e:	52                   	push   edx
c001216f:	50                   	push   eax
c0012170:	e8 05 e2 fe ff       	call   c000037a <memcpy>
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001217c:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c001217f:	0f b6 c0             	movzx  eax,al
c0012182:	83 f8 06             	cmp    eax,0x6
c0012185:	74 15                	je     c001219c <etharp_arp_input+0x23c>
c0012187:	83 ec 08             	sub    esp,0x8
c001218a:	68 5c 0b 03 c0       	push   0xc0030b5c
c001218f:	68 26 fb 02 c0       	push   0xc002fb26
c0012194:	e8 0b da 00 00       	call   c001fba4 <CPrintf>
c0012199:	83 c4 10             	add    esp,0x10
c001219c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a0:	8d 50 08             	lea    edx,[eax+0x8]
c00121a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a7:	83 c0 12             	add    eax,0x12
c00121aa:	83 ec 04             	sub    esp,0x4
c00121ad:	6a 06                	push   0x6
c00121af:	52                   	push   edx
c00121b0:	50                   	push   eax
c00121b1:	e8 c4 e1 fe ff       	call   c000037a <memcpy>
c00121b6:	83 c4 10             	add    esp,0x10
c00121b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121bd:	8d 50 08             	lea    edx,[eax+0x8]
c00121c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121c4:	83 ec 04             	sub    esp,0x4
c00121c7:	6a 06                	push   0x6
c00121c9:	52                   	push   edx
c00121ca:	50                   	push   eax
c00121cb:	e8 aa e1 fe ff       	call   c000037a <memcpy>
c00121d0:	83 c4 10             	add    esp,0x10
c00121d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121d7:	83 c0 08             	add    eax,0x8
c00121da:	83 ec 04             	sub    esp,0x4
c00121dd:	6a 06                	push   0x6
c00121df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121e3:	50                   	push   eax
c00121e4:	e8 91 e1 fe ff       	call   c000037a <memcpy>
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121f0:	83 c0 06             	add    eax,0x6
c00121f3:	83 ec 04             	sub    esp,0x4
c00121f6:	6a 06                	push   0x6
c00121f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121fc:	50                   	push   eax
c00121fd:	e8 78 e1 fe ff       	call   c000037a <memcpy>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012209:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001220c:	83 ec 08             	sub    esp,0x8
c001220f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012213:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012217:	ff d0                	call   eax
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	eb 26                	jmp    c0012244 <etharp_arp_input+0x2e4>
c001221e:	66 90                	xchg   ax,ax
c0012220:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012224:	83 c0 04             	add    eax,0x4
c0012227:	eb 1b                	jmp    c0012244 <etharp_arp_input+0x2e4>
c0012229:	8d 76 00             	lea    esi,[esi+0x0]
c001222c:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c0012232:	83 c0 01             	add    eax,0x1
c0012235:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c001223b:	eb 07                	jmp    c0012244 <etharp_arp_input+0x2e4>
c001223d:	8d 76 00             	lea    esi,[esi+0x0]
c0012240:	90                   	nop
c0012241:	8d 76 00             	lea    esi,[esi+0x0]
c0012244:	83 ec 0c             	sub    esp,0xc
c0012247:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001224b:	e8 0c 61 ff ff       	call   c000835c <pbuf_free>
c0012250:	83 c4 10             	add    esp,0x10
c0012253:	90                   	nop
c0012254:	83 c4 2c             	add    esp,0x2c
c0012257:	c3                   	ret    

c0012258 <etharp_raw>:
c0012258:	83 ec 2c             	sub    esp,0x2c
c001225b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001225f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012264:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012269:	83 ec 04             	sub    esp,0x4
c001226c:	6a 00                	push   0x0
c001226e:	6a 2a                	push   0x2a
c0012270:	6a 03                	push   0x3
c0012272:	e8 bd 62 ff ff       	call   c0008534 <pbuf_alloc>
c0012277:	83 c4 10             	add    esp,0x10
c001227a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001227e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012283:	75 17                	jne    c001229c <etharp_raw+0x44>
c0012285:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001228b:	83 c0 01             	add    eax,0x1
c001228e:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012294:	b0 ff                	mov    al,0xff
c0012296:	e9 85 01 00 00       	jmp    c0012420 <etharp_raw+0x1c8>
c001229b:	90                   	nop
c001229c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122a0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00122a4:	0f b7 c0             	movzx  eax,ax
c00122a7:	83 f8 29             	cmp    eax,0x29
c00122aa:	77 18                	ja     c00122c4 <etharp_raw+0x6c>
c00122ac:	83 ec 08             	sub    esp,0x8
c00122af:	68 ec 0b 03 c0       	push   0xc0030bec
c00122b4:	68 26 fb 02 c0       	push   0xc002fb26
c00122b9:	e8 e6 d8 00 00       	call   c001fba4 <CPrintf>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	8d 76 00             	lea    esi,[esi+0x0]
c00122c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122d3:	83 c0 0e             	add    eax,0xe
c00122d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122da:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00122df:	83 ec 0c             	sub    esp,0xc
c00122e2:	50                   	push   eax
c00122e3:	e8 00 e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00122e8:	83 c4 10             	add    esp,0x10
c00122eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00122ef:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00122f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f7:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00122fa:	0f b6 c0             	movzx  eax,al
c00122fd:	83 f8 06             	cmp    eax,0x6
c0012300:	74 16                	je     c0012318 <etharp_raw+0xc0>
c0012302:	83 ec 08             	sub    esp,0x8
c0012305:	68 5c 0b 03 c0       	push   0xc0030b5c
c001230a:	68 26 fb 02 c0       	push   0xc002fb26
c001230f:	e8 90 d8 00 00       	call   c001fba4 <CPrintf>
c0012314:	83 c4 10             	add    esp,0x10
c0012317:	90                   	nop
c0012318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001231c:	83 c0 08             	add    eax,0x8
c001231f:	83 ec 04             	sub    esp,0x4
c0012322:	6a 06                	push   0x6
c0012324:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012328:	50                   	push   eax
c0012329:	e8 4c e0 fe ff       	call   c000037a <memcpy>
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012335:	83 c0 12             	add    eax,0x12
c0012338:	83 ec 04             	sub    esp,0x4
c001233b:	6a 06                	push   0x6
c001233d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012341:	50                   	push   eax
c0012342:	e8 33 e0 fe ff       	call   c000037a <memcpy>
c0012347:	83 c4 10             	add    esp,0x10
c001234a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001234e:	83 ec 04             	sub    esp,0x4
c0012351:	6a 06                	push   0x6
c0012353:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012357:	50                   	push   eax
c0012358:	e8 1d e0 fe ff       	call   c000037a <memcpy>
c001235d:	83 c4 10             	add    esp,0x10
c0012360:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012364:	83 c0 06             	add    eax,0x6
c0012367:	83 ec 04             	sub    esp,0x4
c001236a:	6a 06                	push   0x6
c001236c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012370:	50                   	push   eax
c0012371:	e8 04 e0 fe ff       	call   c000037a <memcpy>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001237d:	83 c0 0e             	add    eax,0xe
c0012380:	83 ec 04             	sub    esp,0x4
c0012383:	6a 04                	push   0x4
c0012385:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012389:	50                   	push   eax
c001238a:	e8 eb df fe ff       	call   c000037a <memcpy>
c001238f:	83 c4 10             	add    esp,0x10
c0012392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012396:	83 c0 18             	add    eax,0x18
c0012399:	83 ec 04             	sub    esp,0x4
c001239c:	6a 04                	push   0x4
c001239e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00123a2:	50                   	push   eax
c00123a3:	e8 d2 df fe ff       	call   c000037a <memcpy>
c00123a8:	83 c4 10             	add    esp,0x10
c00123ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123af:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c00123b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00123be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c2:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c00123c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ca:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c00123ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123d2:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c00123d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123df:	83 ec 08             	sub    esp,0x8
c00123e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123ea:	ff d0                	call   eax
c00123ec:	83 c4 10             	add    esp,0x10
c00123ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00123f3:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c00123f9:	83 c0 01             	add    eax,0x1
c00123fc:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012409:	e8 4e 5f ff ff       	call   c000835c <pbuf_free>
c001240e:	83 c4 10             	add    esp,0x10
c0012411:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012419:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001241d:	8d 76 00             	lea    esi,[esi+0x0]
c0012420:	83 c4 2c             	add    esp,0x2c
c0012423:	c3                   	ret    

c0012424 <etharp_request>:
c0012424:	83 ec 0c             	sub    esp,0xc
c0012427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001242b:	8d 48 04             	lea    ecx,[eax+0x4]
c001242e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012432:	8d 50 23             	lea    edx,[eax+0x23]
c0012435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012439:	83 c0 23             	add    eax,0x23
c001243c:	6a 01                	push   0x1
c001243e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012442:	68 bc 0c 03 c0       	push   0xc0030cbc
c0012447:	51                   	push   ecx
c0012448:	52                   	push   edx
c0012449:	68 c4 0c 03 c0       	push   0xc0030cc4
c001244e:	50                   	push   eax
c001244f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012453:	e8 00 fe ff ff       	call   c0012258 <etharp_raw>
c0012458:	83 c4 20             	add    esp,0x20
c001245b:	83 c4 0c             	add    esp,0xc
c001245e:	c3                   	ret    
c001245f:	90                   	nop

c0012460 <etharp_query>:
c0012460:	83 ec 2c             	sub    esp,0x2c
c0012463:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012467:	83 c0 23             	add    eax,0x23
c001246a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001246e:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012473:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012477:	8b 00                	mov    eax,DWORD PTR [eax]
c0012479:	83 ec 08             	sub    esp,0x8
c001247c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012480:	50                   	push   eax
c0012481:	e8 ca 19 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0012486:	83 c4 10             	add    esp,0x10
c0012489:	0f b6 c0             	movzx  eax,al
c001248c:	85 c0                	test   eax,eax
c001248e:	75 24                	jne    c00124b4 <etharp_query+0x54>
c0012490:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012494:	8b 00                	mov    eax,DWORD PTR [eax]
c0012496:	25 f0 00 00 00       	and    eax,0xf0
c001249b:	3d e0 00 00 00       	cmp    eax,0xe0
c00124a0:	74 12                	je     c00124b4 <etharp_query+0x54>
c00124a2:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00124a7:	74 0b                	je     c00124b4 <etharp_query+0x54>
c00124a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00124af:	85 c0                	test   eax,eax
c00124b1:	75 09                	jne    c00124bc <etharp_query+0x5c>
c00124b3:	90                   	nop
c00124b4:	b0 f2                	mov    al,0xf2
c00124b6:	e9 dd 02 00 00       	jmp    c0012798 <etharp_query+0x338>
c00124bb:	90                   	nop
c00124bc:	83 ec 08             	sub    esp,0x8
c00124bf:	6a 01                	push   0x1
c00124c1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124c5:	e8 f2 f4 ff ff       	call   c00119bc <find_entry>
c00124ca:	83 c4 10             	add    esp,0x10
c00124cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00124d1:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124d6:	85 c0                	test   eax,eax
c00124d8:	79 22                	jns    c00124fc <etharp_query+0x9c>
c00124da:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124df:	74 0f                	je     c00124f0 <etharp_query+0x90>
c00124e1:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00124e7:	83 c0 01             	add    eax,0x1
c00124ea:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00124f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00124f4:	e9 9f 02 00 00       	jmp    c0012798 <etharp_query+0x338>
c00124f9:	8d 76 00             	lea    esi,[esi+0x0]
c00124fc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012501:	c1 e0 04             	shl    eax,0x4
c0012504:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012509:	8a 00                	mov    al,BYTE PTR [eax]
c001250b:	0f b6 c0             	movzx  eax,al
c001250e:	85 c0                	test   eax,eax
c0012510:	75 12                	jne    c0012524 <etharp_query+0xc4>
c0012512:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012517:	c1 e0 04             	shl    eax,0x4
c001251a:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001251f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012522:	66 90                	xchg   ax,ax
c0012524:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012529:	c1 e0 04             	shl    eax,0x4
c001252c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012531:	8a 00                	mov    al,BYTE PTR [eax]
c0012533:	0f b6 c0             	movzx  eax,al
c0012536:	83 f8 01             	cmp    eax,0x1
c0012539:	74 2d                	je     c0012568 <etharp_query+0x108>
c001253b:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012540:	c1 e0 04             	shl    eax,0x4
c0012543:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012548:	8a 00                	mov    al,BYTE PTR [eax]
c001254a:	0f b6 c0             	movzx  eax,al
c001254d:	83 f8 02             	cmp    eax,0x2
c0012550:	74 16                	je     c0012568 <etharp_query+0x108>
c0012552:	83 ec 08             	sub    esp,0x8
c0012555:	68 20 0c 03 c0       	push   0xc0030c20
c001255a:	68 26 fb 02 c0       	push   0xc002fb26
c001255f:	e8 40 d6 00 00       	call   c001fba4 <CPrintf>
c0012564:	83 c4 10             	add    esp,0x10
c0012567:	90                   	nop
c0012568:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001256d:	c1 e0 04             	shl    eax,0x4
c0012570:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012575:	8a 00                	mov    al,BYTE PTR [eax]
c0012577:	0f b6 c0             	movzx  eax,al
c001257a:	83 f8 01             	cmp    eax,0x1
c001257d:	74 09                	je     c0012588 <etharp_query+0x128>
c001257f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012584:	75 2a                	jne    c00125b0 <etharp_query+0x150>
c0012586:	66 90                	xchg   ax,ax
c0012588:	83 ec 08             	sub    esp,0x8
c001258b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001258f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012593:	e8 8c fe ff ff       	call   c0012424 <etharp_request>
c0012598:	83 c4 10             	add    esp,0x10
c001259b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001259f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125a4:	75 0a                	jne    c00125b0 <etharp_query+0x150>
c00125a6:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125aa:	e9 e9 01 00 00       	jmp    c0012798 <etharp_query+0x338>
c00125af:	90                   	nop
c00125b0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125b5:	75 15                	jne    c00125cc <etharp_query+0x16c>
c00125b7:	83 ec 08             	sub    esp,0x8
c00125ba:	68 9a ff 02 c0       	push   0xc002ff9a
c00125bf:	68 26 fb 02 c0       	push   0xc002fb26
c00125c4:	e8 db d5 00 00       	call   c001fba4 <CPrintf>
c00125c9:	83 c4 10             	add    esp,0x10
c00125cc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125d1:	c1 e0 04             	shl    eax,0x4
c00125d4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125d9:	8a 00                	mov    al,BYTE PTR [eax]
c00125db:	0f b6 c0             	movzx  eax,al
c00125de:	83 f8 02             	cmp    eax,0x2
c00125e1:	75 39                	jne    c001261c <etharp_query+0x1bc>
c00125e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00125e7:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c00125ec:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125f1:	c1 e0 04             	shl    eax,0x4
c00125f4:	05 00 a9 03 c0       	add    eax,0xc003a900
c00125f9:	83 c0 08             	add    eax,0x8
c00125fc:	50                   	push   eax
c00125fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012601:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012605:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012609:	e8 da f6 ff ff       	call   c0011ce8 <etharp_send_ip>
c001260e:	83 c4 10             	add    esp,0x10
c0012611:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012615:	e9 7a 01 00 00       	jmp    c0012794 <etharp_query+0x334>
c001261a:	66 90                	xchg   ax,ax
c001261c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012621:	c1 e0 04             	shl    eax,0x4
c0012624:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012629:	8a 00                	mov    al,BYTE PTR [eax]
c001262b:	0f b6 c0             	movzx  eax,al
c001262e:	83 f8 01             	cmp    eax,0x1
c0012631:	0f 85 5d 01 00 00    	jne    c0012794 <etharp_query+0x334>
c0012637:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001263f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012643:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012647:	eb 63                	jmp    c00126ac <etharp_query+0x24c>
c0012649:	8d 76 00             	lea    esi,[esi+0x0]
c001264c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012650:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0012654:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012658:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001265b:	0f b7 d2             	movzx  edx,dx
c001265e:	0f b7 c0             	movzx  eax,ax
c0012661:	39 c2                	cmp    edx,eax
c0012663:	75 1f                	jne    c0012684 <etharp_query+0x224>
c0012665:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012669:	8b 00                	mov    eax,DWORD PTR [eax]
c001266b:	85 c0                	test   eax,eax
c001266d:	74 15                	je     c0012684 <etharp_query+0x224>
c001266f:	83 ec 08             	sub    esp,0x8
c0012672:	68 a1 0c 03 c0       	push   0xc0030ca1
c0012677:	68 26 fb 02 c0       	push   0xc002fb26
c001267c:	e8 23 d5 00 00       	call   c001fba4 <CPrintf>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012688:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c001268b:	0f b6 c0             	movzx  eax,al
c001268e:	83 f8 01             	cmp    eax,0x1
c0012691:	74 0d                	je     c00126a0 <etharp_query+0x240>
c0012693:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c001269b:	eb 17                	jmp    c00126b4 <etharp_query+0x254>
c001269d:	8d 76 00             	lea    esi,[esi+0x0]
c00126a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00126a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126aa:	66 90                	xchg   ax,ax
c00126ac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126b1:	75 99                	jne    c001264c <etharp_query+0x1ec>
c00126b3:	90                   	nop
c00126b4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126b9:	74 59                	je     c0012714 <etharp_query+0x2b4>
c00126bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00126c2:	0f b7 c0             	movzx  eax,ax
c00126c5:	83 ec 04             	sub    esp,0x4
c00126c8:	6a 00                	push   0x0
c00126ca:	50                   	push   eax
c00126cb:	6a 03                	push   0x3
c00126cd:	e8 62 5e ff ff       	call   c0008534 <pbuf_alloc>
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126d9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126de:	74 4c                	je     c001272c <etharp_query+0x2cc>
c00126e0:	83 ec 08             	sub    esp,0x8
c00126e3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00126e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126eb:	e8 a4 66 ff ff       	call   c0008d94 <pbuf_copy>
c00126f0:	83 c4 10             	add    esp,0x10
c00126f3:	0f be c0             	movsx  eax,al
c00126f6:	85 c0                	test   eax,eax
c00126f8:	74 32                	je     c001272c <etharp_query+0x2cc>
c00126fa:	83 ec 0c             	sub    esp,0xc
c00126fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012701:	e8 56 5c ff ff       	call   c000835c <pbuf_free>
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012711:	eb 19                	jmp    c001272c <etharp_query+0x2cc>
c0012713:	90                   	nop
c0012714:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012718:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012723:	e8 3c 64 ff ff       	call   c0008b64 <pbuf_ref>
c0012728:	83 c4 10             	add    esp,0x10
c001272b:	90                   	nop
c001272c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012731:	74 4d                	je     c0012780 <etharp_query+0x320>
c0012733:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012738:	c1 e0 04             	shl    eax,0x4
c001273b:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012740:	8b 00                	mov    eax,DWORD PTR [eax]
c0012742:	85 c0                	test   eax,eax
c0012744:	74 1e                	je     c0012764 <etharp_query+0x304>
c0012746:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001274b:	c1 e0 04             	shl    eax,0x4
c001274e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012753:	8b 00                	mov    eax,DWORD PTR [eax]
c0012755:	83 ec 0c             	sub    esp,0xc
c0012758:	50                   	push   eax
c0012759:	e8 fe 5b ff ff       	call   c000835c <pbuf_free>
c001275e:	83 c4 10             	add    esp,0x10
c0012761:	8d 76 00             	lea    esi,[esi+0x0]
c0012764:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012769:	c1 e0 04             	shl    eax,0x4
c001276c:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c0012772:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012776:	89 02                	mov    DWORD PTR [edx],eax
c0012778:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001277d:	eb 15                	jmp    c0012794 <etharp_query+0x334>
c001277f:	90                   	nop
c0012780:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012786:	83 c0 01             	add    eax,0x1
c0012789:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001278f:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012794:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012798:	83 c4 2c             	add    esp,0x2c
c001279b:	c3                   	ret    

c001279c <etharp_output>:
c001279c:	83 ec 1c             	sub    esp,0x1c
c001279f:	83 ec 08             	sub    esp,0x8
c00127a2:	6a 0e                	push   0xe
c00127a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127a8:	e8 13 5a ff ff       	call   c00081c0 <pbuf_header>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	0f b6 c0             	movzx  eax,al
c00127b3:	85 c0                	test   eax,eax
c00127b5:	74 19                	je     c00127d0 <etharp_output+0x34>
c00127b7:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c00127bd:	83 c0 01             	add    eax,0x1
c00127c0:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c00127c6:	b0 fe                	mov    al,0xfe
c00127c8:	e9 8b 01 00 00       	jmp    c0012958 <etharp_output+0x1bc>
c00127cd:	8d 76 00             	lea    esi,[esi+0x0]
c00127d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00127d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00127de:	83 ec 08             	sub    esp,0x8
c00127e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00127e5:	50                   	push   eax
c00127e6:	e8 65 16 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c00127eb:	83 c4 10             	add    esp,0x10
c00127ee:	0f b6 c0             	movzx  eax,al
c00127f1:	85 c0                	test   eax,eax
c00127f3:	74 0f                	je     c0012804 <etharp_output+0x68>
c00127f5:	c7 44 24 0c c4 0c 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030cc4
c00127fd:	e9 3a 01 00 00       	jmp    c001293c <etharp_output+0x1a0>
c0012802:	66 90                	xchg   ax,ax
c0012804:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012808:	8b 00                	mov    eax,DWORD PTR [eax]
c001280a:	25 f0 00 00 00       	and    eax,0xf0
c001280f:	3d e0 00 00 00       	cmp    eax,0xe0
c0012814:	75 42                	jne    c0012858 <etharp_output+0xbc>
c0012816:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001281b:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0012820:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012825:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012829:	83 c0 01             	add    eax,0x1
c001282c:	8a 00                	mov    al,BYTE PTR [eax]
c001282e:	83 e0 7f             	and    eax,0x7f
c0012831:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012839:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c001283c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012840:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012844:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012847:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001284b:	8d 44 24 06          	lea    eax,[esp+0x6]
c001284f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012853:	e9 e4 00 00 00       	jmp    c001293c <etharp_output+0x1a0>
c0012858:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001285c:	8b 10                	mov    edx,DWORD PTR [eax]
c001285e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012865:	31 c2                	xor    edx,eax
c0012867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001286b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001286e:	21 d0                	and    eax,edx
c0012870:	74 3a                	je     c00128ac <etharp_output+0x110>
c0012872:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012876:	8b 00                	mov    eax,DWORD PTR [eax]
c0012878:	0f b7 c0             	movzx  eax,ax
c001287b:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012880:	74 2a                	je     c00128ac <etharp_output+0x110>
c0012882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012886:	83 c0 0c             	add    eax,0xc
c0012889:	74 19                	je     c00128a4 <etharp_output+0x108>
c001288b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001288f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012892:	85 c0                	test   eax,eax
c0012894:	74 0e                	je     c00128a4 <etharp_output+0x108>
c0012896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001289a:	83 c0 0c             	add    eax,0xc
c001289d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00128a1:	eb 09                	jmp    c00128ac <etharp_output+0x110>
c00128a3:	90                   	nop
c00128a4:	b0 fc                	mov    al,0xfc
c00128a6:	e9 ad 00 00 00       	jmp    c0012958 <etharp_output+0x1bc>
c00128ab:	90                   	nop
c00128ac:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128b1:	0f b6 c0             	movzx  eax,al
c00128b4:	c1 e0 04             	shl    eax,0x4
c00128b7:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00128bc:	8a 00                	mov    al,BYTE PTR [eax]
c00128be:	0f b6 c0             	movzx  eax,al
c00128c1:	83 f8 02             	cmp    eax,0x2
c00128c4:	75 5a                	jne    c0012920 <etharp_output+0x184>
c00128c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00128cc:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128d1:	0f b6 c0             	movzx  eax,al
c00128d4:	c1 e0 04             	shl    eax,0x4
c00128d7:	05 04 a9 03 c0       	add    eax,0xc003a904
c00128dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00128de:	39 c2                	cmp    edx,eax
c00128e0:	75 3e                	jne    c0012920 <etharp_output+0x184>
c00128e2:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c00128e8:	83 c0 01             	add    eax,0x1
c00128eb:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c00128f1:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128f6:	0f b6 c0             	movzx  eax,al
c00128f9:	c1 e0 04             	shl    eax,0x4
c00128fc:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012901:	8d 50 08             	lea    edx,[eax+0x8]
c0012904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012908:	83 c0 23             	add    eax,0x23
c001290b:	52                   	push   edx
c001290c:	50                   	push   eax
c001290d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012915:	e8 ce f3 ff ff       	call   c0011ce8 <etharp_send_ip>
c001291a:	83 c4 10             	add    esp,0x10
c001291d:	eb 39                	jmp    c0012958 <etharp_output+0x1bc>
c001291f:	90                   	nop
c0012920:	83 ec 04             	sub    esp,0x4
c0012923:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012927:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001292b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001292f:	e8 2c fb ff ff       	call   c0012460 <etharp_query>
c0012934:	83 c4 10             	add    esp,0x10
c0012937:	eb 1f                	jmp    c0012958 <etharp_output+0x1bc>
c0012939:	8d 76 00             	lea    esi,[esi+0x0]
c001293c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012940:	83 c0 23             	add    eax,0x23
c0012943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012947:	50                   	push   eax
c0012948:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001294c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012950:	e8 93 f3 ff ff       	call   c0011ce8 <etharp_send_ip>
c0012955:	83 c4 10             	add    esp,0x10
c0012958:	83 c4 1c             	add    esp,0x1c
c001295b:	c3                   	ret    

c001295c <ethernet_input>:
c001295c:	83 ec 1c             	sub    esp,0x1c
c001295f:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001296a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001296e:	0f b7 c0             	movzx  eax,ax
c0012971:	83 f8 0e             	cmp    eax,0xe
c0012974:	77 26                	ja     c001299c <ethernet_input+0x40>
c0012976:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c001297c:	83 c0 01             	add    eax,0x1
c001297f:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012985:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c001298b:	83 c0 01             	add    eax,0x1
c001298e:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012994:	e9 ef 00 00 00       	jmp    c0012a88 <ethernet_input+0x12c>
c0012999:	8d 76 00             	lea    esi,[esi+0x0]
c001299c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00129ab:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00129af:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00129b4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00129b9:	83 f8 08             	cmp    eax,0x8
c00129bc:	74 0e                	je     c00129cc <ethernet_input+0x70>
c00129be:	3d 08 06 00 00       	cmp    eax,0x608
c00129c3:	74 6b                	je     c0012a30 <ethernet_input+0xd4>
c00129c5:	e9 92 00 00 00       	jmp    c0012a5c <ethernet_input+0x100>
c00129ca:	66 90                	xchg   ax,ax
c00129cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00129d0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00129d3:	0f b6 c0             	movzx  eax,al
c00129d6:	83 e0 20             	and    eax,0x20
c00129d9:	0f 84 a1 00 00 00    	je     c0012a80 <ethernet_input+0x124>
c00129df:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00129e4:	f7 d8                	neg    eax
c00129e6:	98                   	cwde   
c00129e7:	83 ec 08             	sub    esp,0x8
c00129ea:	50                   	push   eax
c00129eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129ef:	e8 cc 57 ff ff       	call   c00081c0 <pbuf_header>
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	0f b6 c0             	movzx  eax,al
c00129fa:	85 c0                	test   eax,eax
c00129fc:	74 1a                	je     c0012a18 <ethernet_input+0xbc>
c00129fe:	83 ec 08             	sub    esp,0x8
c0012a01:	68 48 0c 03 c0       	push   0xc0030c48
c0012a06:	68 26 fb 02 c0       	push   0xc002fb26
c0012a0b:	e8 94 d1 00 00       	call   c001fba4 <CPrintf>
c0012a10:	83 c4 10             	add    esp,0x10
c0012a13:	eb 73                	jmp    c0012a88 <ethernet_input+0x12c>
c0012a15:	8d 76 00             	lea    esi,[esi+0x0]
c0012a18:	83 ec 08             	sub    esp,0x8
c0012a1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a23:	e8 70 0c 00 00       	call   c0013698 <ip_input>
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	eb 4f                	jmp    c0012a7c <ethernet_input+0x120>
c0012a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a34:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012a37:	0f b6 c0             	movzx  eax,al
c0012a3a:	83 e0 20             	and    eax,0x20
c0012a3d:	74 45                	je     c0012a84 <ethernet_input+0x128>
c0012a3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a43:	83 c0 23             	add    eax,0x23
c0012a46:	83 ec 04             	sub    esp,0x4
c0012a49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a4d:	50                   	push   eax
c0012a4e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012a52:	e8 09 f5 ff ff       	call   c0011f60 <etharp_arp_input>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	eb 20                	jmp    c0012a7c <ethernet_input+0x120>
c0012a5c:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012a62:	83 c0 01             	add    eax,0x1
c0012a65:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012a6b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012a71:	83 c0 01             	add    eax,0x1
c0012a74:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012a7a:	eb 0c                	jmp    c0012a88 <ethernet_input+0x12c>
c0012a7c:	b0 00                	mov    al,0x0
c0012a7e:	eb 1c                	jmp    c0012a9c <ethernet_input+0x140>
c0012a80:	90                   	nop
c0012a81:	eb 05                	jmp    c0012a88 <ethernet_input+0x12c>
c0012a83:	90                   	nop
c0012a84:	90                   	nop
c0012a85:	8d 76 00             	lea    esi,[esi+0x0]
c0012a88:	83 ec 0c             	sub    esp,0xc
c0012a8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a8f:	e8 c8 58 ff ff       	call   c000835c <pbuf_free>
c0012a94:	83 c4 10             	add    esp,0x10
c0012a97:	b0 00                	mov    al,0x0
c0012a99:	8d 76 00             	lea    esi,[esi+0x0]
c0012a9c:	83 c4 1c             	add    esp,0x1c
c0012a9f:	c3                   	ret    

c0012aa0 <icmp_input>:
c0012aa0:	83 ec 2c             	sub    esp,0x2c
c0012aa3:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012aa9:	83 c0 01             	add    eax,0x1
c0012aac:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012ab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ab9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012abd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ac1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012ac4:	0f b7 c0             	movzx  eax,ax
c0012ac7:	83 ec 0c             	sub    esp,0xc
c0012aca:	50                   	push   eax
c0012acb:	e8 18 e1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012ad0:	83 c4 10             	add    esp,0x10
c0012ad3:	0f b7 c0             	movzx  eax,ax
c0012ad6:	c1 e8 08             	shr    eax,0x8
c0012ad9:	83 e0 0f             	and    eax,0xf
c0012adc:	c1 e0 02             	shl    eax,0x2
c0012adf:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012ae4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012ae9:	f7 d8                	neg    eax
c0012aeb:	98                   	cwde   
c0012aec:	83 ec 08             	sub    esp,0x8
c0012aef:	50                   	push   eax
c0012af0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012af4:	e8 c7 56 ff ff       	call   c00081c0 <pbuf_header>
c0012af9:	83 c4 10             	add    esp,0x10
c0012afc:	0f b6 c0             	movzx  eax,al
c0012aff:	85 c0                	test   eax,eax
c0012b01:	0f 85 a9 03 00 00    	jne    c0012eb0 <icmp_input+0x410>
c0012b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b0e:	0f b7 c0             	movzx  eax,ax
c0012b11:	83 f8 03             	cmp    eax,0x3
c0012b14:	0f 86 96 03 00 00    	jbe    c0012eb0 <icmp_input+0x410>
c0012b1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b21:	8a 00                	mov    al,BYTE PTR [eax]
c0012b23:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012b27:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012b2c:	85 c0                	test   eax,eax
c0012b2e:	0f 84 64 03 00 00    	je     c0012e98 <icmp_input+0x3f8>
c0012b34:	83 f8 08             	cmp    eax,0x8
c0012b37:	0f 85 3b 03 00 00    	jne    c0012e78 <icmp_input+0x3d8>
c0012b3d:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012b45:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b4a:	25 f0 00 00 00       	and    eax,0xf0
c0012b4f:	3d e0 00 00 00       	cmp    eax,0xe0
c0012b54:	75 0a                	jne    c0012b60 <icmp_input+0xc0>
c0012b56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b5e:	66 90                	xchg   ax,ax
c0012b60:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b65:	83 ec 08             	sub    esp,0x8
c0012b68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b6c:	50                   	push   eax
c0012b6d:	e8 de 12 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	0f b6 c0             	movzx  eax,al
c0012b78:	85 c0                	test   eax,eax
c0012b7a:	74 08                	je     c0012b84 <icmp_input+0xe4>
c0012b7c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b89:	75 25                	jne    c0012bb0 <icmp_input+0x110>
c0012b8b:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012b91:	83 c0 01             	add    eax,0x1
c0012b94:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ba1:	e8 b6 57 ff ff       	call   c000835c <pbuf_free>
c0012ba6:	83 c4 10             	add    esp,0x10
c0012ba9:	e9 4e 03 00 00       	jmp    c0012efc <icmp_input+0x45c>
c0012bae:	66 90                	xchg   ax,ax
c0012bb0:	90                   	nop
c0012bb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012bb8:	0f b7 c0             	movzx  eax,ax
c0012bbb:	83 f8 07             	cmp    eax,0x7
c0012bbe:	0f 86 f0 02 00 00    	jbe    c0012eb4 <icmp_input+0x414>
c0012bc4:	83 ec 0c             	sub    esp,0xc
c0012bc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bcb:	e8 50 09 00 00       	call   c0013520 <inet_chksum_pbuf>
c0012bd0:	83 c4 10             	add    esp,0x10
c0012bd3:	0f b7 c0             	movzx  eax,ax
c0012bd6:	85 c0                	test   eax,eax
c0012bd8:	74 26                	je     c0012c00 <icmp_input+0x160>
c0012bda:	83 ec 0c             	sub    esp,0xc
c0012bdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012be1:	e8 76 57 ff ff       	call   c000835c <pbuf_free>
c0012be6:	83 c4 10             	add    esp,0x10
c0012be9:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012bef:	83 c0 01             	add    eax,0x1
c0012bf2:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012bf8:	e9 ff 02 00 00       	jmp    c0012efc <icmp_input+0x45c>
c0012bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012c00:	83 ec 08             	sub    esp,0x8
c0012c03:	6a 22                	push   0x22
c0012c05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c09:	e8 b2 55 ff ff       	call   c00081c0 <pbuf_header>
c0012c0e:	83 c4 10             	add    esp,0x10
c0012c11:	0f b6 c0             	movzx  eax,al
c0012c14:	85 c0                	test   eax,eax
c0012c16:	0f 84 24 01 00 00    	je     c0012d40 <icmp_input+0x2a0>
c0012c1c:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012c21:	83 ec 08             	sub    esp,0x8
c0012c24:	50                   	push   eax
c0012c25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c29:	e8 92 55 ff ff       	call   c00081c0 <pbuf_header>
c0012c2e:	83 c4 10             	add    esp,0x10
c0012c31:	0f b6 c0             	movzx  eax,al
c0012c34:	85 c0                	test   eax,eax
c0012c36:	74 1c                	je     c0012c54 <icmp_input+0x1b4>
c0012c38:	83 ec 08             	sub    esp,0x8
c0012c3b:	68 cc 0c 03 c0       	push   0xc0030ccc
c0012c40:	68 26 fb 02 c0       	push   0xc002fb26
c0012c45:	e8 5a cf 00 00       	call   c001fba4 <CPrintf>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	e9 8a 02 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012c52:	66 90                	xchg   ax,ax
c0012c54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012c5b:	0f b7 c0             	movzx  eax,ax
c0012c5e:	83 ec 04             	sub    esp,0x4
c0012c61:	6a 00                	push   0x0
c0012c63:	50                   	push   eax
c0012c64:	6a 02                	push   0x2
c0012c66:	e8 c9 58 ff ff       	call   c0008534 <pbuf_alloc>
c0012c6b:	83 c4 10             	add    esp,0x10
c0012c6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c72:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012c77:	0f 84 5b 02 00 00    	je     c0012ed8 <icmp_input+0x438>
c0012c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c81:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012c85:	0f b7 c0             	movzx  eax,ax
c0012c88:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012c8d:	83 c2 08             	add    edx,0x8
c0012c90:	39 d0                	cmp    eax,edx
c0012c92:	73 18                	jae    c0012cac <icmp_input+0x20c>
c0012c94:	83 ec 08             	sub    esp,0x8
c0012c97:	68 00 0d 03 c0       	push   0xc0030d00
c0012c9c:	68 26 fb 02 c0       	push   0xc002fb26
c0012ca1:	e8 fe ce 00 00       	call   c001fba4 <CPrintf>
c0012ca6:	83 c4 10             	add    esp,0x10
c0012ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0012cac:	83 ec 08             	sub    esp,0x8
c0012caf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012cb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb7:	e8 d8 60 ff ff       	call   c0008d94 <pbuf_copy>
c0012cbc:	83 c4 10             	add    esp,0x10
c0012cbf:	0f be c0             	movsx  eax,al
c0012cc2:	85 c0                	test   eax,eax
c0012cc4:	74 1a                	je     c0012ce0 <icmp_input+0x240>
c0012cc6:	83 ec 08             	sub    esp,0x8
c0012cc9:	68 38 0d 03 c0       	push   0xc0030d38
c0012cce:	68 26 fb 02 c0       	push   0xc002fb26
c0012cd3:	e8 cc ce 00 00       	call   c001fba4 <CPrintf>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	e9 fc 01 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ce7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ceb:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012cf0:	f7 d8                	neg    eax
c0012cf2:	98                   	cwde   
c0012cf3:	83 ec 08             	sub    esp,0x8
c0012cf6:	50                   	push   eax
c0012cf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cfb:	e8 c0 54 ff ff       	call   c00081c0 <pbuf_header>
c0012d00:	83 c4 10             	add    esp,0x10
c0012d03:	0f b6 c0             	movzx  eax,al
c0012d06:	85 c0                	test   eax,eax
c0012d08:	74 1a                	je     c0012d24 <icmp_input+0x284>
c0012d0a:	83 ec 08             	sub    esp,0x8
c0012d0d:	68 60 0d 03 c0       	push   0xc0030d60
c0012d12:	68 26 fb 02 c0       	push   0xc002fb26
c0012d17:	e8 88 ce 00 00       	call   c001fba4 <CPrintf>
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	e9 b8 01 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012d24:	83 ec 0c             	sub    esp,0xc
c0012d27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d2b:	e8 2c 56 ff ff       	call   c000835c <pbuf_free>
c0012d30:	83 c4 10             	add    esp,0x10
c0012d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d3b:	eb 37                	jmp    c0012d74 <icmp_input+0x2d4>
c0012d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d40:	83 ec 08             	sub    esp,0x8
c0012d43:	6a de                	push   0xffffffde
c0012d45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d49:	e8 72 54 ff ff       	call   c00081c0 <pbuf_header>
c0012d4e:	83 c4 10             	add    esp,0x10
c0012d51:	0f b6 c0             	movzx  eax,al
c0012d54:	85 c0                	test   eax,eax
c0012d56:	74 1c                	je     c0012d74 <icmp_input+0x2d4>
c0012d58:	83 ec 08             	sub    esp,0x8
c0012d5b:	68 60 0d 03 c0       	push   0xc0030d60
c0012d60:	68 26 fb 02 c0       	push   0xc002fb26
c0012d65:	e8 3a ce 00 00       	call   c001fba4 <CPrintf>
c0012d6a:	83 c4 10             	add    esp,0x10
c0012d6d:	e9 6a 01 00 00       	jmp    c0012edc <icmp_input+0x43c>
c0012d72:	66 90                	xchg   ax,ax
c0012d74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d7f:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012d85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d89:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012d8c:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d96:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012d99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d9d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012da0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012da4:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012da8:	0f b7 c0             	movzx  eax,ax
c0012dab:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012db0:	76 16                	jbe    c0012dc8 <icmp_input+0x328>
c0012db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012db6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dba:	83 c0 09             	add    eax,0x9
c0012dbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dc1:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012dc5:	eb 15                	jmp    c0012ddc <icmp_input+0x33c>
c0012dc7:	90                   	nop
c0012dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dcc:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dd0:	83 c0 08             	add    eax,0x8
c0012dd3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dd7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012ddb:	90                   	nop
c0012ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012de0:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012de8:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012dee:	83 ec 08             	sub    esp,0x8
c0012df1:	6a 14                	push   0x14
c0012df3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012df7:	e8 fc 06 00 00       	call   c00134f8 <inet_chksum>
c0012dfc:	83 c4 10             	add    esp,0x10
c0012dff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e03:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012e07:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012e0d:	83 c0 01             	add    eax,0x1
c0012e10:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012e16:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012e1b:	83 ec 08             	sub    esp,0x8
c0012e1e:	50                   	push   eax
c0012e1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e23:	e8 98 53 ff ff       	call   c00081c0 <pbuf_header>
c0012e28:	83 c4 10             	add    esp,0x10
c0012e2b:	0f b6 c0             	movzx  eax,al
c0012e2e:	85 c0                	test   eax,eax
c0012e30:	74 1a                	je     c0012e4c <icmp_input+0x3ac>
c0012e32:	83 ec 08             	sub    esp,0x8
c0012e35:	68 48 0c 03 c0       	push   0xc0030c48
c0012e3a:	68 26 fb 02 c0       	push   0xc002fb26
c0012e3f:	e8 60 cd 00 00       	call   c001fba4 <CPrintf>
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	eb 53                	jmp    c0012e9c <icmp_input+0x3fc>
c0012e49:	8d 76 00             	lea    esi,[esi+0x0]
c0012e4c:	83 ec 04             	sub    esp,0x4
c0012e4f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e53:	6a 01                	push   0x1
c0012e55:	6a 00                	push   0x0
c0012e57:	68 ff 00 00 00       	push   0xff
c0012e5c:	6a 00                	push   0x0
c0012e5e:	68 98 68 03 c0       	push   0xc0036898
c0012e63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e67:	e8 70 0c 00 00       	call   c0013adc <ip_output_if>
c0012e6c:	83 c4 20             	add    esp,0x20
c0012e6f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012e73:	eb 27                	jmp    c0012e9c <icmp_input+0x3fc>
c0012e75:	8d 76 00             	lea    esi,[esi+0x0]
c0012e78:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012e7e:	83 c0 01             	add    eax,0x1
c0012e81:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012e87:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012e8d:	83 c0 01             	add    eax,0x1
c0012e90:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012e96:	eb 04                	jmp    c0012e9c <icmp_input+0x3fc>
c0012e98:	90                   	nop
c0012e99:	8d 76 00             	lea    esi,[esi+0x0]
c0012e9c:	83 ec 0c             	sub    esp,0xc
c0012e9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ea3:	e8 b4 54 ff ff       	call   c000835c <pbuf_free>
c0012ea8:	83 c4 10             	add    esp,0x10
c0012eab:	eb 4f                	jmp    c0012efc <icmp_input+0x45c>
c0012ead:	8d 76 00             	lea    esi,[esi+0x0]
c0012eb0:	90                   	nop
c0012eb1:	eb 05                	jmp    c0012eb8 <icmp_input+0x418>
c0012eb3:	90                   	nop
c0012eb4:	90                   	nop
c0012eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0012eb8:	83 ec 0c             	sub    esp,0xc
c0012ebb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ebf:	e8 98 54 ff ff       	call   c000835c <pbuf_free>
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012ecd:	83 c0 01             	add    eax,0x1
c0012ed0:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012ed6:	eb 24                	jmp    c0012efc <icmp_input+0x45c>
c0012ed8:	90                   	nop
c0012ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ee3:	e8 74 54 ff ff       	call   c000835c <pbuf_free>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012ef1:	83 c0 01             	add    eax,0x1
c0012ef4:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012efa:	90                   	nop
c0012efb:	90                   	nop
c0012efc:	83 c4 2c             	add    esp,0x2c
c0012eff:	c3                   	ret    

c0012f00 <icmp_send_response>:
c0012f00:	83 ec 2c             	sub    esp,0x2c
c0012f03:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012f07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f0b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012f0f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012f13:	83 ec 04             	sub    esp,0x4
c0012f16:	6a 00                	push   0x0
c0012f18:	6a 24                	push   0x24
c0012f1a:	6a 01                	push   0x1
c0012f1c:	e8 13 56 ff ff       	call   c0008534 <pbuf_alloc>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f28:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f2d:	0f 84 fd 00 00 00    	je     c0013030 <icmp_send_response+0x130>
c0012f33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f37:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012f3b:	0f b7 c0             	movzx  eax,ax
c0012f3e:	83 f8 23             	cmp    eax,0x23
c0012f41:	77 15                	ja     c0012f58 <icmp_send_response+0x58>
c0012f43:	83 ec 08             	sub    esp,0x8
c0012f46:	68 94 0d 03 c0       	push   0xc0030d94
c0012f4b:	68 26 fb 02 c0       	push   0xc002fb26
c0012f50:	e8 4f cc 00 00       	call   c001fba4 <CPrintf>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f72:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012f76:	88 10                	mov    BYTE PTR [eax],dl
c0012f78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f7c:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012f80:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012f83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f87:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0012f8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f91:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0012f97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012fa2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012fa5:	83 c2 08             	add    edx,0x8
c0012fa8:	83 ec 04             	sub    esp,0x4
c0012fab:	6a 1c                	push   0x1c
c0012fad:	50                   	push   eax
c0012fae:	52                   	push   edx
c0012faf:	e8 c6 d3 fe ff       	call   c000037a <memcpy>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fbb:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0012fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fc5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012fc9:	0f b7 c0             	movzx  eax,ax
c0012fcc:	83 ec 08             	sub    esp,0x8
c0012fcf:	50                   	push   eax
c0012fd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012fd4:	e8 1f 05 00 00       	call   c00134f8 <inet_chksum>
c0012fd9:	83 c4 10             	add    esp,0x10
c0012fdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fe0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012fe4:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012fea:	83 c0 01             	add    eax,0x1
c0012fed:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012ff3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ffa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ffe:	83 ec 08             	sub    esp,0x8
c0013001:	6a 01                	push   0x1
c0013003:	6a 00                	push   0x0
c0013005:	68 ff 00 00 00       	push   0xff
c001300a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001300e:	50                   	push   eax
c001300f:	6a 00                	push   0x0
c0013011:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013015:	e8 92 0d 00 00       	call   c0013dac <ip_output>
c001301a:	83 c4 20             	add    esp,0x20
c001301d:	83 ec 0c             	sub    esp,0xc
c0013020:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013024:	e8 33 53 ff ff       	call   c000835c <pbuf_free>
c0013029:	83 c4 10             	add    esp,0x10
c001302c:	eb 06                	jmp    c0013034 <icmp_send_response+0x134>
c001302e:	66 90                	xchg   ax,ax
c0013030:	90                   	nop
c0013031:	8d 76 00             	lea    esi,[esi+0x0]
c0013034:	83 c4 2c             	add    esp,0x2c
c0013037:	c3                   	ret    

c0013038 <icmp_dest_unreach>:
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001303f:	0f b6 c0             	movzx  eax,al
c0013042:	83 ec 04             	sub    esp,0x4
c0013045:	50                   	push   eax
c0013046:	6a 03                	push   0x3
c0013048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001304c:	e8 af fe ff ff       	call   c0012f00 <icmp_send_response>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	90                   	nop
c0013055:	83 c4 0c             	add    esp,0xc
c0013058:	c3                   	ret    
c0013059:	8d 76 00             	lea    esi,[esi+0x0]

c001305c <icmp_time_exceeded>:
c001305c:	83 ec 0c             	sub    esp,0xc
c001305f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013063:	0f b6 c0             	movzx  eax,al
c0013066:	83 ec 04             	sub    esp,0x4
c0013069:	50                   	push   eax
c001306a:	6a 0b                	push   0xb
c001306c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013070:	e8 8b fe ff ff       	call   c0012f00 <icmp_send_response>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	90                   	nop
c0013079:	83 c4 0c             	add    esp,0xc
c001307c:	c3                   	ret    
c001307d:	66 90                	xchg   ax,ax
c001307f:	90                   	nop

c0013080 <lwip_standard_chksum>:
c0013080:	83 ec 2c             	sub    esp,0x2c
c0013083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013087:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001308b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0013092:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001309a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001309e:	83 e0 01             	and    eax,0x1
c00130a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00130aa:	74 24                	je     c00130d0 <lwip_standard_chksum+0x50>
c00130ac:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00130b1:	7e 1d                	jle    c00130d0 <lwip_standard_chksum+0x50>
c00130b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00130b7:	8d 42 01             	lea    eax,[edx+0x1]
c00130ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130be:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00130c2:	83 c0 01             	add    eax,0x1
c00130c5:	8a 12                	mov    dl,BYTE PTR [edx]
c00130c7:	88 10                	mov    BYTE PTR [eax],dl
c00130c9:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c00130ce:	66 90                	xchg   ax,ax
c00130d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130d8:	eb 1e                	jmp    c00130f8 <lwip_standard_chksum+0x78>
c00130da:	66 90                	xchg   ax,ax
c00130dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130e0:	8d 50 02             	lea    edx,[eax+0x2]
c00130e3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00130e7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00130ea:	0f b7 c0             	movzx  eax,ax
c00130ed:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00130f1:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c00130f6:	66 90                	xchg   ax,ax
c00130f8:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00130fd:	7f dd                	jg     c00130dc <lwip_standard_chksum+0x5c>
c00130ff:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013104:	7e 0e                	jle    c0013114 <lwip_standard_chksum+0x94>
c0013106:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001310a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001310e:	8a 12                	mov    dl,BYTE PTR [edx]
c0013110:	88 10                	mov    BYTE PTR [eax],dl
c0013112:	66 90                	xchg   ax,ax
c0013114:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013119:	0f b7 c0             	movzx  eax,ax
c001311c:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013124:	c1 e8 10             	shr    eax,0x10
c0013127:	89 c2                	mov    edx,eax
c0013129:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001312d:	0f b7 c0             	movzx  eax,ax
c0013130:	01 d0                	add    eax,edx
c0013132:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013136:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001313a:	c1 e8 10             	shr    eax,0x10
c001313d:	89 c2                	mov    edx,eax
c001313f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013143:	0f b7 c0             	movzx  eax,ax
c0013146:	01 d0                	add    eax,edx
c0013148:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001314c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013151:	74 1d                	je     c0013170 <lwip_standard_chksum+0xf0>
c0013153:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013157:	0f b7 c0             	movzx  eax,ax
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	50                   	push   eax
c001315e:	e8 85 da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013163:	83 c4 10             	add    esp,0x10
c0013166:	0f b7 c0             	movzx  eax,ax
c0013169:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001316d:	8d 76 00             	lea    esi,[esi+0x0]
c0013170:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013174:	83 c4 2c             	add    esp,0x2c
c0013177:	c3                   	ret    

c0013178 <inet_chksum_pseudo>:
c0013178:	83 ec 2c             	sub    esp,0x2c
c001317b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001317f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013183:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013187:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001318c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013194:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001319d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131a1:	e9 8a 00 00 00       	jmp    c0013230 <inet_chksum_pseudo+0xb8>
c00131a6:	66 90                	xchg   ax,ax
c00131a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131ac:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131b0:	0f b7 d0             	movzx  edx,ax
c00131b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131ba:	83 ec 08             	sub    esp,0x8
c00131bd:	52                   	push   edx
c00131be:	50                   	push   eax
c00131bf:	e8 bc fe ff ff       	call   c0013080 <lwip_standard_chksum>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	0f b7 c0             	movzx  eax,ax
c00131ca:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131d2:	c1 e8 10             	shr    eax,0x10
c00131d5:	89 c2                	mov    edx,eax
c00131d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131db:	0f b7 c0             	movzx  eax,ax
c00131de:	01 d0                	add    eax,edx
c00131e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131e8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131ec:	83 e0 01             	and    eax,0x1
c00131ef:	0f b7 c0             	movzx  eax,ax
c00131f2:	85 c0                	test   eax,eax
c00131f4:	74 2e                	je     c0013224 <inet_chksum_pseudo+0xac>
c00131f6:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00131fa:	ba 01 00 00 00       	mov    edx,0x1
c00131ff:	29 c2                	sub    edx,eax
c0013201:	89 d0                	mov    eax,edx
c0013203:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001320b:	0f b7 c0             	movzx  eax,ax
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	50                   	push   eax
c0013212:	e8 d1 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013217:	83 c4 10             	add    esp,0x10
c001321a:	0f b7 c0             	movzx  eax,ax
c001321d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013221:	8d 76 00             	lea    esi,[esi+0x0]
c0013224:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013228:	8b 00                	mov    eax,DWORD PTR [eax]
c001322a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001322e:	66 90                	xchg   ax,ax
c0013230:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013235:	0f 85 6d ff ff ff    	jne    c00131a8 <inet_chksum_pseudo+0x30>
c001323b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013240:	85 c0                	test   eax,eax
c0013242:	74 1c                	je     c0013260 <inet_chksum_pseudo+0xe8>
c0013244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013248:	0f b7 c0             	movzx  eax,ax
c001324b:	83 ec 0c             	sub    esp,0xc
c001324e:	50                   	push   eax
c001324f:	e8 94 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013254:	83 c4 10             	add    esp,0x10
c0013257:	0f b7 c0             	movzx  eax,ax
c001325a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001325e:	66 90                	xchg   ax,ax
c0013260:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013264:	8b 00                	mov    eax,DWORD PTR [eax]
c0013266:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001326a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001326e:	0f b7 c0             	movzx  eax,ax
c0013271:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013279:	c1 e8 10             	shr    eax,0x10
c001327c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013280:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013284:	8b 00                	mov    eax,DWORD PTR [eax]
c0013286:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328e:	0f b7 c0             	movzx  eax,ax
c0013291:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013299:	c1 e8 10             	shr    eax,0x10
c001329c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00132a5:	83 ec 0c             	sub    esp,0xc
c00132a8:	50                   	push   eax
c00132a9:	e8 3a d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	0f b7 c0             	movzx  eax,ax
c00132b4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132b8:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00132bd:	83 ec 0c             	sub    esp,0xc
c00132c0:	50                   	push   eax
c00132c1:	e8 22 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	0f b7 c0             	movzx  eax,ax
c00132cc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132d4:	c1 e8 10             	shr    eax,0x10
c00132d7:	89 c2                	mov    edx,eax
c00132d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132dd:	0f b7 c0             	movzx  eax,ax
c00132e0:	01 d0                	add    eax,edx
c00132e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132ea:	c1 e8 10             	shr    eax,0x10
c00132ed:	89 c2                	mov    edx,eax
c00132ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f3:	0f b7 c0             	movzx  eax,ax
c00132f6:	01 d0                	add    eax,edx
c00132f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013300:	f7 d0                	not    eax
c0013302:	83 c4 2c             	add    esp,0x2c
c0013305:	c3                   	ret    
c0013306:	66 90                	xchg   ax,ax

c0013308 <inet_chksum_pseudo_partial>:
c0013308:	83 ec 2c             	sub    esp,0x2c
c001330b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001330f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013313:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013317:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001331b:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013320:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013325:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001332d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013336:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001333a:	e9 d9 00 00 00       	jmp    c0013418 <inet_chksum_pseudo_partial+0x110>
c001333f:	90                   	nop
c0013340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013344:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013348:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001334d:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013352:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013357:	39 c2                	cmp    edx,eax
c0013359:	76 09                	jbe    c0013364 <inet_chksum_pseudo_partial+0x5c>
c001335b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001335f:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013364:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013369:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001336d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013370:	83 ec 08             	sub    esp,0x8
c0013373:	52                   	push   edx
c0013374:	50                   	push   eax
c0013375:	e8 06 fd ff ff       	call   c0013080 <lwip_standard_chksum>
c001337a:	83 c4 10             	add    esp,0x10
c001337d:	0f b7 c0             	movzx  eax,ax
c0013380:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013384:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001338c:	89 d1                	mov    ecx,edx
c001338e:	29 c1                	sub    ecx,eax
c0013390:	89 c8                	mov    eax,ecx
c0013392:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013397:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001339c:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00133a1:	76 15                	jbe    c00133b8 <inet_chksum_pseudo_partial+0xb0>
c00133a3:	83 ec 08             	sub    esp,0x8
c00133a6:	68 c0 0d 03 c0       	push   0xc0030dc0
c00133ab:	68 26 fb 02 c0       	push   0xc002fb26
c00133b0:	e8 ef c7 00 00       	call   c001fba4 <CPrintf>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133bc:	c1 e8 10             	shr    eax,0x10
c00133bf:	89 c2                	mov    edx,eax
c00133c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133c5:	0f b7 c0             	movzx  eax,ax
c00133c8:	01 d0                	add    eax,edx
c00133ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d2:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00133d6:	83 e0 01             	and    eax,0x1
c00133d9:	0f b7 c0             	movzx  eax,ax
c00133dc:	85 c0                	test   eax,eax
c00133de:	74 2c                	je     c001340c <inet_chksum_pseudo_partial+0x104>
c00133e0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00133e4:	ba 01 00 00 00       	mov    edx,0x1
c00133e9:	29 c2                	sub    edx,eax
c00133eb:	89 d0                	mov    eax,edx
c00133ed:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00133f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133f5:	0f b7 c0             	movzx  eax,ax
c00133f8:	83 ec 0c             	sub    esp,0xc
c00133fb:	50                   	push   eax
c00133fc:	e8 e7 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	0f b7 c0             	movzx  eax,ax
c0013407:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001340b:	90                   	nop
c001340c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013410:	8b 00                	mov    eax,DWORD PTR [eax]
c0013412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013416:	66 90                	xchg   ax,ax
c0013418:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001341d:	74 0d                	je     c001342c <inet_chksum_pseudo_partial+0x124>
c001341f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013424:	85 c0                	test   eax,eax
c0013426:	0f 85 14 ff ff ff    	jne    c0013340 <inet_chksum_pseudo_partial+0x38>
c001342c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013431:	85 c0                	test   eax,eax
c0013433:	74 1b                	je     c0013450 <inet_chksum_pseudo_partial+0x148>
c0013435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013439:	0f b7 c0             	movzx  eax,ax
c001343c:	83 ec 0c             	sub    esp,0xc
c001343f:	50                   	push   eax
c0013440:	e8 a3 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	0f b7 c0             	movzx  eax,ax
c001344b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001344f:	90                   	nop
c0013450:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013454:	8b 00                	mov    eax,DWORD PTR [eax]
c0013456:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	0f b7 c0             	movzx  eax,ax
c0013461:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013469:	c1 e8 10             	shr    eax,0x10
c001346c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013470:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013474:	8b 00                	mov    eax,DWORD PTR [eax]
c0013476:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001347a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347e:	0f b7 c0             	movzx  eax,ax
c0013481:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013489:	c1 e8 10             	shr    eax,0x10
c001348c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013490:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013495:	83 ec 0c             	sub    esp,0xc
c0013498:	50                   	push   eax
c0013499:	e8 4a d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001349e:	83 c4 10             	add    esp,0x10
c00134a1:	0f b7 c0             	movzx  eax,ax
c00134a4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134a8:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00134ad:	83 ec 0c             	sub    esp,0xc
c00134b0:	50                   	push   eax
c00134b1:	e8 32 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00134b6:	83 c4 10             	add    esp,0x10
c00134b9:	0f b7 c0             	movzx  eax,ax
c00134bc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134c4:	c1 e8 10             	shr    eax,0x10
c00134c7:	89 c2                	mov    edx,eax
c00134c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134cd:	0f b7 c0             	movzx  eax,ax
c00134d0:	01 d0                	add    eax,edx
c00134d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134da:	c1 e8 10             	shr    eax,0x10
c00134dd:	89 c2                	mov    edx,eax
c00134df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134e3:	0f b7 c0             	movzx  eax,ax
c00134e6:	01 d0                	add    eax,edx
c00134e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134f0:	f7 d0                	not    eax
c00134f2:	83 c4 2c             	add    esp,0x2c
c00134f5:	c3                   	ret    
c00134f6:	66 90                	xchg   ax,ax

c00134f8 <inet_chksum>:
c00134f8:	83 ec 1c             	sub    esp,0x1c
c00134fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00134ff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013504:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013509:	83 ec 08             	sub    esp,0x8
c001350c:	50                   	push   eax
c001350d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013511:	e8 6a fb ff ff       	call   c0013080 <lwip_standard_chksum>
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	f7 d0                	not    eax
c001351b:	83 c4 1c             	add    esp,0x1c
c001351e:	c3                   	ret    
c001351f:	90                   	nop

c0013520 <inet_chksum_pbuf>:
c0013520:	83 ec 1c             	sub    esp,0x1c
c0013523:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001352b:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013534:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013538:	e9 8b 00 00 00       	jmp    c00135c8 <inet_chksum_pbuf+0xa8>
c001353d:	8d 76 00             	lea    esi,[esi+0x0]
c0013540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013544:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013548:	0f b7 d0             	movzx  edx,ax
c001354b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001354f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013552:	83 ec 08             	sub    esp,0x8
c0013555:	52                   	push   edx
c0013556:	50                   	push   eax
c0013557:	e8 24 fb ff ff       	call   c0013080 <lwip_standard_chksum>
c001355c:	83 c4 10             	add    esp,0x10
c001355f:	0f b7 c0             	movzx  eax,ax
c0013562:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0013566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001356a:	c1 e8 10             	shr    eax,0x10
c001356d:	89 c2                	mov    edx,eax
c001356f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013573:	0f b7 c0             	movzx  eax,ax
c0013576:	01 d0                	add    eax,edx
c0013578:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001357c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013580:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013584:	83 e0 01             	and    eax,0x1
c0013587:	0f b7 c0             	movzx  eax,ax
c001358a:	85 c0                	test   eax,eax
c001358c:	74 2e                	je     c00135bc <inet_chksum_pbuf+0x9c>
c001358e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0013592:	ba 01 00 00 00       	mov    edx,0x1
c0013597:	29 c2                	sub    edx,eax
c0013599:	89 d0                	mov    eax,edx
c001359b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001359f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135a3:	0f b7 c0             	movzx  eax,ax
c00135a6:	83 ec 0c             	sub    esp,0xc
c00135a9:	50                   	push   eax
c00135aa:	e8 39 d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135af:	83 c4 10             	add    esp,0x10
c00135b2:	0f b7 c0             	movzx  eax,ax
c00135b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135b9:	8d 76 00             	lea    esi,[esi+0x0]
c00135bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00135c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00135c6:	66 90                	xchg   ax,ax
c00135c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00135cd:	0f 85 6d ff ff ff    	jne    c0013540 <inet_chksum_pbuf+0x20>
c00135d3:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00135d8:	85 c0                	test   eax,eax
c00135da:	74 1c                	je     c00135f8 <inet_chksum_pbuf+0xd8>
c00135dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135e0:	0f b7 c0             	movzx  eax,ax
c00135e3:	83 ec 0c             	sub    esp,0xc
c00135e6:	50                   	push   eax
c00135e7:	e8 fc d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	0f b7 c0             	movzx  eax,ax
c00135f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135f6:	66 90                	xchg   ax,ax
c00135f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135fc:	f7 d0                	not    eax
c00135fe:	83 c4 1c             	add    esp,0x1c
c0013601:	c3                   	ret    
c0013602:	66 90                	xchg   ax,ax

c0013604 <ip_route>:
c0013604:	83 ec 10             	sub    esp,0x10
c0013607:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c001360c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013610:	eb 42                	jmp    c0013654 <ip_route+0x50>
c0013612:	66 90                	xchg   ax,ax
c0013614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013618:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001361b:	83 e0 01             	and    eax,0x1
c001361e:	0f b6 c0             	movzx  eax,al
c0013621:	85 c0                	test   eax,eax
c0013623:	74 23                	je     c0013648 <ip_route+0x44>
c0013625:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013629:	8b 10                	mov    edx,DWORD PTR [eax]
c001362b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001362f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013632:	31 c2                	xor    edx,eax
c0013634:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013638:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001363b:	21 d0                	and    eax,edx
c001363d:	75 09                	jne    c0013648 <ip_route+0x44>
c001363f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013643:	eb 4f                	jmp    c0013694 <ip_route+0x90>
c0013645:	8d 76 00             	lea    esi,[esi+0x0]
c0013648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001364c:	8b 00                	mov    eax,DWORD PTR [eax]
c001364e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013652:	66 90                	xchg   ax,ax
c0013654:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013659:	75 b9                	jne    c0013614 <ip_route+0x10>
c001365b:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013660:	85 c0                	test   eax,eax
c0013662:	74 10                	je     c0013674 <ip_route+0x70>
c0013664:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013669:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001366c:	0f b6 c0             	movzx  eax,al
c001366f:	83 e0 01             	and    eax,0x1
c0013672:	75 18                	jne    c001368c <ip_route+0x88>
c0013674:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c001367a:	83 c0 01             	add    eax,0x1
c001367d:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013683:	b8 00 00 00 00       	mov    eax,0x0
c0013688:	eb 0a                	jmp    c0013694 <ip_route+0x90>
c001368a:	66 90                	xchg   ax,ax
c001368c:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013691:	8d 76 00             	lea    esi,[esi+0x0]
c0013694:	83 c4 10             	add    esp,0x10
c0013697:	c3                   	ret    

c0013698 <ip_input>:
c0013698:	83 ec 1c             	sub    esp,0x1c
c001369b:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c00136a1:	83 c0 01             	add    eax,0x1
c00136a4:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c00136aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136b9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00136bc:	0f b7 c0             	movzx  eax,ax
c00136bf:	83 ec 0c             	sub    esp,0xc
c00136c2:	50                   	push   eax
c00136c3:	e8 20 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	0f b7 c0             	movzx  eax,ax
c00136ce:	c1 e8 0c             	shr    eax,0xc
c00136d1:	0f b7 c0             	movzx  eax,ax
c00136d4:	83 f8 04             	cmp    eax,0x4
c00136d7:	74 37                	je     c0013710 <ip_input+0x78>
c00136d9:	83 ec 0c             	sub    esp,0xc
c00136dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136e0:	e8 77 4c ff ff       	call   c000835c <pbuf_free>
c00136e5:	83 c4 10             	add    esp,0x10
c00136e8:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c00136ee:	83 c0 01             	add    eax,0x1
c00136f1:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c00136f7:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00136fd:	83 c0 01             	add    eax,0x1
c0013700:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013706:	b0 00                	mov    al,0x0
c0013708:	e9 cb 03 00 00       	jmp    c0013ad8 <ip_input+0x440>
c001370d:	8d 76 00             	lea    esi,[esi+0x0]
c0013710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013714:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013717:	0f b7 c0             	movzx  eax,ax
c001371a:	83 ec 0c             	sub    esp,0xc
c001371d:	50                   	push   eax
c001371e:	e8 c5 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013723:	83 c4 10             	add    esp,0x10
c0013726:	0f b7 c0             	movzx  eax,ax
c0013729:	c1 e8 08             	shr    eax,0x8
c001372c:	83 e0 0f             	and    eax,0xf
c001372f:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013734:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013739:	c1 e0 02             	shl    eax,0x2
c001373c:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013745:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013749:	0f b7 c0             	movzx  eax,ax
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	50                   	push   eax
c0013750:	e8 93 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013755:	83 c4 10             	add    esp,0x10
c0013758:	66 89 04 24          	mov    WORD PTR [esp],ax
c001375c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013760:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013764:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013769:	0f b7 c0             	movzx  eax,ax
c001376c:	39 c2                	cmp    edx,eax
c001376e:	77 14                	ja     c0013784 <ip_input+0xec>
c0013770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013774:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013777:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c001377b:	0f b7 c0             	movzx  eax,ax
c001377e:	39 c2                	cmp    edx,eax
c0013780:	76 36                	jbe    c00137b8 <ip_input+0x120>
c0013782:	66 90                	xchg   ax,ax
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001378b:	e8 cc 4b ff ff       	call   c000835c <pbuf_free>
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c0013799:	83 c0 01             	add    eax,0x1
c001379c:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c00137a2:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137a8:	83 c0 01             	add    eax,0x1
c00137ab:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00137b1:	b0 00                	mov    al,0x0
c00137b3:	e9 20 03 00 00       	jmp    c0013ad8 <ip_input+0x440>
c00137b8:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c00137bd:	83 ec 08             	sub    esp,0x8
c00137c0:	50                   	push   eax
c00137c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137c5:	e8 2e fd ff ff       	call   c00134f8 <inet_chksum>
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	0f b7 c0             	movzx  eax,ax
c00137d0:	85 c0                	test   eax,eax
c00137d2:	74 34                	je     c0013808 <ip_input+0x170>
c00137d4:	83 ec 0c             	sub    esp,0xc
c00137d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137db:	e8 7c 4b ff ff       	call   c000835c <pbuf_free>
c00137e0:	83 c4 10             	add    esp,0x10
c00137e3:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c00137e9:	83 c0 01             	add    eax,0x1
c00137ec:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c00137f2:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137f8:	83 c0 01             	add    eax,0x1
c00137fb:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013801:	b0 00                	mov    al,0x0
c0013803:	e9 d0 02 00 00       	jmp    c0013ad8 <ip_input+0x440>
c0013808:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001380c:	83 ec 08             	sub    esp,0x8
c001380f:	50                   	push   eax
c0013810:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013814:	e8 13 51 ff ff       	call   c000892c <pbuf_realloc>
c0013819:	83 c4 10             	add    esp,0x10
c001381c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013820:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013823:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c0013828:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001382c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001382f:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013834:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001383c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013840:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013844:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013848:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001384b:	83 e0 01             	and    eax,0x1
c001384e:	0f b6 c0             	movzx  eax,al
c0013851:	85 c0                	test   eax,eax
c0013853:	74 43                	je     c0013898 <ip_input+0x200>
c0013855:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013859:	83 c0 04             	add    eax,0x4
c001385c:	74 3a                	je     c0013898 <ip_input+0x200>
c001385e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013862:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013865:	85 c0                	test   eax,eax
c0013867:	74 2f                	je     c0013898 <ip_input+0x200>
c0013869:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c001386f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013873:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013876:	39 c2                	cmp    edx,eax
c0013878:	74 66                	je     c00138e0 <ip_input+0x248>
c001387a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001387f:	83 ec 08             	sub    esp,0x8
c0013882:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013886:	50                   	push   eax
c0013887:	e8 c4 05 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c001388c:	83 c4 10             	add    esp,0x10
c001388f:	0f b6 c0             	movzx  eax,al
c0013892:	85 c0                	test   eax,eax
c0013894:	75 4a                	jne    c00138e0 <ip_input+0x248>
c0013896:	66 90                	xchg   ax,ax
c0013898:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001389d:	74 15                	je     c00138b4 <ip_input+0x21c>
c001389f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00138a7:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00138ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138b0:	eb 0e                	jmp    c00138c0 <ip_input+0x228>
c00138b2:	66 90                	xchg   ax,ax
c00138b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00138ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138be:	66 90                	xchg   ax,ax
c00138c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138c4:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00138c8:	75 0a                	jne    c00138d4 <ip_input+0x23c>
c00138ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00138d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138d4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138d9:	0f 85 65 ff ff ff    	jne    c0013844 <ip_input+0x1ac>
c00138df:	90                   	nop
c00138e0:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00138e5:	83 ec 08             	sub    esp,0x8
c00138e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138ec:	50                   	push   eax
c00138ed:	e8 5e 05 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c00138f2:	83 c4 10             	add    esp,0x10
c00138f5:	0f b6 c0             	movzx  eax,al
c00138f8:	85 c0                	test   eax,eax
c00138fa:	75 14                	jne    c0013910 <ip_input+0x278>
c00138fc:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013901:	25 f0 00 00 00       	and    eax,0xf0
c0013906:	3d e0 00 00 00       	cmp    eax,0xe0
c001390b:	75 2b                	jne    c0013938 <ip_input+0x2a0>
c001390d:	8d 76 00             	lea    esi,[esi+0x0]
c0013910:	83 ec 0c             	sub    esp,0xc
c0013913:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013917:	e8 40 4a ff ff       	call   c000835c <pbuf_free>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013925:	83 c0 01             	add    eax,0x1
c0013928:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001392e:	b0 00                	mov    al,0x0
c0013930:	e9 a3 01 00 00       	jmp    c0013ad8 <ip_input+0x440>
c0013935:	8d 76 00             	lea    esi,[esi+0x0]
c0013938:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001393d:	75 19                	jne    c0013958 <ip_input+0x2c0>
c001393f:	83 ec 0c             	sub    esp,0xc
c0013942:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013946:	e8 11 4a ff ff       	call   c000835c <pbuf_free>
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	b0 00                	mov    al,0x0
c0013950:	e9 83 01 00 00       	jmp    c0013ad8 <ip_input+0x440>
c0013955:	8d 76 00             	lea    esi,[esi+0x0]
c0013958:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001395c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013960:	0f b7 c0             	movzx  eax,ax
c0013963:	25 3f ff 00 00       	and    eax,0xff3f
c0013968:	74 2e                	je     c0013998 <ip_input+0x300>
c001396a:	83 ec 0c             	sub    esp,0xc
c001396d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013971:	e8 7a 13 00 00       	call   c0014cf0 <ip_reass>
c0013976:	83 c4 10             	add    esp,0x10
c0013979:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001397d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013982:	75 08                	jne    c001398c <ip_input+0x2f4>
c0013984:	b0 00                	mov    al,0x0
c0013986:	e9 4d 01 00 00       	jmp    c0013ad8 <ip_input+0x440>
c001398b:	90                   	nop
c001398c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013990:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013997:	90                   	nop
c0013998:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001399c:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c00139a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139a5:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c00139aa:	83 ec 08             	sub    esp,0x8
c00139ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b5:	e8 c6 5c ff ff       	call   c0009680 <raw_input>
c00139ba:	83 c4 10             	add    esp,0x10
c00139bd:	0f b6 c0             	movzx  eax,al
c00139c0:	85 c0                	test   eax,eax
c00139c2:	0f 85 e0 00 00 00    	jne    c0013aa8 <ip_input+0x410>
c00139c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139cc:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00139cf:	0f b6 c0             	movzx  eax,al
c00139d2:	83 f8 06             	cmp    eax,0x6
c00139d5:	74 25                	je     c00139fc <ip_input+0x364>
c00139d7:	83 f8 11             	cmp    eax,0x11
c00139da:	74 08                	je     c00139e4 <ip_input+0x34c>
c00139dc:	83 f8 01             	cmp    eax,0x1
c00139df:	74 33                	je     c0013a14 <ip_input+0x37c>
c00139e1:	eb 49                	jmp    c0013a2c <ip_input+0x394>
c00139e3:	90                   	nop
c00139e4:	83 ec 08             	sub    esp,0x8
c00139e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ef:	e8 c0 d3 ff ff       	call   c0010db4 <udp_input>
c00139f4:	83 c4 10             	add    esp,0x10
c00139f7:	e9 b0 00 00 00       	jmp    c0013aac <ip_input+0x414>
c00139fc:	83 ec 08             	sub    esp,0x8
c00139ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a07:	e8 00 a5 ff ff       	call   c000df0c <tcp_input>
c0013a0c:	83 c4 10             	add    esp,0x10
c0013a0f:	e9 98 00 00 00       	jmp    c0013aac <ip_input+0x414>
c0013a14:	83 ec 08             	sub    esp,0x8
c0013a17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a1f:	e8 7c f0 ff ff       	call   c0012aa0 <icmp_input>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	e9 80 00 00 00       	jmp    c0013aac <ip_input+0x414>
c0013a2c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a31:	83 ec 08             	sub    esp,0x8
c0013a34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a38:	50                   	push   eax
c0013a39:	e8 12 04 00 00       	call   c0013e50 <ip4_addr_isbroadcast>
c0013a3e:	83 c4 10             	add    esp,0x10
c0013a41:	0f b6 c0             	movzx  eax,al
c0013a44:	85 c0                	test   eax,eax
c0013a46:	75 30                	jne    c0013a78 <ip_input+0x3e0>
c0013a48:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a4d:	25 f0 00 00 00       	and    eax,0xf0
c0013a52:	3d e0 00 00 00       	cmp    eax,0xe0
c0013a57:	74 1f                	je     c0013a78 <ip_input+0x3e0>
c0013a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013a64:	83 ec 08             	sub    esp,0x8
c0013a67:	6a 02                	push   0x2
c0013a69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a6d:	e8 c6 f5 ff ff       	call   c0013038 <icmp_dest_unreach>
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	8d 76 00             	lea    esi,[esi+0x0]
c0013a78:	83 ec 0c             	sub    esp,0xc
c0013a7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a7f:	e8 d8 48 ff ff       	call   c000835c <pbuf_free>
c0013a84:	83 c4 10             	add    esp,0x10
c0013a87:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013a8d:	83 c0 01             	add    eax,0x1
c0013a90:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013a96:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013a9c:	83 c0 01             	add    eax,0x1
c0013a9f:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013aa5:	eb 05                	jmp    c0013aac <ip_input+0x414>
c0013aa7:	90                   	nop
c0013aa8:	90                   	nop
c0013aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0013aac:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013ab6:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013ac0:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013aca:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013ad4:	b0 00                	mov    al,0x0
c0013ad6:	66 90                	xchg   ax,ax
c0013ad8:	83 c4 1c             	add    esp,0x1c
c0013adb:	c3                   	ret    

c0013adc <ip_output_if>:
c0013adc:	83 ec 2c             	sub    esp,0x2c
c0013adf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013ae3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013ae7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013aeb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013aef:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013af3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013af7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013aff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b03:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013b07:	0f b7 c0             	movzx  eax,ax
c0013b0a:	83 f8 01             	cmp    eax,0x1
c0013b0d:	74 15                	je     c0013b24 <ip_output_if+0x48>
c0013b0f:	83 ec 08             	sub    esp,0x8
c0013b12:	68 ca 0d 03 c0       	push   0xc0030dca
c0013b17:	68 26 fb 02 c0       	push   0xc002fb26
c0013b1c:	e8 83 c0 00 00       	call   c001fba4 <CPrintf>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013b29:	0f 84 ed 01 00 00    	je     c0013d1c <ip_output_if+0x240>
c0013b2f:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013b36:	83 ec 08             	sub    esp,0x8
c0013b39:	6a 14                	push   0x14
c0013b3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013b3f:	e8 7c 46 ff ff       	call   c00081c0 <pbuf_header>
c0013b44:	83 c4 10             	add    esp,0x10
c0013b47:	0f b6 c0             	movzx  eax,al
c0013b4a:	85 c0                	test   eax,eax
c0013b4c:	74 16                	je     c0013b64 <ip_output_if+0x88>
c0013b4e:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013b54:	83 c0 01             	add    eax,0x1
c0013b57:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013b5d:	b0 fe                	mov    al,0xfe
c0013b5f:	e9 44 02 00 00       	jmp    c0013da8 <ip_output_if+0x2cc>
c0013b64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b73:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013b77:	0f b7 c0             	movzx  eax,ax
c0013b7a:	83 f8 13             	cmp    eax,0x13
c0013b7d:	77 15                	ja     c0013b94 <ip_output_if+0xb8>
c0013b7f:	83 ec 08             	sub    esp,0x8
c0013b82:	68 d8 0d 03 c0       	push   0xc0030dd8
c0013b87:	68 26 fb 02 c0       	push   0xc002fb26
c0013b8c:	e8 13 c0 00 00       	call   c001fba4 <CPrintf>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b98:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013b9c:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013b9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ba3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013ba7:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013baa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013baf:	c1 e0 08             	shl    eax,0x8
c0013bb2:	89 c2                	mov    edx,eax
c0013bb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013bb9:	09 d0                	or     eax,edx
c0013bbb:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bbf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013bc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bc9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013bcc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013bd3:	0f b7 c0             	movzx  eax,ax
c0013bd6:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bde:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013be1:	c1 e8 10             	shr    eax,0x10
c0013be4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013be8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013bed:	c1 e8 02             	shr    eax,0x2
c0013bf0:	0f b7 c0             	movzx  eax,ax
c0013bf3:	c1 e0 08             	shl    eax,0x8
c0013bf6:	80 cc 40             	or     ah,0x40
c0013bf9:	89 c2                	mov    edx,eax
c0013bfb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013c00:	09 d0                	or     eax,edx
c0013c02:	0f b7 c0             	movzx  eax,ax
c0013c05:	83 ec 0c             	sub    esp,0xc
c0013c08:	50                   	push   eax
c0013c09:	e8 da cf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013c0e:	83 c4 10             	add    esp,0x10
c0013c11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c15:	66 89 02             	mov    WORD PTR [edx],ax
c0013c18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c1c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013c1f:	0f b7 c0             	movzx  eax,ax
c0013c22:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c2d:	0f b7 c0             	movzx  eax,ax
c0013c30:	83 ec 0c             	sub    esp,0xc
c0013c33:	50                   	push   eax
c0013c34:	e8 af cf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013c39:	83 c4 10             	add    esp,0x10
c0013c3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c40:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013c44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c48:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013c4c:	0f b7 c0             	movzx  eax,ax
c0013c4f:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c57:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013c5d:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c63:	0f b7 c0             	movzx  eax,ax
c0013c66:	83 ec 0c             	sub    esp,0xc
c0013c69:	50                   	push   eax
c0013c6a:	e8 79 cf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013c6f:	83 c4 10             	add    esp,0x10
c0013c72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c76:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013c7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c7e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013c82:	0f b7 c0             	movzx  eax,ax
c0013c85:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c89:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c8f:	83 c0 01             	add    eax,0x1
c0013c92:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013c98:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013c9d:	74 0d                	je     c0013cac <ip_output_if+0x1d0>
c0013c9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ca5:	85 c0                	test   eax,eax
c0013ca7:	75 13                	jne    c0013cbc <ip_output_if+0x1e0>
c0013ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013cb0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013cb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cb7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cba:	eb 10                	jmp    c0013ccc <ip_output_if+0x1f0>
c0013cbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013cc0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cc6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ccc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cd3:	0f b7 c0             	movzx  eax,ax
c0013cd6:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cde:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ce1:	c1 e8 10             	shr    eax,0x10
c0013ce4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ce8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cec:	c1 e8 10             	shr    eax,0x10
c0013cef:	89 c2                	mov    edx,eax
c0013cf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cf5:	0f b7 c0             	movzx  eax,ax
c0013cf8:	01 d0                	add    eax,edx
c0013cfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d02:	c1 e8 10             	shr    eax,0x10
c0013d05:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d09:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d15:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013d19:	eb 21                	jmp    c0013d3c <ip_output_if+0x260>
c0013d1b:	90                   	nop
c0013d1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d36:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013d3a:	66 90                	xchg   ax,ax
c0013d3c:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013d42:	83 c0 01             	add    eax,0x1
c0013d45:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013d4b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d52:	0f b7 c0             	movzx  eax,ax
c0013d55:	85 c0                	test   eax,eax
c0013d57:	74 33                	je     c0013d8c <ip_output_if+0x2b0>
c0013d59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d5d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013d60:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d67:	0f b7 d2             	movzx  edx,dx
c0013d6a:	0f b7 c0             	movzx  eax,ax
c0013d6d:	39 c2                	cmp    edx,eax
c0013d6f:	76 1b                	jbe    c0013d8c <ip_output_if+0x2b0>
c0013d71:	83 ec 04             	sub    esp,0x4
c0013d74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d78:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013d7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d80:	e8 2b 14 00 00       	call   c00151b0 <ip_frag>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	eb 1e                	jmp    c0013da8 <ip_output_if+0x2cc>
c0013d8a:	66 90                	xchg   ax,ax
c0013d8c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013d93:	83 ec 04             	sub    esp,0x4
c0013d96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d9a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013d9e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013da2:	ff d0                	call   eax
c0013da4:	83 c4 10             	add    esp,0x10
c0013da7:	90                   	nop
c0013da8:	83 c4 2c             	add    esp,0x2c
c0013dab:	c3                   	ret    

c0013dac <ip_output>:
c0013dac:	83 ec 2c             	sub    esp,0x2c
c0013daf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013db3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013db7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013dbb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013dbf:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013dc3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcb:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013dcf:	0f b7 c0             	movzx  eax,ax
c0013dd2:	83 f8 01             	cmp    eax,0x1
c0013dd5:	74 15                	je     c0013dec <ip_output+0x40>
c0013dd7:	83 ec 08             	sub    esp,0x8
c0013dda:	68 ca 0d 03 c0       	push   0xc0030dca
c0013ddf:	68 26 fb 02 c0       	push   0xc002fb26
c0013de4:	e8 bb bd 00 00       	call   c001fba4 <CPrintf>
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013df3:	e8 0c f8 ff ff       	call   c0013604 <ip_route>
c0013df8:	83 c4 10             	add    esp,0x10
c0013dfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e04:	75 16                	jne    c0013e1c <ip_output+0x70>
c0013e06:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013e0c:	83 c0 01             	add    eax,0x1
c0013e0f:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013e15:	b0 fc                	mov    al,0xfc
c0013e17:	eb 33                	jmp    c0013e4c <ip_output+0xa0>
c0013e19:	8d 76 00             	lea    esi,[esi+0x0]
c0013e1c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e21:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e26:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013e2b:	83 ec 04             	sub    esp,0x4
c0013e2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e32:	51                   	push   ecx
c0013e33:	52                   	push   edx
c0013e34:	50                   	push   eax
c0013e35:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e39:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e41:	e8 96 fc ff ff       	call   c0013adc <ip_output_if>
c0013e46:	83 c4 20             	add    esp,0x20
c0013e49:	8d 76 00             	lea    esi,[esi+0x0]
c0013e4c:	83 c4 2c             	add    esp,0x2c
c0013e4f:	c3                   	ret    

c0013e50 <ip4_addr_isbroadcast>:
c0013e50:	83 ec 10             	sub    esp,0x10
c0013e53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e5b:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013e60:	74 0a                	je     c0013e6c <ip4_addr_isbroadcast+0x1c>
c0013e62:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013e67:	75 07                	jne    c0013e70 <ip4_addr_isbroadcast+0x20>
c0013e69:	8d 76 00             	lea    esi,[esi+0x0]
c0013e6c:	b0 01                	mov    al,0x1
c0013e6e:	eb 64                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013e70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e74:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013e77:	0f b6 c0             	movzx  eax,al
c0013e7a:	83 e0 02             	and    eax,0x2
c0013e7d:	75 05                	jne    c0013e84 <ip4_addr_isbroadcast+0x34>
c0013e7f:	b0 00                	mov    al,0x0
c0013e81:	eb 51                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013e83:	90                   	nop
c0013e84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013e8b:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013e8f:	75 07                	jne    c0013e98 <ip4_addr_isbroadcast+0x48>
c0013e91:	b0 00                	mov    al,0x0
c0013e93:	eb 3f                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013e95:	8d 76 00             	lea    esi,[esi+0x0]
c0013e98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013e9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ea0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ea3:	31 c2                	xor    edx,eax
c0013ea5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ea9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013eac:	21 d0                	and    eax,edx
c0013eae:	75 20                	jne    c0013ed0 <ip4_addr_isbroadcast+0x80>
c0013eb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013eb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013eb7:	f7 d0                	not    eax
c0013eb9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013ebd:	89 c2                	mov    edx,eax
c0013ebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ec3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ec6:	f7 d0                	not    eax
c0013ec8:	39 c2                	cmp    edx,eax
c0013eca:	75 04                	jne    c0013ed0 <ip4_addr_isbroadcast+0x80>
c0013ecc:	b0 01                	mov    al,0x1
c0013ece:	eb 04                	jmp    c0013ed4 <ip4_addr_isbroadcast+0x84>
c0013ed0:	b0 00                	mov    al,0x0
c0013ed2:	66 90                	xchg   ax,ax
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	c3                   	ret    

c0013ed8 <ip4_addr_netmask_valid>:
c0013ed8:	83 ec 1c             	sub    esp,0x1c
c0013edb:	83 ec 0c             	sub    esp,0xc
c0013ede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ee2:	e8 25 cd fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0013ee7:	83 c4 10             	add    esp,0x10
c0013eea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013eee:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013ef6:	eb 10                	jmp    c0013f08 <ip4_addr_netmask_valid+0x30>
c0013ef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013efc:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f00:	74 12                	je     c0013f14 <ip4_addr_netmask_valid+0x3c>
c0013f02:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f06:	66 90                	xchg   ax,ax
c0013f08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f0d:	75 e9                	jne    c0013ef8 <ip4_addr_netmask_valid+0x20>
c0013f0f:	eb 1b                	jmp    c0013f2c <ip4_addr_netmask_valid+0x54>
c0013f11:	8d 76 00             	lea    esi,[esi+0x0]
c0013f14:	90                   	nop
c0013f15:	eb 15                	jmp    c0013f2c <ip4_addr_netmask_valid+0x54>
c0013f17:	90                   	nop
c0013f18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f1c:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f20:	74 06                	je     c0013f28 <ip4_addr_netmask_valid+0x50>
c0013f22:	b0 00                	mov    al,0x0
c0013f24:	eb 12                	jmp    c0013f38 <ip4_addr_netmask_valid+0x60>
c0013f26:	66 90                	xchg   ax,ax
c0013f28:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f31:	75 e5                	jne    c0013f18 <ip4_addr_netmask_valid+0x40>
c0013f33:	b0 01                	mov    al,0x1
c0013f35:	8d 76 00             	lea    esi,[esi+0x0]
c0013f38:	83 c4 1c             	add    esp,0x1c
c0013f3b:	c3                   	ret    

c0013f3c <ipaddr_aton>:
c0013f3c:	83 ec 2c             	sub    esp,0x2c
c0013f3f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013f43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f4b:	8a 00                	mov    al,BYTE PTR [eax]
c0013f4d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f51:	8d 76 00             	lea    esi,[esi+0x0]
c0013f54:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f58:	0f b6 c0             	movzx  eax,al
c0013f5b:	83 f8 2f             	cmp    eax,0x2f
c0013f5e:	76 0c                	jbe    c0013f6c <ipaddr_aton+0x30>
c0013f60:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f64:	0f b6 c0             	movzx  eax,al
c0013f67:	83 f8 39             	cmp    eax,0x39
c0013f6a:	76 0c                	jbe    c0013f78 <ipaddr_aton+0x3c>
c0013f6c:	b8 00 00 00 00       	mov    eax,0x0
c0013f71:	e9 f2 02 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c0013f76:	66 90                	xchg   ax,ax
c0013f78:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013f80:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0013f85:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013f8a:	83 f8 30             	cmp    eax,0x30
c0013f8d:	75 45                	jne    c0013fd4 <ipaddr_aton+0x98>
c0013f8f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f98:	8a 00                	mov    al,BYTE PTR [eax]
c0013f9a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f9e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fa3:	83 f8 78             	cmp    eax,0x78
c0013fa6:	74 0c                	je     c0013fb4 <ipaddr_aton+0x78>
c0013fa8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fad:	83 f8 58             	cmp    eax,0x58
c0013fb0:	75 1a                	jne    c0013fcc <ipaddr_aton+0x90>
c0013fb2:	66 90                	xchg   ax,ax
c0013fb4:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0013fb9:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc2:	8a 00                	mov    al,BYTE PTR [eax]
c0013fc4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013fc8:	eb 0a                	jmp    c0013fd4 <ipaddr_aton+0x98>
c0013fca:	66 90                	xchg   ax,ax
c0013fcc:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0013fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fd8:	0f b6 c0             	movzx  eax,al
c0013fdb:	83 f8 2f             	cmp    eax,0x2f
c0013fde:	76 3c                	jbe    c001401c <ipaddr_aton+0xe0>
c0013fe0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fe4:	0f b6 c0             	movzx  eax,al
c0013fe7:	83 f8 39             	cmp    eax,0x39
c0013fea:	77 30                	ja     c001401c <ipaddr_aton+0xe0>
c0013fec:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013ff1:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0013ff6:	89 c2                	mov    edx,eax
c0013ff8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ffd:	01 d0                	add    eax,edx
c0013fff:	83 e8 30             	sub    eax,0x30
c0014002:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014006:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001400b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001400f:	8a 00                	mov    al,BYTE PTR [eax]
c0014011:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014015:	e9 ae 00 00 00       	jmp    c00140c8 <ipaddr_aton+0x18c>
c001401a:	66 90                	xchg   ax,ax
c001401c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014021:	83 f8 10             	cmp    eax,0x10
c0014024:	0f 85 a6 00 00 00    	jne    c00140d0 <ipaddr_aton+0x194>
c001402a:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001402e:	0f b6 c0             	movzx  eax,al
c0014031:	83 f8 2f             	cmp    eax,0x2f
c0014034:	76 0e                	jbe    c0014044 <ipaddr_aton+0x108>
c0014036:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001403a:	0f b6 c0             	movzx  eax,al
c001403d:	83 f8 39             	cmp    eax,0x39
c0014040:	76 32                	jbe    c0014074 <ipaddr_aton+0x138>
c0014042:	66 90                	xchg   ax,ax
c0014044:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014048:	0f b6 c0             	movzx  eax,al
c001404b:	83 f8 60             	cmp    eax,0x60
c001404e:	76 0c                	jbe    c001405c <ipaddr_aton+0x120>
c0014050:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014054:	0f b6 c0             	movzx  eax,al
c0014057:	83 f8 66             	cmp    eax,0x66
c001405a:	76 18                	jbe    c0014074 <ipaddr_aton+0x138>
c001405c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014060:	0f b6 c0             	movzx  eax,al
c0014063:	83 f8 40             	cmp    eax,0x40
c0014066:	76 68                	jbe    c00140d0 <ipaddr_aton+0x194>
c0014068:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001406c:	0f b6 c0             	movzx  eax,al
c001406f:	83 f8 46             	cmp    eax,0x46
c0014072:	77 5c                	ja     c00140d0 <ipaddr_aton+0x194>
c0014074:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014078:	c1 e0 04             	shl    eax,0x4
c001407b:	89 c2                	mov    edx,eax
c001407d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014082:	8d 48 0a             	lea    ecx,[eax+0xa]
c0014085:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014089:	0f b6 c0             	movzx  eax,al
c001408c:	83 f8 60             	cmp    eax,0x60
c001408f:	76 13                	jbe    c00140a4 <ipaddr_aton+0x168>
c0014091:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014095:	0f b6 c0             	movzx  eax,al
c0014098:	83 f8 7a             	cmp    eax,0x7a
c001409b:	77 07                	ja     c00140a4 <ipaddr_aton+0x168>
c001409d:	b8 61 00 00 00       	mov    eax,0x61
c00140a2:	eb 08                	jmp    c00140ac <ipaddr_aton+0x170>
c00140a4:	b8 41 00 00 00       	mov    eax,0x41
c00140a9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ac:	29 c1                	sub    ecx,eax
c00140ae:	89 c8                	mov    eax,ecx
c00140b0:	09 d0                	or     eax,edx
c00140b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140b6:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00140bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140bf:	8a 00                	mov    al,BYTE PTR [eax]
c00140c1:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140c5:	8d 76 00             	lea    esi,[esi+0x0]
c00140c8:	e9 07 ff ff ff       	jmp    c0013fd4 <ipaddr_aton+0x98>
c00140cd:	8d 76 00             	lea    esi,[esi+0x0]
c00140d0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140d5:	83 f8 2e             	cmp    eax,0x2e
c00140d8:	75 42                	jne    c001411c <ipaddr_aton+0x1e0>
c00140da:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140de:	83 c0 0c             	add    eax,0xc
c00140e1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00140e5:	72 0d                	jb     c00140f4 <ipaddr_aton+0x1b8>
c00140e7:	b8 00 00 00 00       	mov    eax,0x0
c00140ec:	e9 77 01 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c00140f1:	8d 76 00             	lea    esi,[esi+0x0]
c00140f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140f8:	8d 50 04             	lea    edx,[eax+0x4]
c00140fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014103:	89 10                	mov    DWORD PTR [eax],edx
c0014105:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001410a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001410e:	8a 00                	mov    al,BYTE PTR [eax]
c0014110:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014114:	e9 3b fe ff ff       	jmp    c0013f54 <ipaddr_aton+0x18>
c0014119:	8d 76 00             	lea    esi,[esi+0x0]
c001411c:	90                   	nop
c001411d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014122:	85 c0                	test   eax,eax
c0014124:	74 46                	je     c001416c <ipaddr_aton+0x230>
c0014126:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001412b:	83 f8 20             	cmp    eax,0x20
c001412e:	74 3c                	je     c001416c <ipaddr_aton+0x230>
c0014130:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014135:	83 f8 0c             	cmp    eax,0xc
c0014138:	74 32                	je     c001416c <ipaddr_aton+0x230>
c001413a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001413f:	83 f8 0a             	cmp    eax,0xa
c0014142:	74 28                	je     c001416c <ipaddr_aton+0x230>
c0014144:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014149:	83 f8 0d             	cmp    eax,0xd
c001414c:	74 1e                	je     c001416c <ipaddr_aton+0x230>
c001414e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014153:	83 f8 09             	cmp    eax,0x9
c0014156:	74 14                	je     c001416c <ipaddr_aton+0x230>
c0014158:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001415d:	83 f8 0b             	cmp    eax,0xb
c0014160:	74 0a                	je     c001416c <ipaddr_aton+0x230>
c0014162:	b8 00 00 00 00       	mov    eax,0x0
c0014167:	e9 fc 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c001416c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014170:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014174:	29 c2                	sub    edx,eax
c0014176:	89 d0                	mov    eax,edx
c0014178:	c1 f8 02             	sar    eax,0x2
c001417b:	83 c0 01             	add    eax,0x1
c001417e:	83 f8 04             	cmp    eax,0x4
c0014181:	0f 87 9d 00 00 00    	ja     c0014224 <ipaddr_aton+0x2e8>
c0014187:	8b 04 85 10 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1f0]
c001418e:	ff e0                	jmp    eax
c0014190:	b8 00 00 00 00       	mov    eax,0x0
c0014195:	e9 ce 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c001419a:	66 90                	xchg   ax,ax
c001419c:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c00141a4:	76 0a                	jbe    c00141b0 <ipaddr_aton+0x274>
c00141a6:	b8 00 00 00 00       	mov    eax,0x0
c00141ab:	e9 b8 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c00141b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141b4:	c1 e0 18             	shl    eax,0x18
c00141b7:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141bb:	e9 80 00 00 00       	jmp    c0014240 <ipaddr_aton+0x304>
c00141c0:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c00141c8:	76 0a                	jbe    c00141d4 <ipaddr_aton+0x298>
c00141ca:	b8 00 00 00 00       	mov    eax,0x0
c00141cf:	e9 94 00 00 00       	jmp    c0014268 <ipaddr_aton+0x32c>
c00141d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141d8:	c1 e0 18             	shl    eax,0x18
c00141db:	89 c2                	mov    edx,eax
c00141dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141e1:	c1 e0 10             	shl    eax,0x10
c00141e4:	09 d0                	or     eax,edx
c00141e6:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141ea:	eb 54                	jmp    c0014240 <ipaddr_aton+0x304>
c00141ec:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c00141f4:	76 0a                	jbe    c0014200 <ipaddr_aton+0x2c4>
c00141f6:	b8 00 00 00 00       	mov    eax,0x0
c00141fb:	eb 6b                	jmp    c0014268 <ipaddr_aton+0x32c>
c00141fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014204:	c1 e0 18             	shl    eax,0x18
c0014207:	89 c2                	mov    edx,eax
c0014209:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001420d:	c1 e0 10             	shl    eax,0x10
c0014210:	09 c2                	or     edx,eax
c0014212:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014216:	c1 e0 08             	shl    eax,0x8
c0014219:	09 d0                	or     eax,edx
c001421b:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c001421f:	eb 1f                	jmp    c0014240 <ipaddr_aton+0x304>
c0014221:	8d 76 00             	lea    esi,[esi+0x0]
c0014224:	83 ec 08             	sub    esp,0x8
c0014227:	68 05 0e 03 c0       	push   0xc0030e05
c001422c:	68 26 fb 02 c0       	push   0xc002fb26
c0014231:	e8 6e b9 00 00       	call   c001fba4 <CPrintf>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	eb 05                	jmp    c0014240 <ipaddr_aton+0x304>
c001423b:	90                   	nop
c001423c:	90                   	nop
c001423d:	8d 76 00             	lea    esi,[esi+0x0]
c0014240:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014245:	74 19                	je     c0014260 <ipaddr_aton+0x324>
c0014247:	83 ec 0c             	sub    esp,0xc
c001424a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001424e:	e8 b9 c9 fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0014253:	83 c4 10             	add    esp,0x10
c0014256:	89 c2                	mov    edx,eax
c0014258:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001425c:	89 10                	mov    DWORD PTR [eax],edx
c001425e:	66 90                	xchg   ax,ax
c0014260:	b8 01 00 00 00       	mov    eax,0x1
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	83 c4 2c             	add    esp,0x2c
c001426b:	c3                   	ret    

c001426c <ipaddr_addr>:
c001426c:	83 ec 1c             	sub    esp,0x1c
c001426f:	83 ec 08             	sub    esp,0x8
c0014272:	8d 44 24 14          	lea    eax,[esp+0x14]
c0014276:	50                   	push   eax
c0014277:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001427b:	e8 bc fc ff ff       	call   c0013f3c <ipaddr_aton>
c0014280:	83 c4 10             	add    esp,0x10
c0014283:	85 c0                	test   eax,eax
c0014285:	74 09                	je     c0014290 <ipaddr_addr+0x24>
c0014287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001428b:	eb 0b                	jmp    c0014298 <ipaddr_addr+0x2c>
c001428d:	8d 76 00             	lea    esi,[esi+0x0]
c0014290:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014295:	8d 76 00             	lea    esi,[esi+0x0]
c0014298:	83 c4 1c             	add    esp,0x1c
c001429b:	c3                   	ret    

c001429c <ipaddr_ntoa_r>:
c001429c:	83 ec 20             	sub    esp,0x20
c001429f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00142a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00142ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00142b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00142bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142c1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00142c6:	e9 f9 00 00 00       	jmp    c00143c4 <ipaddr_ntoa_r+0x128>
c00142cb:	90                   	nop
c00142cc:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00142d1:	8d 76 00             	lea    esi,[esi+0x0]
c00142d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142d8:	8a 00                	mov    al,BYTE PTR [eax]
c00142da:	0f b6 c8             	movzx  ecx,al
c00142dd:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00142e2:	89 c8                	mov    eax,ecx
c00142e4:	f7 e2                	mul    edx
c00142e6:	c1 ea 03             	shr    edx,0x3
c00142e9:	89 d0                	mov    eax,edx
c00142eb:	c1 e0 02             	shl    eax,0x2
c00142ee:	01 d0                	add    eax,edx
c00142f0:	01 c0                	add    eax,eax
c00142f2:	29 c1                	sub    ecx,eax
c00142f4:	89 c8                	mov    eax,ecx
c00142f6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00142fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142fe:	8a 00                	mov    al,BYTE PTR [eax]
c0014300:	0f b6 c0             	movzx  eax,al
c0014303:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014308:	f7 e2                	mul    edx
c001430a:	89 d0                	mov    eax,edx
c001430c:	c1 e8 03             	shr    eax,0x3
c001430f:	88 c2                	mov    dl,al
c0014311:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014315:	88 10                	mov    BYTE PTR [eax],dl
c0014317:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001431b:	83 c0 30             	add    eax,0x30
c001431e:	88 c1                	mov    cl,al
c0014320:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014324:	8d 50 01             	lea    edx,[eax+0x1]
c0014327:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001432b:	0f b6 c0             	movzx  eax,al
c001432e:	88 ca                	mov    dl,cl
c0014330:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c0014334:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014338:	8a 00                	mov    al,BYTE PTR [eax]
c001433a:	0f b6 c0             	movzx  eax,al
c001433d:	85 c0                	test   eax,eax
c001433f:	75 93                	jne    c00142d4 <ipaddr_ntoa_r+0x38>
c0014341:	eb 35                	jmp    c0014378 <ipaddr_ntoa_r+0xdc>
c0014343:	90                   	nop
c0014344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014348:	8d 50 01             	lea    edx,[eax+0x1]
c001434b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001434f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014353:	7f 0b                	jg     c0014360 <ipaddr_ntoa_r+0xc4>
c0014355:	b8 00 00 00 00       	mov    eax,0x0
c001435a:	e9 85 00 00 00       	jmp    c00143e4 <ipaddr_ntoa_r+0x148>
c001435f:	90                   	nop
c0014360:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0014365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014369:	8d 48 01             	lea    ecx,[eax+0x1]
c001436c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014370:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c0014374:	88 10                	mov    BYTE PTR [eax],dl
c0014376:	66 90                	xchg   ax,ax
c0014378:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c001437c:	8d 50 ff             	lea    edx,[eax-0x1]
c001437f:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014383:	0f b6 c0             	movzx  eax,al
c0014386:	85 c0                	test   eax,eax
c0014388:	75 ba                	jne    c0014344 <ipaddr_ntoa_r+0xa8>
c001438a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438e:	8d 50 01             	lea    edx,[eax+0x1]
c0014391:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014395:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014399:	7f 09                	jg     c00143a4 <ipaddr_ntoa_r+0x108>
c001439b:	b8 00 00 00 00       	mov    eax,0x0
c00143a0:	eb 42                	jmp    c00143e4 <ipaddr_ntoa_r+0x148>
c00143a2:	66 90                	xchg   ax,ax
c00143a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143a8:	8d 50 01             	lea    edx,[eax+0x1]
c00143ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00143af:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c00143b2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00143b7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00143bb:	83 c0 01             	add    eax,0x1
c00143be:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00143c2:	66 90                	xchg   ax,ax
c00143c4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00143c9:	83 f8 03             	cmp    eax,0x3
c00143cc:	0f 86 fa fe ff ff    	jbe    c00142cc <ipaddr_ntoa_r+0x30>
c00143d2:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c00143d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00143de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143e2:	66 90                	xchg   ax,ax
c00143e4:	83 c4 20             	add    esp,0x20
c00143e7:	c3                   	ret    

c00143e8 <ipaddr_ntoa>:
c00143e8:	6a 10                	push   0x10
c00143ea:	68 a4 a9 03 c0       	push   0xc003a9a4
c00143ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00143f3:	e8 a4 fe ff ff       	call   c001429c <ipaddr_ntoa_r>
c00143f8:	83 c4 0c             	add    esp,0xc
c00143fb:	c3                   	ret    

c00143fc <ip_reass_dequeue_datagram>:
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014404:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014408:	75 0e                	jne    c0014418 <ip_reass_dequeue_datagram+0x1c>
c001440a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001440e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014410:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014415:	eb 29                	jmp    c0014440 <ip_reass_dequeue_datagram+0x44>
c0014417:	90                   	nop
c0014418:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001441d:	75 15                	jne    c0014434 <ip_reass_dequeue_datagram+0x38>
c001441f:	83 ec 08             	sub    esp,0x8
c0014422:	68 2c 0e 03 c0       	push   0xc0030e2c
c0014427:	68 26 fb 02 c0       	push   0xc002fb26
c001442c:	e8 73 b7 00 00       	call   c001fba4 <CPrintf>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014438:	8b 10                	mov    edx,DWORD PTR [eax]
c001443a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001443e:	89 10                	mov    DWORD PTR [eax],edx
c0014440:	83 ec 08             	sub    esp,0x8
c0014443:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014447:	6a 05                	push   0x5
c0014449:	e8 52 36 ff ff       	call   c0007aa0 <memp_free>
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	90                   	nop
c0014452:	83 c4 0c             	add    esp,0xc
c0014455:	c3                   	ret    
c0014456:	66 90                	xchg   ax,ax

c0014458 <ip_reass_free_complete_datagram>:
c0014458:	83 ec 2c             	sub    esp,0x2c
c001445b:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0014462:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014466:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001446a:	75 18                	jne    c0014484 <ip_reass_free_complete_datagram+0x2c>
c001446c:	83 ec 08             	sub    esp,0x8
c001446f:	68 45 0e 03 c0       	push   0xc0030e45
c0014474:	68 26 fb 02 c0       	push   0xc002fb26
c0014479:	e8 26 b7 00 00       	call   c001fba4 <CPrintf>
c001447e:	83 c4 10             	add    esp,0x10
c0014481:	8d 76 00             	lea    esi,[esi+0x0]
c0014484:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014489:	74 21                	je     c00144ac <ip_reass_free_complete_datagram+0x54>
c001448b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001448f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014491:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0014495:	74 15                	je     c00144ac <ip_reass_free_complete_datagram+0x54>
c0014497:	83 ec 08             	sub    esp,0x8
c001449a:	68 51 0e 03 c0       	push   0xc0030e51
c001449f:	68 26 fb 02 c0       	push   0xc002fb26
c00144a4:	e8 fb b6 00 00       	call   c001fba4 <CPrintf>
c00144a9:	83 c4 10             	add    esp,0x10
c00144ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144be:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00144c2:	0f b7 c0             	movzx  eax,ax
c00144c5:	85 c0                	test   eax,eax
c00144c7:	0f 85 a3 00 00 00    	jne    c0014570 <ip_reass_free_complete_datagram+0x118>
c00144cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00144de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00144e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144e9:	8d 50 08             	lea    edx,[eax+0x8]
c00144ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144f3:	83 ec 04             	sub    esp,0x4
c00144f6:	6a 14                	push   0x14
c00144f8:	52                   	push   edx
c00144f9:	50                   	push   eax
c00144fa:	e8 7b be fe ff       	call   c000037a <memcpy>
c00144ff:	83 c4 10             	add    esp,0x10
c0014502:	83 ec 08             	sub    esp,0x8
c0014505:	6a 01                	push   0x1
c0014507:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001450b:	e8 4c eb ff ff       	call   c001305c <icmp_time_exceeded>
c0014510:	83 c4 10             	add    esp,0x10
c0014513:	83 ec 0c             	sub    esp,0xc
c0014516:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001451a:	e8 11 46 ff ff       	call   c0008b30 <pbuf_clen>
c001451f:	83 c4 10             	add    esp,0x10
c0014522:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014526:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001452b:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014530:	01 d0                	add    eax,edx
c0014532:	3d ff ff 00 00       	cmp    eax,0xffff
c0014537:	7e 17                	jle    c0014550 <ip_reass_free_complete_datagram+0xf8>
c0014539:	83 ec 08             	sub    esp,0x8
c001453c:	68 63 0e 03 c0       	push   0xc0030e63
c0014541:	68 26 fb 02 c0       	push   0xc002fb26
c0014546:	e8 59 b6 00 00       	call   c001fba4 <CPrintf>
c001454b:	83 c4 10             	add    esp,0x10
c001454e:	66 90                	xchg   ax,ax
c0014550:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014555:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001455a:	01 d0                	add    eax,edx
c001455c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014561:	83 ec 0c             	sub    esp,0xc
c0014564:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014568:	e8 ef 3d ff ff       	call   c000835c <pbuf_free>
c001456d:	83 c4 10             	add    esp,0x10
c0014570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014577:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001457b:	eb 7b                	jmp    c00145f8 <ip_reass_free_complete_datagram+0x1a0>
c001457d:	8d 76 00             	lea    esi,[esi+0x0]
c0014580:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014587:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001458b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001458f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014593:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014597:	8b 00                	mov    eax,DWORD PTR [eax]
c0014599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001459d:	83 ec 0c             	sub    esp,0xc
c00145a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145a4:	e8 87 45 ff ff       	call   c0008b30 <pbuf_clen>
c00145a9:	83 c4 10             	add    esp,0x10
c00145ac:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00145b0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00145b5:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145ba:	01 d0                	add    eax,edx
c00145bc:	3d ff ff 00 00       	cmp    eax,0xffff
c00145c1:	7e 15                	jle    c00145d8 <ip_reass_free_complete_datagram+0x180>
c00145c3:	83 ec 08             	sub    esp,0x8
c00145c6:	68 63 0e 03 c0       	push   0xc0030e63
c00145cb:	68 26 fb 02 c0       	push   0xc002fb26
c00145d0:	e8 cf b5 00 00       	call   c001fba4 <CPrintf>
c00145d5:	83 c4 10             	add    esp,0x10
c00145d8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145dd:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00145e2:	01 d0                	add    eax,edx
c00145e4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00145e9:	83 ec 0c             	sub    esp,0xc
c00145ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145f0:	e8 67 3d ff ff       	call   c000835c <pbuf_free>
c00145f5:	83 c4 10             	add    esp,0x10
c00145f8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00145fd:	75 81                	jne    c0014580 <ip_reass_free_complete_datagram+0x128>
c00145ff:	83 ec 08             	sub    esp,0x8
c0014602:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014606:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001460a:	e8 ed fd ff ff       	call   c00143fc <ip_reass_dequeue_datagram>
c001460f:	83 c4 10             	add    esp,0x10
c0014612:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014618:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001461d:	0f b7 c0             	movzx  eax,ax
c0014620:	39 c2                	cmp    edx,eax
c0014622:	76 18                	jbe    c001463c <ip_reass_free_complete_datagram+0x1e4>
c0014624:	83 ec 08             	sub    esp,0x8
c0014627:	68 80 0e 03 c0       	push   0xc0030e80
c001462c:	68 26 fb 02 c0       	push   0xc002fb26
c0014631:	e8 6e b5 00 00       	call   c001fba4 <CPrintf>
c0014636:	83 c4 10             	add    esp,0x10
c0014639:	8d 76 00             	lea    esi,[esi+0x0]
c001463c:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014643:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0014648:	89 d1                	mov    ecx,edx
c001464a:	29 c1                	sub    ecx,eax
c001464c:	89 c8                	mov    eax,ecx
c001464e:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014654:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0014659:	83 c4 2c             	add    esp,0x2c
c001465c:	c3                   	ret    
c001465d:	8d 76 00             	lea    esi,[esi+0x0]

c0014660 <ip_reass_tmr>:
c0014660:	83 ec 1c             	sub    esp,0x1c
c0014663:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001466b:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014670:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014674:	eb 62                	jmp    c00146d8 <ip_reass_tmr+0x78>
c0014676:	66 90                	xchg   ax,ax
c0014678:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001467c:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001467f:	0f b6 c0             	movzx  eax,al
c0014682:	85 c0                	test   eax,eax
c0014684:	74 2a                	je     c00146b0 <ip_reass_tmr+0x50>
c0014686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001468a:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001468d:	83 e8 01             	sub    eax,0x1
c0014690:	88 c2                	mov    dl,al
c0014692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014696:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014699:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001469d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00146a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00146a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146ab:	eb 2b                	jmp    c00146d8 <ip_reass_tmr+0x78>
c00146ad:	8d 76 00             	lea    esi,[esi+0x0]
c00146b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00146be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146c2:	83 ec 08             	sub    esp,0x8
c00146c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146cd:	e8 86 fd ff ff       	call   c0014458 <ip_reass_free_complete_datagram>
c00146d2:	83 c4 10             	add    esp,0x10
c00146d5:	8d 76 00             	lea    esi,[esi+0x0]
c00146d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00146dd:	75 99                	jne    c0014678 <ip_reass_tmr+0x18>
c00146df:	90                   	nop
c00146e0:	83 c4 1c             	add    esp,0x1c
c00146e3:	c3                   	ret    

c00146e4 <ip_reass_remove_oldest_datagram>:
c00146e4:	83 ec 2c             	sub    esp,0x2c
c00146e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146ef:	90                   	nop
c00146f0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00146f8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014708:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001470d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014711:	e9 9a 00 00 00       	jmp    c00147b0 <ip_reass_remove_oldest_datagram+0xcc>
c0014716:	66 90                	xchg   ax,ax
c0014718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001471c:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c001471f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014723:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014726:	39 c2                	cmp    edx,eax
c0014728:	75 2e                	jne    c0014758 <ip_reass_remove_oldest_datagram+0x74>
c001472a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001472e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014735:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014738:	39 c2                	cmp    edx,eax
c001473a:	75 1c                	jne    c0014758 <ip_reass_remove_oldest_datagram+0x74>
c001473c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014740:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014747:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001474b:	0f b7 d2             	movzx  edx,dx
c001474e:	0f b7 c0             	movzx  eax,ax
c0014751:	39 c2                	cmp    edx,eax
c0014753:	74 3b                	je     c0014790 <ip_reass_remove_oldest_datagram+0xac>
c0014755:	8d 76 00             	lea    esi,[esi+0x0]
c0014758:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001475d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014762:	75 0c                	jne    c0014770 <ip_reass_remove_oldest_datagram+0x8c>
c0014764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014768:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001476c:	eb 22                	jmp    c0014790 <ip_reass_remove_oldest_datagram+0xac>
c001476e:	66 90                	xchg   ax,ax
c0014770:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014774:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c0014777:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001477b:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001477e:	0f b6 d2             	movzx  edx,dl
c0014781:	0f b6 c0             	movzx  eax,al
c0014784:	39 c2                	cmp    edx,eax
c0014786:	77 08                	ja     c0014790 <ip_reass_remove_oldest_datagram+0xac>
c0014788:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001478c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014794:	8b 00                	mov    eax,DWORD PTR [eax]
c0014796:	85 c0                	test   eax,eax
c0014798:	74 0a                	je     c00147a4 <ip_reass_remove_oldest_datagram+0xc0>
c001479a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001479e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147a2:	66 90                	xchg   ax,ax
c00147a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00147aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147ae:	66 90                	xchg   ax,ax
c00147b0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00147b5:	0f 85 5d ff ff ff    	jne    c0014718 <ip_reass_remove_oldest_datagram+0x34>
c00147bb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00147c0:	74 22                	je     c00147e4 <ip_reass_remove_oldest_datagram+0x100>
c00147c2:	83 ec 08             	sub    esp,0x8
c00147c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147cd:	e8 86 fc ff ff       	call   c0014458 <ip_reass_free_complete_datagram>
c00147d2:	83 c4 10             	add    esp,0x10
c00147d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147dd:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c00147e1:	8d 76 00             	lea    esi,[esi+0x0]
c00147e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e8:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00147ec:	7d 0e                	jge    c00147fc <ip_reass_remove_oldest_datagram+0x118>
c00147ee:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c00147f3:	0f 8f f7 fe ff ff    	jg     c00146f0 <ip_reass_remove_oldest_datagram+0xc>
c00147f9:	8d 76 00             	lea    esi,[esi+0x0]
c00147fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014800:	83 c4 2c             	add    esp,0x2c
c0014803:	c3                   	ret    

c0014804 <ip_reass_enqueue_new_datagram>:
c0014804:	83 ec 1c             	sub    esp,0x1c
c0014807:	83 ec 0c             	sub    esp,0xc
c001480a:	6a 05                	push   0x5
c001480c:	e8 63 31 ff ff       	call   c0007974 <memp_malloc>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014818:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001481d:	75 4d                	jne    c001486c <ip_reass_enqueue_new_datagram+0x68>
c001481f:	83 ec 08             	sub    esp,0x8
c0014822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014826:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001482a:	e8 b5 fe ff ff       	call   c00146e4 <ip_reass_remove_oldest_datagram>
c001482f:	83 c4 10             	add    esp,0x10
c0014832:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014836:	7f 14                	jg     c001484c <ip_reass_enqueue_new_datagram+0x48>
c0014838:	83 ec 0c             	sub    esp,0xc
c001483b:	6a 05                	push   0x5
c001483d:	e8 32 31 ff ff       	call   c0007974 <memp_malloc>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014849:	8d 76 00             	lea    esi,[esi+0x0]
c001484c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014851:	75 19                	jne    c001486c <ip_reass_enqueue_new_datagram+0x68>
c0014853:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014859:	83 c0 01             	add    eax,0x1
c001485c:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014862:	b8 00 00 00 00       	mov    eax,0x0
c0014867:	eb 53                	jmp    c00148bc <ip_reass_enqueue_new_datagram+0xb8>
c0014869:	8d 76 00             	lea    esi,[esi+0x0]
c001486c:	83 ec 04             	sub    esp,0x4
c001486f:	6a 20                	push   0x20
c0014871:	6a 00                	push   0x0
c0014873:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014877:	e8 74 bc fe ff       	call   c00004f0 <memset>
c001487c:	83 c4 10             	add    esp,0x10
c001487f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014883:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014887:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c001488d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014891:	89 10                	mov    DWORD PTR [eax],edx
c0014893:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014897:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c001489c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148a0:	83 c0 08             	add    eax,0x8
c00148a3:	83 ec 04             	sub    esp,0x4
c00148a6:	6a 14                	push   0x14
c00148a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148ac:	50                   	push   eax
c00148ad:	e8 c8 ba fe ff       	call   c000037a <memcpy>
c00148b2:	83 c4 10             	add    esp,0x10
c00148b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148b9:	8d 76 00             	lea    esi,[esi+0x0]
c00148bc:	83 c4 1c             	add    esp,0x1c
c00148bf:	c3                   	ret    

c00148c0 <ip_reass_chain_frag_into_datagram_and_validate>:
c00148c0:	53                   	push   ebx
c00148c1:	83 ec 28             	sub    esp,0x28
c00148c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00148cc:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c00148d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00148d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00148db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148e3:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00148e7:	0f b7 c0             	movzx  eax,ax
c00148ea:	83 ec 0c             	sub    esp,0xc
c00148ed:	50                   	push   eax
c00148ee:	e8 f5 c2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00148f3:	83 c4 10             	add    esp,0x10
c00148f6:	89 c3                	mov    ebx,eax
c00148f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00148ff:	0f b7 c0             	movzx  eax,ax
c0014902:	83 ec 0c             	sub    esp,0xc
c0014905:	50                   	push   eax
c0014906:	e8 dd c2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	0f b7 c0             	movzx  eax,ax
c0014911:	c1 e8 08             	shr    eax,0x8
c0014914:	83 e0 0f             	and    eax,0xf
c0014917:	c1 e0 02             	shl    eax,0x2
c001491a:	89 d9                	mov    ecx,ebx
c001491c:	29 c1                	sub    ecx,eax
c001491e:	89 c8                	mov    eax,ecx
c0014920:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014929:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001492d:	0f b7 c0             	movzx  eax,ax
c0014930:	83 ec 0c             	sub    esp,0xc
c0014933:	50                   	push   eax
c0014934:	e8 af c2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	25 ff 1f 00 00       	and    eax,0x1fff
c0014941:	c1 e0 03             	shl    eax,0x3
c0014944:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014949:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001494d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014950:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014954:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014958:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001495e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014966:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001496a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001496e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014973:	01 d0                	add    eax,edx
c0014975:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014979:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001497d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014981:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014984:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014988:	e9 13 01 00 00       	jmp    c0014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c001498d:	8d 76 00             	lea    esi,[esi+0x0]
c0014990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014997:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001499b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001499f:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149a7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149ab:	0f b7 d2             	movzx  edx,dx
c00149ae:	0f b7 c0             	movzx  eax,ax
c00149b1:	39 c2                	cmp    edx,eax
c00149b3:	73 6f                	jae    c0014a24 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c00149b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149bd:	89 10                	mov    DWORD PTR [eax],edx
c00149bf:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149c4:	74 4e                	je     c0014a14 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c00149c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149ca:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149d2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00149d6:	0f b7 d2             	movzx  edx,dx
c00149d9:	0f b7 c0             	movzx  eax,ax
c00149dc:	39 c2                	cmp    edx,eax
c00149de:	0f 82 bc 02 00 00    	jb     c0014ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c00149e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149e8:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00149ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149f0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149f4:	0f b7 d2             	movzx  edx,dx
c00149f7:	0f b7 c0             	movzx  eax,ax
c00149fa:	39 c2                	cmp    edx,eax
c00149fc:	0f 87 9e 02 00 00    	ja     c0014ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014a02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a0a:	89 10                	mov    DWORD PTR [eax],edx
c0014a0c:	e9 9b 00 00 00       	jmp    c0014aac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a11:	8d 76 00             	lea    esi,[esi+0x0]
c0014a14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a18:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a1c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014a1f:	e9 88 00 00 00       	jmp    c0014aac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a28:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a30:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a34:	0f b7 d2             	movzx  edx,dx
c0014a37:	0f b7 c0             	movzx  eax,ax
c0014a3a:	39 c2                	cmp    edx,eax
c0014a3c:	0f 84 62 02 00 00    	je     c0014ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014a42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a46:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a4e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014a52:	0f b7 d2             	movzx  edx,dx
c0014a55:	0f b7 c0             	movzx  eax,ax
c0014a58:	39 c2                	cmp    edx,eax
c0014a5a:	0f 82 48 02 00 00    	jb     c0014ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014a60:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a65:	74 25                	je     c0014a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a6b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a73:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a77:	0f b7 d2             	movzx  edx,dx
c0014a7a:	0f b7 c0             	movzx  eax,ax
c0014a7d:	39 c2                	cmp    edx,eax
c0014a7f:	74 0b                	je     c0014a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a81:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a89:	8d 76 00             	lea    esi,[esi+0x0]
c0014a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a9e:	66 90                	xchg   ax,ax
c0014aa0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014aa5:	0f 85 e5 fe ff ff    	jne    c0014990 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014aab:	90                   	nop
c0014aac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014ab1:	0f 85 95 00 00 00    	jne    c0014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014ab7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014abc:	74 62                	je     c0014b20 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014abe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ac2:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ac6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aca:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ace:	0f b7 d2             	movzx  edx,dx
c0014ad1:	0f b7 c0             	movzx  eax,ax
c0014ad4:	39 c2                	cmp    edx,eax
c0014ad6:	76 18                	jbe    c0014af0 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014ad8:	83 ec 08             	sub    esp,0x8
c0014adb:	68 9b 0e 03 c0       	push   0xc0030e9b
c0014ae0:	68 26 fb 02 c0       	push   0xc002fb26
c0014ae5:	e8 ba b0 00 00       	call   c001fba4 <CPrintf>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	8d 76 00             	lea    esi,[esi+0x0]
c0014af0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014af4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014af8:	89 10                	mov    DWORD PTR [eax],edx
c0014afa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014afe:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b06:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b0a:	0f b7 d2             	movzx  edx,dx
c0014b0d:	0f b7 c0             	movzx  eax,ax
c0014b10:	39 c2                	cmp    edx,eax
c0014b12:	74 38                	je     c0014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b14:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b1c:	eb 2e                	jmp    c0014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b1e:	66 90                	xchg   ax,ax
c0014b20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b27:	85 c0                	test   eax,eax
c0014b29:	74 15                	je     c0014b40 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014b2b:	83 ec 08             	sub    esp,0x8
c0014b2e:	68 dc 0e 03 c0       	push   0xc0030edc
c0014b33:	68 26 fb 02 c0       	push   0xc002fb26
c0014b38:	e8 67 b0 00 00       	call   c001fba4 <CPrintf>
c0014b3d:	83 c4 10             	add    esp,0x10
c0014b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b44:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014b4b:	90                   	nop
c0014b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b50:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014b53:	0f b6 c0             	movzx  eax,al
c0014b56:	83 e0 01             	and    eax,0x1
c0014b59:	0f 84 39 01 00 00    	je     c0014c98 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014b5f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014b64:	0f 84 26 01 00 00    	je     c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b74:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b78:	0f b7 c0             	movzx  eax,ax
c0014b7b:	85 c0                	test   eax,eax
c0014b7d:	74 0d                	je     c0014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014b7f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b87:	e9 04 01 00 00       	jmp    c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b9e:	eb 44                	jmp    c0014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ba7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014baf:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014bb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bb7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bbb:	0f b7 d2             	movzx  edx,dx
c0014bbe:	0f b7 c0             	movzx  eax,ax
c0014bc1:	39 c2                	cmp    edx,eax
c0014bc3:	74 0b                	je     c0014bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014bc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bcd:	eb 1d                	jmp    c0014bec <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014bcf:	90                   	nop
c0014bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014be2:	66 90                	xchg   ax,ax
c0014be4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014be9:	75 b5                	jne    c0014ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014beb:	90                   	nop
c0014bec:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014bf1:	0f 84 99 00 00 00    	je     c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014bf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bfe:	85 c0                	test   eax,eax
c0014c00:	75 16                	jne    c0014c18 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014c02:	83 ec 08             	sub    esp,0x8
c0014c05:	68 b9 0e 03 c0       	push   0xc0030eb9
c0014c0a:	68 26 fb 02 c0       	push   0xc002fb26
c0014c0f:	e8 90 af 00 00       	call   c001fba4 <CPrintf>
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	90                   	nop
c0014c18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c22:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014c26:	75 18                	jne    c0014c40 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014c28:	83 ec 08             	sub    esp,0x8
c0014c2b:	68 b9 0e 03 c0       	push   0xc0030eb9
c0014c30:	68 26 fb 02 c0       	push   0xc002fb26
c0014c35:	e8 6a af 00 00       	call   c001fba4 <CPrintf>
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c46:	85 c0                	test   eax,eax
c0014c48:	74 16                	je     c0014c60 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014c4a:	83 ec 08             	sub    esp,0x8
c0014c4d:	68 14 0f 03 c0       	push   0xc0030f14
c0014c52:	68 26 fb 02 c0       	push   0xc002fb26
c0014c57:	e8 48 af 00 00       	call   c001fba4 <CPrintf>
c0014c5c:	83 c4 10             	add    esp,0x10
c0014c5f:	90                   	nop
c0014c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c64:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014c6f:	0f b7 d2             	movzx  edx,dx
c0014c72:	0f b7 c0             	movzx  eax,ax
c0014c75:	39 c2                	cmp    edx,eax
c0014c77:	74 17                	je     c0014c90 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c79:	83 ec 08             	sub    esp,0x8
c0014c7c:	68 38 0f 03 c0       	push   0xc0030f38
c0014c81:	68 26 fb 02 c0       	push   0xc002fb26
c0014c86:	e8 19 af 00 00       	call   c001fba4 <CPrintf>
c0014c8b:	83 c4 10             	add    esp,0x10
c0014c8e:	66 90                	xchg   ax,ax
c0014c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c94:	eb 52                	jmp    c0014ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014c96:	66 90                	xchg   ax,ax
c0014c98:	b8 00 00 00 00       	mov    eax,0x0
c0014c9d:	eb 49                	jmp    c0014ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014c9f:	90                   	nop
c0014ca0:	90                   	nop
c0014ca1:	eb 09                	jmp    c0014cac <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014ca3:	90                   	nop
c0014ca4:	90                   	nop
c0014ca5:	eb 05                	jmp    c0014cac <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014ca7:	90                   	nop
c0014ca8:	90                   	nop
c0014ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0014cac:	83 ec 0c             	sub    esp,0xc
c0014caf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cb3:	e8 78 3e ff ff       	call   c0008b30 <pbuf_clen>
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014cc2:	0f b6 c0             	movzx  eax,al
c0014cc5:	89 d3                	mov    ebx,edx
c0014cc7:	29 c3                	sub    ebx,eax
c0014cc9:	89 d8                	mov    eax,ebx
c0014ccb:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014cd1:	83 ec 0c             	sub    esp,0xc
c0014cd4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cd8:	e8 7f 36 ff ff       	call   c000835c <pbuf_free>
c0014cdd:	83 c4 10             	add    esp,0x10
c0014ce0:	b8 00 00 00 00       	mov    eax,0x0
c0014ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ce8:	83 c4 28             	add    esp,0x28
c0014ceb:	5b                   	pop    ebx
c0014cec:	c3                   	ret    
c0014ced:	8d 76 00             	lea    esi,[esi+0x0]

c0014cf0 <ip_reass>:
c0014cf0:	53                   	push   ebx
c0014cf1:	83 ec 28             	sub    esp,0x28
c0014cf4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014cfc:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014d02:	83 c0 01             	add    eax,0x1
c0014d05:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d1a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d1d:	0f b7 c0             	movzx  eax,ax
c0014d20:	83 ec 0c             	sub    esp,0xc
c0014d23:	50                   	push   eax
c0014d24:	e8 bf be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014d29:	83 c4 10             	add    esp,0x10
c0014d2c:	0f b7 c0             	movzx  eax,ax
c0014d2f:	c1 e8 08             	shr    eax,0x8
c0014d32:	0f b7 c0             	movzx  eax,ax
c0014d35:	83 e0 0f             	and    eax,0xf
c0014d38:	c1 e0 02             	shl    eax,0x2
c0014d3b:	83 f8 14             	cmp    eax,0x14
c0014d3e:	74 14                	je     c0014d54 <ip_reass+0x64>
c0014d40:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014d46:	83 c0 01             	add    eax,0x1
c0014d49:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014d4f:	e9 68 03 00 00       	jmp    c00150bc <ip_reass+0x3cc>
c0014d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d58:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014d5c:	0f b7 c0             	movzx  eax,ax
c0014d5f:	83 ec 0c             	sub    esp,0xc
c0014d62:	50                   	push   eax
c0014d63:	e8 80 be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	25 ff 1f 00 00       	and    eax,0x1fff
c0014d70:	c1 e0 03             	shl    eax,0x3
c0014d73:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d7c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014d80:	0f b7 c0             	movzx  eax,ax
c0014d83:	83 ec 0c             	sub    esp,0xc
c0014d86:	50                   	push   eax
c0014d87:	e8 5c be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014d8c:	83 c4 10             	add    esp,0x10
c0014d8f:	89 c3                	mov    ebx,eax
c0014d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d95:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d98:	0f b7 c0             	movzx  eax,ax
c0014d9b:	83 ec 0c             	sub    esp,0xc
c0014d9e:	50                   	push   eax
c0014d9f:	e8 44 be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014da4:	83 c4 10             	add    esp,0x10
c0014da7:	0f b7 c0             	movzx  eax,ax
c0014daa:	c1 e8 08             	shr    eax,0x8
c0014dad:	83 e0 0f             	and    eax,0xf
c0014db0:	c1 e0 02             	shl    eax,0x2
c0014db3:	89 d9                	mov    ecx,ebx
c0014db5:	29 c1                	sub    ecx,eax
c0014db7:	89 c8                	mov    eax,ecx
c0014db9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014dbe:	83 ec 0c             	sub    esp,0xc
c0014dc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014dc5:	e8 66 3d ff ff       	call   c0008b30 <pbuf_clen>
c0014dca:	83 c4 10             	add    esp,0x10
c0014dcd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014dd1:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014dd7:	0f b7 d0             	movzx  edx,ax
c0014dda:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ddf:	01 d0                	add    eax,edx
c0014de1:	83 f8 0a             	cmp    eax,0xa
c0014de4:	7e 42                	jle    c0014e28 <ip_reass+0x138>
c0014de6:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014deb:	83 ec 08             	sub    esp,0x8
c0014dee:	50                   	push   eax
c0014def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014df3:	e8 ec f8 ff ff       	call   c00146e4 <ip_reass_remove_oldest_datagram>
c0014df8:	83 c4 10             	add    esp,0x10
c0014dfb:	85 c0                	test   eax,eax
c0014dfd:	74 15                	je     c0014e14 <ip_reass+0x124>
c0014dff:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014e05:	0f b7 d0             	movzx  edx,ax
c0014e08:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014e0d:	01 d0                	add    eax,edx
c0014e0f:	83 f8 0a             	cmp    eax,0xa
c0014e12:	7e 14                	jle    c0014e28 <ip_reass+0x138>
c0014e14:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014e1a:	83 c0 01             	add    eax,0x1
c0014e1d:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014e23:	e9 94 02 00 00       	jmp    c00150bc <ip_reass+0x3cc>
c0014e28:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014e2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e31:	eb 65                	jmp    c0014e98 <ip_reass+0x1a8>
c0014e33:	90                   	nop
c0014e34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e38:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014e42:	39 c2                	cmp    edx,eax
c0014e44:	75 3e                	jne    c0014e84 <ip_reass+0x194>
c0014e46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e4a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e54:	39 c2                	cmp    edx,eax
c0014e56:	75 2c                	jne    c0014e84 <ip_reass+0x194>
c0014e58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e63:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014e67:	0f b7 d2             	movzx  edx,dx
c0014e6a:	0f b7 c0             	movzx  eax,ax
c0014e6d:	39 c2                	cmp    edx,eax
c0014e6f:	75 13                	jne    c0014e84 <ip_reass+0x194>
c0014e71:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014e77:	83 c0 01             	add    eax,0x1
c0014e7a:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014e80:	eb 1e                	jmp    c0014ea0 <ip_reass+0x1b0>
c0014e82:	66 90                	xchg   ax,ax
c0014e84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e96:	66 90                	xchg   ax,ax
c0014e98:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e9d:	75 95                	jne    c0014e34 <ip_reass+0x144>
c0014e9f:	90                   	nop
c0014ea0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ea5:	75 25                	jne    c0014ecc <ip_reass+0x1dc>
c0014ea7:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014eac:	83 ec 08             	sub    esp,0x8
c0014eaf:	50                   	push   eax
c0014eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eb4:	e8 4b f9 ff ff       	call   c0014804 <ip_reass_enqueue_new_datagram>
c0014eb9:	83 c4 10             	add    esp,0x10
c0014ebc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ec0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ec5:	75 61                	jne    c0014f28 <ip_reass+0x238>
c0014ec7:	e9 f0 01 00 00       	jmp    c00150bc <ip_reass+0x3cc>
c0014ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ed4:	0f b7 c0             	movzx  eax,ax
c0014ed7:	83 ec 0c             	sub    esp,0xc
c0014eda:	50                   	push   eax
c0014edb:	e8 08 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	0f b7 c0             	movzx  eax,ax
c0014ee6:	25 ff 1f 00 00       	and    eax,0x1fff
c0014eeb:	75 3b                	jne    c0014f28 <ip_reass+0x238>
c0014eed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ef1:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014ef5:	0f b7 c0             	movzx  eax,ax
c0014ef8:	83 ec 0c             	sub    esp,0xc
c0014efb:	50                   	push   eax
c0014efc:	e8 e7 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f01:	83 c4 10             	add    esp,0x10
c0014f04:	0f b7 c0             	movzx  eax,ax
c0014f07:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f0c:	74 1a                	je     c0014f28 <ip_reass+0x238>
c0014f0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f12:	83 c0 08             	add    eax,0x8
c0014f15:	83 ec 04             	sub    esp,0x4
c0014f18:	6a 14                	push   0x14
c0014f1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f1e:	50                   	push   eax
c0014f1f:	e8 56 b4 fe ff       	call   c000037a <memcpy>
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	90                   	nop
c0014f28:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0014f2d:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f33:	01 d0                	add    eax,edx
c0014f35:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f3f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014f43:	0f b7 c0             	movzx  eax,ax
c0014f46:	83 e0 20             	and    eax,0x20
c0014f49:	75 29                	jne    c0014f74 <ip_reass+0x284>
c0014f4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f4f:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014f52:	83 c8 01             	or     eax,0x1
c0014f55:	88 c2                	mov    dl,al
c0014f57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f5b:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c0014f5e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014f63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f67:	01 d0                	add    eax,edx
c0014f69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f6d:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014f71:	8d 76 00             	lea    esi,[esi+0x0]
c0014f74:	83 ec 08             	sub    esp,0x8
c0014f77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014f7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f7f:	e8 3c f9 ff ff       	call   c00148c0 <ip_reass_chain_frag_into_datagram_and_validate>
c0014f84:	83 c4 10             	add    esp,0x10
c0014f87:	85 c0                	test   eax,eax
c0014f89:	0f 84 25 01 00 00    	je     c00150b4 <ip_reass+0x3c4>
c0014f8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f93:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f96:	83 c0 14             	add    eax,0x14
c0014f99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f9d:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014fa1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fab:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fc3:	83 c0 08             	add    eax,0x8
c0014fc6:	83 ec 04             	sub    esp,0x4
c0014fc9:	6a 14                	push   0x14
c0014fcb:	50                   	push   eax
c0014fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fd0:	e8 a5 b3 fe ff       	call   c000037a <memcpy>
c0014fd5:	83 c4 10             	add    esp,0x10
c0014fd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fdc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014fdf:	0f b7 c0             	movzx  eax,ax
c0014fe2:	83 ec 0c             	sub    esp,0xc
c0014fe5:	50                   	push   eax
c0014fe6:	e8 fd bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ff2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0014ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffa:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0015000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015004:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c001500a:	83 ec 08             	sub    esp,0x8
c001500d:	6a 14                	push   0x14
c001500f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015013:	e8 e0 e4 ff ff       	call   c00134f8 <inet_chksum>
c0015018:	83 c4 10             	add    esp,0x10
c001501b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001501f:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015023:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015027:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001502a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001502e:	eb 3c                	jmp    c001506c <ip_reass+0x37c>
c0015030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001503b:	83 ec 08             	sub    esp,0x8
c001503e:	6a ec                	push   0xffffffec
c0015040:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015044:	e8 77 31 ff ff       	call   c00081c0 <pbuf_header>
c0015049:	83 c4 10             	add    esp,0x10
c001504c:	83 ec 08             	sub    esp,0x8
c001504f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015057:	e8 38 3b ff ff       	call   c0008b94 <pbuf_cat>
c001505c:	83 c4 10             	add    esp,0x10
c001505f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015063:	8b 00                	mov    eax,DWORD PTR [eax]
c0015065:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015069:	8d 76 00             	lea    esi,[esi+0x0]
c001506c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015071:	75 bd                	jne    c0015030 <ip_reass+0x340>
c0015073:	83 ec 08             	sub    esp,0x8
c0015076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001507a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001507e:	e8 79 f3 ff ff       	call   c00143fc <ip_reass_dequeue_datagram>
c0015083:	83 c4 10             	add    esp,0x10
c0015086:	83 ec 0c             	sub    esp,0xc
c0015089:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001508d:	e8 9e 3a ff ff       	call   c0008b30 <pbuf_clen>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001509c:	0f b6 c0             	movzx  eax,al
c001509f:	89 d3                	mov    ebx,edx
c00150a1:	29 c3                	sub    ebx,eax
c00150a3:	89 d8                	mov    eax,ebx
c00150a5:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00150ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150af:	eb 2f                	jmp    c00150e0 <ip_reass+0x3f0>
c00150b1:	8d 76 00             	lea    esi,[esi+0x0]
c00150b4:	b8 00 00 00 00       	mov    eax,0x0
c00150b9:	eb 25                	jmp    c00150e0 <ip_reass+0x3f0>
c00150bb:	90                   	nop
c00150bc:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c00150c2:	83 c0 01             	add    eax,0x1
c00150c5:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c00150cb:	83 ec 0c             	sub    esp,0xc
c00150ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150d2:	e8 85 32 ff ff       	call   c000835c <pbuf_free>
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	b8 00 00 00 00       	mov    eax,0x0
c00150df:	90                   	nop
c00150e0:	83 c4 28             	add    esp,0x28
c00150e3:	5b                   	pop    ebx
c00150e4:	c3                   	ret    
c00150e5:	8d 76 00             	lea    esi,[esi+0x0]

c00150e8 <ip_frag_alloc_pbuf_custom_ref>:
c00150e8:	83 ec 0c             	sub    esp,0xc
c00150eb:	83 ec 0c             	sub    esp,0xc
c00150ee:	6a 06                	push   0x6
c00150f0:	e8 7f 28 ff ff       	call   c0007974 <memp_malloc>
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	83 c4 0c             	add    esp,0xc
c00150fb:	c3                   	ret    

c00150fc <ip_frag_free_pbuf_custom_ref>:
c00150fc:	83 ec 0c             	sub    esp,0xc
c00150ff:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015104:	75 16                	jne    c001511c <ip_frag_free_pbuf_custom_ref+0x20>
c0015106:	83 ec 08             	sub    esp,0x8
c0015109:	68 56 ff 02 c0       	push   0xc002ff56
c001510e:	68 26 fb 02 c0       	push   0xc002fb26
c0015113:	e8 8c aa 00 00       	call   c001fba4 <CPrintf>
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	90                   	nop
c001511c:	83 ec 08             	sub    esp,0x8
c001511f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015123:	6a 06                	push   0x6
c0015125:	e8 76 29 ff ff       	call   c0007aa0 <memp_free>
c001512a:	83 c4 10             	add    esp,0x10
c001512d:	90                   	nop
c001512e:	83 c4 0c             	add    esp,0xc
c0015131:	c3                   	ret    
c0015132:	66 90                	xchg   ax,ax

c0015134 <ipfrag_free_pbuf_custom>:
c0015134:	83 ec 1c             	sub    esp,0x1c
c0015137:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001513b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001513f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015144:	75 16                	jne    c001515c <ipfrag_free_pbuf_custom+0x28>
c0015146:	83 ec 08             	sub    esp,0x8
c0015149:	68 c6 0e 03 c0       	push   0xc0030ec6
c001514e:	68 26 fb 02 c0       	push   0xc002fb26
c0015153:	e8 4c aa 00 00       	call   c001fba4 <CPrintf>
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	90                   	nop
c001515c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015160:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0015164:	74 16                	je     c001517c <ipfrag_free_pbuf_custom+0x48>
c0015166:	83 ec 08             	sub    esp,0x8
c0015169:	68 d2 0e 03 c0       	push   0xc0030ed2
c001516e:	68 26 fb 02 c0       	push   0xc002fb26
c0015173:	e8 2c aa 00 00       	call   c001fba4 <CPrintf>
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	90                   	nop
c001517c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015180:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015183:	85 c0                	test   eax,eax
c0015185:	74 15                	je     c001519c <ipfrag_free_pbuf_custom+0x68>
c0015187:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001518b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001518e:	83 ec 0c             	sub    esp,0xc
c0015191:	50                   	push   eax
c0015192:	e8 c5 31 ff ff       	call   c000835c <pbuf_free>
c0015197:	83 c4 10             	add    esp,0x10
c001519a:	66 90                	xchg   ax,ax
c001519c:	83 ec 0c             	sub    esp,0xc
c001519f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151a3:	e8 54 ff ff ff       	call   c00150fc <ip_frag_free_pbuf_custom_ref>
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	90                   	nop
c00151ac:	83 c4 1c             	add    esp,0x1c
c00151af:	c3                   	ret    

c00151b0 <ip_frag>:
c00151b0:	53                   	push   ebx
c00151b1:	83 ec 38             	sub    esp,0x38
c00151b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00151b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151bb:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c00151c0:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c00151c7:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00151ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00151d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00151d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00151e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151e5:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00151e9:	0f b7 c0             	movzx  eax,ax
c00151ec:	83 ec 0c             	sub    esp,0xc
c00151ef:	50                   	push   eax
c00151f0:	e8 f3 b9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00151f5:	83 c4 10             	add    esp,0x10
c00151f8:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00151fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015201:	25 ff 1f 00 00       	and    eax,0x1fff
c0015206:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001520b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001520f:	25 00 20 00 00       	and    eax,0x2000
c0015214:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015219:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001521d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015220:	83 e8 14             	sub    eax,0x14
c0015223:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015228:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001522d:	83 e8 14             	sub    eax,0x14
c0015230:	79 06                	jns    c0015238 <ip_frag+0x88>
c0015232:	83 c0 07             	add    eax,0x7
c0015235:	8d 76 00             	lea    esi,[esi+0x0]
c0015238:	c1 f8 03             	sar    eax,0x3
c001523b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0015240:	e9 03 03 00 00       	jmp    c0015548 <ip_frag+0x398>
c0015245:	8d 76 00             	lea    esi,[esi+0x0]
c0015248:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001524d:	8d 50 ed             	lea    edx,[eax-0x13]
c0015250:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015255:	39 c2                	cmp    edx,eax
c0015257:	0f 9f c0             	setg   al
c001525a:	0f b6 c0             	movzx  eax,al
c001525d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015262:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015266:	25 ff 1f 00 00       	and    eax,0x1fff
c001526b:	89 c2                	mov    edx,eax
c001526d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0015272:	09 d0                	or     eax,edx
c0015274:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015279:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001527e:	85 c0                	test   eax,eax
c0015280:	75 0e                	jne    c0015290 <ip_frag+0xe0>
c0015282:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015286:	80 cc 20             	or     ah,0x20
c0015289:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001528e:	66 90                	xchg   ax,ax
c0015290:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015295:	85 c0                	test   eax,eax
c0015297:	75 0b                	jne    c00152a4 <ip_frag+0xf4>
c0015299:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001529d:	c1 e0 03             	shl    eax,0x3
c00152a0:	eb 0a                	jmp    c00152ac <ip_frag+0xfc>
c00152a2:	66 90                	xchg   ax,ax
c00152a4:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00152a9:	8d 76 00             	lea    esi,[esi+0x0]
c00152ac:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00152b1:	83 ec 04             	sub    esp,0x4
c00152b4:	6a 00                	push   0x0
c00152b6:	6a 14                	push   0x14
c00152b8:	6a 02                	push   0x2
c00152ba:	e8 75 32 ff ff       	call   c0008534 <pbuf_alloc>
c00152bf:	83 c4 10             	add    esp,0x10
c00152c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152cb:	75 07                	jne    c00152d4 <ip_frag+0x124>
c00152cd:	b0 ff                	mov    al,0xff
c00152cf:	e9 84 02 00 00       	jmp    c0015558 <ip_frag+0x3a8>
c00152d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00152dc:	0f b7 c0             	movzx  eax,ax
c00152df:	83 f8 13             	cmp    eax,0x13
c00152e2:	77 18                	ja     c00152fc <ip_frag+0x14c>
c00152e4:	83 ec 08             	sub    esp,0x8
c00152e7:	68 68 0f 03 c0       	push   0xc0030f68
c00152ec:	68 26 fb 02 c0       	push   0xc002fb26
c00152f1:	e8 ae a8 00 00       	call   c001fba4 <CPrintf>
c00152f6:	83 c4 10             	add    esp,0x10
c00152f9:	8d 76 00             	lea    esi,[esi+0x0]
c00152fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015303:	83 ec 04             	sub    esp,0x4
c0015306:	6a 14                	push   0x14
c0015308:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001530c:	50                   	push   eax
c001530d:	e8 68 b0 fe ff       	call   c000037a <memcpy>
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015319:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001531c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015320:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015324:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015327:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c001532c:	01 c2                	add    edx,eax
c001532e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015332:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0015335:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015339:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c001533d:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c0015342:	89 d1                	mov    ecx,edx
c0015344:	29 c1                	sub    ecx,eax
c0015346:	89 c8                	mov    eax,ecx
c0015348:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001534c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015354:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015359:	e9 1a 01 00 00       	jmp    c0015478 <ip_frag+0x2c8>
c001535e:	66 90                	xchg   ax,ax
c0015360:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015364:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015368:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001536c:	0f b7 d8             	movzx  ebx,ax
c001536f:	0f b7 ca             	movzx  ecx,dx
c0015372:	39 cb                	cmp    ebx,ecx
c0015374:	76 02                	jbe    c0015378 <ip_frag+0x1c8>
c0015376:	89 d0                	mov    eax,edx
c0015378:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c001537d:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015382:	85 c0                	test   eax,eax
c0015384:	75 12                	jne    c0015398 <ip_frag+0x1e8>
c0015386:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001538a:	8b 00                	mov    eax,DWORD PTR [eax]
c001538c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015390:	e9 e3 00 00 00       	jmp    c0015478 <ip_frag+0x2c8>
c0015395:	8d 76 00             	lea    esi,[esi+0x0]
c0015398:	e8 4b fd ff ff       	call   c00150e8 <ip_frag_alloc_pbuf_custom_ref>
c001539d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153a1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00153a6:	75 18                	jne    c00153c0 <ip_frag+0x210>
c00153a8:	83 ec 0c             	sub    esp,0xc
c00153ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153af:	e8 a8 2f ff ff       	call   c000835c <pbuf_free>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	b0 ff                	mov    al,0xff
c00153b9:	e9 9a 01 00 00       	jmp    c0015558 <ip_frag+0x3a8>
c00153be:	66 90                	xchg   ax,ax
c00153c0:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c00153c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153c9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00153cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00153d0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00153d5:	83 ec 08             	sub    esp,0x8
c00153d8:	53                   	push   ebx
c00153d9:	51                   	push   ecx
c00153da:	52                   	push   edx
c00153db:	6a 02                	push   0x2
c00153dd:	50                   	push   eax
c00153de:	6a 03                	push   0x3
c00153e0:	e8 b7 2c ff ff       	call   c000809c <pbuf_alloced_custom>
c00153e5:	83 c4 20             	add    esp,0x20
c00153e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153ec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00153f1:	75 25                	jne    c0015418 <ip_frag+0x268>
c00153f3:	83 ec 0c             	sub    esp,0xc
c00153f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00153fa:	e8 fd fc ff ff       	call   c00150fc <ip_frag_free_pbuf_custom_ref>
c00153ff:	83 c4 10             	add    esp,0x10
c0015402:	83 ec 0c             	sub    esp,0xc
c0015405:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015409:	e8 4e 2f ff ff       	call   c000835c <pbuf_free>
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	b0 ff                	mov    al,0xff
c0015413:	e9 40 01 00 00       	jmp    c0015558 <ip_frag+0x3a8>
c0015418:	83 ec 0c             	sub    esp,0xc
c001541b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001541f:	e8 40 37 ff ff       	call   c0008b64 <pbuf_ref>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001542b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001542f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015436:	c7 40 10 34 51 01 c0 	mov    DWORD PTR [eax+0x10],0xc0015134
c001543d:	83 ec 08             	sub    esp,0x8
c0015440:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015448:	e8 47 37 ff ff       	call   c0008b94 <pbuf_cat>
c001544d:	83 c4 10             	add    esp,0x10
c0015450:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015454:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015459:	89 d3                	mov    ebx,edx
c001545b:	29 c3                	sub    ebx,eax
c001545d:	89 d8                	mov    eax,ebx
c001545f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015464:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015469:	85 c0                	test   eax,eax
c001546b:	74 0b                	je     c0015478 <ip_frag+0x2c8>
c001546d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015471:	8b 00                	mov    eax,DWORD PTR [eax]
c0015473:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015477:	90                   	nop
c0015478:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c001547d:	85 c0                	test   eax,eax
c001547f:	0f 85 db fe ff ff    	jne    c0015360 <ip_frag+0x1b0>
c0015485:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c001548a:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001548f:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c0015494:	83 ec 0c             	sub    esp,0xc
c0015497:	50                   	push   eax
c0015498:	e8 4b b7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001549d:	83 c4 10             	add    esp,0x10
c00154a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00154a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ac:	83 c0 14             	add    eax,0x14
c00154af:	0f b7 c0             	movzx  eax,ax
c00154b2:	83 ec 0c             	sub    esp,0xc
c00154b5:	50                   	push   eax
c00154b6:	e8 2d b7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00154bb:	83 c4 10             	add    esp,0x10
c00154be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154c2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00154c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154ca:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00154d0:	83 ec 08             	sub    esp,0x8
c00154d3:	6a 14                	push   0x14
c00154d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154d9:	e8 1a e0 ff ff       	call   c00134f8 <inet_chksum>
c00154de:	83 c4 10             	add    esp,0x10
c00154e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154e5:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00154e9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00154ed:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00154f0:	83 ec 04             	sub    esp,0x4
c00154f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00154f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154fb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00154ff:	ff d0                	call   eax
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c001550a:	83 c0 01             	add    eax,0x1
c001550d:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c0015513:	83 ec 0c             	sub    esp,0xc
c0015516:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001551a:	e8 3d 2e ff ff       	call   c000835c <pbuf_free>
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001552b:	89 d1                	mov    ecx,edx
c001552d:	29 c1                	sub    ecx,eax
c001552f:	89 c8                	mov    eax,ecx
c0015531:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015536:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001553a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001553e:	01 d0                	add    eax,edx
c0015540:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015545:	8d 76 00             	lea    esi,[esi+0x0]
c0015548:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c001554d:	85 c0                	test   eax,eax
c001554f:	0f 85 f3 fc ff ff    	jne    c0015248 <ip_frag+0x98>
c0015555:	b0 00                	mov    al,0x0
c0015557:	90                   	nop
c0015558:	83 c4 38             	add    esp,0x38
c001555b:	5b                   	pop    ebx
c001555c:	c3                   	ret    
c001555d:	90                   	nop

c001555e <Computer::close(int, int, void*)>:
c001555e:	53                   	push   ebx
c001555f:	83 ec 08             	sub    esp,0x8
c0015562:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015566:	e8 c9 a4 00 00       	call   c001fa34 <KeExecuteAtexit()>
c001556b:	83 ec 0c             	sub    esp,0xc
c001556e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015574:	50                   	push   eax
c0015575:	e8 cc 5f 00 00       	call   c001b546 <Device::closeAll()>
c001557a:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015580:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015584:	8b 10                	mov    edx,DWORD PTR [eax]
c0015586:	51                   	push   ecx
c0015587:	68 0f 27 00 00       	push   0x270f
c001558c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015590:	53                   	push   ebx
c0015591:	50                   	push   eax
c0015592:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015595:	83 c4 14             	add    esp,0x14
c0015598:	68 88 0f 03 c0       	push   0xc0030f88
c001559d:	e8 d4 ac 00 00       	call   c0020276 <KePanic(char const*)>
c00155a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155a7:	83 c4 18             	add    esp,0x18
c00155aa:	5b                   	pop    ebx
c00155ab:	c3                   	ret    

c00155ac <Krnl::firstTask()>:
c00155ac:	53                   	push   ebx
c00155ad:	83 ec 14             	sub    esp,0x14
c00155b0:	fb                   	sti    
c00155b1:	68 9e 0f 03 c0       	push   0xc0030f9e
c00155b6:	e8 58 a5 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c00155bb:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00155c2:	e8 f7 0d 00 00       	call   c00163be <malloc>
c00155c7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00155ce:	89 c3                	mov    ebx,eax
c00155d0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00155d5:	50                   	push   eax
c00155d6:	68 b7 0f 03 c0       	push   0xc0030fb7
c00155db:	6a 01                	push   0x1
c00155dd:	53                   	push   ebx
c00155de:	e8 31 f8 00 00       	call   c0024e14 <Process::Process(bool, char const*, Process*, char**)>
c00155e3:	83 c4 20             	add    esp,0x20
c00155e6:	68 ff 00 00 00       	push   0xff
c00155eb:	6a 00                	push   0x0
c00155ed:	68 05 5e 01 c0       	push   0xc0015e05
c00155f2:	53                   	push   ebx
c00155f3:	e8 44 fa 00 00       	call   c002503c <Process::createThread(void (*)(void*), void*, int)>
c00155f8:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c00155fe:	6a 7a                	push   0x7a
c0015600:	6a 00                	push   0x0
c0015602:	68 04 59 02 c0       	push   0xc0025904
c0015607:	52                   	push   edx
c0015608:	e8 2f fa 00 00       	call   c002503c <Process::createThread(void (*)(void*), void*, int)>
c001560d:	83 c4 14             	add    esp,0x14
c0015610:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c0015615:	68 b4 10 03 c0       	push   0xc00310b4
c001561a:	e8 f4 a4 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001561f:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c0015626:	e8 04 ae 00 00       	call   c002042f <KeInitRand()>
c001562b:	e8 6b 06 01 00       	call   c0025c9b <Vm::initialise8086()>
c0015630:	e8 0d 4b 00 00       	call   c001a142 <Fs::initVFS()>
c0015635:	c7 04 24 c4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fc4
c001563c:	e8 d2 a4 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c0015641:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015646:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001564c:	8b 10                	mov    edx,DWORD PTR [eax]
c001564e:	6a 00                	push   0x0
c0015650:	6a 00                	push   0x0
c0015652:	6a 00                	push   0x0
c0015654:	50                   	push   eax
c0015655:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015658:	83 c4 14             	add    esp,0x14
c001565b:	68 b4 10 03 c0       	push   0xc00310b4
c0015660:	e8 ae a4 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c0015665:	e8 72 42 00 00       	call   c00198dc <KeInitialiseSymlinks()>
c001566a:	e8 4f aa 00 00       	call   c00200be <KeLoadSystemEnv()>
c001566f:	e8 c7 ac 00 00       	call   c002033b <KeSetupPowerManager()>
c0015674:	83 c4 0c             	add    esp,0xc
c0015677:	6a 3a                	push   0x3a
c0015679:	68 de 0f 03 c0       	push   0xc0030fde
c001567e:	68 e7 0f 03 c0       	push   0xc0030fe7
c0015683:	e8 43 d9 00 00       	call   c0022fcb <Reg::readIntWithDefault(char*, char*, int)>
c0015688:	89 04 24             	mov    DWORD PTR [esp],eax
c001568b:	e8 cc 56 00 00       	call   c001ad5c <User::loadClockSettings(int)>
c0015690:	c7 04 24 d8 10 03 c0 	mov    DWORD PTR [esp],0xc00310d8
c0015697:	e8 77 a4 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001569c:	59                   	pop    ecx
c001569d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00156a2:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00156a8:	53                   	push   ebx
c00156a9:	e8 4c 5d 00 00       	call   c001b3fa <Device::loadDriversForAll()>
c00156ae:	e8 61 17 ff ff       	call   c0006e14 <lwip_init>
c00156b3:	c7 04 24 ef 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fef
c00156ba:	e8 54 a4 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c00156bf:	58                   	pop    eax
c00156c0:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c00156c6:	5a                   	pop    edx
c00156c7:	6a 01                	push   0x1
c00156c9:	68 00 10 03 c0       	push   0xc0031000
c00156ce:	e8 36 f1 00 00       	call   c0024809 <Thr::loadDLL(char const*, bool)>
c00156d3:	59                   	pop    ecx
c00156d4:	5a                   	pop    edx
c00156d5:	53                   	push   ebx
c00156d6:	50                   	push   eax
c00156d7:	e8 7f f3 00 00       	call   c0024a5b <Thr::executeDLL(unsigned long, void*)>
c00156dc:	83 c4 10             	add    esp,0x10
c00156df:	83 ec 0c             	sub    esp,0xc
c00156e2:	6a 02                	push   0x2
c00156e4:	e8 5f fc 00 00       	call   c0025348 <blockTask(TaskState)>
c00156e9:	83 c4 10             	add    esp,0x10
c00156ec:	eb f1                	jmp    c00156df <Krnl::firstTask()+0x133>

c00156ee <Computer::Computer()>:
c00156ee:	83 ec 0c             	sub    esp,0xc
c00156f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f5:	83 ec 08             	sub    esp,0x8
c00156f8:	68 1c 10 03 c0       	push   0xc003101c
c00156fd:	50                   	push   eax
c00156fe:	e8 3d 5d 00 00       	call   c001b440 <Device::Device(char const*)>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	ba 24 11 03 c0       	mov    edx,0xc0031124
c001570b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001570f:	89 10                	mov    DWORD PTR [eax],edx
c0015711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015715:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001571f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015723:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c001572d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015731:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0015737:	83 ca 04             	or     edx,0x4
c001573a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015744:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001574a:	0f b6 d0             	movzx  edx,al
c001574d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015751:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0015758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001575c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015762:	0f b6 d0             	movzx  edx,al
c0015765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015769:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001576e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015772:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015778:	8d 50 01             	lea    edx,[eax+0x1]
c001577b:	88 d1                	mov    cl,dl
c001577d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015781:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0015787:	0f b6 d0             	movzx  edx,al
c001578a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001578e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0015792:	83 e1 3f             	and    ecx,0x3f
c0015795:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015799:	90                   	nop
c001579a:	83 c4 0c             	add    esp,0xc
c001579d:	c3                   	ret    

c001579e <Computer::setBootMessage(char const*)>:
c001579e:	c3                   	ret    
c001579f:	90                   	nop

c00157a0 <Computer::detectFeatures()>:
c00157a0:	55                   	push   ebp
c00157a1:	57                   	push   edi
c00157a2:	56                   	push   esi
c00157a3:	53                   	push   ebx
c00157a4:	83 ec 1c             	sub    esp,0x1c
c00157a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00157ab:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00157b1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c00157b7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00157bd:	e8 37 aa fe ff       	call   c00001f9 <detectCPUID>
c00157c2:	31 d2                	xor    edx,edx
c00157c4:	85 c0                	test   eax,eax
c00157c6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157cc:	0f 95 c2             	setne  dl
c00157cf:	83 e0 fd             	and    eax,0xfffffffd
c00157d2:	d1 e2                	shl    edx,1
c00157d4:	09 d0                	or     eax,edx
c00157d6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157dc:	a8 02                	test   al,0x2
c00157de:	75 51                	jne    c0015831 <Computer::detectFeatures()+0x91>
c00157e0:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c00157e7:	74 0f                	je     c00157f8 <Computer::detectFeatures()+0x58>
c00157e9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157ef:	83 e0 fb             	and    eax,0xfffffffb
c00157f2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00157f8:	e8 59 8b 01 00       	call   c002e356 <x87Detect>
c00157fd:	83 e0 01             	and    eax,0x1
c0015800:	c1 e0 04             	shl    eax,0x4
c0015803:	89 c2                	mov    edx,eax
c0015805:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001580b:	83 e0 ef             	and    eax,0xffffffef
c001580e:	09 d0                	or     eax,edx
c0015810:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015816:	88 c2                	mov    dl,al
c0015818:	a8 10                	test   al,0x10
c001581a:	0f 85 33 01 00 00    	jne    c0015953 <Computer::detectFeatures()+0x1b3>
c0015820:	80 e2 80             	and    dl,0x80
c0015823:	0f 85 4c 01 00 00    	jne    c0015975 <Computer::detectFeatures()+0x1d5>
c0015829:	83 c4 1c             	add    esp,0x1c
c001582c:	5b                   	pop    ebx
c001582d:	5e                   	pop    esi
c001582e:	5f                   	pop    edi
c001582f:	5d                   	pop    ebp
c0015830:	c3                   	ret    
c0015831:	83 ec 0c             	sub    esp,0xc
c0015834:	6a 20                	push   0x20
c0015836:	e8 11 97 00 00       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c001583b:	83 e0 01             	and    eax,0x1
c001583e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015845:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001584b:	83 e0 f7             	and    eax,0xfffffff7
c001584e:	09 d0                	or     eax,edx
c0015850:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015856:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c001585d:	e8 ea 96 00 00       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c0015862:	89 c2                	mov    edx,eax
c0015864:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001586a:	83 e2 01             	and    edx,0x1
c001586d:	83 e0 fe             	and    eax,0xfffffffe
c0015870:	09 d0                	or     eax,edx
c0015872:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015878:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001587f:	e8 c8 96 00 00       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c0015884:	89 c2                	mov    edx,eax
c0015886:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001588c:	c1 e2 07             	shl    edx,0x7
c001588f:	83 e0 7f             	and    eax,0x7f
c0015892:	09 d0                	or     eax,edx
c0015894:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001589a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c00158a1:	e8 a6 96 00 00       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c00158a6:	83 c4 10             	add    esp,0x10
c00158a9:	83 e0 01             	and    eax,0x1
c00158ac:	c1 e0 05             	shl    eax,0x5
c00158af:	89 c2                	mov    edx,eax
c00158b1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158b7:	83 e0 df             	and    eax,0xffffffdf
c00158ba:	09 d0                	or     eax,edx
c00158bc:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c00158c6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158cc:	0f 84 c9 00 00 00    	je     c001599b <Computer::detectFeatures()+0x1fb>
c00158d2:	83 e0 fe             	and    eax,0xfffffffe
c00158d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158db:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158e1:	89 c2                	mov    edx,eax
c00158e3:	83 e2 09             	and    edx,0x9
c00158e6:	83 fa 01             	cmp    edx,0x1
c00158e9:	75 09                	jne    c00158f4 <Computer::detectFeatures()+0x154>
c00158eb:	83 e0 fe             	and    eax,0xfffffffe
c00158ee:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158f4:	83 ec 0c             	sub    esp,0xc
c00158f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00158fb:	50                   	push   eax
c00158fc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015900:	55                   	push   ebp
c0015901:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015905:	57                   	push   edi
c0015906:	8d 74 24 18          	lea    esi,[esp+0x18]
c001590a:	56                   	push   esi
c001590b:	68 00 00 00 80       	push   0x80000000
c0015910:	e8 b3 95 00 00       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015915:	83 c4 20             	add    esp,0x20
c0015918:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c001591f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015923:	0f 86 b7 fe ff ff    	jbe    c00157e0 <Computer::detectFeatures()+0x40>
c0015929:	83 ec 0c             	sub    esp,0xc
c001592c:	50                   	push   eax
c001592d:	55                   	push   ebp
c001592e:	57                   	push   edi
c001592f:	56                   	push   esi
c0015930:	68 01 00 00 80       	push   0x80000001
c0015935:	e8 8e 95 00 00       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001593a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015940:	83 c4 20             	add    esp,0x20
c0015943:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015948:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001594e:	e9 8d fe ff ff       	jmp    c00157e0 <Computer::detectFeatures()+0x40>
c0015953:	e8 b8 89 01 00       	call   c002e310 <sseDetect>
c0015958:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c001595e:	c1 e0 07             	shl    eax,0x7
c0015961:	83 e2 7f             	and    edx,0x7f
c0015964:	09 c2                	or     edx,eax
c0015966:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c001596c:	80 e2 80             	and    dl,0x80
c001596f:	0f 84 b4 fe ff ff    	je     c0015829 <Computer::detectFeatures()+0x89>
c0015975:	e8 26 86 01 00       	call   c002dfa0 <avxDetect>
c001597a:	83 e0 01             	and    eax,0x1
c001597d:	c1 e0 05             	shl    eax,0x5
c0015980:	89 c2                	mov    edx,eax
c0015982:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015988:	83 e0 df             	and    eax,0xffffffdf
c001598b:	09 d0                	or     eax,edx
c001598d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015993:	83 c4 1c             	add    esp,0x1c
c0015996:	5b                   	pop    ebx
c0015997:	5e                   	pop    esi
c0015998:	5f                   	pop    edi
c0015999:	5d                   	pop    ebp
c001599a:	c3                   	ret    
c001599b:	83 ec 0c             	sub    esp,0xc
c001599e:	68 00 02 00 00       	push   0x200
c00159a3:	e8 a4 95 00 00       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c00159a8:	83 c4 10             	add    esp,0x10
c00159ab:	89 c2                	mov    edx,eax
c00159ad:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159b3:	83 e2 01             	and    edx,0x1
c00159b6:	83 e0 fe             	and    eax,0xfffffffe
c00159b9:	09 d0                	or     eax,edx
c00159bb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159c1:	e9 15 ff ff ff       	jmp    c00158db <Computer::detectFeatures()+0x13b>

c00159c6 <Computer::displayFeatures()>:
c00159c6:	c3                   	ret    
c00159c7:	90                   	nop

c00159c8 <Computer::rdmsr(unsigned int)>:
c00159c8:	83 ec 0c             	sub    esp,0xc
c00159cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159cf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00159d6:	74 0a                	je     c00159e2 <Computer::rdmsr(unsigned int)+0x1a>
c00159d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00159dc:	0f 32                	rdmsr  
c00159de:	83 c4 0c             	add    esp,0xc
c00159e1:	c3                   	ret    
c00159e2:	83 ec 0c             	sub    esp,0xc
c00159e5:	68 25 10 03 c0       	push   0xc0031025
c00159ea:	e8 87 a8 00 00       	call   c0020276 <KePanic(char const*)>
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	eb e4                	jmp    c00159d8 <Computer::rdmsr(unsigned int)+0x10>

c00159f4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00159f4:	57                   	push   edi
c00159f5:	56                   	push   esi
c00159f6:	83 ec 04             	sub    esp,0x4
c00159f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015a01:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015a05:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015a0c:	74 10                	je     c0015a1e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015a0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015a12:	89 f0                	mov    eax,esi
c0015a14:	89 fa                	mov    edx,edi
c0015a16:	0f 30                	wrmsr  
c0015a18:	83 c4 04             	add    esp,0x4
c0015a1b:	5e                   	pop    esi
c0015a1c:	5f                   	pop    edi
c0015a1d:	c3                   	ret    
c0015a1e:	83 ec 0c             	sub    esp,0xc
c0015a21:	68 2b 10 03 c0       	push   0xc003102b
c0015a26:	e8 4b a8 00 00       	call   c0020276 <KePanic(char const*)>
c0015a2b:	83 c4 10             	add    esp,0x10
c0015a2e:	eb de                	jmp    c0015a0e <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015a30 <Computer::shutdown()>:
c0015a30:	83 ec 0c             	sub    esp,0xc
c0015a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a37:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a39:	6a 00                	push   0x0
c0015a3b:	6a 00                	push   0x0
c0015a3d:	6a 00                	push   0x0
c0015a3f:	50                   	push   eax
c0015a40:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a43:	83 c4 1c             	add    esp,0x1c
c0015a46:	c3                   	ret    
c0015a47:	90                   	nop

c0015a48 <Computer::restart()>:
c0015a48:	83 ec 0c             	sub    esp,0xc
c0015a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a51:	6a 00                	push   0x0
c0015a53:	6a 00                	push   0x0
c0015a55:	6a 01                	push   0x1
c0015a57:	50                   	push   eax
c0015a58:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a5b:	83 c4 1c             	add    esp,0x1c
c0015a5e:	c3                   	ret    
c0015a5f:	90                   	nop

c0015a60 <Computer::sleep()>:
c0015a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015a6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a6e:	e9 f1 8e 00 00       	jmp    c001e964 <ACPI::sleep()>
c0015a73:	90                   	nop

c0015a74 <Computer::nmiEnabled()>:
c0015a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a78:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015a7e:	c3                   	ret    
c0015a7f:	90                   	nop

c0015a80 <Computer::readCMOS(unsigned char)>:
c0015a80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015a84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a88:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0015a8f:	75 09                	jne    c0015a9a <Computer::readCMOS(unsigned char)+0x1a>
c0015a91:	b2 80                	mov    dl,0x80
c0015a93:	09 d0                	or     eax,edx
c0015a95:	e6 70                	out    0x70,al
c0015a97:	e4 71                	in     al,0x71
c0015a99:	c3                   	ret    
c0015a9a:	31 d2                	xor    edx,edx
c0015a9c:	eb f5                	jmp    c0015a93 <Computer::readCMOS(unsigned char)+0x13>

c0015a9e <Computer::enableNMI(bool)>:
c0015a9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015aa6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015aac:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015ab4:	eb ca                	jmp    c0015a80 <Computer::readCMOS(unsigned char)>

c0015ab6 <Computer::open(int, int, void*)>:
c0015ab6:	56                   	push   esi
c0015ab7:	53                   	push   ebx
c0015ab8:	83 ec 10             	sub    esp,0x10
c0015abb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015abf:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015ac6:	68 31 10 03 c0       	push   0xc0031031
c0015acb:	0f 94 05 00 3c 03 c0 	sete   BYTE PTR ds:0xc0033c00
c0015ad2:	e8 3c a0 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c0015ad7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015ade:	e8 db 08 00 00       	call   c00163be <malloc>
c0015ae3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ae6:	89 c6                	mov    esi,eax
c0015ae8:	e8 eb 89 00 00       	call   c001e4d8 <ACPI::ACPI()>
c0015aed:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015af3:	58                   	pop    eax
c0015af4:	5a                   	pop    edx
c0015af5:	56                   	push   esi
c0015af6:	53                   	push   ebx
c0015af7:	e8 e2 57 00 00       	call   c001b2de <Device::addChild(Device*)>
c0015afc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015aff:	e8 9c fc ff ff       	call   c00157a0 <Computer::detectFeatures()>
c0015b04:	59                   	pop    ecx
c0015b05:	5e                   	pop    esi
c0015b06:	6a 01                	push   0x1
c0015b08:	53                   	push   ebx
c0015b09:	e8 90 ff ff ff       	call   c0015a9e <Computer::enableNMI(bool)>
c0015b0e:	c7 04 24 49 10 03 c0 	mov    DWORD PTR [esp],0xc0031049
c0015b15:	e8 f9 9f 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c0015b1a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015b21:	e8 98 08 00 00       	call   c00163be <malloc>
c0015b26:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b29:	89 c6                	mov    esi,eax
c0015b2b:	e8 d4 94 00 00       	call   c001f004 <CPU::CPU()>
c0015b30:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015b36:	58                   	pop    eax
c0015b37:	5a                   	pop    edx
c0015b38:	56                   	push   esi
c0015b39:	53                   	push   ebx
c0015b3a:	e8 9f 57 00 00       	call   c001b2de <Device::addChild(Device*)>
c0015b3f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015b49:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b4b:	51                   	push   ecx
c0015b4c:	6a 00                	push   0x0
c0015b4e:	6a 00                	push   0x0
c0015b50:	50                   	push   eax
c0015b51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015b54:	83 c4 14             	add    esp,0x14
c0015b57:	68 f8 10 03 c0       	push   0xc00310f8
c0015b5c:	e8 b2 9f 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c0015b61:	e8 72 13 01 00       	call   c0026ed8 <HalInitialiseCoprocessor()>
c0015b66:	c7 04 24 63 10 03 c0 	mov    DWORD PTR [esp],0xc0031063
c0015b6d:	e8 a1 9f 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c0015b72:	c7 04 24 ac 55 01 c0 	mov    DWORD PTR [esp],0xc00155ac
c0015b79:	e8 ea f5 00 00       	call   c0025168 <setupMultitasking(void (*)())>
c0015b7e:	83 c4 14             	add    esp,0x14
c0015b81:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b86:	5b                   	pop    ebx
c0015b87:	5e                   	pop    esi
c0015b88:	c3                   	ret    
c0015b89:	90                   	nop

c0015b8a <Computer::disableNMI()>:
c0015b8a:	6a 00                	push   0x0
c0015b8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b90:	50                   	push   eax
c0015b91:	e8 08 ff ff ff       	call   c0015a9e <Computer::enableNMI(bool)>
c0015b96:	5a                   	pop    edx
c0015b97:	59                   	pop    ecx
c0015b98:	c3                   	ret    
c0015b99:	90                   	nop

c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015b9a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015b9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ba2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ba6:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015bad:	75 0b                	jne    c0015bba <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015baf:	b1 80                	mov    cl,0x80
c0015bb1:	09 c8                	or     eax,ecx
c0015bb3:	e6 70                	out    0x70,al
c0015bb5:	88 d0                	mov    al,dl
c0015bb7:	e6 71                	out    0x71,al
c0015bb9:	c3                   	ret    
c0015bba:	31 c9                	xor    ecx,ecx
c0015bbc:	eb f3                	jmp    c0015bb1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015bbe <Computer::handleNMI()>:
c0015bbe:	56                   	push   esi
c0015bbf:	53                   	push   ebx
c0015bc0:	83 ec 10             	sub    esp,0x10
c0015bc3:	e4 92                	in     al,0x92
c0015bc5:	89 c6                	mov    esi,eax
c0015bc7:	e4 61                	in     al,0x61
c0015bc9:	68 7e 10 03 c0       	push   0xc003107e
c0015bce:	88 c3                	mov    bl,al
c0015bd0:	e8 88 36 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0015bd5:	83 c4 10             	add    esp,0x10
c0015bd8:	83 e6 10             	and    esi,0x10
c0015bdb:	75 10                	jne    c0015bed <Computer::handleNMI()+0x2f>
c0015bdd:	f6 c3 40             	test   bl,0x40
c0015be0:	75 20                	jne    c0015c02 <Computer::handleNMI()+0x44>
c0015be2:	80 e3 80             	and    bl,0x80
c0015be5:	75 30                	jne    c0015c17 <Computer::handleNMI()+0x59>
c0015be7:	83 c4 04             	add    esp,0x4
c0015bea:	5b                   	pop    ebx
c0015beb:	5e                   	pop    esi
c0015bec:	c3                   	ret    
c0015bed:	83 ec 0c             	sub    esp,0xc
c0015bf0:	68 8f 10 03 c0       	push   0xc003108f
c0015bf5:	e8 7c a6 00 00       	call   c0020276 <KePanic(char const*)>
c0015bfa:	83 c4 10             	add    esp,0x10
c0015bfd:	f6 c3 40             	test   bl,0x40
c0015c00:	74 e0                	je     c0015be2 <Computer::handleNMI()+0x24>
c0015c02:	83 ec 0c             	sub    esp,0xc
c0015c05:	68 9c 10 03 c0       	push   0xc003109c
c0015c0a:	e8 67 a6 00 00       	call   c0020276 <KePanic(char const*)>
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	80 e3 80             	and    bl,0x80
c0015c15:	74 d0                	je     c0015be7 <Computer::handleNMI()+0x29>
c0015c17:	c7 44 24 10 a6 10 03 c0 	mov    DWORD PTR [esp+0x10],0xc00310a6
c0015c1f:	83 c4 04             	add    esp,0x4
c0015c22:	5b                   	pop    ebx
c0015c23:	5e                   	pop    esi
c0015c24:	e9 4d a6 00 00       	jmp    c0020276 <KePanic(char const*)>
c0015c29:	90                   	nop

c0015c2a <GDTEntry::setBase(unsigned int)>:
c0015c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c32:	89 c1                	mov    ecx,eax
c0015c34:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015c38:	c1 e9 10             	shr    ecx,0x10
c0015c3b:	c1 e8 18             	shr    eax,0x18
c0015c3e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015c41:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015c44:	c3                   	ret    
c0015c45:	90                   	nop

c0015c46 <GDTEntry::setLimit(unsigned int)>:
c0015c46:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c4e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015c51:	66 89 01             	mov    WORD PTR [ecx],ax
c0015c54:	83 e2 f0             	and    edx,0xfffffff0
c0015c57:	c1 e8 10             	shr    eax,0x10
c0015c5a:	83 e0 0f             	and    eax,0xf
c0015c5d:	09 d0                	or     eax,edx
c0015c5f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015c62:	c3                   	ret    
c0015c63:	90                   	nop

c0015c64 <GDT::GDT()>:
c0015c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c78:	90                   	nop
c0015c79:	c3                   	ret    

c0015c7a <GDT::addEntry(GDTEntry)>:
c0015c7a:	53                   	push   ebx
c0015c7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c83:	8b 02                	mov    eax,DWORD PTR [edx]
c0015c85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c89:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015c8d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015c91:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c94:	c1 e0 03             	shl    eax,0x3
c0015c97:	89 0a                	mov    DWORD PTR [edx],ecx
c0015c99:	5b                   	pop    ebx
c0015c9a:	c3                   	ret    
c0015c9b:	90                   	nop

c0015c9c <GDT::getNumberOfEntries()>:
c0015c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca2:	c3                   	ret    
c0015ca3:	90                   	nop

c0015ca4 <GDT::flush()>:
c0015ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ca8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015caa:	83 c0 04             	add    eax,0x4
c0015cad:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015cb4:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015cb9:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015cc0:	e9 95 a6 fe ff       	jmp    c000035a <loadGDT>
c0015cc5:	90                   	nop

c0015cc6 <GDT::setup()>:
c0015cc6:	57                   	push   edi
c0015cc7:	56                   	push   esi
c0015cc8:	53                   	push   ebx
c0015cc9:	83 ec 30             	sub    esp,0x30
c0015ccc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015cd0:	6a 00                	push   0x0
c0015cd2:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015cd6:	56                   	push   esi
c0015cd7:	e8 4e ff ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0015cdc:	6a 00                	push   0x0
c0015cde:	56                   	push   esi
c0015cdf:	e8 62 ff ff ff       	call   c0015c46 <GDTEntry::setLimit(unsigned int)>
c0015ce4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015cec:	6a 00                	push   0x0
c0015cee:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015cf2:	56                   	push   esi
c0015cf3:	e8 32 ff ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0015cf8:	68 ff ff ff 00       	push   0xffffff
c0015cfd:	56                   	push   esi
c0015cfe:	e8 43 ff ff ff       	call   c0015c46 <GDTEntry::setLimit(unsigned int)>
c0015d03:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015d07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d0b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015d0f:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015d13:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015d18:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015d1d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015d21:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015d25:	89 f8                	mov    eax,edi
c0015d27:	89 fa                	mov    edx,edi
c0015d29:	80 e4 f7             	and    ah,0xf7
c0015d2c:	80 ce 60             	or     dh,0x60
c0015d2f:	89 c7                	mov    edi,eax
c0015d31:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015d35:	80 cc 60             	or     ah,0x60
c0015d38:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d3c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015d40:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015d44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d48:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015d4c:	83 c4 20             	add    esp,0x20
c0015d4f:	6a 00                	push   0x0
c0015d51:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d55:	50                   	push   eax
c0015d56:	e8 cf fe ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0015d5b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015d5f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015d63:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015d67:	83 e0 3f             	and    eax,0x3f
c0015d6a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d6e:	6a 00                	push   0x0
c0015d70:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015d74:	50                   	push   eax
c0015d75:	e8 b0 fe ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0015d7a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015d7e:	83 e0 3f             	and    eax,0x3f
c0015d81:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015d85:	83 c4 0c             	add    esp,0xc
c0015d88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d90:	53                   	push   ebx
c0015d91:	e8 e4 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015d96:	83 c4 0c             	add    esp,0xc
c0015d99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015da1:	53                   	push   ebx
c0015da2:	e8 d3 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015da7:	83 c4 0c             	add    esp,0xc
c0015daa:	57                   	push   edi
c0015dab:	56                   	push   esi
c0015dac:	53                   	push   ebx
c0015dad:	e8 c8 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015db2:	83 c4 0c             	add    esp,0xc
c0015db5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015db9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015dbd:	53                   	push   ebx
c0015dbe:	e8 b7 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015dc3:	83 c4 0c             	add    esp,0xc
c0015dc6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dce:	53                   	push   ebx
c0015dcf:	e8 a6 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015dd4:	83 c4 0c             	add    esp,0xc
c0015dd7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ddb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ddf:	53                   	push   ebx
c0015de0:	e8 95 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015de5:	83 c4 0c             	add    esp,0xc
c0015de8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015dec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015df0:	53                   	push   ebx
c0015df1:	e8 84 fe ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c0015df6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015df9:	e8 a6 fe ff ff       	call   c0015ca4 <GDT::flush()>
c0015dfe:	83 c4 40             	add    esp,0x40
c0015e01:	5b                   	pop    ebx
c0015e02:	5e                   	pop    esi
c0015e03:	5f                   	pop    edi
c0015e04:	c3                   	ret    

c0015e05 <idleFunction(void*)>:
c0015e05:	83 ec 0c             	sub    esp,0xc
c0015e08:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015e0d:	48                   	dec    eax
c0015e0e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015e13:	75 01                	jne    c0015e16 <idleFunction(void*)+0x11>
c0015e15:	fb                   	sti    
c0015e16:	e8 89 0d 01 00       	call   c0026ba4 <HalSystemIdle()>
c0015e1b:	e8 f2 8a 01 00       	call   c002e912 <idleCommon()>
c0015e20:	eb f4                	jmp    c0015e16 <idleFunction(void*)+0x11>
c0015e22:	66 90                	xchg   ax,ax

c0015e24 <IDTEntry::IDTEntry(bool)>:
c0015e24:	53                   	push   ebx
c0015e25:	83 ec 04             	sub    esp,0x4
c0015e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e2c:	88 04 24             	mov    BYTE PTR [esp],al
c0015e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e33:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015e39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e3d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015e41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e45:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e48:	83 e2 f0             	and    edx,0xfffffff0
c0015e4b:	83 ca 0e             	or     edx,0xe
c0015e4e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e55:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e58:	83 e2 ef             	and    edx,0xffffffef
c0015e5b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e5e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015e62:	85 c0                	test   eax,eax
c0015e64:	74 06                	je     c0015e6c <IDTEntry::IDTEntry(bool)+0x48>
c0015e66:	b2 03                	mov    dl,0x3
c0015e68:	eb 06                	jmp    c0015e70 <IDTEntry::IDTEntry(bool)+0x4c>
c0015e6a:	66 90                	xchg   ax,ax
c0015e6c:	b2 00                	mov    dl,0x0
c0015e6e:	66 90                	xchg   ax,ax
c0015e70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e74:	83 e2 03             	and    edx,0x3
c0015e77:	89 d3                	mov    ebx,edx
c0015e79:	c1 e3 05             	shl    ebx,0x5
c0015e7c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e7f:	83 e2 9f             	and    edx,0xffffff9f
c0015e82:	88 d1                	mov    cl,dl
c0015e84:	88 da                	mov    dl,bl
c0015e86:	09 ca                	or     edx,ecx
c0015e88:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e8f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e92:	83 ca 80             	or     edx,0xffffff80
c0015e95:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e98:	90                   	nop
c0015e99:	83 c4 04             	add    esp,0x4
c0015e9c:	5b                   	pop    ebx
c0015e9d:	c3                   	ret    

c0015e9e <IDTEntry::setOffset(unsigned int)>:
c0015e9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ea2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ea6:	66 89 02             	mov    WORD PTR [edx],ax
c0015ea9:	c1 e8 10             	shr    eax,0x10
c0015eac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015eb0:	c3                   	ret    
c0015eb1:	90                   	nop
c0015eb2:	66 90                	xchg   ax,ax

c0015eb4 <IDT::IDT()>:
c0015eb4:	90                   	nop
c0015eb5:	c3                   	ret    

c0015eb6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eba:	83 c0 30             	add    eax,0x30
c0015ebd:	c3                   	ret    

c0015ebe <IDT::addEntry(IDTEntry, int)>:
c0015ebe:	53                   	push   ebx
c0015ebf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ec3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ecb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ecf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015ed2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015ed6:	5b                   	pop    ebx
c0015ed7:	c3                   	ret    

c0015ed8 <IDT::addEntry(int, void (*)(), bool)>:
c0015ed8:	53                   	push   ebx
c0015ed9:	83 ec 10             	sub    esp,0x10
c0015edc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015ee1:	50                   	push   eax
c0015ee2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015ee6:	53                   	push   ebx
c0015ee7:	e8 38 ff ff ff       	call   c0015e24 <IDTEntry::IDTEntry(bool)>
c0015eec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ef0:	53                   	push   ebx
c0015ef1:	e8 a8 ff ff ff       	call   c0015e9e <IDTEntry::setOffset(unsigned int)>
c0015ef6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015efa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015efe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015f06:	e8 b3 ff ff ff       	call   c0015ebe <IDT::addEntry(IDTEntry, int)>
c0015f0b:	83 c4 30             	add    esp,0x30
c0015f0e:	5b                   	pop    ebx
c0015f0f:	c3                   	ret    

c0015f10 <IDT::flush()>:
c0015f10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f14:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015f1d:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015f22:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0015f29:	c3                   	ret    

c0015f2a <IDT::setup()>:
c0015f2a:	57                   	push   edi
c0015f2b:	56                   	push   esi
c0015f2c:	53                   	push   ebx
c0015f2d:	83 ec 10             	sub    esp,0x10
c0015f30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015f34:	6a 00                	push   0x0
c0015f36:	68 10 e0 02 c0       	push   0xc002e010
c0015f3b:	6a 00                	push   0x0
c0015f3d:	53                   	push   ebx
c0015f3e:	e8 95 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f43:	6a 00                	push   0x0
c0015f45:	68 20 e0 02 c0       	push   0xc002e020
c0015f4a:	6a 01                	push   0x1
c0015f4c:	53                   	push   ebx
c0015f4d:	e8 86 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f52:	83 c4 20             	add    esp,0x20
c0015f55:	6a 00                	push   0x0
c0015f57:	68 2a e0 02 c0       	push   0xc002e02a
c0015f5c:	6a 02                	push   0x2
c0015f5e:	53                   	push   ebx
c0015f5f:	e8 74 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f64:	6a 00                	push   0x0
c0015f66:	68 34 e0 02 c0       	push   0xc002e034
c0015f6b:	6a 03                	push   0x3
c0015f6d:	53                   	push   ebx
c0015f6e:	e8 65 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f73:	83 c4 20             	add    esp,0x20
c0015f76:	6a 00                	push   0x0
c0015f78:	68 3e e0 02 c0       	push   0xc002e03e
c0015f7d:	6a 04                	push   0x4
c0015f7f:	53                   	push   ebx
c0015f80:	e8 53 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f85:	6a 00                	push   0x0
c0015f87:	68 48 e0 02 c0       	push   0xc002e048
c0015f8c:	6a 05                	push   0x5
c0015f8e:	53                   	push   ebx
c0015f8f:	e8 44 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015f94:	83 c4 20             	add    esp,0x20
c0015f97:	6a 00                	push   0x0
c0015f99:	68 52 e0 02 c0       	push   0xc002e052
c0015f9e:	6a 06                	push   0x6
c0015fa0:	53                   	push   ebx
c0015fa1:	e8 32 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fa6:	6a 00                	push   0x0
c0015fa8:	68 5c e0 02 c0       	push   0xc002e05c
c0015fad:	6a 07                	push   0x7
c0015faf:	53                   	push   ebx
c0015fb0:	e8 23 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fb5:	83 c4 20             	add    esp,0x20
c0015fb8:	6a 00                	push   0x0
c0015fba:	68 66 e0 02 c0       	push   0xc002e066
c0015fbf:	6a 08                	push   0x8
c0015fc1:	53                   	push   ebx
c0015fc2:	e8 11 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fc7:	6a 00                	push   0x0
c0015fc9:	68 6e e0 02 c0       	push   0xc002e06e
c0015fce:	6a 09                	push   0x9
c0015fd0:	53                   	push   ebx
c0015fd1:	e8 02 ff ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fd6:	83 c4 20             	add    esp,0x20
c0015fd9:	6a 00                	push   0x0
c0015fdb:	68 78 e0 02 c0       	push   0xc002e078
c0015fe0:	6a 0a                	push   0xa
c0015fe2:	53                   	push   ebx
c0015fe3:	e8 f0 fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015fe8:	6a 00                	push   0x0
c0015fea:	68 80 e0 02 c0       	push   0xc002e080
c0015fef:	6a 0b                	push   0xb
c0015ff1:	53                   	push   ebx
c0015ff2:	e8 e1 fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0015ff7:	83 c4 20             	add    esp,0x20
c0015ffa:	6a 00                	push   0x0
c0015ffc:	68 88 e0 02 c0       	push   0xc002e088
c0016001:	6a 0c                	push   0xc
c0016003:	53                   	push   ebx
c0016004:	e8 cf fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016009:	6a 00                	push   0x0
c001600b:	68 90 e0 02 c0       	push   0xc002e090
c0016010:	6a 0d                	push   0xd
c0016012:	53                   	push   ebx
c0016013:	e8 c0 fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016018:	83 c4 20             	add    esp,0x20
c001601b:	6a 00                	push   0x0
c001601d:	68 aa e0 02 c0       	push   0xc002e0aa
c0016022:	6a 0e                	push   0xe
c0016024:	53                   	push   ebx
c0016025:	e8 ae fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001602a:	6a 00                	push   0x0
c001602c:	68 b2 e0 02 c0       	push   0xc002e0b2
c0016031:	6a 0f                	push   0xf
c0016033:	53                   	push   ebx
c0016034:	e8 9f fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016039:	83 c4 20             	add    esp,0x20
c001603c:	6a 00                	push   0x0
c001603e:	68 bc e0 02 c0       	push   0xc002e0bc
c0016043:	6a 10                	push   0x10
c0016045:	53                   	push   ebx
c0016046:	e8 8d fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001604b:	6a 00                	push   0x0
c001604d:	68 c6 e0 02 c0       	push   0xc002e0c6
c0016052:	6a 11                	push   0x11
c0016054:	53                   	push   ebx
c0016055:	e8 7e fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001605a:	83 c4 20             	add    esp,0x20
c001605d:	6a 00                	push   0x0
c001605f:	68 d0 e0 02 c0       	push   0xc002e0d0
c0016064:	6a 12                	push   0x12
c0016066:	53                   	push   ebx
c0016067:	e8 6c fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001606c:	6a 01                	push   0x1
c001606e:	68 6a e1 02 c0       	push   0xc002e16a
c0016073:	6a 60                	push   0x60
c0016075:	53                   	push   ebx
c0016076:	e8 5d fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001607b:	83 c4 20             	add    esp,0x20
c001607e:	6a 00                	push   0x0
c0016080:	68 71 e1 02 c0       	push   0xc002e171
c0016085:	6a 20                	push   0x20
c0016087:	53                   	push   ebx
c0016088:	e8 4b fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001608d:	6a 00                	push   0x0
c001608f:	68 5c e1 02 c0       	push   0xc002e15c
c0016094:	6a 21                	push   0x21
c0016096:	53                   	push   ebx
c0016097:	e8 3c fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c001609c:	83 c4 20             	add    esp,0x20
c001609f:	6a 00                	push   0x0
c00160a1:	68 63 e1 02 c0       	push   0xc002e163
c00160a6:	6a 22                	push   0x22
c00160a8:	53                   	push   ebx
c00160a9:	e8 2a fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160ae:	6a 00                	push   0x0
c00160b0:	68 da e0 02 c0       	push   0xc002e0da
c00160b5:	6a 23                	push   0x23
c00160b7:	53                   	push   ebx
c00160b8:	e8 1b fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160bd:	83 c4 20             	add    esp,0x20
c00160c0:	6a 00                	push   0x0
c00160c2:	68 e4 e0 02 c0       	push   0xc002e0e4
c00160c7:	6a 24                	push   0x24
c00160c9:	53                   	push   ebx
c00160ca:	e8 09 fe ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160cf:	6a 00                	push   0x0
c00160d1:	68 ee e0 02 c0       	push   0xc002e0ee
c00160d6:	6a 25                	push   0x25
c00160d8:	53                   	push   ebx
c00160d9:	e8 fa fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160de:	83 c4 20             	add    esp,0x20
c00160e1:	6a 00                	push   0x0
c00160e3:	68 f8 e0 02 c0       	push   0xc002e0f8
c00160e8:	6a 26                	push   0x26
c00160ea:	53                   	push   ebx
c00160eb:	e8 e8 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160f0:	6a 00                	push   0x0
c00160f2:	68 02 e1 02 c0       	push   0xc002e102
c00160f7:	6a 27                	push   0x27
c00160f9:	53                   	push   ebx
c00160fa:	e8 d9 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00160ff:	83 c4 20             	add    esp,0x20
c0016102:	6a 00                	push   0x0
c0016104:	68 0c e1 02 c0       	push   0xc002e10c
c0016109:	6a 28                	push   0x28
c001610b:	53                   	push   ebx
c001610c:	e8 c7 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016111:	6a 00                	push   0x0
c0016113:	68 16 e1 02 c0       	push   0xc002e116
c0016118:	6a 29                	push   0x29
c001611a:	53                   	push   ebx
c001611b:	e8 b8 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016120:	83 c4 20             	add    esp,0x20
c0016123:	6a 00                	push   0x0
c0016125:	68 20 e1 02 c0       	push   0xc002e120
c001612a:	6a 2a                	push   0x2a
c001612c:	53                   	push   ebx
c001612d:	e8 a6 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016132:	6a 00                	push   0x0
c0016134:	68 2a e1 02 c0       	push   0xc002e12a
c0016139:	6a 2b                	push   0x2b
c001613b:	53                   	push   ebx
c001613c:	e8 97 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016141:	83 c4 20             	add    esp,0x20
c0016144:	6a 00                	push   0x0
c0016146:	68 34 e1 02 c0       	push   0xc002e134
c001614b:	6a 2c                	push   0x2c
c001614d:	53                   	push   ebx
c001614e:	e8 85 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016153:	6a 00                	push   0x0
c0016155:	68 3e e1 02 c0       	push   0xc002e13e
c001615a:	6a 2d                	push   0x2d
c001615c:	53                   	push   ebx
c001615d:	e8 76 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016162:	83 c4 20             	add    esp,0x20
c0016165:	6a 00                	push   0x0
c0016167:	68 48 e1 02 c0       	push   0xc002e148
c001616c:	6a 2e                	push   0x2e
c001616e:	53                   	push   ebx
c001616f:	e8 64 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016174:	6a 00                	push   0x0
c0016176:	68 52 e1 02 c0       	push   0xc002e152
c001617b:	6a 2f                	push   0x2f
c001617d:	53                   	push   ebx
c001617e:	e8 55 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016183:	83 c4 20             	add    esp,0x20
c0016186:	6a 00                	push   0x0
c0016188:	68 ac e2 02 c0       	push   0xc002e2ac
c001618d:	6a 30                	push   0x30
c001618f:	53                   	push   ebx
c0016190:	e8 43 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016195:	6a 00                	push   0x0
c0016197:	68 b6 e2 02 c0       	push   0xc002e2b6
c001619c:	6a 31                	push   0x31
c001619e:	53                   	push   ebx
c001619f:	e8 34 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161a4:	83 c4 20             	add    esp,0x20
c00161a7:	6a 00                	push   0x0
c00161a9:	68 c0 e2 02 c0       	push   0xc002e2c0
c00161ae:	6a 32                	push   0x32
c00161b0:	53                   	push   ebx
c00161b1:	e8 22 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161b6:	6a 00                	push   0x0
c00161b8:	68 ca e2 02 c0       	push   0xc002e2ca
c00161bd:	6a 33                	push   0x33
c00161bf:	53                   	push   ebx
c00161c0:	e8 13 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161c5:	83 c4 20             	add    esp,0x20
c00161c8:	6a 00                	push   0x0
c00161ca:	68 d4 e2 02 c0       	push   0xc002e2d4
c00161cf:	6a 34                	push   0x34
c00161d1:	53                   	push   ebx
c00161d2:	e8 01 fd ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161d7:	6a 00                	push   0x0
c00161d9:	68 de e2 02 c0       	push   0xc002e2de
c00161de:	6a 35                	push   0x35
c00161e0:	53                   	push   ebx
c00161e1:	e8 f2 fc ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161e6:	83 c4 20             	add    esp,0x20
c00161e9:	6a 00                	push   0x0
c00161eb:	68 e8 e2 02 c0       	push   0xc002e2e8
c00161f0:	6a 36                	push   0x36
c00161f2:	53                   	push   ebx
c00161f3:	e8 e0 fc ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c00161f8:	6a 00                	push   0x0
c00161fa:	68 f2 e2 02 c0       	push   0xc002e2f2
c00161ff:	6a 37                	push   0x37
c0016201:	53                   	push   ebx
c0016202:	e8 d1 fc ff ff       	call   c0015ed8 <IDT::addEntry(int, void (*)(), bool)>
c0016207:	83 c4 1c             	add    esp,0x1c
c001620a:	6a 03                	push   0x3
c001620c:	6a 02                	push   0x2
c001620e:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016214:	e8 23 25 00 00       	call   c001873c <VAS::allocatePages(int, int)>
c0016219:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016220:	89 c6                	mov    esi,eax
c0016222:	e8 97 01 00 00       	call   c00163be <malloc>
c0016227:	81 c6 00 20 00 00    	add    esi,0x2000
c001622d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016230:	89 c7                	mov    edi,eax
c0016232:	e8 25 16 00 00       	call   c001785c <TSS::TSS()>
c0016237:	83 c4 0c             	add    esp,0xc
c001623a:	68 66 e0 02 c0       	push   0xc002e066
c001623f:	56                   	push   esi
c0016240:	57                   	push   edi
c0016241:	e8 5a 16 00 00       	call   c00178a0 <TSS::setup(unsigned long, unsigned long)>
c0016246:	89 c6                	mov    esi,eax
c0016248:	58                   	pop    eax
c0016249:	5a                   	pop    edx
c001624a:	6a 00                	push   0x0
c001624c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016250:	50                   	push   eax
c0016251:	e8 ce fb ff ff       	call   c0015e24 <IDTEntry::IDTEntry(bool)>
c0016256:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001625a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001625f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0016266:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c001626c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016270:	80 ce 05             	or     dh,0x5
c0016273:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0016276:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001627a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001627e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016281:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016284:	e8 87 fc ff ff       	call   c0015f10 <IDT::flush()>
c0016289:	83 c4 20             	add    esp,0x20
c001628c:	5b                   	pop    ebx
c001628d:	5e                   	pop    esi
c001628e:	5f                   	pop    edi
c001628f:	c3                   	ret    

c0016290 <sbrk>:
c0016290:	55                   	push   ebp
c0016291:	57                   	push   edi
c0016292:	56                   	push   esi
c0016293:	53                   	push   ebx
c0016294:	83 ec 1c             	sub    esp,0x1c
c0016297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001629b:	85 c0                	test   eax,eax
c001629d:	74 61                	je     c0016300 <sbrk+0x70>
c001629f:	78 66                	js     c0016307 <sbrk+0x77>
c00162a1:	8b 15 e4 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033be4
c00162a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00162ab:	05 ff 0f 00 00       	add    eax,0xfff
c00162b0:	89 c5                	mov    ebp,eax
c00162b2:	78 6b                	js     c001631f <sbrk+0x8f>
c00162b4:	c1 fd 0c             	sar    ebp,0xc
c00162b7:	bb 00 00 00 00       	mov    ebx,0x0
c00162bc:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c00162c2:	8b 3d e4 3b 03 c0    	mov    edi,DWORD PTR ds:0xc0033be4
c00162c8:	e8 0a 04 00 00       	call   c00166d7 <Phys::allocatePage()>
c00162cd:	68 01 04 00 00       	push   0x401
c00162d2:	57                   	push   edi
c00162d3:	50                   	push   eax
c00162d4:	56                   	push   esi
c00162d5:	e8 5e 23 00 00       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c00162da:	81 05 e4 3b 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033be4,0x1000
c00162e4:	83 c3 01             	add    ebx,0x1
c00162e7:	83 c4 10             	add    esp,0x10
c00162ea:	39 dd                	cmp    ebp,ebx
c00162ec:	75 ce                	jne    c00162bc <sbrk+0x2c>
c00162ee:	0f 20 d8             	mov    eax,cr3
c00162f1:	0f 22 d8             	mov    cr3,eax
c00162f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00162f8:	83 c4 1c             	add    esp,0x1c
c00162fb:	5b                   	pop    ebx
c00162fc:	5e                   	pop    esi
c00162fd:	5f                   	pop    edi
c00162fe:	5d                   	pop    ebp
c00162ff:	c3                   	ret    
c0016300:	a1 e4 3b 03 c0       	mov    eax,ds:0xc0033be4
c0016305:	eb f1                	jmp    c00162f8 <sbrk+0x68>
c0016307:	83 ec 08             	sub    esp,0x8
c001630a:	50                   	push   eax
c001630b:	68 48 11 03 c0       	push   0xc0031148
c0016310:	e8 48 2f 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0016315:	83 c4 10             	add    esp,0x10
c0016318:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001631d:	eb d9                	jmp    c00162f8 <sbrk+0x68>
c001631f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0016325:	eb 8d                	jmp    c00162b4 <sbrk+0x24>

c0016327 <mmap>:
c0016327:	83 ec 18             	sub    esp,0x18
c001632a:	68 78 11 03 c0       	push   0xc0031178
c001632f:	e8 42 9f 00 00       	call   c0020276 <KePanic(char const*)>
c0016334:	b8 00 00 00 00       	mov    eax,0x0
c0016339:	83 c4 1c             	add    esp,0x1c
c001633c:	c3                   	ret    

c001633d <munmap>:
c001633d:	83 ec 18             	sub    esp,0x18
c0016340:	68 7d 11 03 c0       	push   0xc003117d
c0016345:	e8 2c 9f 00 00       	call   c0020276 <KePanic(char const*)>
c001634a:	b8 00 00 00 00       	mov    eax,0x0
c001634f:	83 c4 1c             	add    esp,0x1c
c0016352:	c3                   	ret    

c0016353 <liballoc_lock()>:
c0016353:	fa                   	cli    
c0016354:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c001635b:	b8 00 00 00 00       	mov    eax,0x0
c0016360:	c3                   	ret    

c0016361 <liballoc_unlock()>:
c0016361:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016366:	83 e8 01             	sub    eax,0x1
c0016369:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001636e:	75 01                	jne    c0016371 <liballoc_unlock()+0x10>
c0016370:	fb                   	sti    
c0016371:	b8 00 00 00 00       	mov    eax,0x0
c0016376:	c3                   	ret    

c0016377 <liballoc_alloc(int)>:
c0016377:	83 ec 10             	sub    esp,0x10
c001637a:	6a 01                	push   0x1
c001637c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016380:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016386:	e8 b1 23 00 00       	call   c001873c <VAS::allocatePages(int, int)>
c001638b:	83 c4 1c             	add    esp,0x1c
c001638e:	c3                   	ret    

c001638f <liballoc_free(void*, int)>:
c001638f:	83 ec 14             	sub    esp,0x14
c0016392:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016396:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001639c:	e8 df 1f 00 00       	call   c0018380 <VAS::freeAllocatedPages(unsigned long)>
c00163a1:	b8 00 00 00 00       	mov    eax,0x0
c00163a6:	83 c4 1c             	add    esp,0x1c
c00163a9:	c3                   	ret    

c00163aa <realloc>:
c00163aa:	83 ec 14             	sub    esp,0x14
c00163ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b5:	e8 e4 b3 fe ff       	call   c000179e <dlrealloc>
c00163ba:	83 c4 1c             	add    esp,0x1c
c00163bd:	c3                   	ret    

c00163be <malloc>:
c00163be:	53                   	push   ebx
c00163bf:	83 ec 10             	sub    esp,0x10
c00163c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00163c6:	53                   	push   ebx
c00163c7:	68 84 11 03 c0       	push   0xc0031184
c00163cc:	e8 8c 2e 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00163d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163d4:	e8 88 ae fe ff       	call   c0001261 <dlmalloc>
c00163d9:	83 c4 18             	add    esp,0x18
c00163dc:	5b                   	pop    ebx
c00163dd:	c3                   	ret    

c00163de <free>:
c00163de:	83 ec 18             	sub    esp,0x18
c00163e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e5:	e8 1f ab fe ff       	call   c0000f09 <dlfree>
c00163ea:	83 c4 1c             	add    esp,0x1c
c00163ed:	c3                   	ret    

c00163ee <rfree>:
c00163ee:	83 ec 18             	sub    esp,0x18
c00163f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f5:	e8 0f ab fe ff       	call   c0000f09 <dlfree>
c00163fa:	83 c4 1c             	add    esp,0x1c
c00163fd:	c3                   	ret    

c00163fe <calloc>:
c00163fe:	56                   	push   esi
c00163ff:	53                   	push   ebx
c0016400:	83 ec 10             	sub    esp,0x10
c0016403:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016407:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c001640c:	53                   	push   ebx
c001640d:	e8 ac ff ff ff       	call   c00163be <malloc>
c0016412:	89 c6                	mov    esi,eax
c0016414:	83 c4 0c             	add    esp,0xc
c0016417:	53                   	push   ebx
c0016418:	6a 00                	push   0x0
c001641a:	50                   	push   eax
c001641b:	e8 d0 a0 fe ff       	call   c00004f0 <memset>
c0016420:	89 f0                	mov    eax,esi
c0016422:	83 c4 14             	add    esp,0x14
c0016425:	5b                   	pop    ebx
c0016426:	5e                   	pop    esi
c0016427:	c3                   	ret    

c0016428 <KeEntryPoint>:
c0016428:	57                   	push   edi
c0016429:	bf f9 03 00 00       	mov    edi,0x3f9
c001642e:	56                   	push   esi
c001642f:	89 fa                	mov    edx,edi
c0016431:	53                   	push   ebx
c0016432:	31 f6                	xor    esi,esi
c0016434:	83 ec 2c             	sub    esp,0x2c
c0016437:	a1 00 05 00 00       	mov    eax,ds:0x500
c001643c:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016441:	89 f0                	mov    eax,esi
c0016443:	ee                   	out    dx,al
c0016444:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016449:	b0 80                	mov    al,0x80
c001644b:	89 da                	mov    edx,ebx
c001644d:	ee                   	out    dx,al
c001644e:	b1 03                	mov    cl,0x3
c0016450:	ba f8 03 00 00       	mov    edx,0x3f8
c0016455:	88 c8                	mov    al,cl
c0016457:	ee                   	out    dx,al
c0016458:	89 f0                	mov    eax,esi
c001645a:	89 fa                	mov    edx,edi
c001645c:	ee                   	out    dx,al
c001645d:	88 c8                	mov    al,cl
c001645f:	89 da                	mov    edx,ebx
c0016461:	ee                   	out    dx,al
c0016462:	b0 c7                	mov    al,0xc7
c0016464:	ba fa 03 00 00       	mov    edx,0x3fa
c0016469:	ee                   	out    dx,al
c001646a:	b0 0b                	mov    al,0xb
c001646c:	ba fc 03 00 00       	mov    edx,0x3fc
c0016471:	ee                   	out    dx,al
c0016472:	68 91 11 03 c0       	push   0xc0031191
c0016477:	e8 e1 2d 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001647c:	e8 16 96 00 00       	call   c001fa97 <KeDisplaySplashScreen()>
c0016481:	a1 24 05 00 00       	mov    eax,ds:0x524
c0016486:	05 ff 0f 00 00       	add    eax,0xfff
c001648b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016490:	89 04 24             	mov    DWORD PTR [esp],eax
c0016493:	e8 ad 03 00 00       	call   c0016845 <Phys::physicalMemorySetup(unsigned int)>
c0016498:	e8 66 1c 00 00       	call   c0018103 <Virt::virtualMemorySetup()>
c001649d:	e8 3f 95 00 00       	call   c001f9e1 <KeInitialiseAtexit()>
c00164a2:	58                   	pop    eax
c00164a3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00164a7:	53                   	push   ebx
c00164a8:	e8 53 1f 00 00       	call   c0018400 <VAS::VAS()>
c00164ad:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c00164b3:	e8 f2 83 01 00       	call   c002e8aa <_init>
c00164b8:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00164bf:	e8 fa fe ff ff       	call   c00163be <malloc>
c00164c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00164c7:	89 c6                	mov    esi,eax
c00164c9:	e8 20 f2 ff ff       	call   c00156ee <Computer::Computer()>
c00164ce:	53                   	push   ebx
c00164cf:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00164d5:	6a 00                	push   0x0
c00164d7:	6a 00                	push   0x0
c00164d9:	56                   	push   esi
c00164da:	e8 d7 f5 ff ff       	call   c0015ab6 <Computer::open(int, int, void*)>
c00164df:	83 c4 14             	add    esp,0x14
c00164e2:	53                   	push   ebx
c00164e3:	e8 e2 1f 00 00       	call   c00184ca <VAS::~VAS()>
c00164e8:	83 c4 30             	add    esp,0x30
c00164eb:	5b                   	pop    ebx
c00164ec:	5e                   	pop    esi
c00164ed:	5f                   	pop    edi
c00164ee:	c3                   	ret    

c00164ef <Phys::allocateDMA(unsigned long)>:
c00164ef:	55                   	push   ebp
c00164f0:	31 ed                	xor    ebp,ebp
c00164f2:	57                   	push   edi
c00164f3:	56                   	push   esi
c00164f4:	53                   	push   ebx
c00164f5:	31 db                	xor    ebx,ebx
c00164f7:	83 ec 1c             	sub    esp,0x1c
c00164fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016506:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c001650c:	31 c0                	xor    eax,eax
c001650e:	c1 ef 0c             	shr    edi,0xc
c0016511:	eb 1b                	jmp    c001652e <Phys::allocateDMA(unsigned long)+0x3f>
c0016513:	85 c0                	test   eax,eax
c0016515:	75 06                	jne    c001651d <Phys::allocateDMA(unsigned long)+0x2e>
c0016517:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001651b:	89 dd                	mov    ebp,ebx
c001651d:	8d 70 01             	lea    esi,[eax+0x1]
c0016520:	39 f7                	cmp    edi,esi
c0016522:	74 37                	je     c001655b <Phys::allocateDMA(unsigned long)+0x6c>
c0016524:	89 f0                	mov    eax,esi
c0016526:	83 c3 01             	add    ebx,0x1
c0016529:	83 fb 0f             	cmp    ebx,0xf
c001652c:	7f 13                	jg     c0016541 <Phys::allocateDMA(unsigned long)+0x52>
c001652e:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c0016535:	74 dc                	je     c0016513 <Phys::allocateDMA(unsigned long)+0x24>
c0016537:	31 c0                	xor    eax,eax
c0016539:	83 c3 01             	add    ebx,0x1
c001653c:	83 fb 0f             	cmp    ebx,0xf
c001653f:	7e ed                	jle    c001652e <Phys::allocateDMA(unsigned long)+0x3f>
c0016541:	83 ec 0c             	sub    esp,0xc
c0016544:	68 a8 11 03 c0       	push   0xc00311a8
c0016549:	e8 28 9d 00 00       	call   c0020276 <KePanic(char const*)>
c001654e:	83 c4 10             	add    esp,0x10
c0016551:	31 c0                	xor    eax,eax
c0016553:	83 c4 1c             	add    esp,0x1c
c0016556:	5b                   	pop    ebx
c0016557:	5e                   	pop    esi
c0016558:	5f                   	pop    edi
c0016559:	5d                   	pop    ebp
c001655a:	c3                   	ret    
c001655b:	89 e9                	mov    ecx,ebp
c001655d:	c1 f9 04             	sar    ecx,0x4
c0016560:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016564:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0016568:	89 ca                	mov    edx,ecx
c001656a:	83 ea 01             	sub    edx,0x1
c001656d:	79 03                	jns    c0016572 <Phys::allocateDMA(unsigned long)+0x83>
c001656f:	8d 51 0e             	lea    edx,[ecx+0xe]
c0016572:	c1 fa 04             	sar    edx,0x4
c0016575:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0016579:	74 08                	je     c0016583 <Phys::allocateDMA(unsigned long)+0x94>
c001657b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001657f:	31 c0                	xor    eax,eax
c0016581:	eb b6                	jmp    c0016539 <Phys::allocateDMA(unsigned long)+0x4a>
c0016583:	85 f6                	test   esi,esi
c0016585:	74 17                	je     c001659e <Phys::allocateDMA(unsigned long)+0xaf>
c0016587:	8d 95 f0 a9 03 c0    	lea    edx,[ebp-0x3ffc5610]
c001658d:	8d 84 05 f1 a9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc560f]
c0016594:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016597:	83 c2 01             	add    edx,0x1
c001659a:	39 d0                	cmp    eax,edx
c001659c:	75 f6                	jne    c0016594 <Phys::allocateDMA(unsigned long)+0xa5>
c001659e:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00165a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165a7:	01 f8                	add    eax,edi
c00165a9:	85 d2                	test   edx,edx
c00165ab:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00165b0:	74 17                	je     c00165c9 <Phys::allocateDMA(unsigned long)+0xda>
c00165b2:	83 ec 0c             	sub    esp,0xc
c00165b5:	68 a8 11 03 c0       	push   0xc00311a8
c00165ba:	e8 b7 9c 00 00       	call   c0020276 <KePanic(char const*)>
c00165bf:	83 c4 10             	add    esp,0x10
c00165c2:	89 f0                	mov    eax,esi
c00165c4:	e9 5d ff ff ff       	jmp    c0016526 <Phys::allocateDMA(unsigned long)+0x37>
c00165c9:	c1 e5 0c             	shl    ebp,0xc
c00165cc:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00165d2:	e9 7c ff ff ff       	jmp    c0016553 <Phys::allocateDMA(unsigned long)+0x64>

c00165d7 <Phys::freeDMA(unsigned long, unsigned long)>:
c00165d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165db:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00165e1:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00165e6:	c1 ea 0c             	shr    edx,0xc
c00165e9:	29 d0                	sub    eax,edx
c00165eb:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00165f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165f4:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00165f9:	c1 e8 0c             	shr    eax,0xc
c00165fc:	85 d2                	test   edx,edx
c00165fe:	74 11                	je     c0016611 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0016600:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c0016605:	01 c2                	add    edx,eax
c0016607:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001660a:	83 c0 01             	add    eax,0x1
c001660d:	39 d0                	cmp    eax,edx
c001660f:	75 f6                	jne    c0016607 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0016611:	c3                   	ret    

c0016612 <Phys::setPageState(unsigned long, bool)>:
c0016612:	57                   	push   edi
c0016613:	56                   	push   esi
c0016614:	8b 35 e8 3b 03 c0    	mov    esi,DWORD PTR ds:0xc0033be8
c001661a:	53                   	push   ebx
c001661b:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016620:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016624:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016628:	0f b6 c0             	movzx  eax,al
c001662b:	89 ca                	mov    edx,ecx
c001662d:	83 e1 07             	and    ecx,0x7
c0016630:	c1 ea 03             	shr    edx,0x3
c0016633:	d3 c3                	rol    ebx,cl
c0016635:	01 d6                	add    esi,edx
c0016637:	d3 e0                	shl    eax,cl
c0016639:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001663c:	21 fb                	and    ebx,edi
c001663e:	88 1e                	mov    BYTE PTR [esi],bl
c0016640:	8b 1d e8 3b 03 c0    	mov    ebx,DWORD PTR ds:0xc0033be8
c0016646:	01 da                	add    edx,ebx
c0016648:	8a 0a                	mov    cl,BYTE PTR [edx]
c001664a:	09 c8                	or     eax,ecx
c001664c:	88 02                	mov    BYTE PTR [edx],al
c001664e:	5b                   	pop    ebx
c001664f:	5e                   	pop    esi
c0016650:	5f                   	pop    edi
c0016651:	c3                   	ret    

c0016652 <Phys::getPageState(unsigned long)>:
c0016652:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016656:	8b 15 e8 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033be8
c001665c:	89 c8                	mov    eax,ecx
c001665e:	83 e1 07             	and    ecx,0x7
c0016661:	c1 e8 03             	shr    eax,0x3
c0016664:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016668:	d3 f8                	sar    eax,cl
c001666a:	83 e0 01             	and    eax,0x1
c001666d:	c3                   	ret    

c001666e <Phys::freePage(unsigned long)>:
c001666e:	53                   	push   ebx
c001666f:	83 ec 08             	sub    esp,0x8
c0016672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016676:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001667c:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016682:	76 41                	jbe    c00166c5 <Phys::freePage(unsigned long)+0x57>
c0016684:	c1 e8 0c             	shr    eax,0xc
c0016687:	50                   	push   eax
c0016688:	89 c3                	mov    ebx,eax
c001668a:	e8 c3 ff ff ff       	call   c0016652 <Phys::getPageState(unsigned long)>
c001668f:	5a                   	pop    edx
c0016690:	84 c0                	test   al,al
c0016692:	74 20                	je     c00166b4 <Phys::freePage(unsigned long)+0x46>
c0016694:	83 ec 08             	sub    esp,0x8
c0016697:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c001669c:	6a 00                	push   0x0
c001669e:	83 e8 01             	sub    eax,0x1
c00166a1:	53                   	push   ebx
c00166a2:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00166a7:	e8 66 ff ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c00166ac:	83 c4 10             	add    esp,0x10
c00166af:	83 c4 08             	add    esp,0x8
c00166b2:	5b                   	pop    ebx
c00166b3:	c3                   	ret    
c00166b4:	c7 44 24 10 4d 12 03 c0 	mov    DWORD PTR [esp+0x10],0xc003124d
c00166bc:	83 c4 08             	add    esp,0x8
c00166bf:	5b                   	pop    ebx
c00166c0:	e9 b1 9b 00 00       	jmp    c0020276 <KePanic(char const*)>
c00166c5:	68 00 10 00 00       	push   0x1000
c00166ca:	50                   	push   eax
c00166cb:	e8 07 ff ff ff       	call   c00165d7 <Phys::freeDMA(unsigned long, unsigned long)>
c00166d0:	59                   	pop    ecx
c00166d1:	5b                   	pop    ebx
c00166d2:	83 c4 08             	add    esp,0x8
c00166d5:	5b                   	pop    ebx
c00166d6:	c3                   	ret    

c00166d7 <Phys::allocatePage()>:
c00166d7:	56                   	push   esi
c00166d8:	53                   	push   ebx
c00166d9:	83 ec 14             	sub    esp,0x14
c00166dc:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00166e2:	89 f3                	mov    ebx,esi
c00166e4:	eb 0a                	jmp    c00166f0 <Phys::allocatePage()+0x19>
c00166e6:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00166ec:	39 de                	cmp    esi,ebx
c00166ee:	74 26                	je     c0016716 <Phys::allocatePage()+0x3f>
c00166f0:	53                   	push   ebx
c00166f1:	e8 5c ff ff ff       	call   c0016652 <Phys::getPageState(unsigned long)>
c00166f6:	5a                   	pop    edx
c00166f7:	84 c0                	test   al,al
c00166f9:	74 67                	je     c0016762 <Phys::allocatePage()+0x8b>
c00166fb:	83 c3 01             	add    ebx,0x1
c00166fe:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016704:	75 e0                	jne    c00166e6 <Phys::allocatePage()+0xf>
c0016706:	31 db                	xor    ebx,ebx
c0016708:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c0016712:	39 de                	cmp    esi,ebx
c0016714:	75 da                	jne    c00166f0 <Phys::allocatePage()+0x19>
c0016716:	83 ec 0c             	sub    esp,0xc
c0016719:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c001671e:	83 f0 01             	xor    eax,0x1
c0016721:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c0016726:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001672b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001672e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016734:	50                   	push   eax
c0016735:	e8 a8 27 00 00       	call   c0018ee2 <VAS::scanForEviction()>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	85 c0                	test   eax,eax
c001673f:	75 48                	jne    c0016789 <Phys::allocatePage()+0xb2>
c0016741:	83 ec 0c             	sub    esp,0xc
c0016744:	68 d0 11 03 c0       	push   0xc00311d0
c0016749:	e8 28 9b 00 00       	call   c0020276 <KePanic(char const*)>
c001674e:	83 c4 10             	add    esp,0x10
c0016751:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c0016757:	53                   	push   ebx
c0016758:	e8 f5 fe ff ff       	call   c0016652 <Phys::getPageState(unsigned long)>
c001675d:	5a                   	pop    edx
c001675e:	84 c0                	test   al,al
c0016760:	75 99                	jne    c00166fb <Phys::allocatePage()+0x24>
c0016762:	6a 01                	push   0x1
c0016764:	53                   	push   ebx
c0016765:	e8 a8 fe ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c001676a:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016770:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016775:	83 c2 01             	add    edx,0x1
c0016778:	59                   	pop    ecx
c0016779:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c001677f:	c1 e0 0c             	shl    eax,0xc
c0016782:	5b                   	pop    ebx
c0016783:	83 c4 14             	add    esp,0x14
c0016786:	5b                   	pop    ebx
c0016787:	5e                   	pop    esi
c0016788:	c3                   	ret    
c0016789:	83 ec 08             	sub    esp,0x8
c001678c:	89 c2                	mov    edx,eax
c001678e:	6a 01                	push   0x1
c0016790:	c1 ea 0c             	shr    edx,0xc
c0016793:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016797:	52                   	push   edx
c0016798:	e8 75 fe ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c001679d:	83 c4 10             	add    esp,0x10
c00167a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167a4:	eb dd                	jmp    c0016783 <Phys::allocatePage()+0xac>

c00167a6 <Phys::allocateContiguousPages(int)>:
c00167a6:	57                   	push   edi
c00167a7:	56                   	push   esi
c00167a8:	53                   	push   ebx
c00167a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167ad:	fa                   	cli    
c00167ae:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00167b3:	31 db                	xor    ebx,ebx
c00167b5:	83 c0 01             	add    eax,0x1
c00167b8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00167bd:	85 db                	test   ebx,ebx
c00167bf:	75 11                	jne    c00167d2 <Phys::allocateContiguousPages(int)+0x2c>
c00167c1:	e8 11 ff ff ff       	call   c00166d7 <Phys::allocatePage()>
c00167c6:	83 fe 01             	cmp    esi,0x1
c00167c9:	89 c7                	mov    edi,eax
c00167cb:	74 21                	je     c00167ee <Phys::allocateContiguousPages(int)+0x48>
c00167cd:	bb 01 00 00 00       	mov    ebx,0x1
c00167d2:	e8 00 ff ff ff       	call   c00166d7 <Phys::allocatePage()>
c00167d7:	89 da                	mov    edx,ebx
c00167d9:	c1 e2 0c             	shl    edx,0xc
c00167dc:	01 fa                	add    edx,edi
c00167de:	39 c2                	cmp    edx,eax
c00167e0:	74 22                	je     c0016804 <Phys::allocateContiguousPages(int)+0x5e>
c00167e2:	bb 01 00 00 00       	mov    ebx,0x1
c00167e7:	89 c7                	mov    edi,eax
c00167e9:	83 fe 01             	cmp    esi,0x1
c00167ec:	75 e4                	jne    c00167d2 <Phys::allocateContiguousPages(int)+0x2c>
c00167ee:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00167f3:	83 e8 01             	sub    eax,0x1
c00167f6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00167fb:	75 01                	jne    c00167fe <Phys::allocateContiguousPages(int)+0x58>
c00167fd:	fb                   	sti    
c00167fe:	89 f8                	mov    eax,edi
c0016800:	5b                   	pop    ebx
c0016801:	5e                   	pop    esi
c0016802:	5f                   	pop    edi
c0016803:	c3                   	ret    
c0016804:	83 c3 01             	add    ebx,0x1
c0016807:	39 f3                	cmp    ebx,esi
c0016809:	75 b2                	jne    c00167bd <Phys::allocateContiguousPages(int)+0x17>
c001680b:	eb e1                	jmp    c00167ee <Phys::allocateContiguousPages(int)+0x48>

c001680d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001680d:	56                   	push   esi
c001680e:	53                   	push   ebx
c001680f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016813:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016819:	73 06                	jae    c0016821 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001681b:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016825:	c1 eb 0c             	shr    ebx,0xc
c0016828:	c1 e8 0c             	shr    eax,0xc
c001682b:	39 d8                	cmp    eax,ebx
c001682d:	73 13                	jae    c0016842 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001682f:	6a 00                	push   0x0
c0016831:	8d 70 01             	lea    esi,[eax+0x1]
c0016834:	50                   	push   eax
c0016835:	e8 d8 fd ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c001683a:	5a                   	pop    edx
c001683b:	89 f0                	mov    eax,esi
c001683d:	59                   	pop    ecx
c001683e:	39 f3                	cmp    ebx,esi
c0016840:	75 ed                	jne    c001682f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016842:	5b                   	pop    ebx
c0016843:	5e                   	pop    esi
c0016844:	c3                   	ret    

c0016845 <Phys::physicalMemorySetup(unsigned int)>:
c0016845:	55                   	push   ebp
c0016846:	57                   	push   edi
c0016847:	56                   	push   esi
c0016848:	53                   	push   ebx
c0016849:	83 ec 40             	sub    esp,0x40
c001684c:	6a 10                	push   0x10
c001684e:	6a 00                	push   0x0
c0016850:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016855:	e8 96 9c fe ff       	call   c00004f0 <memset>
c001685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001685e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016863:	05 00 10 00 00       	add    eax,0x1000
c0016868:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001686c:	5b                   	pop    ebx
c001686d:	31 db                	xor    ebx,ebx
c001686f:	5e                   	pop    esi
c0016870:	50                   	push   eax
c0016871:	68 63 12 03 c0       	push   0xc0031263
c0016876:	e8 e2 29 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001687b:	83 c4 10             	add    esp,0x10
c001687e:	83 ec 08             	sub    esp,0x8
c0016881:	6a 01                	push   0x1
c0016883:	53                   	push   ebx
c0016884:	83 c3 01             	add    ebx,0x1
c0016887:	e8 86 fd ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c001688c:	83 c4 10             	add    esp,0x10
c001688f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016895:	75 e7                	jne    c001687e <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016897:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001689e:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00168a5:	c1 e0 08             	shl    eax,0x8
c00168a8:	09 c2                	or     edx,eax
c00168aa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00168ae:	0f 84 98 01 00 00    	je     c0016a4c <Phys::physicalMemorySetup(unsigned int)+0x207>
c00168b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00168c0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00168c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00168c9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00168d1:	eb 1c                	jmp    c00168ef <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00168d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00168d7:	83 c3 18             	add    ebx,0x18
c00168da:	83 c6 01             	add    esi,0x1
c00168dd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00168e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00168e5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00168e9:	0f 84 6d 01 00 00    	je     c0016a5c <Phys::physicalMemorySetup(unsigned int)+0x217>
c00168ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00168f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168f5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00168f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00168fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016900:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016902:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016905:	01 f0                	add    eax,esi
c0016907:	55                   	push   ebp
c0016908:	11 fa                	adc    edx,edi
c001690a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001690e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016912:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016916:	51                   	push   ecx
c0016917:	56                   	push   esi
c0016918:	68 00 12 03 c0       	push   0xc0031200
c001691d:	e8 3b 29 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0016922:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016926:	83 c4 10             	add    esp,0x10
c0016929:	09 f8                	or     eax,edi
c001692b:	0f 85 2b 01 00 00    	jne    c0016a5c <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016931:	83 fd 01             	cmp    ebp,0x1
c0016934:	75 9d                	jne    c00168d3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016936:	ba 00 00 08 00       	mov    edx,0x80000
c001693b:	89 c1                	mov    ecx,eax
c001693d:	39 f2                	cmp    edx,esi
c001693f:	19 f9                	sbb    ecx,edi
c0016941:	0f 82 ab 00 00 00    	jb     c00169f2 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016947:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001694b:	89 c1                	mov    ecx,eax
c001694d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016951:	0f 83 9b 00 00 00    	jae    c00169f2 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016957:	ba 00 00 0a 00       	mov    edx,0xa0000
c001695c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016960:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016964:	39 fa                	cmp    edx,edi
c0016966:	19 e8                	sbb    eax,ebp
c0016968:	0f 82 b0 01 00 00    	jb     c0016b1e <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c001696e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016972:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016976:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001697c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016981:	83 d5 ff             	adc    ebp,0xffffffff
c0016984:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016988:	31 c0                	xor    eax,eax
c001698a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001698e:	39 fa                	cmp    edx,edi
c0016990:	89 c1                	mov    ecx,eax
c0016992:	19 e9                	sbb    ecx,ebp
c0016994:	0f 83 39 ff ff ff    	jae    c00168d3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001699a:	be 00 00 08 00       	mov    esi,0x80000
c001699f:	83 ec 04             	sub    esp,0x4
c00169a2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00169a6:	57                   	push   edi
c00169a7:	56                   	push   esi
c00169a8:	68 24 12 03 c0       	push   0xc0031224
c00169ad:	e8 ab 28 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00169b2:	5d                   	pop    ebp
c00169b3:	58                   	pop    eax
c00169b4:	57                   	push   edi
c00169b5:	56                   	push   esi
c00169b6:	e8 52 fe ff ff       	call   c001680d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00169bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00169bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00169c3:	83 c4 0c             	add    esp,0xc
c00169c6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00169ca:	8b 15 ec a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9ec
c00169d0:	01 d0                	add    eax,edx
c00169d2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00169d9:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c00169de:	52                   	push   edx
c00169df:	50                   	push   eax
c00169e0:	68 89 12 03 c0       	push   0xc0031289
c00169e5:	e8 73 28 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00169ea:	83 c4 10             	add    esp,0x10
c00169ed:	e9 e1 fe ff ff       	jmp    c00168d3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00169f2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00169f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00169fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169fe:	39 ea                	cmp    edx,ebp
c0016a00:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0016a04:	0f 82 c9 fe ff ff    	jb     c00168d3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016a0a:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016a0f:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0016a13:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0016a17:	0f 83 b6 fe ff ff    	jae    c00168d3 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016a1d:	39 ee                	cmp    esi,ebp
c0016a1f:	89 f8                	mov    eax,edi
c0016a21:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016a25:	0f 83 74 ff ff ff    	jae    c001699f <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016a2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a33:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016a37:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016a3b:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016a3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016a47:	e9 53 ff ff ff       	jmp    c001699f <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016a4c:	83 ec 0c             	sub    esp,0xc
c0016a4f:	68 7b 12 03 c0       	push   0xc003127b
c0016a54:	e8 1d 98 00 00       	call   c0020276 <KePanic(char const*)>
c0016a59:	83 c4 10             	add    esp,0x10
c0016a5c:	83 ec 08             	sub    esp,0x8
c0016a5f:	bb 60 00 00 00       	mov    ebx,0x60
c0016a64:	6a 00                	push   0x0
c0016a66:	6a 06                	push   0x6
c0016a68:	e8 a5 fb ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c0016a6d:	58                   	pop    eax
c0016a6e:	5a                   	pop    edx
c0016a6f:	6a 00                	push   0x0
c0016a71:	6a 07                	push   0x7
c0016a73:	e8 9a fb ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c0016a78:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016a7e:	83 c4 10             	add    esp,0x10
c0016a81:	83 c1 02             	add    ecx,0x2
c0016a84:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016a8a:	83 ec 08             	sub    esp,0x8
c0016a8d:	6a 00                	push   0x0
c0016a8f:	53                   	push   ebx
c0016a90:	83 c3 01             	add    ebx,0x1
c0016a93:	e8 7a fb ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c0016a98:	83 c4 10             	add    esp,0x10
c0016a9b:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016aa1:	75 e7                	jne    c0016a8a <Phys::physicalMemorySetup(unsigned int)+0x245>
c0016aa3:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016aa8:	bb 40 01 00 00       	mov    ebx,0x140
c0016aad:	83 c0 20             	add    eax,0x20
c0016ab0:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016ab5:	eb 26                	jmp    c0016add <Phys::physicalMemorySetup(unsigned int)+0x298>
c0016ab7:	83 ec 08             	sub    esp,0x8
c0016aba:	6a 00                	push   0x0
c0016abc:	53                   	push   ebx
c0016abd:	83 c3 01             	add    ebx,0x1
c0016ac0:	e8 4d fb ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c0016ac5:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016aca:	83 c4 10             	add    esp,0x10
c0016acd:	83 c0 01             	add    eax,0x1
c0016ad0:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016ad6:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016adb:	74 07                	je     c0016ae4 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016add:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016ae2:	7e d3                	jle    c0016ab7 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016ae4:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016ae9:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016aee:	7f 26                	jg     c0016b16 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016af0:	83 ec 08             	sub    esp,0x8
c0016af3:	6a 00                	push   0x0
c0016af5:	53                   	push   ebx
c0016af6:	83 c3 01             	add    ebx,0x1
c0016af9:	e8 14 fb ff ff       	call   c0016612 <Phys::setPageState(unsigned long, bool)>
c0016afe:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016b03:	83 c4 10             	add    esp,0x10
c0016b06:	83 c0 01             	add    eax,0x1
c0016b09:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016b0f:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b14:	75 d3                	jne    c0016ae9 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016b16:	83 c4 3c             	add    esp,0x3c
c0016b19:	5b                   	pop    ebx
c0016b1a:	5e                   	pop    esi
c0016b1b:	5f                   	pop    edi
c0016b1c:	5d                   	pop    ebp
c0016b1d:	c3                   	ret    
c0016b1e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016b26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b2e:	e9 3b fe ff ff       	jmp    c001696e <Phys::physicalMemorySetup(unsigned int)+0x129>
c0016b33:	90                   	nop

c0016b34 <Pipe::isAtty()>:
c0016b34:	31 c0                	xor    eax,eax
c0016b36:	c3                   	ret    
c0016b37:	90                   	nop

c0016b38 <Pipe::~Pipe()>:
c0016b38:	83 ec 0c             	sub    esp,0xc
c0016b3b:	ba e8 12 03 c0       	mov    edx,0xc00312e8
c0016b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b44:	89 10                	mov    DWORD PTR [eax],edx
c0016b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b4a:	83 ec 0c             	sub    esp,0xc
c0016b4d:	50                   	push   eax
c0016b4e:	e8 69 11 00 00       	call   c0017cbc <UnixFile::~UnixFile()>
c0016b53:	83 c4 10             	add    esp,0x10
c0016b56:	90                   	nop
c0016b57:	83 c4 0c             	add    esp,0xc
c0016b5a:	c3                   	ret    
c0016b5b:	90                   	nop

c0016b5c <Pipe::~Pipe()>:
c0016b5c:	83 ec 0c             	sub    esp,0xc
c0016b5f:	83 ec 0c             	sub    esp,0xc
c0016b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b66:	e8 cd ff ff ff       	call   c0016b38 <Pipe::~Pipe()>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	83 ec 08             	sub    esp,0x8
c0016b71:	6a 20                	push   0x20
c0016b73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b77:	e8 b4 25 00 00       	call   c0019130 <operator delete(void*, unsigned long)>
c0016b7c:	83 c4 10             	add    esp,0x10
c0016b7f:	83 c4 0c             	add    esp,0xc
c0016b82:	c3                   	ret    
c0016b83:	90                   	nop

c0016b84 <Pipe::write(unsigned long long, void*, int*)>:
c0016b84:	55                   	push   ebp
c0016b85:	57                   	push   edi
c0016b86:	56                   	push   esi
c0016b87:	53                   	push   ebx
c0016b88:	83 ec 1c             	sub    esp,0x1c
c0016b8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b93:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016b96:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ba1:	89 d8                	mov    eax,ebx
c0016ba3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016ba6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016baa:	89 d6                	mov    esi,edx
c0016bac:	89 d7                	mov    edi,edx
c0016bae:	c1 ff 1f             	sar    edi,0x1f
c0016bb1:	03 34 24             	add    esi,DWORD PTR [esp]
c0016bb4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016bb8:	c1 f8 1f             	sar    eax,0x1f
c0016bbb:	39 f3                	cmp    ebx,esi
c0016bbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bc5:	19 f8                	sbb    eax,edi
c0016bc7:	b8 01 00 00 00       	mov    eax,0x1
c0016bcc:	72 6e                	jb     c0016c3c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016bce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016bd1:	01 d0                	add    eax,edx
c0016bd3:	99                   	cdq    
c0016bd4:	f7 fb                	idiv   ebx
c0016bd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bda:	29 d3                	sub    ebx,edx
c0016bdc:	89 d7                	mov    edi,edx
c0016bde:	89 de                	mov    esi,ebx
c0016be0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016be3:	c1 fb 1f             	sar    ebx,0x1f
c0016be6:	39 f2                	cmp    edx,esi
c0016be8:	19 d8                	sbb    eax,ebx
c0016bea:	b8 00 00 00 00       	mov    eax,0x0
c0016bef:	72 04                	jb     c0016bf5 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016bf1:	89 d0                	mov    eax,edx
c0016bf3:	29 f0                	sub    eax,esi
c0016bf5:	89 d3                	mov    ebx,edx
c0016bf7:	29 c3                	sub    ebx,eax
c0016bf9:	74 0b                	je     c0016c06 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016bfb:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016bfe:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016c02:	89 d9                	mov    ecx,ebx
c0016c04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c06:	85 c0                	test   eax,eax
c0016c08:	74 0d                	je     c0016c17 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016c0a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016c0e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016c11:	89 de                	mov    esi,ebx
c0016c13:	89 c1                	mov    ecx,eax
c0016c15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c17:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016c1a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016c1f:	75 10                	jne    c0016c31 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016c21:	83 ec 0c             	sub    esp,0xc
c0016c24:	68 a5 12 03 c0       	push   0xc00312a5
c0016c29:	e8 48 96 00 00       	call   c0020276 <KePanic(char const*)>
c0016c2e:	83 c4 10             	add    esp,0x10
c0016c31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c35:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c38:	89 08                	mov    DWORD PTR [eax],ecx
c0016c3a:	31 c0                	xor    eax,eax
c0016c3c:	83 c4 1c             	add    esp,0x1c
c0016c3f:	5b                   	pop    ebx
c0016c40:	5e                   	pop    esi
c0016c41:	5f                   	pop    edi
c0016c42:	5d                   	pop    ebp
c0016c43:	c3                   	ret    

c0016c44 <Pipe::read(unsigned long long, void*, int*)>:
c0016c44:	55                   	push   ebp
c0016c45:	57                   	push   edi
c0016c46:	56                   	push   esi
c0016c47:	53                   	push   ebx
c0016c48:	83 ec 1c             	sub    esp,0x1c
c0016c4b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016c4f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c53:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016c57:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016c5a:	89 c8                	mov    eax,ecx
c0016c5c:	99                   	cdq    
c0016c5d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016c61:	74 24                	je     c0016c87 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c63:	39 f9                	cmp    ecx,edi
c0016c65:	89 d1                	mov    ecx,edx
c0016c67:	19 f1                	sbb    ecx,esi
c0016c69:	73 1c                	jae    c0016c87 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c6b:	fa                   	cli    
c0016c6c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016c72:	e8 15 e6 00 00       	call   c002528c <schedule()>
c0016c77:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016c7c:	48                   	dec    eax
c0016c7d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016c82:	75 d3                	jne    c0016c57 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c84:	fb                   	sti    
c0016c85:	eb d0                	jmp    c0016c57 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c87:	39 f8                	cmp    eax,edi
c0016c89:	89 d1                	mov    ecx,edx
c0016c8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016c8e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016c92:	19 f1                	sbb    ecx,esi
c0016c94:	73 07                	jae    c0016c9d <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016c96:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c99:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c9d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016ca0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016ca3:	29 f7                	sub    edi,esi
c0016ca5:	89 f8                	mov    eax,edi
c0016ca7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016cab:	99                   	cdq    
c0016cac:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016caf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cb3:	19 d0                	sbb    eax,edx
c0016cb5:	73 07                	jae    c0016cbe <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016cb7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016cba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cbe:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016cc1:	89 ea                	mov    edx,ebp
c0016cc3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016cc7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016ccc:	74 0d                	je     c0016cdb <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016cce:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016cd1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016cd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cdb:	85 d2                	test   edx,edx
c0016cdd:	74 11                	je     c0016cf0 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ce3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016ce6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016cea:	89 d1                	mov    ecx,edx
c0016cec:	89 c7                	mov    edi,eax
c0016cee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cf0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016cf3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016cf6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016cf9:	99                   	cdq    
c0016cfa:	89 f7                	mov    edi,esi
c0016cfc:	03 04 24             	add    eax,DWORD PTR [esp]
c0016cff:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016d03:	c1 ff 1f             	sar    edi,0x1f
c0016d06:	57                   	push   edi
c0016d07:	56                   	push   esi
c0016d08:	52                   	push   edx
c0016d09:	50                   	push   eax
c0016d0a:	e8 81 7a 01 00       	call   c002e790 <__umoddi3>
c0016d0f:	83 c4 10             	add    esp,0x10
c0016d12:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016d15:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016d1a:	75 10                	jne    c0016d2c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	68 c2 12 03 c0       	push   0xc00312c2
c0016d24:	e8 4d 95 00 00       	call   c0020276 <KePanic(char const*)>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d30:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016d33:	89 10                	mov    DWORD PTR [eax],edx
c0016d35:	83 c4 1c             	add    esp,0x1c
c0016d38:	31 c0                	xor    eax,eax
c0016d3a:	5b                   	pop    ebx
c0016d3b:	5e                   	pop    esi
c0016d3c:	5f                   	pop    edi
c0016d3d:	5d                   	pop    ebp
c0016d3e:	c3                   	ret    
c0016d3f:	90                   	nop

c0016d40 <Pipe::Pipe(int)>:
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d47:	83 ec 08             	sub    esp,0x8
c0016d4a:	6a 00                	push   0x0
c0016d4c:	50                   	push   eax
c0016d4d:	e8 84 0d 00 00       	call   c0017ad6 <UnixFile::UnixFile(int)>
c0016d52:	83 c4 10             	add    esp,0x10
c0016d55:	ba e8 12 03 c0       	mov    edx,0xc00312e8
c0016d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5e:	89 10                	mov    DWORD PTR [eax],edx
c0016d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d68:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016d81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d85:	83 ec 0c             	sub    esp,0xc
c0016d88:	50                   	push   eax
c0016d89:	e8 30 f6 ff ff       	call   c00163be <malloc>
c0016d8e:	83 c4 10             	add    esp,0x10
c0016d91:	89 c2                	mov    edx,eax
c0016d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d97:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d9e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016da2:	90                   	nop
c0016da3:	83 c4 0c             	add    esp,0xc
c0016da6:	c3                   	ret    
c0016da7:	90                   	nop

c0016da8 <VgaText::isAtty()>:
c0016da8:	b0 01                	mov    al,0x1
c0016daa:	c3                   	ret    
c0016dab:	90                   	nop

c0016dac <VgaText::~VgaText()>:
c0016dac:	83 ec 0c             	sub    esp,0xc
c0016daf:	ba 30 13 03 c0       	mov    edx,0xc0031330
c0016db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db8:	89 10                	mov    DWORD PTR [eax],edx
c0016dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dbe:	83 ec 0c             	sub    esp,0xc
c0016dc1:	50                   	push   eax
c0016dc2:	e8 f5 0e 00 00       	call   c0017cbc <UnixFile::~UnixFile()>
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	90                   	nop
c0016dcb:	83 c4 0c             	add    esp,0xc
c0016dce:	c3                   	ret    
c0016dcf:	90                   	nop

c0016dd0 <VgaText::~VgaText()>:
c0016dd0:	83 ec 0c             	sub    esp,0xc
c0016dd3:	83 ec 0c             	sub    esp,0xc
c0016dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dda:	e8 cd ff ff ff       	call   c0016dac <VgaText::~VgaText()>
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	83 ec 08             	sub    esp,0x8
c0016de5:	68 84 01 00 00       	push   0x184
c0016dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dee:	e8 3d 23 00 00       	call   c0019130 <operator delete(void*, unsigned long)>
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	83 c4 0c             	add    esp,0xc
c0016df9:	c3                   	ret    

c0016dfa <VgaText::read(unsigned long long, void*, int*)>:
c0016dfa:	83 ec 10             	sub    esp,0x10
c0016dfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e09:	e8 ba 53 00 00       	call   c001c1c8 <readKeyboard(VgaText*, char*, unsigned long)>
c0016e0e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016e12:	89 02                	mov    DWORD PTR [edx],eax
c0016e14:	31 c0                	xor    eax,eax
c0016e16:	83 c4 1c             	add    esp,0x1c
c0016e19:	c3                   	ret    

c0016e1a <setTerminalScrollLock(bool)>:
c0016e1a:	c3                   	ret    

c0016e1b <doTerminalCycle()>:
c0016e1b:	c3                   	ret    

c0016e1c <addToTerminalCycle(VgaText*)>:
c0016e1c:	c3                   	ret    

c0016e1d <scrollTerminalScrollLock(int)>:
c0016e1d:	c3                   	ret    

c0016e1e <VgaText::updateTitle()>:
c0016e1e:	c3                   	ret    
c0016e1f:	90                   	nop

c0016e20 <VgaText::load()>:
c0016e20:	c3                   	ret    
c0016e21:	90                   	nop

c0016e22 <VgaText::updateCursor()>:
c0016e22:	83 ec 14             	sub    esp,0x14
c0016e25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e29:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016e2c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016e2f:	e8 64 0f 01 00       	call   c0027d98 <HalConsoleCursorUpdate(int, int)>
c0016e34:	83 c4 1c             	add    esp,0x1c
c0016e37:	c3                   	ret    

c0016e38 <VgaText::doANSI_SGR(int)>:
c0016e38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e40:	85 d2                	test   edx,edx
c0016e42:	75 0b                	jne    c0016e4f <VgaText::doANSI_SGR(int)+0x17>
c0016e44:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016e47:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e4a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016e4d:	eb 59                	jmp    c0016ea8 <VgaText::doANSI_SGR(int)+0x70>
c0016e4f:	83 fa 07             	cmp    edx,0x7
c0016e52:	75 0b                	jne    c0016e5f <VgaText::doANSI_SGR(int)+0x27>
c0016e54:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016e57:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016e5a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016e5d:	eb 49                	jmp    c0016ea8 <VgaText::doANSI_SGR(int)+0x70>
c0016e5f:	83 fa 1b             	cmp    edx,0x1b
c0016e62:	74 e0                	je     c0016e44 <VgaText::doANSI_SGR(int)+0xc>
c0016e64:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016e67:	83 f9 07             	cmp    ecx,0x7
c0016e6a:	77 09                	ja     c0016e75 <VgaText::doANSI_SGR(int)+0x3d>
c0016e6c:	8b 14 8d 20 3c 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc3e0]
c0016e73:	eb 20                	jmp    c0016e95 <VgaText::doANSI_SGR(int)+0x5d>
c0016e75:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016e78:	83 f9 07             	cmp    ecx,0x7
c0016e7b:	77 09                	ja     c0016e86 <VgaText::doANSI_SGR(int)+0x4e>
c0016e7d:	8b 14 8d 20 3c 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc3e0]
c0016e84:	eb 22                	jmp    c0016ea8 <VgaText::doANSI_SGR(int)+0x70>
c0016e86:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016e89:	83 f9 07             	cmp    ecx,0x7
c0016e8c:	77 0b                	ja     c0016e99 <VgaText::doANSI_SGR(int)+0x61>
c0016e8e:	8b 14 95 d8 3a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc528]
c0016e95:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e98:	c3                   	ret    
c0016e99:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016e9c:	83 f9 07             	cmp    ecx,0x7
c0016e9f:	77 0a                	ja     c0016eab <VgaText::doANSI_SGR(int)+0x73>
c0016ea1:	8b 14 95 b0 3a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc550]
c0016ea8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016eab:	c3                   	ret    

c0016eac <VgaText::setDefaultBgColour(VgaColour)>:
c0016eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016eb4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016eb7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016eba:	c3                   	ret    
c0016ebb:	90                   	nop

c0016ebc <VgaText::setDefaultFgColour(VgaColour)>:
c0016ebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ec4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016ec7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016eca:	c3                   	ret    
c0016ecb:	90                   	nop

c0016ecc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016ecc:	53                   	push   ebx
c0016ecd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016ed1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016ed5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ed9:	51                   	push   ecx
c0016eda:	e8 cd ff ff ff       	call   c0016eac <VgaText::setDefaultBgColour(VgaColour)>
c0016edf:	58                   	pop    eax
c0016ee0:	5a                   	pop    edx
c0016ee1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016ee5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ee9:	5b                   	pop    ebx
c0016eea:	eb d0                	jmp    c0016ebc <VgaText::setDefaultFgColour(VgaColour)>

c0016eec <VgaText::setTitleTextColour(VgaColour)>:
c0016eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ef4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016ef7:	c3                   	ret    

c0016ef8 <VgaText::setTitleColour(VgaColour)>:
c0016ef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016efc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f00:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016f03:	c3                   	ret    

c0016f04 <VgaText::setTitle(char*)>:
c0016f04:	c3                   	ret    
c0016f05:	90                   	nop

c0016f06 <VgaText::combineColours(unsigned char, unsigned char)>:
c0016f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f0a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f0f:	83 e0 0f             	and    eax,0xf
c0016f12:	c1 e2 04             	shl    edx,0x4
c0016f15:	09 d0                	or     eax,edx
c0016f17:	c3                   	ret    

c0016f18 <VgaText::scrollScreen()>:
c0016f18:	55                   	push   ebp
c0016f19:	57                   	push   edi
c0016f1a:	56                   	push   esi
c0016f1b:	be 01 00 00 00       	mov    esi,0x1
c0016f20:	53                   	push   ebx
c0016f21:	83 ec 0c             	sub    esp,0xc
c0016f24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016f28:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016f2b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016f31:	31 ff                	xor    edi,edi
c0016f33:	01 e9                	add    ecx,ebp
c0016f35:	8a 01                	mov    al,BYTE PTR [ecx]
c0016f37:	83 fe 18             	cmp    esi,0x18
c0016f3a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0016f40:	75 20                	jne    c0016f62 <VgaText::scrollScreen()+0x4a>
c0016f42:	f7 c7 01 00 00 00    	test   edi,0x1
c0016f48:	74 15                	je     c0016f5f <VgaText::scrollScreen()+0x47>
c0016f4a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f4e:	50                   	push   eax
c0016f4f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f53:	50                   	push   eax
c0016f54:	e8 ad ff ff ff       	call   c0016f06 <VgaText::combineColours(unsigned char, unsigned char)>
c0016f59:	5a                   	pop    edx
c0016f5a:	5a                   	pop    edx
c0016f5b:	88 01                	mov    BYTE PTR [ecx],al
c0016f5d:	eb 03                	jmp    c0016f62 <VgaText::scrollScreen()+0x4a>
c0016f5f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0016f62:	47                   	inc    edi
c0016f63:	41                   	inc    ecx
c0016f64:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0016f6a:	75 c9                	jne    c0016f35 <VgaText::scrollScreen()+0x1d>
c0016f6c:	46                   	inc    esi
c0016f6d:	83 fe 19             	cmp    esi,0x19
c0016f70:	75 b9                	jne    c0016f2b <VgaText::scrollScreen()+0x13>
c0016f72:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0016f78:	75 1f                	jne    c0016f99 <VgaText::scrollScreen()+0x81>
c0016f7a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0016f7e:	74 05                	je     c0016f85 <VgaText::scrollScreen()+0x6d>
c0016f80:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0016f83:	eb 14                	jmp    c0016f99 <VgaText::scrollScreen()+0x81>
c0016f85:	50                   	push   eax
c0016f86:	50                   	push   eax
c0016f87:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f8b:	50                   	push   eax
c0016f8c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f90:	50                   	push   eax
c0016f91:	e8 96 0c 01 00       	call   c0027c2c <HalConsoleScroll(int, int)>
c0016f96:	83 c4 10             	add    esp,0x10
c0016f99:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0016f9d:	83 c4 0c             	add    esp,0xc
c0016fa0:	5b                   	pop    ebx
c0016fa1:	5e                   	pop    esi
c0016fa2:	5f                   	pop    edi
c0016fa3:	5d                   	pop    ebp
c0016fa4:	e9 79 fe ff ff       	jmp    c0016e22 <VgaText::updateCursor()>
c0016fa9:	90                   	nop

c0016faa <VgaText::combineCharAndColour(char, unsigned char)>:
c0016faa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0016faf:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0016fb4:	c1 e0 08             	shl    eax,0x8
c0016fb7:	09 d0                	or     eax,edx
c0016fb9:	c3                   	ret    

c0016fba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0016fba:	55                   	push   ebp
c0016fbb:	57                   	push   edi
c0016fbc:	56                   	push   esi
c0016fbd:	53                   	push   ebx
c0016fbe:	83 ec 1c             	sub    esp,0x1c
c0016fc1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016fc5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fc9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fd1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fd5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fd9:	0f b6 c3             	movzx  eax,bl
c0016fdc:	50                   	push   eax
c0016fdd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016fe2:	50                   	push   eax
c0016fe3:	e8 1e ff ff ff       	call   c0016f06 <VgaText::combineColours(unsigned char, unsigned char)>
c0016fe8:	5a                   	pop    edx
c0016fe9:	0f b6 c0             	movzx  eax,al
c0016fec:	59                   	pop    ecx
c0016fed:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0016ff2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ff6:	50                   	push   eax
c0016ff7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016ffb:	e8 aa ff ff ff       	call   c0016faa <VgaText::combineCharAndColour(char, unsigned char)>
c0017000:	5a                   	pop    edx
c0017001:	6b d7 50             	imul   edx,edi,0x50
c0017004:	59                   	pop    ecx
c0017005:	01 f2                	add    edx,esi
c0017007:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001700a:	0f b7 d2             	movzx  edx,dx
c001700d:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0017011:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0017017:	75 28                	jne    c0017041 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0017019:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001701d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0017021:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0017025:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017029:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001702d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017031:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017035:	83 c4 1c             	add    esp,0x1c
c0017038:	5b                   	pop    ebx
c0017039:	5e                   	pop    esi
c001703a:	5f                   	pop    edi
c001703b:	5d                   	pop    ebp
c001703c:	e9 f3 0c 01 00       	jmp    c0027d34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017041:	83 c4 1c             	add    esp,0x1c
c0017044:	5b                   	pop    ebx
c0017045:	5e                   	pop    esi
c0017046:	5f                   	pop    edi
c0017047:	5d                   	pop    ebp
c0017048:	c3                   	ret    
c0017049:	90                   	nop

c001704a <VgaText::getCursorX()>:
c001704a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001704e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017051:	c3                   	ret    

c0017052 <VgaText::getCursorY()>:
c0017052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017056:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017059:	c3                   	ret    

c001705a <VgaText::setCursor(int, int)>:
c001705a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001705e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017062:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0017065:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017069:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001706c:	e9 b1 fd ff ff       	jmp    c0016e22 <VgaText::updateCursor()>

c0017071 <setActiveTerminal(VgaText*)>:
c0017071:	53                   	push   ebx
c0017072:	83 ec 08             	sub    esp,0x8
c0017075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017079:	85 db                	test   ebx,ebx
c001707b:	75 11                	jne    c001708e <setActiveTerminal(VgaText*)+0x1d>
c001707d:	c7 44 24 10 fc 12 03 c0 	mov    DWORD PTR [esp+0x10],0xc00312fc
c0017085:	83 c4 08             	add    esp,0x8
c0017088:	5b                   	pop    ebx
c0017089:	e9 e8 91 00 00       	jmp    c0020276 <KePanic(char const*)>
c001708e:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0017093:	85 c0                	test   eax,eax
c0017095:	74 0c                	je     c00170a3 <setActiveTerminal(VgaText*)+0x32>
c0017097:	83 ec 0c             	sub    esp,0xc
c001709a:	50                   	push   eax
c001709b:	e8 82 fd ff ff       	call   c0016e22 <VgaText::updateCursor()>
c00170a0:	83 c4 10             	add    esp,0x10
c00170a3:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c00170a9:	50                   	push   eax
c00170aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00170ad:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00170b0:	53                   	push   ebx
c00170b1:	e8 a4 ff ff ff       	call   c001705a <VgaText::setCursor(int, int)>
c00170b6:	83 c4 18             	add    esp,0x18
c00170b9:	5b                   	pop    ebx
c00170ba:	c3                   	ret    
c00170bb:	90                   	nop

c00170bc <VgaText::clearScreen()>:
c00170bc:	57                   	push   edi
c00170bd:	56                   	push   esi
c00170be:	31 f6                	xor    esi,esi
c00170c0:	53                   	push   ebx
c00170c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170c5:	52                   	push   edx
c00170c6:	6a 00                	push   0x0
c00170c8:	6a 00                	push   0x0
c00170ca:	53                   	push   ebx
c00170cb:	e8 8a ff ff ff       	call   c001705a <VgaText::setCursor(int, int)>
c00170d0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00170d7:	83 c4 10             	add    esp,0x10
c00170da:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00170dd:	7e 20                	jle    c00170ff <VgaText::clearScreen()+0x43>
c00170df:	31 ff                	xor    edi,edi
c00170e1:	50                   	push   eax
c00170e2:	50                   	push   eax
c00170e3:	56                   	push   esi
c00170e4:	57                   	push   edi
c00170e5:	47                   	inc    edi
c00170e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00170e9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00170ec:	6a 20                	push   0x20
c00170ee:	53                   	push   ebx
c00170ef:	e8 c6 fe ff ff       	call   c0016fba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00170f4:	83 c4 20             	add    esp,0x20
c00170f7:	83 ff 50             	cmp    edi,0x50
c00170fa:	75 e5                	jne    c00170e1 <VgaText::clearScreen()+0x25>
c00170fc:	46                   	inc    esi
c00170fd:	eb db                	jmp    c00170da <VgaText::clearScreen()+0x1e>
c00170ff:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0017106:	5b                   	pop    ebx
c0017107:	5e                   	pop    esi
c0017108:	5f                   	pop    edi
c0017109:	c3                   	ret    

c001710a <VgaText::setCursorX(int)>:
c001710a:	83 ec 10             	sub    esp,0x10
c001710d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017111:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017118:	50                   	push   eax
c0017119:	e8 3c ff ff ff       	call   c001705a <VgaText::setCursor(int, int)>
c001711e:	83 c4 1c             	add    esp,0x1c
c0017121:	c3                   	ret    

c0017122 <VgaText::setCursorY(int)>:
c0017122:	83 ec 10             	sub    esp,0x10
c0017125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017129:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001712d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017130:	50                   	push   eax
c0017131:	e8 24 ff ff ff       	call   c001705a <VgaText::setCursor(int, int)>
c0017136:	83 c4 1c             	add    esp,0x1c
c0017139:	c3                   	ret    

c001713a <VgaText::incrementCursor(bool)>:
c001713a:	56                   	push   esi
c001713b:	53                   	push   ebx
c001713c:	51                   	push   ecx
c001713d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017141:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017145:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017148:	40                   	inc    eax
c0017149:	83 f8 50             	cmp    eax,0x50
c001714c:	74 05                	je     c0017153 <VgaText::incrementCursor(bool)+0x19>
c001714e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017151:	eb 24                	jmp    c0017177 <VgaText::incrementCursor(bool)+0x3d>
c0017153:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017156:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001715d:	8d 50 01             	lea    edx,[eax+0x1]
c0017160:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017163:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017166:	75 0f                	jne    c0017177 <VgaText::incrementCursor(bool)+0x3d>
c0017168:	83 ec 0c             	sub    esp,0xc
c001716b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001716e:	53                   	push   ebx
c001716f:	e8 a4 fd ff ff       	call   c0016f18 <VgaText::scrollScreen()>
c0017174:	83 c4 10             	add    esp,0x10
c0017177:	89 f0                	mov    eax,esi
c0017179:	84 c0                	test   al,al
c001717b:	74 0c                	je     c0017189 <VgaText::incrementCursor(bool)+0x4f>
c001717d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017181:	5a                   	pop    edx
c0017182:	5b                   	pop    ebx
c0017183:	5e                   	pop    esi
c0017184:	e9 99 fc ff ff       	jmp    c0016e22 <VgaText::updateCursor()>
c0017189:	58                   	pop    eax
c001718a:	5b                   	pop    ebx
c001718b:	5e                   	pop    esi
c001718c:	c3                   	ret    
c001718d:	90                   	nop

c001718e <VgaText::decrementCursor(bool)>:
c001718e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017192:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017196:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017199:	85 c0                	test   eax,eax
c001719b:	74 04                	je     c00171a1 <VgaText::decrementCursor(bool)+0x13>
c001719d:	48                   	dec    eax
c001719e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00171a1:	84 c9                	test   cl,cl
c00171a3:	74 09                	je     c00171ae <VgaText::decrementCursor(bool)+0x20>
c00171a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00171a9:	e9 74 fc ff ff       	jmp    c0016e22 <VgaText::updateCursor()>
c00171ae:	c3                   	ret    
c00171af:	90                   	nop

c00171b0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00171b0:	53                   	push   ebx
c00171b1:	83 ec 08             	sub    esp,0x8
c00171b4:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00171b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00171c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00171c5:	83 f8 07             	cmp    eax,0x7
c00171c8:	75 21                	jne    c00171eb <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00171ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00171d2:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00171da:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00171e2:	83 c4 08             	add    esp,0x8
c00171e5:	5b                   	pop    ebx
c00171e6:	e9 18 3b 00 00       	jmp    c001ad03 <Krnl::beep(int, int, bool)>
c00171eb:	83 f8 0d             	cmp    eax,0xd
c00171ee:	75 09                	jne    c00171f9 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00171f0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00171f7:	eb 2d                	jmp    c0017226 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00171f9:	83 f8 0a             	cmp    eax,0xa
c00171fc:	75 31                	jne    c001722f <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00171fe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017201:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017208:	8d 50 01             	lea    edx,[eax+0x1]
c001720b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001720e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017211:	75 0f                	jne    c0017222 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0017213:	83 ec 0c             	sub    esp,0xc
c0017216:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017219:	53                   	push   ebx
c001721a:	e8 f9 fc ff ff       	call   c0016f18 <VgaText::scrollScreen()>
c001721f:	83 c4 10             	add    esp,0x10
c0017222:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017226:	83 c4 08             	add    esp,0x8
c0017229:	5b                   	pop    ebx
c001722a:	e9 f3 fb ff ff       	jmp    c0016e22 <VgaText::updateCursor()>
c001722f:	83 f8 08             	cmp    eax,0x8
c0017232:	75 25                	jne    c0017259 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0017234:	50                   	push   eax
c0017235:	50                   	push   eax
c0017236:	6a 01                	push   0x1
c0017238:	53                   	push   ebx
c0017239:	e8 50 ff ff ff       	call   c001718e <VgaText::decrementCursor(bool)>
c001723e:	5a                   	pop    edx
c001723f:	59                   	pop    ecx
c0017240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017243:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017246:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017249:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001724c:	6a 20                	push   0x20
c001724e:	53                   	push   ebx
c001724f:	e8 66 fd ff ff       	call   c0016fba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017254:	83 c4 28             	add    esp,0x28
c0017257:	5b                   	pop    ebx
c0017258:	c3                   	ret    
c0017259:	83 ec 08             	sub    esp,0x8
c001725c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001725f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017262:	51                   	push   ecx
c0017263:	52                   	push   edx
c0017264:	50                   	push   eax
c0017265:	53                   	push   ebx
c0017266:	e8 4f fd ff ff       	call   c0016fba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001726b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001726f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0017277:	83 c4 28             	add    esp,0x28
c001727a:	5b                   	pop    ebx
c001727b:	e9 ba fe ff ff       	jmp    c001713a <VgaText::incrementCursor(bool)>

c0017280 <VgaText::putchar(char)>:
c0017280:	57                   	push   edi
c0017281:	56                   	push   esi
c0017282:	53                   	push   ebx
c0017283:	83 ec 10             	sub    esp,0x10
c0017286:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001728a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001728e:	89 f8                	mov    eax,edi
c0017290:	0f be c0             	movsx  eax,al
c0017293:	83 f8 5b             	cmp    eax,0x5b
c0017296:	75 18                	jne    c00172b0 <VgaText::putchar(char)+0x30>
c0017298:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001729c:	74 20                	je     c00172be <VgaText::putchar(char)+0x3e>
c001729e:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00172a4:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00172ab:	e9 c1 00 00 00       	jmp    c0017371 <VgaText::putchar(char)+0xf1>
c00172b0:	83 f8 1b             	cmp    eax,0x1b
c00172b3:	75 09                	jne    c00172be <VgaText::putchar(char)+0x3e>
c00172b5:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00172b9:	e9 b3 00 00 00       	jmp    c0017371 <VgaText::putchar(char)+0xf1>
c00172be:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00172c1:	84 c9                	test   cl,cl
c00172c3:	0f 84 98 00 00 00    	je     c0017361 <VgaText::putchar(char)+0xe1>
c00172c9:	8d 77 c0             	lea    esi,[edi-0x40]
c00172cc:	89 f2                	mov    edx,esi
c00172ce:	80 fa 3e             	cmp    dl,0x3e
c00172d1:	77 78                	ja     c001734b <VgaText::putchar(char)+0xcb>
c00172d3:	83 f8 6d             	cmp    eax,0x6d
c00172d6:	75 47                	jne    c001731f <VgaText::putchar(char)+0x9f>
c00172d8:	31 f6                	xor    esi,esi
c00172da:	31 d2                	xor    edx,edx
c00172dc:	31 c0                	xor    eax,eax
c00172de:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00172e1:	7e 2d                	jle    c0017310 <VgaText::putchar(char)+0x90>
c00172e3:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00172e8:	83 fa 3b             	cmp    edx,0x3b
c00172eb:	75 17                	jne    c0017304 <VgaText::putchar(char)+0x84>
c00172ed:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00172f1:	50                   	push   eax
c00172f2:	53                   	push   ebx
c00172f3:	e8 40 fb ff ff       	call   c0016e38 <VgaText::doANSI_SGR(int)>
c00172f8:	59                   	pop    ecx
c00172f9:	31 d2                	xor    edx,edx
c00172fb:	5f                   	pop    edi
c00172fc:	31 c0                	xor    eax,eax
c00172fe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017302:	eb 09                	jmp    c001730d <VgaText::putchar(char)+0x8d>
c0017304:	6b c0 0a             	imul   eax,eax,0xa
c0017307:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001730b:	88 ca                	mov    dl,cl
c001730d:	46                   	inc    esi
c001730e:	eb ce                	jmp    c00172de <VgaText::putchar(char)+0x5e>
c0017310:	84 d2                	test   dl,dl
c0017312:	74 2f                	je     c0017343 <VgaText::putchar(char)+0xc3>
c0017314:	50                   	push   eax
c0017315:	53                   	push   ebx
c0017316:	e8 1d fb ff ff       	call   c0016e38 <VgaText::doANSI_SGR(int)>
c001731b:	58                   	pop    eax
c001731c:	5a                   	pop    edx
c001731d:	eb 24                	jmp    c0017343 <VgaText::putchar(char)+0xc3>
c001731f:	83 f8 4a             	cmp    eax,0x4a
c0017322:	75 1f                	jne    c0017343 <VgaText::putchar(char)+0xc3>
c0017324:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0017328:	75 19                	jne    c0017343 <VgaText::putchar(char)+0xc3>
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	53                   	push   ebx
c001732e:	e8 89 fd ff ff       	call   c00170bc <VgaText::clearScreen()>
c0017333:	83 c4 0c             	add    esp,0xc
c0017336:	6a 00                	push   0x0
c0017338:	6a 00                	push   0x0
c001733a:	53                   	push   ebx
c001733b:	e8 1a fd ff ff       	call   c001705a <VgaText::setCursor(int, int)>
c0017340:	83 c4 10             	add    esp,0x10
c0017343:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017349:	eb 26                	jmp    c0017371 <VgaText::putchar(char)+0xf1>
c001734b:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001734e:	83 f8 0e             	cmp    eax,0xe
c0017351:	7f 1e                	jg     c0017371 <VgaText::putchar(char)+0xf1>
c0017353:	8d 48 01             	lea    ecx,[eax+0x1]
c0017356:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017359:	89 f9                	mov    ecx,edi
c001735b:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c001735f:	eb 10                	jmp    c0017371 <VgaText::putchar(char)+0xf1>
c0017361:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017364:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017367:	50                   	push   eax
c0017368:	53                   	push   ebx
c0017369:	e8 42 fe ff ff       	call   c00171b0 <VgaText::putchar(char, VgaColour, VgaColour)>
c001736e:	83 c4 10             	add    esp,0x10
c0017371:	83 c4 10             	add    esp,0x10
c0017374:	5b                   	pop    ebx
c0017375:	5e                   	pop    esi
c0017376:	5f                   	pop    edi
c0017377:	c3                   	ret    

c0017378 <VgaText::putx(unsigned int)>:
c0017378:	57                   	push   edi
c0017379:	b9 11 00 00 00       	mov    ecx,0x11
c001737e:	56                   	push   esi
c001737f:	be 0a 13 03 c0       	mov    esi,0xc003130a
c0017384:	53                   	push   ebx
c0017385:	83 ec 20             	sub    esp,0x20
c0017388:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001738c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017390:	fc                   	cld    
c0017391:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017393:	be 08 00 00 00       	mov    esi,0x8
c0017398:	50                   	push   eax
c0017399:	50                   	push   eax
c001739a:	89 d8                	mov    eax,ebx
c001739c:	c1 e3 04             	shl    ebx,0x4
c001739f:	c1 e8 1c             	shr    eax,0x1c
c00173a2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00173a7:	50                   	push   eax
c00173a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00173ac:	e8 cf fe ff ff       	call   c0017280 <VgaText::putchar(char)>
c00173b1:	83 c4 10             	add    esp,0x10
c00173b4:	4e                   	dec    esi
c00173b5:	75 e1                	jne    c0017398 <VgaText::putx(unsigned int)+0x20>
c00173b7:	83 c4 20             	add    esp,0x20
c00173ba:	5b                   	pop    ebx
c00173bb:	5e                   	pop    esi
c00173bc:	5f                   	pop    edi
c00173bd:	c3                   	ret    

c00173be <VgaText::puts(char const*)>:
c00173be:	53                   	push   ebx
c00173bf:	83 ec 08             	sub    esp,0x8
c00173c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00173c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00173c9:	85 c0                	test   eax,eax
c00173cb:	74 12                	je     c00173df <VgaText::puts(char const*)+0x21>
c00173cd:	43                   	inc    ebx
c00173ce:	51                   	push   ecx
c00173cf:	51                   	push   ecx
c00173d0:	50                   	push   eax
c00173d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173d5:	e8 a6 fe ff ff       	call   c0017280 <VgaText::putchar(char)>
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	eb e7                	jmp    c00173c6 <VgaText::puts(char const*)+0x8>
c00173df:	83 c4 08             	add    esp,0x8
c00173e2:	5b                   	pop    ebx
c00173e3:	c3                   	ret    

c00173e4 <VgaText::write(unsigned long long, void*, int*)>:
c00173e4:	55                   	push   ebp
c00173e5:	57                   	push   edi
c00173e6:	56                   	push   esi
c00173e7:	53                   	push   ebx
c00173e8:	83 ec 0c             	sub    esp,0xc
c00173eb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00173ef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00173f3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00173f7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00173fe:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0017401:	39 eb                	cmp    ebx,ebp
c0017403:	74 13                	je     c0017418 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0017405:	43                   	inc    ebx
c0017406:	50                   	push   eax
c0017407:	50                   	push   eax
c0017408:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001740c:	50                   	push   eax
c001740d:	56                   	push   esi
c001740e:	e8 6d fe ff ff       	call   c0017280 <VgaText::putchar(char)>
c0017413:	83 c4 10             	add    esp,0x10
c0017416:	eb e9                	jmp    c0017401 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017418:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001741f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017423:	89 38                	mov    DWORD PTR [eax],edi
c0017425:	83 c4 0c             	add    esp,0xc
c0017428:	31 c0                	xor    eax,eax
c001742a:	5b                   	pop    ebx
c001742b:	5e                   	pop    esi
c001742c:	5f                   	pop    edi
c001742d:	5d                   	pop    ebp
c001742e:	c3                   	ret    
c001742f:	90                   	nop

c0017430 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017430:	55                   	push   ebp
c0017431:	57                   	push   edi
c0017432:	56                   	push   esi
c0017433:	53                   	push   ebx
c0017434:	83 ec 0c             	sub    esp,0xc
c0017437:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001743b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017440:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0017447:	50                   	push   eax
c0017448:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001744d:	50                   	push   eax
c001744e:	e8 b3 fa ff ff       	call   c0016f06 <VgaText::combineColours(unsigned char, unsigned char)>
c0017453:	5a                   	pop    edx
c0017454:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017458:	59                   	pop    ecx
c0017459:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001745c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017460:	0f b7 f6             	movzx  esi,si
c0017463:	0f b6 e8             	movzx  ebp,al
c0017466:	01 f6                	add    esi,esi
c0017468:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001746b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001746e:	85 c0                	test   eax,eax
c0017470:	0f 84 ef 00 00 00    	je     c0017565 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0017476:	83 f8 0d             	cmp    eax,0xd
c0017479:	75 0c                	jne    c0017487 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001747b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017482:	e9 d8 00 00 00       	jmp    c001755f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017487:	83 f8 0a             	cmp    eax,0xa
c001748a:	75 44                	jne    c00174d0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c001748c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001748f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017496:	8d 48 01             	lea    ecx,[eax+0x1]
c0017499:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001749c:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c001749f:	75 0f                	jne    c00174b0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c00174a1:	83 ec 0c             	sub    esp,0xc
c00174a4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00174a7:	53                   	push   ebx
c00174a8:	e8 6b fa ff ff       	call   c0016f18 <VgaText::scrollScreen()>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	83 ec 0c             	sub    esp,0xc
c00174b3:	53                   	push   ebx
c00174b4:	e8 69 f9 ff ff       	call   c0016e22 <VgaText::updateCursor()>
c00174b9:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00174bd:	83 c4 10             	add    esp,0x10
c00174c0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00174c3:	0f b7 f6             	movzx  esi,si
c00174c6:	01 f6                	add    esi,esi
c00174c8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00174cb:	e9 8f 00 00 00       	jmp    c001755f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174d0:	83 f8 08             	cmp    eax,0x8
c00174d3:	75 34                	jne    c0017509 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00174d5:	51                   	push   ecx
c00174d6:	51                   	push   ecx
c00174d7:	6a 01                	push   0x1
c00174d9:	53                   	push   ebx
c00174da:	e8 af fc ff ff       	call   c001718e <VgaText::decrementCursor(bool)>
c00174df:	5e                   	pop    esi
c00174e0:	58                   	pop    eax
c00174e1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00174e4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00174e7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00174ea:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00174ed:	6a 20                	push   0x20
c00174ef:	53                   	push   ebx
c00174f0:	e8 c5 fa ff ff       	call   c0016fba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00174f5:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00174f9:	83 c4 20             	add    esp,0x20
c00174fc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00174ff:	0f b7 f6             	movzx  esi,si
c0017502:	01 f6                	add    esi,esi
c0017504:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017507:	eb 56                	jmp    c001755f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017509:	52                   	push   edx
c001750a:	52                   	push   edx
c001750b:	55                   	push   ebp
c001750c:	50                   	push   eax
c001750d:	e8 98 fa ff ff       	call   c0016faa <VgaText::combineCharAndColour(char, unsigned char)>
c0017512:	83 c4 10             	add    esp,0x10
c0017515:	66 89 06             	mov    WORD PTR [esi],ax
c0017518:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c001751e:	75 1d                	jne    c001753d <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017520:	83 ec 0c             	sub    esp,0xc
c0017523:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017526:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017529:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001752d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017531:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017534:	50                   	push   eax
c0017535:	e8 fa 07 01 00       	call   c0027d34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001753a:	83 c4 20             	add    esp,0x20
c001753d:	83 c6 02             	add    esi,0x2
c0017540:	50                   	push   eax
c0017541:	50                   	push   eax
c0017542:	6a 00                	push   0x0
c0017544:	53                   	push   ebx
c0017545:	e8 f0 fb ff ff       	call   c001713a <VgaText::incrementCursor(bool)>
c001754a:	83 c4 10             	add    esp,0x10
c001754d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0017551:	75 0c                	jne    c001755f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017553:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017557:	0f b7 f6             	movzx  esi,si
c001755a:	01 f6                	add    esi,esi
c001755c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001755f:	47                   	inc    edi
c0017560:	e9 06 ff ff ff       	jmp    c001746b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017565:	83 ec 0c             	sub    esp,0xc
c0017568:	53                   	push   ebx
c0017569:	e8 b4 f8 ff ff       	call   c0016e22 <VgaText::updateCursor()>
c001756e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0017575:	83 c4 1c             	add    esp,0x1c
c0017578:	5b                   	pop    ebx
c0017579:	5e                   	pop    esi
c001757a:	5f                   	pop    edi
c001757b:	5d                   	pop    ebp
c001757c:	c3                   	ret    
c001757d:	90                   	nop

c001757e <VgaText::VgaText(char const*)>:
c001757e:	56                   	push   esi
c001757f:	53                   	push   ebx
c0017580:	83 ec 04             	sub    esp,0x4
c0017583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017587:	83 ec 08             	sub    esp,0x8
c001758a:	6a 00                	push   0x0
c001758c:	50                   	push   eax
c001758d:	e8 44 05 00 00       	call   c0017ad6 <UnixFile::UnixFile(int)>
c0017592:	83 c4 10             	add    esp,0x10
c0017595:	ba 30 13 03 c0       	mov    edx,0xc0031330
c001759a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759e:	89 10                	mov    DWORD PTR [eax],edx
c00175a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00175ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175af:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00175b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ba:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00175be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00175c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ca:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00175d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00175dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00175e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175eb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00175f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f6:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00175fd:	83 ec 0c             	sub    esp,0xc
c0017600:	6a 01                	push   0x1
c0017602:	e8 1e 09 00 00       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c0017607:	83 c4 10             	add    esp,0x10
c001760a:	89 c2                	mov    edx,eax
c001760c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017610:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017613:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0017619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017620:	89 c6                	mov    esi,eax
c0017622:	e8 b0 f0 ff ff       	call   c00166d7 <Phys::allocatePage()>
c0017627:	68 05 0c 00 00       	push   0xc05
c001762c:	56                   	push   esi
c001762d:	50                   	push   eax
c001762e:	53                   	push   ebx
c001762f:	e8 04 10 00 00       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017634:	83 c4 10             	add    esp,0x10
c0017637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001763b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001763e:	83 ec 04             	sub    esp,0x4
c0017641:	68 a0 0f 00 00       	push   0xfa0
c0017646:	6a 00                	push   0x0
c0017648:	50                   	push   eax
c0017649:	e8 a2 8e fe ff       	call   c00004f0 <memset>
c001764e:	83 c4 10             	add    esp,0x10
c0017651:	83 ec 04             	sub    esp,0x4
c0017654:	6a 00                	push   0x0
c0017656:	6a 07                	push   0x7
c0017658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001765c:	e8 6b f8 ff ff       	call   c0016ecc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	83 ec 04             	sub    esp,0x4
c0017667:	6a 00                	push   0x0
c0017669:	6a 00                	push   0x0
c001766b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001766f:	e8 e6 f9 ff ff       	call   c001705a <VgaText::setCursor(int, int)>
c0017674:	83 c4 10             	add    esp,0x10
c0017677:	83 ec 0c             	sub    esp,0xc
c001767a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001767e:	e8 39 fa ff ff       	call   c00170bc <VgaText::clearScreen()>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001768a:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001768e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017692:	05 82 00 00 00       	add    eax,0x82
c0017697:	83 ec 04             	sub    esp,0x4
c001769a:	68 80 00 00 00       	push   0x80
c001769f:	6a 00                	push   0x0
c00176a1:	50                   	push   eax
c00176a2:	e8 49 8e fe ff       	call   c00004f0 <memset>
c00176a7:	83 c4 10             	add    esp,0x10
c00176aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176ae:	05 02 01 00 00       	add    eax,0x102
c00176b3:	83 ec 04             	sub    esp,0x4
c00176b6:	68 80 00 00 00       	push   0x80
c00176bb:	6a 00                	push   0x0
c00176bd:	50                   	push   eax
c00176be:	e8 2d 8e fe ff       	call   c00004f0 <memset>
c00176c3:	83 c4 10             	add    esp,0x10
c00176c6:	90                   	nop
c00176c7:	83 c4 04             	add    esp,0x4
c00176ca:	5b                   	pop    ebx
c00176cb:	5e                   	pop    esi
c00176cc:	c3                   	ret    
c00176cd:	90                   	nop

c00176ce <VgaText::receiveKey(unsigned char)>:
c00176ce:	55                   	push   ebp
c00176cf:	57                   	push   edi
c00176d0:	56                   	push   esi
c00176d1:	53                   	push   ebx
c00176d2:	83 ec 2c             	sub    esp,0x2c
c00176d5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00176d9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176dd:	89 ef                	mov    edi,ebp
c00176df:	81 e7 ff 00 00 00    	and    edi,0xff
c00176e5:	0f 84 66 01 00 00    	je     c0017851 <VgaText::receiveKey(unsigned char)+0x183>
c00176eb:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00176f1:	83 ff 08             	cmp    edi,0x8
c00176f4:	75 73                	jne    c0017769 <VgaText::receiveKey(unsigned char)+0x9b>
c00176f6:	83 ec 0c             	sub    esp,0xc
c00176f9:	56                   	push   esi
c00176fa:	e8 71 8e fe ff       	call   c0000570 <strlen>
c00176ff:	83 c4 10             	add    esp,0x10
c0017702:	85 c0                	test   eax,eax
c0017704:	0f 84 02 01 00 00    	je     c001780c <VgaText::receiveKey(unsigned char)+0x13e>
c001770a:	50                   	push   eax
c001770b:	50                   	push   eax
c001770c:	6a 08                	push   0x8
c001770e:	53                   	push   ebx
c001770f:	e8 6c fb ff ff       	call   c0017280 <VgaText::putchar(char)>
c0017714:	89 34 24             	mov    DWORD PTR [esp],esi
c0017717:	e8 54 8e fe ff       	call   c0000570 <strlen>
c001771c:	83 c4 10             	add    esp,0x10
c001771f:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0017727:	83 fa 0d             	cmp    edx,0xd
c001772a:	89 d0                	mov    eax,edx
c001772c:	0f 95 c1             	setne  cl
c001772f:	83 fa 1f             	cmp    edx,0x1f
c0017732:	0f 9e c2             	setle  dl
c0017735:	0f b6 d2             	movzx  edx,dl
c0017738:	85 ca                	test   edx,ecx
c001773a:	74 17                	je     c0017753 <VgaText::receiveKey(unsigned char)+0x85>
c001773c:	83 e8 08             	sub    eax,0x8
c001773f:	3c 02                	cmp    al,0x2
c0017741:	76 10                	jbe    c0017753 <VgaText::receiveKey(unsigned char)+0x85>
c0017743:	55                   	push   ebp
c0017744:	55                   	push   ebp
c0017745:	68 1b 13 03 c0       	push   0xc003131b
c001774a:	53                   	push   ebx
c001774b:	e8 6e fc ff ff       	call   c00173be <VgaText::puts(char const*)>
c0017750:	83 c4 10             	add    esp,0x10
c0017753:	83 ec 0c             	sub    esp,0xc
c0017756:	56                   	push   esi
c0017757:	e8 14 8e fe ff       	call   c0000570 <strlen>
c001775c:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017764:	e9 a0 00 00 00       	jmp    c0017809 <VgaText::receiveKey(unsigned char)+0x13b>
c0017769:	83 ec 0c             	sub    esp,0xc
c001776c:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017772:	50                   	push   eax
c0017773:	e8 f8 8d fe ff       	call   c0000570 <strlen>
c0017778:	89 34 24             	mov    DWORD PTR [esp],esi
c001777b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001777f:	e8 ec 8d fe ff       	call   c0000570 <strlen>
c0017784:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017788:	83 c4 10             	add    esp,0x10
c001778b:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001778f:	3d 80 00 00 00       	cmp    eax,0x80
c0017794:	0f 87 b7 00 00 00    	ja     c0017851 <VgaText::receiveKey(unsigned char)+0x183>
c001779a:	8d 45 ff             	lea    eax,[ebp-0x1]
c001779d:	8d 55 f7             	lea    edx,[ebp-0x9]
c00177a0:	3c 1e                	cmp    al,0x1e
c00177a2:	0f 96 c0             	setbe  al
c00177a5:	80 fa 01             	cmp    dl,0x1
c00177a8:	0f 97 c2             	seta   dl
c00177ab:	0f b6 d2             	movzx  edx,dl
c00177ae:	85 c2                	test   edx,eax
c00177b0:	74 2e                	je     c00177e0 <VgaText::receiveKey(unsigned char)+0x112>
c00177b2:	83 ff 0d             	cmp    edi,0xd
c00177b5:	74 29                	je     c00177e0 <VgaText::receiveKey(unsigned char)+0x112>
c00177b7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00177ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177bd:	68 21 13 03 c0       	push   0xc0031321
c00177c2:	53                   	push   ebx
c00177c3:	e8 68 fc ff ff       	call   c0017430 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00177c8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00177cb:	8d 45 40             	lea    eax,[ebp+0x40]
c00177ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177d1:	0f b6 c0             	movzx  eax,al
c00177d4:	50                   	push   eax
c00177d5:	53                   	push   ebx
c00177d6:	e8 d5 f9 ff ff       	call   c00171b0 <VgaText::putchar(char, VgaColour, VgaColour)>
c00177db:	83 c4 20             	add    esp,0x20
c00177de:	eb 11                	jmp    c00177f1 <VgaText::receiveKey(unsigned char)+0x123>
c00177e0:	89 e8                	mov    eax,ebp
c00177e2:	51                   	push   ecx
c00177e3:	0f be c0             	movsx  eax,al
c00177e6:	51                   	push   ecx
c00177e7:	50                   	push   eax
c00177e8:	53                   	push   ebx
c00177e9:	e8 92 fa ff ff       	call   c0017280 <VgaText::putchar(char)>
c00177ee:	83 c4 10             	add    esp,0x10
c00177f1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177f6:	89 e8                	mov    eax,ebp
c00177f8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00177fc:	52                   	push   edx
c00177fd:	52                   	push   edx
c00177fe:	8d 44 24 26          	lea    eax,[esp+0x26]
c0017802:	50                   	push   eax
c0017803:	56                   	push   esi
c0017804:	e8 37 90 fe ff       	call   c0000840 <strcat>
c0017809:	83 c4 10             	add    esp,0x10
c001780c:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0017812:	b0 01                	mov    al,0x1
c0017814:	83 ff 1c             	cmp    edi,0x1c
c0017817:	77 0e                	ja     c0017827 <VgaText::receiveKey(unsigned char)+0x159>
c0017819:	b8 08 04 00 10       	mov    eax,0x10000408
c001781e:	89 f9                	mov    ecx,edi
c0017820:	d3 e8                	shr    eax,cl
c0017822:	f7 d0                	not    eax
c0017824:	83 e0 01             	and    eax,0x1
c0017827:	84 c0                	test   al,al
c0017829:	74 04                	je     c001782f <VgaText::receiveKey(unsigned char)+0x161>
c001782b:	84 d2                	test   dl,dl
c001782d:	74 22                	je     c0017851 <VgaText::receiveKey(unsigned char)+0x183>
c001782f:	81 c3 02 01 00 00    	add    ebx,0x102
c0017835:	50                   	push   eax
c0017836:	50                   	push   eax
c0017837:	56                   	push   esi
c0017838:	53                   	push   ebx
c0017839:	e8 02 90 fe ff       	call   c0000840 <strcat>
c001783e:	83 c4 0c             	add    esp,0xc
c0017841:	68 80 00 00 00       	push   0x80
c0017846:	6a 00                	push   0x0
c0017848:	56                   	push   esi
c0017849:	e8 a2 8c fe ff       	call   c00004f0 <memset>
c001784e:	83 c4 10             	add    esp,0x10
c0017851:	83 c4 2c             	add    esp,0x2c
c0017854:	5b                   	pop    ebx
c0017855:	5e                   	pop    esi
c0017856:	5f                   	pop    edi
c0017857:	5d                   	pop    ebp
c0017858:	c3                   	ret    
c0017859:	90                   	nop

c001785a <VgaText::doUpdate()>:
c001785a:	c3                   	ret    
c001785b:	90                   	nop

c001785c <TSS::TSS()>:
c001785c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017860:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017867:	90                   	nop
c0017868:	c3                   	ret    
c0017869:	90                   	nop
c001786a:	66 90                	xchg   ax,ax

c001786c <TSS::setESP(unsigned long)>:
c001786c:	55                   	push   ebp
c001786d:	89 e5                	mov    ebp,esp
c001786f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017872:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017875:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017878:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001787b:	90                   	nop
c001787c:	5d                   	pop    ebp
c001787d:	c3                   	ret    
c001787e:	66 90                	xchg   ax,ax

c0017880 <TSS::flush()>:
c0017880:	55                   	push   ebp
c0017881:	89 e5                	mov    ebp,esp
c0017883:	83 ec 10             	sub    esp,0x10
c0017886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017889:	8b 00                	mov    eax,DWORD PTR [eax]
c001788b:	83 c8 03             	or     eax,0x3
c001788e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017892:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017896:	66 89 d0             	mov    ax,dx
c0017899:	0f 00 d8             	ltr    ax
c001789c:	90                   	nop
c001789d:	c9                   	leave  
c001789e:	c3                   	ret    
c001789f:	90                   	nop

c00178a0 <TSS::setup(unsigned long, unsigned long)>:
c00178a0:	55                   	push   ebp
c00178a1:	89 e5                	mov    ebp,esp
c00178a3:	83 ec 18             	sub    esp,0x18
c00178a6:	83 ec 0c             	sub    esp,0xc
c00178a9:	6a 68                	push   0x68
c00178ab:	e8 0e eb ff ff       	call   c00163be <malloc>
c00178b0:	83 c4 10             	add    esp,0x10
c00178b3:	89 c2                	mov    edx,eax
c00178b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00178bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178c1:	83 ec 04             	sub    esp,0x4
c00178c4:	6a 68                	push   0x68
c00178c6:	6a 00                	push   0x0
c00178c8:	50                   	push   eax
c00178c9:	e8 22 8c fe ff       	call   c00004f0 <memset>
c00178ce:	83 c4 10             	add    esp,0x10
c00178d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178d7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00178dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178e3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00178e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00178f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00178f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178fb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017904:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017907:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001790d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017910:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017913:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001791c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001791f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001792b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017934:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017937:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001793d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017940:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017943:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017946:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001794c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001794f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017952:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017958:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001795b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017965:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017968:	0f 20 da             	mov    edx,cr3
c001796b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001796e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017971:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017977:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001797a:	83 ec 08             	sub    esp,0x8
c001797d:	50                   	push   eax
c001797e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017981:	50                   	push   eax
c0017982:	e8 a3 e2 ff ff       	call   c0015c2a <GDTEntry::setBase(unsigned int)>
c0017987:	83 c4 10             	add    esp,0x10
c001798a:	83 ec 08             	sub    esp,0x8
c001798d:	6a 68                	push   0x68
c001798f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017992:	50                   	push   eax
c0017993:	e8 ae e2 ff ff       	call   c0015c46 <GDTEntry::setLimit(unsigned int)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001799f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00179a2:	83 e0 0f             	and    eax,0xf
c00179a5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00179a8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00179ab:	83 c8 40             	or     eax,0x40
c00179ae:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00179b1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00179b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179bc:	05 78 01 00 00       	add    eax,0x178
c00179c1:	83 ec 04             	sub    esp,0x4
c00179c4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00179c7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00179ca:	50                   	push   eax
c00179cb:	e8 aa e2 ff ff       	call   c0015c7a <GDT::addEntry(GDTEntry)>
c00179d0:	83 c4 10             	add    esp,0x10
c00179d3:	89 c2                	mov    edx,eax
c00179d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179d8:	89 10                	mov    DWORD PTR [eax],edx
c00179da:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00179df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179e5:	05 78 01 00 00       	add    eax,0x178
c00179ea:	83 ec 0c             	sub    esp,0xc
c00179ed:	50                   	push   eax
c00179ee:	e8 b1 e2 ff ff       	call   c0015ca4 <GDT::flush()>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00179fb:	c9                   	leave  
c00179fc:	c3                   	ret    
c00179fd:	90                   	nop

c00179fe <ReservedFilename::read(unsigned long long, void*, int*)>:
c00179fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a09:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017a0e:	75 08                	jne    c0017a18 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017a10:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017a16:	eb 38                	jmp    c0017a50 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017a18:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017a1d:	75 17                	jne    c0017a36 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017a1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a27:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a2d:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a33:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017a36:	89 c1                	mov    ecx,eax
c0017a38:	83 e1 fd             	and    ecx,0xfffffffd
c0017a3b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017a41:	74 cd                	je     c0017a10 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a43:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017a48:	83 e0 ef             	and    eax,0xffffffef
c0017a4b:	83 f8 08             	cmp    eax,0x8
c0017a4e:	76 c0                	jbe    c0017a10 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a50:	31 c0                	xor    eax,eax
c0017a52:	c3                   	ret    
c0017a53:	90                   	nop

c0017a54 <ReservedFilename::isAtty()>:
c0017a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a58:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a5b:	31 c0                	xor    eax,eax
c0017a5d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017a63:	74 09                	je     c0017a6e <ReservedFilename::isAtty()+0x1a>
c0017a65:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017a6b:	0f 94 c0             	sete   al
c0017a6e:	c3                   	ret    
c0017a6f:	90                   	nop

c0017a70 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a7f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017a84:	75 08                	jne    c0017a8e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017a86:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017a8c:	eb 3d                	jmp    c0017acb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017a8e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017a93:	75 17                	jne    c0017aac <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017a95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a9d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aa3:	8b 10                	mov    edx,DWORD PTR [eax]
c0017aa5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017aa9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017aac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017ab1:	75 04                	jne    c0017ab7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017ab3:	89 0a                	mov    DWORD PTR [edx],ecx
c0017ab5:	eb 14                	jmp    c0017acb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017ab7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017abc:	74 c8                	je     c0017a86 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017abe:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017ac3:	83 e0 ef             	and    eax,0xffffffef
c0017ac6:	83 f8 08             	cmp    eax,0x8
c0017ac9:	76 bb                	jbe    c0017a86 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017acb:	31 c0                	xor    eax,eax
c0017acd:	c3                   	ret    

c0017ace <UnixFile::getFileDescriptor()>:
c0017ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ad2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ad5:	c3                   	ret    

c0017ad6 <UnixFile::UnixFile(int)>:
c0017ad6:	53                   	push   ebx
c0017ad7:	83 ec 28             	sub    esp,0x28
c0017ada:	ba f8 13 03 c0       	mov    edx,0xc00313f8
c0017adf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ae3:	89 10                	mov    DWORD PTR [eax],edx
c0017ae5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017aed:	0f 8f 90 01 00 00    	jg     c0017c83 <UnixFile::UnixFile(int)+0x1ad>
c0017af3:	a1 60 3c 03 c0       	mov    eax,ds:0xc0033c60
c0017af8:	8d 50 01             	lea    edx,[eax+0x1]
c0017afb:	89 15 60 3c 03 c0    	mov    DWORD PTR ds:0xc0033c60,edx
c0017b01:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b05:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017b08:	83 ec 08             	sub    esp,0x8
c0017b0b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017b0f:	68 98 aa 03 c0       	push   0xc003aa98
c0017b14:	e8 5f 6e 01 00       	call   c002e978 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017b19:	83 c4 10             	add    esp,0x10
c0017b1c:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017b21:	83 f0 01             	xor    eax,0x1
c0017b24:	0f b6 c0             	movzx  eax,al
c0017b27:	85 c0                	test   eax,eax
c0017b29:	0f 84 55 01 00 00    	je     c0017c84 <UnixFile::UnixFile(int)+0x1ae>
c0017b2f:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017b36:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017b3e:	83 ec 0c             	sub    esp,0xc
c0017b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b45:	e8 74 e8 ff ff       	call   c00163be <malloc>
c0017b4a:	83 c4 10             	add    esp,0x10
c0017b4d:	89 c3                	mov    ebx,eax
c0017b4f:	83 ec 08             	sub    esp,0x8
c0017b52:	68 03 ff ff 0f       	push   0xfffff03
c0017b57:	53                   	push   ebx
c0017b58:	e8 2d 01 00 00       	call   c0017c8a <ReservedFilename::ReservedFilename(int)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017b66:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017b6e:	83 ec 0c             	sub    esp,0xc
c0017b71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b75:	e8 44 e8 ff ff       	call   c00163be <malloc>
c0017b7a:	83 c4 10             	add    esp,0x10
c0017b7d:	89 c3                	mov    ebx,eax
c0017b7f:	83 ec 08             	sub    esp,0x8
c0017b82:	68 01 ff ff 0f       	push   0xfffff01
c0017b87:	53                   	push   ebx
c0017b88:	e8 fd 00 00 00       	call   c0017c8a <ReservedFilename::ReservedFilename(int)>
c0017b8d:	83 c4 10             	add    esp,0x10
c0017b90:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017b96:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017b9e:	83 ec 0c             	sub    esp,0xc
c0017ba1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ba5:	e8 14 e8 ff ff       	call   c00163be <malloc>
c0017baa:	83 c4 10             	add    esp,0x10
c0017bad:	89 c3                	mov    ebx,eax
c0017baf:	83 ec 08             	sub    esp,0x8
c0017bb2:	68 00 ff ff 0f       	push   0xfffff00
c0017bb7:	53                   	push   ebx
c0017bb8:	e8 cd 00 00 00       	call   c0017c8a <ReservedFilename::ReservedFilename(int)>
c0017bbd:	83 c4 10             	add    esp,0x10
c0017bc0:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017bc6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017bce:	83 ec 0c             	sub    esp,0xc
c0017bd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bd5:	e8 e4 e7 ff ff       	call   c00163be <malloc>
c0017bda:	83 c4 10             	add    esp,0x10
c0017bdd:	89 c3                	mov    ebx,eax
c0017bdf:	83 ec 08             	sub    esp,0x8
c0017be2:	68 02 ff ff 0f       	push   0xfffff02
c0017be7:	53                   	push   ebx
c0017be8:	e8 9d 00 00 00       	call   c0017c8a <ReservedFilename::ReservedFilename(int)>
c0017bed:	83 c4 10             	add    esp,0x10
c0017bf0:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017bf6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017bfe:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017c03:	7f 7f                	jg     c0017c84 <UnixFile::UnixFile(int)+0x1ae>
c0017c05:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017c0d:	83 ec 0c             	sub    esp,0xc
c0017c10:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c14:	e8 a5 e7 ff ff       	call   c00163be <malloc>
c0017c19:	83 c4 10             	add    esp,0x10
c0017c1c:	89 c3                	mov    ebx,eax
c0017c1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c22:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017c27:	83 ec 08             	sub    esp,0x8
c0017c2a:	50                   	push   eax
c0017c2b:	53                   	push   ebx
c0017c2c:	e8 59 00 00 00       	call   c0017c8a <ReservedFilename::ReservedFilename(int)>
c0017c31:	83 c4 10             	add    esp,0x10
c0017c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c38:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017c3f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017c47:	83 ec 0c             	sub    esp,0xc
c0017c4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c4e:	e8 6b e7 ff ff       	call   c00163be <malloc>
c0017c53:	83 c4 10             	add    esp,0x10
c0017c56:	89 c3                	mov    ebx,eax
c0017c58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c5c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017c61:	83 ec 08             	sub    esp,0x8
c0017c64:	50                   	push   eax
c0017c65:	53                   	push   ebx
c0017c66:	e8 1f 00 00 00       	call   c0017c8a <ReservedFilename::ReservedFilename(int)>
c0017c6b:	83 c4 10             	add    esp,0x10
c0017c6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c72:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017c79:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017c7e:	e9 7b ff ff ff       	jmp    c0017bfe <UnixFile::UnixFile(int)+0x128>
c0017c83:	90                   	nop
c0017c84:	83 c4 28             	add    esp,0x28
c0017c87:	5b                   	pop    ebx
c0017c88:	c3                   	ret    
c0017c89:	90                   	nop

c0017c8a <ReservedFilename::ReservedFilename(int)>:
c0017c8a:	83 ec 0c             	sub    esp,0xc
c0017c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c91:	83 ec 08             	sub    esp,0x8
c0017c94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c98:	50                   	push   eax
c0017c99:	e8 38 fe ff ff       	call   c0017ad6 <UnixFile::UnixFile(int)>
c0017c9e:	83 c4 10             	add    esp,0x10
c0017ca1:	ba 14 14 03 c0       	mov    edx,0xc0031414
c0017ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017caa:	89 10                	mov    DWORD PTR [eax],edx
c0017cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017cb7:	90                   	nop
c0017cb8:	83 c4 0c             	add    esp,0xc
c0017cbb:	c3                   	ret    

c0017cbc <UnixFile::~UnixFile()>:
c0017cbc:	83 ec 1c             	sub    esp,0x1c
c0017cbf:	ba f8 13 03 c0       	mov    edx,0xc00313f8
c0017cc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cc8:	89 10                	mov    DWORD PTR [eax],edx
c0017cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cd1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017cd6:	7f 76                	jg     c0017d4e <UnixFile::~UnixFile()+0x92>
c0017cd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ce0:	83 ec 0c             	sub    esp,0xc
c0017ce3:	68 98 aa 03 c0       	push   0xc003aa98
c0017ce8:	e8 5f 6d 01 00       	call   c002ea4c <LinkedList<UnixFile>::getFirstElement()>
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cf4:	83 ec 0c             	sub    esp,0xc
c0017cf7:	68 98 aa 03 c0       	push   0xc003aa98
c0017cfc:	e8 53 6d 01 00       	call   c002ea54 <LinkedList<UnixFile>::removeFirst()>
c0017d01:	83 c4 10             	add    esp,0x10
c0017d04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d08:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017d0c:	74 43                	je     c0017d51 <UnixFile::~UnixFile()+0x95>
c0017d0e:	83 ec 08             	sub    esp,0x8
c0017d11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d15:	68 98 aa 03 c0       	push   0xc003aa98
c0017d1a:	e8 59 6c 01 00       	call   c002e978 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017d1f:	83 c4 10             	add    esp,0x10
c0017d22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d26:	8d 50 01             	lea    edx,[eax+0x1]
c0017d29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d2d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017d32:	0f 94 c0             	sete   al
c0017d35:	0f b6 c0             	movzx  eax,al
c0017d38:	85 c0                	test   eax,eax
c0017d3a:	74 a4                	je     c0017ce0 <UnixFile::~UnixFile()+0x24>
c0017d3c:	83 ec 0c             	sub    esp,0xc
c0017d3f:	68 d0 13 03 c0       	push   0xc00313d0
c0017d44:	e8 2d 85 00 00       	call   c0020276 <KePanic(char const*)>
c0017d49:	83 c4 10             	add    esp,0x10
c0017d4c:	eb 92                	jmp    c0017ce0 <UnixFile::~UnixFile()+0x24>
c0017d4e:	90                   	nop
c0017d4f:	eb 01                	jmp    c0017d52 <UnixFile::~UnixFile()+0x96>
c0017d51:	90                   	nop
c0017d52:	90                   	nop
c0017d53:	83 c4 1c             	add    esp,0x1c
c0017d56:	c3                   	ret    
c0017d57:	90                   	nop

c0017d58 <UnixFile::~UnixFile()>:
c0017d58:	83 ec 0c             	sub    esp,0xc
c0017d5b:	83 ec 0c             	sub    esp,0xc
c0017d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d62:	e8 55 ff ff ff       	call   c0017cbc <UnixFile::~UnixFile()>
c0017d67:	83 c4 10             	add    esp,0x10
c0017d6a:	83 ec 08             	sub    esp,0x8
c0017d6d:	6a 0c                	push   0xc
c0017d6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d73:	e8 b8 13 00 00       	call   c0019130 <operator delete(void*, unsigned long)>
c0017d78:	83 c4 10             	add    esp,0x10
c0017d7b:	83 c4 0c             	add    esp,0xc
c0017d7e:	c3                   	ret    
c0017d7f:	90                   	nop

c0017d80 <ReservedFilename::~ReservedFilename()>:
c0017d80:	83 ec 0c             	sub    esp,0xc
c0017d83:	ba 14 14 03 c0       	mov    edx,0xc0031414
c0017d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d8c:	89 10                	mov    DWORD PTR [eax],edx
c0017d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d92:	83 ec 0c             	sub    esp,0xc
c0017d95:	50                   	push   eax
c0017d96:	e8 21 ff ff ff       	call   c0017cbc <UnixFile::~UnixFile()>
c0017d9b:	83 c4 10             	add    esp,0x10
c0017d9e:	90                   	nop
c0017d9f:	83 c4 0c             	add    esp,0xc
c0017da2:	c3                   	ret    
c0017da3:	90                   	nop

c0017da4 <ReservedFilename::~ReservedFilename()>:
c0017da4:	83 ec 0c             	sub    esp,0xc
c0017da7:	83 ec 0c             	sub    esp,0xc
c0017daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dae:	e8 cd ff ff ff       	call   c0017d80 <ReservedFilename::~ReservedFilename()>
c0017db3:	83 c4 10             	add    esp,0x10
c0017db6:	83 ec 08             	sub    esp,0x8
c0017db9:	6a 0c                	push   0xc
c0017dbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dbf:	e8 6c 13 00 00       	call   c0019130 <operator delete(void*, unsigned long)>
c0017dc4:	83 c4 10             	add    esp,0x10
c0017dc7:	83 c4 0c             	add    esp,0xc
c0017dca:	c3                   	ret    

c0017dcb <KeGetFileFromDescriptor(int)>:
c0017dcb:	53                   	push   ebx
c0017dcc:	83 ec 08             	sub    esp,0x8
c0017dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017dd3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017dd9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017ddf:	7f 2c                	jg     c0017e0d <KeGetFileFromDescriptor(int)+0x42>
c0017de1:	83 ec 0c             	sub    esp,0xc
c0017de4:	68 98 aa 03 c0       	push   0xc003aa98
c0017de9:	e8 5e 6c 01 00       	call   c002ea4c <LinkedList<UnixFile>::getFirstElement()>
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	85 c0                	test   eax,eax
c0017df3:	75 04                	jne    c0017df9 <KeGetFileFromDescriptor(int)+0x2e>
c0017df5:	31 c0                	xor    eax,eax
c0017df7:	eb 6e                	jmp    c0017e67 <KeGetFileFromDescriptor(int)+0x9c>
c0017df9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017dfc:	74 69                	je     c0017e67 <KeGetFileFromDescriptor(int)+0x9c>
c0017dfe:	52                   	push   edx
c0017dff:	52                   	push   edx
c0017e00:	50                   	push   eax
c0017e01:	68 98 aa 03 c0       	push   0xc003aa98
c0017e06:	e8 eb 6c 01 00       	call   c002eaf6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017e0b:	eb e1                	jmp    c0017dee <KeGetFileFromDescriptor(int)+0x23>
c0017e0d:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017e12:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017e18:	74 4d                	je     c0017e67 <KeGetFileFromDescriptor(int)+0x9c>
c0017e1a:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017e1f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017e25:	74 40                	je     c0017e67 <KeGetFileFromDescriptor(int)+0x9c>
c0017e27:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017e2c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017e32:	74 33                	je     c0017e67 <KeGetFileFromDescriptor(int)+0x9c>
c0017e34:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017e39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017e3f:	74 26                	je     c0017e67 <KeGetFileFromDescriptor(int)+0x9c>
c0017e41:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017e47:	83 f8 08             	cmp    eax,0x8
c0017e4a:	77 09                	ja     c0017e55 <KeGetFileFromDescriptor(int)+0x8a>
c0017e4c:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017e53:	eb 12                	jmp    c0017e67 <KeGetFileFromDescriptor(int)+0x9c>
c0017e55:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017e5b:	83 fb 08             	cmp    ebx,0x8
c0017e5e:	77 95                	ja     c0017df5 <KeGetFileFromDescriptor(int)+0x2a>
c0017e60:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017e67:	83 c4 08             	add    esp,0x8
c0017e6a:	5b                   	pop    ebx
c0017e6b:	c3                   	ret    

c0017e6c <__static_initialization_and_destruction_0(int, int)>:
c0017e6c:	83 ec 0c             	sub    esp,0xc
c0017e6f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e74:	75 34                	jne    c0017eaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e76:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017e7e:	75 2a                	jne    c0017eaa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e80:	83 ec 0c             	sub    esp,0xc
c0017e83:	68 98 aa 03 c0       	push   0xc003aa98
c0017e88:	e8 a9 6a 01 00       	call   c002e936 <LinkedList<UnixFile>::LinkedList()>
c0017e8d:	83 c4 10             	add    esp,0x10
c0017e90:	83 ec 04             	sub    esp,0x4
c0017e93:	68 d8 3b 03 c0       	push   0xc0033bd8
c0017e98:	68 98 aa 03 c0       	push   0xc003aa98
c0017e9d:	68 34 e9 02 c0       	push   0xc002e934
c0017ea2:	e8 39 12 00 00       	call   c00190e0 <__cxa_atexit>
c0017ea7:	83 c4 10             	add    esp,0x10
c0017eaa:	90                   	nop
c0017eab:	83 c4 0c             	add    esp,0xc
c0017eae:	c3                   	ret    

c0017eaf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017eaf:	83 ec 0c             	sub    esp,0xc
c0017eb2:	83 ec 08             	sub    esp,0x8
c0017eb5:	68 ff ff 00 00       	push   0xffff
c0017eba:	6a 01                	push   0x1
c0017ebc:	e8 ab ff ff ff       	call   c0017e6c <__static_initialization_and_destruction_0(int, int)>
c0017ec1:	83 c4 10             	add    esp,0x10
c0017ec4:	83 c4 0c             	add    esp,0xc
c0017ec7:	c3                   	ret    

c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017ec8:	53                   	push   ebx
c0017ec9:	8b 15 68 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c68
c0017ecf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ed3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ed7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017edd:	89 d8                	mov    eax,ebx
c0017edf:	d1 e8                	shr    eax,1
c0017ee1:	01 d0                	add    eax,edx
c0017ee3:	80 e3 01             	and    bl,0x1
c0017ee6:	8a 10                	mov    dl,BYTE PTR [eax]
c0017ee8:	75 09                	jne    c0017ef3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017eea:	83 e2 f0             	and    edx,0xfffffff0
c0017eed:	09 ca                	or     edx,ecx
c0017eef:	88 10                	mov    BYTE PTR [eax],dl
c0017ef1:	5b                   	pop    ebx
c0017ef2:	c3                   	ret    
c0017ef3:	83 e2 0f             	and    edx,0xf
c0017ef6:	0f b6 c9             	movzx  ecx,cl
c0017ef9:	c1 e1 04             	shl    ecx,0x4
c0017efc:	09 ca                	or     edx,ecx
c0017efe:	88 10                	mov    BYTE PTR [eax],dl
c0017f00:	5b                   	pop    ebx
c0017f01:	c3                   	ret    

c0017f02 <Virt::getPageState(unsigned long)>:
c0017f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f06:	8b 0d 68 3c 03 c0    	mov    ecx,DWORD PTR ds:0xc0033c68
c0017f0c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017f12:	89 d0                	mov    eax,edx
c0017f14:	d1 e8                	shr    eax,1
c0017f16:	80 e2 01             	and    dl,0x1
c0017f19:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017f1c:	74 03                	je     c0017f21 <Virt::getPageState(unsigned long)+0x1f>
c0017f1e:	c1 e8 04             	shr    eax,0x4
c0017f21:	83 e0 0f             	and    eax,0xf
c0017f24:	c3                   	ret    

c0017f25 <Virt::allocateKernelVirtualPages(int)>:
c0017f25:	55                   	push   ebp
c0017f26:	31 ed                	xor    ebp,ebp
c0017f28:	57                   	push   edi
c0017f29:	31 ff                	xor    edi,edi
c0017f2b:	56                   	push   esi
c0017f2c:	53                   	push   ebx
c0017f2d:	31 db                	xor    ebx,ebx
c0017f2f:	83 ec 0c             	sub    esp,0xc
c0017f32:	8b 35 64 3c 03 c0    	mov    esi,DWORD PTR ds:0xc0033c64
c0017f38:	56                   	push   esi
c0017f39:	e8 c4 ff ff ff       	call   c0017f02 <Virt::getPageState(unsigned long)>
c0017f3e:	5a                   	pop    edx
c0017f3f:	84 c0                	test   al,al
c0017f41:	75 41                	jne    c0017f84 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0017f43:	85 db                	test   ebx,ebx
c0017f45:	75 02                	jne    c0017f49 <Virt::allocateKernelVirtualPages(int)+0x24>
c0017f47:	89 f5                	mov    ebp,esi
c0017f49:	83 c3 01             	add    ebx,0x1
c0017f4c:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017f50:	74 5f                	je     c0017fb1 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0017f52:	83 c6 01             	add    esi,0x1
c0017f55:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017f5b:	76 34                	jbe    c0017f91 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0017f5d:	c7 05 64 3c 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033c64,0xc8000
c0017f67:	f7 c7 01 00 00 00    	test   edi,0x1
c0017f6d:	75 2a                	jne    c0017f99 <Virt::allocateKernelVirtualPages(int)+0x74>
c0017f6f:	be 00 80 0c 00       	mov    esi,0xc8000
c0017f74:	bf 01 00 00 00       	mov    edi,0x1
c0017f79:	56                   	push   esi
c0017f7a:	e8 83 ff ff ff       	call   c0017f02 <Virt::getPageState(unsigned long)>
c0017f7f:	5a                   	pop    edx
c0017f80:	84 c0                	test   al,al
c0017f82:	74 bf                	je     c0017f43 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0017f84:	31 db                	xor    ebx,ebx
c0017f86:	83 c6 01             	add    esi,0x1
c0017f89:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017f8f:	77 cc                	ja     c0017f5d <Virt::allocateKernelVirtualPages(int)+0x38>
c0017f91:	89 35 64 3c 03 c0    	mov    DWORD PTR ds:0xc0033c64,esi
c0017f97:	eb 9f                	jmp    c0017f38 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017f99:	83 ec 0c             	sub    esp,0xc
c0017f9c:	68 28 14 03 c0       	push   0xc0031428
c0017fa1:	e8 d0 82 00 00       	call   c0020276 <KePanic(char const*)>
c0017fa6:	8b 35 64 3c 03 c0    	mov    esi,DWORD PTR ds:0xc0033c64
c0017fac:	83 c4 10             	add    esp,0x10
c0017faf:	eb 87                	jmp    c0017f38 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017fb1:	89 2d 64 3c 03 c0    	mov    DWORD PTR ds:0xc0033c64,ebp
c0017fb7:	83 fb 01             	cmp    ebx,0x1
c0017fba:	74 6f                	je     c001802b <Virt::allocateKernelVirtualPages(int)+0x106>
c0017fbc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017fc0:	85 c9                	test   ecx,ecx
c0017fc2:	74 49                	je     c001800d <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017fc4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017fc8:	89 e8                	mov    eax,ebp
c0017fca:	31 db                	xor    ebx,ebx
c0017fcc:	8d 79 ff             	lea    edi,[ecx-0x1]
c0017fcf:	eb 18                	jmp    c0017fe9 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0017fd1:	6a 01                	push   0x1
c0017fd3:	83 c3 01             	add    ebx,0x1
c0017fd6:	50                   	push   eax
c0017fd7:	e8 ec fe ff ff       	call   c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017fdc:	58                   	pop    eax
c0017fdd:	5a                   	pop    edx
c0017fde:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017fe2:	74 29                	je     c001800d <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017fe4:	a1 64 3c 03 c0       	mov    eax,ds:0xc0033c64
c0017fe9:	8d 50 01             	lea    edx,[eax+0x1]
c0017fec:	85 db                	test   ebx,ebx
c0017fee:	89 15 64 3c 03 c0    	mov    DWORD PTR ds:0xc0033c64,edx
c0017ff4:	74 24                	je     c001801a <Virt::allocateKernelVirtualPages(int)+0xf5>
c0017ff6:	39 df                	cmp    edi,ebx
c0017ff8:	75 d7                	jne    c0017fd1 <Virt::allocateKernelVirtualPages(int)+0xac>
c0017ffa:	6a 03                	push   0x3
c0017ffc:	83 c3 01             	add    ebx,0x1
c0017fff:	50                   	push   eax
c0018000:	e8 c3 fe ff ff       	call   c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018005:	59                   	pop    ecx
c0018006:	5e                   	pop    esi
c0018007:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001800b:	75 d7                	jne    c0017fe4 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001800d:	83 c4 0c             	add    esp,0xc
c0018010:	89 e8                	mov    eax,ebp
c0018012:	5b                   	pop    ebx
c0018013:	c1 e0 0c             	shl    eax,0xc
c0018016:	5e                   	pop    esi
c0018017:	5f                   	pop    edi
c0018018:	5d                   	pop    ebp
c0018019:	c3                   	ret    
c001801a:	6a 02                	push   0x2
c001801c:	bb 01 00 00 00       	mov    ebx,0x1
c0018021:	50                   	push   eax
c0018022:	e8 a1 fe ff ff       	call   c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018027:	58                   	pop    eax
c0018028:	5a                   	pop    edx
c0018029:	eb b9                	jmp    c0017fe4 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001802b:	6a 04                	push   0x4
c001802d:	8d 45 01             	lea    eax,[ebp+0x1]
c0018030:	55                   	push   ebp
c0018031:	a3 64 3c 03 c0       	mov    ds:0xc0033c64,eax
c0018036:	e8 8d fe ff ff       	call   c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001803b:	5b                   	pop    ebx
c001803c:	89 e8                	mov    eax,ebp
c001803e:	5e                   	pop    esi
c001803f:	c1 e0 0c             	shl    eax,0xc
c0018042:	83 c4 0c             	add    esp,0xc
c0018045:	5b                   	pop    ebx
c0018046:	5e                   	pop    esi
c0018047:	5f                   	pop    edi
c0018048:	5d                   	pop    ebp
c0018049:	c3                   	ret    

c001804a <Virt::freeSwapfilePage(unsigned long)>:
c001804a:	53                   	push   ebx
c001804b:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0018051:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018055:	b8 01 00 00 00       	mov    eax,0x1
c001805a:	89 cb                	mov    ebx,ecx
c001805c:	d3 e0                	shl    eax,cl
c001805e:	c1 eb 05             	shr    ebx,0x5
c0018061:	f7 d0                	not    eax
c0018063:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0018066:	21 c1                	and    ecx,eax
c0018068:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001806b:	5b                   	pop    ebx
c001806c:	c3                   	ret    

c001806d <Virt::swapIDToSector(unsigned long)>:
c001806d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018071:	8b 15 6c 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c6c
c0018077:	8b 0d 74 3c 03 c0    	mov    ecx,DWORD PTR ds:0xc0033c74
c001807d:	0f af c2             	imul   eax,edx
c0018080:	01 c8                	add    eax,ecx
c0018082:	c3                   	ret    

c0018083 <Virt::allocateSwapfilePage()>:
c0018083:	55                   	push   ebp
c0018084:	31 d2                	xor    edx,edx
c0018086:	57                   	push   edi
c0018087:	56                   	push   esi
c0018088:	53                   	push   ebx
c0018089:	83 ec 0c             	sub    esp,0xc
c001808c:	8b 0d 6c 3c 03 c0    	mov    ecx,DWORD PTR ds:0xc0033c6c
c0018092:	a1 70 3c 03 c0       	mov    eax,ds:0xc0033c70
c0018097:	f7 f1                	div    ecx
c0018099:	39 0d 70 3c 03 c0    	cmp    DWORD PTR ds:0xc0033c70,ecx
c001809f:	72 2f                	jb     c00180d0 <Virt::allocateSwapfilePage()+0x4d>
c00180a1:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c00180a7:	8b 16                	mov    edx,DWORD PTR [esi]
c00180a9:	f6 c2 01             	test   dl,0x1
c00180ac:	74 3e                	je     c00180ec <Virt::allocateSwapfilePage()+0x69>
c00180ae:	31 c9                	xor    ecx,ecx
c00180b0:	bf 01 00 00 00       	mov    edi,0x1
c00180b5:	eb 12                	jmp    c00180c9 <Virt::allocateSwapfilePage()+0x46>
c00180b7:	89 fd                	mov    ebp,edi
c00180b9:	89 ca                	mov    edx,ecx
c00180bb:	d3 e5                	shl    ebp,cl
c00180bd:	c1 ea 05             	shr    edx,0x5
c00180c0:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00180c3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00180c5:	85 ea                	test   edx,ebp
c00180c7:	74 2c                	je     c00180f5 <Virt::allocateSwapfilePage()+0x72>
c00180c9:	83 c1 01             	add    ecx,0x1
c00180cc:	39 c8                	cmp    eax,ecx
c00180ce:	77 e7                	ja     c00180b7 <Virt::allocateSwapfilePage()+0x34>
c00180d0:	83 ec 0c             	sub    esp,0xc
c00180d3:	68 bc 16 03 c0       	push   0xc00316bc
c00180d8:	e8 99 81 00 00       	call   c0020276 <KePanic(char const*)>
c00180dd:	83 c4 10             	add    esp,0x10
c00180e0:	31 c9                	xor    ecx,ecx
c00180e2:	83 c4 0c             	add    esp,0xc
c00180e5:	89 c8                	mov    eax,ecx
c00180e7:	5b                   	pop    ebx
c00180e8:	5e                   	pop    esi
c00180e9:	5f                   	pop    edi
c00180ea:	5d                   	pop    ebp
c00180eb:	c3                   	ret    
c00180ec:	89 f3                	mov    ebx,esi
c00180ee:	bd 01 00 00 00       	mov    ebp,0x1
c00180f3:	31 c9                	xor    ecx,ecx
c00180f5:	09 ea                	or     edx,ebp
c00180f7:	89 c8                	mov    eax,ecx
c00180f9:	89 13                	mov    DWORD PTR [ebx],edx
c00180fb:	83 c4 0c             	add    esp,0xc
c00180fe:	5b                   	pop    ebx
c00180ff:	5e                   	pop    esi
c0018100:	5f                   	pop    edi
c0018101:	5d                   	pop    ebp
c0018102:	c3                   	ret    

c0018103 <Virt::virtualMemorySetup()>:
c0018103:	53                   	push   ebx
c0018104:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018109:	6a 0f                	push   0xf
c001810b:	53                   	push   ebx
c001810c:	83 c3 01             	add    ebx,0x1
c001810f:	e8 b4 fd ff ff       	call   c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018114:	58                   	pop    eax
c0018115:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001811b:	5a                   	pop    edx
c001811c:	75 eb                	jne    c0018109 <Virt::virtualMemorySetup()+0x6>
c001811e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018123:	6a 00                	push   0x0
c0018125:	53                   	push   ebx
c0018126:	83 c3 01             	add    ebx,0x1
c0018129:	e8 9a fd ff ff       	call   c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001812e:	59                   	pop    ecx
c001812f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018135:	58                   	pop    eax
c0018136:	75 eb                	jne    c0018123 <Virt::virtualMemorySetup()+0x20>
c0018138:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001813d:	6a 0f                	push   0xf
c001813f:	53                   	push   ebx
c0018140:	83 c3 01             	add    ebx,0x1
c0018143:	e8 80 fd ff ff       	call   c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018148:	58                   	pop    eax
c0018149:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001814f:	5a                   	pop    edx
c0018150:	75 eb                	jne    c001813d <Virt::virtualMemorySetup()+0x3a>
c0018152:	5b                   	pop    ebx
c0018153:	c3                   	ret    

c0018154 <Virt::setupPageSwapping(int)>:
c0018154:	53                   	push   ebx
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001815c:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c0018161:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0018167:	8b 10                	mov    edx,DWORD PTR [eax]
c0018169:	53                   	push   ebx
c001816a:	c1 e3 0b             	shl    ebx,0xb
c001816d:	68 d3 16 03 c0       	push   0xc00316d3
c0018172:	50                   	push   eax
c0018173:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0018176:	89 1d 70 3c 03 c0    	mov    DWORD PTR ds:0xc0033c70,ebx
c001817c:	c6 05 78 3c 03 c0 43 	mov    BYTE PTR ds:0xc0033c78,0x43
c0018183:	c1 eb 08             	shr    ebx,0x8
c0018186:	a3 74 3c 03 c0       	mov    ds:0xc0033c74,eax
c001818b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001818e:	c7 05 6c 3c 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033c6c,0x8
c0018198:	e8 21 e2 ff ff       	call   c00163be <malloc>
c001819d:	83 c4 0c             	add    esp,0xc
c00181a0:	89 c1                	mov    ecx,eax
c00181a2:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c00181a7:	31 d2                	xor    edx,edx
c00181a9:	a1 70 3c 03 c0       	mov    eax,ds:0xc0033c70
c00181ae:	f7 35 6c 3c 03 c0    	div    DWORD PTR ds:0xc0033c6c
c00181b4:	c1 e8 05             	shr    eax,0x5
c00181b7:	50                   	push   eax
c00181b8:	6a 00                	push   0x0
c00181ba:	51                   	push   ecx
c00181bb:	e8 30 83 fe ff       	call   c00004f0 <memset>
c00181c0:	83 c4 18             	add    esp,0x18
c00181c3:	5b                   	pop    ebx
c00181c4:	c3                   	ret    
c00181c5:	90                   	nop

c00181c6 <VAS::setCPUSpecific(unsigned long)>:
c00181c6:	c3                   	ret    
c00181c7:	90                   	nop

c00181c8 <VAS::VAS(VAS*)>:
c00181c8:	83 ec 0c             	sub    esp,0xc
c00181cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00181d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181da:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00181e1:	83 ec 0c             	sub    esp,0xc
c00181e4:	68 48 14 03 c0       	push   0xc0031448
c00181e9:	e8 88 80 00 00       	call   c0020276 <KePanic(char const*)>
c00181ee:	83 c4 10             	add    esp,0x10
c00181f1:	90                   	nop
c00181f2:	83 c4 0c             	add    esp,0xc
c00181f5:	c3                   	ret    

c00181f6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00181f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181fa:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00181ff:	89 c2                	mov    edx,eax
c0018201:	c1 e8 0a             	shr    eax,0xa
c0018204:	c1 ea 16             	shr    edx,0x16
c0018207:	83 f9 01             	cmp    ecx,0x1
c001820a:	19 c9                	sbb    ecx,ecx
c001820c:	c1 e2 0c             	shl    edx,0xc
c001820f:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0018215:	25 fc 0f 00 00       	and    eax,0xffc
c001821a:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018221:	01 d0                	add    eax,edx
c0018223:	c3                   	ret    

c0018224 <VAS::getPageTableEntry(unsigned long)>:
c0018224:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018228:	89 ca                	mov    edx,ecx
c001822a:	c1 e9 0a             	shr    ecx,0xa
c001822d:	c1 ea 16             	shr    edx,0x16
c0018230:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0018236:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001823c:	c1 e0 0c             	shl    eax,0xc
c001823f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0018242:	c3                   	ret    

c0018243 <Virt::freeKernelVirtualPages(unsigned long)>:
c0018243:	55                   	push   ebp
c0018244:	57                   	push   edi
c0018245:	bf 01 00 00 00       	mov    edi,0x1
c001824a:	56                   	push   esi
c001824b:	53                   	push   ebx
c001824c:	83 ec 1c             	sub    esp,0x1c
c001824f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018253:	c1 ee 0c             	shr    esi,0xc
c0018256:	eb 48                	jmp    c00182a0 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0018258:	83 ec 08             	sub    esp,0x8
c001825b:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018260:	55                   	push   ebp
c0018261:	50                   	push   eax
c0018262:	e8 bd ff ff ff       	call   c0018224 <VAS::getPageTableEntry(unsigned long)>
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	8b 10                	mov    edx,DWORD PTR [eax]
c001826c:	f6 c6 04             	test   dh,0x4
c001826f:	75 70                	jne    c00182e1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018271:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018277:	83 fb 04             	cmp    ebx,0x4
c001827a:	0f 84 8a 00 00 00    	je     c001830a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0018280:	83 fb 02             	cmp    ebx,0x2
c0018283:	0f 84 9a 00 00 00    	je     c0018323 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018289:	83 fb 03             	cmp    ebx,0x3
c001828c:	0f 84 be 00 00 00    	je     c0018350 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018292:	83 fb 01             	cmp    ebx,0x1
c0018295:	0f 84 a2 00 00 00    	je     c001833d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001829b:	83 c6 01             	add    esi,0x1
c001829e:	31 ff                	xor    edi,edi
c00182a0:	56                   	push   esi
c00182a1:	89 f5                	mov    ebp,esi
c00182a3:	e8 5a fc ff ff       	call   c0017f02 <Virt::getPageState(unsigned long)>
c00182a8:	c1 e5 0c             	shl    ebp,0xc
c00182ab:	0f b6 d8             	movzx  ebx,al
c00182ae:	5a                   	pop    edx
c00182af:	85 db                	test   ebx,ebx
c00182b1:	75 a5                	jne    c0018258 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00182b3:	83 ec 0c             	sub    esp,0xc
c00182b6:	68 ea 16 03 c0       	push   0xc00316ea
c00182bb:	e8 b6 7f 00 00       	call   c0020276 <KePanic(char const*)>
c00182c0:	5a                   	pop    edx
c00182c1:	59                   	pop    ecx
c00182c2:	55                   	push   ebp
c00182c3:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c00182c9:	55                   	push   ebp
c00182ca:	e8 55 ff ff ff       	call   c0018224 <VAS::getPageTableEntry(unsigned long)>
c00182cf:	83 c4 10             	add    esp,0x10
c00182d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00182d4:	f6 c6 04             	test   dh,0x4
c00182d7:	75 08                	jne    c00182e1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00182d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00182df:	eb ba                	jmp    c001829b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00182e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182e5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00182eb:	83 ec 0c             	sub    esp,0xc
c00182ee:	52                   	push   edx
c00182ef:	e8 7a e3 ff ff       	call   c001666e <Phys::freePage(unsigned long)>
c00182f4:	83 c4 10             	add    esp,0x10
c00182f7:	83 fb 04             	cmp    ebx,0x4
c00182fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018304:	0f 85 76 ff ff ff    	jne    c0018280 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001830a:	83 e7 01             	and    edi,0x1
c001830d:	75 46                	jne    c0018355 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001830f:	c7 44 24 30 6c 14 03 c0 	mov    DWORD PTR [esp+0x30],0xc003146c
c0018317:	83 c4 1c             	add    esp,0x1c
c001831a:	5b                   	pop    ebx
c001831b:	5e                   	pop    esi
c001831c:	5f                   	pop    edi
c001831d:	5d                   	pop    ebp
c001831e:	e9 53 7f 00 00       	jmp    c0020276 <KePanic(char const*)>
c0018323:	83 e7 01             	and    edi,0x1
c0018326:	75 15                	jne    c001833d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018328:	83 ec 0c             	sub    esp,0xc
c001832b:	68 06 17 03 c0       	push   0xc0031706
c0018330:	e8 41 7f 00 00       	call   c0020276 <KePanic(char const*)>
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	e9 5e ff ff ff       	jmp    c001829b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001833d:	83 ec 08             	sub    esp,0x8
c0018340:	6a 00                	push   0x0
c0018342:	56                   	push   esi
c0018343:	e8 80 fb ff ff       	call   c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018348:	83 c4 10             	add    esp,0x10
c001834b:	e9 4b ff ff ff       	jmp    c001829b <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018350:	83 e7 01             	and    edi,0x1
c0018353:	75 16                	jne    c001836b <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0018355:	83 ec 08             	sub    esp,0x8
c0018358:	6a 00                	push   0x0
c001835a:	56                   	push   esi
c001835b:	e8 68 fb ff ff       	call   c0017ec8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018360:	83 c4 10             	add    esp,0x10
c0018363:	83 c4 1c             	add    esp,0x1c
c0018366:	5b                   	pop    ebx
c0018367:	5e                   	pop    esi
c0018368:	5f                   	pop    edi
c0018369:	5d                   	pop    ebp
c001836a:	c3                   	ret    
c001836b:	c7 44 24 30 22 17 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031722
c0018373:	83 c4 1c             	add    esp,0x1c
c0018376:	5b                   	pop    ebx
c0018377:	5e                   	pop    esi
c0018378:	5f                   	pop    edi
c0018379:	5d                   	pop    ebp
c001837a:	e9 f7 7e 00 00       	jmp    c0020276 <KePanic(char const*)>
c001837f:	90                   	nop

c0018380 <VAS::freeAllocatedPages(unsigned long)>:
c0018380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018384:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018388:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001838c:	74 09                	je     c0018397 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001838e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018392:	e9 ac fe ff ff       	jmp    c0018243 <Virt::freeKernelVirtualPages(unsigned long)>
c0018397:	c7 44 24 04 90 14 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031490
c001839f:	e9 b9 0e 00 00       	jmp    c001925d <Dbg::kprintf(char const*, ...)>

c00183a4 <VAS::virtualToPhysical(unsigned long)>:
c00183a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183a8:	50                   	push   eax
c00183a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00183ad:	52                   	push   edx
c00183ae:	e8 71 fe ff ff       	call   c0018224 <VAS::getPageTableEntry(unsigned long)>
c00183b3:	59                   	pop    ecx
c00183b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00183b6:	5a                   	pop    edx
c00183b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183bc:	c3                   	ret    
c00183bd:	90                   	nop

c00183be <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00183be:	55                   	push   ebp
c00183bf:	57                   	push   edi
c00183c0:	56                   	push   esi
c00183c1:	53                   	push   ebx
c00183c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00183c6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00183ca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00183ce:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00183d2:	85 db                	test   ebx,ebx
c00183d4:	7e 24                	jle    c00183fa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00183d6:	c1 e3 0c             	shl    ebx,0xc
c00183d9:	01 f3                	add    ebx,esi
c00183db:	56                   	push   esi
c00183dc:	81 c6 00 10 00 00    	add    esi,0x1000
c00183e2:	55                   	push   ebp
c00183e3:	e8 3c fe ff ff       	call   c0018224 <VAS::getPageTableEntry(unsigned long)>
c00183e8:	5a                   	pop    edx
c00183e9:	59                   	pop    ecx
c00183ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00183ec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183f0:	21 f9                	and    ecx,edi
c00183f2:	09 d1                	or     ecx,edx
c00183f4:	39 f3                	cmp    ebx,esi
c00183f6:	89 08                	mov    DWORD PTR [eax],ecx
c00183f8:	75 e1                	jne    c00183db <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00183fa:	5b                   	pop    ebx
c00183fb:	5e                   	pop    esi
c00183fc:	5f                   	pop    edi
c00183fd:	5d                   	pop    ebp
c00183fe:	c3                   	ret    
c00183ff:	90                   	nop

c0018400 <VAS::VAS()>:
c0018400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018404:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001840b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001840f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001841a:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c001841f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018423:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0018427:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001842b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001842e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018432:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0018439:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c001843e:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018443:	29 c2                	sub    edx,eax
c0018445:	89 d0                	mov    eax,edx
c0018447:	05 ff 0f 00 00       	add    eax,0xfff
c001844c:	c1 e8 0c             	shr    eax,0xc
c001844f:	89 c2                	mov    edx,eax
c0018451:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018456:	6a 04                	push   0x4
c0018458:	6a ff                	push   0xffffffff
c001845a:	52                   	push   edx
c001845b:	50                   	push   eax
c001845c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018460:	e8 59 ff ff ff       	call   c00183be <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018465:	83 c4 14             	add    esp,0x14
c0018468:	90                   	nop
c0018469:	c3                   	ret    

c001846a <VAS::setToWriteCombining(unsigned long, int)>:
c001846a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001846f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018475:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c001847c:	75 01                	jne    c001847f <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001847e:	c3                   	ret    
c001847f:	68 80 00 00 00       	push   0x80
c0018484:	6a ff                	push   0xffffffff
c0018486:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001848a:	50                   	push   eax
c001848b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001848f:	52                   	push   edx
c0018490:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018494:	51                   	push   ecx
c0018495:	e8 24 ff ff ff       	call   c00183be <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001849a:	83 c4 14             	add    esp,0x14
c001849d:	c3                   	ret    

c001849e <VAS::mapOtherVASIn(bool, VAS*)>:
c001849e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184a2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00184a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184a9:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00184ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184b1:	83 f8 01             	cmp    eax,0x1
c00184b4:	19 c0                	sbb    eax,eax
c00184b6:	83 ca 03             	or     edx,0x3
c00184b9:	83 e0 fc             	and    eax,0xfffffffc
c00184bc:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00184c3:	0f 20 d8             	mov    eax,cr3
c00184c6:	0f 22 d8             	mov    cr3,eax
c00184c9:	c3                   	ret    

c00184ca <VAS::~VAS()>:
c00184ca:	83 ec 2c             	sub    esp,0x2c
c00184cd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00184d5:	fa                   	cli    
c00184d6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00184db:	83 c0 01             	add    eax,0x1
c00184de:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00184e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00184ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184ed:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00184f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184f7:	6a 01                	push   0x1
c00184f9:	50                   	push   eax
c00184fa:	e8 9f ff ff ff       	call   c001849e <VAS::mapOtherVASIn(bool, VAS*)>
c00184ff:	83 c4 0c             	add    esp,0xc
c0018502:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001850a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0018512:	0f 8f d8 00 00 00    	jg     c00185f0 <VAS::~VAS()+0x126>
c0018518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001851c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001851f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018523:	c1 e2 02             	shl    edx,0x2
c0018526:	01 d0                	add    eax,edx
c0018528:	8b 00                	mov    eax,DWORD PTR [eax]
c001852a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001852e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018532:	83 e0 01             	and    eax,0x1
c0018535:	0f 84 ab 00 00 00    	je     c00185e6 <VAS::~VAS()+0x11c>
c001853b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018543:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001854b:	7f 74                	jg     c00185c1 <VAS::~VAS()+0xf7>
c001854d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018551:	c1 e0 0a             	shl    eax,0xa
c0018554:	89 c2                	mov    edx,eax
c0018556:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001855a:	01 d0                	add    eax,edx
c001855c:	c1 e0 0c             	shl    eax,0xc
c001855f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018563:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018568:	8b 00                	mov    eax,DWORD PTR [eax]
c001856a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001856d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018573:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018577:	6a 01                	push   0x1
c0018579:	50                   	push   eax
c001857a:	e8 77 fc ff ff       	call   c00181f6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001857f:	83 c4 0c             	add    esp,0xc
c0018582:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001858a:	8b 00                	mov    eax,DWORD PTR [eax]
c001858c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018594:	25 01 04 00 00       	and    eax,0x401
c0018599:	3d 01 04 00 00       	cmp    eax,0x401
c001859e:	75 1a                	jne    c00185ba <VAS::~VAS()+0xf0>
c00185a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185a4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185a9:	83 ec 0c             	sub    esp,0xc
c00185ac:	50                   	push   eax
c00185ad:	e8 bc e0 ff ff       	call   c001666e <Phys::freePage(unsigned long)>
c00185b2:	83 c4 10             	add    esp,0x10
c00185b5:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185ba:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00185bf:	eb 82                	jmp    c0018543 <VAS::~VAS()+0x79>
c00185c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c5:	25 00 04 00 00       	and    eax,0x400
c00185ca:	74 1a                	je     c00185e6 <VAS::~VAS()+0x11c>
c00185cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185d5:	83 ec 0c             	sub    esp,0xc
c00185d8:	50                   	push   eax
c00185d9:	e8 90 e0 ff ff       	call   c001666e <Phys::freePage(unsigned long)>
c00185de:	83 c4 10             	add    esp,0x10
c00185e1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185e6:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00185eb:	e9 1a ff ff ff       	jmp    c001850a <VAS::~VAS()+0x40>
c00185f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00185f7:	83 ec 0c             	sub    esp,0xc
c00185fa:	50                   	push   eax
c00185fb:	e8 43 fc ff ff       	call   c0018243 <Virt::freeKernelVirtualPages(unsigned long)>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018607:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001860a:	83 ec 0c             	sub    esp,0xc
c001860d:	50                   	push   eax
c001860e:	e8 5b e0 ff ff       	call   c001666e <Phys::freePage(unsigned long)>
c0018613:	83 c4 10             	add    esp,0x10
c0018616:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001861b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018620:	83 e8 01             	sub    eax,0x1
c0018623:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018628:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001862d:	85 c0                	test   eax,eax
c001862f:	75 01                	jne    c0018632 <VAS::~VAS()+0x168>
c0018631:	fb                   	sti    
c0018632:	90                   	nop
c0018633:	83 c4 2c             	add    esp,0x2c
c0018636:	c3                   	ret    
c0018637:	90                   	nop

c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0018638:	55                   	push   ebp
c0018639:	57                   	push   edi
c001863a:	56                   	push   esi
c001863b:	53                   	push   ebx
c001863c:	83 ec 1c             	sub    esp,0x1c
c001863f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018643:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018647:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001864d:	77 08                	ja     c0018657 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001864f:	0f 20 d8             	mov    eax,cr3
c0018652:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0018655:	75 49                	jne    c00186a0 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0018657:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001865b:	09 d8                	or     eax,ebx
c001865d:	a9 ff 0f 00 00       	test   eax,0xfff
c0018662:	75 59                	jne    c00186bd <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0018664:	89 de                	mov    esi,ebx
c0018666:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018669:	c1 ee 16             	shr    esi,0x16
c001866c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0018673:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0018677:	74 56                	je     c00186cf <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0018679:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001867d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018681:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0018687:	c1 eb 0a             	shr    ebx,0xa
c001868a:	c1 e6 0c             	shl    esi,0xc
c001868d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018693:	09 d0                	or     eax,edx
c0018695:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0018698:	83 c4 1c             	add    esp,0x1c
c001869b:	5b                   	pop    ebx
c001869c:	5e                   	pop    esi
c001869d:	5f                   	pop    edi
c001869e:	5d                   	pop    ebp
c001869f:	c3                   	ret    
c00186a0:	83 ec 0c             	sub    esp,0xc
c00186a3:	68 b4 14 03 c0       	push   0xc00314b4
c00186a8:	e8 b0 0b 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00186ad:	83 c4 10             	add    esp,0x10
c00186b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186b4:	09 d8                	or     eax,ebx
c00186b6:	a9 ff 0f 00 00       	test   eax,0xfff
c00186bb:	74 a7                	je     c0018664 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00186bd:	83 ec 0c             	sub    esp,0xc
c00186c0:	68 1c 15 03 c0       	push   0xc003151c
c00186c5:	e8 ac 7b 00 00       	call   c0020276 <KePanic(char const*)>
c00186ca:	83 c4 10             	add    esp,0x10
c00186cd:	eb 95                	jmp    c0018664 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00186cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00186d3:	e8 ff df ff ff       	call   c00166d7 <Phys::allocatePage()>
c00186d8:	83 ec 0c             	sub    esp,0xc
c00186db:	89 c5                	mov    ebp,eax
c00186dd:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00186e3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00186e7:	6a 01                	push   0x1
c00186e9:	e8 37 f8 ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c00186ee:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00186f5:	6a 01                	push   0x1
c00186f7:	50                   	push   eax
c00186f8:	55                   	push   ebp
c00186f9:	81 cd 07 04 00 00    	or     ebp,0x407
c00186ff:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018703:	51                   	push   ecx
c0018704:	e8 29 01 00 00       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018709:	83 c4 1c             	add    esp,0x1c
c001870c:	68 00 10 00 00       	push   0x1000
c0018711:	6a 00                	push   0x0
c0018713:	50                   	push   eax
c0018714:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018718:	e8 d3 7d fe ff       	call   c00004f0 <memset>
c001871d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018721:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018724:	e8 1a fb ff ff       	call   c0018243 <Virt::freeKernelVirtualPages(unsigned long)>
c0018729:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001872d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018730:	83 c4 10             	add    esp,0x10
c0018733:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0018736:	e9 3e ff ff ff       	jmp    c0018679 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c001873b:	90                   	nop

c001873c <VAS::allocatePages(int, int)>:
c001873c:	55                   	push   ebp
c001873d:	57                   	push   edi
c001873e:	56                   	push   esi
c001873f:	53                   	push   ebx
c0018740:	83 ec 1c             	sub    esp,0x1c
c0018743:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018747:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001874b:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c001874f:	75 71                	jne    c00187c2 <VAS::allocatePages(int, int)+0x86>
c0018751:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018754:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018758:	85 c0                	test   eax,eax
c001875a:	74 4d                	je     c00187a9 <VAS::allocatePages(int, int)+0x6d>
c001875c:	89 dd                	mov    ebp,ebx
c001875e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018762:	c1 e5 0c             	shl    ebp,0xc
c0018765:	01 c5                	add    ebp,eax
c0018767:	85 db                	test   ebx,ebx
c0018769:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c001876c:	7e 29                	jle    c0018797 <VAS::allocatePages(int, int)+0x5b>
c001876e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018772:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018776:	81 cf 00 04 00 00    	or     edi,0x400
c001877c:	e8 56 df ff ff       	call   c00166d7 <Phys::allocatePage()>
c0018781:	57                   	push   edi
c0018782:	53                   	push   ebx
c0018783:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018789:	50                   	push   eax
c001878a:	56                   	push   esi
c001878b:	e8 a8 fe ff ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018790:	83 c4 10             	add    esp,0x10
c0018793:	39 dd                	cmp    ebp,ebx
c0018795:	75 e5                	jne    c001877c <VAS::allocatePages(int, int)+0x40>
c0018797:	0f 20 d8             	mov    eax,cr3
c001879a:	0f 22 d8             	mov    cr3,eax
c001879d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187a1:	83 c4 1c             	add    esp,0x1c
c00187a4:	5b                   	pop    ebx
c00187a5:	5e                   	pop    esi
c00187a6:	5f                   	pop    edi
c00187a7:	5d                   	pop    ebp
c00187a8:	c3                   	ret    
c00187a9:	83 ec 0c             	sub    esp,0xc
c00187ac:	68 40 15 03 c0       	push   0xc0031540
c00187b1:	e8 c0 7a 00 00       	call   c0020276 <KePanic(char const*)>
c00187b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00187b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187bd:	83 c4 10             	add    esp,0x10
c00187c0:	eb 9a                	jmp    c001875c <VAS::allocatePages(int, int)+0x20>
c00187c2:	83 ec 0c             	sub    esp,0xc
c00187c5:	53                   	push   ebx
c00187c6:	e8 5a f7 ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c00187cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187cf:	83 c4 10             	add    esp,0x10
c00187d2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00187d7:	77 37                	ja     c0018810 <VAS::allocatePages(int, int)+0xd4>
c00187d9:	85 db                	test   ebx,ebx
c00187db:	7e ba                	jle    c0018797 <VAS::allocatePages(int, int)+0x5b>
c00187dd:	c1 e3 0c             	shl    ebx,0xc
c00187e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187e4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00187e8:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00187eb:	81 cf 00 04 00 00    	or     edi,0x400
c00187f1:	89 c3                	mov    ebx,eax
c00187f3:	e8 df de ff ff       	call   c00166d7 <Phys::allocatePage()>
c00187f8:	57                   	push   edi
c00187f9:	53                   	push   ebx
c00187fa:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018800:	50                   	push   eax
c0018801:	56                   	push   esi
c0018802:	e8 31 fe ff ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018807:	83 c4 10             	add    esp,0x10
c001880a:	39 dd                	cmp    ebp,ebx
c001880c:	75 e5                	jne    c00187f3 <VAS::allocatePages(int, int)+0xb7>
c001880e:	eb 87                	jmp    c0018797 <VAS::allocatePages(int, int)+0x5b>
c0018810:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018815:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001881b:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018822:	74 b5                	je     c00187d9 <VAS::allocatePages(int, int)+0x9d>
c0018824:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018828:	80 ce 01             	or     dh,0x1
c001882b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001882f:	eb a8                	jmp    c00187d9 <VAS::allocatePages(int, int)+0x9d>
c0018831:	90                   	nop

c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018832:	55                   	push   ebp
c0018833:	57                   	push   edi
c0018834:	56                   	push   esi
c0018835:	53                   	push   ebx
c0018836:	83 ec 0c             	sub    esp,0xc
c0018839:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001883d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018841:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018845:	85 db                	test   ebx,ebx
c0018847:	7e 2f                	jle    c0018878 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018849:	c1 e3 0c             	shl    ebx,0xc
c001884c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018850:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018854:	01 d3                	add    ebx,edx
c0018856:	55                   	push   ebp
c0018857:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001885b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001885f:	29 c2                	sub    edx,eax
c0018861:	01 f2                	add    edx,esi
c0018863:	52                   	push   edx
c0018864:	56                   	push   esi
c0018865:	81 c6 00 10 00 00    	add    esi,0x1000
c001886b:	57                   	push   edi
c001886c:	e8 c7 fd ff ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018871:	83 c4 10             	add    esp,0x10
c0018874:	39 de                	cmp    esi,ebx
c0018876:	75 de                	jne    c0018856 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0018878:	0f 20 d8             	mov    eax,cr3
c001887b:	0f 22 d8             	mov    cr3,eax
c001887e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018882:	83 c4 0c             	add    esp,0xc
c0018885:	5b                   	pop    ebx
c0018886:	5e                   	pop    esi
c0018887:	5f                   	pop    edi
c0018888:	5d                   	pop    ebp
c0018889:	c3                   	ret    

c001888a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001888a:	55                   	push   ebp
c001888b:	57                   	push   edi
c001888c:	56                   	push   esi
c001888d:	53                   	push   ebx
c001888e:	83 ec 1c             	sub    esp,0x1c
c0018891:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018895:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018899:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001889d:	09 f8                	or     eax,edi
c001889f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00188a3:	a9 ff 0f 00 00       	test   eax,0xfff
c00188a8:	75 4f                	jne    c00188f9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00188aa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00188ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00188b1:	c1 eb 16             	shr    ebx,0x16
c00188b4:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c00188bb:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c00188bf:	74 52                	je     c0018913 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c00188c1:	0f b6 f2             	movzx  esi,dl
c00188c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00188c8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00188cc:	c1 e8 0a             	shr    eax,0xa
c00188cf:	83 fe 01             	cmp    esi,0x1
c00188d2:	19 d2                	sbb    edx,edx
c00188d4:	c1 e3 0c             	shl    ebx,0xc
c00188d7:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00188dd:	25 fc 0f 00 00       	and    eax,0xffc
c00188e2:	01 d8                	add    eax,ebx
c00188e4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00188e8:	09 d9                	or     ecx,ebx
c00188ea:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00188f1:	83 c4 1c             	add    esp,0x1c
c00188f4:	5b                   	pop    ebx
c00188f5:	5e                   	pop    esi
c00188f6:	5f                   	pop    edi
c00188f7:	5d                   	pop    ebp
c00188f8:	c3                   	ret    
c00188f9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00188fd:	83 ec 0c             	sub    esp,0xc
c0018900:	68 6c 15 03 c0       	push   0xc003156c
c0018905:	e8 6c 79 00 00       	call   c0020276 <KePanic(char const*)>
c001890a:	83 c4 10             	add    esp,0x10
c001890d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018911:	eb 97                	jmp    c00188aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0018913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018917:	e8 bb dd ff ff       	call   c00166d7 <Phys::allocatePage()>
c001891c:	83 ec 0c             	sub    esp,0xc
c001891f:	89 c5                	mov    ebp,eax
c0018921:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018927:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001892b:	6a 01                	push   0x1
c001892d:	e8 f3 f5 ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c0018932:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018939:	6a 01                	push   0x1
c001893b:	50                   	push   eax
c001893c:	55                   	push   ebp
c001893d:	81 cd 07 04 00 00    	or     ebp,0x407
c0018943:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018947:	51                   	push   ecx
c0018948:	e8 e5 fe ff ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001894d:	83 c4 1c             	add    esp,0x1c
c0018950:	68 00 10 00 00       	push   0x1000
c0018955:	6a 00                	push   0x0
c0018957:	50                   	push   eax
c0018958:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001895c:	e8 8f 7b fe ff       	call   c00004f0 <memset>
c0018961:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018965:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018968:	e8 d6 f8 ff ff       	call   c0018243 <Virt::freeKernelVirtualPages(unsigned long)>
c001896d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018970:	83 c4 10             	add    esp,0x10
c0018973:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0018976:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001897a:	e9 42 ff ff ff       	jmp    c00188c1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c001897f:	90                   	nop

c0018980 <VAS::VAS(bool)>:
c0018980:	53                   	push   ebx
c0018981:	83 ec 28             	sub    esp,0x28
c0018984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018988:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001898c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018990:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018997:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001899b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00189a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189a6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00189aa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00189ad:	e8 25 dd ff ff       	call   c00166d7 <Phys::allocatePage()>
c00189b2:	89 c2                	mov    edx,eax
c00189b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00189bb:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00189c1:	83 ec 0c             	sub    esp,0xc
c00189c4:	6a 01                	push   0x1
c00189c6:	e8 5a f5 ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c00189cb:	83 c4 10             	add    esp,0x10
c00189ce:	89 c2                	mov    edx,eax
c00189d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00189d7:	83 ec 0c             	sub    esp,0xc
c00189da:	6a 03                	push   0x3
c00189dc:	6a 01                	push   0x1
c00189de:	52                   	push   edx
c00189df:	50                   	push   eax
c00189e0:	53                   	push   ebx
c00189e1:	e8 4c fe ff ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00189e6:	83 c4 20             	add    esp,0x20
c00189e9:	89 c2                	mov    edx,eax
c00189eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00189f2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00189fa:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018a02:	7f 1d                	jg     c0018a21 <VAS::VAS(bool)+0xa1>
c0018a04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a0f:	c1 e2 02             	shl    edx,0x2
c0018a12:	01 d0                	add    eax,edx
c0018a14:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018a1a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018a1f:	eb d9                	jmp    c00189fa <VAS::VAS(bool)+0x7a>
c0018a21:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018a29:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018a31:	7f 7e                	jg     c0018ab1 <VAS::VAS(bool)+0x131>
c0018a33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a37:	2d 00 02 00 00       	sub    eax,0x200
c0018a3c:	c1 e0 0c             	shl    eax,0xc
c0018a3f:	83 c8 05             	or     eax,0x5
c0018a42:	89 c2                	mov    edx,eax
c0018a44:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a4f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a55:	83 e0 10             	and    eax,0x10
c0018a58:	0f b6 c0             	movzx  eax,al
c0018a5b:	85 c0                	test   eax,eax
c0018a5d:	74 07                	je     c0018a66 <VAS::VAS(bool)+0xe6>
c0018a5f:	b8 00 01 00 00       	mov    eax,0x100
c0018a64:	eb 05                	jmp    c0018a6b <VAS::VAS(bool)+0xeb>
c0018a66:	b8 00 00 00 00       	mov    eax,0x0
c0018a6b:	09 d0                	or     eax,edx
c0018a6d:	89 c1                	mov    ecx,eax
c0018a6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a7a:	c1 e2 02             	shl    edx,0x2
c0018a7d:	01 d0                	add    eax,edx
c0018a7f:	89 ca                	mov    edx,ecx
c0018a81:	89 10                	mov    DWORD PTR [eax],edx
c0018a83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a87:	2d 40 03 00 00       	sub    eax,0x340
c0018a8c:	83 f8 7f             	cmp    eax,0x7f
c0018a8f:	77 16                	ja     c0018aa7 <VAS::VAS(bool)+0x127>
c0018a91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a9c:	c1 e2 02             	shl    edx,0x2
c0018a9f:	01 d0                	add    eax,edx
c0018aa1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018aa7:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018aac:	e9 78 ff ff ff       	jmp    c0018a29 <VAS::VAS(bool)+0xa9>
c0018ab1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018ab6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018abc:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018ac2:	83 e0 10             	and    eax,0x10
c0018ac5:	0f b6 c0             	movzx  eax,al
c0018ac8:	85 c0                	test   eax,eax
c0018aca:	74 07                	je     c0018ad3 <VAS::VAS(bool)+0x153>
c0018acc:	b8 03 41 00 00       	mov    eax,0x4103
c0018ad1:	eb 05                	jmp    c0018ad8 <VAS::VAS(bool)+0x158>
c0018ad3:	b8 03 40 00 00       	mov    eax,0x4003
c0018ad8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018adc:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018adf:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018ae5:	89 02                	mov    DWORD PTR [edx],eax
c0018ae7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018aeb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018aee:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018af3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018af9:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018aff:	83 e0 10             	and    eax,0x10
c0018b02:	0f b6 c0             	movzx  eax,al
c0018b05:	85 c0                	test   eax,eax
c0018b07:	74 07                	je     c0018b10 <VAS::VAS(bool)+0x190>
c0018b09:	b8 00 01 00 00       	mov    eax,0x100
c0018b0e:	eb 05                	jmp    c0018b15 <VAS::VAS(bool)+0x195>
c0018b10:	b8 00 00 00 00       	mov    eax,0x0
c0018b15:	09 c2                	or     edx,eax
c0018b17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b1e:	05 fc 0f 00 00       	add    eax,0xffc
c0018b23:	83 ca 03             	or     edx,0x3
c0018b26:	89 10                	mov    DWORD PTR [eax],edx
c0018b28:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b33:	83 ec 0c             	sub    esp,0xc
c0018b36:	50                   	push   eax
c0018b37:	e8 00 2a 00 00       	call   c001b53c <Device::getName()>
c0018b3c:	83 c4 10             	add    esp,0x10
c0018b3f:	83 ec 08             	sub    esp,0x8
c0018b42:	68 3c 17 03 c0       	push   0xc003173c
c0018b47:	50                   	push   eax
c0018b48:	e8 03 7c fe ff       	call   c0000750 <strcmp>
c0018b4d:	83 c4 10             	add    esp,0x10
c0018b50:	85 c0                	test   eax,eax
c0018b52:	0f 94 c0             	sete   al
c0018b55:	0f b6 c0             	movzx  eax,al
c0018b58:	85 c0                	test   eax,eax
c0018b5a:	74 68                	je     c0018bc4 <VAS::VAS(bool)+0x244>
c0018b5c:	fa                   	cli    
c0018b5d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b68:	05 7c 09 00 00       	add    eax,0x97c
c0018b6d:	83 ec 0c             	sub    esp,0xc
c0018b70:	50                   	push   eax
c0018b71:	e8 40 d3 ff ff       	call   c0015eb6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b76:	83 c4 10             	add    esp,0x10
c0018b79:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b7e:	89 c3                	mov    ebx,eax
c0018b80:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b85:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b8b:	05 7c 09 00 00       	add    eax,0x97c
c0018b90:	83 ec 0c             	sub    esp,0xc
c0018b93:	50                   	push   eax
c0018b94:	e8 1d d3 ff ff       	call   c0015eb6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b99:	83 c4 10             	add    esp,0x10
c0018b9c:	83 ec 08             	sub    esp,0x8
c0018b9f:	50                   	push   eax
c0018ba0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018ba4:	e8 7b f6 ff ff       	call   c0018224 <VAS::getPageTableEntry(unsigned long)>
c0018ba9:	83 c4 10             	add    esp,0x10
c0018bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018bb3:	6a 11                	push   0x11
c0018bb5:	53                   	push   ebx
c0018bb6:	50                   	push   eax
c0018bb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018bbb:	e8 78 fa ff ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018bc0:	83 c4 10             	add    esp,0x10
c0018bc3:	fb                   	sti    
c0018bc4:	90                   	nop
c0018bc5:	83 c4 28             	add    esp,0x28
c0018bc8:	5b                   	pop    ebx
c0018bc9:	c3                   	ret    

c0018bca <VAS::evict(unsigned long)>:
c0018bca:	55                   	push   ebp
c0018bcb:	57                   	push   edi
c0018bcc:	56                   	push   esi
c0018bcd:	53                   	push   ebx
c0018bce:	83 ec 1c             	sub    esp,0x1c
c0018bd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bd5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018bd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bdd:	e8 a1 f4 ff ff       	call   c0018083 <Virt::allocateSwapfilePage()>
c0018be2:	89 c7                	mov    edi,eax
c0018be4:	a1 6c 3c 03 c0       	mov    eax,ds:0xc0033c6c
c0018be9:	85 c0                	test   eax,eax
c0018beb:	7e 40                	jle    c0018c2d <VAS::evict(unsigned long)+0x63>
c0018bed:	89 ee                	mov    esi,ebp
c0018bef:	31 db                	xor    ebx,ebx
c0018bf1:	83 ec 0c             	sub    esp,0xc
c0018bf4:	57                   	push   edi
c0018bf5:	e8 73 f4 ff ff       	call   c001806d <Virt::swapIDToSector(unsigned long)>
c0018bfa:	89 34 24             	mov    DWORD PTR [esp],esi
c0018bfd:	01 d8                	add    eax,ebx
c0018bff:	6a 01                	push   0x1
c0018c01:	31 d2                	xor    edx,edx
c0018c03:	83 c3 01             	add    ebx,0x1
c0018c06:	52                   	push   edx
c0018c07:	81 c6 00 02 00 00    	add    esi,0x200
c0018c0d:	50                   	push   eax
c0018c0e:	0f be 05 78 3c 03 c0 	movsx  eax,BYTE PTR ds:0xc0033c78
c0018c15:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018c1c:	50                   	push   eax
c0018c1d:	e8 1a 3b 00 00       	call   c001c73c <LogicalDisk::write(unsigned long long, int, void*)>
c0018c22:	83 c4 20             	add    esp,0x20
c0018c25:	39 1d 6c 3c 03 c0    	cmp    DWORD PTR ds:0xc0033c6c,ebx
c0018c2b:	7f c4                	jg     c0018bf1 <VAS::evict(unsigned long)+0x27>
c0018c2d:	83 ec 08             	sub    esp,0x8
c0018c30:	c1 e7 0c             	shl    edi,0xc
c0018c33:	55                   	push   ebp
c0018c34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c38:	50                   	push   eax
c0018c39:	e8 e6 f5 ff ff       	call   c0018224 <VAS::getPageTableEntry(unsigned long)>
c0018c3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018c40:	89 d3                	mov    ebx,edx
c0018c42:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018c48:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018c4e:	09 d7                	or     edi,edx
c0018c50:	89 38                	mov    DWORD PTR [eax],edi
c0018c52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c55:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018c5b:	83 c2 01             	add    edx,0x1
c0018c5e:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018c64:	e8 05 da ff ff       	call   c001666e <Phys::freePage(unsigned long)>
c0018c69:	0f 20 d8             	mov    eax,cr3
c0018c6c:	0f 22 d8             	mov    cr3,eax
c0018c6f:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018c75:	51                   	push   ecx
c0018c76:	55                   	push   ebp
c0018c77:	53                   	push   ebx
c0018c78:	68 90 15 03 c0       	push   0xc0031590
c0018c7d:	e8 db 05 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018c82:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018c87:	c7 44 24 50 4a 17 03 c0 	mov    DWORD PTR [esp+0x50],0xc003174a
c0018c8f:	8d 50 01             	lea    edx,[eax+0x1]
c0018c92:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018c96:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018c9c:	83 c4 3c             	add    esp,0x3c
c0018c9f:	5b                   	pop    ebx
c0018ca0:	5e                   	pop    esi
c0018ca1:	5f                   	pop    edi
c0018ca2:	5d                   	pop    ebp
c0018ca3:	e9 b5 05 00 00       	jmp    c001925d <Dbg::kprintf(char const*, ...)>

c0018ca8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018ca8:	55                   	push   ebp
c0018ca9:	57                   	push   edi
c0018caa:	56                   	push   esi
c0018cab:	53                   	push   ebx
c0018cac:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018cb2:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018cb9:	89 f3                	mov    ebx,esi
c0018cbb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018cc1:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018cc7:	77 22                	ja     c0018ceb <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018cc9:	83 ec 08             	sub    esp,0x8
c0018ccc:	56                   	push   esi
c0018ccd:	68 6d 17 03 c0       	push   0xc003176d
c0018cd2:	e8 86 05 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018cd7:	83 c4 10             	add    esp,0x10
c0018cda:	85 db                	test   ebx,ebx
c0018cdc:	75 2a                	jne    c0018d08 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018cde:	31 c0                	xor    eax,eax
c0018ce0:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018ce6:	5b                   	pop    ebx
c0018ce7:	5e                   	pop    esi
c0018ce8:	5f                   	pop    edi
c0018ce9:	5d                   	pop    ebp
c0018cea:	c3                   	ret    
c0018ceb:	83 ec 0c             	sub    esp,0xc
c0018cee:	68 5b 17 03 c0       	push   0xc003175b
c0018cf3:	e8 7e 75 00 00       	call   c0020276 <KePanic(char const*)>
c0018cf8:	5f                   	pop    edi
c0018cf9:	5d                   	pop    ebp
c0018cfa:	56                   	push   esi
c0018cfb:	68 6d 17 03 c0       	push   0xc003176d
c0018d00:	e8 58 05 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018d05:	83 c4 10             	add    esp,0x10
c0018d08:	83 ec 08             	sub    esp,0x8
c0018d0b:	53                   	push   ebx
c0018d0c:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018d13:	51                   	push   ecx
c0018d14:	e8 0b f5 ff ff       	call   c0018224 <VAS::getPageTableEntry(unsigned long)>
c0018d19:	83 c4 10             	add    esp,0x10
c0018d1c:	89 c2                	mov    edx,eax
c0018d1e:	85 c0                	test   eax,eax
c0018d20:	74 bc                	je     c0018cde <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018d22:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018d24:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018d2a:	0f 85 c0 00 00 00    	jne    c0018df0 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018d30:	89 e8                	mov    eax,ebp
c0018d32:	25 01 04 00 00       	and    eax,0x401
c0018d37:	3d 00 04 00 00       	cmp    eax,0x400
c0018d3c:	75 a0                	jne    c0018cde <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018d3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d42:	c1 ed 0c             	shr    ebp,0xc
c0018d45:	e8 8d d9 ff ff       	call   c00166d7 <Phys::allocatePage()>
c0018d4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d4e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018d50:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018d56:	09 c1                	or     ecx,eax
c0018d58:	81 c9 01 08 00 00    	or     ecx,0x801
c0018d5e:	89 0a                	mov    DWORD PTR [edx],ecx
c0018d60:	8b 15 6c 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c6c
c0018d66:	85 d2                	test   edx,edx
c0018d68:	7e 40                	jle    c0018daa <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018d6a:	89 df                	mov    edi,ebx
c0018d6c:	31 f6                	xor    esi,esi
c0018d6e:	83 ec 0c             	sub    esp,0xc
c0018d71:	55                   	push   ebp
c0018d72:	e8 f6 f2 ff ff       	call   c001806d <Virt::swapIDToSector(unsigned long)>
c0018d77:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018d7a:	01 f0                	add    eax,esi
c0018d7c:	6a 01                	push   0x1
c0018d7e:	31 d2                	xor    edx,edx
c0018d80:	83 c6 01             	add    esi,0x1
c0018d83:	52                   	push   edx
c0018d84:	81 c7 00 02 00 00    	add    edi,0x200
c0018d8a:	50                   	push   eax
c0018d8b:	0f be 05 78 3c 03 c0 	movsx  eax,BYTE PTR ds:0xc0033c78
c0018d92:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018d99:	50                   	push   eax
c0018d9a:	e8 31 39 00 00       	call   c001c6d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0018d9f:	83 c4 20             	add    esp,0x20
c0018da2:	39 35 6c 3c 03 c0    	cmp    DWORD PTR ds:0xc0033c6c,esi
c0018da8:	7f c4                	jg     c0018d6e <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018daa:	83 ec 04             	sub    esp,0x4
c0018dad:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018db2:	83 e8 01             	sub    eax,0x1
c0018db5:	50                   	push   eax
c0018db6:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018dbb:	53                   	push   ebx
c0018dbc:	68 80 17 03 c0       	push   0xc0031780
c0018dc1:	e8 97 04 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018dc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018dc9:	e8 7c f2 ff ff       	call   c001804a <Virt::freeSwapfilePage(unsigned long)>
c0018dce:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018dd3:	83 c4 10             	add    esp,0x10
c0018dd6:	83 e8 01             	sub    eax,0x1
c0018dd9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018dde:	85 c0                	test   eax,eax
c0018de0:	75 01                	jne    c0018de3 <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0018de2:	fb                   	sti    
c0018de3:	0f 20 d8             	mov    eax,cr3
c0018de6:	0f 22 d8             	mov    cr3,eax
c0018de9:	b0 01                	mov    al,0x1
c0018deb:	e9 f0 fe ff ff       	jmp    c0018ce0 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0018df0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018df4:	bd 00 10 00 00       	mov    ebp,0x1000
c0018df9:	83 ec 0c             	sub    esp,0xc
c0018dfc:	89 de                	mov    esi,ebx
c0018dfe:	68 c0 15 03 c0       	push   0xc00315c0
c0018e03:	e8 55 04 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018e08:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018e0c:	e8 c6 d8 ff ff       	call   c00166d7 <Phys::allocatePage()>
c0018e11:	89 e9                	mov    ecx,ebp
c0018e13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e19:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018e1b:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018e21:	09 c8                	or     eax,ecx
c0018e23:	83 c8 02             	or     eax,0x2
c0018e26:	89 02                	mov    DWORD PTR [edx],eax
c0018e28:	0f 20 d8             	mov    eax,cr3
c0018e2b:	0f 22 d8             	mov    cr3,eax
c0018e2e:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018e32:	89 df                	mov    edi,ebx
c0018e34:	89 e9                	mov    ecx,ebp
c0018e36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e38:	b0 01                	mov    al,0x1
c0018e3a:	83 c4 10             	add    esp,0x10
c0018e3d:	e9 9e fe ff ff       	jmp    c0018ce0 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c0018e42 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018e42:	55                   	push   ebp
c0018e43:	57                   	push   edi
c0018e44:	56                   	push   esi
c0018e45:	53                   	push   ebx
c0018e46:	83 ec 28             	sub    esp,0x28
c0018e49:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0018e4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e51:	50                   	push   eax
c0018e52:	e8 ce f0 ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c0018e57:	83 c4 0c             	add    esp,0xc
c0018e5a:	89 c5                	mov    ebp,eax
c0018e5c:	6a 07                	push   0x7
c0018e5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018e62:	52                   	push   edx
c0018e63:	56                   	push   esi
c0018e64:	e8 d3 f8 ff ff       	call   c001873c <VAS::allocatePages(int, int)>
c0018e69:	83 c4 10             	add    esp,0x10
c0018e6c:	89 c7                	mov    edi,eax
c0018e6e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018e72:	85 c9                	test   ecx,ecx
c0018e74:	74 2f                	je     c0018ea5 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018e76:	31 db                	xor    ebx,ebx
c0018e78:	e8 5a d8 ff ff       	call   c00166d7 <Phys::allocatePage()>
c0018e7d:	83 c3 01             	add    ebx,0x1
c0018e80:	6a 03                	push   0x3
c0018e82:	55                   	push   ebp
c0018e83:	50                   	push   eax
c0018e84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e88:	56                   	push   esi
c0018e89:	e8 aa f7 ff ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e8e:	6a 07                	push   0x7
c0018e90:	57                   	push   edi
c0018e91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e95:	50                   	push   eax
c0018e96:	56                   	push   esi
c0018e97:	e8 9c f7 ff ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e9c:	83 c4 20             	add    esp,0x20
c0018e9f:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0018ea3:	75 d3                	jne    c0018e78 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018ea5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ea9:	89 28                	mov    DWORD PTR [eax],ebp
c0018eab:	83 c4 1c             	add    esp,0x1c
c0018eae:	89 f8                	mov    eax,edi
c0018eb0:	5b                   	pop    ebx
c0018eb1:	5e                   	pop    esi
c0018eb2:	5f                   	pop    edi
c0018eb3:	5d                   	pop    ebp
c0018eb4:	c3                   	ret    
c0018eb5:	90                   	nop

c0018eb6 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018eb6:	53                   	push   ebx
c0018eb7:	83 ec 14             	sub    esp,0x14
c0018eba:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018ebe:	68 e0 15 03 c0       	push   0xc00315e0
c0018ec3:	e8 95 03 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018ec8:	c7 04 24 40 16 03 c0 	mov    DWORD PTR [esp],0xc0031640
c0018ecf:	e8 89 03 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018ed4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018ed8:	83 c4 18             	add    esp,0x18
c0018edb:	5b                   	pop    ebx
c0018edc:	e9 62 f3 ff ff       	jmp    c0018243 <Virt::freeKernelVirtualPages(unsigned long)>
c0018ee1:	90                   	nop

c0018ee2 <VAS::scanForEviction()>:
c0018ee2:	57                   	push   edi
c0018ee3:	56                   	push   esi
c0018ee4:	31 f6                	xor    esi,esi
c0018ee6:	53                   	push   ebx
c0018ee7:	83 ec 10             	sub    esp,0x10
c0018eea:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018eee:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018ef1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018ef7:	75 0e                	jne    c0018f07 <VAS::scanForEviction()+0x25>
c0018ef9:	89 da                	mov    edx,ebx
c0018efb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018efe:	c1 ea 16             	shr    edx,0x16
c0018f01:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018f05:	74 57                	je     c0018f5e <VAS::scanForEviction()+0x7c>
c0018f07:	53                   	push   ebx
c0018f08:	57                   	push   edi
c0018f09:	e8 16 f3 ff ff       	call   c0018224 <VAS::getPageTableEntry(unsigned long)>
c0018f0e:	5a                   	pop    edx
c0018f0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0018f11:	59                   	pop    ecx
c0018f12:	89 d1                	mov    ecx,edx
c0018f14:	c1 e9 0c             	shr    ecx,0xc
c0018f17:	74 10                	je     c0018f29 <VAS::scanForEviction()+0x47>
c0018f19:	89 d1                	mov    ecx,edx
c0018f1b:	81 e1 01 08 00 00    	and    ecx,0x801
c0018f21:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018f27:	74 40                	je     c0018f69 <VAS::scanForEviction()+0x87>
c0018f29:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018f2f:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018f35:	76 2d                	jbe    c0018f64 <VAS::scanForEviction()+0x82>
c0018f37:	83 c6 01             	add    esi,0x1
c0018f3a:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018f41:	83 fe 03             	cmp    esi,0x3
c0018f44:	74 32                	je     c0018f78 <VAS::scanForEviction()+0x96>
c0018f46:	31 db                	xor    ebx,ebx
c0018f48:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018f4e:	75 b7                	jne    c0018f07 <VAS::scanForEviction()+0x25>
c0018f50:	89 da                	mov    edx,ebx
c0018f52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018f55:	c1 ea 16             	shr    edx,0x16
c0018f58:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018f5c:	75 a9                	jne    c0018f07 <VAS::scanForEviction()+0x25>
c0018f5e:	81 c3 00 00 40 00    	add    ebx,0x400000
c0018f64:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0018f67:	eb 88                	jmp    c0018ef1 <VAS::scanForEviction()+0xf>
c0018f69:	f6 c2 20             	test   dl,0x20
c0018f6c:	74 13                	je     c0018f81 <VAS::scanForEviction()+0x9f>
c0018f6e:	83 e2 df             	and    edx,0xffffffdf
c0018f71:	89 10                	mov    DWORD PTR [eax],edx
c0018f73:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018f76:	eb b1                	jmp    c0018f29 <VAS::scanForEviction()+0x47>
c0018f78:	83 c4 10             	add    esp,0x10
c0018f7b:	31 c0                	xor    eax,eax
c0018f7d:	5b                   	pop    ebx
c0018f7e:	5e                   	pop    esi
c0018f7f:	5f                   	pop    edi
c0018f80:	c3                   	ret    
c0018f81:	83 ec 08             	sub    esp,0x8
c0018f84:	89 d0                	mov    eax,edx
c0018f86:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018f8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018f8f:	53                   	push   ebx
c0018f90:	68 95 17 03 c0       	push   0xc0031795
c0018f95:	e8 c3 02 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018f9a:	58                   	pop    eax
c0018f9b:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018f9e:	5a                   	pop    edx
c0018f9f:	51                   	push   ecx
c0018fa0:	57                   	push   edi
c0018fa1:	e8 24 fc ff ff       	call   c0018bca <VAS::evict(unsigned long)>
c0018fa6:	5b                   	pop    ebx
c0018fa7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0018faa:	5e                   	pop    esi
c0018fab:	50                   	push   eax
c0018fac:	68 a9 17 03 c0       	push   0xc00317a9
c0018fb1:	e8 a7 02 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018fb6:	58                   	pop    eax
c0018fb7:	5a                   	pop    edx
c0018fb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fbc:	50                   	push   eax
c0018fbd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fc1:	68 bc 17 03 c0       	push   0xc00317bc
c0018fc6:	e8 92 02 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0018fcb:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018fce:	83 c4 10             	add    esp,0x10
c0018fd1:	81 c1 00 10 00 00    	add    ecx,0x1000
c0018fd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fdb:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0018fde:	83 c4 10             	add    esp,0x10
c0018fe1:	5b                   	pop    ebx
c0018fe2:	5e                   	pop    esi
c0018fe3:	5f                   	pop    edi
c0018fe4:	c3                   	ret    

c0018fe5 <mapVASFirstTime>:
c0018fe5:	55                   	push   ebp
c0018fe6:	57                   	push   edi
c0018fe7:	56                   	push   esi
c0018fe8:	53                   	push   ebx
c0018fe9:	83 ec 0c             	sub    esp,0xc
c0018fec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ff1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018ff4:	83 fa 01             	cmp    edx,0x1
c0018ff7:	0f 84 cb 00 00 00    	je     c00190c8 <mapVASFirstTime+0xe3>
c0018ffd:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0019000:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0019003:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0019008:	c1 e5 15             	shl    ebp,0x15
c001900b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0019010:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0019016:	29 eb                	sub    ebx,ebp
c0019018:	29 ef                	sub    edi,ebp
c001901a:	e8 b8 d6 ff ff       	call   c00166d7 <Phys::allocatePage()>
c001901f:	83 ec 0c             	sub    esp,0xc
c0019022:	68 03 04 00 00       	push   0x403
c0019027:	6a 01                	push   0x1
c0019029:	53                   	push   ebx
c001902a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019030:	50                   	push   eax
c0019031:	56                   	push   esi
c0019032:	e8 fb f7 ff ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019037:	83 c4 20             	add    esp,0x20
c001903a:	39 fb                	cmp    ebx,edi
c001903c:	75 dc                	jne    c001901a <mapVASFirstTime+0x35>
c001903e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0019043:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0019048:	29 eb                	sub    ebx,ebp
c001904a:	29 ef                	sub    edi,ebp
c001904c:	e8 86 d6 ff ff       	call   c00166d7 <Phys::allocatePage()>
c0019051:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0019055:	83 fa 01             	cmp    edx,0x1
c0019058:	19 d2                	sbb    edx,edx
c001905a:	83 ec 0c             	sub    esp,0xc
c001905d:	83 e2 04             	and    edx,0x4
c0019060:	81 c2 03 04 00 00    	add    edx,0x403
c0019066:	52                   	push   edx
c0019067:	6a 01                	push   0x1
c0019069:	53                   	push   ebx
c001906a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019070:	50                   	push   eax
c0019071:	56                   	push   esi
c0019072:	e8 bb f7 ff ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019077:	83 c4 20             	add    esp,0x20
c001907a:	39 df                	cmp    edi,ebx
c001907c:	75 ce                	jne    c001904c <mapVASFirstTime+0x67>
c001907e:	83 ec 0c             	sub    esp,0xc
c0019081:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c0019086:	6a 04                	push   0x4
c0019088:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c001908e:	6a ff                	push   0xffffffff
c0019090:	c1 eb 0c             	shr    ebx,0xc
c0019093:	53                   	push   ebx
c0019094:	68 00 50 03 c0       	push   0xc0035000
c0019099:	56                   	push   esi
c001909a:	e8 1f f3 ff ff       	call   c00183be <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001909f:	83 c4 14             	add    esp,0x14
c00190a2:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00190a7:	6a 04                	push   0x4
c00190a9:	6a ff                	push   0xffffffff
c00190ab:	53                   	push   ebx
c00190ac:	68 00 50 03 c0       	push   0xc0035000
c00190b1:	50                   	push   eax
c00190b2:	e8 07 f3 ff ff       	call   c00183be <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00190b7:	0f 20 d8             	mov    eax,cr3
c00190ba:	0f 22 d8             	mov    cr3,eax
c00190bd:	83 c4 20             	add    esp,0x20
c00190c0:	83 c4 0c             	add    esp,0xc
c00190c3:	5b                   	pop    ebx
c00190c4:	5e                   	pop    esi
c00190c5:	5f                   	pop    edi
c00190c6:	5d                   	pop    ebp
c00190c7:	c3                   	ret    
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	68 c9 17 03 c0       	push   0xc00317c9
c00190d0:	e8 88 01 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00190d5:	83 c4 10             	add    esp,0x10
c00190d8:	83 c4 0c             	add    esp,0xc
c00190db:	5b                   	pop    ebx
c00190dc:	5e                   	pop    esi
c00190dd:	5f                   	pop    edi
c00190de:	5d                   	pop    ebp
c00190df:	c3                   	ret    

c00190e0 <__cxa_atexit>:
c00190e0:	31 c0                	xor    eax,eax
c00190e2:	c3                   	ret    

c00190e3 <__cxa_finalize>:
c00190e3:	c3                   	ret    

c00190e4 <__stack_chk_fail>:
c00190e4:	55                   	push   ebp
c00190e5:	89 e5                	mov    ebp,esp
c00190e7:	83 ec 10             	sub    esp,0x10
c00190ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00190ed:	68 e2 17 03 c0       	push   0xc00317e2
c00190f2:	e8 66 01 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00190f7:	58                   	pop    eax
c00190f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00190fb:	5a                   	pop    edx
c00190fc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00190ff:	68 e2 17 03 c0       	push   0xc00317e2
c0019104:	e8 54 01 00 00       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0019109:	c7 04 24 ea 17 03 c0 	mov    DWORD PTR [esp],0xc00317ea
c0019110:	e8 61 71 00 00       	call   c0020276 <KePanic(char const*)>
c0019115:	83 c4 10             	add    esp,0x10
c0019118:	c9                   	leave  
c0019119:	c3                   	ret    

c001911a <__cxa_pure_virtual>:
c001911a:	83 ec 18             	sub    esp,0x18
c001911d:	68 02 18 03 c0       	push   0xc0031802
c0019122:	e8 4f 71 00 00       	call   c0020276 <KePanic(char const*)>
c0019127:	83 c4 1c             	add    esp,0x1c
c001912a:	c3                   	ret    

c001912b <operator new[](unsigned long)>:
c001912b:	e9 8e d2 ff ff       	jmp    c00163be <malloc>

c0019130 <operator delete(void*, unsigned long)>:
c0019130:	e9 b9 d2 ff ff       	jmp    c00163ee <rfree>

c0019135 <operator delete[](void*)>:
c0019135:	e9 b4 d2 ff ff       	jmp    c00163ee <rfree>

c001913a <operator delete[](void*, unsigned long)>:
c001913a:	e9 af d2 ff ff       	jmp    c00163ee <rfree>

c001913f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001913f:	55                   	push   ebp
c0019140:	57                   	push   edi
c0019141:	56                   	push   esi
c0019142:	be 0b 13 03 c0       	mov    esi,0xc003130b
c0019147:	53                   	push   ebx
c0019148:	83 ec 20             	sub    esp,0x20
c001914b:	a0 0a 13 03 c0       	mov    al,ds:0xc003130a
c0019150:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019154:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019158:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001915c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019160:	b8 10 00 00 00       	mov    eax,0x10
c0019165:	f7 c7 02 00 00 00    	test   edi,0x2
c001916b:	75 60                	jne    c00191cd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c001916d:	89 c1                	mov    ecx,eax
c001916f:	c1 e9 02             	shr    ecx,0x2
c0019172:	fc                   	cld    
c0019173:	31 d2                	xor    edx,edx
c0019175:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019177:	a8 02                	test   al,0x2
c0019179:	74 0b                	je     c0019186 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c001917b:	66 8b 16             	mov    dx,WORD PTR [esi]
c001917e:	66 89 17             	mov    WORD PTR [edi],dx
c0019181:	ba 02 00 00 00       	mov    edx,0x2
c0019186:	a8 01                	test   al,0x1
c0019188:	74 06                	je     c0019190 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c001918a:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c001918d:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0019190:	89 ee                	mov    esi,ebp
c0019192:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0019196:	eb 02                	jmp    c001919a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0019198:	89 c6                	mov    esi,eax
c001919a:	31 d2                	xor    edx,edx
c001919c:	83 c1 01             	add    ecx,0x1
c001919f:	89 f0                	mov    eax,esi
c00191a1:	f7 f3                	div    ebx
c00191a3:	39 de                	cmp    esi,ebx
c00191a5:	73 f1                	jae    c0019198 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c00191a7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00191aa:	eb 02                	jmp    c00191ae <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c00191ac:	89 c5                	mov    ebp,eax
c00191ae:	31 d2                	xor    edx,edx
c00191b0:	83 e9 01             	sub    ecx,0x1
c00191b3:	89 e8                	mov    eax,ebp
c00191b5:	f7 f3                	div    ebx
c00191b7:	39 dd                	cmp    ebp,ebx
c00191b9:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00191bd:	88 11                	mov    BYTE PTR [ecx],dl
c00191bf:	73 eb                	jae    c00191ac <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00191c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191c5:	83 c4 20             	add    esp,0x20
c00191c8:	5b                   	pop    ebx
c00191c9:	5e                   	pop    esi
c00191ca:	5f                   	pop    edi
c00191cb:	5d                   	pop    ebp
c00191cc:	c3                   	ret    
c00191cd:	66 8b 16             	mov    dx,WORD PTR [esi]
c00191d0:	83 c7 02             	add    edi,0x2
c00191d3:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c00191d7:	83 c6 02             	add    esi,0x2
c00191da:	83 e8 02             	sub    eax,0x2
c00191dd:	eb 8e                	jmp    c001916d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c00191df <Dbg::logc(char)>:
c00191df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00191e3:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00191ea:	75 12                	jne    c00191fe <Dbg::logc(char)+0x1f>
c00191ec:	ba fd 03 00 00       	mov    edx,0x3fd
c00191f1:	ec                   	in     al,dx
c00191f2:	a8 20                	test   al,0x20
c00191f4:	74 fb                	je     c00191f1 <Dbg::logc(char)+0x12>
c00191f6:	ba f8 03 00 00       	mov    edx,0x3f8
c00191fb:	88 c8                	mov    al,cl
c00191fd:	ee                   	out    dx,al
c00191fe:	c3                   	ret    

c00191ff <Dbg::logs(char*)>:
c00191ff:	53                   	push   ebx
c0019200:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019204:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019207:	85 c0                	test   eax,eax
c0019209:	74 11                	je     c001921c <Dbg::logs(char*)+0x1d>
c001920b:	83 c3 01             	add    ebx,0x1
c001920e:	50                   	push   eax
c001920f:	e8 cb ff ff ff       	call   c00191df <Dbg::logc(char)>
c0019214:	58                   	pop    eax
c0019215:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019218:	85 c0                	test   eax,eax
c001921a:	75 ef                	jne    c001920b <Dbg::logs(char*)+0xc>
c001921c:	5b                   	pop    ebx
c001921d:	c3                   	ret    

c001921e <Dbg::logWriteInt(unsigned int)>:
c001921e:	83 ec 10             	sub    esp,0x10
c0019221:	6a 0a                	push   0xa
c0019223:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019227:	50                   	push   eax
c0019228:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001922c:	50                   	push   eax
c001922d:	e8 0d ff ff ff       	call   c001913f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019232:	50                   	push   eax
c0019233:	e8 c7 ff ff ff       	call   c00191ff <Dbg::logs(char*)>
c0019238:	83 c4 20             	add    esp,0x20
c001923b:	c3                   	ret    

c001923c <Dbg::logWriteIntBase(unsigned int, int)>:
c001923c:	83 ec 10             	sub    esp,0x10
c001923f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019243:	50                   	push   eax
c0019244:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019248:	50                   	push   eax
c0019249:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001924d:	52                   	push   edx
c001924e:	e8 ec fe ff ff       	call   c001913f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019253:	50                   	push   eax
c0019254:	e8 a6 ff ff ff       	call   c00191ff <Dbg::logs(char*)>
c0019259:	83 c4 20             	add    esp,0x20
c001925c:	c3                   	ret    

c001925d <Dbg::kprintf(char const*, ...)>:
c001925d:	55                   	push   ebp
c001925e:	57                   	push   edi
c001925f:	56                   	push   esi
c0019260:	53                   	push   ebx
c0019261:	83 ec 0c             	sub    esp,0xc
c0019264:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019268:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001926f:	74 08                	je     c0019279 <Dbg::kprintf(char const*, ...)+0x1c>
c0019271:	83 c4 0c             	add    esp,0xc
c0019274:	5b                   	pop    ebx
c0019275:	5e                   	pop    esi
c0019276:	5f                   	pop    edi
c0019277:	5d                   	pop    ebp
c0019278:	c3                   	ret    
c0019279:	8d 44 24 24          	lea    eax,[esp+0x24]
c001927d:	31 ff                	xor    edi,edi
c001927f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019283:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019286:	85 c0                	test   eax,eax
c0019288:	74 e7                	je     c0019271 <Dbg::kprintf(char const*, ...)+0x14>
c001928a:	8d 77 01             	lea    esi,[edi+0x1]
c001928d:	83 f8 25             	cmp    eax,0x25
c0019290:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019293:	75 47                	jne    c00192dc <Dbg::kprintf(char const*, ...)+0x7f>
c0019295:	83 c7 02             	add    edi,0x2
c0019298:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001929b:	8d 34 3b             	lea    esi,[ebx+edi*1]
c001929e:	83 e8 25             	sub    eax,0x25
c00192a1:	0f b6 c0             	movzx  eax,al
c00192a4:	83 f8 53             	cmp    eax,0x53
c00192a7:	0f 87 ce 00 00 00    	ja     c001937b <Dbg::kprintf(char const*, ...)+0x11e>
c00192ad:	ff 24 85 18 18 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce7e8]
c00192b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192b8:	89 c8                	mov    eax,ecx
c00192ba:	83 c1 04             	add    ecx,0x4
c00192bd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192c1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00192c3:	55                   	push   ebp
c00192c4:	e8 55 ff ff ff       	call   c001921e <Dbg::logWriteInt(unsigned int)>
c00192c9:	58                   	pop    eax
c00192ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00192cd:	85 c0                	test   eax,eax
c00192cf:	74 a0                	je     c0019271 <Dbg::kprintf(char const*, ...)+0x14>
c00192d1:	8d 77 01             	lea    esi,[edi+0x1]
c00192d4:	83 f8 25             	cmp    eax,0x25
c00192d7:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00192da:	74 b9                	je     c0019295 <Dbg::kprintf(char const*, ...)+0x38>
c00192dc:	50                   	push   eax
c00192dd:	89 f7                	mov    edi,esi
c00192df:	e8 fb fe ff ff       	call   c00191df <Dbg::logc(char)>
c00192e4:	89 ee                	mov    esi,ebp
c00192e6:	58                   	pop    eax
c00192e7:	eb e1                	jmp    c00192ca <Dbg::kprintf(char const*, ...)+0x6d>
c00192e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192ed:	89 c8                	mov    eax,ecx
c00192ef:	83 c1 04             	add    ecx,0x4
c00192f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00192f4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192f8:	50                   	push   eax
c00192f9:	e8 01 ff ff ff       	call   c00191ff <Dbg::logs(char*)>
c00192fe:	58                   	pop    eax
c00192ff:	eb c9                	jmp    c00192ca <Dbg::kprintf(char const*, ...)+0x6d>
c0019301:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019305:	89 d0                	mov    eax,edx
c0019307:	83 c2 04             	add    edx,0x4
c001930a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001930e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019310:	50                   	push   eax
c0019311:	e8 08 ff ff ff       	call   c001921e <Dbg::logWriteInt(unsigned int)>
c0019316:	58                   	pop    eax
c0019317:	eb b1                	jmp    c00192ca <Dbg::kprintf(char const*, ...)+0x6d>
c0019319:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001931d:	89 d0                	mov    eax,edx
c001931f:	83 c2 04             	add    edx,0x4
c0019322:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0019325:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019329:	50                   	push   eax
c001932a:	e8 b0 fe ff ff       	call   c00191df <Dbg::logc(char)>
c001932f:	58                   	pop    eax
c0019330:	eb 98                	jmp    c00192ca <Dbg::kprintf(char const*, ...)+0x6d>
c0019332:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019336:	89 c8                	mov    eax,ecx
c0019338:	83 c1 04             	add    ecx,0x4
c001933b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001933f:	6a 10                	push   0x10
c0019341:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019343:	51                   	push   ecx
c0019344:	e8 f3 fe ff ff       	call   c001923c <Dbg::logWriteIntBase(unsigned int, int)>
c0019349:	5d                   	pop    ebp
c001934a:	58                   	pop    eax
c001934b:	e9 7a ff ff ff       	jmp    c00192ca <Dbg::kprintf(char const*, ...)+0x6d>
c0019350:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019354:	89 d0                	mov    eax,edx
c0019356:	83 c2 08             	add    edx,0x8
c0019359:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001935d:	6a 10                	push   0x10
c001935f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019361:	50                   	push   eax
c0019362:	e8 d5 fe ff ff       	call   c001923c <Dbg::logWriteIntBase(unsigned int, int)>
c0019367:	58                   	pop    eax
c0019368:	5a                   	pop    edx
c0019369:	e9 5c ff ff ff       	jmp    c00192ca <Dbg::kprintf(char const*, ...)+0x6d>
c001936e:	6a 25                	push   0x25
c0019370:	e8 6a fe ff ff       	call   c00191df <Dbg::logc(char)>
c0019375:	5a                   	pop    edx
c0019376:	e9 4f ff ff ff       	jmp    c00192ca <Dbg::kprintf(char const*, ...)+0x6d>
c001937b:	6a 25                	push   0x25
c001937d:	e8 5d fe ff ff       	call   c00191df <Dbg::logc(char)>
c0019382:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0019386:	50                   	push   eax
c0019387:	e8 53 fe ff ff       	call   c00191df <Dbg::logc(char)>
c001938c:	5a                   	pop    edx
c001938d:	59                   	pop    ecx
c001938e:	e9 37 ff ff ff       	jmp    c00192ca <Dbg::kprintf(char const*, ...)+0x6d>
c0019393:	90                   	nop

c0019394 <KiUbsanPrintDetails(char const*, void*)>:
c0019394:	83 ec 1c             	sub    esp,0x1c
c0019397:	83 ec 08             	sub    esp,0x8
c001939a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001939e:	68 68 19 03 c0       	push   0xc0031968
c00193a3:	e8 b5 fe ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00193a8:	83 c4 10             	add    esp,0x10
c00193ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00193af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00193b9:	83 ec 08             	sub    esp,0x8
c00193bc:	50                   	push   eax
c00193bd:	68 7c 19 03 c0       	push   0xc003197c
c00193c2:	e8 96 fe ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00193c7:	83 c4 10             	add    esp,0x10
c00193ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00193d1:	83 ec 08             	sub    esp,0x8
c00193d4:	50                   	push   eax
c00193d5:	68 86 19 03 c0       	push   0xc0031986
c00193da:	e8 7e fe ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00193df:	83 c4 10             	add    esp,0x10
c00193e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193e6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00193e9:	83 ec 08             	sub    esp,0x8
c00193ec:	50                   	push   eax
c00193ed:	68 90 19 03 c0       	push   0xc0031990
c00193f2:	e8 66 fe ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00193f7:	83 c4 10             	add    esp,0x10
c00193fa:	90                   	nop
c00193fb:	83 c4 1c             	add    esp,0x1c
c00193fe:	c3                   	ret    
c00193ff:	90                   	nop

c0019400 <__ubsan_handle_type_mismatch_v1>:
c0019400:	83 ec 0c             	sub    esp,0xc
c0019403:	83 ec 08             	sub    esp,0x8
c0019406:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001940a:	68 d4 1a 03 c0       	push   0xc0031ad4
c001940f:	e8 80 ff ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c0019414:	83 c4 10             	add    esp,0x10
c0019417:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001941c:	75 16                	jne    c0019434 <__ubsan_handle_type_mismatch_v1+0x34>
c001941e:	83 ec 0c             	sub    esp,0xc
c0019421:	68 9a 19 03 c0       	push   0xc003199a
c0019426:	e8 32 fe ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001942b:	83 c4 10             	add    esp,0x10
c001942e:	e9 91 00 00 00       	jmp    c00194c4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019433:	90                   	nop
c0019434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019438:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001943b:	85 c0                	test   eax,eax
c001943d:	74 29                	je     c0019468 <__ubsan_handle_type_mismatch_v1+0x68>
c001943f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019443:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019446:	83 e8 01             	sub    eax,0x1
c0019449:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001944d:	75 19                	jne    c0019468 <__ubsan_handle_type_mismatch_v1+0x68>
c001944f:	83 ec 08             	sub    esp,0x8
c0019452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019456:	68 f4 1a 03 c0       	push   0xc0031af4
c001945b:	e8 fd fd ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0019460:	83 c4 10             	add    esp,0x10
c0019463:	eb 5f                	jmp    c00194c4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019465:	8d 76 00             	lea    esi,[esi+0x0]
c0019468:	83 ec 0c             	sub    esp,0xc
c001946b:	68 af 19 03 c0       	push   0xc00319af
c0019470:	e8 e8 fd ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0019475:	83 c4 10             	add    esp,0x10
c0019478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001947c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001947f:	0f b6 c0             	movzx  eax,al
c0019482:	83 ec 08             	sub    esp,0x8
c0019485:	50                   	push   eax
c0019486:	68 c9 19 03 c0       	push   0xc00319c9
c001948b:	e8 cd fd ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0019490:	83 c4 10             	add    esp,0x10
c0019493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019497:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001949a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c001949d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194a5:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00194a8:	0f b6 c0             	movzx  eax,al
c00194ab:	8b 04 85 80 3c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc380]
c00194b2:	51                   	push   ecx
c00194b3:	52                   	push   edx
c00194b4:	50                   	push   eax
c00194b5:	68 1c 1b 03 c0       	push   0xc0031b1c
c00194ba:	e8 9e fd ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00194bf:	83 c4 10             	add    esp,0x10
c00194c2:	66 90                	xchg   ax,ax
c00194c4:	83 ec 0c             	sub    esp,0xc
c00194c7:	68 d4 1a 03 c0       	push   0xc0031ad4
c00194cc:	e8 a5 6d 00 00       	call   c0020276 <KePanic(char const*)>
c00194d1:	83 c4 10             	add    esp,0x10
c00194d4:	90                   	nop
c00194d5:	83 c4 0c             	add    esp,0xc
c00194d8:	c3                   	ret    
c00194d9:	8d 76 00             	lea    esi,[esi+0x0]

c00194dc <__ubsan_handle_pointer_overflow>:
c00194dc:	83 ec 0c             	sub    esp,0xc
c00194df:	83 ec 08             	sub    esp,0x8
c00194e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194e6:	68 64 1b 03 c0       	push   0xc0031b64
c00194eb:	e8 a4 fe ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c00194f0:	83 c4 10             	add    esp,0x10
c00194f3:	83 ec 0c             	sub    esp,0xc
c00194f6:	68 64 1b 03 c0       	push   0xc0031b64
c00194fb:	e8 76 6d 00 00       	call   c0020276 <KePanic(char const*)>
c0019500:	83 c4 10             	add    esp,0x10
c0019503:	90                   	nop
c0019504:	83 c4 0c             	add    esp,0xc
c0019507:	c3                   	ret    

c0019508 <__ubsan_handle_out_of_bounds>:
c0019508:	83 ec 0c             	sub    esp,0xc
c001950b:	83 ec 08             	sub    esp,0x8
c001950e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019512:	68 d4 19 03 c0       	push   0xc00319d4
c0019517:	e8 78 fe ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	83 ec 0c             	sub    esp,0xc
c0019522:	68 d4 19 03 c0       	push   0xc00319d4
c0019527:	e8 4a 6d 00 00       	call   c0020276 <KePanic(char const*)>
c001952c:	83 c4 10             	add    esp,0x10
c001952f:	90                   	nop
c0019530:	83 c4 0c             	add    esp,0xc
c0019533:	c3                   	ret    

c0019534 <__ubsan_handle_add_overflow>:
c0019534:	83 ec 0c             	sub    esp,0xc
c0019537:	83 ec 08             	sub    esp,0x8
c001953a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001953e:	68 f1 19 03 c0       	push   0xc00319f1
c0019543:	e8 4c fe ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c0019548:	83 c4 10             	add    esp,0x10
c001954b:	83 ec 0c             	sub    esp,0xc
c001954e:	68 f1 19 03 c0       	push   0xc00319f1
c0019553:	e8 1e 6d 00 00       	call   c0020276 <KePanic(char const*)>
c0019558:	83 c4 10             	add    esp,0x10
c001955b:	90                   	nop
c001955c:	83 c4 0c             	add    esp,0xc
c001955f:	c3                   	ret    

c0019560 <__ubsan_handle_load_invalid_value>:
c0019560:	83 ec 0c             	sub    esp,0xc
c0019563:	83 ec 08             	sub    esp,0x8
c0019566:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001956a:	68 84 1b 03 c0       	push   0xc0031b84
c001956f:	e8 20 fe ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c0019574:	83 c4 10             	add    esp,0x10
c0019577:	83 ec 0c             	sub    esp,0xc
c001957a:	68 84 1b 03 c0       	push   0xc0031b84
c001957f:	e8 f2 6c 00 00       	call   c0020276 <KePanic(char const*)>
c0019584:	83 c4 10             	add    esp,0x10
c0019587:	90                   	nop
c0019588:	83 c4 0c             	add    esp,0xc
c001958b:	c3                   	ret    

c001958c <__ubsan_handle_divrem_overflow>:
c001958c:	83 ec 0c             	sub    esp,0xc
c001958f:	83 ec 08             	sub    esp,0x8
c0019592:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019596:	68 a8 1b 03 c0       	push   0xc0031ba8
c001959b:	e8 f4 fd ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c00195a0:	83 c4 10             	add    esp,0x10
c00195a3:	83 ec 0c             	sub    esp,0xc
c00195a6:	68 a8 1b 03 c0       	push   0xc0031ba8
c00195ab:	e8 c6 6c 00 00       	call   c0020276 <KePanic(char const*)>
c00195b0:	83 c4 10             	add    esp,0x10
c00195b3:	90                   	nop
c00195b4:	83 c4 0c             	add    esp,0xc
c00195b7:	c3                   	ret    

c00195b8 <__ubsan_handle_mul_overflow>:
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	83 ec 08             	sub    esp,0x8
c00195be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195c2:	68 0d 1a 03 c0       	push   0xc0031a0d
c00195c7:	e8 c8 fd ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c00195cc:	83 c4 10             	add    esp,0x10
c00195cf:	83 ec 0c             	sub    esp,0xc
c00195d2:	68 0d 1a 03 c0       	push   0xc0031a0d
c00195d7:	e8 9a 6c 00 00       	call   c0020276 <KePanic(char const*)>
c00195dc:	83 c4 10             	add    esp,0x10
c00195df:	90                   	nop
c00195e0:	83 c4 0c             	add    esp,0xc
c00195e3:	c3                   	ret    

c00195e4 <__ubsan_handle_sub_overflow>:
c00195e4:	83 ec 0c             	sub    esp,0xc
c00195e7:	83 ec 08             	sub    esp,0x8
c00195ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ee:	68 29 1a 03 c0       	push   0xc0031a29
c00195f3:	e8 9c fd ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	83 ec 0c             	sub    esp,0xc
c00195fe:	68 29 1a 03 c0       	push   0xc0031a29
c0019603:	e8 6e 6c 00 00       	call   c0020276 <KePanic(char const*)>
c0019608:	83 c4 10             	add    esp,0x10
c001960b:	90                   	nop
c001960c:	83 c4 0c             	add    esp,0xc
c001960f:	c3                   	ret    

c0019610 <__ubsan_handle_shift_out_of_bounds>:
c0019610:	83 ec 0c             	sub    esp,0xc
c0019613:	83 ec 08             	sub    esp,0x8
c0019616:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001961a:	68 c8 1b 03 c0       	push   0xc0031bc8
c001961f:	e8 70 fd ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c0019624:	83 c4 10             	add    esp,0x10
c0019627:	83 ec 0c             	sub    esp,0xc
c001962a:	68 c8 1b 03 c0       	push   0xc0031bc8
c001962f:	e8 42 6c 00 00       	call   c0020276 <KePanic(char const*)>
c0019634:	83 c4 10             	add    esp,0x10
c0019637:	90                   	nop
c0019638:	83 c4 0c             	add    esp,0xc
c001963b:	c3                   	ret    

c001963c <__ubsan_handle_negate_overflow>:
c001963c:	83 ec 0c             	sub    esp,0xc
c001963f:	83 ec 08             	sub    esp,0x8
c0019642:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019646:	68 ec 1b 03 c0       	push   0xc0031bec
c001964b:	e8 44 fd ff ff       	call   c0019394 <KiUbsanPrintDetails(char const*, void*)>
c0019650:	83 c4 10             	add    esp,0x10
c0019653:	83 ec 0c             	sub    esp,0xc
c0019656:	68 ec 1b 03 c0       	push   0xc0031bec
c001965b:	e8 16 6c 00 00       	call   c0020276 <KePanic(char const*)>
c0019660:	83 c4 10             	add    esp,0x10
c0019663:	90                   	nop
c0019664:	83 c4 0c             	add    esp,0xc
c0019667:	c3                   	ret    

c0019668 <KiIsHashInTable(unsigned short)>:
c0019668:	0f b7 d0             	movzx  edx,ax
c001966b:	83 e0 07             	and    eax,0x7
c001966e:	c1 fa 03             	sar    edx,0x3
c0019671:	88 c1                	mov    cl,al
c0019673:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c001967a:	d3 fa                	sar    edx,cl
c001967c:	89 d0                	mov    eax,edx
c001967e:	83 e0 01             	and    eax,0x1
c0019681:	c3                   	ret    

c0019682 <KiSetHashInTable(unsigned short, bool)>:
c0019682:	56                   	push   esi
c0019683:	53                   	push   ebx
c0019684:	0f b7 d8             	movzx  ebx,ax
c0019687:	83 e0 07             	and    eax,0x7
c001968a:	c1 fb 03             	sar    ebx,0x3
c001968d:	89 c1                	mov    ecx,eax
c001968f:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c0019696:	b8 01 00 00 00       	mov    eax,0x1
c001969b:	d3 e0                	shl    eax,cl
c001969d:	84 d2                	test   dl,dl
c001969f:	74 04                	je     c00196a5 <KiSetHashInTable(unsigned short, bool)+0x23>
c00196a1:	09 f0                	or     eax,esi
c00196a3:	eb 04                	jmp    c00196a9 <KiSetHashInTable(unsigned short, bool)+0x27>
c00196a5:	f7 d0                	not    eax
c00196a7:	21 f0                	and    eax,esi
c00196a9:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c00196af:	5b                   	pop    ebx
c00196b0:	5e                   	pop    esi
c00196b1:	c3                   	ret    

c00196b2 <KiFlushSymlinkChanges()>:
c00196b2:	57                   	push   edi
c00196b3:	56                   	push   esi
c00196b4:	53                   	push   ebx
c00196b5:	83 ec 1c             	sub    esp,0x1c
c00196b8:	68 14 01 00 00       	push   0x114
c00196bd:	e8 fc cc ff ff       	call   c00163be <malloc>
c00196c2:	83 c4 0c             	add    esp,0xc
c00196c5:	89 c3                	mov    ebx,eax
c00196c7:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00196cd:	68 0b 1c 03 c0       	push   0xc0031c0b
c00196d2:	50                   	push   eax
c00196d3:	e8 8c 0d 00 00       	call   c001a464 <File::File(char const*, Process*)>
c00196d8:	83 c4 10             	add    esp,0x10
c00196db:	85 db                	test   ebx,ebx
c00196dd:	75 10                	jne    c00196ef <KiFlushSymlinkChanges()+0x3d>
c00196df:	83 ec 0c             	sub    esp,0xc
c00196e2:	68 29 1c 03 c0       	push   0xc0031c29
c00196e7:	e8 8a 6b 00 00       	call   c0020276 <KePanic(char const*)>
c00196ec:	83 c4 10             	add    esp,0x10
c00196ef:	50                   	push   eax
c00196f0:	50                   	push   eax
c00196f1:	6a 06                	push   0x6
c00196f3:	53                   	push   ebx
c00196f4:	e8 89 0d 00 00       	call   c001a482 <File::open(FileOpenMode)>
c00196f9:	83 c4 10             	add    esp,0x10
c00196fc:	85 c0                	test   eax,eax
c00196fe:	74 10                	je     c0019710 <KiFlushSymlinkChanges()+0x5e>
c0019700:	83 ec 0c             	sub    esp,0xc
c0019703:	68 43 1c 03 c0       	push   0xc0031c43
c0019708:	e8 69 6b 00 00       	call   c0020276 <KePanic(char const*)>
c001970d:	83 c4 10             	add    esp,0x10
c0019710:	31 f6                	xor    esi,esi
c0019712:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c0019718:	7e 70                	jle    c001978a <KiFlushSymlinkChanges()+0xd8>
c001971a:	83 ec 0c             	sub    esp,0xc
c001971d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001971f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019723:	89 f0                	mov    eax,esi
c0019725:	57                   	push   edi
c0019726:	c1 e0 08             	shl    eax,0x8
c0019729:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001972e:	50                   	push   eax
c001972f:	6a 00                	push   0x0
c0019731:	68 00 01 00 00       	push   0x100
c0019736:	53                   	push   ebx
c0019737:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001973a:	83 c4 20             	add    esp,0x20
c001973d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0019745:	74 10                	je     c0019757 <KiFlushSymlinkChanges()+0xa5>
c0019747:	83 ec 0c             	sub    esp,0xc
c001974a:	68 5d 1c 03 c0       	push   0xc0031c5d
c001974f:	e8 22 6b 00 00       	call   c0020276 <KePanic(char const*)>
c0019754:	83 c4 10             	add    esp,0x10
c0019757:	83 ec 0c             	sub    esp,0xc
c001975a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001975c:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c0019763:	57                   	push   edi
c0019764:	52                   	push   edx
c0019765:	6a 00                	push   0x0
c0019767:	6a 08                	push   0x8
c0019769:	53                   	push   ebx
c001976a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001976d:	83 c4 20             	add    esp,0x20
c0019770:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019775:	74 10                	je     c0019787 <KiFlushSymlinkChanges()+0xd5>
c0019777:	83 ec 0c             	sub    esp,0xc
c001977a:	68 77 1c 03 c0       	push   0xc0031c77
c001977f:	e8 f2 6a 00 00       	call   c0020276 <KePanic(char const*)>
c0019784:	83 c4 10             	add    esp,0x10
c0019787:	46                   	inc    esi
c0019788:	eb 88                	jmp    c0019712 <KiFlushSymlinkChanges()+0x60>
c001978a:	83 ec 0c             	sub    esp,0xc
c001978d:	53                   	push   ebx
c001978e:	e8 4d 0d 00 00       	call   c001a4e0 <File::close()>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	85 db                	test   ebx,ebx
c0019798:	74 0c                	je     c00197a6 <KiFlushSymlinkChanges()+0xf4>
c001979a:	83 ec 0c             	sub    esp,0xc
c001979d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001979f:	53                   	push   ebx
c00197a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00197a3:	83 c4 10             	add    esp,0x10
c00197a6:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00197b0:	83 c4 10             	add    esp,0x10
c00197b3:	5b                   	pop    ebx
c00197b4:	5e                   	pop    esi
c00197b5:	5f                   	pop    edi
c00197b6:	c3                   	ret    

c00197b7 <KiDeinitialiseSymlinks(void*)>:
c00197b7:	e9 f6 fe ff ff       	jmp    c00196b2 <KiFlushSymlinkChanges()>

c00197bc <KiGetSymlinkHash(char const*)>:
c00197bc:	53                   	push   ebx
c00197bd:	89 c3                	mov    ebx,eax
c00197bf:	83 ec 14             	sub    esp,0x14
c00197c2:	50                   	push   eax
c00197c3:	e8 a8 6d fe ff       	call   c0000570 <strlen>
c00197c8:	5a                   	pop    edx
c00197c9:	59                   	pop    ecx
c00197ca:	50                   	push   eax
c00197cb:	53                   	push   ebx
c00197cc:	e8 0c 64 00 00       	call   c001fbdd <KeCalculateCRC32(unsigned char*, int)>
c00197d1:	83 c4 18             	add    esp,0x18
c00197d4:	89 c2                	mov    edx,eax
c00197d6:	5b                   	pop    ebx
c00197d7:	c1 ea 10             	shr    edx,0x10
c00197da:	31 d0                	xor    eax,edx
c00197dc:	c3                   	ret    

c00197dd <KiCreateSymlinkID()>:
c00197dd:	55                   	push   ebp
c00197de:	57                   	push   edi
c00197df:	56                   	push   esi
c00197e0:	53                   	push   ebx
c00197e1:	31 db                	xor    ebx,ebx
c00197e3:	83 ec 1c             	sub    esp,0x1c
c00197e6:	e8 d9 6b 00 00       	call   c00203c4 <KeRand()>
c00197eb:	43                   	inc    ebx
c00197ec:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c00197f2:	31 d2                	xor    edx,edx
c00197f4:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00197f7:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00197fb:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019801:	c1 e0 1f             	shl    eax,0x1f
c0019804:	89 d7                	mov    edi,edx
c0019806:	89 c6                	mov    esi,eax
c0019808:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c001980c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019814:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c001981a:	75 10                	jne    c001982c <KiCreateSymlinkID()+0x4f>
c001981c:	83 ec 0c             	sub    esp,0xc
c001981f:	68 91 1c 03 c0       	push   0xc0031c91
c0019824:	e8 4d 6a 00 00       	call   c0020276 <KePanic(char const*)>
c0019829:	83 c4 10             	add    esp,0x10
c001982c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019830:	75 04                	jne    c0019836 <KiCreateSymlinkID()+0x59>
c0019832:	39 f5                	cmp    ebp,esi
c0019834:	74 b0                	je     c00197e6 <KiCreateSymlinkID()+0x9>
c0019836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001983a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001983e:	31 f0                	xor    eax,esi
c0019840:	83 c4 1c             	add    esp,0x1c
c0019843:	31 fa                	xor    edx,edi
c0019845:	5b                   	pop    ebx
c0019846:	5e                   	pop    esi
c0019847:	5f                   	pop    edi
c0019848:	5d                   	pop    ebp
c0019849:	c3                   	ret    

c001984a <KeRegisterSymlink(char const*, unsigned long long)>:
c001984a:	53                   	push   ebx
c001984b:	83 ec 0c             	sub    esp,0xc
c001984e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019852:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019856:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001985a:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001985f:	68 00 01 00 00       	push   0x100
c0019864:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c001986b:	6a 00                	push   0x0
c001986d:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019874:	c1 e0 08             	shl    eax,0x8
c0019877:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001987c:	50                   	push   eax
c001987d:	e8 6e 6c fe ff       	call   c00004f0 <memset>
c0019882:	58                   	pop    eax
c0019883:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019888:	5a                   	pop    edx
c0019889:	c1 e0 08             	shl    eax,0x8
c001988c:	53                   	push   ebx
c001988d:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019892:	50                   	push   eax
c0019893:	e8 a8 6d fe ff       	call   c0000640 <strcpy>
c0019898:	89 d8                	mov    eax,ebx
c001989a:	e8 1d ff ff ff       	call   c00197bc <KiGetSymlinkHash(char const*)>
c001989f:	59                   	pop    ecx
c00198a0:	0f b7 d8             	movzx  ebx,ax
c00198a3:	58                   	pop    eax
c00198a4:	53                   	push   ebx
c00198a5:	68 9a 1c 03 c0       	push   0xc0031c9a
c00198aa:	e8 ae f9 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00198af:	89 d8                	mov    eax,ebx
c00198b1:	ba 01 00 00 00       	mov    edx,0x1
c00198b6:	e8 c7 fd ff ff       	call   c0019682 <KiSetHashInTable(unsigned short, bool)>
c00198bb:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00198c0:	83 c4 10             	add    esp,0x10
c00198c3:	40                   	inc    eax
c00198c4:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c00198c9:	83 f8 03             	cmp    eax,0x3
c00198cc:	7e 09                	jle    c00198d7 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c00198ce:	83 c4 08             	add    esp,0x8
c00198d1:	5b                   	pop    ebx
c00198d2:	e9 db fd ff ff       	jmp    c00196b2 <KiFlushSymlinkChanges()>
c00198d7:	83 c4 08             	add    esp,0x8
c00198da:	5b                   	pop    ebx
c00198db:	c3                   	ret    

c00198dc <KeInitialiseSymlinks()>:
c00198dc:	57                   	push   edi
c00198dd:	56                   	push   esi
c00198de:	53                   	push   ebx
c00198df:	81 ec 14 01 00 00    	sub    esp,0x114
c00198e5:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c00198ef:	68 00 20 00 00       	push   0x2000
c00198f4:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00198fe:	6a 00                	push   0x0
c0019900:	68 00 af 03 c0       	push   0xc003af00
c0019905:	e8 e6 6b fe ff       	call   c00004f0 <memset>
c001990a:	59                   	pop    ecx
c001990b:	5b                   	pop    ebx
c001990c:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019912:	68 ae 1c 03 c0       	push   0xc0031cae
c0019917:	e8 41 f9 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001991c:	5e                   	pop    esi
c001991d:	5f                   	pop    edi
c001991e:	6a 00                	push   0x0
c0019920:	68 b7 97 01 c0       	push   0xc00197b7
c0019925:	e8 d6 60 00 00       	call   c001fa00 <KeRegisterAtexit(void (*)(void*), void*)>
c001992a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019931:	e8 88 ca ff ff       	call   c00163be <malloc>
c0019936:	83 c4 0c             	add    esp,0xc
c0019939:	89 c3                	mov    ebx,eax
c001993b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019941:	68 0b 1c 03 c0       	push   0xc0031c0b
c0019946:	50                   	push   eax
c0019947:	e8 18 0b 00 00       	call   c001a464 <File::File(char const*, Process*)>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	85 db                	test   ebx,ebx
c0019951:	75 10                	jne    c0019963 <KeInitialiseSymlinks()+0x87>
c0019953:	83 ec 0c             	sub    esp,0xc
c0019956:	68 cb 1c 03 c0       	push   0xc0031ccb
c001995b:	e8 16 69 00 00       	call   c0020276 <KePanic(char const*)>
c0019960:	83 c4 10             	add    esp,0x10
c0019963:	83 ec 0c             	sub    esp,0xc
c0019966:	53                   	push   ebx
c0019967:	e8 da 0d 00 00       	call   c001a746 <File::exists()>
c001996c:	83 c4 10             	add    esp,0x10
c001996f:	84 c0                	test   al,al
c0019971:	75 3a                	jne    c00199ad <KeInitialiseSymlinks()+0xd1>
c0019973:	52                   	push   edx
c0019974:	52                   	push   edx
c0019975:	6a 12                	push   0x12
c0019977:	53                   	push   ebx
c0019978:	e8 05 0b 00 00       	call   c001a482 <File::open(FileOpenMode)>
c001997d:	83 c4 10             	add    esp,0x10
c0019980:	85 c0                	test   eax,eax
c0019982:	74 10                	je     c0019994 <KeInitialiseSymlinks()+0xb8>
c0019984:	83 ec 0c             	sub    esp,0xc
c0019987:	68 e8 1c 03 c0       	push   0xc0031ce8
c001998c:	e8 e5 68 00 00       	call   c0020276 <KePanic(char const*)>
c0019991:	83 c4 10             	add    esp,0x10
c0019994:	83 ec 0c             	sub    esp,0xc
c0019997:	53                   	push   ebx
c0019998:	e8 43 0b 00 00       	call   c001a4e0 <File::close()>
c001999d:	83 c4 10             	add    esp,0x10
c00199a0:	85 db                	test   ebx,ebx
c00199a2:	0f 84 9e 00 00 00    	je     c0019a46 <KeInitialiseSymlinks()+0x16a>
c00199a8:	e9 8d 00 00 00       	jmp    c0019a3a <KeInitialiseSymlinks()+0x15e>
c00199ad:	50                   	push   eax
c00199ae:	50                   	push   eax
c00199af:	6a 01                	push   0x1
c00199b1:	53                   	push   ebx
c00199b2:	e8 cb 0a 00 00       	call   c001a482 <File::open(FileOpenMode)>
c00199b7:	83 c4 10             	add    esp,0x10
c00199ba:	85 c0                	test   eax,eax
c00199bc:	74 10                	je     c00199ce <KeInitialiseSymlinks()+0xf2>
c00199be:	83 ec 0c             	sub    esp,0xc
c00199c1:	68 05 1d 03 c0       	push   0xc0031d05
c00199c6:	e8 ab 68 00 00       	call   c0020276 <KePanic(char const*)>
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	83 ec 0c             	sub    esp,0xc
c00199d1:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c00199d7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00199db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199dd:	57                   	push   edi
c00199de:	8d 74 24 20          	lea    esi,[esp+0x20]
c00199e2:	56                   	push   esi
c00199e3:	6a 00                	push   0x0
c00199e5:	68 00 01 00 00       	push   0x100
c00199ea:	53                   	push   ebx
c00199eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199ee:	83 c4 20             	add    esp,0x20
c00199f1:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00199f9:	75 33                	jne    c0019a2e <KeInitialiseSymlinks()+0x152>
c00199fb:	83 ec 0c             	sub    esp,0xc
c00199fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a00:	57                   	push   edi
c0019a01:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019a05:	52                   	push   edx
c0019a06:	6a 00                	push   0x0
c0019a08:	6a 08                	push   0x8
c0019a0a:	53                   	push   ebx
c0019a0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a0e:	83 c4 20             	add    esp,0x20
c0019a11:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019a16:	75 16                	jne    c0019a2e <KeInitialiseSymlinks()+0x152>
c0019a18:	89 f0                	mov    eax,esi
c0019a1a:	e8 9d fd ff ff       	call   c00197bc <KiGetSymlinkHash(char const*)>
c0019a1f:	ba 01 00 00 00       	mov    edx,0x1
c0019a24:	0f b7 c0             	movzx  eax,ax
c0019a27:	e8 56 fc ff ff       	call   c0019682 <KiSetHashInTable(unsigned short, bool)>
c0019a2c:	eb a0                	jmp    c00199ce <KeInitialiseSymlinks()+0xf2>
c0019a2e:	83 ec 0c             	sub    esp,0xc
c0019a31:	53                   	push   ebx
c0019a32:	e8 a9 0a 00 00       	call   c001a4e0 <File::close()>
c0019a37:	83 c4 10             	add    esp,0x10
c0019a3a:	83 ec 0c             	sub    esp,0xc
c0019a3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a3f:	53                   	push   ebx
c0019a40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a43:	83 c4 10             	add    esp,0x10
c0019a46:	81 c4 10 01 00 00    	add    esp,0x110
c0019a4c:	5b                   	pop    ebx
c0019a4d:	5e                   	pop    esi
c0019a4e:	5f                   	pop    edi
c0019a4f:	c3                   	ret    

c0019a50 <KiIsSymlinkRegistered(char const*)>:
c0019a50:	55                   	push   ebp
c0019a51:	57                   	push   edi
c0019a52:	56                   	push   esi
c0019a53:	53                   	push   ebx
c0019a54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a5a:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019a61:	89 f0                	mov    eax,esi
c0019a63:	e8 54 fd ff ff       	call   c00197bc <KiGetSymlinkHash(char const*)>
c0019a68:	0f b7 c0             	movzx  eax,ax
c0019a6b:	53                   	push   ebx
c0019a6c:	56                   	push   esi
c0019a6d:	50                   	push   eax
c0019a6e:	68 20 1d 03 c0       	push   0xc0031d20
c0019a73:	e8 e5 f7 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0019a78:	89 f0                	mov    eax,esi
c0019a7a:	e8 3d fd ff ff       	call   c00197bc <KiGetSymlinkHash(char const*)>
c0019a7f:	0f b7 c0             	movzx  eax,ax
c0019a82:	e8 e1 fb ff ff       	call   c0019668 <KiIsHashInTable(unsigned short)>
c0019a87:	83 c4 10             	add    esp,0x10
c0019a8a:	88 c1                	mov    cl,al
c0019a8c:	31 d2                	xor    edx,edx
c0019a8e:	31 c0                	xor    eax,eax
c0019a90:	84 c9                	test   cl,cl
c0019a92:	0f 84 31 01 00 00    	je     c0019bc9 <KiIsSymlinkRegistered(char const*)+0x179>
c0019a98:	31 db                	xor    ebx,ebx
c0019a9a:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019aa0:	7e 30                	jle    c0019ad2 <KiIsSymlinkRegistered(char const*)+0x82>
c0019aa2:	89 d8                	mov    eax,ebx
c0019aa4:	51                   	push   ecx
c0019aa5:	c1 e0 08             	shl    eax,0x8
c0019aa8:	51                   	push   ecx
c0019aa9:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019aae:	50                   	push   eax
c0019aaf:	56                   	push   esi
c0019ab0:	e8 9b 6c fe ff       	call   c0000750 <strcmp>
c0019ab5:	83 c4 10             	add    esp,0x10
c0019ab8:	85 c0                	test   eax,eax
c0019aba:	75 13                	jne    c0019acf <KiIsSymlinkRegistered(char const*)+0x7f>
c0019abc:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019ac3:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019aca:	e9 fa 00 00 00       	jmp    c0019bc9 <KiIsSymlinkRegistered(char const*)+0x179>
c0019acf:	43                   	inc    ebx
c0019ad0:	eb c8                	jmp    c0019a9a <KiIsSymlinkRegistered(char const*)+0x4a>
c0019ad2:	83 ec 0c             	sub    esp,0xc
c0019ad5:	68 14 01 00 00       	push   0x114
c0019ada:	e8 df c8 ff ff       	call   c00163be <malloc>
c0019adf:	83 c4 0c             	add    esp,0xc
c0019ae2:	89 c3                	mov    ebx,eax
c0019ae4:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019aea:	68 0b 1c 03 c0       	push   0xc0031c0b
c0019aef:	50                   	push   eax
c0019af0:	e8 6f 09 00 00       	call   c001a464 <File::File(char const*, Process*)>
c0019af5:	83 c4 10             	add    esp,0x10
c0019af8:	85 db                	test   ebx,ebx
c0019afa:	75 12                	jne    c0019b0e <KiIsSymlinkRegistered(char const*)+0xbe>
c0019afc:	83 ec 0c             	sub    esp,0xc
c0019aff:	68 35 1d 03 c0       	push   0xc0031d35
c0019b04:	e8 6d 67 00 00       	call   c0020276 <KePanic(char const*)>
c0019b09:	83 c4 10             	add    esp,0x10
c0019b0c:	eb 10                	jmp    c0019b1e <KiIsSymlinkRegistered(char const*)+0xce>
c0019b0e:	83 ec 0c             	sub    esp,0xc
c0019b11:	53                   	push   ebx
c0019b12:	e8 2f 0c 00 00       	call   c001a746 <File::exists()>
c0019b17:	83 c4 10             	add    esp,0x10
c0019b1a:	84 c0                	test   al,al
c0019b1c:	74 de                	je     c0019afc <KiIsSymlinkRegistered(char const*)+0xac>
c0019b1e:	52                   	push   edx
c0019b1f:	52                   	push   edx
c0019b20:	6a 01                	push   0x1
c0019b22:	53                   	push   ebx
c0019b23:	e8 5a 09 00 00       	call   c001a482 <File::open(FileOpenMode)>
c0019b28:	83 c4 10             	add    esp,0x10
c0019b2b:	85 c0                	test   eax,eax
c0019b2d:	74 10                	je     c0019b3f <KiIsSymlinkRegistered(char const*)+0xef>
c0019b2f:	83 ec 0c             	sub    esp,0xc
c0019b32:	68 50 1d 03 c0       	push   0xc0031d50
c0019b37:	e8 3a 67 00 00       	call   c0020276 <KePanic(char const*)>
c0019b3c:	83 c4 10             	add    esp,0x10
c0019b3f:	83 ec 0c             	sub    esp,0xc
c0019b42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b44:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019b48:	55                   	push   ebp
c0019b49:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019b4d:	57                   	push   edi
c0019b4e:	6a 00                	push   0x0
c0019b50:	68 00 01 00 00       	push   0x100
c0019b55:	53                   	push   ebx
c0019b56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b59:	83 c4 20             	add    esp,0x20
c0019b5c:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019b64:	75 4b                	jne    c0019bb1 <KiIsSymlinkRegistered(char const*)+0x161>
c0019b66:	83 ec 0c             	sub    esp,0xc
c0019b69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b6b:	55                   	push   ebp
c0019b6c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019b70:	52                   	push   edx
c0019b71:	6a 00                	push   0x0
c0019b73:	6a 08                	push   0x8
c0019b75:	53                   	push   ebx
c0019b76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b79:	83 c4 20             	add    esp,0x20
c0019b7c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019b81:	75 2e                	jne    c0019bb1 <KiIsSymlinkRegistered(char const*)+0x161>
c0019b83:	50                   	push   eax
c0019b84:	50                   	push   eax
c0019b85:	57                   	push   edi
c0019b86:	56                   	push   esi
c0019b87:	e8 c4 6b fe ff       	call   c0000750 <strcmp>
c0019b8c:	83 c4 10             	add    esp,0x10
c0019b8f:	85 c0                	test   eax,eax
c0019b91:	75 ac                	jne    c0019b3f <KiIsSymlinkRegistered(char const*)+0xef>
c0019b93:	83 ec 0c             	sub    esp,0xc
c0019b96:	53                   	push   ebx
c0019b97:	e8 44 09 00 00       	call   c001a4e0 <File::close()>
c0019b9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ba1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ba4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ba8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bac:	83 c4 10             	add    esp,0x10
c0019baf:	eb 18                	jmp    c0019bc9 <KiIsSymlinkRegistered(char const*)+0x179>
c0019bb1:	83 ec 0c             	sub    esp,0xc
c0019bb4:	53                   	push   ebx
c0019bb5:	e8 26 09 00 00       	call   c001a4e0 <File::close()>
c0019bba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019bc2:	83 c4 10             	add    esp,0x10
c0019bc5:	31 c0                	xor    eax,eax
c0019bc7:	31 d2                	xor    edx,edx
c0019bc9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019bcf:	5b                   	pop    ebx
c0019bd0:	5e                   	pop    esi
c0019bd1:	5f                   	pop    edi
c0019bd2:	5d                   	pop    ebp
c0019bd3:	c3                   	ret    

c0019bd4 <KeDereferenceSymlink(char const*, char*)>:
c0019bd4:	55                   	push   ebp
c0019bd5:	57                   	push   edi
c0019bd6:	56                   	push   esi
c0019bd7:	53                   	push   ebx
c0019bd8:	83 ec 48             	sub    esp,0x48
c0019bdb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019bdf:	56                   	push   esi
c0019be0:	e8 6b fe ff ff       	call   c0019a50 <KiIsSymlinkRegistered(char const*)>
c0019be5:	83 c4 10             	add    esp,0x10
c0019be8:	89 c7                	mov    edi,eax
c0019bea:	89 d0                	mov    eax,edx
c0019bec:	09 f8                	or     eax,edi
c0019bee:	75 07                	jne    c0019bf7 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019bf0:	31 c0                	xor    eax,eax
c0019bf2:	e9 7c 01 00 00       	jmp    c0019d73 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019bf7:	83 ec 0c             	sub    esp,0xc
c0019bfa:	89 d5                	mov    ebp,edx
c0019bfc:	68 14 01 00 00       	push   0x114
c0019c01:	e8 b8 c7 ff ff       	call   c00163be <malloc>
c0019c06:	83 c4 0c             	add    esp,0xc
c0019c09:	89 c3                	mov    ebx,eax
c0019c0b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019c11:	56                   	push   esi
c0019c12:	50                   	push   eax
c0019c13:	e8 4c 08 00 00       	call   c001a464 <File::File(char const*, Process*)>
c0019c18:	83 c4 10             	add    esp,0x10
c0019c1b:	85 db                	test   ebx,ebx
c0019c1d:	0f 84 32 01 00 00    	je     c0019d55 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019c23:	56                   	push   esi
c0019c24:	56                   	push   esi
c0019c25:	6a 01                	push   0x1
c0019c27:	53                   	push   ebx
c0019c28:	e8 55 08 00 00       	call   c001a482 <File::open(FileOpenMode)>
c0019c2d:	83 c4 10             	add    esp,0x10
c0019c30:	85 c0                	test   eax,eax
c0019c32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c34:	74 09                	je     c0019c3f <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019c36:	83 ec 0c             	sub    esp,0xc
c0019c39:	53                   	push   ebx
c0019c3a:	e9 10 01 00 00       	jmp    c0019d4f <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019c3f:	83 ec 0c             	sub    esp,0xc
c0019c42:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019c46:	56                   	push   esi
c0019c47:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019c4b:	52                   	push   edx
c0019c4c:	6a 00                	push   0x0
c0019c4e:	6a 08                	push   0x8
c0019c50:	53                   	push   ebx
c0019c51:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c54:	83 c4 20             	add    esp,0x20
c0019c57:	85 c0                	test   eax,eax
c0019c59:	0f 85 e2 00 00 00    	jne    c0019d41 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c5f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c64:	0f 85 d7 00 00 00    	jne    c0019d41 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c6a:	83 ec 0c             	sub    esp,0xc
c0019c6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c6f:	56                   	push   esi
c0019c70:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019c74:	52                   	push   edx
c0019c75:	6a 00                	push   0x0
c0019c77:	6a 08                	push   0x8
c0019c79:	53                   	push   ebx
c0019c7a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c7d:	83 c4 20             	add    esp,0x20
c0019c80:	85 c0                	test   eax,eax
c0019c82:	0f 85 b9 00 00 00    	jne    c0019d41 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c88:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c8d:	0f 85 ae 00 00 00    	jne    c0019d41 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c93:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019c97:	0f 85 53 ff ff ff    	jne    c0019bf0 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c9d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019ca1:	0f 85 49 ff ff ff    	jne    c0019bf0 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019ca7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019caf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019cb7:	51                   	push   ecx
c0019cb8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019cbc:	50                   	push   eax
c0019cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019cc1:	50                   	push   eax
c0019cc2:	53                   	push   ebx
c0019cc3:	e8 bc 0a 00 00       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c0019cc8:	83 c4 10             	add    esp,0x10
c0019ccb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019cd0:	75 6f                	jne    c0019d41 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cd2:	31 c9                	xor    ecx,ecx
c0019cd4:	bf 0f 00 00 00       	mov    edi,0xf
c0019cd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019cdd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ce1:	39 c7                	cmp    edi,eax
c0019ce3:	89 cf                	mov    edi,ecx
c0019ce5:	19 d7                	sbb    edi,edx
c0019ce7:	73 58                	jae    c0019d41 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ce9:	83 c0 f0             	add    eax,0xfffffff0
c0019cec:	bf ff 00 00 00       	mov    edi,0xff
c0019cf1:	83 d2 ff             	adc    edx,0xffffffff
c0019cf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019cf8:	39 c7                	cmp    edi,eax
c0019cfa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019cfe:	19 d1                	sbb    ecx,edx
c0019d00:	72 53                	jb     c0019d55 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019d02:	40                   	inc    eax
c0019d03:	52                   	push   edx
c0019d04:	50                   	push   eax
c0019d05:	6a 00                	push   0x0
c0019d07:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019d0b:	e8 e0 67 fe ff       	call   c00004f0 <memset>
c0019d10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d12:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d15:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019d19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d21:	53                   	push   ebx
c0019d22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d25:	83 c4 20             	add    esp,0x20
c0019d28:	85 c0                	test   eax,eax
c0019d2a:	75 15                	jne    c0019d41 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d30:	89 c7                	mov    edi,eax
c0019d32:	c1 ff 1f             	sar    edi,0x1f
c0019d35:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019d39:	75 06                	jne    c0019d41 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d3b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019d3f:	74 19                	je     c0019d5a <KeDereferenceSymlink(char const*, char*)+0x186>
c0019d41:	83 ec 0c             	sub    esp,0xc
c0019d44:	53                   	push   ebx
c0019d45:	e8 96 07 00 00       	call   c001a4e0 <File::close()>
c0019d4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d52:	83 c4 10             	add    esp,0x10
c0019d55:	83 c8 ff             	or     eax,0xffffffff
c0019d58:	eb 19                	jmp    c0019d73 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019d5a:	83 ec 0c             	sub    esp,0xc
c0019d5d:	53                   	push   ebx
c0019d5e:	e8 7d 07 00 00       	call   c001a4e0 <File::close()>
c0019d63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d6b:	83 c4 10             	add    esp,0x10
c0019d6e:	b8 01 00 00 00       	mov    eax,0x1
c0019d73:	83 c4 3c             	add    esp,0x3c
c0019d76:	5b                   	pop    ebx
c0019d77:	5e                   	pop    esi
c0019d78:	5f                   	pop    edi
c0019d79:	5d                   	pop    ebp
c0019d7a:	c3                   	ret    

c0019d7b <KeCreateSymlink(char const*, char const*)>:
c0019d7b:	55                   	push   ebp
c0019d7c:	57                   	push   edi
c0019d7d:	56                   	push   esi
c0019d7e:	53                   	push   ebx
c0019d7f:	83 ec 38             	sub    esp,0x38
c0019d82:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019d86:	68 14 01 00 00       	push   0x114
c0019d8b:	e8 2e c6 ff ff       	call   c00163be <malloc>
c0019d90:	6a 00                	push   0x0
c0019d92:	89 c3                	mov    ebx,eax
c0019d94:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019d9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019d9e:	50                   	push   eax
c0019d9f:	e8 e2 05 00 00       	call   c001a386 <File::File(char const*, Process*, bool)>
c0019da4:	83 c4 20             	add    esp,0x20
c0019da7:	b8 01 00 00 00       	mov    eax,0x1
c0019dac:	85 db                	test   ebx,ebx
c0019dae:	0f 84 19 01 00 00    	je     c0019ecd <KeCreateSymlink(char const*, char const*)+0x152>
c0019db4:	52                   	push   edx
c0019db5:	52                   	push   edx
c0019db6:	6a 12                	push   0x12
c0019db8:	53                   	push   ebx
c0019db9:	e8 c4 06 00 00       	call   c001a482 <File::open(FileOpenMode)>
c0019dbe:	83 c4 10             	add    esp,0x10
c0019dc1:	85 c0                	test   eax,eax
c0019dc3:	74 0b                	je     c0019dd0 <KeCreateSymlink(char const*, char const*)+0x55>
c0019dc5:	83 ec 0c             	sub    esp,0xc
c0019dc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dca:	53                   	push   ebx
c0019dcb:	e9 f2 00 00 00       	jmp    c0019ec2 <KeCreateSymlink(char const*, char const*)+0x147>
c0019dd0:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019dd4:	be 9d 1d 03 c0       	mov    esi,0xc0031d9d
c0019dd9:	b9 09 00 00 00       	mov    ecx,0x9
c0019dde:	fc                   	cld    
c0019ddf:	83 ec 0c             	sub    esp,0xc
c0019de2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019de4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019de8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dea:	56                   	push   esi
c0019deb:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019def:	52                   	push   edx
c0019df0:	6a 00                	push   0x0
c0019df2:	6a 08                	push   0x8
c0019df4:	53                   	push   ebx
c0019df5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019df8:	83 c4 20             	add    esp,0x20
c0019dfb:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019e00:	0f 85 ae 00 00 00    	jne    c0019eb4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e06:	85 c0                	test   eax,eax
c0019e08:	0f 85 a6 00 00 00    	jne    c0019eb4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e0e:	e8 ca f9 ff ff       	call   c00197dd <KiCreateSymlinkID()>
c0019e13:	83 ec 0c             	sub    esp,0xc
c0019e16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019e1a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019e1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e20:	56                   	push   esi
c0019e21:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019e25:	52                   	push   edx
c0019e26:	6a 00                	push   0x0
c0019e28:	6a 08                	push   0x8
c0019e2a:	53                   	push   ebx
c0019e2b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019e2e:	83 c4 20             	add    esp,0x20
c0019e31:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019e36:	75 7c                	jne    c0019eb4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e38:	85 c0                	test   eax,eax
c0019e3a:	75 78                	jne    c0019eb4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e3c:	83 ec 0c             	sub    esp,0xc
c0019e3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e41:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019e44:	55                   	push   ebp
c0019e45:	e8 26 67 fe ff       	call   c0000570 <strlen>
c0019e4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e4d:	31 d2                	xor    edx,edx
c0019e4f:	55                   	push   ebp
c0019e50:	52                   	push   edx
c0019e51:	50                   	push   eax
c0019e52:	53                   	push   ebx
c0019e53:	ff d7                	call   edi
c0019e55:	83 c4 14             	add    esp,0x14
c0019e58:	89 c6                	mov    esi,eax
c0019e5a:	55                   	push   ebp
c0019e5b:	e8 10 67 fe ff       	call   c0000570 <strlen>
c0019e60:	83 c4 10             	add    esp,0x10
c0019e63:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e67:	75 4b                	jne    c0019eb4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e69:	85 f6                	test   esi,esi
c0019e6b:	75 47                	jne    c0019eb4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e6d:	50                   	push   eax
c0019e6e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e72:	55                   	push   ebp
c0019e73:	68 6b 1d 03 c0       	push   0xc0031d6b
c0019e78:	e8 e0 f3 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0019e7d:	83 c4 0c             	add    esp,0xc
c0019e80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e88:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019e8c:	e8 b9 f9 ff ff       	call   c001984a <KeRegisterSymlink(char const*, unsigned long long)>
c0019e91:	c7 04 24 90 1d 03 c0 	mov    DWORD PTR [esp],0xc0031d90
c0019e98:	e8 c0 f3 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0019e9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ea0:	e8 3b 06 00 00       	call   c001a4e0 <File::close()>
c0019ea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ea7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eaa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ead:	83 c4 10             	add    esp,0x10
c0019eb0:	31 c0                	xor    eax,eax
c0019eb2:	eb 19                	jmp    c0019ecd <KeCreateSymlink(char const*, char const*)+0x152>
c0019eb4:	83 ec 0c             	sub    esp,0xc
c0019eb7:	53                   	push   ebx
c0019eb8:	e8 23 06 00 00       	call   c001a4e0 <File::close()>
c0019ebd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ebf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ec2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	b8 01 00 00 00       	mov    eax,0x1
c0019ecd:	83 c4 2c             	add    esp,0x2c
c0019ed0:	5b                   	pop    ebx
c0019ed1:	5e                   	pop    esi
c0019ed2:	5f                   	pop    edi
c0019ed3:	5d                   	pop    ebp
c0019ed4:	c3                   	ret    
c0019ed5:	90                   	nop

c0019ed6 <File::read(unsigned long long, void*, int*)>:
c0019ed6:	53                   	push   ebx
c0019ed7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019edb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019edf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019ee6:	83 f8 19             	cmp    eax,0x19
c0019ee9:	77 35                	ja     c0019f20 <File::read(unsigned long long, void*, int*)+0x4a>
c0019eeb:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019ef2:	85 c0                	test   eax,eax
c0019ef4:	74 2a                	je     c0019f20 <File::read(unsigned long long, void*, int*)+0x4a>
c0019ef6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019efc:	85 c0                	test   eax,eax
c0019efe:	74 20                	je     c0019f20 <File::read(unsigned long long, void*, int*)+0x4a>
c0019f00:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f04:	74 21                	je     c0019f27 <File::read(unsigned long long, void*, int*)+0x51>
c0019f06:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f08:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f0c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f1a:	5b                   	pop    ebx
c0019f1b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019f1e:	ff e0                	jmp    eax
c0019f20:	b8 0b 00 00 00       	mov    eax,0xb
c0019f25:	eb 05                	jmp    c0019f2c <File::read(unsigned long long, void*, int*)+0x56>
c0019f27:	b8 05 00 00 00       	mov    eax,0x5
c0019f2c:	5b                   	pop    ebx
c0019f2d:	c3                   	ret    

c0019f2e <File::write(unsigned long long, void*, int*)>:
c0019f2e:	53                   	push   ebx
c0019f2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f33:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f37:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f3e:	83 f8 19             	cmp    eax,0x19
c0019f41:	77 35                	ja     c0019f78 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f43:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f4a:	85 c0                	test   eax,eax
c0019f4c:	74 2a                	je     c0019f78 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f4e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f54:	85 c0                	test   eax,eax
c0019f56:	74 20                	je     c0019f78 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f5c:	74 21                	je     c0019f7f <File::write(unsigned long long, void*, int*)+0x51>
c0019f5e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f60:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f64:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f72:	5b                   	pop    ebx
c0019f73:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019f76:	ff e0                	jmp    eax
c0019f78:	b8 0b 00 00 00       	mov    eax,0xb
c0019f7d:	eb 05                	jmp    c0019f84 <File::write(unsigned long long, void*, int*)+0x56>
c0019f7f:	b8 05 00 00 00       	mov    eax,0x5
c0019f84:	5b                   	pop    ebx
c0019f85:	c3                   	ret    

c0019f86 <Directory::read(unsigned long long, void*, int*)>:
c0019f86:	53                   	push   ebx
c0019f87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f8b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f8f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f96:	83 f8 19             	cmp    eax,0x19
c0019f99:	77 35                	ja     c0019fd0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f9b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019fa2:	85 c0                	test   eax,eax
c0019fa4:	74 2a                	je     c0019fd0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019fa6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019fac:	85 c0                	test   eax,eax
c0019fae:	74 20                	je     c0019fd0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019fb0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019fb4:	74 21                	je     c0019fd7 <Directory::read(unsigned long long, void*, int*)+0x51>
c0019fb6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019fb8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019fbc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019fc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019fca:	5b                   	pop    ebx
c0019fcb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0019fce:	ff e0                	jmp    eax
c0019fd0:	b8 0b 00 00 00       	mov    eax,0xb
c0019fd5:	eb 05                	jmp    c0019fdc <Directory::read(unsigned long long, void*, int*)+0x56>
c0019fd7:	b8 05 00 00 00       	mov    eax,0x5
c0019fdc:	5b                   	pop    ebx
c0019fdd:	c3                   	ret    

c0019fde <Directory::write(unsigned long long, void*, int*)>:
c0019fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fe2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0019fe9:	b8 0b 00 00 00       	mov    eax,0xb
c0019fee:	83 fa 19             	cmp    edx,0x19
c0019ff1:	77 18                	ja     c001a00b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019ff3:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c0019ffa:	85 d2                	test   edx,edx
c0019ffc:	74 0d                	je     c001a00b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019ffe:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a005:	19 c0                	sbb    eax,eax
c001a007:	83 e0 0a             	and    eax,0xa
c001a00a:	40                   	inc    eax
c001a00b:	c3                   	ret    

c001a00c <File::isAtty()>:
c001a00c:	31 c0                	xor    eax,eax
c001a00e:	c3                   	ret    
c001a00f:	90                   	nop

c001a010 <Directory::isAtty()>:
c001a010:	31 c0                	xor    eax,eax
c001a012:	c3                   	ret    
c001a013:	90                   	nop

c001a014 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a014:	b8 0a 00 00 00       	mov    eax,0xa
c001a019:	c3                   	ret    

c001a01a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a01a:	b8 0a 00 00 00       	mov    eax,0xa
c001a01f:	c3                   	ret    

c001a020 <Filesystem::allocateSwapfile(char const*, int)>:
c001a020:	31 c0                	xor    eax,eax
c001a022:	31 d2                	xor    edx,edx
c001a024:	c3                   	ret    
c001a025:	90                   	nop

c001a026 <File::~File()>:
c001a026:	83 ec 0c             	sub    esp,0xc
c001a029:	ba 5c 1e 03 c0       	mov    edx,0xc0031e5c
c001a02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a032:	89 10                	mov    DWORD PTR [eax],edx
c001a034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a038:	83 ec 0c             	sub    esp,0xc
c001a03b:	50                   	push   eax
c001a03c:	e8 7b dc ff ff       	call   c0017cbc <UnixFile::~UnixFile()>
c001a041:	83 c4 10             	add    esp,0x10
c001a044:	90                   	nop
c001a045:	83 c4 0c             	add    esp,0xc
c001a048:	c3                   	ret    
c001a049:	90                   	nop

c001a04a <File::~File()>:
c001a04a:	83 ec 0c             	sub    esp,0xc
c001a04d:	83 ec 0c             	sub    esp,0xc
c001a050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a054:	e8 cd ff ff ff       	call   c001a026 <File::~File()>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	83 ec 08             	sub    esp,0x8
c001a05f:	68 14 01 00 00       	push   0x114
c001a064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a068:	e8 c3 f0 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001a06d:	83 c4 10             	add    esp,0x10
c001a070:	83 c4 0c             	add    esp,0xc
c001a073:	c3                   	ret    

c001a074 <Directory::~Directory()>:
c001a074:	83 ec 0c             	sub    esp,0xc
c001a077:	ba 78 1e 03 c0       	mov    edx,0xc0031e78
c001a07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a080:	89 10                	mov    DWORD PTR [eax],edx
c001a082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a086:	83 ec 0c             	sub    esp,0xc
c001a089:	50                   	push   eax
c001a08a:	e8 2d dc ff ff       	call   c0017cbc <UnixFile::~UnixFile()>
c001a08f:	83 c4 10             	add    esp,0x10
c001a092:	90                   	nop
c001a093:	83 c4 0c             	add    esp,0xc
c001a096:	c3                   	ret    
c001a097:	90                   	nop

c001a098 <Directory::~Directory()>:
c001a098:	83 ec 0c             	sub    esp,0xc
c001a09b:	83 ec 0c             	sub    esp,0xc
c001a09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0a2:	e8 cd ff ff ff       	call   c001a074 <Directory::~Directory()>
c001a0a7:	83 c4 10             	add    esp,0x10
c001a0aa:	83 ec 08             	sub    esp,0x8
c001a0ad:	68 14 01 00 00       	push   0x114
c001a0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0b6:	e8 75 f0 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001a0bb:	83 c4 10             	add    esp,0x10
c001a0be:	83 c4 0c             	add    esp,0xc
c001a0c1:	c3                   	ret    

c001a0c2 <Filesystem::Filesystem()>:
c001a0c2:	ba f0 1d 03 c0       	mov    edx,0xc0031df0
c001a0c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0cb:	89 10                	mov    DWORD PTR [eax],edx
c001a0cd:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a0d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a0da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0de:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a0e3:	90                   	nop
c001a0e4:	c3                   	ret    
c001a0e5:	90                   	nop

c001a0e6 <Filesystem::~Filesystem()>:
c001a0e6:	ba f0 1d 03 c0       	mov    edx,0xc0031df0
c001a0eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0ef:	89 10                	mov    DWORD PTR [eax],edx
c001a0f1:	90                   	nop
c001a0f2:	c3                   	ret    
c001a0f3:	90                   	nop

c001a0f4 <Filesystem::~Filesystem()>:
c001a0f4:	83 ec 0c             	sub    esp,0xc
c001a0f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0fb:	e8 e6 ff ff ff       	call   c001a0e6 <Filesystem::~Filesystem()>
c001a100:	83 c4 04             	add    esp,0x4
c001a103:	83 ec 08             	sub    esp,0x8
c001a106:	6a 08                	push   0x8
c001a108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a10c:	e8 1f f0 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001a111:	83 c4 10             	add    esp,0x10
c001a114:	83 c4 0c             	add    esp,0xc
c001a117:	c3                   	ret    

c001a118 <Fs::getcwd(Process*, char*, int)>:
c001a118:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a11c:	31 c0                	xor    eax,eax
c001a11e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a121:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a125:	7d 15                	jge    c001a13c <Fs::getcwd(Process*, char*, int)+0x24>
c001a127:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a12b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a132:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a135:	84 c9                	test   cl,cl
c001a137:	74 06                	je     c001a13f <Fs::getcwd(Process*, char*, int)+0x27>
c001a139:	40                   	inc    eax
c001a13a:	eb e2                	jmp    c001a11e <Fs::getcwd(Process*, char*, int)+0x6>
c001a13c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a13f:	31 c0                	xor    eax,eax
c001a141:	c3                   	ret    

c001a142 <Fs::initVFS()>:
c001a142:	83 ec 18             	sub    esp,0x18
c001a145:	6a 08                	push   0x8
c001a147:	e8 72 c2 ff ff       	call   c00163be <malloc>
c001a14c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a14f:	e8 f8 e9 00 00       	call   c0028b4c <FAT::FAT()>
c001a154:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a15b:	e8 5e c2 ff ff       	call   c00163be <malloc>
c001a160:	89 04 24             	mov    DWORD PTR [esp],eax
c001a163:	e8 10 f9 00 00       	call   c0029a78 <ISO9660::ISO9660()>
c001a168:	83 c4 1c             	add    esp,0x1c
c001a16b:	c3                   	ret    

c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a16c:	55                   	push   ebp
c001a16d:	57                   	push   edi
c001a16e:	56                   	push   esi
c001a16f:	53                   	push   ebx
c001a170:	81 ec 10 04 00 00    	sub    esp,0x410
c001a176:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a17d:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a184:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a18c:	68 00 04 00 00       	push   0x400
c001a191:	6a 00                	push   0x0
c001a193:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a197:	57                   	push   edi
c001a198:	e8 53 63 fe ff       	call   c00004f0 <memset>
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a1a4:	75 0b                	jne    c001a1b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a1a6:	50                   	push   eax
c001a1a7:	50                   	push   eax
c001a1a8:	55                   	push   ebp
c001a1a9:	57                   	push   edi
c001a1aa:	e8 91 64 fe ff       	call   c0000640 <strcpy>
c001a1af:	eb 51                	jmp    c001a202 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a1b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a1b5:	83 f8 5c             	cmp    eax,0x5c
c001a1b8:	74 05                	je     c001a1bf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a1ba:	83 f8 2f             	cmp    eax,0x2f
c001a1bd:	75 1e                	jne    c001a1dd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a1bf:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a1c6:	8a 00                	mov    al,BYTE PTR [eax]
c001a1c8:	3c 60                	cmp    al,0x60
c001a1ca:	7e 03                	jle    c001a1cf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a1cc:	83 e8 20             	sub    eax,0x20
c001a1cf:	88 04 24             	mov    BYTE PTR [esp],al
c001a1d2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a1d9:	50                   	push   eax
c001a1da:	50                   	push   eax
c001a1db:	eb 1e                	jmp    c001a1fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a1dd:	50                   	push   eax
c001a1de:	50                   	push   eax
c001a1df:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a1e6:	57                   	push   edi
c001a1e7:	e8 54 64 fe ff       	call   c0000640 <strcpy>
c001a1ec:	58                   	pop    eax
c001a1ed:	5a                   	pop    edx
c001a1ee:	68 df 2e 03 c0       	push   0xc0032edf
c001a1f3:	57                   	push   edi
c001a1f4:	e8 47 66 fe ff       	call   c0000840 <strcat>
c001a1f9:	59                   	pop    ecx
c001a1fa:	58                   	pop    eax
c001a1fb:	55                   	push   ebp
c001a1fc:	57                   	push   edi
c001a1fd:	e8 3e 66 fe ff       	call   c0000840 <strcat>
c001a202:	83 c4 10             	add    esp,0x10
c001a205:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a208:	3c 60                	cmp    al,0x60
c001a20a:	7e 03                	jle    c001a20f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a20c:	83 e8 20             	sub    eax,0x20
c001a20f:	88 04 24             	mov    BYTE PTR [esp],al
c001a212:	88 06                	mov    BYTE PTR [esi],al
c001a214:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a21b:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a221:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a225:	bf 03 00 00 00       	mov    edi,0x3
c001a22a:	b8 03 00 00 00       	mov    eax,0x3
c001a22f:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a233:	89 e9                	mov    ecx,ebp
c001a235:	85 ed                	test   ebp,ebp
c001a237:	0f 84 97 00 00 00    	je     c001a2d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a23d:	8d 57 01             	lea    edx,[edi+0x1]
c001a240:	83 fd 5c             	cmp    ebp,0x5c
c001a243:	74 05                	je     c001a24a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a245:	83 fd 2f             	cmp    ebp,0x2f
c001a248:	75 12                	jne    c001a25c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a24a:	89 c5                	mov    ebp,eax
c001a24c:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a251:	74 09                	je     c001a25c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a253:	40                   	inc    eax
c001a254:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a258:	89 d7                	mov    edi,edx
c001a25a:	eb d3                	jmp    c001a22f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a25c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a261:	0f be e9             	movsx  ebp,cl
c001a264:	75 5e                	jne    c001a2c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a266:	83 fd 2e             	cmp    ebp,0x2e
c001a269:	75 59                	jne    c001a2c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a26b:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a26f:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a274:	74 18                	je     c001a28e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a276:	83 fd 2e             	cmp    ebp,0x2e
c001a279:	74 53                	je     c001a2ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a27b:	89 fa                	mov    edx,edi
c001a27d:	42                   	inc    edx
c001a27e:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a282:	83 f9 2f             	cmp    ecx,0x2f
c001a285:	74 f6                	je     c001a27d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a287:	83 f9 5c             	cmp    ecx,0x5c
c001a28a:	74 f1                	je     c001a27d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a28c:	eb ca                	jmp    c001a258 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a28e:	83 fd 2e             	cmp    ebp,0x2e
c001a291:	74 3b                	je     c001a2ce <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a293:	83 f8 03             	cmp    eax,0x3
c001a296:	74 c0                	je     c001a258 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a298:	42                   	inc    edx
c001a299:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a29d:	83 f9 5c             	cmp    ecx,0x5c
c001a2a0:	74 f6                	je     c001a298 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a2a2:	83 f9 2f             	cmp    ecx,0x2f
c001a2a5:	74 f1                	je     c001a298 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a2a7:	48                   	dec    eax
c001a2a8:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a2ac:	75 06                	jne    c001a2b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a2ae:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a2b2:	eb f3                	jmp    c001a2a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a2b4:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a2b8:	74 07                	je     c001a2c1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a2ba:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a2be:	48                   	dec    eax
c001a2bf:	eb f3                	jmp    c001a2b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a2c1:	40                   	inc    eax
c001a2c2:	eb 94                	jmp    c001a258 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2c4:	83 fd 5c             	cmp    ebp,0x5c
c001a2c7:	74 8f                	je     c001a258 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2c9:	83 fd 2f             	cmp    ebp,0x2f
c001a2cc:	74 8a                	je     c001a258 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2ce:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a2d1:	40                   	inc    eax
c001a2d2:	eb 84                	jmp    c001a258 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a2d4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a2d8:	83 ec 0c             	sub    esp,0xc
c001a2db:	56                   	push   esi
c001a2dc:	e8 8f 62 fe ff       	call   c0000570 <strlen>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a2e9:	74 17                	je     c001a302 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a2eb:	83 ec 0c             	sub    esp,0xc
c001a2ee:	56                   	push   esi
c001a2ef:	e8 7c 62 fe ff       	call   c0000570 <strlen>
c001a2f4:	83 c4 10             	add    esp,0x10
c001a2f7:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a2fc:	74 04                	je     c001a302 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a2fe:	31 ff                	xor    edi,edi
c001a300:	eb 5c                	jmp    c001a35e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a302:	83 ec 0c             	sub    esp,0xc
c001a305:	56                   	push   esi
c001a306:	e8 65 62 fe ff       	call   c0000570 <strlen>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a313:	74 e9                	je     c001a2fe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a315:	83 ec 0c             	sub    esp,0xc
c001a318:	56                   	push   esi
c001a319:	e8 52 62 fe ff       	call   c0000570 <strlen>
c001a31e:	83 c4 10             	add    esp,0x10
c001a321:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a326:	eb b0                	jmp    c001a2d8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a328:	52                   	push   edx
c001a329:	52                   	push   edx
c001a32a:	56                   	push   esi
c001a32b:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a32f:	55                   	push   ebp
c001a330:	e8 0b 63 fe ff       	call   c0000640 <strcpy>
c001a335:	59                   	pop    ecx
c001a336:	58                   	pop    eax
c001a337:	56                   	push   esi
c001a338:	55                   	push   ebp
c001a339:	e8 96 f8 ff ff       	call   c0019bd4 <KeDereferenceSymlink(char const*, char*)>
c001a33e:	83 c4 10             	add    esp,0x10
c001a341:	48                   	dec    eax
c001a342:	75 37                	jne    c001a37b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a344:	50                   	push   eax
c001a345:	56                   	push   esi
c001a346:	55                   	push   ebp
c001a347:	68 a6 1d 03 c0       	push   0xc0031da6
c001a34c:	e8 0c ef ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001a351:	83 c4 10             	add    esp,0x10
c001a354:	8d 47 01             	lea    eax,[edi+0x1]
c001a357:	83 ff 14             	cmp    edi,0x14
c001a35a:	74 08                	je     c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a35c:	89 c7                	mov    edi,eax
c001a35e:	85 db                	test   ebx,ebx
c001a360:	75 c6                	jne    c001a328 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a362:	eb 17                	jmp    c001a37b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a364:	83 ec 0c             	sub    esp,0xc
c001a367:	bf 15 00 00 00       	mov    edi,0x15
c001a36c:	68 c1 1d 03 c0       	push   0xc0031dc1
c001a371:	e8 00 5f 00 00       	call   c0020276 <KePanic(char const*)>
c001a376:	83 c4 10             	add    esp,0x10
c001a379:	eb e3                	jmp    c001a35e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a37b:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a381:	5b                   	pop    ebx
c001a382:	5e                   	pop    esi
c001a383:	5f                   	pop    edi
c001a384:	5d                   	pop    ebp
c001a385:	c3                   	ret    

c001a386 <File::File(char const*, Process*, bool)>:
c001a386:	83 ec 1c             	sub    esp,0x1c
c001a389:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a38d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a395:	83 ec 08             	sub    esp,0x8
c001a398:	6a 00                	push   0x0
c001a39a:	50                   	push   eax
c001a39b:	e8 36 d7 ff ff       	call   c0017ad6 <UnixFile::UnixFile(int)>
c001a3a0:	83 c4 10             	add    esp,0x10
c001a3a3:	ba 5c 1e 03 c0       	mov    edx,0xc0031e5c
c001a3a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3ac:	89 10                	mov    DWORD PTR [eax],edx
c001a3ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a3b3:	85 c0                	test   eax,eax
c001a3b5:	74 0f                	je     c001a3c6 <File::File(char const*, Process*, bool)+0x40>
c001a3b7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a3bc:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a3c0:	74 04                	je     c001a3c6 <File::File(char const*, Process*, bool)+0x40>
c001a3c2:	b0 01                	mov    al,0x1
c001a3c4:	eb 02                	jmp    c001a3c8 <File::File(char const*, Process*, bool)+0x42>
c001a3c6:	b0 00                	mov    al,0x0
c001a3c8:	0f b6 c0             	movzx  eax,al
c001a3cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3cf:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a3d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a3d9:	83 c2 0d             	add    edx,0xd
c001a3dc:	50                   	push   eax
c001a3dd:	51                   	push   ecx
c001a3de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3e2:	52                   	push   edx
c001a3e3:	e8 84 fd ff ff       	call   c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a3e8:	83 c4 10             	add    esp,0x10
c001a3eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3ef:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a3f2:	83 e8 41             	sub    eax,0x41
c001a3f5:	88 c2                	mov    dl,al
c001a3f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3fb:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a405:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a40d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a413:	0f b6 c0             	movzx  eax,al
c001a416:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a41d:	85 c0                	test   eax,eax
c001a41f:	74 3e                	je     c001a45f <File::File(char const*, Process*, bool)+0xd9>
c001a421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a425:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a42b:	0f b6 c0             	movzx  eax,al
c001a42e:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a435:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a43b:	85 c0                	test   eax,eax
c001a43d:	75 20                	jne    c001a45f <File::File(char const*, Process*, bool)+0xd9>
c001a43f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a443:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a449:	0f b6 c0             	movzx  eax,al
c001a44c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a453:	83 ec 0c             	sub    esp,0xc
c001a456:	50                   	push   eax
c001a457:	e8 b2 21 00 00       	call   c001c60e <LogicalDisk::mount()>
c001a45c:	83 c4 10             	add    esp,0x10
c001a45f:	90                   	nop
c001a460:	83 c4 1c             	add    esp,0x1c
c001a463:	c3                   	ret    

c001a464 <File::File(char const*, Process*)>:
c001a464:	83 ec 0c             	sub    esp,0xc
c001a467:	6a 01                	push   0x1
c001a469:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a46d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a471:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a475:	e8 0c ff ff ff       	call   c001a386 <File::File(char const*, Process*, bool)>
c001a47a:	83 c4 10             	add    esp,0x10
c001a47d:	90                   	nop
c001a47e:	83 c4 0c             	add    esp,0xc
c001a481:	c3                   	ret    

c001a482 <File::open(FileOpenMode)>:
c001a482:	53                   	push   ebx
c001a483:	b8 0b 00 00 00       	mov    eax,0xb
c001a488:	83 ec 08             	sub    esp,0x8
c001a48b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a48f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a496:	83 fa 19             	cmp    edx,0x19
c001a499:	77 40                	ja     c001a4db <File::open(FileOpenMode)+0x59>
c001a49b:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a4a2:	85 d2                	test   edx,edx
c001a4a4:	74 35                	je     c001a4db <File::open(FileOpenMode)+0x59>
c001a4a6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a4ac:	85 d2                	test   edx,edx
c001a4ae:	74 2b                	je     c001a4db <File::open(FileOpenMode)+0x59>
c001a4b0:	b8 06 00 00 00       	mov    eax,0x6
c001a4b5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a4b9:	75 20                	jne    c001a4db <File::open(FileOpenMode)+0x59>
c001a4bb:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4bd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a4c7:	51                   	push   ecx
c001a4c8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a4cb:	51                   	push   ecx
c001a4cc:	52                   	push   edx
c001a4cd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a4d0:	83 c4 10             	add    esp,0x10
c001a4d3:	85 c0                	test   eax,eax
c001a4d5:	75 04                	jne    c001a4db <File::open(FileOpenMode)+0x59>
c001a4d7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a4db:	83 c4 08             	add    esp,0x8
c001a4de:	5b                   	pop    ebx
c001a4df:	c3                   	ret    

c001a4e0 <File::close()>:
c001a4e0:	53                   	push   ebx
c001a4e1:	b8 0b 00 00 00       	mov    eax,0xb
c001a4e6:	83 ec 08             	sub    esp,0x8
c001a4e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4ed:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a4f4:	83 f9 19             	cmp    ecx,0x19
c001a4f7:	77 41                	ja     c001a53a <File::close()+0x5a>
c001a4f9:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a500:	85 db                	test   ebx,ebx
c001a502:	74 36                	je     c001a53a <File::close()+0x5a>
c001a504:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a50b:	74 2d                	je     c001a53a <File::close()+0x5a>
c001a50d:	b8 05 00 00 00       	mov    eax,0x5
c001a512:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a516:	74 22                	je     c001a53a <File::close()+0x5a>
c001a518:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a51c:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a523:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a529:	53                   	push   ebx
c001a52a:	53                   	push   ebx
c001a52b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a52d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a533:	50                   	push   eax
c001a534:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a537:	83 c4 10             	add    esp,0x10
c001a53a:	83 c4 08             	add    esp,0x8
c001a53d:	5b                   	pop    ebx
c001a53e:	c3                   	ret    
c001a53f:	90                   	nop

c001a540 <File::seek(unsigned long long)>:
c001a540:	56                   	push   esi
c001a541:	53                   	push   ebx
c001a542:	b8 0b 00 00 00       	mov    eax,0xb
c001a547:	51                   	push   ecx
c001a548:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a54c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a550:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a557:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a55b:	83 fa 19             	cmp    edx,0x19
c001a55e:	77 31                	ja     c001a591 <File::seek(unsigned long long)+0x51>
c001a560:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a567:	85 d2                	test   edx,edx
c001a569:	74 26                	je     c001a591 <File::seek(unsigned long long)+0x51>
c001a56b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a571:	85 d2                	test   edx,edx
c001a573:	74 1c                	je     c001a591 <File::seek(unsigned long long)+0x51>
c001a575:	b8 05 00 00 00       	mov    eax,0x5
c001a57a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a57e:	74 11                	je     c001a591 <File::seek(unsigned long long)+0x51>
c001a580:	8b 02                	mov    eax,DWORD PTR [edx]
c001a582:	53                   	push   ebx
c001a583:	51                   	push   ecx
c001a584:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a58a:	52                   	push   edx
c001a58b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a58e:	83 c4 10             	add    esp,0x10
c001a591:	5a                   	pop    edx
c001a592:	5b                   	pop    ebx
c001a593:	5e                   	pop    esi
c001a594:	c3                   	ret    
c001a595:	90                   	nop

c001a596 <File::truncate(unsigned long long)>:
c001a596:	56                   	push   esi
c001a597:	53                   	push   ebx
c001a598:	b8 0b 00 00 00       	mov    eax,0xb
c001a59d:	51                   	push   ecx
c001a59e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a5a6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a5ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5b1:	83 fa 19             	cmp    edx,0x19
c001a5b4:	77 31                	ja     c001a5e7 <File::truncate(unsigned long long)+0x51>
c001a5b6:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a5bd:	85 d2                	test   edx,edx
c001a5bf:	74 26                	je     c001a5e7 <File::truncate(unsigned long long)+0x51>
c001a5c1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a5c7:	85 d2                	test   edx,edx
c001a5c9:	74 1c                	je     c001a5e7 <File::truncate(unsigned long long)+0x51>
c001a5cb:	b8 05 00 00 00       	mov    eax,0x5
c001a5d0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a5d4:	74 11                	je     c001a5e7 <File::truncate(unsigned long long)+0x51>
c001a5d6:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5d8:	53                   	push   ebx
c001a5d9:	51                   	push   ecx
c001a5da:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a5e0:	52                   	push   edx
c001a5e1:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a5e4:	83 c4 10             	add    esp,0x10
c001a5e7:	5a                   	pop    edx
c001a5e8:	5b                   	pop    ebx
c001a5e9:	5e                   	pop    esi
c001a5ea:	c3                   	ret    
c001a5eb:	90                   	nop

c001a5ec <File::tell(unsigned long long*)>:
c001a5ec:	83 ec 0c             	sub    esp,0xc
c001a5ef:	b8 0b 00 00 00       	mov    eax,0xb
c001a5f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a5f8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a5ff:	83 fa 19             	cmp    edx,0x19
c001a602:	77 34                	ja     c001a638 <File::tell(unsigned long long*)+0x4c>
c001a604:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a60b:	85 d2                	test   edx,edx
c001a60d:	74 29                	je     c001a638 <File::tell(unsigned long long*)+0x4c>
c001a60f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a615:	85 d2                	test   edx,edx
c001a617:	74 1f                	je     c001a638 <File::tell(unsigned long long*)+0x4c>
c001a619:	b8 05 00 00 00       	mov    eax,0x5
c001a61e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a622:	74 14                	je     c001a638 <File::tell(unsigned long long*)+0x4c>
c001a624:	50                   	push   eax
c001a625:	8b 02                	mov    eax,DWORD PTR [edx]
c001a627:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a62b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a631:	52                   	push   edx
c001a632:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a635:	83 c4 10             	add    esp,0x10
c001a638:	83 c4 0c             	add    esp,0xc
c001a63b:	c3                   	ret    

c001a63c <File::rewind()>:
c001a63c:	83 ec 10             	sub    esp,0x10
c001a63f:	6a 00                	push   0x0
c001a641:	6a 00                	push   0x0
c001a643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a647:	e8 f4 fe ff ff       	call   c001a540 <File::seek(unsigned long long)>
c001a64c:	83 c4 1c             	add    esp,0x1c
c001a64f:	c3                   	ret    

c001a650 <File::unlink()>:
c001a650:	83 ec 0c             	sub    esp,0xc
c001a653:	b8 0b 00 00 00       	mov    eax,0xb
c001a658:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a65c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a663:	83 f9 19             	cmp    ecx,0x19
c001a666:	77 2f                	ja     c001a697 <File::unlink()+0x47>
c001a668:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a66f:	85 c9                	test   ecx,ecx
c001a671:	74 24                	je     c001a697 <File::unlink()+0x47>
c001a673:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a679:	85 c9                	test   ecx,ecx
c001a67b:	74 1a                	je     c001a697 <File::unlink()+0x47>
c001a67d:	b8 06 00 00 00       	mov    eax,0x6
c001a682:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a686:	75 0f                	jne    c001a697 <File::unlink()+0x47>
c001a688:	83 c2 0d             	add    edx,0xd
c001a68b:	50                   	push   eax
c001a68c:	50                   	push   eax
c001a68d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a68f:	52                   	push   edx
c001a690:	51                   	push   ecx
c001a691:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a694:	83 c4 10             	add    esp,0x10
c001a697:	83 c4 0c             	add    esp,0xc
c001a69a:	c3                   	ret    
c001a69b:	90                   	nop

c001a69c <File::rename(char const*)>:
c001a69c:	83 ec 0c             	sub    esp,0xc
c001a69f:	b8 0b 00 00 00       	mov    eax,0xb
c001a6a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6af:	83 f9 19             	cmp    ecx,0x19
c001a6b2:	77 32                	ja     c001a6e6 <File::rename(char const*)+0x4a>
c001a6b4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6bb:	85 c9                	test   ecx,ecx
c001a6bd:	74 27                	je     c001a6e6 <File::rename(char const*)+0x4a>
c001a6bf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6c5:	85 c9                	test   ecx,ecx
c001a6c7:	74 1d                	je     c001a6e6 <File::rename(char const*)+0x4a>
c001a6c9:	b8 06 00 00 00       	mov    eax,0x6
c001a6ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6d2:	75 12                	jne    c001a6e6 <File::rename(char const*)+0x4a>
c001a6d4:	83 c2 0d             	add    edx,0xd
c001a6d7:	50                   	push   eax
c001a6d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6de:	52                   	push   edx
c001a6df:	51                   	push   ecx
c001a6e0:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a6e3:	83 c4 10             	add    esp,0x10
c001a6e6:	83 c4 0c             	add    esp,0xc
c001a6e9:	c3                   	ret    

c001a6ea <File::chfatattr(unsigned char, unsigned char)>:
c001a6ea:	57                   	push   edi
c001a6eb:	b8 0b 00 00 00       	mov    eax,0xb
c001a6f0:	56                   	push   esi
c001a6f1:	53                   	push   ebx
c001a6f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a701:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a705:	83 f9 19             	cmp    ecx,0x19
c001a708:	77 37                	ja     c001a741 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a70a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a711:	85 c9                	test   ecx,ecx
c001a713:	74 2c                	je     c001a741 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a715:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a71b:	85 c9                	test   ecx,ecx
c001a71d:	74 22                	je     c001a741 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a71f:	b8 06 00 00 00       	mov    eax,0x6
c001a724:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a728:	75 17                	jne    c001a741 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a72a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a72c:	89 f0                	mov    eax,esi
c001a72e:	83 c2 0d             	add    edx,0xd
c001a731:	0f b6 f0             	movzx  esi,al
c001a734:	0f b6 db             	movzx  ebx,bl
c001a737:	56                   	push   esi
c001a738:	53                   	push   ebx
c001a739:	52                   	push   edx
c001a73a:	51                   	push   ecx
c001a73b:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a73e:	83 c4 10             	add    esp,0x10
c001a741:	5b                   	pop    ebx
c001a742:	5e                   	pop    esi
c001a743:	5f                   	pop    edi
c001a744:	c3                   	ret    
c001a745:	90                   	nop

c001a746 <File::exists()>:
c001a746:	83 ec 0c             	sub    esp,0xc
c001a749:	31 c0                	xor    eax,eax
c001a74b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a74f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a756:	83 f9 19             	cmp    ecx,0x19
c001a759:	77 24                	ja     c001a77f <File::exists()+0x39>
c001a75b:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a762:	85 c9                	test   ecx,ecx
c001a764:	74 19                	je     c001a77f <File::exists()+0x39>
c001a766:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a76c:	85 c9                	test   ecx,ecx
c001a76e:	74 0f                	je     c001a77f <File::exists()+0x39>
c001a770:	83 c2 0d             	add    edx,0xd
c001a773:	50                   	push   eax
c001a774:	50                   	push   eax
c001a775:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a777:	52                   	push   edx
c001a778:	51                   	push   ecx
c001a779:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a77c:	83 c4 10             	add    esp,0x10
c001a77f:	83 c4 0c             	add    esp,0xc
c001a782:	c3                   	ret    
c001a783:	90                   	nop

c001a784 <File::stat(unsigned long long*, bool*)>:
c001a784:	56                   	push   esi
c001a785:	53                   	push   ebx
c001a786:	50                   	push   eax
c001a787:	b8 0b 00 00 00       	mov    eax,0xb
c001a78c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a790:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a794:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a79b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a79f:	83 f9 19             	cmp    ecx,0x19
c001a7a2:	77 3d                	ja     c001a7e1 <File::stat(unsigned long long*, bool*)+0x5d>
c001a7a4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a7ab:	85 c9                	test   ecx,ecx
c001a7ad:	74 32                	je     c001a7e1 <File::stat(unsigned long long*, bool*)+0x5d>
c001a7af:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a7b5:	85 c9                	test   ecx,ecx
c001a7b7:	74 28                	je     c001a7e1 <File::stat(unsigned long long*, bool*)+0x5d>
c001a7b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a7bb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a7bf:	74 13                	je     c001a7d4 <File::stat(unsigned long long*, bool*)+0x50>
c001a7c1:	83 ec 04             	sub    esp,0x4
c001a7c4:	56                   	push   esi
c001a7c5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a7cb:	51                   	push   ecx
c001a7cc:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a7cf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a7d2:	eb 0a                	jmp    c001a7de <File::stat(unsigned long long*, bool*)+0x5a>
c001a7d4:	53                   	push   ebx
c001a7d5:	83 c2 0d             	add    edx,0xd
c001a7d8:	56                   	push   esi
c001a7d9:	52                   	push   edx
c001a7da:	51                   	push   ecx
c001a7db:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a7de:	83 c4 10             	add    esp,0x10
c001a7e1:	5a                   	pop    edx
c001a7e2:	5b                   	pop    ebx
c001a7e3:	5e                   	pop    esi
c001a7e4:	c3                   	ret    

c001a7e5 <Fs::setcwd(Process*, char*)>:
c001a7e5:	55                   	push   ebp
c001a7e6:	57                   	push   edi
c001a7e7:	56                   	push   esi
c001a7e8:	53                   	push   ebx
c001a7e9:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a7ef:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a7f6:	6a 00                	push   0x0
c001a7f8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a7fe:	57                   	push   edi
c001a7ff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a806:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a80a:	56                   	push   esi
c001a80b:	e8 5c f9 ff ff       	call   c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a810:	89 34 24             	mov    DWORD PTR [esp],esi
c001a813:	e8 58 5d fe ff       	call   c0000570 <strlen>
c001a818:	83 c4 10             	add    esp,0x10
c001a81b:	83 f8 02             	cmp    eax,0x2
c001a81e:	77 15                	ja     c001a835 <Fs::setcwd(Process*, char*)+0x50>
c001a820:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a825:	83 eb 41             	sub    ebx,0x41
c001a828:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a82f:	85 c0                	test   eax,eax
c001a831:	75 1c                	jne    c001a84f <Fs::setcwd(Process*, char*)+0x6a>
c001a833:	eb 2f                	jmp    c001a864 <Fs::setcwd(Process*, char*)+0x7f>
c001a835:	83 ec 0c             	sub    esp,0xc
c001a838:	56                   	push   esi
c001a839:	e8 32 5d fe ff       	call   c0000570 <strlen>
c001a83e:	83 c4 10             	add    esp,0x10
c001a841:	83 f8 03             	cmp    eax,0x3
c001a844:	75 57                	jne    c001a89d <Fs::setcwd(Process*, char*)+0xb8>
c001a846:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a84b:	75 50                	jne    c001a89d <Fs::setcwd(Process*, char*)+0xb8>
c001a84d:	eb d1                	jmp    c001a820 <Fs::setcwd(Process*, char*)+0x3b>
c001a84f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a856:	75 0c                	jne    c001a864 <Fs::setcwd(Process*, char*)+0x7f>
c001a858:	83 ec 0c             	sub    esp,0xc
c001a85b:	50                   	push   eax
c001a85c:	e8 ad 1d 00 00       	call   c001c60e <LogicalDisk::mount()>
c001a861:	83 c4 10             	add    esp,0x10
c001a864:	b8 03 00 00 00       	mov    eax,0x3
c001a869:	83 fb 19             	cmp    ebx,0x19
c001a86c:	0f 87 c6 00 00 00    	ja     c001a938 <Fs::setcwd(Process*, char*)+0x153>
c001a872:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a879:	b8 05 00 00 00       	mov    eax,0x5
c001a87e:	85 d2                	test   edx,edx
c001a880:	0f 84 b2 00 00 00    	je     c001a938 <Fs::setcwd(Process*, char*)+0x153>
c001a886:	b8 06 00 00 00       	mov    eax,0x6
c001a88b:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a892:	0f 85 92 00 00 00    	jne    c001a92a <Fs::setcwd(Process*, char*)+0x145>
c001a898:	e9 9b 00 00 00       	jmp    c001a938 <Fs::setcwd(Process*, char*)+0x153>
c001a89d:	83 ec 0c             	sub    esp,0xc
c001a8a0:	68 14 01 00 00       	push   0x114
c001a8a5:	e8 14 bb ff ff       	call   c00163be <malloc>
c001a8aa:	83 c4 0c             	add    esp,0xc
c001a8ad:	89 c3                	mov    ebx,eax
c001a8af:	55                   	push   ebp
c001a8b0:	56                   	push   esi
c001a8b1:	50                   	push   eax
c001a8b2:	e8 ad fb ff ff       	call   c001a464 <File::File(char const*, Process*)>
c001a8b7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a8bc:	83 c4 0c             	add    esp,0xc
c001a8bf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a8c3:	50                   	push   eax
c001a8c4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a8c8:	50                   	push   eax
c001a8c9:	53                   	push   ebx
c001a8ca:	e8 b5 fe ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	83 f8 02             	cmp    eax,0x2
c001a8d5:	74 27                	je     c001a8fe <Fs::setcwd(Process*, char*)+0x119>
c001a8d7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a8dc:	75 1c                	jne    c001a8fa <Fs::setcwd(Process*, char*)+0x115>
c001a8de:	b8 02 00 00 00       	mov    eax,0x2
c001a8e3:	85 db                	test   ebx,ebx
c001a8e5:	74 51                	je     c001a938 <Fs::setcwd(Process*, char*)+0x153>
c001a8e7:	83 ec 0c             	sub    esp,0xc
c001a8ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8ec:	53                   	push   ebx
c001a8ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8f0:	83 c4 10             	add    esp,0x10
c001a8f3:	b8 02 00 00 00       	mov    eax,0x2
c001a8f8:	eb 3e                	jmp    c001a938 <Fs::setcwd(Process*, char*)+0x153>
c001a8fa:	85 c0                	test   eax,eax
c001a8fc:	74 1c                	je     c001a91a <Fs::setcwd(Process*, char*)+0x135>
c001a8fe:	b8 01 00 00 00       	mov    eax,0x1
c001a903:	85 db                	test   ebx,ebx
c001a905:	74 31                	je     c001a938 <Fs::setcwd(Process*, char*)+0x153>
c001a907:	83 ec 0c             	sub    esp,0xc
c001a90a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a90c:	53                   	push   ebx
c001a90d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a910:	83 c4 10             	add    esp,0x10
c001a913:	b8 01 00 00 00       	mov    eax,0x1
c001a918:	eb 1e                	jmp    c001a938 <Fs::setcwd(Process*, char*)+0x153>
c001a91a:	85 db                	test   ebx,ebx
c001a91c:	74 0c                	je     c001a92a <Fs::setcwd(Process*, char*)+0x145>
c001a91e:	83 ec 0c             	sub    esp,0xc
c001a921:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a923:	53                   	push   ebx
c001a924:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a927:	83 c4 10             	add    esp,0x10
c001a92a:	50                   	push   eax
c001a92b:	50                   	push   eax
c001a92c:	56                   	push   esi
c001a92d:	57                   	push   edi
c001a92e:	e8 0d 5d fe ff       	call   c0000640 <strcpy>
c001a933:	83 c4 10             	add    esp,0x10
c001a936:	31 c0                	xor    eax,eax
c001a938:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a93e:	5b                   	pop    ebx
c001a93f:	5e                   	pop    esi
c001a940:	5f                   	pop    edi
c001a941:	5d                   	pop    ebp
c001a942:	c3                   	ret    
c001a943:	90                   	nop

c001a944 <Directory::Directory(char const*, Process*)>:
c001a944:	83 ec 0c             	sub    esp,0xc
c001a947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a94b:	83 ec 08             	sub    esp,0x8
c001a94e:	6a 00                	push   0x0
c001a950:	50                   	push   eax
c001a951:	e8 80 d1 ff ff       	call   c0017ad6 <UnixFile::UnixFile(int)>
c001a956:	83 c4 10             	add    esp,0x10
c001a959:	ba 78 1e 03 c0       	mov    edx,0xc0031e78
c001a95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a962:	89 10                	mov    DWORD PTR [eax],edx
c001a964:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a969:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a96d:	0f 95 c0             	setne  al
c001a970:	0f b6 c0             	movzx  eax,al
c001a973:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a977:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a97d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a981:	83 c2 0d             	add    edx,0xd
c001a984:	50                   	push   eax
c001a985:	51                   	push   ecx
c001a986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a98a:	52                   	push   edx
c001a98b:	e8 dc f7 ff ff       	call   c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a990:	83 c4 10             	add    esp,0x10
c001a993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a997:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a99a:	83 e8 41             	sub    eax,0x41
c001a99d:	88 c2                	mov    dl,al
c001a99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a9a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ad:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9bb:	0f b6 c0             	movzx  eax,al
c001a9be:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9c5:	85 c0                	test   eax,eax
c001a9c7:	74 3e                	je     c001aa07 <Directory::Directory(char const*, Process*)+0xc3>
c001a9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9d3:	0f b6 c0             	movzx  eax,al
c001a9d6:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a9e3:	85 c0                	test   eax,eax
c001a9e5:	75 20                	jne    c001aa07 <Directory::Directory(char const*, Process*)+0xc3>
c001a9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9f1:	0f b6 c0             	movzx  eax,al
c001a9f4:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9fb:	83 ec 0c             	sub    esp,0xc
c001a9fe:	50                   	push   eax
c001a9ff:	e8 0a 1c 00 00       	call   c001c60e <LogicalDisk::mount()>
c001aa04:	83 c4 10             	add    esp,0x10
c001aa07:	90                   	nop
c001aa08:	83 c4 0c             	add    esp,0xc
c001aa0b:	c3                   	ret    

c001aa0c <Directory::open()>:
c001aa0c:	53                   	push   ebx
c001aa0d:	b8 0b 00 00 00       	mov    eax,0xb
c001aa12:	83 ec 08             	sub    esp,0x8
c001aa15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa19:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001aa20:	83 fa 19             	cmp    edx,0x19
c001aa23:	77 3d                	ja     c001aa62 <Directory::open()+0x56>
c001aa25:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001aa2c:	85 d2                	test   edx,edx
c001aa2e:	74 32                	je     c001aa62 <Directory::open()+0x56>
c001aa30:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001aa36:	85 d2                	test   edx,edx
c001aa38:	74 28                	je     c001aa62 <Directory::open()+0x56>
c001aa3a:	b8 06 00 00 00       	mov    eax,0x6
c001aa3f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001aa43:	75 1d                	jne    c001aa62 <Directory::open()+0x56>
c001aa45:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001aa4b:	50                   	push   eax
c001aa4c:	8b 02                	mov    eax,DWORD PTR [edx]
c001aa4e:	51                   	push   ecx
c001aa4f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001aa52:	51                   	push   ecx
c001aa53:	52                   	push   edx
c001aa54:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001aa57:	83 c4 10             	add    esp,0x10
c001aa5a:	85 c0                	test   eax,eax
c001aa5c:	75 04                	jne    c001aa62 <Directory::open()+0x56>
c001aa5e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001aa62:	83 c4 08             	add    esp,0x8
c001aa65:	5b                   	pop    ebx
c001aa66:	c3                   	ret    
c001aa67:	90                   	nop

c001aa68 <Directory::close()>:
c001aa68:	53                   	push   ebx
c001aa69:	b8 0b 00 00 00       	mov    eax,0xb
c001aa6e:	83 ec 08             	sub    esp,0x8
c001aa71:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa75:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa7c:	83 f9 19             	cmp    ecx,0x19
c001aa7f:	77 41                	ja     c001aac2 <Directory::close()+0x5a>
c001aa81:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa88:	85 db                	test   ebx,ebx
c001aa8a:	74 36                	je     c001aac2 <Directory::close()+0x5a>
c001aa8c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001aa93:	74 2d                	je     c001aac2 <Directory::close()+0x5a>
c001aa95:	b8 05 00 00 00       	mov    eax,0x5
c001aa9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa9e:	74 22                	je     c001aac2 <Directory::close()+0x5a>
c001aaa0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001aaa4:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001aab1:	53                   	push   ebx
c001aab2:	53                   	push   ebx
c001aab3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aab5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aabb:	50                   	push   eax
c001aabc:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001aabf:	83 c4 10             	add    esp,0x10
c001aac2:	83 c4 08             	add    esp,0x8
c001aac5:	5b                   	pop    ebx
c001aac6:	c3                   	ret    
c001aac7:	90                   	nop

c001aac8 <Directory::unlink()>:
c001aac8:	83 ec 0c             	sub    esp,0xc
c001aacb:	b8 0b 00 00 00       	mov    eax,0xb
c001aad0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aad4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aadb:	83 f9 19             	cmp    ecx,0x19
c001aade:	77 2f                	ja     c001ab0f <Directory::unlink()+0x47>
c001aae0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aae7:	85 c9                	test   ecx,ecx
c001aae9:	74 24                	je     c001ab0f <Directory::unlink()+0x47>
c001aaeb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aaf1:	85 c9                	test   ecx,ecx
c001aaf3:	74 1a                	je     c001ab0f <Directory::unlink()+0x47>
c001aaf5:	b8 06 00 00 00       	mov    eax,0x6
c001aafa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aafe:	75 0f                	jne    c001ab0f <Directory::unlink()+0x47>
c001ab00:	83 c2 0d             	add    edx,0xd
c001ab03:	50                   	push   eax
c001ab04:	50                   	push   eax
c001ab05:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab07:	52                   	push   edx
c001ab08:	51                   	push   ecx
c001ab09:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001ab0c:	83 c4 10             	add    esp,0x10
c001ab0f:	83 c4 0c             	add    esp,0xc
c001ab12:	c3                   	ret    
c001ab13:	90                   	nop

c001ab14 <Directory::rename(char const*)>:
c001ab14:	83 ec 0c             	sub    esp,0xc
c001ab17:	b8 0b 00 00 00       	mov    eax,0xb
c001ab1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab27:	83 f9 19             	cmp    ecx,0x19
c001ab2a:	77 32                	ja     c001ab5e <Directory::rename(char const*)+0x4a>
c001ab2c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab33:	85 c9                	test   ecx,ecx
c001ab35:	74 27                	je     c001ab5e <Directory::rename(char const*)+0x4a>
c001ab37:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab3d:	85 c9                	test   ecx,ecx
c001ab3f:	74 1d                	je     c001ab5e <Directory::rename(char const*)+0x4a>
c001ab41:	b8 06 00 00 00       	mov    eax,0x6
c001ab46:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab4a:	75 12                	jne    c001ab5e <Directory::rename(char const*)+0x4a>
c001ab4c:	83 c2 0d             	add    edx,0xd
c001ab4f:	50                   	push   eax
c001ab50:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab56:	52                   	push   edx
c001ab57:	51                   	push   ecx
c001ab58:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ab5b:	83 c4 10             	add    esp,0x10
c001ab5e:	83 c4 0c             	add    esp,0xc
c001ab61:	c3                   	ret    

c001ab62 <Directory::exists()>:
c001ab62:	83 ec 0c             	sub    esp,0xc
c001ab65:	31 c0                	xor    eax,eax
c001ab67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab6b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab72:	83 f9 19             	cmp    ecx,0x19
c001ab75:	77 24                	ja     c001ab9b <Directory::exists()+0x39>
c001ab77:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab7e:	85 c9                	test   ecx,ecx
c001ab80:	74 19                	je     c001ab9b <Directory::exists()+0x39>
c001ab82:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab88:	85 c9                	test   ecx,ecx
c001ab8a:	74 0f                	je     c001ab9b <Directory::exists()+0x39>
c001ab8c:	83 c2 0d             	add    edx,0xd
c001ab8f:	50                   	push   eax
c001ab90:	50                   	push   eax
c001ab91:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab93:	52                   	push   edx
c001ab94:	51                   	push   ecx
c001ab95:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ab98:	83 c4 10             	add    esp,0x10
c001ab9b:	83 c4 0c             	add    esp,0xc
c001ab9e:	c3                   	ret    
c001ab9f:	90                   	nop

c001aba0 <Directory::read(dirent*)>:
c001aba0:	83 ec 1c             	sub    esp,0x1c
c001aba3:	b8 0b 00 00 00       	mov    eax,0xb
c001aba8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001abac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001abb3:	83 f9 19             	cmp    ecx,0x19
c001abb6:	77 30                	ja     c001abe8 <Directory::read(dirent*)+0x48>
c001abb8:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001abbf:	85 c9                	test   ecx,ecx
c001abc1:	74 25                	je     c001abe8 <Directory::read(dirent*)+0x48>
c001abc3:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001abca:	74 1c                	je     c001abe8 <Directory::read(dirent*)+0x48>
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	8b 02                	mov    eax,DWORD PTR [edx]
c001abd1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001abd5:	51                   	push   ecx
c001abd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001abda:	6a 00                	push   0x0
c001abdc:	68 10 01 00 00       	push   0x110
c001abe1:	52                   	push   edx
c001abe2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abe5:	83 c4 20             	add    esp,0x20
c001abe8:	83 c4 1c             	add    esp,0x1c
c001abeb:	c3                   	ret    

c001abec <Directory::create()>:
c001abec:	83 ec 0c             	sub    esp,0xc
c001abef:	b8 0b 00 00 00       	mov    eax,0xb
c001abf4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abf8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001abff:	83 f9 19             	cmp    ecx,0x19
c001ac02:	77 2f                	ja     c001ac33 <Directory::create()+0x47>
c001ac04:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ac0b:	85 c9                	test   ecx,ecx
c001ac0d:	74 24                	je     c001ac33 <Directory::create()+0x47>
c001ac0f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ac15:	85 c9                	test   ecx,ecx
c001ac17:	74 1a                	je     c001ac33 <Directory::create()+0x47>
c001ac19:	b8 06 00 00 00       	mov    eax,0x6
c001ac1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ac22:	75 0f                	jne    c001ac33 <Directory::create()+0x47>
c001ac24:	83 c2 0d             	add    edx,0xd
c001ac27:	50                   	push   eax
c001ac28:	50                   	push   eax
c001ac29:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac2b:	52                   	push   edx
c001ac2c:	51                   	push   ecx
c001ac2d:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ac30:	83 c4 10             	add    esp,0x10
c001ac33:	83 c4 0c             	add    esp,0xc
c001ac36:	c3                   	ret    
c001ac37:	90                   	nop

c001ac38 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac38:	b8 0a 00 00 00       	mov    eax,0xa
c001ac3d:	c3                   	ret    
c001ac3e:	66 90                	xchg   ax,ax

c001ac40 <Bus::Bus(char const*)>:
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac47:	83 ec 08             	sub    esp,0x8
c001ac4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac4e:	50                   	push   eax
c001ac4f:	e8 ec 07 00 00       	call   c001b440 <Device::Device(char const*)>
c001ac54:	83 c4 10             	add    esp,0x10
c001ac57:	ba 94 1e 03 c0       	mov    edx,0xc0031e94
c001ac5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac60:	89 10                	mov    DWORD PTR [eax],edx
c001ac62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac66:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ac70:	90                   	nop
c001ac71:	83 c4 0c             	add    esp,0xc
c001ac74:	c3                   	ret    
c001ac75:	90                   	nop
c001ac76:	66 90                	xchg   ax,ax

c001ac78 <Bus::~Bus()>:
c001ac78:	83 ec 0c             	sub    esp,0xc
c001ac7b:	ba 94 1e 03 c0       	mov    edx,0xc0031e94
c001ac80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac84:	89 10                	mov    DWORD PTR [eax],edx
c001ac86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8a:	83 ec 0c             	sub    esp,0xc
c001ac8d:	50                   	push   eax
c001ac8e:	e8 4d 05 00 00       	call   c001b1e0 <Device::~Device()>
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	90                   	nop
c001ac97:	83 c4 0c             	add    esp,0xc
c001ac9a:	c3                   	ret    
c001ac9b:	90                   	nop

c001ac9c <Bus::~Bus()>:
c001ac9c:	83 ec 0c             	sub    esp,0xc
c001ac9f:	83 ec 0c             	sub    esp,0xc
c001aca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aca6:	e8 cd ff ff ff       	call   c001ac78 <Bus::~Bus()>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	83 ec 08             	sub    esp,0x8
c001acb1:	68 58 01 00 00       	push   0x158
c001acb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acba:	e8 71 e4 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001acbf:	83 c4 10             	add    esp,0x10
c001acc2:	83 c4 0c             	add    esp,0xc
c001acc5:	c3                   	ret    

c001acc6 <beepThread(void*)>:
c001acc6:	83 ec 0c             	sub    esp,0xc
c001acc9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001acce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acd2:	48                   	dec    eax
c001acd3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001acd8:	75 01                	jne    c001acdb <beepThread(void*)+0x15>
c001acda:	fb                   	sti    
c001acdb:	83 ec 0c             	sub    esp,0xc
c001acde:	6b c2 0a             	imul   eax,edx,0xa
c001ace1:	50                   	push   eax
c001ace2:	e8 7d a7 00 00       	call   c0025464 <milliTenthSleep(unsigned int)>
c001ace7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acee:	e8 78 c5 00 00       	call   c002726b <HalMakeBeep(int)>
c001acf3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001acfb:	83 c4 1c             	add    esp,0x1c
c001acfe:	e9 45 a6 00 00       	jmp    c0025348 <blockTask(TaskState)>

c001ad03 <Krnl::beep(int, int, bool)>:
c001ad03:	56                   	push   esi
c001ad04:	53                   	push   ebx
c001ad05:	83 ec 10             	sub    esp,0x10
c001ad08:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ad0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad14:	e8 52 c5 00 00       	call   c002726b <HalMakeBeep(int)>
c001ad19:	83 c4 10             	add    esp,0x10
c001ad1c:	89 f0                	mov    eax,esi
c001ad1e:	84 c0                	test   al,al
c001ad20:	74 1e                	je     c001ad40 <Krnl::beep(int, int, bool)+0x3d>
c001ad22:	83 ec 0c             	sub    esp,0xc
c001ad25:	6b db 0a             	imul   ebx,ebx,0xa
c001ad28:	53                   	push   ebx
c001ad29:	e8 36 a7 00 00       	call   c0025464 <milliTenthSleep(unsigned int)>
c001ad2e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad36:	83 c4 14             	add    esp,0x14
c001ad39:	5b                   	pop    ebx
c001ad3a:	5e                   	pop    esi
c001ad3b:	e9 2b c5 00 00       	jmp    c002726b <HalMakeBeep(int)>
c001ad40:	68 e6 00 00 00       	push   0xe6
c001ad45:	53                   	push   ebx
c001ad46:	68 c6 ac 01 c0       	push   0xc001acc6
c001ad4b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad51:	e8 e6 a2 00 00       	call   c002503c <Process::createThread(void (*)(void*), void*, int)>
c001ad56:	83 c4 14             	add    esp,0x14
c001ad59:	5b                   	pop    ebx
c001ad5a:	5e                   	pop    esi
c001ad5b:	c3                   	ret    

c001ad5c <User::loadClockSettings(int)>:
c001ad5c:	53                   	push   ebx
c001ad5d:	83 ec 14             	sub    esp,0x14
c001ad60:	68 14 01 00 00       	push   0x114
c001ad65:	e8 54 b6 ff ff       	call   c00163be <malloc>
c001ad6a:	83 c4 0c             	add    esp,0xc
c001ad6d:	89 c3                	mov    ebx,eax
c001ad6f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad75:	68 b8 1e 03 c0       	push   0xc0031eb8
c001ad7a:	50                   	push   eax
c001ad7b:	e8 e4 f6 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c001ad80:	58                   	pop    eax
c001ad81:	5a                   	pop    edx
c001ad82:	6a 01                	push   0x1
c001ad84:	53                   	push   ebx
c001ad85:	e8 f8 f6 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c001ad8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad8d:	e8 4e f7 ff ff       	call   c001a4e0 <File::close()>
c001ad92:	83 c4 10             	add    esp,0x10
c001ad95:	85 db                	test   ebx,ebx
c001ad97:	74 0f                	je     c001ada8 <User::loadClockSettings(int)+0x4c>
c001ad99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ad9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ada2:	83 c4 08             	add    esp,0x8
c001ada5:	5b                   	pop    ebx
c001ada6:	ff e0                	jmp    eax
c001ada8:	83 c4 08             	add    esp,0x8
c001adab:	5b                   	pop    ebx
c001adac:	c3                   	ret    
c001adad:	90                   	nop

c001adae <Clock::Clock(char const*)>:
c001adae:	83 ec 0c             	sub    esp,0xc
c001adb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb5:	83 ec 08             	sub    esp,0x8
c001adb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adbc:	50                   	push   eax
c001adbd:	e8 7e 06 00 00       	call   c001b440 <Device::Device(char const*)>
c001adc2:	83 c4 10             	add    esp,0x10
c001adc5:	ba e0 1e 03 c0       	mov    edx,0xc0031ee0
c001adca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adce:	89 10                	mov    DWORD PTR [eax],edx
c001add0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001adde:	90                   	nop
c001addf:	83 c4 0c             	add    esp,0xc
c001ade2:	c3                   	ret    
c001ade3:	90                   	nop

c001ade4 <Clock::~Clock()>:
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	ba e0 1e 03 c0       	mov    edx,0xc0031ee0
c001adec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf0:	89 10                	mov    DWORD PTR [eax],edx
c001adf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf6:	83 ec 0c             	sub    esp,0xc
c001adf9:	50                   	push   eax
c001adfa:	e8 e1 03 00 00       	call   c001b1e0 <Device::~Device()>
c001adff:	83 c4 10             	add    esp,0x10
c001ae02:	90                   	nop
c001ae03:	83 c4 0c             	add    esp,0xc
c001ae06:	c3                   	ret    
c001ae07:	90                   	nop

c001ae08 <Clock::~Clock()>:
c001ae08:	83 ec 0c             	sub    esp,0xc
c001ae0b:	83 ec 0c             	sub    esp,0xc
c001ae0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae12:	e8 cd ff ff ff       	call   c001ade4 <Clock::~Clock()>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	83 ec 08             	sub    esp,0x8
c001ae1d:	68 58 01 00 00       	push   0x158
c001ae22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae26:	e8 05 e3 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001ae2b:	83 c4 10             	add    esp,0x10
c001ae2e:	83 c4 0c             	add    esp,0xc
c001ae31:	c3                   	ret    

c001ae32 <Clock::timeInSecondsLocal()>:
c001ae32:	53                   	push   ebx
c001ae33:	83 ec 14             	sub    esp,0x14
c001ae36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae3a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae3c:	50                   	push   eax
c001ae3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ae40:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001ae47:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001ae4d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001ae53:	89 cb                	mov    ebx,ecx
c001ae55:	c1 fb 1f             	sar    ebx,0x1f
c001ae58:	01 c8                	add    eax,ecx
c001ae5a:	11 da                	adc    edx,ebx
c001ae5c:	83 c4 10             	add    esp,0x10
c001ae5f:	31 c9                	xor    ecx,ecx
c001ae61:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ae68:	74 05                	je     c001ae6f <Clock::timeInSecondsLocal()+0x3d>
c001ae6a:	b9 08 07 00 00       	mov    ecx,0x708
c001ae6f:	31 db                	xor    ebx,ebx
c001ae71:	01 c8                	add    eax,ecx
c001ae73:	11 da                	adc    edx,ebx
c001ae75:	83 c4 08             	add    esp,0x8
c001ae78:	5b                   	pop    ebx
c001ae79:	c3                   	ret    

c001ae7a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001ae7a:	57                   	push   edi
c001ae7b:	56                   	push   esi
c001ae7c:	53                   	push   ebx
c001ae7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae85:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae8b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001ae8e:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001ae95:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001ae9b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001aea1:	99                   	cdq    
c001aea2:	29 c6                	sub    esi,eax
c001aea4:	19 d7                	sbb    edi,edx
c001aea6:	89 f0                	mov    eax,esi
c001aea8:	89 fa                	mov    edx,edi
c001aeaa:	31 f6                	xor    esi,esi
c001aeac:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001aeb3:	74 05                	je     c001aeba <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001aeb5:	be 08 07 00 00       	mov    esi,0x708
c001aeba:	31 ff                	xor    edi,edi
c001aebc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001aec0:	29 f0                	sub    eax,esi
c001aec2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aec6:	19 fa                	sbb    edx,edi
c001aec8:	89 d8                	mov    eax,ebx
c001aeca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aece:	5b                   	pop    ebx
c001aecf:	5e                   	pop    esi
c001aed0:	5f                   	pop    edi
c001aed1:	ff e0                	jmp    eax

c001aed3 <datetimeToSeconds(datetime_t)>:
c001aed3:	55                   	push   ebp
c001aed4:	57                   	push   edi
c001aed5:	56                   	push   esi
c001aed6:	53                   	push   ebx
c001aed7:	83 ec 0c             	sub    esp,0xc
c001aeda:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aede:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001aee2:	89 d6                	mov    esi,edx
c001aee4:	0f b6 c7             	movzx  eax,bh
c001aee7:	c1 ee 10             	shr    esi,0x10
c001aeea:	6b e8 3c             	imul   ebp,eax,0x3c
c001aeed:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001aef3:	0f b6 ce             	movzx  ecx,dh
c001aef6:	89 df                	mov    edi,ebx
c001aef8:	49                   	dec    ecx
c001aef9:	c1 ef 10             	shr    edi,0x10
c001aefc:	0f b6 db             	movzx  ebx,bl
c001aeff:	89 f8                	mov    eax,edi
c001af01:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001af07:	0f b6 f8             	movzx  edi,al
c001af0a:	0f b6 d2             	movzx  edx,dl
c001af0d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001af11:	01 d8                	add    eax,ebx
c001af13:	0f b7 de             	movzx  ebx,si
c001af16:	89 04 24             	mov    DWORD PTR [esp],eax
c001af19:	c1 f8 1f             	sar    eax,0x1f
c001af1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af20:	0f b6 c1             	movzx  eax,cl
c001af23:	8b 0c 85 20 1f 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce0e0]
c001af2a:	83 f8 01             	cmp    eax,0x1
c001af2d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001af31:	76 27                	jbe    c001af5a <datetimeToSeconds(datetime_t)+0x87>
c001af33:	83 e6 03             	and    esi,0x3
c001af36:	75 22                	jne    c001af5a <datetimeToSeconds(datetime_t)+0x87>
c001af38:	31 d2                	xor    edx,edx
c001af3a:	be 64 00 00 00       	mov    esi,0x64
c001af3f:	89 d8                	mov    eax,ebx
c001af41:	f7 f6                	div    esi
c001af43:	85 d2                	test   edx,edx
c001af45:	75 12                	jne    c001af59 <datetimeToSeconds(datetime_t)+0x86>
c001af47:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001af4d:	be 90 01 00 00       	mov    esi,0x190
c001af52:	99                   	cdq    
c001af53:	f7 fe                	idiv   esi
c001af55:	85 d2                	test   edx,edx
c001af57:	75 01                	jne    c001af5a <datetimeToSeconds(datetime_t)+0x87>
c001af59:	41                   	inc    ecx
c001af5a:	83 fb 46             	cmp    ebx,0x46
c001af5d:	76 48                	jbe    c001afa7 <datetimeToSeconds(datetime_t)+0xd4>
c001af5f:	be 46 00 00 00       	mov    esi,0x46
c001af64:	bf 64 00 00 00       	mov    edi,0x64
c001af69:	bd 90 01 00 00       	mov    ebp,0x190
c001af6e:	b8 6d 01 00 00       	mov    eax,0x16d
c001af73:	f7 c6 03 00 00 00    	test   esi,0x3
c001af79:	75 23                	jne    c001af9e <datetimeToSeconds(datetime_t)+0xcb>
c001af7b:	89 f0                	mov    eax,esi
c001af7d:	99                   	cdq    
c001af7e:	f7 ff                	idiv   edi
c001af80:	b8 6e 01 00 00       	mov    eax,0x16e
c001af85:	85 d2                	test   edx,edx
c001af87:	75 15                	jne    c001af9e <datetimeToSeconds(datetime_t)+0xcb>
c001af89:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001af8f:	99                   	cdq    
c001af90:	f7 fd                	idiv   ebp
c001af92:	83 fa 01             	cmp    edx,0x1
c001af95:	19 c0                	sbb    eax,eax
c001af97:	f7 d0                	not    eax
c001af99:	05 6e 01 00 00       	add    eax,0x16e
c001af9e:	01 c1                	add    ecx,eax
c001afa0:	46                   	inc    esi
c001afa1:	39 de                	cmp    esi,ebx
c001afa3:	7c c9                	jl     c001af6e <datetimeToSeconds(datetime_t)+0x9b>
c001afa5:	eb 34                	jmp    c001afdb <datetimeToSeconds(datetime_t)+0x108>
c001afa7:	74 32                	je     c001afdb <datetimeToSeconds(datetime_t)+0x108>
c001afa9:	b8 45 00 00 00       	mov    eax,0x45
c001afae:	89 c2                	mov    edx,eax
c001afb0:	83 e2 03             	and    edx,0x3
c001afb3:	39 d8                	cmp    eax,ebx
c001afb5:	7e 0f                	jle    c001afc6 <datetimeToSeconds(datetime_t)+0xf3>
c001afb7:	83 fa 01             	cmp    edx,0x1
c001afba:	19 d2                	sbb    edx,edx
c001afbc:	48                   	dec    eax
c001afbd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001afc4:	eb e8                	jmp    c001afae <datetimeToSeconds(datetime_t)+0xdb>
c001afc6:	b8 6d 01 00 00       	mov    eax,0x16d
c001afcb:	85 d2                	test   edx,edx
c001afcd:	75 0a                	jne    c001afd9 <datetimeToSeconds(datetime_t)+0x106>
c001afcf:	83 fb 01             	cmp    ebx,0x1
c001afd2:	19 c0                	sbb    eax,eax
c001afd4:	05 6e 01 00 00       	add    eax,0x16e
c001afd9:	29 c1                	sub    ecx,eax
c001afdb:	b8 80 51 01 00       	mov    eax,0x15180
c001afe0:	f7 e9                	imul   ecx
c001afe2:	03 04 24             	add    eax,DWORD PTR [esp]
c001afe5:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001afe9:	83 c4 0c             	add    esp,0xc
c001afec:	5b                   	pop    ebx
c001afed:	5e                   	pop    esi
c001afee:	5f                   	pop    edi
c001afef:	5d                   	pop    ebp
c001aff0:	c3                   	ret    
c001aff1:	90                   	nop

c001aff2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001aff2:	57                   	push   edi
c001aff3:	56                   	push   esi
c001aff4:	53                   	push   ebx
c001aff5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aff9:	8b 06                	mov    eax,DWORD PTR [esi]
c001affb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001affe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b002:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b006:	e8 c8 fe ff ff       	call   c001aed3 <datetimeToSeconds(datetime_t)>
c001b00b:	59                   	pop    ecx
c001b00c:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b013:	5b                   	pop    ebx
c001b014:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b01a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b020:	89 cb                	mov    ebx,ecx
c001b022:	c1 fb 1f             	sar    ebx,0x1f
c001b025:	29 c8                	sub    eax,ecx
c001b027:	19 da                	sbb    edx,ebx
c001b029:	31 c9                	xor    ecx,ecx
c001b02b:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b032:	74 05                	je     c001b039 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b034:	b9 08 07 00 00       	mov    ecx,0x708
c001b039:	31 db                	xor    ebx,ebx
c001b03b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b03f:	29 c8                	sub    eax,ecx
c001b041:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b045:	19 da                	sbb    edx,ebx
c001b047:	89 f8                	mov    eax,edi
c001b049:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b04d:	5b                   	pop    ebx
c001b04e:	5e                   	pop    esi
c001b04f:	5f                   	pop    edi
c001b050:	ff e0                	jmp    eax

c001b052 <secondsToDatetime(unsigned long long)>:
c001b052:	55                   	push   ebp
c001b053:	57                   	push   edi
c001b054:	56                   	push   esi
c001b055:	53                   	push   ebx
c001b056:	83 ec 1c             	sub    esp,0x1c
c001b059:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b05d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b061:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b065:	6a 00                	push   0x0
c001b067:	68 80 51 01 00       	push   0x15180
c001b06c:	55                   	push   ebp
c001b06d:	57                   	push   edi
c001b06e:	e8 1d 36 01 00       	call   c002e690 <__udivdi3>
c001b073:	83 c4 10             	add    esp,0x10
c001b076:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b07c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b080:	6a 00                	push   0x0
c001b082:	68 80 51 01 00       	push   0x15180
c001b087:	55                   	push   ebp
c001b088:	57                   	push   edi
c001b089:	bf 10 0e 00 00       	mov    edi,0xe10
c001b08e:	e8 fd 36 01 00       	call   c002e790 <__umoddi3>
c001b093:	83 c4 10             	add    esp,0x10
c001b096:	99                   	cdq    
c001b097:	f7 ff                	idiv   edi
c001b099:	bf 3c 00 00 00       	mov    edi,0x3c
c001b09e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b0a1:	89 d0                	mov    eax,edx
c001b0a3:	99                   	cdq    
c001b0a4:	f7 ff                	idiv   edi
c001b0a6:	85 db                	test   ebx,ebx
c001b0a8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b0ab:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b0ae:	79 11                	jns    c001b0c1 <secondsToDatetime(unsigned long long)+0x6f>
c001b0b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0b4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b0ba:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b0bf:	eb 07                	jmp    c001b0c8 <secondsToDatetime(unsigned long long)+0x76>
c001b0c1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b0c6:	89 d8                	mov    eax,ebx
c001b0c8:	bf b4 05 00 00       	mov    edi,0x5b4
c001b0cd:	99                   	cdq    
c001b0ce:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b0d3:	f7 f9                	idiv   ecx
c001b0d5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b0da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0de:	31 d2                	xor    edx,edx
c001b0e0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b0e8:	01 c3                	add    ebx,eax
c001b0ea:	89 d8                	mov    eax,ebx
c001b0ec:	f7 f1                	div    ecx
c001b0ee:	31 d2                	xor    edx,edx
c001b0f0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b0f3:	89 d8                	mov    eax,ebx
c001b0f5:	f7 f7                	div    edi
c001b0f7:	31 d2                	xor    edx,edx
c001b0f9:	29 c1                	sub    ecx,eax
c001b0fb:	89 d8                	mov    eax,ebx
c001b0fd:	f7 f5                	div    ebp
c001b0ff:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b104:	29 c1                	sub    ecx,eax
c001b106:	31 d2                	xor    edx,edx
c001b108:	89 c8                	mov    eax,ecx
c001b10a:	f7 f5                	div    ebp
c001b10c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b111:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b115:	31 d2                	xor    edx,edx
c001b117:	89 c8                	mov    eax,ecx
c001b119:	f7 f5                	div    ebp
c001b11b:	31 d2                	xor    edx,edx
c001b11d:	01 c3                	add    ebx,eax
c001b11f:	89 c8                	mov    eax,ecx
c001b121:	f7 f7                	div    edi
c001b123:	bf 99 00 00 00       	mov    edi,0x99
c001b128:	29 c3                	sub    ebx,eax
c001b12a:	31 d2                	xor    edx,edx
c001b12c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b134:	29 c3                	sub    ebx,eax
c001b136:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b139:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b13c:	bb 05 00 00 00       	mov    ebx,0x5
c001b141:	83 c1 02             	add    ecx,0x2
c001b144:	89 c8                	mov    eax,ecx
c001b146:	f7 f7                	div    edi
c001b148:	31 d2                	xor    edx,edx
c001b14a:	89 c7                	mov    edi,eax
c001b14c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b152:	83 c0 02             	add    eax,0x2
c001b155:	f7 f3                	div    ebx
c001b157:	89 eb                	mov    ebx,ebp
c001b159:	29 c3                	sub    ebx,eax
c001b15b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b161:	88 1e                	mov    BYTE PTR [esi],bl
c001b163:	19 c0                	sbb    eax,eax
c001b165:	31 d2                	xor    edx,edx
c001b167:	83 e0 0c             	and    eax,0xc
c001b16a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b16e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b176:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b17a:	83 f9 01             	cmp    ecx,0x1
c001b17d:	0f 96 c2             	setbe  dl
c001b180:	41                   	inc    ecx
c001b181:	01 d0                	add    eax,edx
c001b183:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b186:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b18a:	83 c4 1c             	add    esp,0x1c
c001b18d:	89 f0                	mov    eax,esi
c001b18f:	5b                   	pop    ebx
c001b190:	5e                   	pop    esi
c001b191:	5f                   	pop    edi
c001b192:	5d                   	pop    ebp
c001b193:	c2 04 00             	ret    0x4

c001b196 <Clock::timeInDatetimeLocal()>:
c001b196:	53                   	push   ebx
c001b197:	83 ec 14             	sub    esp,0x14
c001b19a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b19e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b1a2:	e8 8b fc ff ff       	call   c001ae32 <Clock::timeInSecondsLocal()>
c001b1a7:	83 c4 0c             	add    esp,0xc
c001b1aa:	52                   	push   edx
c001b1ab:	50                   	push   eax
c001b1ac:	53                   	push   ebx
c001b1ad:	e8 a0 fe ff ff       	call   c001b052 <secondsToDatetime(unsigned long long)>
c001b1b2:	89 d8                	mov    eax,ebx
c001b1b4:	83 c4 14             	add    esp,0x14
c001b1b7:	5b                   	pop    ebx
c001b1b8:	c2 04 00             	ret    0x4
c001b1bb:	90                   	nop

c001b1bc <Device::hibernate()>:
c001b1bc:	c3                   	ret    
c001b1bd:	90                   	nop

c001b1be <Device::wake()>:
c001b1be:	c3                   	ret    
c001b1bf:	90                   	nop

c001b1c0 <Device::detect()>:
c001b1c0:	c3                   	ret    
c001b1c1:	90                   	nop

c001b1c2 <Device::disableLegacy()>:
c001b1c2:	c3                   	ret    
c001b1c3:	90                   	nop

c001b1c4 <Device::powerSaving(PowerSavingLevel)>:
c001b1c4:	c3                   	ret    
c001b1c5:	90                   	nop

c001b1c6 <DriverlessDevice::close(int, int, void*)>:
c001b1c6:	31 c0                	xor    eax,eax
c001b1c8:	c3                   	ret    
c001b1c9:	90                   	nop

c001b1ca <DriverlessDevice::detect()>:
c001b1ca:	c3                   	ret    
c001b1cb:	90                   	nop

c001b1cc <DriverlessDevice::open(int, int, void*)>:
c001b1cc:	83 ec 18             	sub    esp,0x18
c001b1cf:	68 50 1f 03 c0       	push   0xc0031f50
c001b1d4:	e8 9d 50 00 00       	call   c0020276 <KePanic(char const*)>
c001b1d9:	83 c8 ff             	or     eax,0xffffffff
c001b1dc:	83 c4 1c             	add    esp,0x1c
c001b1df:	c3                   	ret    

c001b1e0 <Device::~Device()>:
c001b1e0:	ba bc 1f 03 c0       	mov    edx,0xc0031fbc
c001b1e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1e9:	89 10                	mov    DWORD PTR [eax],edx
c001b1eb:	90                   	nop
c001b1ec:	c3                   	ret    
c001b1ed:	90                   	nop

c001b1ee <Device::~Device()>:
c001b1ee:	83 ec 0c             	sub    esp,0xc
c001b1f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b1f5:	e8 e6 ff ff ff       	call   c001b1e0 <Device::~Device()>
c001b1fa:	83 c4 04             	add    esp,0x4
c001b1fd:	83 ec 08             	sub    esp,0x8
c001b200:	68 58 01 00 00       	push   0x158
c001b205:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b209:	e8 22 df ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001b20e:	83 c4 10             	add    esp,0x10
c001b211:	83 c4 0c             	add    esp,0xc
c001b214:	c3                   	ret    
c001b215:	90                   	nop

c001b216 <Device::findAndLoadDriver()>:
c001b216:	c7 44 24 04 6e 1f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031f6e
c001b21e:	e9 3a e0 ff ff       	jmp    c001925d <Dbg::kprintf(char const*, ...)>
c001b223:	90                   	nop

c001b224 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b224:	57                   	push   edi
c001b225:	b9 09 00 00 00       	mov    ecx,0x9
c001b22a:	56                   	push   esi
c001b22b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b22f:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b233:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b23d:	81 c7 18 01 00 00    	add    edi,0x118
c001b243:	fc                   	cld    
c001b244:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b246:	5e                   	pop    esi
c001b247:	5f                   	pop    edi
c001b248:	c3                   	ret    
c001b249:	90                   	nop

c001b24a <Device::preOpenACPI(void*, char*, char*)>:
c001b24a:	57                   	push   edi
c001b24b:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b250:	56                   	push   esi
c001b251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b255:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b259:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b263:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b269:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b26f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b273:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b275:	b9 0e 00 00 00       	mov    ecx,0xe
c001b27a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b280:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b284:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b286:	5e                   	pop    esi
c001b287:	5f                   	pop    edi
c001b288:	c3                   	ret    
c001b289:	90                   	nop

c001b28a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b28a:	53                   	push   ebx
c001b28b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b28f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b297:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b29b:	0f b6 c0             	movzx  eax,al
c001b29e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b2a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2aa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2ae:	5b                   	pop    ebx
c001b2af:	e9 c0 05 00 00       	jmp    c001b874 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b2b4 <Device::getParent()>:
c001b2b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2b8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b2be:	c3                   	ret    
c001b2bf:	90                   	nop

c001b2c0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b2c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b2c8:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b2cd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2d9:	e9 fe 06 00 00       	jmp    c001b9dc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b2de <Device::addChild(Device*)>:
c001b2de:	53                   	push   ebx
c001b2df:	83 ec 08             	sub    esp,0x8
c001b2e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2ea:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b2f0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b2f6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2f8:	85 d2                	test   edx,edx
c001b2fa:	74 04                	je     c001b300 <Device::addChild(Device*)+0x22>
c001b2fc:	89 d3                	mov    ebx,edx
c001b2fe:	eb f6                	jmp    c001b2f6 <Device::addChild(Device*)+0x18>
c001b300:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b303:	83 ec 0c             	sub    esp,0xc
c001b306:	6a 08                	push   0x8
c001b308:	e8 b1 b0 ff ff       	call   c00163be <malloc>
c001b30d:	89 03                	mov    DWORD PTR [ebx],eax
c001b30f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b315:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b31c:	83 c4 18             	add    esp,0x18
c001b31f:	5b                   	pop    ebx
c001b320:	c3                   	ret    
c001b321:	90                   	nop

c001b322 <Device::removeAllChildren()>:
c001b322:	56                   	push   esi
c001b323:	53                   	push   ebx
c001b324:	52                   	push   edx
c001b325:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b329:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b32f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b332:	74 17                	je     c001b34b <Device::removeAllChildren()+0x29>
c001b334:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b337:	85 c0                	test   eax,eax
c001b339:	74 0c                	je     c001b347 <Device::removeAllChildren()+0x25>
c001b33b:	83 ec 0c             	sub    esp,0xc
c001b33e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b340:	50                   	push   eax
c001b341:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b344:	83 c4 10             	add    esp,0x10
c001b347:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b349:	eb e4                	jmp    c001b32f <Device::removeAllChildren()+0xd>
c001b34b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b351:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b357:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b35d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b364:	58                   	pop    eax
c001b365:	5b                   	pop    ebx
c001b366:	5e                   	pop    esi
c001b367:	c3                   	ret    

c001b368 <Device::hibernateAll()>:
c001b368:	53                   	push   ebx
c001b369:	83 ec 14             	sub    esp,0x14
c001b36c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b370:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b372:	53                   	push   ebx
c001b373:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b376:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b37c:	83 c4 10             	add    esp,0x10
c001b37f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b382:	74 0f                	je     c001b393 <Device::hibernateAll()+0x2b>
c001b384:	83 ec 0c             	sub    esp,0xc
c001b387:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b38a:	e8 d9 ff ff ff       	call   c001b368 <Device::hibernateAll()>
c001b38f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b391:	eb e9                	jmp    c001b37c <Device::hibernateAll()+0x14>
c001b393:	83 c4 08             	add    esp,0x8
c001b396:	5b                   	pop    ebx
c001b397:	c3                   	ret    

c001b398 <Device::wakeAll()>:
c001b398:	53                   	push   ebx
c001b399:	83 ec 14             	sub    esp,0x14
c001b39c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3a2:	53                   	push   ebx
c001b3a3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b3a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b3ac:	83 c4 10             	add    esp,0x10
c001b3af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3b2:	74 0f                	je     c001b3c3 <Device::wakeAll()+0x2b>
c001b3b4:	83 ec 0c             	sub    esp,0xc
c001b3b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3ba:	e8 d9 ff ff ff       	call   c001b398 <Device::wakeAll()>
c001b3bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3c1:	eb e9                	jmp    c001b3ac <Device::wakeAll()+0x14>
c001b3c3:	83 c4 08             	add    esp,0x8
c001b3c6:	5b                   	pop    ebx
c001b3c7:	c3                   	ret    

c001b3c8 <Device::detectAll()>:
c001b3c8:	53                   	push   ebx
c001b3c9:	83 ec 14             	sub    esp,0x14
c001b3cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3d2:	53                   	push   ebx
c001b3d3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b3d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b3dc:	83 c4 10             	add    esp,0x10
c001b3df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3e2:	74 0f                	je     c001b3f3 <Device::detectAll()+0x2b>
c001b3e4:	83 ec 0c             	sub    esp,0xc
c001b3e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3ea:	e8 d9 ff ff ff       	call   c001b3c8 <Device::detectAll()>
c001b3ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3f1:	eb e9                	jmp    c001b3dc <Device::detectAll()+0x14>
c001b3f3:	83 c4 08             	add    esp,0x8
c001b3f6:	5b                   	pop    ebx
c001b3f7:	c3                   	ret    

c001b3f8 <Device::disableLegacyAll()>:
c001b3f8:	c3                   	ret    
c001b3f9:	90                   	nop

c001b3fa <Device::loadDriversForAll()>:
c001b3fa:	c3                   	ret    
c001b3fb:	90                   	nop

c001b3fc <Device::powerSavingAll(PowerSavingLevel)>:
c001b3fc:	56                   	push   esi
c001b3fd:	53                   	push   ebx
c001b3fe:	83 ec 0c             	sub    esp,0xc
c001b401:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b405:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b409:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b40b:	56                   	push   esi
c001b40c:	53                   	push   ebx
c001b40d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b410:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b41c:	74 0f                	je     c001b42d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b41e:	52                   	push   edx
c001b41f:	52                   	push   edx
c001b420:	56                   	push   esi
c001b421:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b424:	e8 d3 ff ff ff       	call   c001b3fc <Device::powerSavingAll(PowerSavingLevel)>
c001b429:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b42b:	eb e9                	jmp    c001b416 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b42d:	58                   	pop    eax
c001b42e:	5b                   	pop    ebx
c001b42f:	5e                   	pop    esi
c001b430:	c3                   	ret    
c001b431:	90                   	nop

c001b432 <Device::setName(char const*)>:
c001b432:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b43a:	e9 01 52 fe ff       	jmp    c0000640 <strcpy>
c001b43f:	90                   	nop

c001b440 <Device::Device(char const*)>:
c001b440:	83 ec 1c             	sub    esp,0x1c
c001b443:	ba bc 1f 03 c0       	mov    edx,0xc0031fbc
c001b448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b44c:	89 10                	mov    DWORD PTR [eax],edx
c001b44e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b452:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b45c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b460:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b46a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b46e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b47c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b486:	83 ec 08             	sub    esp,0x8
c001b489:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b48d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b491:	e8 9c ff ff ff       	call   c001b432 <Device::setName(char const*)>
c001b496:	83 c4 10             	add    esp,0x10
c001b499:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b4a1:	83 ec 0c             	sub    esp,0xc
c001b4a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4a8:	e8 11 af ff ff       	call   c00163be <malloc>
c001b4ad:	83 c4 10             	add    esp,0x10
c001b4b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b4c1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b4c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4cb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b4d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4db:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b4e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4ec:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b4f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4f7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b4fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b502:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b50c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b510:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b51a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b51e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b52c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b536:	90                   	nop
c001b537:	83 c4 1c             	add    esp,0x1c
c001b53a:	c3                   	ret    
c001b53b:	90                   	nop

c001b53c <Device::getName()>:
c001b53c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b540:	05 d0 00 00 00       	add    eax,0xd0
c001b545:	c3                   	ret    

c001b546 <Device::closeAll()>:
c001b546:	53                   	push   ebx
c001b547:	83 ec 08             	sub    esp,0x8
c001b54a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b54e:	53                   	push   ebx
c001b54f:	e8 e8 ff ff ff       	call   c001b53c <Device::getName()>
c001b554:	52                   	push   edx
c001b555:	50                   	push   eax
c001b556:	68 a8 1f 03 c0       	push   0xc0031fa8
c001b55b:	e8 fd dc ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001b560:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b562:	6a 00                	push   0x0
c001b564:	6a 00                	push   0x0
c001b566:	6a 00                	push   0x0
c001b568:	53                   	push   ebx
c001b569:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b56c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b572:	83 c4 20             	add    esp,0x20
c001b575:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b578:	74 12                	je     c001b58c <Device::closeAll()+0x46>
c001b57a:	83 ec 0c             	sub    esp,0xc
c001b57d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b580:	e8 c1 ff ff ff       	call   c001b546 <Device::closeAll()>
c001b585:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b587:	83 c4 10             	add    esp,0x10
c001b58a:	eb e9                	jmp    c001b575 <Device::closeAll()+0x2f>
c001b58c:	83 c4 08             	add    esp,0x8
c001b58f:	5b                   	pop    ebx
c001b590:	c3                   	ret    
c001b591:	90                   	nop

c001b592 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b592:	83 ec 0c             	sub    esp,0xc
c001b595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b599:	83 ec 08             	sub    esp,0x8
c001b59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5a0:	50                   	push   eax
c001b5a1:	e8 9a fe ff ff       	call   c001b440 <Device::Device(char const*)>
c001b5a6:	83 c4 10             	add    esp,0x10
c001b5a9:	ba e8 1f 03 c0       	mov    edx,0xc0031fe8
c001b5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b2:	89 10                	mov    DWORD PTR [eax],edx
c001b5b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b5c2:	90                   	nop
c001b5c3:	83 c4 0c             	add    esp,0xc
c001b5c6:	c3                   	ret    
c001b5c7:	90                   	nop

c001b5c8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b5c8:	57                   	push   edi
c001b5c9:	56                   	push   esi
c001b5ca:	53                   	push   ebx
c001b5cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b5d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b5d7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b5dd:	75 0c                	jne    c001b5eb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b5df:	52                   	push   edx
c001b5e0:	52                   	push   edx
c001b5e1:	53                   	push   ebx
c001b5e2:	56                   	push   esi
c001b5e3:	e8 5a 35 01 00       	call   c002eb42 <LinkedList<Device>::addElement(Device*)>
c001b5e8:	83 c4 10             	add    esp,0x10
c001b5eb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5f4:	74 12                	je     c001b608 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b5f6:	50                   	push   eax
c001b5f7:	57                   	push   edi
c001b5f8:	56                   	push   esi
c001b5f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b5fc:	e8 c7 ff ff ff       	call   c001b5c8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b601:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b603:	83 c4 10             	add    esp,0x10
c001b606:	eb e9                	jmp    c001b5f1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b608:	5b                   	pop    ebx
c001b609:	5e                   	pop    esi
c001b60a:	5f                   	pop    edi
c001b60b:	c3                   	ret    

c001b60c <getDevicesOfType(DeviceType)>:
c001b60c:	53                   	push   ebx
c001b60d:	83 ec 14             	sub    esp,0x14
c001b610:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b614:	53                   	push   ebx
c001b615:	e8 04 36 01 00       	call   c002ec1e <LinkedList<Device>::LinkedList()>
c001b61a:	83 c4 0c             	add    esp,0xc
c001b61d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b621:	53                   	push   ebx
c001b622:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b628:	e8 9b ff ff ff       	call   c001b5c8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b62d:	89 d8                	mov    eax,ebx
c001b62f:	83 c4 18             	add    esp,0x18
c001b632:	5b                   	pop    ebx
c001b633:	c2 04 00             	ret    0x4
c001b636:	66 90                	xchg   ax,ax

c001b638 <HardDiskController::HardDiskController(char const*)>:
c001b638:	83 ec 0c             	sub    esp,0xc
c001b63b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63f:	83 ec 08             	sub    esp,0x8
c001b642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b646:	50                   	push   eax
c001b647:	e8 f4 fd ff ff       	call   c001b440 <Device::Device(char const*)>
c001b64c:	83 c4 10             	add    esp,0x10
c001b64f:	ba 14 20 03 c0       	mov    edx,0xc0032014
c001b654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b658:	89 10                	mov    DWORD PTR [eax],edx
c001b65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b65e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b668:	90                   	nop
c001b669:	83 c4 0c             	add    esp,0xc
c001b66c:	c3                   	ret    
c001b66d:	90                   	nop
c001b66e:	66 90                	xchg   ax,ax

c001b670 <HardDiskController::~HardDiskController()>:
c001b670:	83 ec 0c             	sub    esp,0xc
c001b673:	ba 14 20 03 c0       	mov    edx,0xc0032014
c001b678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b67c:	89 10                	mov    DWORD PTR [eax],edx
c001b67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b682:	83 ec 0c             	sub    esp,0xc
c001b685:	50                   	push   eax
c001b686:	e8 55 fb ff ff       	call   c001b1e0 <Device::~Device()>
c001b68b:	83 c4 10             	add    esp,0x10
c001b68e:	90                   	nop
c001b68f:	83 c4 0c             	add    esp,0xc
c001b692:	c3                   	ret    
c001b693:	90                   	nop

c001b694 <HardDiskController::~HardDiskController()>:
c001b694:	83 ec 0c             	sub    esp,0xc
c001b697:	83 ec 0c             	sub    esp,0xc
c001b69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b69e:	e8 cd ff ff ff       	call   c001b670 <HardDiskController::~HardDiskController()>
c001b6a3:	83 c4 10             	add    esp,0x10
c001b6a6:	83 ec 08             	sub    esp,0x8
c001b6a9:	68 58 01 00 00       	push   0x158
c001b6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6b2:	e8 79 da ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001b6b7:	83 c4 10             	add    esp,0x10
c001b6ba:	83 c4 0c             	add    esp,0xc
c001b6bd:	c3                   	ret    

c001b6be <PhysicalDisk::eject()>:
c001b6be:	83 c8 ff             	or     eax,0xffffffff
c001b6c1:	c3                   	ret    

c001b6c2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b6c2:	83 ec 0c             	sub    esp,0xc
c001b6c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6c9:	83 ec 08             	sub    esp,0x8
c001b6cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6d0:	50                   	push   eax
c001b6d1:	e8 6a fd ff ff       	call   c001b440 <Device::Device(char const*)>
c001b6d6:	83 c4 10             	add    esp,0x10
c001b6d9:	ba 40 20 03 c0       	mov    edx,0xc0032040
c001b6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e2:	89 10                	mov    DWORD PTR [eax],edx
c001b6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6f3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6fe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b70c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b710:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b71a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b724:	90                   	nop
c001b725:	83 c4 0c             	add    esp,0xc
c001b728:	c3                   	ret    
c001b729:	90                   	nop

c001b72a <PhysicalDisk::startCache()>:
c001b72a:	56                   	push   esi
c001b72b:	53                   	push   ebx
c001b72c:	83 ec 10             	sub    esp,0x10
c001b72f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b733:	6a 44                	push   0x44
c001b735:	e8 84 ac ff ff       	call   c00163be <malloc>
c001b73a:	89 c6                	mov    esi,eax
c001b73c:	58                   	pop    eax
c001b73d:	5a                   	pop    edx
c001b73e:	53                   	push   ebx
c001b73f:	56                   	push   esi
c001b740:	e8 6f 17 00 00       	call   c001ceb4 <VCache::VCache(PhysicalDisk*)>
c001b745:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b74b:	83 c4 14             	add    esp,0x14
c001b74e:	5b                   	pop    ebx
c001b74f:	5e                   	pop    esi
c001b750:	c3                   	ret    
c001b751:	90                   	nop

c001b752 <PhysicalDisk::~PhysicalDisk()>:
c001b752:	83 ec 0c             	sub    esp,0xc
c001b755:	ba 40 20 03 c0       	mov    edx,0xc0032040
c001b75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b75e:	89 10                	mov    DWORD PTR [eax],edx
c001b760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b764:	83 ec 0c             	sub    esp,0xc
c001b767:	50                   	push   eax
c001b768:	e8 73 fa ff ff       	call   c001b1e0 <Device::~Device()>
c001b76d:	83 c4 10             	add    esp,0x10
c001b770:	90                   	nop
c001b771:	83 c4 0c             	add    esp,0xc
c001b774:	c3                   	ret    
c001b775:	90                   	nop

c001b776 <PhysicalDisk::~PhysicalDisk()>:
c001b776:	83 ec 0c             	sub    esp,0xc
c001b779:	83 ec 0c             	sub    esp,0xc
c001b77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b780:	e8 cd ff ff ff       	call   c001b752 <PhysicalDisk::~PhysicalDisk()>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	83 ec 08             	sub    esp,0x8
c001b78b:	68 6c 01 00 00       	push   0x16c
c001b790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b794:	e8 97 d9 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001b799:	83 c4 10             	add    esp,0x10
c001b79c:	83 c4 0c             	add    esp,0xc
c001b79f:	c3                   	ret    

c001b7a0 <int_handler>:
c001b7a0:	55                   	push   ebp
c001b7a1:	57                   	push   edi
c001b7a2:	56                   	push   esi
c001b7a3:	53                   	push   ebx
c001b7a4:	83 ec 0c             	sub    esp,0xc
c001b7a7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b7ab:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b7b2:	74 0b                	je     c001b7bf <int_handler+0x1f>
c001b7b4:	fa                   	cli    
c001b7b5:	f4                   	hlt    
c001b7b6:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b7bd:	75 f5                	jne    c001b7b4 <int_handler+0x14>
c001b7bf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b7c2:	8d 46 e0             	lea    eax,[esi-0x20]
c001b7c5:	83 f8 17             	cmp    eax,0x17
c001b7c8:	76 40                	jbe    c001b80a <int_handler+0x6a>
c001b7ca:	c1 e6 04             	shl    esi,0x4
c001b7cd:	31 db                	xor    ebx,ebx
c001b7cf:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b7d5:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b7db:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b7df:	85 c0                	test   eax,eax
c001b7e1:	74 13                	je     c001b7f6 <int_handler+0x56>
c001b7e3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b7e6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b7ea:	74 2c                	je     c001b818 <int_handler+0x78>
c001b7ec:	83 ec 08             	sub    esp,0x8
c001b7ef:	52                   	push   edx
c001b7f0:	57                   	push   edi
c001b7f1:	ff d0                	call   eax
c001b7f3:	83 c4 10             	add    esp,0x10
c001b7f6:	83 c3 01             	add    ebx,0x1
c001b7f9:	83 fb 04             	cmp    ebx,0x4
c001b7fc:	75 dd                	jne    c001b7db <int_handler+0x3b>
c001b7fe:	83 c4 0c             	add    esp,0xc
c001b801:	31 c0                	xor    eax,eax
c001b803:	5b                   	pop    ebx
c001b804:	31 d2                	xor    edx,edx
c001b806:	5e                   	pop    esi
c001b807:	5f                   	pop    edi
c001b808:	5d                   	pop    ebp
c001b809:	c3                   	ret    
c001b80a:	83 ec 0c             	sub    esp,0xc
c001b80d:	50                   	push   eax
c001b80e:	e8 95 ba 00 00       	call   c00272a8 <HalEndOfInterrupt(int)>
c001b813:	83 c4 10             	add    esp,0x10
c001b816:	eb b2                	jmp    c001b7ca <int_handler+0x2a>
c001b818:	83 ec 08             	sub    esp,0x8
c001b81b:	52                   	push   edx
c001b81c:	57                   	push   edi
c001b81d:	ff d0                	call   eax
c001b81f:	83 c4 10             	add    esp,0x10
c001b822:	83 c4 0c             	add    esp,0xc
c001b825:	5b                   	pop    ebx
c001b826:	5e                   	pop    esi
c001b827:	5f                   	pop    edi
c001b828:	5d                   	pop    ebp
c001b829:	c3                   	ret    

c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b82a:	56                   	push   esi
c001b82b:	31 c0                	xor    eax,eax
c001b82d:	53                   	push   ebx
c001b82e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b832:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b836:	89 ca                	mov    edx,ecx
c001b838:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b83c:	c1 e2 04             	shl    edx,0x4
c001b83f:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b847:	74 17                	je     c001b860 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b849:	83 c0 01             	add    eax,0x1
c001b84c:	83 f8 04             	cmp    eax,0x4
c001b84f:	75 ee                	jne    c001b83f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b851:	c7 44 24 0c 70 20 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032070
c001b859:	5b                   	pop    ebx
c001b85a:	5e                   	pop    esi
c001b85b:	e9 16 4a 00 00       	jmp    c0020276 <KePanic(char const*)>
c001b860:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b863:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b86a:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b871:	5b                   	pop    ebx
c001b872:	5e                   	pop    esi
c001b873:	c3                   	ret    

c001b874 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b874:	57                   	push   edi
c001b875:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b87b:	56                   	push   esi
c001b87c:	53                   	push   ebx
c001b87d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b881:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b885:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b88c:	74 54                	je     c001b8e2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001b88e:	89 c7                	mov    edi,eax
c001b890:	84 c0                	test   al,al
c001b892:	74 1d                	je     c001b8b1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b894:	83 fe 0f             	cmp    esi,0xf
c001b897:	0f 8f d5 00 00 00    	jg     c001b972 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001b89d:	0f b6 b6 a8 3c 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc358]
c001b8a4:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b8ac:	d1 ef                	shr    edi,1
c001b8ae:	83 e7 01             	and    edi,0x1
c001b8b1:	83 ec 08             	sub    esp,0x8
c001b8b4:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b8b9:	31 db                	xor    ebx,ebx
c001b8bb:	50                   	push   eax
c001b8bc:	68 7d 20 03 c0       	push   0xc003207d
c001b8c1:	e8 97 d9 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001b8c6:	83 c4 10             	add    esp,0x10
c001b8c9:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b8ce:	85 c0                	test   eax,eax
c001b8d0:	7f 55                	jg     c001b927 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	68 94 20 03 c0       	push   0xc0032094
c001b8da:	e8 97 49 00 00       	call   c0020276 <KePanic(char const*)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	8d 7e 20             	lea    edi,[esi+0x20]
c001b8e5:	89 f8                	mov    eax,edi
c001b8e7:	31 d2                	xor    edx,edx
c001b8e9:	c1 e0 04             	shl    eax,0x4
c001b8ec:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b8f3:	85 c9                	test   ecx,ecx
c001b8f5:	0f 84 8e 00 00 00    	je     c001b989 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001b8fb:	83 c2 01             	add    edx,0x1
c001b8fe:	83 fa 04             	cmp    edx,0x4
c001b901:	75 e9                	jne    c001b8ec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b903:	83 ec 0c             	sub    esp,0xc
c001b906:	68 e8 20 03 c0       	push   0xc00320e8
c001b90b:	e8 66 49 00 00       	call   c0020276 <KePanic(char const*)>
c001b910:	83 c4 10             	add    esp,0x10
c001b913:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b918:	5b                   	pop    ebx
c001b919:	5e                   	pop    esi
c001b91a:	5f                   	pop    edi
c001b91b:	c3                   	ret    
c001b91c:	83 c3 01             	add    ebx,0x1
c001b91f:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b925:	7e ab                	jle    c001b8d2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001b927:	83 ec 08             	sub    esp,0x8
c001b92a:	8b 04 9d e0 0b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf420]
c001b931:	56                   	push   esi
c001b932:	50                   	push   eax
c001b933:	e8 50 21 01 00       	call   c002da88 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b938:	83 c4 10             	add    esp,0x10
c001b93b:	84 c0                	test   al,al
c001b93d:	74 dd                	je     c001b91c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001b93f:	83 ec 04             	sub    esp,0x4
c001b942:	89 f8                	mov    eax,edi
c001b944:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b94b:	0f b6 f8             	movzx  edi,al
c001b94e:	57                   	push   edi
c001b94f:	8d 7e 20             	lea    edi,[esi+0x20]
c001b952:	6a 00                	push   0x0
c001b954:	89 f8                	mov    eax,edi
c001b956:	0f b6 c0             	movzx  eax,al
c001b959:	50                   	push   eax
c001b95a:	89 f0                	mov    eax,esi
c001b95c:	6a 00                	push   0x0
c001b95e:	0f b6 c0             	movzx  eax,al
c001b961:	6a 00                	push   0x0
c001b963:	50                   	push   eax
c001b964:	53                   	push   ebx
c001b965:	e8 8a 22 01 00       	call   c002dbf4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b96a:	83 c4 20             	add    esp,0x20
c001b96d:	e9 73 ff ff ff       	jmp    c001b8e5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001b972:	83 ec 0c             	sub    esp,0xc
c001b975:	31 ff                	xor    edi,edi
c001b977:	68 b0 20 03 c0       	push   0xc00320b0
c001b97c:	e8 f5 48 00 00       	call   c0020276 <KePanic(char const*)>
c001b981:	83 c4 10             	add    esp,0x10
c001b984:	e9 28 ff ff ff       	jmp    c001b8b1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b989:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b98c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b990:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001b997:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b99b:	5b                   	pop    ebx
c001b99c:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001b9a3:	89 f0                	mov    eax,esi
c001b9a5:	5e                   	pop    esi
c001b9a6:	5f                   	pop    edi
c001b9a7:	c3                   	ret    

c001b9a8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001b9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b9b0:	c1 e0 04             	shl    eax,0x4
c001b9b3:	8d 50 10             	lea    edx,[eax+0x10]
c001b9b6:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001b9bc:	74 08                	je     c001b9c6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b9be:	83 c0 04             	add    eax,0x4
c001b9c1:	39 d0                	cmp    eax,edx
c001b9c3:	75 f1                	jne    c001b9b6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b9c5:	c3                   	ret    
c001b9c6:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b9d0:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b9da:	eb e2                	jmp    c001b9be <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b9dc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b9dc:	53                   	push   ebx
c001b9dd:	83 ec 08             	sub    esp,0x8
c001b9e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9e4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9e9:	74 0e                	je     c001b9f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b9eb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001b9f0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001b9f7:	75 37                	jne    c001ba30 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001b9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fd:	83 c0 20             	add    eax,0x20
c001ba00:	c1 e0 04             	shl    eax,0x4
c001ba03:	8d 50 10             	lea    edx,[eax+0x10]
c001ba06:	39 98 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ebx
c001ba0c:	74 0c                	je     c001ba1a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001ba0e:	83 c0 04             	add    eax,0x4
c001ba11:	39 d0                	cmp    eax,edx
c001ba13:	75 f1                	jne    c001ba06 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001ba15:	83 c4 08             	add    esp,0x8
c001ba18:	5b                   	pop    ebx
c001ba19:	c3                   	ret    
c001ba1a:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba24:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba2e:	eb de                	jmp    c001ba0e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001ba30:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001ba35:	7f 11                	jg     c001ba48 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001ba37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3b:	0f b6 80 a8 3c 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc358]
c001ba42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba46:	eb b1                	jmp    c001b9f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001ba48:	83 ec 0c             	sub    esp,0xc
c001ba4b:	68 a1 20 03 c0       	push   0xc00320a1
c001ba50:	e8 21 48 00 00       	call   c0020276 <KePanic(char const*)>
c001ba55:	83 c4 10             	add    esp,0x10
c001ba58:	eb 9f                	jmp    c001b9f9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001ba5a <setupINTS()>:
c001ba5a:	31 c0                	xor    eax,eax
c001ba5c:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba66:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba70:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001ba7a:	c7 80 24 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30dc],0x0
c001ba84:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001ba8e:	c7 80 28 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d8],0x0
c001ba98:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001baa2:	c7 80 2c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d4],0x0
c001baac:	83 c0 10             	add    eax,0x10
c001baaf:	3d 00 10 00 00       	cmp    eax,0x1000
c001bab4:	75 a6                	jne    c001ba5c <setupINTS()+0x2>
c001bab6:	c3                   	ret    

c001bab7 <convertLegacyIRQNumber(int)>:
c001bab7:	83 ec 0c             	sub    esp,0xc
c001baba:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bacb:	74 0c                	je     c001bad9 <convertLegacyIRQNumber(int)+0x22>
c001bacd:	83 f8 0f             	cmp    eax,0xf
c001bad0:	7f 0b                	jg     c001badd <convertLegacyIRQNumber(int)+0x26>
c001bad2:	0f b6 80 a8 3c 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc358]
c001bad9:	83 c4 0c             	add    esp,0xc
c001badc:	c3                   	ret    
c001badd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bae1:	83 ec 0c             	sub    esp,0xc
c001bae4:	68 b0 20 03 c0       	push   0xc00320b0
c001bae9:	e8 88 47 00 00       	call   c0020276 <KePanic(char const*)>
c001baee:	83 c4 10             	add    esp,0x10
c001baf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf5:	83 c4 0c             	add    esp,0xc
c001baf8:	c3                   	ret    
c001baf9:	90                   	nop

c001bafa <startGUI(void*)>:
c001bafa:	55                   	push   ebp
c001bafb:	89 e5                	mov    ebp,esp
c001bafd:	53                   	push   ebx
c001bafe:	83 ec 04             	sub    esp,0x4
c001bb01:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb06:	83 e8 01             	sub    eax,0x1
c001bb09:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb0e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb13:	85 c0                	test   eax,eax
c001bb15:	75 01                	jne    c001bb18 <startGUI(void*)+0x1e>
c001bb17:	fb                   	sti    
c001bb18:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb1e:	83 ec 08             	sub    esp,0x8
c001bb21:	6a 01                	push   0x1
c001bb23:	68 0d 21 03 c0       	push   0xc003210d
c001bb28:	e8 dc 8c 00 00       	call   c0024809 <Thr::loadDLL(char const*, bool)>
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	83 ec 08             	sub    esp,0x8
c001bb33:	53                   	push   ebx
c001bb34:	50                   	push   eax
c001bb35:	e8 21 8f 00 00       	call   c0024a5b <Thr::executeDLL(unsigned long, void*)>
c001bb3a:	83 c4 10             	add    esp,0x10
c001bb3d:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb43:	83 ec 08             	sub    esp,0x8
c001bb46:	6a 01                	push   0x1
c001bb48:	68 27 21 03 c0       	push   0xc0032127
c001bb4d:	e8 b7 8c 00 00       	call   c0024809 <Thr::loadDLL(char const*, bool)>
c001bb52:	83 c4 10             	add    esp,0x10
c001bb55:	83 ec 08             	sub    esp,0x8
c001bb58:	53                   	push   ebx
c001bb59:	50                   	push   eax
c001bb5a:	e8 fc 8e 00 00       	call   c0024a5b <Thr::executeDLL(unsigned long, void*)>
c001bb5f:	83 c4 10             	add    esp,0x10
c001bb62:	eb fe                	jmp    c001bb62 <startGUI(void*)+0x68>

c001bb64 <startGUIVESA(void*)>:
c001bb64:	55                   	push   ebp
c001bb65:	89 e5                	mov    ebp,esp
c001bb67:	53                   	push   ebx
c001bb68:	83 ec 04             	sub    esp,0x4
c001bb6b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb70:	83 e8 01             	sub    eax,0x1
c001bb73:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb78:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb7d:	85 c0                	test   eax,eax
c001bb7f:	75 01                	jne    c001bb82 <startGUIVESA(void*)+0x1e>
c001bb81:	fb                   	sti    
c001bb82:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb88:	83 ec 08             	sub    esp,0x8
c001bb8b:	6a 01                	push   0x1
c001bb8d:	68 45 21 03 c0       	push   0xc0032145
c001bb92:	e8 72 8c 00 00       	call   c0024809 <Thr::loadDLL(char const*, bool)>
c001bb97:	83 c4 10             	add    esp,0x10
c001bb9a:	83 ec 08             	sub    esp,0x8
c001bb9d:	53                   	push   ebx
c001bb9e:	50                   	push   eax
c001bb9f:	e8 b7 8e 00 00       	call   c0024a5b <Thr::executeDLL(unsigned long, void*)>
c001bba4:	83 c4 10             	add    esp,0x10
c001bba7:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bbad:	83 ec 08             	sub    esp,0x8
c001bbb0:	6a 01                	push   0x1
c001bbb2:	68 27 21 03 c0       	push   0xc0032127
c001bbb7:	e8 4d 8c 00 00       	call   c0024809 <Thr::loadDLL(char const*, bool)>
c001bbbc:	83 c4 10             	add    esp,0x10
c001bbbf:	83 ec 08             	sub    esp,0x8
c001bbc2:	53                   	push   ebx
c001bbc3:	50                   	push   eax
c001bbc4:	e8 92 8e 00 00       	call   c0024a5b <Thr::executeDLL(unsigned long, void*)>
c001bbc9:	83 c4 10             	add    esp,0x10
c001bbcc:	eb fe                	jmp    c001bbcc <startGUIVESA(void*)+0x68>

c001bbce <sendKeyToTerminal(unsigned char)>:
c001bbce:	55                   	push   ebp
c001bbcf:	89 e5                	mov    ebp,esp
c001bbd1:	83 ec 28             	sub    esp,0x28
c001bbd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbd7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bbda:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bbdf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bbe3:	83 ec 08             	sub    esp,0x8
c001bbe6:	52                   	push   edx
c001bbe7:	50                   	push   eax
c001bbe8:	e8 e1 ba ff ff       	call   c00176ce <VgaText::receiveKey(unsigned char)>
c001bbed:	83 c4 10             	add    esp,0x10
c001bbf0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbf4:	83 f8 0a             	cmp    eax,0xa
c001bbf7:	74 16                	je     c001bc0f <sendKeyToTerminal(unsigned char)+0x41>
c001bbf9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbfd:	83 f8 03             	cmp    eax,0x3
c001bc00:	74 0d                	je     c001bc0f <sendKeyToTerminal(unsigned char)+0x41>
c001bc02:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bc06:	83 f8 1c             	cmp    eax,0x1c
c001bc09:	0f 85 97 00 00 00    	jne    c001bca6 <sendKeyToTerminal(unsigned char)+0xd8>
c001bc0f:	fa                   	cli    
c001bc10:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc15:	83 c0 01             	add    eax,0x1
c001bc18:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc1d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc22:	83 c0 01             	add    eax,0x1
c001bc25:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bc2a:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bc2f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc32:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bc3c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bc40:	74 1f                	je     c001bc61 <sendKeyToTerminal(unsigned char)+0x93>
c001bc42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bc45:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bc48:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc4b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc4e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc51:	83 ec 0c             	sub    esp,0xc
c001bc54:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bc57:	e8 28 99 00 00       	call   c0025584 <unblockTask(ThreadControlBlock*)>
c001bc5c:	83 c4 10             	add    esp,0x10
c001bc5f:	eb db                	jmp    c001bc3c <sendKeyToTerminal(unsigned char)+0x6e>
c001bc61:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc66:	83 e8 01             	sub    eax,0x1
c001bc69:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bc6e:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc73:	85 c0                	test   eax,eax
c001bc75:	75 18                	jne    c001bc8f <sendKeyToTerminal(unsigned char)+0xc1>
c001bc77:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bc7c:	85 c0                	test   eax,eax
c001bc7e:	74 0f                	je     c001bc8f <sendKeyToTerminal(unsigned char)+0xc1>
c001bc80:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bc8a:	e8 fd 95 00 00       	call   c002528c <schedule()>
c001bc8f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc94:	83 e8 01             	sub    eax,0x1
c001bc97:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc9c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bca1:	85 c0                	test   eax,eax
c001bca3:	75 01                	jne    c001bca6 <sendKeyToTerminal(unsigned char)+0xd8>
c001bca5:	fb                   	sti    
c001bca6:	90                   	nop
c001bca7:	c9                   	leave  
c001bca8:	c3                   	ret    

c001bca9 <sendKeyboardToken(KeyboardToken)>:
c001bca9:	55                   	push   ebp
c001bcaa:	89 e5                	mov    ebp,esp
c001bcac:	83 ec 18             	sub    esp,0x18
c001bcaf:	e8 12 46 00 00       	call   c00202c6 <KeUserIOReceived()>
c001bcb4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bcb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcba:	0f b7 c0             	movzx  eax,ax
c001bcbd:	83 f2 01             	xor    edx,0x1
c001bcc0:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bcc6:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bccb:	85 c0                	test   eax,eax
c001bccd:	74 24                	je     c001bcf3 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bccf:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001bcd5:	83 ec 04             	sub    esp,0x4
c001bcd8:	68 40 ef 03 c0       	push   0xc003ef40
c001bcdd:	83 ec 08             	sub    esp,0x8
c001bce0:	89 e2                	mov    edx,esp
c001bce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bce5:	89 02                	mov    DWORD PTR [edx],eax
c001bce7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcea:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001bcee:	ff d1                	call   ecx
c001bcf0:	83 c4 10             	add    esp,0x10
c001bcf3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bcf7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bcfa:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bcff:	0f b6 d2             	movzx  edx,dl
c001bd02:	0f b6 c0             	movzx  eax,al
c001bd05:	39 c2                	cmp    edx,eax
c001bd07:	74 1c                	je     c001bd25 <sendKeyboardToken(KeyboardToken)+0x7c>
c001bd09:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bd0c:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bd11:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bd16:	0f b6 c0             	movzx  eax,al
c001bd19:	83 ec 0c             	sub    esp,0xc
c001bd1c:	50                   	push   eax
c001bd1d:	e8 f8 b0 ff ff       	call   c0016e1a <setTerminalScrollLock(bool)>
c001bd22:	83 c4 10             	add    esp,0x10
c001bd25:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bd28:	0f b6 c0             	movzx  eax,al
c001bd2b:	85 c0                	test   eax,eax
c001bd2d:	0f 84 da 00 00 00    	je     c001be0d <sendKeyboardToken(KeyboardToken)+0x164>
c001bd33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd36:	0f b7 c0             	movzx  eax,ax
c001bd39:	3d 18 03 00 00       	cmp    eax,0x318
c001bd3e:	75 06                	jne    c001bd46 <sendKeyboardToken(KeyboardToken)+0x9d>
c001bd40:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bd46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd49:	0f b7 c0             	movzx  eax,ax
c001bd4c:	3d 19 03 00 00       	cmp    eax,0x319
c001bd51:	75 06                	jne    c001bd59 <sendKeyboardToken(KeyboardToken)+0xb0>
c001bd53:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bd59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd5c:	0f b7 c0             	movzx  eax,ax
c001bd5f:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bd64:	75 06                	jne    c001bd6c <sendKeyboardToken(KeyboardToken)+0xc3>
c001bd66:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bd6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd6f:	0f b7 c0             	movzx  eax,ax
c001bd72:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bd77:	75 06                	jne    c001bd7f <sendKeyboardToken(KeyboardToken)+0xd6>
c001bd79:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bd7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd82:	0f b7 c0             	movzx  eax,ax
c001bd85:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bd8a:	75 06                	jne    c001bd92 <sendKeyboardToken(KeyboardToken)+0xe9>
c001bd8c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bd92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd95:	0f b7 c0             	movzx  eax,ax
c001bd98:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bd9d:	75 06                	jne    c001bda5 <sendKeyboardToken(KeyboardToken)+0xfc>
c001bd9f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bda5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bda8:	0f b7 c0             	movzx  eax,ax
c001bdab:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bdb0:	75 06                	jne    c001bdb8 <sendKeyboardToken(KeyboardToken)+0x10f>
c001bdb2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bdb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdbb:	0f b7 c0             	movzx  eax,ax
c001bdbe:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bdc3:	75 06                	jne    c001bdcb <sendKeyboardToken(KeyboardToken)+0x122>
c001bdc5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bdcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdce:	0f b7 c0             	movzx  eax,ax
c001bdd1:	3d 20 03 00 00       	cmp    eax,0x320
c001bdd6:	75 06                	jne    c001bdde <sendKeyboardToken(KeyboardToken)+0x135>
c001bdd8:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bdde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bde1:	0f b7 c0             	movzx  eax,ax
c001bde4:	3d 21 03 00 00       	cmp    eax,0x321
c001bde9:	75 06                	jne    c001bdf1 <sendKeyboardToken(KeyboardToken)+0x148>
c001bdeb:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bdf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdf4:	0f b7 c0             	movzx  eax,ax
c001bdf7:	3d 22 03 00 00       	cmp    eax,0x322
c001bdfc:	0f 85 f1 00 00 00    	jne    c001bef3 <sendKeyboardToken(KeyboardToken)+0x24a>
c001be02:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001be08:	e9 e6 00 00 00       	jmp    c001bef3 <sendKeyboardToken(KeyboardToken)+0x24a>
c001be0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be10:	0f b7 c0             	movzx  eax,ax
c001be13:	3d 18 03 00 00       	cmp    eax,0x318
c001be18:	75 0a                	jne    c001be24 <sendKeyboardToken(KeyboardToken)+0x17b>
c001be1a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001be20:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be27:	0f b7 c0             	movzx  eax,ax
c001be2a:	3d 19 03 00 00       	cmp    eax,0x319
c001be2f:	75 0a                	jne    c001be3b <sendKeyboardToken(KeyboardToken)+0x192>
c001be31:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001be37:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be3e:	0f b7 c0             	movzx  eax,ax
c001be41:	3d 1a 03 00 00       	cmp    eax,0x31a
c001be46:	75 0a                	jne    c001be52 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001be48:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001be4e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be55:	0f b7 c0             	movzx  eax,ax
c001be58:	3d 1b 03 00 00       	cmp    eax,0x31b
c001be5d:	75 0a                	jne    c001be69 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001be5f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001be65:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be6c:	0f b7 c0             	movzx  eax,ax
c001be6f:	3d 1c 03 00 00       	cmp    eax,0x31c
c001be74:	75 0a                	jne    c001be80 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001be76:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001be7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be83:	0f b7 c0             	movzx  eax,ax
c001be86:	3d 1d 03 00 00       	cmp    eax,0x31d
c001be8b:	75 0a                	jne    c001be97 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001be8d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001be93:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9a:	0f b7 c0             	movzx  eax,ax
c001be9d:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bea2:	75 0a                	jne    c001beae <sendKeyboardToken(KeyboardToken)+0x205>
c001bea4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001beaa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001beae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beb1:	0f b7 c0             	movzx  eax,ax
c001beb4:	3d 1f 03 00 00       	cmp    eax,0x31f
c001beb9:	75 0a                	jne    c001bec5 <sendKeyboardToken(KeyboardToken)+0x21c>
c001bebb:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001bec1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bec8:	0f b7 c0             	movzx  eax,ax
c001becb:	3d 20 03 00 00       	cmp    eax,0x320
c001bed0:	75 0a                	jne    c001bedc <sendKeyboardToken(KeyboardToken)+0x233>
c001bed2:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001bed8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bedc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bedf:	0f b7 c0             	movzx  eax,ax
c001bee2:	3d 21 03 00 00       	cmp    eax,0x321
c001bee7:	75 0a                	jne    c001bef3 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bee9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001beef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bef6:	0f b7 c0             	movzx  eax,ax
c001bef9:	3d 00 02 00 00       	cmp    eax,0x200
c001befe:	75 2f                	jne    c001bf2f <sendKeyboardToken(KeyboardToken)+0x286>
c001bf00:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bf05:	83 f0 01             	xor    eax,0x1
c001bf08:	0f b6 c0             	movzx  eax,al
c001bf0b:	85 c0                	test   eax,eax
c001bf0d:	74 20                	je     c001bf2f <sendKeyboardToken(KeyboardToken)+0x286>
c001bf0f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bf14:	6a 01                	push   0x1
c001bf16:	6a 00                	push   0x0
c001bf18:	68 fa ba 01 c0       	push   0xc001bafa
c001bf1d:	50                   	push   eax
c001bf1e:	e8 19 91 00 00       	call   c002503c <Process::createThread(void (*)(void*), void*, int)>
c001bf23:	83 c4 10             	add    esp,0x10
c001bf26:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bf2d:	eb 3a                	jmp    c001bf69 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf32:	0f b7 c0             	movzx  eax,ax
c001bf35:	3d 01 02 00 00       	cmp    eax,0x201
c001bf3a:	75 2d                	jne    c001bf69 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf3c:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bf41:	83 f0 01             	xor    eax,0x1
c001bf44:	0f b6 c0             	movzx  eax,al
c001bf47:	85 c0                	test   eax,eax
c001bf49:	74 1e                	je     c001bf69 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf4b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bf50:	6a 01                	push   0x1
c001bf52:	6a 00                	push   0x0
c001bf54:	68 64 bb 01 c0       	push   0xc001bb64
c001bf59:	50                   	push   eax
c001bf5a:	e8 dd 90 00 00       	call   c002503c <Process::createThread(void (*)(void*), void*, int)>
c001bf5f:	83 c4 10             	add    esp,0x10
c001bf62:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bf69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf6c:	0f b7 c0             	movzx  eax,ax
c001bf6f:	3d 25 03 00 00       	cmp    eax,0x325
c001bf74:	75 06                	jne    c001bf7c <sendKeyboardToken(KeyboardToken)+0x2d3>
c001bf76:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001bf7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf7f:	0f b7 c0             	movzx  eax,ax
c001bf82:	3d 24 03 00 00       	cmp    eax,0x324
c001bf87:	75 06                	jne    c001bf8f <sendKeyboardToken(KeyboardToken)+0x2e6>
c001bf89:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001bf8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf92:	0f b7 c0             	movzx  eax,ax
c001bf95:	3d 23 03 00 00       	cmp    eax,0x323
c001bf9a:	75 06                	jne    c001bfa2 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001bf9c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001bfa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfa5:	0f b7 c0             	movzx  eax,ax
c001bfa8:	3d 26 03 00 00       	cmp    eax,0x326
c001bfad:	75 06                	jne    c001bfb5 <sendKeyboardToken(KeyboardToken)+0x30c>
c001bfaf:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001bfb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfb8:	0f b7 c0             	movzx  eax,ax
c001bfbb:	3d 27 03 00 00       	cmp    eax,0x327
c001bfc0:	75 06                	jne    c001bfc8 <sendKeyboardToken(KeyboardToken)+0x31f>
c001bfc2:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001bfc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfcb:	0f b7 c0             	movzx  eax,ax
c001bfce:	3d 22 03 00 00       	cmp    eax,0x322
c001bfd3:	75 06                	jne    c001bfdb <sendKeyboardToken(KeyboardToken)+0x332>
c001bfd5:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001bfdb:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001bfdf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bfe2:	83 f0 01             	xor    eax,0x1
c001bfe5:	0f b6 c0             	movzx  eax,al
c001bfe8:	85 c0                	test   eax,eax
c001bfea:	74 7c                	je     c001c068 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001bfec:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001bff1:	0f b6 c0             	movzx  eax,al
c001bff4:	85 c0                	test   eax,eax
c001bff6:	74 43                	je     c001c03b <sendKeyboardToken(KeyboardToken)+0x392>
c001bff8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bffc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c000:	85 c0                	test   eax,eax
c001c002:	74 2b                	je     c001c02f <sendKeyboardToken(KeyboardToken)+0x386>
c001c004:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001c00a:	89 d0                	mov    eax,edx
c001c00c:	c1 e0 02             	shl    eax,0x2
c001c00f:	01 d0                	add    eax,edx
c001c011:	01 c0                	add    eax,eax
c001c013:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c01b:	0f b7 c0             	movzx  eax,ax
c001c01e:	8d 50 d0             	lea    edx,[eax-0x30]
c001c021:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c026:	01 d0                	add    eax,edx
c001c028:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c02d:	eb 71                	jmp    c001c0a0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c02f:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c039:	eb 65                	jmp    c001c0a0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c03b:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c040:	85 c0                	test   eax,eax
c001c042:	74 18                	je     c001c05c <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c044:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c049:	0f b6 c0             	movzx  eax,al
c001c04c:	83 ec 0c             	sub    esp,0xc
c001c04f:	50                   	push   eax
c001c050:	e8 79 fb ff ff       	call   c001bbce <sendKeyToTerminal(unsigned char)>
c001c055:	83 c4 10             	add    esp,0x10
c001c058:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c05c:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c066:	eb 38                	jmp    c001c0a0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c06b:	0f b7 c0             	movzx  eax,ax
c001c06e:	3d 01 01 00 00       	cmp    eax,0x101
c001c073:	75 2b                	jne    c001c0a0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c075:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c07a:	85 c0                	test   eax,eax
c001c07c:	74 18                	je     c001c096 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c07e:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c083:	0f b6 c0             	movzx  eax,al
c001c086:	83 ec 0c             	sub    esp,0xc
c001c089:	50                   	push   eax
c001c08a:	e8 3f fb ff ff       	call   c001bbce <sendKeyToTerminal(unsigned char)>
c001c08f:	83 c4 10             	add    esp,0x10
c001c092:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c096:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c0a0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c0a3:	83 f0 01             	xor    eax,0x1
c001c0a6:	0f b6 c0             	movzx  eax,al
c001c0a9:	85 c0                	test   eax,eax
c001c0ab:	74 5a                	je     c001c107 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0ad:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c0b0:	83 f0 01             	xor    eax,0x1
c001c0b3:	0f b6 c0             	movzx  eax,al
c001c0b6:	85 c0                	test   eax,eax
c001c0b8:	74 4d                	je     c001c107 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0ba:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c0bf:	83 f0 01             	xor    eax,0x1
c001c0c2:	0f b6 c0             	movzx  eax,al
c001c0c5:	85 c0                	test   eax,eax
c001c0c7:	74 3e                	je     c001c107 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0cc:	0f b7 c0             	movzx  eax,ax
c001c0cf:	83 f8 1f             	cmp    eax,0x1f
c001c0d2:	76 0b                	jbe    c001c0df <sendKeyboardToken(KeyboardToken)+0x436>
c001c0d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0d7:	0f b7 c0             	movzx  eax,ax
c001c0da:	83 f8 7e             	cmp    eax,0x7e
c001c0dd:	76 16                	jbe    c001c0f5 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0e2:	0f b7 c0             	movzx  eax,ax
c001c0e5:	83 f8 0a             	cmp    eax,0xa
c001c0e8:	74 0b                	je     c001c0f5 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ed:	0f b7 c0             	movzx  eax,ax
c001c0f0:	83 f8 08             	cmp    eax,0x8
c001c0f3:	75 12                	jne    c001c107 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0f8:	0f b6 c0             	movzx  eax,al
c001c0fb:	83 ec 0c             	sub    esp,0xc
c001c0fe:	50                   	push   eax
c001c0ff:	e8 ca fa ff ff       	call   c001bbce <sendKeyToTerminal(unsigned char)>
c001c104:	83 c4 10             	add    esp,0x10
c001c107:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c10a:	83 f0 01             	xor    eax,0x1
c001c10d:	0f b6 c0             	movzx  eax,al
c001c110:	85 c0                	test   eax,eax
c001c112:	74 5d                	je     c001c171 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c114:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c117:	83 f0 01             	xor    eax,0x1
c001c11a:	0f b6 c0             	movzx  eax,al
c001c11d:	85 c0                	test   eax,eax
c001c11f:	74 50                	je     c001c171 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c121:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c126:	0f b6 c0             	movzx  eax,al
c001c129:	85 c0                	test   eax,eax
c001c12b:	74 44                	je     c001c171 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c12d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c130:	0f b7 c0             	movzx  eax,ax
c001c133:	83 f8 3f             	cmp    eax,0x3f
c001c136:	76 39                	jbe    c001c171 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c13b:	0f b7 c0             	movzx  eax,ax
c001c13e:	83 f8 7f             	cmp    eax,0x7f
c001c141:	77 2e                	ja     c001c171 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c146:	88 c2                	mov    dl,al
c001c148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c14b:	0f b7 c0             	movzx  eax,ax
c001c14e:	83 f8 5f             	cmp    eax,0x5f
c001c151:	76 04                	jbe    c001c157 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c153:	b0 20                	mov    al,0x20
c001c155:	eb 02                	jmp    c001c159 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c157:	b0 00                	mov    al,0x0
c001c159:	89 d1                	mov    ecx,edx
c001c15b:	29 c1                	sub    ecx,eax
c001c15d:	89 c8                	mov    eax,ecx
c001c15f:	83 e8 40             	sub    eax,0x40
c001c162:	0f b6 c0             	movzx  eax,al
c001c165:	83 ec 0c             	sub    esp,0xc
c001c168:	50                   	push   eax
c001c169:	e8 60 fa ff ff       	call   c001bbce <sendKeyToTerminal(unsigned char)>
c001c16e:	83 c4 10             	add    esp,0x10
c001c171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c174:	0f b7 c0             	movzx  eax,ax
c001c177:	3d 00 03 00 00       	cmp    eax,0x300
c001c17c:	75 12                	jne    c001c190 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c17e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c181:	83 f0 01             	xor    eax,0x1
c001c184:	0f b6 c0             	movzx  eax,al
c001c187:	85 c0                	test   eax,eax
c001c189:	74 05                	je     c001c190 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c18b:	e8 8b ac ff ff       	call   c0016e1b <doTerminalCycle()>
c001c190:	90                   	nop
c001c191:	c9                   	leave  
c001c192:	c3                   	ret    

c001c193 <clearInternalKeybuffer(VgaText*)>:
c001c193:	55                   	push   ebp
c001c194:	89 e5                	mov    ebp,esp
c001c196:	83 ec 08             	sub    esp,0x8
c001c199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c19c:	05 02 01 00 00       	add    eax,0x102
c001c1a1:	83 ec 0c             	sub    esp,0xc
c001c1a4:	50                   	push   eax
c001c1a5:	e8 c6 43 fe ff       	call   c0000570 <strlen>
c001c1aa:	83 c4 10             	add    esp,0x10
c001c1ad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c1b0:	81 c2 02 01 00 00    	add    edx,0x102
c001c1b6:	83 ec 04             	sub    esp,0x4
c001c1b9:	50                   	push   eax
c001c1ba:	6a 00                	push   0x0
c001c1bc:	52                   	push   edx
c001c1bd:	e8 2e 43 fe ff       	call   c00004f0 <memset>
c001c1c2:	83 c4 10             	add    esp,0x10
c001c1c5:	90                   	nop
c001c1c6:	c9                   	leave  
c001c1c7:	c3                   	ret    

c001c1c8 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c1c8:	55                   	push   ebp
c001c1c9:	89 e5                	mov    ebp,esp
c001c1cb:	83 ec 18             	sub    esp,0x18
c001c1ce:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c1d3:	85 c0                	test   eax,eax
c001c1d5:	74 2a                	je     c001c201 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c1d7:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c1dd:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001c1e3:	83 ec 04             	sub    esp,0x4
c001c1e6:	68 40 ef 03 c0       	push   0xc003ef40
c001c1eb:	83 ec 08             	sub    esp,0x8
c001c1ee:	89 e2                	mov    edx,esp
c001c1f0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c1f3:	89 02                	mov    DWORD PTR [edx],eax
c001c1f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c1f8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c1fc:	ff d1                	call   ecx
c001c1fe:	83 c4 10             	add    esp,0x10
c001c201:	fb                   	sti    
c001c202:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c209:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c20d:	0f 84 0d 01 00 00    	je     c001c320 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c216:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c21c:	0f be c0             	movsx  eax,al
c001c21f:	85 c0                	test   eax,eax
c001c221:	75 2c                	jne    c001c24f <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c223:	fa                   	cli    
c001c224:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c229:	83 c0 01             	add    eax,0x1
c001c22c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c231:	e8 56 90 00 00       	call   c002528c <schedule()>
c001c236:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c23b:	83 e8 01             	sub    eax,0x1
c001c23e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c243:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c248:	85 c0                	test   eax,eax
c001c24a:	75 c7                	jne    c001c213 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c24c:	fb                   	sti    
c001c24d:	eb c4                	jmp    c001c213 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c24f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c252:	8d 50 01             	lea    edx,[eax+0x1]
c001c255:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c258:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c25b:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c261:	88 10                	mov    BYTE PTR [eax],dl
c001c263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c266:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c26c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c26f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c273:	83 f8 03             	cmp    eax,0x3
c001c276:	75 1e                	jne    c001c296 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c278:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c27d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c27f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c282:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c288:	83 ec 08             	sub    esp,0x8
c001c28b:	6a 02                	push   0x2
c001c28d:	50                   	push   eax
c001c28e:	e8 9c 48 00 00       	call   c0020b2f <KeRaiseSignal(SigHandlerBlock*, int)>
c001c293:	83 c4 10             	add    esp,0x10
c001c296:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c29a:	83 f8 1c             	cmp    eax,0x1c
c001c29d:	75 1e                	jne    c001c2bd <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c29f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c2a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c2a9:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c2af:	83 ec 08             	sub    esp,0x8
c001c2b2:	6a 09                	push   0x9
c001c2b4:	50                   	push   eax
c001c2b5:	e8 75 48 00 00       	call   c0020b2f <KeRaiseSignal(SigHandlerBlock*, int)>
c001c2ba:	83 c4 10             	add    esp,0x10
c001c2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2c0:	05 02 01 00 00       	add    eax,0x102
c001c2c5:	83 ec 0c             	sub    esp,0xc
c001c2c8:	50                   	push   eax
c001c2c9:	e8 a2 42 fe ff       	call   c0000570 <strlen>
c001c2ce:	83 c4 10             	add    esp,0x10
c001c2d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2d4:	81 c2 02 01 00 00    	add    edx,0x102
c001c2da:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c2dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2e0:	81 c2 02 01 00 00    	add    edx,0x102
c001c2e6:	83 ec 04             	sub    esp,0x4
c001c2e9:	50                   	push   eax
c001c2ea:	51                   	push   ecx
c001c2eb:	52                   	push   edx
c001c2ec:	e8 df 40 fe ff       	call   c00003d0 <memmove>
c001c2f1:	83 c4 10             	add    esp,0x10
c001c2f4:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c2f8:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c2fc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c300:	83 f8 0a             	cmp    eax,0xa
c001c303:	74 16                	je     c001c31b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c305:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c309:	83 f8 03             	cmp    eax,0x3
c001c30c:	74 0d                	je     c001c31b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c30e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c312:	83 f8 1c             	cmp    eax,0x1c
c001c315:	0f 85 ee fe ff ff    	jne    c001c209 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c31b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c31e:	eb 03                	jmp    c001c323 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c320:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c323:	c9                   	leave  
c001c324:	c3                   	ret    
c001c325:	90                   	nop

c001c326 <Keyboard::Keyboard(char const*)>:
c001c326:	83 ec 0c             	sub    esp,0xc
c001c329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c32d:	83 ec 08             	sub    esp,0x8
c001c330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c334:	50                   	push   eax
c001c335:	e8 06 f1 ff ff       	call   c001b440 <Device::Device(char const*)>
c001c33a:	83 c4 10             	add    esp,0x10
c001c33d:	ba 68 21 03 c0       	mov    edx,0xc0032168
c001c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c346:	89 10                	mov    DWORD PTR [eax],edx
c001c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c34c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c356:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c35d:	90                   	nop
c001c35e:	83 c4 0c             	add    esp,0xc
c001c361:	c3                   	ret    

c001c362 <Keyboard::~Keyboard()>:
c001c362:	83 ec 0c             	sub    esp,0xc
c001c365:	ba 68 21 03 c0       	mov    edx,0xc0032168
c001c36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c36e:	89 10                	mov    DWORD PTR [eax],edx
c001c370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c374:	83 ec 0c             	sub    esp,0xc
c001c377:	50                   	push   eax
c001c378:	e8 63 ee ff ff       	call   c001b1e0 <Device::~Device()>
c001c37d:	83 c4 10             	add    esp,0x10
c001c380:	90                   	nop
c001c381:	83 c4 0c             	add    esp,0xc
c001c384:	c3                   	ret    
c001c385:	90                   	nop

c001c386 <Keyboard::~Keyboard()>:
c001c386:	83 ec 0c             	sub    esp,0xc
c001c389:	83 ec 0c             	sub    esp,0xc
c001c38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c390:	e8 cd ff ff ff       	call   c001c362 <Keyboard::~Keyboard()>
c001c395:	83 c4 10             	add    esp,0x10
c001c398:	83 ec 08             	sub    esp,0x8
c001c39b:	68 5c 01 00 00       	push   0x15c
c001c3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3a4:	e8 87 cd ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001c3a9:	83 c4 10             	add    esp,0x10
c001c3ac:	83 c4 0c             	add    esp,0xc
c001c3af:	c3                   	ret    

c001c3b0 <LogicalDisk::close(int, int, void*)>:
c001c3b0:	83 c8 ff             	or     eax,0xffffffff
c001c3b3:	c3                   	ret    

c001c3b4 <LogicalDisk::~LogicalDisk()>:
c001c3b4:	83 ec 0c             	sub    esp,0xc
c001c3b7:	ba e0 21 03 c0       	mov    edx,0xc00321e0
c001c3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c0:	89 10                	mov    DWORD PTR [eax],edx
c001c3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c6:	83 ec 0c             	sub    esp,0xc
c001c3c9:	50                   	push   eax
c001c3ca:	e8 11 ee ff ff       	call   c001b1e0 <Device::~Device()>
c001c3cf:	83 c4 10             	add    esp,0x10
c001c3d2:	90                   	nop
c001c3d3:	83 c4 0c             	add    esp,0xc
c001c3d6:	c3                   	ret    
c001c3d7:	90                   	nop

c001c3d8 <LogicalDisk::~LogicalDisk()>:
c001c3d8:	83 ec 0c             	sub    esp,0xc
c001c3db:	83 ec 0c             	sub    esp,0xc
c001c3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3e2:	e8 cd ff ff ff       	call   c001c3b4 <LogicalDisk::~LogicalDisk()>
c001c3e7:	83 c4 10             	add    esp,0x10
c001c3ea:	83 ec 08             	sub    esp,0x8
c001c3ed:	68 78 01 00 00       	push   0x178
c001c3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3f6:	e8 35 cd ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001c3fb:	83 c4 10             	add    esp,0x10
c001c3fe:	83 c4 0c             	add    esp,0xc
c001c401:	c3                   	ret    

c001c402 <LogicalDisk::open(int, int, void*)>:
c001c402:	83 ec 18             	sub    esp,0x18
c001c405:	68 94 21 03 c0       	push   0xc0032194
c001c40a:	e8 67 3e 00 00       	call   c0020276 <KePanic(char const*)>
c001c40f:	83 c8 ff             	or     eax,0xffffffff
c001c412:	83 c4 1c             	add    esp,0x1c
c001c415:	c3                   	ret    

c001c416 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c416:	53                   	push   ebx
c001c417:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c41b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c41f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c423:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c429:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c42f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c435:	77 10                	ja     c001c447 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c437:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c43d:	89 d3                	mov    ebx,edx
c001c43f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c445:	72 05                	jb     c001c44c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c447:	83 c8 ff             	or     eax,0xffffffff
c001c44a:	89 c2                	mov    edx,eax
c001c44c:	5b                   	pop    ebx
c001c44d:	c3                   	ret    

c001c44e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c44e:	56                   	push   esi
c001c44f:	83 c8 ff             	or     eax,0xffffffff
c001c452:	53                   	push   ebx
c001c453:	89 c2                	mov    edx,eax
c001c455:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c459:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c45d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c461:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c467:	77 27                	ja     c001c490 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c469:	89 d8                	mov    eax,ebx
c001c46b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c471:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c477:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c47c:	89 c2                	mov    edx,eax
c001c47e:	73 10                	jae    c001c490 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c480:	89 c8                	mov    eax,ecx
c001c482:	89 da                	mov    edx,ebx
c001c484:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c48a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c490:	5b                   	pop    ebx
c001c491:	5e                   	pop    esi
c001c492:	c3                   	ret    
c001c493:	90                   	nop

c001c494 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c494:	83 ec 1c             	sub    esp,0x1c
c001c497:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c49b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c49f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c4a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c4b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4ba:	83 ec 08             	sub    esp,0x8
c001c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4c1:	50                   	push   eax
c001c4c2:	e8 79 ef ff ff       	call   c001b440 <Device::Device(char const*)>
c001c4c7:	83 c4 10             	add    esp,0x10
c001c4ca:	ba e0 21 03 c0       	mov    edx,0xc00321e0
c001c4cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d3:	89 10                	mov    DWORD PTR [eax],edx
c001c4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4e4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c4eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4ef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4fa:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c504:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c508:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c50c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c510:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c516:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c51c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c520:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c523:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c527:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c52d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c537:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c53b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c545:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c54f:	90                   	nop
c001c550:	83 c4 1c             	add    esp,0x1c
c001c553:	c3                   	ret    

c001c554 <LogicalDisk::assignDriveLetter()>:
c001c554:	55                   	push   ebp
c001c555:	57                   	push   edi
c001c556:	56                   	push   esi
c001c557:	53                   	push   ebx
c001c558:	83 ec 14             	sub    esp,0x14
c001c55b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c55f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c565:	b0 41                	mov    al,0x41
c001c567:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c56d:	84 d2                	test   dl,dl
c001c56f:	75 02                	jne    c001c573 <LogicalDisk::assignDriveLetter()+0x1f>
c001c571:	b0 43                	mov    al,0x43
c001c573:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c579:	0f b6 ca             	movzx  ecx,dl
c001c57c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c580:	0f be e8             	movsx  ebp,al
c001c583:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c589:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c58d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c591:	3c 43                	cmp    al,0x43
c001c593:	75 10                	jne    c001c5a5 <LogicalDisk::assignDriveLetter()+0x51>
c001c595:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c59c:	75 5a                	jne    c001c5f8 <LogicalDisk::assignDriveLetter()+0xa4>
c001c59e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c5a3:	75 53                	jne    c001c5f8 <LogicalDisk::assignDriveLetter()+0xa4>
c001c5a5:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c5a8:	ba 01 00 00 00       	mov    edx,0x1
c001c5ad:	89 34 24             	mov    DWORD PTR [esp],esi
c001c5b0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c5b3:	d3 e2                	shl    edx,cl
c001c5b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c5b9:	89 d7                	mov    edi,edx
c001c5bb:	89 d6                	mov    esi,edx
c001c5bd:	c1 ff 1f             	sar    edi,0x1f
c001c5c0:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c5c4:	21 f9                	and    ecx,edi
c001c5c6:	09 d1                	or     ecx,edx
c001c5c8:	75 2e                	jne    c001c5f8 <LogicalDisk::assignDriveLetter()+0xa4>
c001c5ca:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c5ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5d2:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c5d8:	09 f2                	or     edx,esi
c001c5da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c5dd:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c5e3:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c5ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c5ee:	09 fa                	or     edx,edi
c001c5f0:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c5f6:	eb 0d                	jmp    c001c605 <LogicalDisk::assignDriveLetter()+0xb1>
c001c5f8:	8d 50 01             	lea    edx,[eax+0x1]
c001c5fb:	45                   	inc    ebp
c001c5fc:	88 d0                	mov    al,dl
c001c5fe:	80 fa 5b             	cmp    dl,0x5b
c001c601:	75 8e                	jne    c001c591 <LogicalDisk::assignDriveLetter()+0x3d>
c001c603:	31 c0                	xor    eax,eax
c001c605:	83 c4 14             	add    esp,0x14
c001c608:	5b                   	pop    ebx
c001c609:	5e                   	pop    esi
c001c60a:	5f                   	pop    edi
c001c60b:	5d                   	pop    ebp
c001c60c:	c3                   	ret    
c001c60d:	90                   	nop

c001c60e <LogicalDisk::mount()>:
c001c60e:	56                   	push   esi
c001c60f:	53                   	push   ebx
c001c610:	53                   	push   ebx
c001c611:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c615:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c61b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c625:	85 db                	test   ebx,ebx
c001c627:	74 27                	je     c001c650 <LogicalDisk::mount()+0x42>
c001c629:	51                   	push   ecx
c001c62a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c631:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c633:	83 e8 41             	sub    eax,0x41
c001c636:	50                   	push   eax
c001c637:	56                   	push   esi
c001c638:	53                   	push   ebx
c001c639:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c63c:	83 c4 10             	add    esp,0x10
c001c63f:	84 c0                	test   al,al
c001c641:	74 08                	je     c001c64b <LogicalDisk::mount()+0x3d>
c001c643:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c649:	eb 07                	jmp    c001c652 <LogicalDisk::mount()+0x44>
c001c64b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c64e:	eb d5                	jmp    c001c625 <LogicalDisk::mount()+0x17>
c001c650:	31 c0                	xor    eax,eax
c001c652:	5a                   	pop    edx
c001c653:	5b                   	pop    ebx
c001c654:	5e                   	pop    esi
c001c655:	c3                   	ret    

c001c656 <LogicalDisk::unmount()>:
c001c656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c65a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c664:	c3                   	ret    
c001c665:	90                   	nop

c001c666 <LogicalDisk::eject()>:
c001c666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c66a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c670:	8b 10                	mov    edx,DWORD PTR [eax]
c001c672:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c676:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c679:	90                   	nop

c001c67a <LogicalDisk::unassignDriveLetter()>:
c001c67a:	57                   	push   edi
c001c67b:	56                   	push   esi
c001c67c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c680:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c687:	85 c9                	test   ecx,ecx
c001c689:	75 0f                	jne    c001c69a <LogicalDisk::unassignDriveLetter()+0x20>
c001c68b:	c7 44 24 0c b8 21 03 c0 	mov    DWORD PTR [esp+0xc],0xc00321b8
c001c693:	5e                   	pop    esi
c001c694:	5f                   	pop    edi
c001c695:	e9 dc 3b 00 00       	jmp    c0020276 <KePanic(char const*)>
c001c69a:	83 e9 41             	sub    ecx,0x41
c001c69d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c6a4:	b8 01 00 00 00       	mov    eax,0x1
c001c6a9:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c6b4:	d3 e0                	shl    eax,cl
c001c6b6:	89 c7                	mov    edi,eax
c001c6b8:	f7 d0                	not    eax
c001c6ba:	c1 ff 1f             	sar    edi,0x1f
c001c6bd:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c6c3:	89 fe                	mov    esi,edi
c001c6c5:	f7 d6                	not    esi
c001c6c7:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c6cd:	5e                   	pop    esi
c001c6ce:	5f                   	pop    edi
c001c6cf:	c3                   	ret    

c001c6d0 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c6d0:	57                   	push   edi
c001c6d1:	56                   	push   esi
c001c6d2:	53                   	push   ebx
c001c6d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c6d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c6df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c6e9:	77 41                	ja     c001c72c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c6eb:	99                   	cdq    
c001c6ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c6f2:	01 c8                	add    eax,ecx
c001c6f4:	11 da                	adc    edx,ebx
c001c6f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c6fc:	19 d7                	sbb    edi,edx
c001c6fe:	72 33                	jb     c001c733 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c700:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c706:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c70c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c710:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c714:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c71a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c720:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c724:	5b                   	pop    ebx
c001c725:	5e                   	pop    esi
c001c726:	5f                   	pop    edi
c001c727:	e9 c8 0a 00 00       	jmp    c001d1f4 <VCache::read(unsigned long long, int, void*)>
c001c72c:	b8 05 00 00 00       	mov    eax,0x5
c001c731:	eb 05                	jmp    c001c738 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c733:	b8 07 00 00 00       	mov    eax,0x7
c001c738:	5b                   	pop    ebx
c001c739:	5e                   	pop    esi
c001c73a:	5f                   	pop    edi
c001c73b:	c3                   	ret    

c001c73c <LogicalDisk::write(unsigned long long, int, void*)>:
c001c73c:	57                   	push   edi
c001c73d:	56                   	push   esi
c001c73e:	53                   	push   ebx
c001c73f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c743:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c747:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c74b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c74f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c755:	77 41                	ja     c001c798 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c757:	99                   	cdq    
c001c758:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c75e:	01 c8                	add    eax,ecx
c001c760:	11 da                	adc    edx,ebx
c001c762:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c768:	19 d7                	sbb    edi,edx
c001c76a:	72 33                	jb     c001c79f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c76c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c772:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c778:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c77c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c780:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c786:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c78c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c790:	5b                   	pop    ebx
c001c791:	5e                   	pop    esi
c001c792:	5f                   	pop    edi
c001c793:	e9 68 09 00 00       	jmp    c001d100 <VCache::write(unsigned long long, int, void*)>
c001c798:	b8 05 00 00 00       	mov    eax,0x5
c001c79d:	eb 05                	jmp    c001c7a4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c79f:	b8 07 00 00 00       	mov    eax,0x7
c001c7a4:	5b                   	pop    ebx
c001c7a5:	5e                   	pop    esi
c001c7a6:	5f                   	pop    edi
c001c7a7:	c3                   	ret    

c001c7a8 <Mouse::Mouse(char const*)>:
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7af:	83 ec 08             	sub    esp,0x8
c001c7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7b6:	50                   	push   eax
c001c7b7:	e8 84 ec ff ff       	call   c001b440 <Device::Device(char const*)>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	ba 0c 22 03 c0       	mov    edx,0xc003220c
c001c7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c8:	89 10                	mov    DWORD PTR [eax],edx
c001c7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c7d8:	90                   	nop
c001c7d9:	83 c4 0c             	add    esp,0xc
c001c7dc:	c3                   	ret    
c001c7dd:	90                   	nop
c001c7de:	66 90                	xchg   ax,ax

c001c7e0 <Mouse::~Mouse()>:
c001c7e0:	83 ec 0c             	sub    esp,0xc
c001c7e3:	ba 0c 22 03 c0       	mov    edx,0xc003220c
c001c7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ec:	89 10                	mov    DWORD PTR [eax],edx
c001c7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f2:	83 ec 0c             	sub    esp,0xc
c001c7f5:	50                   	push   eax
c001c7f6:	e8 e5 e9 ff ff       	call   c001b1e0 <Device::~Device()>
c001c7fb:	83 c4 10             	add    esp,0x10
c001c7fe:	90                   	nop
c001c7ff:	83 c4 0c             	add    esp,0xc
c001c802:	c3                   	ret    
c001c803:	90                   	nop

c001c804 <Mouse::~Mouse()>:
c001c804:	83 ec 0c             	sub    esp,0xc
c001c807:	83 ec 0c             	sub    esp,0xc
c001c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c80e:	e8 cd ff ff ff       	call   c001c7e0 <Mouse::~Mouse()>
c001c813:	83 c4 10             	add    esp,0x10
c001c816:	83 ec 08             	sub    esp,0x8
c001c819:	68 58 01 00 00       	push   0x158
c001c81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c822:	e8 09 c9 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001c827:	83 c4 10             	add    esp,0x10
c001c82a:	83 c4 0c             	add    esp,0xc
c001c82d:	c3                   	ret    

c001c82e <NIC::getMAC()>:
c001c82e:	31 c0                	xor    eax,eax
c001c830:	31 d2                	xor    edx,edx
c001c832:	c3                   	ret    
c001c833:	90                   	nop

c001c834 <NIC::write(int, unsigned char*, int*)>:
c001c834:	b8 01 00 00 00       	mov    eax,0x1
c001c839:	c3                   	ret    

c001c83a <NIC::NIC(char const*)>:
c001c83a:	83 ec 0c             	sub    esp,0xc
c001c83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c841:	83 ec 08             	sub    esp,0x8
c001c844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c848:	50                   	push   eax
c001c849:	e8 f2 eb ff ff       	call   c001b440 <Device::Device(char const*)>
c001c84e:	83 c4 10             	add    esp,0x10
c001c851:	ba 38 22 03 c0       	mov    edx,0xc0032238
c001c856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85a:	89 10                	mov    DWORD PTR [eax],edx
c001c85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c860:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c86a:	90                   	nop
c001c86b:	83 c4 0c             	add    esp,0xc
c001c86e:	c3                   	ret    
c001c86f:	90                   	nop

c001c870 <NIC::~NIC()>:
c001c870:	83 ec 0c             	sub    esp,0xc
c001c873:	ba 38 22 03 c0       	mov    edx,0xc0032238
c001c878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87c:	89 10                	mov    DWORD PTR [eax],edx
c001c87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c882:	83 ec 0c             	sub    esp,0xc
c001c885:	50                   	push   eax
c001c886:	e8 55 e9 ff ff       	call   c001b1e0 <Device::~Device()>
c001c88b:	83 c4 10             	add    esp,0x10
c001c88e:	90                   	nop
c001c88f:	83 c4 0c             	add    esp,0xc
c001c892:	c3                   	ret    
c001c893:	90                   	nop

c001c894 <NIC::~NIC()>:
c001c894:	83 ec 0c             	sub    esp,0xc
c001c897:	83 ec 0c             	sub    esp,0xc
c001c89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c89e:	e8 cd ff ff ff       	call   c001c870 <NIC::~NIC()>
c001c8a3:	83 c4 10             	add    esp,0x10
c001c8a6:	83 ec 08             	sub    esp,0x8
c001c8a9:	68 58 01 00 00       	push   0x158
c001c8ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8b2:	e8 79 c8 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001c8b7:	83 c4 10             	add    esp,0x10
c001c8ba:	83 c4 0c             	add    esp,0xc
c001c8bd:	c3                   	ret    

c001c8be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c8be:	55                   	push   ebp
c001c8bf:	57                   	push   edi
c001c8c0:	56                   	push   esi
c001c8c1:	53                   	push   ebx
c001c8c2:	81 ec 28 01 00 00    	sub    esp,0x128
c001c8c8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c8cf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001c8d6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001c8dd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001c8e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c8ec:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c8f3:	e8 44 ec ff ff       	call   c001b53c <Device::getName()>
c001c8f8:	5a                   	pop    edx
c001c8f9:	59                   	pop    ecx
c001c8fa:	50                   	push   eax
c001c8fb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c8ff:	55                   	push   ebp
c001c900:	e8 3b 3d fe ff       	call   c0000640 <strcpy>
c001c905:	5b                   	pop    ebx
c001c906:	58                   	pop    eax
c001c907:	68 64 22 03 c0       	push   0xc0032264
c001c90c:	55                   	push   ebp
c001c90d:	e8 2e 3f fe ff       	call   c0000840 <strcat>
c001c912:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c919:	e8 a0 9a ff ff       	call   c00163be <malloc>
c001c91e:	83 c4 0c             	add    esp,0xc
c001c921:	89 c3                	mov    ebx,eax
c001c923:	57                   	push   edi
c001c924:	56                   	push   esi
c001c925:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c92d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c934:	55                   	push   ebp
c001c935:	50                   	push   eax
c001c936:	e8 59 fb ff ff       	call   c001c494 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c93b:	83 c4 14             	add    esp,0x14
c001c93e:	53                   	push   ebx
c001c93f:	e8 10 fc ff ff       	call   c001c554 <LogicalDisk::assignDriveLetter()>
c001c944:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c947:	e8 c2 fc ff ff       	call   c001c60e <LogicalDisk::mount()>
c001c94c:	58                   	pop    eax
c001c94d:	5a                   	pop    edx
c001c94e:	53                   	push   ebx
c001c94f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c956:	e8 83 e9 ff ff       	call   c001b2de <Device::addChild(Device*)>
c001c95b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c961:	5b                   	pop    ebx
c001c962:	5e                   	pop    esi
c001c963:	5f                   	pop    edi
c001c964:	5d                   	pop    ebp
c001c965:	c3                   	ret    

c001c966 <createPartitionsForDisk(PhysicalDisk*)>:
c001c966:	55                   	push   ebp
c001c967:	57                   	push   edi
c001c968:	56                   	push   esi
c001c969:	53                   	push   ebx
c001c96a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c970:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001c977:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c97d:	3d 00 02 00 00       	cmp    eax,0x200
c001c982:	74 27                	je     c001c9ab <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001c984:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001c98a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001c990:	83 ec 10             	sub    esp,0x10
c001c993:	0f a4 f7 0a          	shld   edi,esi,0xa
c001c997:	99                   	cdq    
c001c998:	c1 e6 0a             	shl    esi,0xa
c001c99b:	52                   	push   edx
c001c99c:	89 fd                	mov    ebp,edi
c001c99e:	50                   	push   eax
c001c99f:	55                   	push   ebp
c001c9a0:	56                   	push   esi
c001c9a1:	e8 ea 1c 01 00       	call   c002e690 <__udivdi3>
c001c9a6:	e9 b9 00 00 00       	jmp    c001ca64 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c9ab:	83 ec 0c             	sub    esp,0xc
c001c9ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9b0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001c9b4:	56                   	push   esi
c001c9b5:	6a 01                	push   0x1
c001c9b7:	6a 00                	push   0x0
c001c9b9:	6a 00                	push   0x0
c001c9bb:	53                   	push   ebx
c001c9bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c9bf:	83 c4 20             	add    esp,0x20
c001c9c2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001c9ca:	75 0a                	jne    c001c9d6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001c9cc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001c9d4:	74 2c                	je     c001ca02 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001c9d6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c9dc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c9e2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c9e8:	83 ec 10             	sub    esp,0x10
c001c9eb:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c9ef:	89 f7                	mov    edi,esi
c001c9f1:	c1 e0 0a             	shl    eax,0xa
c001c9f4:	c1 ff 1f             	sar    edi,0x1f
c001c9f7:	57                   	push   edi
c001c9f8:	56                   	push   esi
c001c9f9:	52                   	push   edx
c001c9fa:	50                   	push   eax
c001c9fb:	e8 90 1c 01 00       	call   c002e690 <__udivdi3>
c001ca00:	eb 62                	jmp    c001ca64 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001ca02:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001ca09:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001ca10:	89 cf                	mov    edi,ecx
c001ca12:	83 e2 7f             	and    edx,0x7f
c001ca15:	83 e7 7f             	and    edi,0x7f
c001ca18:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001ca1f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001ca22:	83 e0 7f             	and    eax,0x7f
c001ca25:	8d 14 01             	lea    edx,[ecx+eax*1]
c001ca28:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001ca2f:	83 e0 7f             	and    eax,0x7f
c001ca32:	01 d0                	add    eax,edx
c001ca34:	89 c5                	mov    ebp,eax
c001ca36:	84 c0                	test   al,al
c001ca38:	74 41                	je     c001ca7b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001ca3a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca40:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca46:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca4c:	83 ec 10             	sub    esp,0x10
c001ca4f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca53:	89 f7                	mov    edi,esi
c001ca55:	c1 e0 0a             	shl    eax,0xa
c001ca58:	c1 ff 1f             	sar    edi,0x1f
c001ca5b:	57                   	push   edi
c001ca5c:	56                   	push   esi
c001ca5d:	52                   	push   edx
c001ca5e:	50                   	push   eax
c001ca5f:	e8 2c 1c 01 00       	call   c002e690 <__udivdi3>
c001ca64:	83 c4 14             	add    esp,0x14
c001ca67:	52                   	push   edx
c001ca68:	50                   	push   eax
c001ca69:	6a 00                	push   0x0
c001ca6b:	6a 00                	push   0x0
c001ca6d:	53                   	push   ebx
c001ca6e:	e8 4b fe ff ff       	call   c001c8be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001ca73:	83 c4 20             	add    esp,0x20
c001ca76:	e9 73 01 00 00       	jmp    c001cbee <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001ca7b:	89 f0                	mov    eax,esi
c001ca7d:	31 c9                	xor    ecx,ecx
c001ca7f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001ca86:	75 02                	jne    c001ca8a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001ca88:	89 cd                	mov    ebp,ecx
c001ca8a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001ca91:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001ca98:	c1 e2 08             	shl    edx,0x8
c001ca9b:	c1 e6 10             	shl    esi,0x10
c001ca9e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001caa6:	09 f2                	or     edx,esi
c001caa8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001cab0:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001cab7:	83 c0 10             	add    eax,0x10
c001caba:	09 f2                	or     edx,esi
c001cabc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cac3:	c1 e6 18             	shl    esi,0x18
c001cac6:	09 f2                	or     edx,esi
c001cac8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001cacf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001cad3:	c1 e6 10             	shl    esi,0x10
c001cad6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cadd:	c1 e2 08             	shl    edx,0x8
c001cae0:	09 f2                	or     edx,esi
c001cae2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cae9:	09 f2                	or     edx,esi
c001caeb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001caf2:	c1 e6 18             	shl    esi,0x18
c001caf5:	09 f2                	or     edx,esi
c001caf7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001cafb:	41                   	inc    ecx
c001cafc:	83 f9 04             	cmp    ecx,0x4
c001caff:	0f 85 7a ff ff ff    	jne    c001ca7f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001cb05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb09:	83 f0 01             	xor    eax,0x1
c001cb0c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cb10:	75 4f                	jne    c001cb61 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cb12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb16:	83 f0 01             	xor    eax,0x1
c001cb19:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001cb1d:	75 42                	jne    c001cb61 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cb1f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cb27:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb2f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cb35:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cb3b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cb41:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cb45:	89 f7                	mov    edi,esi
c001cb47:	c1 e0 0a             	shl    eax,0xa
c001cb4a:	c1 ff 1f             	sar    edi,0x1f
c001cb4d:	57                   	push   edi
c001cb4e:	56                   	push   esi
c001cb4f:	52                   	push   edx
c001cb50:	50                   	push   eax
c001cb51:	e8 3a 1b 01 00       	call   c002e690 <__udivdi3>
c001cb56:	83 c4 10             	add    esp,0x10
c001cb59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb61:	89 e8                	mov    eax,ebp
c001cb63:	0f b6 e8             	movzx  ebp,al
c001cb66:	85 ed                	test   ebp,ebp
c001cb68:	74 50                	je     c001cbba <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cb6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cb72:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb76:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb82:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cb86:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb8e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cb92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb96:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cb9a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cb9e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cba2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cba6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cbaa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cbae:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cbb2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cbb6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cbba:	31 ed                	xor    ebp,ebp
c001cbbc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cbc0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cbc4:	89 f8                	mov    eax,edi
c001cbc6:	09 f0                	or     eax,esi
c001cbc8:	74 1e                	je     c001cbe8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cbca:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cbce:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cbd2:	89 d1                	mov    ecx,edx
c001cbd4:	09 c1                	or     ecx,eax
c001cbd6:	74 10                	je     c001cbe8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cbd8:	83 ec 0c             	sub    esp,0xc
c001cbdb:	57                   	push   edi
c001cbdc:	56                   	push   esi
c001cbdd:	52                   	push   edx
c001cbde:	50                   	push   eax
c001cbdf:	53                   	push   ebx
c001cbe0:	e8 d9 fc ff ff       	call   c001c8be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cbe5:	83 c4 20             	add    esp,0x20
c001cbe8:	45                   	inc    ebp
c001cbe9:	83 fd 04             	cmp    ebp,0x4
c001cbec:	75 ce                	jne    c001cbbc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cbee:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cbf4:	5b                   	pop    ebx
c001cbf5:	5e                   	pop    esi
c001cbf6:	5f                   	pop    edi
c001cbf7:	5d                   	pop    ebp
c001cbf8:	c3                   	ret    
c001cbf9:	66 90                	xchg   ax,ax
c001cbfb:	90                   	nop

c001cbfc <Serial::Serial(char const*)>:
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc03:	83 ec 08             	sub    esp,0x8
c001cc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc0a:	50                   	push   eax
c001cc0b:	e8 30 e8 ff ff       	call   c001b440 <Device::Device(char const*)>
c001cc10:	83 c4 10             	add    esp,0x10
c001cc13:	ba 78 22 03 c0       	mov    edx,0xc0032278
c001cc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1c:	89 10                	mov    DWORD PTR [eax],edx
c001cc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc22:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cc2c:	90                   	nop
c001cc2d:	83 c4 0c             	add    esp,0xc
c001cc30:	c3                   	ret    
c001cc31:	90                   	nop
c001cc32:	66 90                	xchg   ax,ax

c001cc34 <Serial::~Serial()>:
c001cc34:	83 ec 0c             	sub    esp,0xc
c001cc37:	ba 78 22 03 c0       	mov    edx,0xc0032278
c001cc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc40:	89 10                	mov    DWORD PTR [eax],edx
c001cc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc46:	83 ec 0c             	sub    esp,0xc
c001cc49:	50                   	push   eax
c001cc4a:	e8 91 e5 ff ff       	call   c001b1e0 <Device::~Device()>
c001cc4f:	83 c4 10             	add    esp,0x10
c001cc52:	90                   	nop
c001cc53:	83 c4 0c             	add    esp,0xc
c001cc56:	c3                   	ret    
c001cc57:	90                   	nop

c001cc58 <Serial::~Serial()>:
c001cc58:	83 ec 0c             	sub    esp,0xc
c001cc5b:	83 ec 0c             	sub    esp,0xc
c001cc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc62:	e8 cd ff ff ff       	call   c001cc34 <Serial::~Serial()>
c001cc67:	83 c4 10             	add    esp,0x10
c001cc6a:	83 ec 08             	sub    esp,0x8
c001cc6d:	68 58 01 00 00       	push   0x158
c001cc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc76:	e8 b5 c4 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001cc7b:	83 c4 10             	add    esp,0x10
c001cc7e:	83 c4 0c             	add    esp,0xc
c001cc81:	c3                   	ret    
c001cc82:	66 90                	xchg   ax,ax

c001cc84 <Timer::Timer(char const*)>:
c001cc84:	83 ec 0c             	sub    esp,0xc
c001cc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8b:	83 ec 08             	sub    esp,0x8
c001cc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc92:	50                   	push   eax
c001cc93:	e8 a8 e7 ff ff       	call   c001b440 <Device::Device(char const*)>
c001cc98:	83 c4 10             	add    esp,0x10
c001cc9b:	ba bc 22 03 c0       	mov    edx,0xc00322bc
c001cca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca4:	89 10                	mov    DWORD PTR [eax],edx
c001cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccaa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001ccb4:	90                   	nop
c001ccb5:	83 c4 0c             	add    esp,0xc
c001ccb8:	c3                   	ret    
c001ccb9:	90                   	nop
c001ccba:	66 90                	xchg   ax,ax

c001ccbc <Timer::~Timer()>:
c001ccbc:	83 ec 0c             	sub    esp,0xc
c001ccbf:	ba bc 22 03 c0       	mov    edx,0xc00322bc
c001ccc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc8:	89 10                	mov    DWORD PTR [eax],edx
c001ccca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccce:	83 ec 0c             	sub    esp,0xc
c001ccd1:	50                   	push   eax
c001ccd2:	e8 09 e5 ff ff       	call   c001b1e0 <Device::~Device()>
c001ccd7:	83 c4 10             	add    esp,0x10
c001ccda:	90                   	nop
c001ccdb:	83 c4 0c             	add    esp,0xc
c001ccde:	c3                   	ret    
c001ccdf:	90                   	nop

c001cce0 <Timer::~Timer()>:
c001cce0:	83 ec 0c             	sub    esp,0xc
c001cce3:	83 ec 0c             	sub    esp,0xc
c001cce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccea:	e8 cd ff ff ff       	call   c001ccbc <Timer::~Timer()>
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	83 ec 08             	sub    esp,0x8
c001ccf5:	68 5c 01 00 00       	push   0x15c
c001ccfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccfe:	e8 2d c4 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001cd03:	83 c4 10             	add    esp,0x10
c001cd06:	83 c4 0c             	add    esp,0xc
c001cd09:	c3                   	ret    

c001cd0a <Timer::read()>:
c001cd0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd14:	c3                   	ret    

c001cd15 <setupTimer(int)>:
c001cd15:	53                   	push   ebx
c001cd16:	83 ec 14             	sub    esp,0x14
c001cd19:	68 5c 01 00 00       	push   0x15c
c001cd1e:	e8 9b 96 ff ff       	call   c00163be <malloc>
c001cd23:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd26:	89 c3                	mov    ebx,eax
c001cd28:	e8 e3 11 01 00       	call   c002df10 <PIT::PIT()>
c001cd2d:	58                   	pop    eax
c001cd2e:	5a                   	pop    edx
c001cd2f:	53                   	push   ebx
c001cd30:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cd36:	e8 a3 e5 ff ff       	call   c001b2de <Device::addChild(Device*)>
c001cd3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd3d:	6a 00                	push   0x0
c001cd3f:	6a 00                	push   0x0
c001cd41:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cd45:	53                   	push   ebx
c001cd46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd49:	89 d8                	mov    eax,ebx
c001cd4b:	83 c4 28             	add    esp,0x28
c001cd4e:	5b                   	pop    ebx
c001cd4f:	c3                   	ret    

c001cd50 <timerHandler(unsigned int)>:
c001cd50:	57                   	push   edi
c001cd51:	56                   	push   esi
c001cd52:	53                   	push   ebx
c001cd53:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cd57:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cd5d:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cd64:	0f 84 46 01 00 00    	je     c001ceb0 <timerHandler(unsigned int)+0x160>
c001cd6a:	fa                   	cli    
c001cd6b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cd7a:	68 e0 01 04 c0       	push   0xc00401e0
c001cd7f:	e8 dc 1e 01 00       	call   c002ec60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cd84:	83 c4 10             	add    esp,0x10
c001cd87:	84 c0                	test   al,al
c001cd89:	0f 85 a1 00 00 00    	jne    c001ce30 <timerHandler(unsigned int)+0xe0>
c001cd8f:	83 ec 0c             	sub    esp,0xc
c001cd92:	68 e0 01 04 c0       	push   0xc00401e0
c001cd97:	e8 e0 1e 01 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd9c:	83 c4 10             	add    esp,0x10
c001cd9f:	89 c6                	mov    esi,eax
c001cda1:	8d 76 00             	lea    esi,[esi+0x0]
c001cda4:	83 ec 0c             	sub    esp,0xc
c001cda7:	68 e0 01 04 c0       	push   0xc00401e0
c001cdac:	e8 cb 1e 01 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cdb1:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cdb8:	89 c3                	mov    ebx,eax
c001cdba:	e8 c5 1e 01 00       	call   c002ec84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cdbf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cdc2:	83 c4 10             	add    esp,0x10
c001cdc5:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001cdcb:	77 23                	ja     c001cdf0 <timerHandler(unsigned int)+0xa0>
c001cdcd:	83 ec 0c             	sub    esp,0xc
c001cdd0:	53                   	push   ebx
c001cdd1:	e8 ae 87 00 00       	call   c0025584 <unblockTask(ThreadControlBlock*)>
c001cdd6:	83 c4 10             	add    esp,0x10
c001cdd9:	39 de                	cmp    esi,ebx
c001cddb:	75 27                	jne    c001ce04 <timerHandler(unsigned int)+0xb4>
c001cddd:	83 ec 0c             	sub    esp,0xc
c001cde0:	68 e0 01 04 c0       	push   0xc00401e0
c001cde5:	e8 92 1e 01 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cdea:	89 c6                	mov    esi,eax
c001cdec:	eb 12                	jmp    c001ce00 <timerHandler(unsigned int)+0xb0>
c001cdee:	66 90                	xchg   ax,ax
c001cdf0:	50                   	push   eax
c001cdf1:	50                   	push   eax
c001cdf2:	53                   	push   ebx
c001cdf3:	68 e0 01 04 c0       	push   0xc00401e0
c001cdf8:	e8 43 1f 01 00       	call   c002ed40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cdfd:	8d 76 00             	lea    esi,[esi+0x0]
c001ce00:	83 c4 10             	add    esp,0x10
c001ce03:	90                   	nop
c001ce04:	83 ec 0c             	sub    esp,0xc
c001ce07:	68 e0 01 04 c0       	push   0xc00401e0
c001ce0c:	e8 4f 1e 01 00       	call   c002ec60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ce11:	83 c4 10             	add    esp,0x10
c001ce14:	84 c0                	test   al,al
c001ce16:	75 18                	jne    c001ce30 <timerHandler(unsigned int)+0xe0>
c001ce18:	83 ec 0c             	sub    esp,0xc
c001ce1b:	68 e0 01 04 c0       	push   0xc00401e0
c001ce20:	e8 57 1e 01 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce25:	83 c4 10             	add    esp,0x10
c001ce28:	39 f0                	cmp    eax,esi
c001ce2a:	0f 85 74 ff ff ff    	jne    c001cda4 <timerHandler(unsigned int)+0x54>
c001ce30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce35:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001ce39:	74 3d                	je     c001ce78 <timerHandler(unsigned int)+0x128>
c001ce3b:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001ce42:	74 34                	je     c001ce78 <timerHandler(unsigned int)+0x128>
c001ce44:	fa                   	cli    
c001ce45:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ce4b:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001ce51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce56:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001ce59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce5e:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001ce61:	77 05                	ja     c001ce68 <timerHandler(unsigned int)+0x118>
c001ce63:	e8 24 84 00 00       	call   c002528c <schedule()>
c001ce68:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce6d:	48                   	dec    eax
c001ce6e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce73:	75 03                	jne    c001ce78 <timerHandler(unsigned int)+0x128>
c001ce75:	fb                   	sti    
c001ce76:	66 90                	xchg   ax,ax
c001ce78:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001ce7d:	48                   	dec    eax
c001ce7e:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001ce83:	75 1b                	jne    c001cea0 <timerHandler(unsigned int)+0x150>
c001ce85:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001ce8c:	74 12                	je     c001cea0 <timerHandler(unsigned int)+0x150>
c001ce8e:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001ce98:	e8 ef 83 00 00       	call   c002528c <schedule()>
c001ce9d:	8d 76 00             	lea    esi,[esi+0x0]
c001cea0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cea5:	48                   	dec    eax
c001cea6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ceab:	75 03                	jne    c001ceb0 <timerHandler(unsigned int)+0x160>
c001cead:	fb                   	sti    
c001ceae:	66 90                	xchg   ax,ax
c001ceb0:	5b                   	pop    ebx
c001ceb1:	5e                   	pop    esi
c001ceb2:	5f                   	pop    edi
c001ceb3:	c3                   	ret    

c001ceb4 <VCache::VCache(PhysicalDisk*)>:
c001ceb4:	53                   	push   ebx
c001ceb5:	83 ec 18             	sub    esp,0x18
c001ceb8:	ba ec 22 03 c0       	mov    edx,0xc00322ec
c001cebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec1:	89 10                	mov    DWORD PTR [eax],edx
c001cec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001cece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ced2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001ced9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cedd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001cee4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ceeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceef:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001cef6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cefd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf01:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cf08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf0c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cf10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf14:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001cf1b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001cf22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf26:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cf2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf2e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001cf32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf36:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cf3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf3e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cf45:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001cf4d:	83 ec 0c             	sub    esp,0xc
c001cf50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf54:	e8 65 94 ff ff       	call   c00163be <malloc>
c001cf59:	83 c4 10             	add    esp,0x10
c001cf5c:	89 c3                	mov    ebx,eax
c001cf5e:	83 ec 0c             	sub    esp,0xc
c001cf61:	53                   	push   ebx
c001cf62:	e8 f5 32 00 00       	call   c002025c <Mutex::Mutex()>
c001cf67:	83 c4 10             	add    esp,0x10
c001cf6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf6e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001cf71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf79:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf80:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001cf87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf8b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf95:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf9c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001cfa2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cfa8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cfac:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001cfaf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001cfb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cfba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfbe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cfc4:	05 00 02 00 00       	add    eax,0x200
c001cfc9:	c1 e0 03             	shl    eax,0x3
c001cfcc:	83 ec 0c             	sub    esp,0xc
c001cfcf:	50                   	push   eax
c001cfd0:	e8 e9 93 ff ff       	call   c00163be <malloc>
c001cfd5:	83 c4 10             	add    esp,0x10
c001cfd8:	89 c2                	mov    edx,eax
c001cfda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfde:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001cfe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfe5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cfec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cff0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cff4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cff8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cffe:	89 d0                	mov    eax,edx
c001d000:	c1 e0 02             	shl    eax,0x2
c001d003:	01 d0                	add    eax,edx
c001d005:	c1 e0 04             	shl    eax,0x4
c001d008:	83 ec 0c             	sub    esp,0xc
c001d00b:	50                   	push   eax
c001d00c:	e8 ad 93 ff ff       	call   c00163be <malloc>
c001d011:	83 c4 10             	add    esp,0x10
c001d014:	89 c2                	mov    edx,eax
c001d016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d01a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d01d:	90                   	nop
c001d01e:	83 c4 18             	add    esp,0x18
c001d021:	5b                   	pop    ebx
c001d022:	c3                   	ret    
c001d023:	90                   	nop

c001d024 <VCache::invalidateReadBuffer()>:
c001d024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d028:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d02e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d032:	c3                   	ret    
c001d033:	90                   	nop

c001d034 <VCache::writeWriteBuffer()>:
c001d034:	53                   	push   ebx
c001d035:	83 ec 08             	sub    esp,0x8
c001d038:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d03c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d040:	74 1e                	je     c001d060 <VCache::writeWriteBuffer()+0x2c>
c001d042:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d045:	83 ec 0c             	sub    esp,0xc
c001d048:	8b 10                	mov    edx,DWORD PTR [eax]
c001d04a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d04d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d050:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d053:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d056:	50                   	push   eax
c001d057:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d05a:	83 c4 20             	add    esp,0x20
c001d05d:	8d 76 00             	lea    esi,[esi+0x0]
c001d060:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d067:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d06e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d072:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d079:	83 c4 08             	add    esp,0x8
c001d07c:	5b                   	pop    ebx
c001d07d:	c3                   	ret    
c001d07e:	66 90                	xchg   ax,ax

c001d080 <VCache::~VCache()>:
c001d080:	83 ec 0c             	sub    esp,0xc
c001d083:	ba ec 22 03 c0       	mov    edx,0xc00322ec
c001d088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d08c:	89 10                	mov    DWORD PTR [eax],edx
c001d08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d092:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d095:	0f b6 c0             	movzx  eax,al
c001d098:	85 c0                	test   eax,eax
c001d09a:	74 10                	je     c001d0ac <VCache::~VCache()+0x2c>
c001d09c:	83 ec 0c             	sub    esp,0xc
c001d09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0a3:	e8 8c ff ff ff       	call   c001d034 <VCache::writeWriteBuffer()>
c001d0a8:	83 c4 10             	add    esp,0x10
c001d0ab:	90                   	nop
c001d0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d0b3:	83 ec 0c             	sub    esp,0xc
c001d0b6:	50                   	push   eax
c001d0b7:	e8 22 93 ff ff       	call   c00163de <free>
c001d0bc:	83 c4 10             	add    esp,0x10
c001d0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d0c6:	83 ec 0c             	sub    esp,0xc
c001d0c9:	50                   	push   eax
c001d0ca:	e8 0f 93 ff ff       	call   c00163de <free>
c001d0cf:	83 c4 10             	add    esp,0x10
c001d0d2:	90                   	nop
c001d0d3:	83 c4 0c             	add    esp,0xc
c001d0d6:	c3                   	ret    
c001d0d7:	90                   	nop

c001d0d8 <VCache::~VCache()>:
c001d0d8:	83 ec 0c             	sub    esp,0xc
c001d0db:	83 ec 0c             	sub    esp,0xc
c001d0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e2:	e8 99 ff ff ff       	call   c001d080 <VCache::~VCache()>
c001d0e7:	83 c4 10             	add    esp,0x10
c001d0ea:	83 ec 08             	sub    esp,0x8
c001d0ed:	6a 44                	push   0x44
c001d0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0f3:	e8 38 c0 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001d0f8:	83 c4 10             	add    esp,0x10
c001d0fb:	83 c4 0c             	add    esp,0xc
c001d0fe:	c3                   	ret    
c001d0ff:	90                   	nop

c001d100 <VCache::write(unsigned long long, int, void*)>:
c001d100:	55                   	push   ebp
c001d101:	57                   	push   edi
c001d102:	56                   	push   esi
c001d103:	53                   	push   ebx
c001d104:	83 ec 1c             	sub    esp,0x1c
c001d107:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d10b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d10f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d113:	e8 dc 7e 00 00       	call   c0024ff4 <KeDisablePreemption()>
c001d118:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d11c:	74 0e                	je     c001d12c <VCache::write(unsigned long long, int, void*)+0x2c>
c001d11e:	83 ec 0c             	sub    esp,0xc
c001d121:	53                   	push   ebx
c001d122:	e8 fd fe ff ff       	call   c001d024 <VCache::invalidateReadBuffer()>
c001d127:	83 c4 10             	add    esp,0x10
c001d12a:	66 90                	xchg   ax,ax
c001d12c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d130:	74 5e                	je     c001d190 <VCache::write(unsigned long long, int, void*)+0x90>
c001d132:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d135:	89 e8                	mov    eax,ebp
c001d137:	99                   	cdq    
c001d138:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d13b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d13e:	89 c1                	mov    ecx,eax
c001d140:	89 d0                	mov    eax,edx
c001d142:	31 f1                	xor    ecx,esi
c001d144:	31 f8                	xor    eax,edi
c001d146:	09 c1                	or     ecx,eax
c001d148:	75 3a                	jne    c001d184 <VCache::write(unsigned long long, int, void*)+0x84>
c001d14a:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d14f:	75 33                	jne    c001d184 <VCache::write(unsigned long long, int, void*)+0x84>
c001d151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d154:	89 ef                	mov    edi,ebp
c001d156:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d15c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d160:	0f af f9             	imul   edi,ecx
c001d163:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d166:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d168:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d16b:	40                   	inc    eax
c001d16c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d16f:	83 f8 50             	cmp    eax,0x50
c001d172:	75 70                	jne    c001d1e4 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d174:	83 ec 0c             	sub    esp,0xc
c001d177:	53                   	push   ebx
c001d178:	e8 b7 fe ff ff       	call   c001d034 <VCache::writeWriteBuffer()>
c001d17d:	83 c4 10             	add    esp,0x10
c001d180:	eb 62                	jmp    c001d1e4 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d182:	66 90                	xchg   ax,ax
c001d184:	83 ec 0c             	sub    esp,0xc
c001d187:	53                   	push   ebx
c001d188:	e8 a7 fe ff ff       	call   c001d034 <VCache::writeWriteBuffer()>
c001d18d:	83 c4 10             	add    esp,0x10
c001d190:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d193:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d198:	7f 22                	jg     c001d1bc <VCache::write(unsigned long long, int, void*)+0xbc>
c001d19a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d19d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d1a0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d1a4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d1a8:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d1ab:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d1ae:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d1b4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d1b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d1ba:	eb 28                	jmp    c001d1e4 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d1bc:	83 ec 0c             	sub    esp,0xc
c001d1bf:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d1c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d1c9:	57                   	push   edi
c001d1ca:	56                   	push   esi
c001d1cb:	50                   	push   eax
c001d1cc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d1cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d1d3:	83 c4 20             	add    esp,0x20
c001d1d6:	e8 41 7e 00 00       	call   c002501c <KeRestorePreemption()>
c001d1db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1df:	eb 0b                	jmp    c001d1ec <VCache::write(unsigned long long, int, void*)+0xec>
c001d1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1e4:	e8 33 7e 00 00       	call   c002501c <KeRestorePreemption()>
c001d1e9:	31 c0                	xor    eax,eax
c001d1eb:	90                   	nop
c001d1ec:	83 c4 1c             	add    esp,0x1c
c001d1ef:	5b                   	pop    ebx
c001d1f0:	5e                   	pop    esi
c001d1f1:	5f                   	pop    edi
c001d1f2:	5d                   	pop    ebp
c001d1f3:	c3                   	ret    

c001d1f4 <VCache::read(unsigned long long, int, void*)>:
c001d1f4:	55                   	push   ebp
c001d1f5:	57                   	push   edi
c001d1f6:	56                   	push   esi
c001d1f7:	53                   	push   ebx
c001d1f8:	83 ec 1c             	sub    esp,0x1c
c001d1fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d1ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d203:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d207:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d20b:	e8 e4 7d 00 00       	call   c0024ff4 <KeDisablePreemption()>
c001d210:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d214:	74 0e                	je     c001d224 <VCache::read(unsigned long long, int, void*)+0x30>
c001d216:	83 ec 0c             	sub    esp,0xc
c001d219:	53                   	push   ebx
c001d21a:	e8 15 fe ff ff       	call   c001d034 <VCache::writeWriteBuffer()>
c001d21f:	83 c4 10             	add    esp,0x10
c001d222:	66 90                	xchg   ax,ax
c001d224:	83 fd 01             	cmp    ebp,0x1
c001d227:	0f 85 97 00 00 00    	jne    c001d2c4 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d22d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d230:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d234:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d23b:	0f 85 83 00 00 00    	jne    c001d2c4 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d241:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d244:	89 e9                	mov    ecx,ebp
c001d246:	f7 d9                	neg    ecx
c001d248:	89 c8                	mov    eax,ecx
c001d24a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d24e:	c1 f8 1f             	sar    eax,0x1f
c001d251:	21 f1                	and    ecx,esi
c001d253:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d257:	89 c8                	mov    eax,ecx
c001d259:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d25d:	21 f9                	and    ecx,edi
c001d25f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d263:	89 ca                	mov    edx,ecx
c001d265:	74 31                	je     c001d298 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d267:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d26a:	75 2c                	jne    c001d298 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d26c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d26f:	75 27                	jne    c001d298 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d271:	8d 76 00             	lea    esi,[esi+0x0]
c001d274:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d277:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d27b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d281:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d284:	48                   	dec    eax
c001d285:	21 c6                	and    esi,eax
c001d287:	0f af f1             	imul   esi,ecx
c001d28a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d28d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d28f:	e8 88 7d 00 00       	call   c002501c <KeRestorePreemption()>
c001d294:	31 c0                	xor    eax,eax
c001d296:	eb 58                	jmp    c001d2f0 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d298:	83 ec 0c             	sub    esp,0xc
c001d29b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d29f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2a3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d2a6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d2a9:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d2ab:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d2ae:	55                   	push   ebp
c001d2af:	52                   	push   edx
c001d2b0:	50                   	push   eax
c001d2b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2b5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d2b8:	83 c4 20             	add    esp,0x20
c001d2bb:	85 c0                	test   eax,eax
c001d2bd:	75 31                	jne    c001d2f0 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d2bf:	eb b3                	jmp    c001d274 <VCache::read(unsigned long long, int, void*)+0x80>
c001d2c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d2c4:	83 ec 0c             	sub    esp,0xc
c001d2c7:	53                   	push   ebx
c001d2c8:	e8 57 fd ff ff       	call   c001d024 <VCache::invalidateReadBuffer()>
c001d2cd:	5a                   	pop    edx
c001d2ce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d2d1:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2d7:	55                   	push   ebp
c001d2d8:	57                   	push   edi
c001d2d9:	56                   	push   esi
c001d2da:	50                   	push   eax
c001d2db:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d2de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2e2:	83 c4 20             	add    esp,0x20
c001d2e5:	e8 32 7d 00 00       	call   c002501c <KeRestorePreemption()>
c001d2ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2ee:	66 90                	xchg   ax,ax
c001d2f0:	83 c4 1c             	add    esp,0x1c
c001d2f3:	5b                   	pop    ebx
c001d2f4:	5e                   	pop    esi
c001d2f5:	5f                   	pop    edi
c001d2f6:	5d                   	pop    ebp
c001d2f7:	c3                   	ret    

c001d2f8 <Video::putrect(int, int, int, int, unsigned int)>:
c001d2f8:	55                   	push   ebp
c001d2f9:	57                   	push   edi
c001d2fa:	56                   	push   esi
c001d2fb:	53                   	push   ebx
c001d2fc:	83 ec 1c             	sub    esp,0x1c
c001d2ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d303:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d307:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d30b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d30f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d313:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d317:	01 df                	add    edi,ebx
c001d319:	39 fb                	cmp    ebx,edi
c001d31b:	7d 1f                	jge    c001d33c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d31d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d321:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d325:	7d 12                	jge    c001d339 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d327:	8b 16                	mov    edx,DWORD PTR [esi]
c001d329:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d32d:	53                   	push   ebx
c001d32e:	55                   	push   ebp
c001d32f:	45                   	inc    ebp
c001d330:	56                   	push   esi
c001d331:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d334:	83 c4 10             	add    esp,0x10
c001d337:	eb e8                	jmp    c001d321 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d339:	43                   	inc    ebx
c001d33a:	eb dd                	jmp    c001d319 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d33c:	83 c4 1c             	add    esp,0x1c
c001d33f:	5b                   	pop    ebx
c001d340:	5e                   	pop    esi
c001d341:	5f                   	pop    edi
c001d342:	5d                   	pop    ebp
c001d343:	c3                   	ret    

c001d344 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d344:	55                   	push   ebp
c001d345:	57                   	push   edi
c001d346:	31 ff                	xor    edi,edi
c001d348:	56                   	push   esi
c001d349:	53                   	push   ebx
c001d34a:	83 ec 1c             	sub    esp,0x1c
c001d34d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d351:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d355:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d35c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d361:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d365:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d369:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d36d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d370:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d374:	01 f9                	add    ecx,edi
c001d376:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d37a:	7d 2f                	jge    c001d3ab <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d37c:	31 f6                	xor    esi,esi
c001d37e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d382:	01 f2                	add    edx,esi
c001d384:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d388:	7d 1a                	jge    c001d3a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d38a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d38d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d390:	46                   	inc    esi
c001d391:	51                   	push   ecx
c001d392:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d396:	52                   	push   edx
c001d397:	55                   	push   ebp
c001d398:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d39b:	83 c4 10             	add    esp,0x10
c001d39e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d3a2:	eb da                	jmp    c001d37e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d3a4:	47                   	inc    edi
c001d3a5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d3a9:	eb c5                	jmp    c001d370 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d3ab:	83 c4 1c             	add    esp,0x1c
c001d3ae:	5b                   	pop    ebx
c001d3af:	5e                   	pop    esi
c001d3b0:	5f                   	pop    edi
c001d3b1:	5d                   	pop    ebp
c001d3b2:	c3                   	ret    
c001d3b3:	90                   	nop

c001d3b4 <Video::blit(unsigned int*, int, int, int, int)>:
c001d3b4:	55                   	push   ebp
c001d3b5:	57                   	push   edi
c001d3b6:	56                   	push   esi
c001d3b7:	53                   	push   ebx
c001d3b8:	83 ec 1c             	sub    esp,0x1c
c001d3bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d3bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d3c3:	85 c0                	test   eax,eax
c001d3c5:	79 02                	jns    c001d3c9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d3c7:	31 c0                	xor    eax,eax
c001d3c9:	c1 e0 02             	shl    eax,0x2
c001d3cc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d3d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d3d8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d3dc:	39 d8                	cmp    eax,ebx
c001d3de:	7e 49                	jle    c001d429 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d3e0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d3e6:	7c 41                	jl     c001d429 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d3e8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d3ec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d3f0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d3f4:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d3f8:	39 f9                	cmp    ecx,edi
c001d3fa:	7e 22                	jle    c001d41e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d3fc:	83 c5 04             	add    ebp,0x4
c001d3ff:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d405:	7c 14                	jl     c001d41b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d407:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d409:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d40c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d410:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d414:	56                   	push   esi
c001d415:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d418:	83 c4 10             	add    esp,0x10
c001d41b:	47                   	inc    edi
c001d41c:	eb d2                	jmp    c001d3f0 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d41e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d422:	43                   	inc    ebx
c001d423:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d427:	eb ab                	jmp    c001d3d4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d429:	83 c4 1c             	add    esp,0x1c
c001d42c:	5b                   	pop    ebx
c001d42d:	5e                   	pop    esi
c001d42e:	5f                   	pop    edi
c001d42f:	5d                   	pop    ebp
c001d430:	c3                   	ret    
c001d431:	90                   	nop

c001d432 <Video::clearScreen(unsigned int)>:
c001d432:	57                   	push   edi
c001d433:	56                   	push   esi
c001d434:	53                   	push   ebx
c001d435:	31 db                	xor    ebx,ebx
c001d437:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d43b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d441:	7e 1f                	jle    c001d462 <Video::clearScreen(unsigned int)+0x30>
c001d443:	31 ff                	xor    edi,edi
c001d445:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d44b:	7e 12                	jle    c001d45f <Video::clearScreen(unsigned int)+0x2d>
c001d44d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d453:	53                   	push   ebx
c001d454:	57                   	push   edi
c001d455:	47                   	inc    edi
c001d456:	56                   	push   esi
c001d457:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	eb e6                	jmp    c001d445 <Video::clearScreen(unsigned int)+0x13>
c001d45f:	43                   	inc    ebx
c001d460:	eb d9                	jmp    c001d43b <Video::clearScreen(unsigned int)+0x9>
c001d462:	5b                   	pop    ebx
c001d463:	5e                   	pop    esi
c001d464:	5f                   	pop    edi
c001d465:	c3                   	ret    

c001d466 <Video::putpixel(int, int, unsigned int)>:
c001d466:	c7 44 24 04 f4 22 03 c0 	mov    DWORD PTR [esp+0x4],0xc00322f4
c001d46e:	e9 03 2e 00 00       	jmp    c0020276 <KePanic(char const*)>
c001d473:	90                   	nop

c001d474 <Video::readPixelApprox(int, int)>:
c001d474:	83 ec 18             	sub    esp,0x18
c001d477:	68 15 23 03 c0       	push   0xc0032315
c001d47c:	e8 f5 2d 00 00       	call   c0020276 <KePanic(char const*)>
c001d481:	31 c0                	xor    eax,eax
c001d483:	83 c4 1c             	add    esp,0x1c
c001d486:	c3                   	ret    
c001d487:	90                   	nop

c001d488 <Video::Video(char const*)>:
c001d488:	83 ec 0c             	sub    esp,0xc
c001d48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d48f:	83 ec 08             	sub    esp,0x8
c001d492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d496:	50                   	push   eax
c001d497:	e8 a4 df ff ff       	call   c001b440 <Device::Device(char const*)>
c001d49c:	83 c4 10             	add    esp,0x10
c001d49f:	ba b8 23 03 c0       	mov    edx,0xc00323b8
c001d4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a8:	89 10                	mov    DWORD PTR [eax],edx
c001d4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ae:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d4b8:	90                   	nop
c001d4b9:	83 c4 0c             	add    esp,0xc
c001d4bc:	c3                   	ret    
c001d4bd:	90                   	nop

c001d4be <Video::~Video()>:
c001d4be:	83 ec 0c             	sub    esp,0xc
c001d4c1:	ba b8 23 03 c0       	mov    edx,0xc00323b8
c001d4c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ca:	89 10                	mov    DWORD PTR [eax],edx
c001d4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d0:	83 ec 0c             	sub    esp,0xc
c001d4d3:	50                   	push   eax
c001d4d4:	e8 07 dd ff ff       	call   c001b1e0 <Device::~Device()>
c001d4d9:	83 c4 10             	add    esp,0x10
c001d4dc:	90                   	nop
c001d4dd:	83 c4 0c             	add    esp,0xc
c001d4e0:	c3                   	ret    
c001d4e1:	90                   	nop

c001d4e2 <Video::~Video()>:
c001d4e2:	83 ec 0c             	sub    esp,0xc
c001d4e5:	83 ec 0c             	sub    esp,0xc
c001d4e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ec:	e8 cd ff ff ff       	call   c001d4be <Video::~Video()>
c001d4f1:	83 c4 10             	add    esp,0x10
c001d4f4:	83 ec 08             	sub    esp,0x8
c001d4f7:	68 64 01 00 00       	push   0x164
c001d4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d500:	e8 2b bc ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c001d505:	83 c4 10             	add    esp,0x10
c001d508:	83 c4 0c             	add    esp,0xc
c001d50b:	c3                   	ret    

c001d50c <Video::isMonochrome()>:
c001d50c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d510:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d516:	c3                   	ret    
c001d517:	90                   	nop

c001d518 <Video::getWidth()>:
c001d518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d51c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d522:	c3                   	ret    
c001d523:	90                   	nop

c001d524 <Video::getHeight()>:
c001d524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d528:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d52e:	c3                   	ret    
c001d52f:	90                   	nop

c001d530 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d530:	55                   	push   ebp
c001d531:	57                   	push   edi
c001d532:	56                   	push   esi
c001d533:	53                   	push   ebx
c001d534:	83 ec 2c             	sub    esp,0x2c
c001d537:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d53b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d53f:	83 f8 01             	cmp    eax,0x1
c001d542:	19 c9                	sbb    ecx,ecx
c001d544:	31 db                	xor    ebx,ebx
c001d546:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d54a:	89 cd                	mov    ebp,ecx
c001d54c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d554:	f7 d5                	not    ebp
c001d556:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d55c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d560:	01 d8                	add    eax,ebx
c001d562:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d566:	56                   	push   esi
c001d567:	e8 b8 ff ff ff       	call   c001d524 <Video::getHeight()>
c001d56c:	59                   	pop    ecx
c001d56d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d571:	7e 70                	jle    c001d5e3 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d573:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d577:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d57b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d57e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d582:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d586:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d58d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d591:	89 f8                	mov    eax,edi
c001d593:	83 c0 20             	add    eax,0x20
c001d596:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d59a:	56                   	push   esi
c001d59b:	e8 78 ff ff ff       	call   c001d518 <Video::getWidth()>
c001d5a0:	5a                   	pop    edx
c001d5a1:	39 c7                	cmp    edi,eax
c001d5a3:	7d 34                	jge    c001d5d9 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d5a5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d5aa:	74 05                	je     c001d5b1 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d5ac:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5ae:	55                   	push   ebp
c001d5af:	eb 0d                	jmp    c001d5be <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d5b1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d5b6:	74 12                	je     c001d5ca <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d5b8:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5c2:	57                   	push   edi
c001d5c3:	56                   	push   esi
c001d5c4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d5c7:	83 c4 10             	add    esp,0x10
c001d5ca:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d5ce:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d5d2:	47                   	inc    edi
c001d5d3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d5d7:	75 c1                	jne    c001d59a <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d5d9:	43                   	inc    ebx
c001d5da:	83 fb 20             	cmp    ebx,0x20
c001d5dd:	0f 85 79 ff ff ff    	jne    c001d55c <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d5e3:	83 c4 2c             	add    esp,0x2c
c001d5e6:	5b                   	pop    ebx
c001d5e7:	5e                   	pop    esi
c001d5e8:	5f                   	pop    edi
c001d5e9:	5d                   	pop    ebp
c001d5ea:	c3                   	ret    
c001d5eb:	90                   	nop

c001d5ec <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d5ec:	55                   	push   ebp
c001d5ed:	57                   	push   edi
c001d5ee:	56                   	push   esi
c001d5ef:	53                   	push   ebx
c001d5f0:	83 ec 48             	sub    esp,0x48
c001d5f3:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d5f7:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d5fb:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d5ff:	c1 e0 08             	shl    eax,0x8
c001d602:	01 d0                	add    eax,edx
c001d604:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d608:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d60c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d610:	c1 e0 08             	shl    eax,0x8
c001d613:	01 d0                	add    eax,edx
c001d615:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d619:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d61d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d622:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d62a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d631:	50                   	push   eax
c001d632:	e8 87 8d ff ff       	call   c00163be <malloc>
c001d637:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d63b:	83 c4 10             	add    esp,0x10
c001d63e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d643:	75 10                	jne    c001d655 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d645:	83 ec 0c             	sub    esp,0xc
c001d648:	68 40 23 03 c0       	push   0xc0032340
c001d64d:	e8 24 2c 00 00       	call   c0020276 <KePanic(char const*)>
c001d652:	83 c4 10             	add    esp,0x10
c001d655:	51                   	push   ecx
c001d656:	51                   	push   ecx
c001d657:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d65b:	50                   	push   eax
c001d65c:	68 50 23 03 c0       	push   0xc0032350
c001d661:	e8 f7 bb ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001d666:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d669:	83 e0 20             	and    eax,0x20
c001d66c:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d670:	85 c0                	test   eax,eax
c001d672:	5e                   	pop    esi
c001d673:	0f 94 c0             	sete   al
c001d676:	5f                   	pop    edi
c001d677:	0f b6 c0             	movzx  eax,al
c001d67a:	be 12 00 00 00       	mov    esi,0x12
c001d67f:	50                   	push   eax
c001d680:	68 5a 23 03 c0       	push   0xc003235a
c001d685:	e8 d3 bb ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001d68a:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d68e:	83 c4 10             	add    esp,0x10
c001d691:	89 d0                	mov    eax,edx
c001d693:	85 d2                	test   edx,edx
c001d695:	74 11                	je     c001d6a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d697:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d69b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d69f:	c1 fe 03             	sar    esi,0x3
c001d6a2:	0f af f1             	imul   esi,ecx
c001d6a5:	83 c6 12             	add    esi,0x12
c001d6a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d6ad:	74 07                	je     c001d6b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d6af:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d6b4:	75 12                	jne    c001d6c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d6b6:	83 ec 0c             	sub    esp,0xc
c001d6b9:	68 68 23 03 c0       	push   0xc0032368
c001d6be:	e8 9a bb ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001d6c3:	e9 a0 02 00 00       	jmp    c001d968 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d6c8:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d6cc:	83 f9 02             	cmp    ecx,0x2
c001d6cf:	74 0e                	je     c001d6df <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001d6d1:	83 f9 0a             	cmp    ecx,0xa
c001d6d4:	0f 84 c8 00 00 00    	je     c001d7a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001d6da:	e9 72 02 00 00       	jmp    c001d951 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001d6df:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d6e4:	75 0e                	jne    c001d6f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d6e6:	84 c0                	test   al,al
c001d6e8:	75 0a                	jne    c001d6f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d6ea:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d6ed:	83 e8 18             	sub    eax,0x18
c001d6f0:	a8 f7                	test   al,0xf7
c001d6f2:	74 0d                	je     c001d701 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001d6f4:	83 ec 0c             	sub    esp,0xc
c001d6f7:	68 7d 23 03 c0       	push   0xc003237d
c001d6fc:	e9 58 02 00 00       	jmp    c001d959 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d701:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001d706:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d70e:	31 c0                	xor    eax,eax
c001d710:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d714:	89 c7                	mov    edi,eax
c001d716:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d71e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001d723:	75 15                	jne    c001d73a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d725:	99                   	cdq    
c001d726:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d72a:	85 d2                	test   edx,edx
c001d72c:	75 0c                	jne    c001d73a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d72e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d732:	29 c7                	sub    edi,eax
c001d734:	4f                   	dec    edi
c001d735:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001d73a:	31 d2                	xor    edx,edx
c001d73c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d740:	75 08                	jne    c001d74a <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001d742:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001d747:	c1 e2 18             	shl    edx,0x18
c001d74a:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001d74f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d753:	c1 e1 10             	shl    ecx,0x10
c001d756:	8d 47 01             	lea    eax,[edi+0x1]
c001d759:	89 cd                	mov    ebp,ecx
c001d75b:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001d760:	c1 e1 08             	shl    ecx,0x8
c001d763:	09 e9                	or     ecx,ebp
c001d765:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d769:	09 e9                	or     ecx,ebp
c001d76b:	09 d1                	or     ecx,edx
c001d76d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d771:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001d774:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d778:	c1 fa 03             	sar    edx,0x3
c001d77b:	01 d6                	add    esi,edx
c001d77d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d781:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d785:	7e 04                	jle    c001d78b <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001d787:	89 c7                	mov    edi,eax
c001d789:	eb 93                	jmp    c001d71e <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001d78b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d78f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d793:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001d797:	0f 8f 77 ff ff ff    	jg     c001d714 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001d79d:	e9 d3 01 00 00       	jmp    c001d975 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d7a2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d7a7:	75 0e                	jne    c001d7b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d7a9:	85 d2                	test   edx,edx
c001d7ab:	75 0a                	jne    c001d7b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d7ad:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d7b0:	83 e8 18             	sub    eax,0x18
c001d7b3:	a8 f7                	test   al,0xf7
c001d7b5:	74 0d                	je     c001d7c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001d7b7:	83 ec 0c             	sub    esp,0xc
c001d7ba:	68 8b 23 03 c0       	push   0xc003238b
c001d7bf:	e9 95 01 00 00       	jmp    c001d959 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d7c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d7cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d7d4:	31 c9                	xor    ecx,ecx
c001d7d6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d7da:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001d7de:	0f 8e 91 01 00 00    	jle    c001d975 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d7e4:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001d7e8:	0f 8d 87 01 00 00    	jge    c001d975 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d7ee:	8d 46 01             	lea    eax,[esi+0x1]
c001d7f1:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d7f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7f9:	83 fd 7f             	cmp    ebp,0x7f
c001d7fc:	89 e8                	mov    eax,ebp
c001d7fe:	0f 8e 9d 00 00 00    	jle    c001d8a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001d804:	83 e0 7f             	and    eax,0x7f
c001d807:	31 d2                	xor    edx,edx
c001d809:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d80d:	40                   	inc    eax
c001d80e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d812:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d816:	75 0a                	jne    c001d822 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001d818:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001d81d:	89 ea                	mov    edx,ebp
c001d81f:	c1 e2 18             	shl    edx,0x18
c001d822:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001d827:	c1 e0 10             	shl    eax,0x10
c001d82a:	89 c7                	mov    edi,eax
c001d82c:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001d831:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d835:	c1 e0 08             	shl    eax,0x8
c001d838:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d83c:	09 f8                	or     eax,edi
c001d83e:	31 f6                	xor    esi,esi
c001d840:	09 c5                	or     ebp,eax
c001d842:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001d847:	09 d5                	or     ebp,edx
c001d849:	85 ff                	test   edi,edi
c001d84b:	75 1d                	jne    c001d86a <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d84d:	89 c8                	mov    eax,ecx
c001d84f:	99                   	cdq    
c001d850:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d854:	85 d2                	test   edx,edx
c001d856:	75 12                	jne    c001d86a <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d858:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d85c:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d860:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d864:	49                   	dec    ecx
c001d865:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d86e:	8d 51 01             	lea    edx,[ecx+0x1]
c001d871:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001d874:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001d878:	8d 46 01             	lea    eax,[esi+0x1]
c001d87b:	7e 06                	jle    c001d883 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001d87d:	89 c6                	mov    esi,eax
c001d87f:	89 d1                	mov    ecx,edx
c001d881:	eb c6                	jmp    c001d849 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001d883:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d887:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d88b:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d88f:	c1 f8 03             	sar    eax,0x3
c001d892:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d896:	89 d1                	mov    ecx,edx
c001d898:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d89c:	e9 35 ff ff ff       	jmp    c001d7d6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001d8a1:	8d 45 01             	lea    eax,[ebp+0x1]
c001d8a4:	31 f6                	xor    esi,esi
c001d8a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d8aa:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001d8af:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d8b3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001d8b8:	75 1d                	jne    c001d8d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d8ba:	89 c8                	mov    eax,ecx
c001d8bc:	99                   	cdq    
c001d8bd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d8c1:	85 d2                	test   edx,edx
c001d8c3:	75 12                	jne    c001d8d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d8c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8c9:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d8cd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d8d1:	49                   	dec    ecx
c001d8d2:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d8d7:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001d8df:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d8e3:	75 10                	jne    c001d8f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001d8e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8e9:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001d8ee:	c1 e7 18             	shl    edi,0x18
c001d8f1:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001d8f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8f9:	8d 51 01             	lea    edx,[ecx+0x1]
c001d8fc:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001d901:	c1 e0 10             	shl    eax,0x10
c001d904:	89 c7                	mov    edi,eax
c001d906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d90a:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001d90f:	c1 e0 08             	shl    eax,0x8
c001d912:	09 f8                	or     eax,edi
c001d914:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d918:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001d91c:	09 f8                	or     eax,edi
c001d91e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001d922:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d926:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001d929:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d92d:	c1 f8 03             	sar    eax,0x3
c001d930:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d934:	8d 46 01             	lea    eax,[esi+0x1]
c001d937:	39 f5                	cmp    ebp,esi
c001d939:	7e 09                	jle    c001d944 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001d93b:	89 c6                	mov    esi,eax
c001d93d:	89 d1                	mov    ecx,edx
c001d93f:	e9 6f ff ff ff       	jmp    c001d8b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001d944:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d948:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d94c:	e9 45 ff ff ff       	jmp    c001d896 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001d951:	52                   	push   edx
c001d952:	52                   	push   edx
c001d953:	51                   	push   ecx
c001d954:	68 9a 23 03 c0       	push   0xc003239a
c001d959:	e8 ff b8 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001d95e:	58                   	pop    eax
c001d95f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d963:	e8 76 8a ff ff       	call   c00163de <free>
c001d968:	83 c4 10             	add    esp,0x10
c001d96b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d973:	eb 14                	jmp    c001d989 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001d975:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001d979:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d97d:	89 18                	mov    DWORD PTR [eax],ebx
c001d97f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001d983:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d987:	89 18                	mov    DWORD PTR [eax],ebx
c001d989:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d98d:	83 c4 3c             	add    esp,0x3c
c001d990:	5b                   	pop    ebx
c001d991:	5e                   	pop    esi
c001d992:	5f                   	pop    edi
c001d993:	5d                   	pop    ebp
c001d994:	c3                   	ret    
c001d995:	90                   	nop

c001d996 <Video::putTGA(int, int, unsigned char*, int)>:
c001d996:	55                   	push   ebp
c001d997:	57                   	push   edi
c001d998:	56                   	push   esi
c001d999:	53                   	push   ebx
c001d99a:	83 ec 28             	sub    esp,0x28
c001d99d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d9a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d9a5:	50                   	push   eax
c001d9a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d9aa:	50                   	push   eax
c001d9ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d9af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d9b3:	57                   	push   edi
c001d9b4:	e8 33 fc ff ff       	call   c001d5ec <Video::tgaParse(unsigned char*, int, int*, int*)>
c001d9b9:	83 c4 20             	add    esp,0x20
c001d9bc:	85 c0                	test   eax,eax
c001d9be:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d9c2:	74 3a                	je     c001d9fe <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d9c4:	89 c6                	mov    esi,eax
c001d9c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d9ca:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001d9ce:	39 d8                	cmp    eax,ebx
c001d9d0:	7e 2c                	jle    c001d9fe <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d9d2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d9d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d9da:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d9de:	39 e8                	cmp    eax,ebp
c001d9e0:	7e 19                	jle    c001d9fb <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001d9e2:	83 c6 04             	add    esi,0x4
c001d9e5:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001d9e8:	85 c0                	test   eax,eax
c001d9ea:	79 0c                	jns    c001d9f8 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001d9ec:	8b 17                	mov    edx,DWORD PTR [edi]
c001d9ee:	50                   	push   eax
c001d9ef:	53                   	push   ebx
c001d9f0:	55                   	push   ebp
c001d9f1:	57                   	push   edi
c001d9f2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d9f5:	83 c4 10             	add    esp,0x10
c001d9f8:	45                   	inc    ebp
c001d9f9:	eb db                	jmp    c001d9d6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001d9fb:	43                   	inc    ebx
c001d9fc:	eb c8                	jmp    c001d9c6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001d9fe:	83 c4 1c             	add    esp,0x1c
c001da01:	5b                   	pop    ebx
c001da02:	5e                   	pop    esi
c001da03:	5f                   	pop    edi
c001da04:	5d                   	pop    ebp
c001da05:	c3                   	ret    
c001da06:	66 90                	xchg   ax,ax

c001da08 <ACPI::close(int, int, void*)>:
c001da08:	83 ec 1c             	sub    esp,0x1c
c001da0b:	83 ec 0c             	sub    esp,0xc
c001da0e:	68 fc 23 03 c0       	push   0xc00323fc
c001da13:	e8 45 b8 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001da18:	83 c4 10             	add    esp,0x10
c001da1b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001da23:	74 1b                	je     c001da40 <ACPI::close(int, int, void*)+0x38>
c001da25:	83 ec 0c             	sub    esp,0xc
c001da28:	68 0b 24 03 c0       	push   0xc003240b
c001da2d:	e8 2b b8 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001da32:	83 c4 10             	add    esp,0x10
c001da35:	b8 00 00 00 00       	mov    eax,0x0
c001da3a:	e9 01 01 00 00       	jmp    c001db40 <ACPI::close(int, int, void*)+0x138>
c001da3f:	90                   	nop
c001da40:	83 ec 0c             	sub    esp,0xc
c001da43:	68 1c 24 03 c0       	push   0xc003241c
c001da48:	e8 10 b8 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001da4d:	83 c4 10             	add    esp,0x10
c001da50:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001da55:	75 45                	jne    c001da9c <ACPI::close(int, int, void*)+0x94>
c001da57:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da5c:	83 ec 08             	sub    esp,0x8
c001da5f:	50                   	push   eax
c001da60:	68 2b 24 03 c0       	push   0xc003242b
c001da65:	e8 f3 b7 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001da6a:	83 c4 10             	add    esp,0x10
c001da6d:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da72:	85 c0                	test   eax,eax
c001da74:	74 0a                	je     c001da80 <ACPI::close(int, int, void*)+0x78>
c001da76:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da7b:	ff d0                	call   eax
c001da7d:	8d 76 00             	lea    esi,[esi+0x0]
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	68 fc 25 03 c0       	push   0xc00325fc
c001da88:	e8 e9 27 00 00       	call   c0020276 <KePanic(char const*)>
c001da8d:	83 c4 10             	add    esp,0x10
c001da90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001da95:	e9 a6 00 00 00       	jmp    c001db40 <ACPI::close(int, int, void*)+0x138>
c001da9a:	66 90                	xchg   ax,ax
c001da9c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001daa1:	0f 85 81 00 00 00    	jne    c001db28 <ACPI::close(int, int, void*)+0x120>
c001daa7:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001daac:	83 ec 08             	sub    esp,0x8
c001daaf:	50                   	push   eax
c001dab0:	68 49 24 03 c0       	push   0xc0032449
c001dab5:	e8 a3 b7 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001daba:	83 c4 10             	add    esp,0x10
c001dabd:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dac2:	85 c0                	test   eax,eax
c001dac4:	74 0a                	je     c001dad0 <ACPI::close(int, int, void*)+0xc8>
c001dac6:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dacb:	ff d0                	call   eax
c001dacd:	8d 76 00             	lea    esi,[esi+0x0]
c001dad0:	83 ec 0c             	sub    esp,0xc
c001dad3:	68 64 24 03 c0       	push   0xc0032464
c001dad8:	e8 80 b7 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001dadd:	83 c4 10             	add    esp,0x10
c001dae0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001dae5:	8d 76 00             	lea    esi,[esi+0x0]
c001dae8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001daed:	83 e0 02             	and    eax,0x2
c001daf0:	74 1e                	je     c001db10 <ACPI::close(int, int, void*)+0x108>
c001daf2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001daf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dafd:	89 c2                	mov    edx,eax
c001daff:	ec                   	in     al,dx
c001db00:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001db04:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001db08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db0c:	eb da                	jmp    c001dae8 <ACPI::close(int, int, void*)+0xe0>
c001db0e:	66 90                	xchg   ax,ax
c001db10:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001db17:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001db1c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001db20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db24:	ee                   	out    dx,al
c001db25:	8d 76 00             	lea    esi,[esi+0x0]
c001db28:	83 ec 0c             	sub    esp,0xc
c001db2b:	68 76 24 03 c0       	push   0xc0032476
c001db30:	e8 28 b7 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001db35:	83 c4 10             	add    esp,0x10
c001db38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db3d:	8d 76 00             	lea    esi,[esi+0x0]
c001db40:	83 c4 1c             	add    esp,0x1c
c001db43:	c3                   	ret    

c001db44 <findRSDP()>:
c001db44:	83 ec 1c             	sub    esp,0x1c
c001db47:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db4c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001db52:	83 e0 04             	and    eax,0x4
c001db55:	0f b6 c0             	movzx  eax,al
c001db58:	85 c0                	test   eax,eax
c001db5a:	75 08                	jne    c001db64 <findRSDP()+0x20>
c001db5c:	b8 00 00 00 00       	mov    eax,0x0
c001db61:	eb 75                	jmp    c001dbd8 <findRSDP()+0x94>
c001db63:	90                   	nop
c001db64:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001db69:	3d ff 07 00 00       	cmp    eax,0x7ff
c001db6e:	7f 1c                	jg     c001db8c <findRSDP()+0x48>
c001db70:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001db7b:	83 e2 fb             	and    edx,0xfffffffb
c001db7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001db84:	b8 00 00 00 00       	mov    eax,0x0
c001db89:	eb 4d                	jmp    c001dbd8 <findRSDP()+0x94>
c001db8b:	90                   	nop
c001db8c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001db94:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001db9c:	77 32                	ja     c001dbd0 <findRSDP()+0x8c>
c001db9e:	83 ec 04             	sub    esp,0x4
c001dba1:	6a 08                	push   0x8
c001dba3:	68 85 24 03 c0       	push   0xc0032485
c001dba8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbac:	e8 cf 27 fe ff       	call   c0000380 <memcmp>
c001dbb1:	83 c4 10             	add    esp,0x10
c001dbb4:	85 c0                	test   eax,eax
c001dbb6:	0f 94 c0             	sete   al
c001dbb9:	0f b6 c0             	movzx  eax,al
c001dbbc:	85 c0                	test   eax,eax
c001dbbe:	74 08                	je     c001dbc8 <findRSDP()+0x84>
c001dbc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbc4:	eb 12                	jmp    c001dbd8 <findRSDP()+0x94>
c001dbc6:	66 90                	xchg   ax,ax
c001dbc8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dbcd:	eb c5                	jmp    c001db94 <findRSDP()+0x50>
c001dbcf:	90                   	nop
c001dbd0:	b8 00 00 00 00       	mov    eax,0x0
c001dbd5:	8d 76 00             	lea    esi,[esi+0x0]
c001dbd8:	83 c4 1c             	add    esp,0x1c
c001dbdb:	c3                   	ret    

c001dbdc <loadACPITables(unsigned char*)>:
c001dbdc:	57                   	push   edi
c001dbdd:	56                   	push   esi
c001dbde:	53                   	push   ebx
c001dbdf:	83 ec 60             	sub    esp,0x60
c001dbe2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dbe7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dbed:	83 e0 04             	and    eax,0x4
c001dbf0:	0f b6 c0             	movzx  eax,al
c001dbf3:	85 c0                	test   eax,eax
c001dbf5:	0f 84 41 02 00 00    	je     c001de3c <loadACPITables(unsigned char*)+0x260>
c001dbfb:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dc00:	0f b6 c0             	movzx  eax,al
c001dc03:	85 c0                	test   eax,eax
c001dc05:	74 79                	je     c001dc80 <loadACPITables(unsigned char*)+0xa4>
c001dc07:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001dc0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dc13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc16:	83 e8 24             	sub    eax,0x24
c001dc19:	c1 e8 03             	shr    eax,0x3
c001dc1c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dc20:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001dc28:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc2c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001dc30:	0f 8d ba 00 00 00    	jge    c001dcf0 <loadACPITables(unsigned char*)+0x114>
c001dc36:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc3a:	83 c0 24             	add    eax,0x24
c001dc3d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001dc41:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc45:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dc49:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc4d:	c1 e0 03             	shl    eax,0x3
c001dc50:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001dc54:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dc58:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc5d:	89 c1                	mov    ecx,eax
c001dc5f:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dc64:	8d 50 01             	lea    edx,[eax+0x1]
c001dc67:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dc6d:	89 ca                	mov    edx,ecx
c001dc6f:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dc76:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dc7b:	eb ab                	jmp    c001dc28 <loadACPITables(unsigned char*)+0x4c>
c001dc7d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc80:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dc88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dc8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc8f:	83 e8 24             	sub    eax,0x24
c001dc92:	c1 e8 02             	shr    eax,0x2
c001dc95:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dc99:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dca1:	8d 76 00             	lea    esi,[esi+0x0]
c001dca4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dca8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dcac:	7d 42                	jge    c001dcf0 <loadACPITables(unsigned char*)+0x114>
c001dcae:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dcb2:	83 c0 24             	add    eax,0x24
c001dcb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dcb9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dcbd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dcc1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dcc5:	c1 e0 02             	shl    eax,0x2
c001dcc8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dccc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcd0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcd2:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dcd7:	8d 50 01             	lea    edx,[eax+0x1]
c001dcda:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dce0:	89 ca                	mov    edx,ecx
c001dce2:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dce9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dcee:	eb b4                	jmp    c001dca4 <loadACPITables(unsigned char*)+0xc8>
c001dcf0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dcf8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dcfd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dd01:	0f 8d 39 01 00 00    	jge    c001de40 <loadACPITables(unsigned char*)+0x264>
c001dd07:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd0b:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dd12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dd1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd22:	25 ff 0f 00 00       	and    eax,0xfff
c001dd27:	89 c6                	mov    esi,eax
c001dd29:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dd2f:	83 ec 0c             	sub    esp,0xc
c001dd32:	6a 01                	push   0x1
c001dd34:	e8 ec a1 ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c001dd39:	83 c4 10             	add    esp,0x10
c001dd3c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dd40:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dd46:	83 ec 0c             	sub    esp,0xc
c001dd49:	6a 01                	push   0x1
c001dd4b:	6a 01                	push   0x1
c001dd4d:	50                   	push   eax
c001dd4e:	52                   	push   edx
c001dd4f:	53                   	push   ebx
c001dd50:	e8 dd aa ff ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dd55:	83 c4 20             	add    esp,0x20
c001dd58:	09 f0                	or     eax,esi
c001dd5a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd5e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd62:	c1 e0 03             	shl    eax,0x3
c001dd65:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dd6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd76:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dd7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dd92:	89 c6                	mov    esi,eax
c001dd94:	89 d7                	mov    edi,edx
c001dd96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd98:	89 c8                	mov    eax,ecx
c001dd9a:	89 fa                	mov    edx,edi
c001dd9c:	89 f3                	mov    ebx,esi
c001dd9e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001dda2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dda6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ddaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ddb1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ddb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddb9:	05 00 10 00 00       	add    eax,0x1000
c001ddbe:	c1 e8 0c             	shr    eax,0xc
c001ddc1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ddc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd1:	25 ff 0f 00 00       	and    eax,0xfff
c001ddd6:	89 c6                	mov    esi,eax
c001ddd8:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ddde:	83 ec 0c             	sub    esp,0xc
c001dde1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dde5:	e8 3b a1 ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c001ddea:	83 c4 10             	add    esp,0x10
c001dded:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ddf1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001ddf7:	83 ec 0c             	sub    esp,0xc
c001ddfa:	6a 01                	push   0x1
c001ddfc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de00:	50                   	push   eax
c001de01:	52                   	push   edx
c001de02:	53                   	push   ebx
c001de03:	e8 2a aa ff ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001de08:	83 c4 20             	add    esp,0x20
c001de0b:	09 f0                	or     eax,esi
c001de0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de15:	83 ec 0c             	sub    esp,0xc
c001de18:	50                   	push   eax
c001de19:	e8 25 a4 ff ff       	call   c0018243 <Virt::freeKernelVirtualPages(unsigned long)>
c001de1e:	83 c4 10             	add    esp,0x10
c001de21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001de29:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001de30:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001de35:	e9 be fe ff ff       	jmp    c001dcf8 <loadACPITables(unsigned char*)+0x11c>
c001de3a:	66 90                	xchg   ax,ax
c001de3c:	90                   	nop
c001de3d:	8d 76 00             	lea    esi,[esi+0x0]
c001de40:	83 c4 60             	add    esp,0x60
c001de43:	5b                   	pop    ebx
c001de44:	5e                   	pop    esi
c001de45:	5f                   	pop    edi
c001de46:	c3                   	ret    
c001de47:	90                   	nop

c001de48 <findRSDT(unsigned char*)>:
c001de48:	57                   	push   edi
c001de49:	56                   	push   esi
c001de4a:	53                   	push   ebx
c001de4b:	83 ec 50             	sub    esp,0x50
c001de4e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de53:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de59:	83 e0 04             	and    eax,0x4
c001de5c:	0f b6 c0             	movzx  eax,al
c001de5f:	85 c0                	test   eax,eax
c001de61:	75 0d                	jne    c001de70 <findRSDT(unsigned char*)+0x28>
c001de63:	b8 00 00 00 00       	mov    eax,0x0
c001de68:	e9 2b 01 00 00       	jmp    c001df98 <findRSDT(unsigned char*)+0x150>
c001de6d:	8d 76 00             	lea    esi,[esi+0x0]
c001de70:	89 e0                	mov    eax,esp
c001de72:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001de76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001de7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001de7e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001de86:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001de8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001de92:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de96:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001de9a:	89 c6                	mov    esi,eax
c001de9c:	89 d7                	mov    edi,edx
c001de9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dea0:	89 c8                	mov    eax,ecx
c001dea2:	89 fa                	mov    edx,edi
c001dea4:	89 f3                	mov    ebx,esi
c001dea6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001deaa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001deae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001deb2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001deb6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001deba:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001dec2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dec6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001deca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001ded6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001deda:	25 ff 0f 00 00       	and    eax,0xfff
c001dedf:	89 c6                	mov    esi,eax
c001dee1:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dee7:	83 ec 0c             	sub    esp,0xc
c001deea:	6a 02                	push   0x2
c001deec:	e8 34 a0 ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c001def1:	83 c4 10             	add    esp,0x10
c001def4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001def8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001defe:	83 ec 0c             	sub    esp,0xc
c001df01:	6a 01                	push   0x1
c001df03:	6a 02                	push   0x2
c001df05:	50                   	push   eax
c001df06:	52                   	push   edx
c001df07:	53                   	push   ebx
c001df08:	e8 25 a9 ff ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df0d:	83 c4 20             	add    esp,0x20
c001df10:	09 f0                	or     eax,esi
c001df12:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df1a:	25 ff 0f 00 00       	and    eax,0xfff
c001df1f:	89 c6                	mov    esi,eax
c001df21:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001df27:	83 ec 0c             	sub    esp,0xc
c001df2a:	6a 02                	push   0x2
c001df2c:	e8 f4 9f ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c001df31:	83 c4 10             	add    esp,0x10
c001df34:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df38:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001df3e:	83 ec 0c             	sub    esp,0xc
c001df41:	6a 01                	push   0x1
c001df43:	6a 02                	push   0x2
c001df45:	50                   	push   eax
c001df46:	52                   	push   edx
c001df47:	53                   	push   ebx
c001df48:	e8 e5 a8 ff ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df4d:	83 c4 20             	add    esp,0x20
c001df50:	09 f0                	or     eax,esi
c001df52:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001df56:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df5b:	85 c0                	test   eax,eax
c001df5d:	75 11                	jne    c001df70 <findRSDT(unsigned char*)+0x128>
c001df5f:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001df66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df6a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df6e:	eb 24                	jmp    c001df94 <findRSDT(unsigned char*)+0x14c>
c001df70:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df75:	83 f8 02             	cmp    eax,0x2
c001df78:	75 12                	jne    c001df8c <findRSDT(unsigned char*)+0x144>
c001df7a:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001df81:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df85:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df89:	eb 09                	jmp    c001df94 <findRSDT(unsigned char*)+0x14c>
c001df8b:	90                   	nop
c001df8c:	b8 00 00 00 00       	mov    eax,0x0
c001df91:	eb 05                	jmp    c001df98 <findRSDT(unsigned char*)+0x150>
c001df93:	90                   	nop
c001df94:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001df98:	83 c4 50             	add    esp,0x50
c001df9b:	5b                   	pop    ebx
c001df9c:	5e                   	pop    esi
c001df9d:	5f                   	pop    edi
c001df9e:	c3                   	ret    
c001df9f:	90                   	nop

c001dfa0 <findDataTable(unsigned char*, char*)>:
c001dfa0:	83 ec 1c             	sub    esp,0x1c
c001dfa3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dfa8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dfae:	83 e0 04             	and    eax,0x4
c001dfb1:	0f b6 c0             	movzx  eax,al
c001dfb4:	85 c0                	test   eax,eax
c001dfb6:	75 08                	jne    c001dfc0 <findDataTable(unsigned char*, char*)+0x20>
c001dfb8:	b8 00 00 00 00       	mov    eax,0x0
c001dfbd:	eb 5d                	jmp    c001e01c <findDataTable(unsigned char*, char*)+0x7c>
c001dfbf:	90                   	nop
c001dfc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dfc8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dfcd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001dfd1:	7d 41                	jge    c001e014 <findDataTable(unsigned char*, char*)+0x74>
c001dfd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfd7:	c1 e0 03             	shl    eax,0x3
c001dfda:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dfdf:	83 ec 04             	sub    esp,0x4
c001dfe2:	6a 04                	push   0x4
c001dfe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfe8:	50                   	push   eax
c001dfe9:	e8 92 23 fe ff       	call   c0000380 <memcmp>
c001dfee:	83 c4 10             	add    esp,0x10
c001dff1:	85 c0                	test   eax,eax
c001dff3:	0f 94 c0             	sete   al
c001dff6:	0f b6 c0             	movzx  eax,al
c001dff9:	85 c0                	test   eax,eax
c001dffb:	74 0f                	je     c001e00c <findDataTable(unsigned char*, char*)+0x6c>
c001dffd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e001:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e008:	eb 12                	jmp    c001e01c <findDataTable(unsigned char*, char*)+0x7c>
c001e00a:	66 90                	xchg   ax,ax
c001e00c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e011:	eb b5                	jmp    c001dfc8 <findDataTable(unsigned char*, char*)+0x28>
c001e013:	90                   	nop
c001e014:	b8 00 00 00 00       	mov    eax,0x0
c001e019:	8d 76 00             	lea    esi,[esi+0x0]
c001e01c:	83 c4 1c             	add    esp,0x1c
c001e01f:	c3                   	ret    

c001e020 <scanMADT()>:
c001e020:	53                   	push   ebx
c001e021:	83 ec 38             	sub    esp,0x38
c001e024:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e029:	25 00 04 00 00       	and    eax,0x400
c001e02e:	74 14                	je     c001e044 <scanMADT()+0x24>
c001e030:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e035:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e03b:	83 e2 fb             	and    edx,0xfffffffb
c001e03e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e044:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e049:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e04f:	83 e0 04             	and    eax,0x4
c001e052:	0f b6 c0             	movzx  eax,al
c001e055:	85 c0                	test   eax,eax
c001e057:	0f 84 6b 04 00 00    	je     c001e4c8 <scanMADT()+0x4a8>
c001e05d:	e8 e2 fa ff ff       	call   c001db44 <findRSDP()>
c001e062:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e067:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e06c:	85 c0                	test   eax,eax
c001e06e:	75 1c                	jne    c001e08c <scanMADT()+0x6c>
c001e070:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e075:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e07b:	83 e2 fb             	and    edx,0xfffffffb
c001e07e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e084:	e9 47 04 00 00       	jmp    c001e4d0 <scanMADT()+0x4b0>
c001e089:	8d 76 00             	lea    esi,[esi+0x0]
c001e08c:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e091:	83 ec 0c             	sub    esp,0xc
c001e094:	50                   	push   eax
c001e095:	e8 ae fd ff ff       	call   c001de48 <findRSDT(unsigned char*)>
c001e09a:	83 c4 10             	add    esp,0x10
c001e09d:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e0a2:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0a7:	85 c0                	test   eax,eax
c001e0a9:	75 19                	jne    c001e0c4 <scanMADT()+0xa4>
c001e0ab:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0b0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e0b6:	83 e2 fb             	and    edx,0xfffffffb
c001e0b9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0bf:	e9 0c 04 00 00       	jmp    c001e4d0 <scanMADT()+0x4b0>
c001e0c4:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0c9:	83 ec 0c             	sub    esp,0xc
c001e0cc:	50                   	push   eax
c001e0cd:	e8 0a fb ff ff       	call   c001dbdc <loadACPITables(unsigned char*)>
c001e0d2:	83 c4 10             	add    esp,0x10
c001e0d5:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0da:	83 ec 08             	sub    esp,0x8
c001e0dd:	68 8e 24 03 c0       	push   0xc003248e
c001e0e2:	50                   	push   eax
c001e0e3:	e8 b8 fe ff ff       	call   c001dfa0 <findDataTable(unsigned char*, char*)>
c001e0e8:	83 c4 10             	add    esp,0x10
c001e0eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e0ef:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e0f4:	75 1a                	jne    c001e110 <scanMADT()+0xf0>
c001e0f6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0fb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e101:	83 e2 fe             	and    edx,0xfffffffe
c001e104:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e10a:	e9 c1 03 00 00       	jmp    c001e4d0 <scanMADT()+0x4b0>
c001e10f:	90                   	nop
c001e110:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e118:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e11c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e11f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e123:	0f 87 a7 03 00 00    	ja     c001e4d0 <scanMADT()+0x4b0>
c001e129:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e131:	0f 87 99 03 00 00    	ja     c001e4d0 <scanMADT()+0x4b0>
c001e137:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e13b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e13f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e143:	8d 50 01             	lea    edx,[eax+0x1]
c001e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e14a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e14e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e152:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e156:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e15a:	8d 50 01             	lea    edx,[eax+0x1]
c001e15d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e161:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e165:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e169:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e16d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e172:	83 f8 02             	cmp    eax,0x2
c001e175:	0f 86 51 03 00 00    	jbe    c001e4cc <scanMADT()+0x4ac>
c001e17b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e180:	85 c0                	test   eax,eax
c001e182:	75 58                	jne    c001e1dc <scanMADT()+0x1bc>
c001e184:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e188:	8d 50 01             	lea    edx,[eax+0x1]
c001e18b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e18f:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e195:	0f b6 d2             	movzx  edx,dl
c001e198:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e19c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1a0:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e1a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1aa:	8d 50 01             	lea    edx,[eax+0x1]
c001e1ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1b1:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e1b7:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e1ba:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e1c0:	0f b6 d2             	movzx  edx,dl
c001e1c3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1c7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1cb:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e1d1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e1d6:	e9 d9 02 00 00       	jmp    c001e4b4 <scanMADT()+0x494>
c001e1db:	90                   	nop
c001e1dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e1e1:	83 f8 01             	cmp    eax,0x1
c001e1e4:	0f 85 1a 01 00 00    	jne    c001e304 <scanMADT()+0x2e4>
c001e1ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1ee:	8d 50 01             	lea    edx,[eax+0x1]
c001e1f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1f5:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e1fb:	0f b6 d2             	movzx  edx,dl
c001e1fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e202:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e206:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e20c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e211:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e215:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e219:	01 d0                	add    eax,edx
c001e21b:	83 c0 2c             	add    eax,0x2c
c001e21e:	8a 00                	mov    al,BYTE PTR [eax]
c001e220:	0f b6 d0             	movzx  edx,al
c001e223:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e227:	8d 48 01             	lea    ecx,[eax+0x1]
c001e22a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e22e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e232:	0f b6 c0             	movzx  eax,al
c001e235:	c1 e0 08             	shl    eax,0x8
c001e238:	89 d1                	mov    ecx,edx
c001e23a:	09 c1                	or     ecx,eax
c001e23c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e240:	8d 50 02             	lea    edx,[eax+0x2]
c001e243:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e247:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e24b:	0f b6 c0             	movzx  eax,al
c001e24e:	c1 e0 10             	shl    eax,0x10
c001e251:	09 c1                	or     ecx,eax
c001e253:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e257:	8d 50 03             	lea    edx,[eax+0x3]
c001e25a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e25e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e262:	0f b6 c0             	movzx  eax,al
c001e265:	c1 e0 18             	shl    eax,0x18
c001e268:	09 c1                	or     ecx,eax
c001e26a:	89 ca                	mov    edx,ecx
c001e26c:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e271:	0f b6 c0             	movzx  eax,al
c001e274:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e27b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e280:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e284:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e288:	01 d0                	add    eax,edx
c001e28a:	83 c0 2c             	add    eax,0x2c
c001e28d:	8a 00                	mov    al,BYTE PTR [eax]
c001e28f:	0f b6 d0             	movzx  edx,al
c001e292:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e296:	8d 48 01             	lea    ecx,[eax+0x1]
c001e299:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e29d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e2a1:	0f b6 c0             	movzx  eax,al
c001e2a4:	c1 e0 08             	shl    eax,0x8
c001e2a7:	89 d1                	mov    ecx,edx
c001e2a9:	09 c1                	or     ecx,eax
c001e2ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2af:	8d 50 02             	lea    edx,[eax+0x2]
c001e2b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2b6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2ba:	0f b6 c0             	movzx  eax,al
c001e2bd:	c1 e0 10             	shl    eax,0x10
c001e2c0:	09 c1                	or     ecx,eax
c001e2c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2c6:	8d 50 03             	lea    edx,[eax+0x3]
c001e2c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2cd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2d1:	0f b6 c0             	movzx  eax,al
c001e2d4:	c1 e0 18             	shl    eax,0x18
c001e2d7:	09 c1                	or     ecx,eax
c001e2d9:	89 ca                	mov    edx,ecx
c001e2db:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2e0:	0f b6 c0             	movzx  eax,al
c001e2e3:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e2ea:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e2ef:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2f4:	83 c0 01             	add    eax,0x1
c001e2f7:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e2fc:	e9 b3 01 00 00       	jmp    c001e4b4 <scanMADT()+0x494>
c001e301:	8d 76 00             	lea    esi,[esi+0x0]
c001e304:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e309:	83 f8 02             	cmp    eax,0x2
c001e30c:	0f 85 ea 00 00 00    	jne    c001e3fc <scanMADT()+0x3dc>
c001e312:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e316:	8d 50 01             	lea    edx,[eax+0x1]
c001e319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e31d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e321:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e325:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e329:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e32d:	8d 50 01             	lea    edx,[eax+0x1]
c001e330:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e334:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e338:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e33c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e340:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e344:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e348:	01 d0                	add    eax,edx
c001e34a:	83 c0 2c             	add    eax,0x2c
c001e34d:	8a 00                	mov    al,BYTE PTR [eax]
c001e34f:	0f b6 d0             	movzx  edx,al
c001e352:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e356:	8d 48 01             	lea    ecx,[eax+0x1]
c001e359:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e35d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e361:	0f b6 c0             	movzx  eax,al
c001e364:	c1 e0 08             	shl    eax,0x8
c001e367:	89 d1                	mov    ecx,edx
c001e369:	09 c1                	or     ecx,eax
c001e36b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e36f:	8d 50 02             	lea    edx,[eax+0x2]
c001e372:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e376:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e37a:	0f b6 c0             	movzx  eax,al
c001e37d:	c1 e0 10             	shl    eax,0x10
c001e380:	09 c1                	or     ecx,eax
c001e382:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e386:	8d 50 03             	lea    edx,[eax+0x3]
c001e389:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e38d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e391:	0f b6 c0             	movzx  eax,al
c001e394:	c1 e0 18             	shl    eax,0x18
c001e397:	09 c8                	or     eax,ecx
c001e399:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e39d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e3a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3aa:	01 d0                	add    eax,edx
c001e3ac:	83 c0 2c             	add    eax,0x2c
c001e3af:	8a 00                	mov    al,BYTE PTR [eax]
c001e3b1:	0f b6 c0             	movzx  eax,al
c001e3b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e3b8:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e3bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3bf:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e3c3:	0f b6 d2             	movzx  edx,dl
c001e3c6:	c1 e2 08             	shl    edx,0x8
c001e3c9:	09 d0                	or     eax,edx
c001e3cb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e3d0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e3d5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e3da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3de:	88 90 a8 3c 03 c0    	mov    BYTE PTR [eax-0x3ffcc358],dl
c001e3e4:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e3e9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e3ee:	66 89 84 12 c0 f6 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc0940],ax
c001e3f6:	e9 b9 00 00 00       	jmp    c001e4b4 <scanMADT()+0x494>
c001e3fb:	90                   	nop
c001e3fc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e401:	83 f8 04             	cmp    eax,0x4
c001e404:	0f 85 9a 00 00 00    	jne    c001e4a4 <scanMADT()+0x484>
c001e40a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e40e:	8d 50 01             	lea    edx,[eax+0x1]
c001e411:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e415:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e419:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e41d:	0f b6 c0             	movzx  eax,al
c001e420:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e424:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e428:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e42c:	01 d0                	add    eax,edx
c001e42e:	83 c0 2c             	add    eax,0x2c
c001e431:	8a 00                	mov    al,BYTE PTR [eax]
c001e433:	0f b6 d0             	movzx  edx,al
c001e436:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e43a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e43d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e441:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e445:	0f b6 c0             	movzx  eax,al
c001e448:	c1 e0 08             	shl    eax,0x8
c001e44b:	09 d0                	or     eax,edx
c001e44d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e451:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e456:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e45a:	8d 50 01             	lea    edx,[eax+0x1]
c001e45d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e461:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e465:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e469:	0f b6 c0             	movzx  eax,al
c001e46c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e474:	c1 e0 08             	shl    eax,0x8
c001e477:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e47b:	89 c1                	mov    ecx,eax
c001e47d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e481:	c1 e0 18             	shl    eax,0x18
c001e484:	89 c3                	mov    ebx,eax
c001e486:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e48b:	8d 50 01             	lea    edx,[eax+0x1]
c001e48e:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e494:	09 d9                	or     ecx,ebx
c001e496:	89 ca                	mov    edx,ecx
c001e498:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e49f:	eb 13                	jmp    c001e4b4 <scanMADT()+0x494>
c001e4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e4a4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e4a9:	83 f8 05             	cmp    eax,0x5
c001e4ac:	75 06                	jne    c001e4b4 <scanMADT()+0x494>
c001e4ae:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e4b3:	90                   	nop
c001e4b4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e4b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e4bd:	01 d0                	add    eax,edx
c001e4bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e4c3:	e9 50 fc ff ff       	jmp    c001e118 <scanMADT()+0xf8>
c001e4c8:	90                   	nop
c001e4c9:	eb 05                	jmp    c001e4d0 <scanMADT()+0x4b0>
c001e4cb:	90                   	nop
c001e4cc:	90                   	nop
c001e4cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e4d0:	83 c4 38             	add    esp,0x38
c001e4d3:	5b                   	pop    ebx
c001e4d4:	c3                   	ret    
c001e4d5:	90                   	nop
c001e4d6:	66 90                	xchg   ax,ax

c001e4d8 <ACPI::ACPI()>:
c001e4d8:	83 ec 0c             	sub    esp,0xc
c001e4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4df:	83 ec 08             	sub    esp,0x8
c001e4e2:	68 93 24 03 c0       	push   0xc0032493
c001e4e7:	50                   	push   eax
c001e4e8:	e8 53 cf ff ff       	call   c001b440 <Device::Device(char const*)>
c001e4ed:	83 c4 10             	add    esp,0x10
c001e4f0:	ba a0 26 03 c0       	mov    edx,0xc00326a0
c001e4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f9:	89 10                	mov    DWORD PTR [eax],edx
c001e4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e50a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e518:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e522:	e8 f9 fa ff ff       	call   c001e020 <scanMADT()>
c001e527:	90                   	nop
c001e528:	83 c4 0c             	add    esp,0xc
c001e52b:	c3                   	ret    

c001e52c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e52c:	83 ec 2c             	sub    esp,0x2c
c001e52f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e533:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e537:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e53b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e53f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e544:	88 d0                	mov    al,dl
c001e546:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e54a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e54f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e557:	90                   	nop
c001e558:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e55c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e562:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e566:	0f 8d b0 00 00 00    	jge    c001e61c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e56c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e574:	83 c2 2a             	add    edx,0x2a
c001e577:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e57b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e580:	0f b7 c0             	movzx  eax,ax
c001e583:	39 c2                	cmp    edx,eax
c001e585:	0f 85 85 00 00 00    	jne    c001e610 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e58b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e58f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e593:	83 c2 2a             	add    edx,0x2a
c001e596:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e59a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e59f:	0f b6 c0             	movzx  eax,al
c001e5a2:	39 c2                	cmp    edx,eax
c001e5a4:	75 6a                	jne    c001e610 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e5a6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e5ab:	85 c0                	test   eax,eax
c001e5ad:	74 3d                	je     c001e5ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e5af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e5b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e5b7:	83 c2 2a             	add    edx,0x2a
c001e5ba:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e5be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e5c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5c5:	39 c2                	cmp    edx,eax
c001e5c7:	74 13                	je     c001e5dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e5c9:	83 ec 0c             	sub    esp,0xc
c001e5cc:	68 20 26 03 c0       	push   0xc0032620
c001e5d1:	e8 a0 1c 00 00       	call   c0020276 <KePanic(char const*)>
c001e5d6:	83 c4 10             	add    esp,0x10
c001e5d9:	8d 76 00             	lea    esi,[esi+0x0]
c001e5dc:	83 ec 0c             	sub    esp,0xc
c001e5df:	68 98 24 03 c0       	push   0xc0032498
c001e5e4:	e8 8d 1c 00 00       	call   c0020276 <KePanic(char const*)>
c001e5e9:	83 c4 10             	add    esp,0x10
c001e5ec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e5f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e5f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e5f8:	83 c2 2a             	add    edx,0x2a
c001e5fb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e5ff:	8b 02                	mov    eax,DWORD PTR [edx]
c001e601:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e604:	89 01                	mov    DWORD PTR [ecx],eax
c001e606:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e609:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e60e:	66 90                	xchg   ax,ax
c001e610:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e615:	e9 3e ff ff ff       	jmp    c001e558 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e61a:	66 90                	xchg   ax,ax
c001e61c:	90                   	nop
c001e61d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e621:	83 c4 2c             	add    esp,0x2c
c001e624:	c2 04 00             	ret    0x4
c001e627:	90                   	nop

c001e628 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e628:	83 ec 1c             	sub    esp,0x1c
c001e62b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e62f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e633:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e637:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e63c:	88 c8                	mov    al,cl
c001e63e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e642:	88 d0                	mov    al,dl
c001e644:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e64c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e656:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e659:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e65d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e665:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e66b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e66f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e672:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e676:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e67b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e67f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e685:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e689:	83 c0 01             	add    eax,0x1
c001e68c:	88 c1                	mov    cl,al
c001e68e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e692:	83 c2 2a             	add    edx,0x2a
c001e695:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e69d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e6a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6a7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e6aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e6ae:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6b6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e6bc:	8d 50 01             	lea    edx,[eax+0x1]
c001e6bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6c3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e6c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6cd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e6d3:	3d 00 02 00 00       	cmp    eax,0x200
c001e6d8:	75 12                	jne    c001e6ec <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e6da:	83 ec 0c             	sub    esp,0xc
c001e6dd:	68 a7 24 03 c0       	push   0xc00324a7
c001e6e2:	e8 8f 1b 00 00       	call   c0020276 <KePanic(char const*)>
c001e6e7:	83 c4 10             	add    esp,0x10
c001e6ea:	66 90                	xchg   ax,ax
c001e6ec:	90                   	nop
c001e6ed:	83 c4 1c             	add    esp,0x1c
c001e6f0:	c3                   	ret    
c001e6f1:	90                   	nop
c001e6f2:	66 90                	xchg   ax,ax

c001e6f4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e6f4:	b8 00 00 00 00       	mov    eax,0x0
c001e6f9:	c3                   	ret    
c001e6fa:	66 90                	xchg   ax,ax

c001e6fc <ACPI::detectPCI()>:
c001e6fc:	53                   	push   ebx
c001e6fd:	83 ec 28             	sub    esp,0x28
c001e700:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e705:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e70a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e70f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e715:	83 e0 04             	and    eax,0x4
c001e718:	0f b6 c0             	movzx  eax,al
c001e71b:	85 c0                	test   eax,eax
c001e71d:	74 2d                	je     c001e74c <ACPI::detectPCI()+0x50>
c001e71f:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e724:	83 ec 08             	sub    esp,0x8
c001e727:	68 c4 24 03 c0       	push   0xc00324c4
c001e72c:	50                   	push   eax
c001e72d:	e8 6e f8 ff ff       	call   c001dfa0 <findDataTable(unsigned char*, char*)>
c001e732:	83 c4 10             	add    esp,0x10
c001e735:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e739:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e73e:	74 0c                	je     c001e74c <ACPI::detectPCI()+0x50>
c001e740:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e745:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e74a:	66 90                	xchg   ax,ax
c001e74c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e754:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e758:	8a 00                	mov    al,BYTE PTR [eax]
c001e75a:	0f b6 c0             	movzx  eax,al
c001e75d:	83 f8 01             	cmp    eax,0x1
c001e760:	75 0e                	jne    c001e770 <ACPI::detectPCI()+0x74>
c001e762:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e767:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e76c:	eb 2e                	jmp    c001e79c <ACPI::detectPCI()+0xa0>
c001e76e:	66 90                	xchg   ax,ax
c001e770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e774:	8a 00                	mov    al,BYTE PTR [eax]
c001e776:	0f b6 c0             	movzx  eax,al
c001e779:	83 f8 02             	cmp    eax,0x2
c001e77c:	75 1e                	jne    c001e79c <ACPI::detectPCI()+0xa0>
c001e77e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e783:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e788:	85 c0                	test   eax,eax
c001e78a:	74 10                	je     c001e79c <ACPI::detectPCI()+0xa0>
c001e78c:	83 ec 0c             	sub    esp,0xc
c001e78f:	68 50 26 03 c0       	push   0xc0032650
c001e794:	e8 dd 1a 00 00       	call   c0020276 <KePanic(char const*)>
c001e799:	83 c4 10             	add    esp,0x10
c001e79c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e7a0:	83 f0 01             	xor    eax,0x1
c001e7a3:	0f b6 c0             	movzx  eax,al
c001e7a6:	85 c0                	test   eax,eax
c001e7a8:	74 46                	je     c001e7f0 <ACPI::detectPCI()+0xf4>
c001e7aa:	e8 81 19 fe ff       	call   c0000130 <manualPCIProbe>
c001e7af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e7b3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7b8:	75 0e                	jne    c001e7c8 <ACPI::detectPCI()+0xcc>
c001e7ba:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7bf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e7c4:	eb 2a                	jmp    c001e7f0 <ACPI::detectPCI()+0xf4>
c001e7c6:	66 90                	xchg   ax,ax
c001e7c8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e7cd:	75 21                	jne    c001e7f0 <ACPI::detectPCI()+0xf4>
c001e7cf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7d4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7d9:	85 c0                	test   eax,eax
c001e7db:	74 13                	je     c001e7f0 <ACPI::detectPCI()+0xf4>
c001e7dd:	83 ec 0c             	sub    esp,0xc
c001e7e0:	68 50 26 03 c0       	push   0xc0032650
c001e7e5:	e8 8c 1a 00 00       	call   c0020276 <KePanic(char const*)>
c001e7ea:	83 c4 10             	add    esp,0x10
c001e7ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e7f0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e7f5:	85 c0                	test   eax,eax
c001e7f7:	0f 84 87 00 00 00    	je     c001e884 <ACPI::detectPCI()+0x188>
c001e7fd:	83 ec 0c             	sub    esp,0xc
c001e800:	68 c9 24 03 c0       	push   0xc00324c9
c001e805:	e8 09 13 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001e80a:	83 c4 10             	add    esp,0x10
c001e80d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e815:	83 ec 0c             	sub    esp,0xc
c001e818:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e81c:	e8 9d 7b ff ff       	call   c00163be <malloc>
c001e821:	83 c4 10             	add    esp,0x10
c001e824:	89 c3                	mov    ebx,eax
c001e826:	83 ec 0c             	sub    esp,0xc
c001e829:	53                   	push   ebx
c001e82a:	e8 89 b8 00 00       	call   c002a0b8 <PCI::PCI()>
c001e82f:	83 c4 10             	add    esp,0x10
c001e832:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e836:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e83a:	83 ec 08             	sub    esp,0x8
c001e83d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e841:	50                   	push   eax
c001e842:	e8 97 ca ff ff       	call   c001b2de <Device::addChild(Device*)>
c001e847:	83 c4 10             	add    esp,0x10
c001e84a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e84e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e850:	83 c0 08             	add    eax,0x8
c001e853:	8b 00                	mov    eax,DWORD PTR [eax]
c001e855:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e85a:	85 d2                	test   edx,edx
c001e85c:	74 0a                	je     c001e868 <ACPI::detectPCI()+0x16c>
c001e85e:	ba 01 00 00 00       	mov    edx,0x1
c001e863:	eb 0b                	jmp    c001e870 <ACPI::detectPCI()+0x174>
c001e865:	8d 76 00             	lea    esi,[esi+0x0]
c001e868:	ba 02 00 00 00       	mov    edx,0x2
c001e86d:	8d 76 00             	lea    esi,[esi+0x0]
c001e870:	6a 00                	push   0x0
c001e872:	6a 00                	push   0x0
c001e874:	52                   	push   edx
c001e875:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e879:	ff d0                	call   eax
c001e87b:	83 c4 10             	add    esp,0x10
c001e87e:	e9 91 00 00 00       	jmp    c001e914 <ACPI::detectPCI()+0x218>
c001e883:	90                   	nop
c001e884:	83 ec 0c             	sub    esp,0xc
c001e887:	68 e1 24 03 c0       	push   0xc00324e1
c001e88c:	e8 82 12 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001e891:	83 c4 10             	add    esp,0x10
c001e894:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e89b:	83 ec 0c             	sub    esp,0xc
c001e89e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e8a2:	e8 17 7b ff ff       	call   c00163be <malloc>
c001e8a7:	83 c4 10             	add    esp,0x10
c001e8aa:	89 c3                	mov    ebx,eax
c001e8ac:	83 ec 0c             	sub    esp,0xc
c001e8af:	53                   	push   ebx
c001e8b0:	e8 9d c3 00 00       	call   c002ac52 <IDE::IDE()>
c001e8b5:	83 c4 10             	add    esp,0x10
c001e8b8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e8bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8c0:	83 ec 08             	sub    esp,0x8
c001e8c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8c7:	50                   	push   eax
c001e8c8:	e8 11 ca ff ff       	call   c001b2de <Device::addChild(Device*)>
c001e8cd:	83 c4 10             	add    esp,0x10
c001e8d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8d4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e8de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8e2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e8eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8ef:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e8f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8fe:	83 c0 08             	add    eax,0x8
c001e901:	8b 00                	mov    eax,DWORD PTR [eax]
c001e903:	6a 00                	push   0x0
c001e905:	6a 00                	push   0x0
c001e907:	6a 00                	push   0x0
c001e909:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e90d:	ff d0                	call   eax
c001e90f:	83 c4 10             	add    esp,0x10
c001e912:	66 90                	xchg   ax,ax
c001e914:	90                   	nop
c001e915:	83 c4 28             	add    esp,0x28
c001e918:	5b                   	pop    ebx
c001e919:	c3                   	ret    
c001e91a:	66 90                	xchg   ax,ax

c001e91c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e91c:	83 ec 1c             	sub    esp,0x1c
c001e91f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e923:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e926:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e92a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e92f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e934:	83 ec 08             	sub    esp,0x8
c001e937:	52                   	push   edx
c001e938:	50                   	push   eax
c001e939:	e8 42 71 ff ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e945:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e94a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e94f:	83 ec 04             	sub    esp,0x4
c001e952:	6a 01                	push   0x1
c001e954:	52                   	push   edx
c001e955:	50                   	push   eax
c001e956:	e8 3f 72 ff ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c001e95b:	83 c4 10             	add    esp,0x10
c001e95e:	90                   	nop
c001e95f:	83 c4 1c             	add    esp,0x1c
c001e962:	c3                   	ret    
c001e963:	90                   	nop

c001e964 <ACPI::sleep()>:
c001e964:	83 ec 0c             	sub    esp,0xc
c001e967:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e96c:	85 c0                	test   eax,eax
c001e96e:	74 08                	je     c001e978 <ACPI::sleep()+0x14>
c001e970:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e975:	ff d0                	call   eax
c001e977:	90                   	nop
c001e978:	90                   	nop
c001e979:	83 c4 0c             	add    esp,0xc
c001e97c:	c3                   	ret    
c001e97d:	90                   	nop
c001e97e:	66 90                	xchg   ax,ax

c001e980 <ACPI::open(int, int, void*)>:
c001e980:	57                   	push   edi
c001e981:	56                   	push   esi
c001e982:	53                   	push   ebx
c001e983:	81 ec 70 01 00 00    	sub    esp,0x170
c001e989:	83 ec 0c             	sub    esp,0xc
c001e98c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001e993:	e8 64 fd ff ff       	call   c001e6fc <ACPI::detectPCI()>
c001e998:	83 c4 10             	add    esp,0x10
c001e99b:	83 ec 0c             	sub    esp,0xc
c001e99e:	68 78 26 03 c0       	push   0xc0032678
c001e9a3:	e8 6b 11 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001e9a8:	83 c4 10             	add    esp,0x10
c001e9ab:	b8 4c 05 00 00       	mov    eax,0x54c
c001e9b0:	8a 00                	mov    al,BYTE PTR [eax]
c001e9b2:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001e9b9:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e9c1:	83 f8 01             	cmp    eax,0x1
c001e9c4:	75 12                	jne    c001e9d8 <ACPI::open(int, int, void*)+0x58>
c001e9c6:	83 ec 0c             	sub    esp,0xc
c001e9c9:	68 f6 24 03 c0       	push   0xc00324f6
c001e9ce:	e8 bc 53 00 00       	call   c0023d8f <Thr::loadKernelSymbolTable(char const*)>
c001e9d3:	83 c4 10             	add    esp,0x10
c001e9d6:	eb 34                	jmp    c001ea0c <ACPI::open(int, int, void*)+0x8c>
c001e9d8:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e9e0:	3d bb 00 00 00       	cmp    eax,0xbb
c001e9e5:	75 15                	jne    c001e9fc <ACPI::open(int, int, void*)+0x7c>
c001e9e7:	83 ec 0c             	sub    esp,0xc
c001e9ea:	68 14 25 03 c0       	push   0xc0032514
c001e9ef:	e8 9b 53 00 00       	call   c0023d8f <Thr::loadKernelSymbolTable(char const*)>
c001e9f4:	83 c4 10             	add    esp,0x10
c001e9f7:	eb 13                	jmp    c001ea0c <ACPI::open(int, int, void*)+0x8c>
c001e9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001e9fc:	83 ec 0c             	sub    esp,0xc
c001e9ff:	68 32 25 03 c0       	push   0xc0032532
c001ea04:	e8 6d 18 00 00       	call   c0020276 <KePanic(char const*)>
c001ea09:	83 c4 10             	add    esp,0x10
c001ea0c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001ea14:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001ea1f:	83 ec 0c             	sub    esp,0xc
c001ea22:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ea29:	e8 90 79 ff ff       	call   c00163be <malloc>
c001ea2e:	83 c4 10             	add    esp,0x10
c001ea31:	89 c3                	mov    ebx,eax
c001ea33:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ea38:	83 ec 04             	sub    esp,0x4
c001ea3b:	50                   	push   eax
c001ea3c:	68 4c 25 03 c0       	push   0xc003254c
c001ea41:	53                   	push   ebx
c001ea42:	e8 1d ba ff ff       	call   c001a464 <File::File(char const*, Process*)>
c001ea47:	83 c4 10             	add    esp,0x10
c001ea4a:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001ea51:	83 ec 08             	sub    esp,0x8
c001ea54:	6a 01                	push   0x1
c001ea56:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ea5d:	e8 20 ba ff ff       	call   c001a482 <File::open(FileOpenMode)>
c001ea62:	83 c4 10             	add    esp,0x10
c001ea65:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001ea6c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001ea74:	75 16                	jne    c001ea8c <ACPI::open(int, int, void*)+0x10c>
c001ea76:	83 ec 0c             	sub    esp,0xc
c001ea79:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ea80:	e8 5b ba ff ff       	call   c001a4e0 <File::close()>
c001ea85:	83 c4 10             	add    esp,0x10
c001ea88:	eb 0a                	jmp    c001ea94 <ACPI::open(int, int, void*)+0x114>
c001ea8a:	66 90                	xchg   ax,ax
c001ea8c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001ea94:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001ea9c:	74 1e                	je     c001eabc <ACPI::open(int, int, void*)+0x13c>
c001ea9e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001eaa5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa7:	83 c0 08             	add    eax,0x8
c001eaaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaac:	83 ec 0c             	sub    esp,0xc
c001eaaf:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001eab6:	ff d0                	call   eax
c001eab8:	83 c4 10             	add    esp,0x10
c001eabb:	90                   	nop
c001eabc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001eac3:	83 f0 01             	xor    eax,0x1
c001eac6:	0f b6 c0             	movzx  eax,al
c001eac9:	85 c0                	test   eax,eax
c001eacb:	74 43                	je     c001eb10 <ACPI::open(int, int, void*)+0x190>
c001eacd:	83 ec 0c             	sub    esp,0xc
c001ead0:	68 6a 25 03 c0       	push   0xc003256a
c001ead5:	e8 39 10 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001eada:	83 c4 10             	add    esp,0x10
c001eadd:	83 ec 04             	sub    esp,0x4
c001eae0:	6a 0c                	push   0xc
c001eae2:	68 85 25 03 c0       	push   0xc0032585
c001eae7:	68 96 25 03 c0       	push   0xc0032596
c001eaec:	e8 da 44 00 00       	call   c0022fcb <Reg::readIntWithDefault(char*, char*, int)>
c001eaf1:	83 c4 10             	add    esp,0x10
c001eaf4:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001eb05:	e8 4a 96 ff ff       	call   c0018154 <Virt::setupPageSwapping(int)>
c001eb0a:	83 c4 10             	add    esp,0x10
c001eb0d:	8d 76 00             	lea    esi,[esi+0x0]
c001eb10:	83 ec 0c             	sub    esp,0xc
c001eb13:	68 c4 0f 03 c0       	push   0xc0030fc4
c001eb18:	e8 f6 0f 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001eb1d:	83 c4 10             	add    esp,0x10
c001eb20:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001eb27:	83 ec 08             	sub    esp,0x8
c001eb2a:	6a 13                	push   0x13
c001eb2c:	50                   	push   eax
c001eb2d:	e8 da ca ff ff       	call   c001b60c <getDevicesOfType(DeviceType)>
c001eb32:	83 c4 0c             	add    esp,0xc
c001eb35:	8d 76 00             	lea    esi,[esi+0x0]
c001eb38:	83 ec 0c             	sub    esp,0xc
c001eb3b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eb42:	50                   	push   eax
c001eb43:	e8 28 03 01 00       	call   c002ee70 <LinkedList<Device>::isEmpty()>
c001eb48:	83 c4 10             	add    esp,0x10
c001eb4b:	83 f0 01             	xor    eax,0x1
c001eb4e:	0f b6 c0             	movzx  eax,al
c001eb51:	85 c0                	test   eax,eax
c001eb53:	0f 84 47 01 00 00    	je     c001eca0 <ACPI::open(int, int, void*)+0x320>
c001eb59:	83 ec 0c             	sub    esp,0xc
c001eb5c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eb63:	50                   	push   eax
c001eb64:	e8 23 03 01 00       	call   c002ee8c <LinkedList<Device>::getFirstElement()>
c001eb69:	83 c4 10             	add    esp,0x10
c001eb6c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001eb73:	83 ec 0c             	sub    esp,0xc
c001eb76:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eb7d:	50                   	push   eax
c001eb7e:	e8 11 03 01 00       	call   c002ee94 <LinkedList<Device>::removeFirst()>
c001eb83:	83 c4 10             	add    esp,0x10
c001eb86:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001eb8d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001eb94:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001eb9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eb9f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001eba5:	ba 09 00 00 00       	mov    edx,0x9
c001ebaa:	fc                   	cld    
c001ebab:	89 c7                	mov    edi,eax
c001ebad:	89 de                	mov    esi,ebx
c001ebaf:	89 d1                	mov    ecx,edx
c001ebb1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ebb3:	83 ec 08             	sub    esp,0x8
c001ebb6:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ebba:	50                   	push   eax
c001ebbb:	83 ec 24             	sub    esp,0x24
c001ebbe:	89 e0                	mov    eax,esp
c001ebc0:	89 c3                	mov    ebx,eax
c001ebc2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ebc6:	ba 09 00 00 00       	mov    edx,0x9
c001ebcb:	89 df                	mov    edi,ebx
c001ebcd:	89 c6                	mov    esi,eax
c001ebcf:	89 d1                	mov    ecx,edx
c001ebd1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ebd3:	e8 ca b9 00 00       	call   c002a5a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ebd8:	83 c4 30             	add    esp,0x30
c001ebdb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001ebe2:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001ebea:	0f 84 48 ff ff ff    	je     c001eb38 <ACPI::open(int, int, void*)+0x1b8>
c001ebf0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001ebfb:	83 ec 0c             	sub    esp,0xc
c001ebfe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ec05:	e8 b4 77 ff ff       	call   c00163be <malloc>
c001ec0a:	83 c4 10             	add    esp,0x10
c001ec0d:	89 c3                	mov    ebx,eax
c001ec0f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec14:	83 ec 04             	sub    esp,0x4
c001ec17:	50                   	push   eax
c001ec18:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ec1f:	53                   	push   ebx
c001ec20:	e8 3f b8 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c001ec25:	83 c4 10             	add    esp,0x10
c001ec28:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001ec2f:	83 ec 0c             	sub    esp,0xc
c001ec32:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ec39:	e8 08 bb ff ff       	call   c001a746 <File::exists()>
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	0f b6 c0             	movzx  eax,al
c001ec44:	85 c0                	test   eax,eax
c001ec46:	74 28                	je     c001ec70 <ACPI::open(int, int, void*)+0x2f0>
c001ec48:	83 ec 08             	sub    esp,0x8
c001ec4b:	6a 01                	push   0x1
c001ec4d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ec54:	e8 b0 5b 00 00       	call   c0024809 <Thr::loadDLL(char const*, bool)>
c001ec59:	83 c4 10             	add    esp,0x10
c001ec5c:	83 ec 08             	sub    esp,0x8
c001ec5f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ec66:	50                   	push   eax
c001ec67:	e8 ef 5d 00 00       	call   c0024a5b <Thr::executeDLL(unsigned long, void*)>
c001ec6c:	83 c4 10             	add    esp,0x10
c001ec6f:	90                   	nop
c001ec70:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001ec78:	0f 84 ba fe ff ff    	je     c001eb38 <ACPI::open(int, int, void*)+0x1b8>
c001ec7e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001ec85:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec87:	83 c0 08             	add    eax,0x8
c001ec8a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec8c:	83 ec 0c             	sub    esp,0xc
c001ec8f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ec96:	ff d0                	call   eax
c001ec98:	83 c4 10             	add    esp,0x10
c001ec9b:	e9 98 fe ff ff       	jmp    c001eb38 <ACPI::open(int, int, void*)+0x1b8>
c001eca0:	83 ec 0c             	sub    esp,0xc
c001eca3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ecaa:	50                   	push   eax
c001ecab:	e8 bc 01 01 00       	call   c002ee6c <LinkedList<Device>::~LinkedList()>
c001ecb0:	83 c4 10             	add    esp,0x10
c001ecb3:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ecb9:	83 ec 08             	sub    esp,0x8
c001ecbc:	6a 01                	push   0x1
c001ecbe:	68 9d 25 03 c0       	push   0xc003259d
c001ecc3:	e8 41 5b 00 00       	call   c0024809 <Thr::loadDLL(char const*, bool)>
c001ecc8:	83 c4 10             	add    esp,0x10
c001eccb:	83 ec 08             	sub    esp,0x8
c001ecce:	53                   	push   ebx
c001eccf:	50                   	push   eax
c001ecd0:	e8 86 5d 00 00       	call   c0024a5b <Thr::executeDLL(unsigned long, void*)>
c001ecd5:	83 c4 10             	add    esp,0x10
c001ecd8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ecdd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ece3:	83 e0 04             	and    eax,0x4
c001ece6:	0f b6 c0             	movzx  eax,al
c001ece9:	85 c0                	test   eax,eax
c001eceb:	0f 84 1b 01 00 00    	je     c001ee0c <ACPI::open(int, int, void*)+0x48c>
c001ecf1:	83 ec 0c             	sub    esp,0xc
c001ecf4:	68 ba 25 03 c0       	push   0xc00325ba
c001ecf9:	e8 15 0e 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001ecfe:	83 c4 10             	add    esp,0x10
c001ed01:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001ed0c:	83 ec 0c             	sub    esp,0xc
c001ed0f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001ed16:	e8 a3 76 ff ff       	call   c00163be <malloc>
c001ed1b:	83 c4 10             	add    esp,0x10
c001ed1e:	89 c3                	mov    ebx,eax
c001ed20:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ed25:	83 ec 04             	sub    esp,0x4
c001ed28:	50                   	push   eax
c001ed29:	68 d7 25 03 c0       	push   0xc00325d7
c001ed2e:	53                   	push   ebx
c001ed2f:	e8 30 b7 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c001ed34:	83 c4 10             	add    esp,0x10
c001ed37:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001ed3e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ed46:	74 20                	je     c001ed68 <ACPI::open(int, int, void*)+0x3e8>
c001ed48:	83 ec 0c             	sub    esp,0xc
c001ed4b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ed52:	e8 ef b9 ff ff       	call   c001a746 <File::exists()>
c001ed57:	83 c4 10             	add    esp,0x10
c001ed5a:	0f b6 c0             	movzx  eax,al
c001ed5d:	85 c0                	test   eax,eax
c001ed5f:	74 07                	je     c001ed68 <ACPI::open(int, int, void*)+0x3e8>
c001ed61:	b0 01                	mov    al,0x1
c001ed63:	eb 07                	jmp    c001ed6c <ACPI::open(int, int, void*)+0x3ec>
c001ed65:	8d 76 00             	lea    esi,[esi+0x0]
c001ed68:	b0 00                	mov    al,0x0
c001ed6a:	66 90                	xchg   ax,ax
c001ed6c:	0f b6 c0             	movzx  eax,al
c001ed6f:	85 c0                	test   eax,eax
c001ed71:	74 25                	je     c001ed98 <ACPI::open(int, int, void*)+0x418>
c001ed73:	83 ec 08             	sub    esp,0x8
c001ed76:	6a 01                	push   0x1
c001ed78:	68 d7 25 03 c0       	push   0xc00325d7
c001ed7d:	e8 87 5a 00 00       	call   c0024809 <Thr::loadDLL(char const*, bool)>
c001ed82:	83 c4 10             	add    esp,0x10
c001ed85:	83 ec 08             	sub    esp,0x8
c001ed88:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001ed8f:	50                   	push   eax
c001ed90:	e8 c6 5c 00 00       	call   c0024a5b <Thr::executeDLL(unsigned long, void*)>
c001ed95:	83 c4 10             	add    esp,0x10
c001ed98:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001eda0:	74 2a                	je     c001edcc <ACPI::open(int, int, void*)+0x44c>
c001eda2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001edaa:	74 20                	je     c001edcc <ACPI::open(int, int, void*)+0x44c>
c001edac:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001edb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb5:	83 c0 08             	add    eax,0x8
c001edb8:	8b 00                	mov    eax,DWORD PTR [eax]
c001edba:	83 ec 0c             	sub    esp,0xc
c001edbd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001edc4:	ff d0                	call   eax
c001edc6:	83 c4 10             	add    esp,0x10
c001edc9:	8d 76 00             	lea    esi,[esi+0x0]
c001edcc:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001edd1:	83 ec 08             	sub    esp,0x8
c001edd4:	68 f4 25 03 c0       	push   0xc00325f4
c001edd9:	50                   	push   eax
c001edda:	e8 c1 f1 ff ff       	call   c001dfa0 <findDataTable(unsigned char*, char*)>
c001eddf:	83 c4 10             	add    esp,0x10
c001ede2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001ede9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001edf1:	74 19                	je     c001ee0c <ACPI::open(int, int, void*)+0x48c>
c001edf3:	83 ec 08             	sub    esp,0x8
c001edf6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001edfd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001ee04:	e8 13 fb ff ff       	call   c001e91c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001ee09:	83 c4 10             	add    esp,0x10
c001ee0c:	b8 00 00 00 00       	mov    eax,0x0
c001ee11:	81 c4 70 01 00 00    	add    esp,0x170
c001ee17:	5b                   	pop    ebx
c001ee18:	5e                   	pop    esi
c001ee19:	5f                   	pop    edi
c001ee1a:	c3                   	ret    
c001ee1b:	90                   	nop

c001ee1c <CPU::close(int, int, void*)>:
c001ee1c:	31 c0                	xor    eax,eax
c001ee1e:	c3                   	ret    
c001ee1f:	90                   	nop

c001ee20 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ee20:	60                   	pusha  
c001ee21:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee2d:	9c                   	pushf  
c001ee2e:	fa                   	cli    
c001ee2f:	0f 09                	wbinvd 
c001ee31:	0f 30                	wrmsr  
c001ee33:	9d                   	popf   
c001ee34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee38:	89 02                	mov    DWORD PTR [edx],eax
c001ee3a:	61                   	popa   
c001ee3b:	c3                   	ret    

c001ee3c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ee3c:	60                   	pusha  
c001ee3d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee41:	9c                   	pushf  
c001ee42:	fa                   	cli    
c001ee43:	0f 09                	wbinvd 
c001ee45:	31 c0                	xor    eax,eax
c001ee47:	31 d2                	xor    edx,edx
c001ee49:	0f 32                	rdmsr  
c001ee4b:	9d                   	popf   
c001ee4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee50:	89 02                	mov    DWORD PTR [edx],eax
c001ee52:	61                   	popa   
c001ee53:	c3                   	ret    

c001ee54 <CPU::AMD_K6_writeback(int, int, int)>:
c001ee54:	56                   	push   esi
c001ee55:	53                   	push   ebx
c001ee56:	83 ec 10             	sub    esp,0x10
c001ee59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee5d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ee62:	75 5d                	jne    c001eec1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee64:	83 f8 08             	cmp    eax,0x8
c001ee67:	75 09                	jne    c001ee72 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ee69:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ee6e:	7e 13                	jle    c001ee83 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee70:	eb 30                	jmp    c001eea2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee72:	83 f8 06             	cmp    eax,0x6
c001ee75:	7c 4a                	jl     c001eec1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee77:	83 f8 07             	cmp    eax,0x7
c001ee7a:	7e 07                	jle    c001ee83 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee7c:	83 f8 09             	cmp    eax,0x9
c001ee7f:	74 21                	je     c001eea2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee81:	eb 3e                	jmp    c001eec1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee83:	89 e6                	mov    esi,esp
c001ee85:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001ee8b:	56                   	push   esi
c001ee8c:	c1 eb 15             	shr    ebx,0x15
c001ee8f:	68 82 00 00 c0       	push   0xc0000082
c001ee94:	83 e3 7e             	and    ebx,0x7e
c001ee97:	e8 a0 ff ff ff       	call   c001ee3c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ee9c:	56                   	push   esi
c001ee9d:	6a 00                	push   0x0
c001ee9f:	53                   	push   ebx
c001eea0:	eb 12                	jmp    c001eeb4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001eea2:	89 e3                	mov    ebx,esp
c001eea4:	53                   	push   ebx
c001eea5:	68 82 00 00 c0       	push   0xc0000082
c001eeaa:	e8 8d ff ff ff       	call   c001ee3c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001eeaf:	53                   	push   ebx
c001eeb0:	6a 00                	push   0x0
c001eeb2:	6a 00                	push   0x0
c001eeb4:	68 82 00 00 c0       	push   0xc0000082
c001eeb9:	e8 62 ff ff ff       	call   c001ee20 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001eebe:	83 c4 18             	add    esp,0x18
c001eec1:	83 c4 10             	add    esp,0x10
c001eec4:	5b                   	pop    ebx
c001eec5:	5e                   	pop    esi
c001eec6:	c3                   	ret    
c001eec7:	90                   	nop

c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001eec8:	55                   	push   ebp
c001eec9:	57                   	push   edi
c001eeca:	56                   	push   esi
c001eecb:	53                   	push   ebx
c001eecc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eed0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001eed4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001eed8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001eedc:	39 05 b8 3c 03 c0    	cmp    DWORD PTR ds:0xc0033cb8,eax
c001eee2:	75 23                	jne    c001ef07 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001eee4:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001eee9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eeed:	89 06                	mov    DWORD PTR [esi],eax
c001eeef:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001eef4:	89 07                	mov    DWORD PTR [edi],eax
c001eef6:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001eefb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001eefe:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001ef03:	89 02                	mov    DWORD PTR [edx],eax
c001ef05:	eb 3f                	jmp    c001ef46 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001ef07:	31 c9                	xor    ecx,ecx
c001ef09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef0d:	0f a2                	cpuid  
c001ef0f:	89 06                	mov    DWORD PTR [esi],eax
c001ef11:	89 1f                	mov    DWORD PTR [edi],ebx
c001ef13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ef17:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ef1a:	89 10                	mov    DWORD PTR [eax],edx
c001ef1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef20:	a3 b8 3c 03 c0       	mov    ds:0xc0033cb8,eax
c001ef25:	8b 06                	mov    eax,DWORD PTR [esi]
c001ef27:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ef2c:	8b 07                	mov    eax,DWORD PTR [edi]
c001ef2e:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ef33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ef36:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ef3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ef3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef41:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ef46:	5b                   	pop    ebx
c001ef47:	5e                   	pop    esi
c001ef48:	5f                   	pop    edi
c001ef49:	5d                   	pop    ebp
c001ef4a:	c3                   	ret    
c001ef4b:	90                   	nop

c001ef4c <CPU::cpuidCheckEDX(unsigned int)>:
c001ef4c:	83 ec 10             	sub    esp,0x10
c001ef4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef53:	50                   	push   eax
c001ef54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef58:	50                   	push   eax
c001ef59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef5d:	50                   	push   eax
c001ef5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef62:	50                   	push   eax
c001ef63:	6a 01                	push   0x1
c001ef65:	e8 5e ff ff ff       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef6e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001ef72:	0f 95 c0             	setne  al
c001ef75:	83 c4 24             	add    esp,0x24
c001ef78:	c3                   	ret    
c001ef79:	90                   	nop

c001ef7a <CPU::cpuidCheckECX(unsigned int)>:
c001ef7a:	83 ec 10             	sub    esp,0x10
c001ef7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef81:	50                   	push   eax
c001ef82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef86:	50                   	push   eax
c001ef87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef8b:	50                   	push   eax
c001ef8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef90:	50                   	push   eax
c001ef91:	6a 01                	push   0x1
c001ef93:	e8 30 ff ff ff       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef9c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001efa0:	0f 95 c0             	setne  al
c001efa3:	83 c4 24             	add    esp,0x24
c001efa6:	c3                   	ret    
c001efa7:	90                   	nop

c001efa8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001efa8:	83 ec 10             	sub    esp,0x10
c001efab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efaf:	50                   	push   eax
c001efb0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efb4:	50                   	push   eax
c001efb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efb9:	50                   	push   eax
c001efba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efbe:	50                   	push   eax
c001efbf:	6a 07                	push   0x7
c001efc1:	e8 02 ff ff ff       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001efca:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001efce:	0f 95 c0             	setne  al
c001efd1:	83 c4 24             	add    esp,0x24
c001efd4:	c3                   	ret    
c001efd5:	90                   	nop

c001efd6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001efd6:	83 ec 10             	sub    esp,0x10
c001efd9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efdd:	50                   	push   eax
c001efde:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efe2:	50                   	push   eax
c001efe3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efe7:	50                   	push   eax
c001efe8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efec:	50                   	push   eax
c001efed:	6a 07                	push   0x7
c001efef:	e8 d4 fe ff ff       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eff4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eff8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001effc:	0f 95 c0             	setne  al
c001efff:	83 c4 24             	add    esp,0x24
c001f002:	c3                   	ret    
c001f003:	90                   	nop

c001f004 <CPU::CPU()>:
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00b:	83 ec 08             	sub    esp,0x8
c001f00e:	68 b5 27 03 c0       	push   0xc00327b5
c001f013:	50                   	push   eax
c001f014:	e8 27 c4 ff ff       	call   c001b440 <Device::Device(char const*)>
c001f019:	83 c4 10             	add    esp,0x10
c001f01c:	ba 48 28 03 c0       	mov    edx,0xc0032848
c001f021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f025:	89 10                	mov    DWORD PTR [eax],edx
c001f027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f039:	05 78 01 00 00       	add    eax,0x178
c001f03e:	83 ec 0c             	sub    esp,0xc
c001f041:	50                   	push   eax
c001f042:	e8 1d 6c ff ff       	call   c0015c64 <GDT::GDT()>
c001f047:	83 c4 10             	add    esp,0x10
c001f04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04e:	05 7c 09 00 00       	add    eax,0x97c
c001f053:	83 ec 0c             	sub    esp,0xc
c001f056:	50                   	push   eax
c001f057:	e8 58 6e ff ff       	call   c0015eb4 <IDT::IDT()>
c001f05c:	83 c4 10             	add    esp,0x10
c001f05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f063:	05 7c 11 00 00       	add    eax,0x117c
c001f068:	83 ec 0c             	sub    esp,0xc
c001f06b:	50                   	push   eax
c001f06c:	e8 eb 87 ff ff       	call   c001785c <TSS::TSS()>
c001f071:	83 c4 10             	add    esp,0x10
c001f074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f078:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f083:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f08d:	90                   	nop
c001f08e:	83 c4 0c             	add    esp,0xc
c001f091:	c3                   	ret    

c001f092 <CPU::displayFeatures()>:
c001f092:	c3                   	ret    
c001f093:	90                   	nop

c001f094 <CPU::detectFeatures()>:
c001f094:	55                   	push   ebp
c001f095:	57                   	push   edi
c001f096:	56                   	push   esi
c001f097:	53                   	push   ebx
c001f098:	83 ec 30             	sub    esp,0x30
c001f09b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f09f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f0a9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f0b0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f0b6:	6a 0d                	push   0xd
c001f0b8:	6a 00                	push   0x0
c001f0ba:	55                   	push   ebp
c001f0bb:	e8 30 14 fe ff       	call   c00004f0 <memset>
c001f0c0:	83 c4 10             	add    esp,0x10
c001f0c3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f0c8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f0cf:	0f 84 db 05 00 00    	je     c001f6b0 <CPU::detectFeatures()+0x61c>
c001f0d5:	83 ec 0c             	sub    esp,0xc
c001f0d8:	89 ef                	mov    edi,ebp
c001f0da:	6a 10                	push   0x10
c001f0dc:	e8 6b fe ff ff       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c001f0e1:	83 e0 01             	and    eax,0x1
c001f0e4:	8d 14 00             	lea    edx,[eax+eax*1]
c001f0e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0ed:	83 e0 fd             	and    eax,0xfffffffd
c001f0f0:	09 d0                	or     eax,edx
c001f0f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0f8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f0ff:	e8 48 fe ff ff       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c001f104:	83 e0 01             	and    eax,0x1
c001f107:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f10e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f114:	83 e0 fb             	and    eax,0xfffffffb
c001f117:	09 d0                	or     eax,edx
c001f119:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f11f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f126:	e8 21 fe ff ff       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c001f12b:	83 e0 01             	and    eax,0x1
c001f12e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f135:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f13b:	83 e0 f7             	and    eax,0xfffffff7
c001f13e:	09 d0                	or     eax,edx
c001f140:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f146:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f14d:	e8 fa fd ff ff       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c001f152:	83 e0 01             	and    eax,0x1
c001f155:	c1 e0 04             	shl    eax,0x4
c001f158:	89 c2                	mov    edx,eax
c001f15a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f160:	83 e0 ef             	and    eax,0xffffffef
c001f163:	09 d0                	or     eax,edx
c001f165:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f16b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f172:	e8 d5 fd ff ff       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c001f177:	83 e0 01             	and    eax,0x1
c001f17a:	c1 e0 05             	shl    eax,0x5
c001f17d:	89 c2                	mov    edx,eax
c001f17f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f185:	83 e0 df             	and    eax,0xffffffdf
c001f188:	09 d0                	or     eax,edx
c001f18a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f190:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f197:	e8 b0 fd ff ff       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c001f19c:	83 e0 01             	and    eax,0x1
c001f19f:	8d 14 00             	lea    edx,[eax+eax*1]
c001f1a2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f1a8:	83 e0 fd             	and    eax,0xfffffffd
c001f1ab:	09 d0                	or     eax,edx
c001f1ad:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f1b3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f1ba:	e8 8d fd ff ff       	call   c001ef4c <CPU::cpuidCheckEDX(unsigned int)>
c001f1bf:	83 e0 01             	and    eax,0x1
c001f1c2:	c1 e0 06             	shl    eax,0x6
c001f1c5:	89 c2                	mov    edx,eax
c001f1c7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f1cd:	83 e0 bf             	and    eax,0xffffffbf
c001f1d0:	09 d0                	or     eax,edx
c001f1d2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f1d8:	58                   	pop    eax
c001f1d9:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1dd:	50                   	push   eax
c001f1de:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1e2:	50                   	push   eax
c001f1e3:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f1e7:	56                   	push   esi
c001f1e8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1ec:	50                   	push   eax
c001f1ed:	6a 00                	push   0x0
c001f1ef:	e8 d4 fc ff ff       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1f4:	b8 04 00 00 00       	mov    eax,0x4
c001f1f9:	89 c1                	mov    ecx,eax
c001f1fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1fd:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f203:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f207:	89 c1                	mov    ecx,eax
c001f209:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f20b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f211:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f215:	89 c1                	mov    ecx,eax
c001f217:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f219:	83 c4 18             	add    esp,0x18
c001f21c:	68 c4 26 03 c0       	push   0xc00326c4
c001f221:	55                   	push   ebp
c001f222:	e8 29 15 fe ff       	call   c0000750 <strcmp>
c001f227:	83 c4 10             	add    esp,0x10
c001f22a:	85 c0                	test   eax,eax
c001f22c:	75 0f                	jne    c001f23d <CPU::detectFeatures()+0x1a9>
c001f22e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f238:	e9 22 02 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f23d:	50                   	push   eax
c001f23e:	50                   	push   eax
c001f23f:	68 d1 26 03 c0       	push   0xc00326d1
c001f244:	55                   	push   ebp
c001f245:	e8 06 15 fe ff       	call   c0000750 <strcmp>
c001f24a:	83 c4 10             	add    esp,0x10
c001f24d:	85 c0                	test   eax,eax
c001f24f:	74 dd                	je     c001f22e <CPU::detectFeatures()+0x19a>
c001f251:	50                   	push   eax
c001f252:	50                   	push   eax
c001f253:	68 de 26 03 c0       	push   0xc00326de
c001f258:	55                   	push   ebp
c001f259:	e8 f2 14 fe ff       	call   c0000750 <strcmp>
c001f25e:	83 c4 10             	add    esp,0x10
c001f261:	85 c0                	test   eax,eax
c001f263:	74 2a                	je     c001f28f <CPU::detectFeatures()+0x1fb>
c001f265:	50                   	push   eax
c001f266:	50                   	push   eax
c001f267:	68 eb 26 03 c0       	push   0xc00326eb
c001f26c:	55                   	push   ebp
c001f26d:	e8 de 14 fe ff       	call   c0000750 <strcmp>
c001f272:	83 c4 10             	add    esp,0x10
c001f275:	85 c0                	test   eax,eax
c001f277:	74 16                	je     c001f28f <CPU::detectFeatures()+0x1fb>
c001f279:	50                   	push   eax
c001f27a:	50                   	push   eax
c001f27b:	68 f8 26 03 c0       	push   0xc00326f8
c001f280:	55                   	push   ebp
c001f281:	e8 ca 14 fe ff       	call   c0000750 <strcmp>
c001f286:	83 c4 10             	add    esp,0x10
c001f289:	85 c0                	test   eax,eax
c001f28b:	74 48                	je     c001f2d5 <CPU::detectFeatures()+0x241>
c001f28d:	eb 0f                	jmp    c001f29e <CPU::detectFeatures()+0x20a>
c001f28f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f299:	e9 c1 01 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f29e:	50                   	push   eax
c001f29f:	50                   	push   eax
c001f2a0:	68 05 27 03 c0       	push   0xc0032705
c001f2a5:	55                   	push   ebp
c001f2a6:	e8 a5 14 fe ff       	call   c0000750 <strcmp>
c001f2ab:	83 c4 10             	add    esp,0x10
c001f2ae:	85 c0                	test   eax,eax
c001f2b0:	74 23                	je     c001f2d5 <CPU::detectFeatures()+0x241>
c001f2b2:	57                   	push   edi
c001f2b3:	57                   	push   edi
c001f2b4:	68 12 27 03 c0       	push   0xc0032712
c001f2b9:	55                   	push   ebp
c001f2ba:	e8 91 14 fe ff       	call   c0000750 <strcmp>
c001f2bf:	83 c4 10             	add    esp,0x10
c001f2c2:	85 c0                	test   eax,eax
c001f2c4:	75 1e                	jne    c001f2e4 <CPU::detectFeatures()+0x250>
c001f2c6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f2d0:	e9 8a 01 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f2d5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f2df:	e9 7b 01 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f2e4:	56                   	push   esi
c001f2e5:	56                   	push   esi
c001f2e6:	68 1f 27 03 c0       	push   0xc003271f
c001f2eb:	55                   	push   ebp
c001f2ec:	e8 5f 14 fe ff       	call   c0000750 <strcmp>
c001f2f1:	83 c4 10             	add    esp,0x10
c001f2f4:	85 c0                	test   eax,eax
c001f2f6:	75 0f                	jne    c001f307 <CPU::detectFeatures()+0x273>
c001f2f8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f302:	e9 58 01 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f307:	51                   	push   ecx
c001f308:	51                   	push   ecx
c001f309:	68 de 26 03 c0       	push   0xc00326de
c001f30e:	55                   	push   ebp
c001f30f:	e8 3c 14 fe ff       	call   c0000750 <strcmp>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	85 c0                	test   eax,eax
c001f319:	75 0f                	jne    c001f32a <CPU::detectFeatures()+0x296>
c001f31b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f325:	e9 35 01 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f32a:	52                   	push   edx
c001f32b:	52                   	push   edx
c001f32c:	68 2c 27 03 c0       	push   0xc003272c
c001f331:	55                   	push   ebp
c001f332:	e8 19 14 fe ff       	call   c0000750 <strcmp>
c001f337:	83 c4 10             	add    esp,0x10
c001f33a:	85 c0                	test   eax,eax
c001f33c:	75 0f                	jne    c001f34d <CPU::detectFeatures()+0x2b9>
c001f33e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f348:	e9 12 01 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f34d:	50                   	push   eax
c001f34e:	50                   	push   eax
c001f34f:	68 39 27 03 c0       	push   0xc0032739
c001f354:	55                   	push   ebp
c001f355:	e8 f6 13 fe ff       	call   c0000750 <strcmp>
c001f35a:	83 c4 10             	add    esp,0x10
c001f35d:	85 c0                	test   eax,eax
c001f35f:	75 0f                	jne    c001f370 <CPU::detectFeatures()+0x2dc>
c001f361:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f36b:	e9 ef 00 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f370:	50                   	push   eax
c001f371:	50                   	push   eax
c001f372:	68 46 27 03 c0       	push   0xc0032746
c001f377:	55                   	push   ebp
c001f378:	e8 d3 13 fe ff       	call   c0000750 <strcmp>
c001f37d:	83 c4 10             	add    esp,0x10
c001f380:	85 c0                	test   eax,eax
c001f382:	75 0f                	jne    c001f393 <CPU::detectFeatures()+0x2ff>
c001f384:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f38e:	e9 cc 00 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f393:	50                   	push   eax
c001f394:	50                   	push   eax
c001f395:	68 53 27 03 c0       	push   0xc0032753
c001f39a:	55                   	push   ebp
c001f39b:	e8 b0 13 fe ff       	call   c0000750 <strcmp>
c001f3a0:	83 c4 10             	add    esp,0x10
c001f3a3:	85 c0                	test   eax,eax
c001f3a5:	75 0f                	jne    c001f3b6 <CPU::detectFeatures()+0x322>
c001f3a7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f3b1:	e9 a9 00 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f3b6:	50                   	push   eax
c001f3b7:	50                   	push   eax
c001f3b8:	68 60 27 03 c0       	push   0xc0032760
c001f3bd:	55                   	push   ebp
c001f3be:	e8 8d 13 fe ff       	call   c0000750 <strcmp>
c001f3c3:	83 c4 10             	add    esp,0x10
c001f3c6:	85 c0                	test   eax,eax
c001f3c8:	75 0f                	jne    c001f3d9 <CPU::detectFeatures()+0x345>
c001f3ca:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f3d4:	e9 86 00 00 00       	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f3d9:	50                   	push   eax
c001f3da:	50                   	push   eax
c001f3db:	68 6d 27 03 c0       	push   0xc003276d
c001f3e0:	55                   	push   ebp
c001f3e1:	e8 6a 13 fe ff       	call   c0000750 <strcmp>
c001f3e6:	83 c4 10             	add    esp,0x10
c001f3e9:	85 c0                	test   eax,eax
c001f3eb:	75 0c                	jne    c001f3f9 <CPU::detectFeatures()+0x365>
c001f3ed:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f3f7:	eb 66                	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f3f9:	50                   	push   eax
c001f3fa:	50                   	push   eax
c001f3fb:	68 7a 27 03 c0       	push   0xc003277a
c001f400:	55                   	push   ebp
c001f401:	e8 4a 13 fe ff       	call   c0000750 <strcmp>
c001f406:	83 c4 10             	add    esp,0x10
c001f409:	85 c0                	test   eax,eax
c001f40b:	75 0c                	jne    c001f419 <CPU::detectFeatures()+0x385>
c001f40d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f417:	eb 46                	jmp    c001f45f <CPU::detectFeatures()+0x3cb>
c001f419:	57                   	push   edi
c001f41a:	57                   	push   edi
c001f41b:	68 87 27 03 c0       	push   0xc0032787
c001f420:	55                   	push   ebp
c001f421:	e8 2a 13 fe ff       	call   c0000750 <strcmp>
c001f426:	83 c4 10             	add    esp,0x10
c001f429:	85 c0                	test   eax,eax
c001f42b:	74 e0                	je     c001f40d <CPU::detectFeatures()+0x379>
c001f42d:	56                   	push   esi
c001f42e:	56                   	push   esi
c001f42f:	68 94 27 03 c0       	push   0xc0032794
c001f434:	55                   	push   ebp
c001f435:	e8 16 13 fe ff       	call   c0000750 <strcmp>
c001f43a:	83 c4 10             	add    esp,0x10
c001f43d:	85 c0                	test   eax,eax
c001f43f:	74 cc                	je     c001f40d <CPU::detectFeatures()+0x379>
c001f441:	51                   	push   ecx
c001f442:	51                   	push   ecx
c001f443:	68 a1 27 03 c0       	push   0xc00327a1
c001f448:	55                   	push   ebp
c001f449:	e8 02 13 fe ff       	call   c0000750 <strcmp>
c001f44e:	83 c4 10             	add    esp,0x10
c001f451:	85 c0                	test   eax,eax
c001f453:	74 b8                	je     c001f40d <CPU::detectFeatures()+0x379>
c001f455:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f45f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f464:	0f 86 be 00 00 00    	jbe    c001f528 <CPU::detectFeatures()+0x494>
c001f46a:	83 ec 0c             	sub    esp,0xc
c001f46d:	68 80 00 00 00       	push   0x80
c001f472:	e8 31 fb ff ff       	call   c001efa8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f477:	83 e0 01             	and    eax,0x1
c001f47a:	c1 e0 06             	shl    eax,0x6
c001f47d:	89 c2                	mov    edx,eax
c001f47f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f485:	83 e0 bf             	and    eax,0xffffffbf
c001f488:	09 d0                	or     eax,edx
c001f48a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f490:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f497:	e8 0c fb ff ff       	call   c001efa8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f49c:	83 e0 01             	and    eax,0x1
c001f49f:	c1 e0 04             	shl    eax,0x4
c001f4a2:	89 c2                	mov    edx,eax
c001f4a4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4aa:	83 e0 ef             	and    eax,0xffffffef
c001f4ad:	09 d0                	or     eax,edx
c001f4af:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4b5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f4bc:	e8 e7 fa ff ff       	call   c001efa8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f4c1:	89 c2                	mov    edx,eax
c001f4c3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f4c9:	c1 e2 07             	shl    edx,0x7
c001f4cc:	83 e0 7f             	and    eax,0x7f
c001f4cf:	09 d0                	or     eax,edx
c001f4d1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f4d7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f4de:	e8 f3 fa ff ff       	call   c001efd6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f4e3:	83 e0 01             	and    eax,0x1
c001f4e6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f4ed:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4f3:	83 e0 f7             	and    eax,0xfffffff7
c001f4f6:	09 d0                	or     eax,edx
c001f4f8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4fe:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f505:	e8 cc fa ff ff       	call   c001efd6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f50a:	83 c4 10             	add    esp,0x10
c001f50d:	83 e0 01             	and    eax,0x1
c001f510:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f517:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f51d:	83 e0 fb             	and    eax,0xfffffffb
c001f520:	09 d0                	or     eax,edx
c001f522:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f528:	83 ec 0c             	sub    esp,0xc
c001f52b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f52f:	50                   	push   eax
c001f530:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f534:	50                   	push   eax
c001f535:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f539:	57                   	push   edi
c001f53a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f53e:	56                   	push   esi
c001f53f:	6a 01                	push   0x1
c001f541:	e8 82 f9 ff ff       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f546:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f54a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f550:	89 c1                	mov    ecx,eax
c001f552:	83 e2 f0             	and    edx,0xfffffff0
c001f555:	83 e1 0f             	and    ecx,0xf
c001f558:	09 ca                	or     edx,ecx
c001f55a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f560:	89 c2                	mov    edx,eax
c001f562:	c1 ea 04             	shr    edx,0x4
c001f565:	83 e2 0f             	and    edx,0xf
c001f568:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f56c:	89 d1                	mov    ecx,edx
c001f56e:	83 c4 20             	add    esp,0x20
c001f571:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f577:	c1 e1 06             	shl    ecx,0x6
c001f57a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f580:	09 ca                	or     edx,ecx
c001f582:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f589:	89 c2                	mov    edx,eax
c001f58b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f591:	c1 ea 08             	shr    edx,0x8
c001f594:	83 e1 3f             	and    ecx,0x3f
c001f597:	83 e2 0f             	and    edx,0xf
c001f59a:	89 d5                	mov    ebp,edx
c001f59c:	83 e5 03             	and    ebp,0x3
c001f59f:	c1 e5 06             	shl    ebp,0x6
c001f5a2:	09 e9                	or     ecx,ebp
c001f5a4:	89 d5                	mov    ebp,edx
c001f5a6:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f5ac:	c1 ed 02             	shr    ebp,0x2
c001f5af:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f5b5:	83 e1 c0             	and    ecx,0xffffffc0
c001f5b8:	09 e9                	or     ecx,ebp
c001f5ba:	89 c5                	mov    ebp,eax
c001f5bc:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f5c2:	c1 ed 08             	shr    ebp,0x8
c001f5c5:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f5cb:	83 e5 30             	and    ebp,0x30
c001f5ce:	83 e1 cf             	and    ecx,0xffffffcf
c001f5d1:	09 e9                	or     ecx,ebp
c001f5d3:	83 fa 06             	cmp    edx,0x6
c001f5d6:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f5dc:	74 05                	je     c001f5e3 <CPU::detectFeatures()+0x54f>
c001f5de:	83 fa 0f             	cmp    edx,0xf
c001f5e1:	75 64                	jne    c001f647 <CPU::detectFeatures()+0x5b3>
c001f5e3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f5e9:	89 c1                	mov    ecx,eax
c001f5eb:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f5f1:	c1 e9 10             	shr    ecx,0x10
c001f5f4:	c1 e1 04             	shl    ecx,0x4
c001f5f7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f5fb:	0f b6 c9             	movzx  ecx,cl
c001f5fe:	c1 e1 06             	shl    ecx,0x6
c001f601:	09 e9                	or     ecx,ebp
c001f603:	83 fa 0f             	cmp    edx,0xf
c001f606:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f60d:	75 38                	jne    c001f647 <CPU::detectFeatures()+0x5b3>
c001f60f:	c1 e8 14             	shr    eax,0x14
c001f612:	83 c0 0f             	add    eax,0xf
c001f615:	0f b6 c0             	movzx  eax,al
c001f618:	89 c2                	mov    edx,eax
c001f61a:	c1 e8 02             	shr    eax,0x2
c001f61d:	83 e2 03             	and    edx,0x3
c001f620:	89 d1                	mov    ecx,edx
c001f622:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f628:	c1 e1 06             	shl    ecx,0x6
c001f62b:	83 e2 3f             	and    edx,0x3f
c001f62e:	09 ca                	or     edx,ecx
c001f630:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f636:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f63c:	83 e2 c0             	and    edx,0xffffffc0
c001f63f:	09 d0                	or     eax,edx
c001f641:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f647:	83 ec 0c             	sub    esp,0xc
c001f64a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f650:	83 c8 07             	or     eax,0x7
c001f653:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f659:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f65d:	50                   	push   eax
c001f65e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f662:	55                   	push   ebp
c001f663:	57                   	push   edi
c001f664:	56                   	push   esi
c001f665:	68 00 00 00 80       	push   0x80000000
c001f66a:	e8 59 f8 ff ff       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f66f:	83 c4 20             	add    esp,0x20
c001f672:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f67a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f67e:	76 1e                	jbe    c001f69e <CPU::detectFeatures()+0x60a>
c001f680:	83 ec 0c             	sub    esp,0xc
c001f683:	50                   	push   eax
c001f684:	55                   	push   ebp
c001f685:	57                   	push   edi
c001f686:	56                   	push   esi
c001f687:	68 01 00 00 80       	push   0x80000001
c001f68c:	e8 37 f8 ff ff       	call   c001eec8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f691:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f69b:	83 c4 20             	add    esp,0x20
c001f69e:	52                   	push   edx
c001f69f:	52                   	push   edx
c001f6a0:	68 ad 27 03 c0       	push   0xc00327ad
c001f6a5:	53                   	push   ebx
c001f6a6:	e8 87 bd ff ff       	call   c001b432 <Device::setName(char const*)>
c001f6ab:	83 c4 10             	add    esp,0x10
c001f6ae:	eb 69                	jmp    c001f719 <CPU::detectFeatures()+0x685>
c001f6b0:	50                   	push   eax
c001f6b1:	50                   	push   eax
c001f6b2:	68 12 27 03 c0       	push   0xc0032712
c001f6b7:	55                   	push   ebp
c001f6b8:	e8 83 0f fe ff       	call   c0000640 <strcpy>
c001f6bd:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f6c7:	e8 f7 0a fe ff       	call   c00001c3 <is486>
c001f6cc:	83 c4 10             	add    esp,0x10
c001f6cf:	85 c0                	test   eax,eax
c001f6d1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f6d7:	74 1f                	je     c001f6f8 <CPU::detectFeatures()+0x664>
c001f6d9:	83 c8 07             	or     eax,0x7
c001f6dc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f6e2:	0f 20 c0             	mov    eax,cr0
c001f6e5:	83 e0 14             	and    eax,0x14
c001f6e8:	83 f8 04             	cmp    eax,0x4
c001f6eb:	75 10                	jne    c001f6fd <CPU::detectFeatures()+0x669>
c001f6ed:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f6f3:	83 e0 fd             	and    eax,0xfffffffd
c001f6f6:	eb 1b                	jmp    c001f713 <CPU::detectFeatures()+0x67f>
c001f6f8:	83 e0 f8             	and    eax,0xfffffff8
c001f6fb:	eb df                	jmp    c001f6dc <CPU::detectFeatures()+0x648>
c001f6fd:	e8 9c 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f702:	83 e0 01             	and    eax,0x1
c001f705:	8d 14 00             	lea    edx,[eax+eax*1]
c001f708:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f70e:	83 e0 fd             	and    eax,0xfffffffd
c001f711:	09 d0                	or     eax,edx
c001f713:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f719:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f720:	74 17                	je     c001f739 <CPU::detectFeatures()+0x6a5>
c001f722:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f728:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f72e:	83 c8 10             	or     eax,0x10
c001f731:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f737:	eb 20                	jmp    c001f759 <CPU::detectFeatures()+0x6c5>
c001f739:	e8 60 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f73e:	83 e0 01             	and    eax,0x1
c001f741:	8d 14 00             	lea    edx,[eax+eax*1]
c001f744:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f74a:	83 e0 fd             	and    eax,0xfffffffd
c001f74d:	09 d0                	or     eax,edx
c001f74f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f755:	a8 02                	test   al,0x2
c001f757:	75 c9                	jne    c001f722 <CPU::detectFeatures()+0x68e>
c001f759:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f760:	83 c4 2c             	add    esp,0x2c
c001f763:	5b                   	pop    ebx
c001f764:	5e                   	pop    esi
c001f765:	5f                   	pop    edi
c001f766:	5d                   	pop    ebp
c001f767:	c3                   	ret    

c001f768 <CPU::setupSMEP()>:
c001f768:	0f 20 e0             	mov    eax,cr4
c001f76b:	0d 00 00 10 00       	or     eax,0x100000
c001f770:	0f 22 e0             	mov    cr4,eax
c001f773:	c3                   	ret    

c001f774 <CPU::setupUMIP()>:
c001f774:	0f 20 e0             	mov    eax,cr4
c001f777:	80 cc 08             	or     ah,0x8
c001f77a:	0f 22 e0             	mov    cr4,eax
c001f77d:	c3                   	ret    

c001f77e <CPU::setupTSC()>:
c001f77e:	0f 20 e0             	mov    eax,cr4
c001f781:	83 c8 04             	or     eax,0x4
c001f784:	0f 22 e0             	mov    cr4,eax
c001f787:	c3                   	ret    

c001f788 <CPU::setupLargePages()>:
c001f788:	0f 20 e0             	mov    eax,cr4
c001f78b:	83 c8 10             	or     eax,0x10
c001f78e:	0f 22 e0             	mov    cr4,eax
c001f791:	c3                   	ret    

c001f792 <CPU::setupPAT()>:
c001f792:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f797:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f79e:	74 2c                	je     c001f7cc <CPU::setupPAT()+0x3a>
c001f7a0:	53                   	push   ebx
c001f7a1:	83 ec 10             	sub    esp,0x10
c001f7a4:	68 77 02 00 00       	push   0x277
c001f7a9:	50                   	push   eax
c001f7aa:	e8 19 62 ff ff       	call   c00159c8 <Computer::rdmsr(unsigned int)>
c001f7af:	83 e2 f8             	and    edx,0xfffffff8
c001f7b2:	83 ca 01             	or     edx,0x1
c001f7b5:	52                   	push   edx
c001f7b6:	50                   	push   eax
c001f7b7:	68 77 02 00 00       	push   0x277
c001f7bc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f7c2:	e8 2d 62 ff ff       	call   c00159f4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001f7c7:	83 c4 28             	add    esp,0x28
c001f7ca:	5b                   	pop    ebx
c001f7cb:	c3                   	ret    
c001f7cc:	c3                   	ret    
c001f7cd:	90                   	nop

c001f7ce <CPU::setupMTRR()>:
c001f7ce:	c3                   	ret    
c001f7cf:	90                   	nop

c001f7d0 <CPU::setupGlobalPages()>:
c001f7d0:	0f 20 e0             	mov    eax,cr4
c001f7d3:	0c 80                	or     al,0x80
c001f7d5:	0f 22 e0             	mov    cr4,eax
c001f7d8:	c3                   	ret    
c001f7d9:	90                   	nop

c001f7da <CPU::allowUsermodeDataAccess()>:
c001f7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7de:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7e5:	74 03                	je     c001f7ea <CPU::allowUsermodeDataAccess()+0x10>
c001f7e7:	0f 01 cb             	stac   
c001f7ea:	c3                   	ret    
c001f7eb:	90                   	nop

c001f7ec <CPU::prohibitUsermodeDataAccess()>:
c001f7ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7f7:	74 03                	je     c001f7fc <CPU::prohibitUsermodeDataAccess()+0x10>
c001f7f9:	0f 01 ca             	clac   
c001f7fc:	c3                   	ret    
c001f7fd:	90                   	nop

c001f7fe <CPU::setupSMAP()>:
c001f7fe:	0f 20 e0             	mov    eax,cr4
c001f801:	0d 00 00 20 00       	or     eax,0x200000
c001f806:	0f 22 e0             	mov    cr4,eax
c001f809:	eb e1                	jmp    c001f7ec <CPU::prohibitUsermodeDataAccess()>
c001f80b:	90                   	nop

c001f80c <CPU::setupFeatures()>:
c001f80c:	53                   	push   ebx
c001f80d:	83 ec 08             	sub    esp,0x8
c001f810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f814:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f81b:	74 18                	je     c001f835 <CPU::setupFeatures()+0x29>
c001f81d:	83 ec 0c             	sub    esp,0xc
c001f820:	68 b9 27 03 c0       	push   0xc00327b9
c001f825:	e8 33 9a ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001f82a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f82d:	e8 42 ff ff ff       	call   c001f774 <CPU::setupUMIP()>
c001f832:	83 c4 10             	add    esp,0x10
c001f835:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f83c:	74 18                	je     c001f856 <CPU::setupFeatures()+0x4a>
c001f83e:	83 ec 0c             	sub    esp,0xc
c001f841:	68 c3 27 03 c0       	push   0xc00327c3
c001f846:	e8 12 9a ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001f84b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f84e:	e8 2b ff ff ff       	call   c001f77e <CPU::setupTSC()>
c001f853:	83 c4 10             	add    esp,0x10
c001f856:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f85d:	74 18                	je     c001f877 <CPU::setupFeatures()+0x6b>
c001f85f:	83 ec 0c             	sub    esp,0xc
c001f862:	68 cc 27 03 c0       	push   0xc00327cc
c001f867:	e8 f1 99 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001f86c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f86f:	e8 14 ff ff ff       	call   c001f788 <CPU::setupLargePages()>
c001f874:	83 c4 10             	add    esp,0x10
c001f877:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f87e:	74 18                	je     c001f898 <CPU::setupFeatures()+0x8c>
c001f880:	83 ec 0c             	sub    esp,0xc
c001f883:	68 d5 27 03 c0       	push   0xc00327d5
c001f888:	e8 d0 99 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001f88d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f890:	e8 3b ff ff ff       	call   c001f7d0 <CPU::setupGlobalPages()>
c001f895:	83 c4 10             	add    esp,0x10
c001f898:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f89f:	74 18                	je     c001f8b9 <CPU::setupFeatures()+0xad>
c001f8a1:	83 ec 0c             	sub    esp,0xc
c001f8a4:	68 e7 27 03 c0       	push   0xc00327e7
c001f8a9:	e8 af 99 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001f8ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8b1:	e8 dc fe ff ff       	call   c001f792 <CPU::setupPAT()>
c001f8b6:	83 c4 10             	add    esp,0x10
c001f8b9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f8c0:	74 11                	je     c001f8d3 <CPU::setupFeatures()+0xc7>
c001f8c2:	c7 44 24 10 f0 27 03 c0 	mov    DWORD PTR [esp+0x10],0xc00327f0
c001f8ca:	83 c4 08             	add    esp,0x8
c001f8cd:	5b                   	pop    ebx
c001f8ce:	e9 8a 99 ff ff       	jmp    c001925d <Dbg::kprintf(char const*, ...)>
c001f8d3:	83 c4 08             	add    esp,0x8
c001f8d6:	5b                   	pop    ebx
c001f8d7:	c3                   	ret    

c001f8d8 <CPU::open(int, int, void*)>:
c001f8d8:	55                   	push   ebp
c001f8d9:	57                   	push   edi
c001f8da:	56                   	push   esi
c001f8db:	53                   	push   ebx
c001f8dc:	83 ec 18             	sub    esp,0x18
c001f8df:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f8e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f8e7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f8eb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f8f1:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f8f7:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f8fd:	50                   	push   eax
c001f8fe:	e8 c3 63 ff ff       	call   c0015cc6 <GDT::setup()>
c001f903:	83 c4 0c             	add    esp,0xc
c001f906:	6a 00                	push   0x0
c001f908:	68 ef be ad de       	push   0xdeadbeef
c001f90d:	55                   	push   ebp
c001f90e:	e8 8d 7f ff ff       	call   c00178a0 <TSS::setup(unsigned long, unsigned long)>
c001f913:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f916:	e8 65 7f ff ff       	call   c0017880 <TSS::flush()>
c001f91b:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f921:	89 04 24             	mov    DWORD PTR [esp],eax
c001f924:	e8 01 66 ff ff       	call   c0015f2a <IDT::setup()>
c001f929:	b8 00 04 00 00       	mov    eax,0x400
c001f92e:	0f 23 f8             	mov    db7,eax
c001f931:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f93b:	e8 97 6d ff ff       	call   c00166d7 <Phys::allocatePage()>
c001f940:	83 c4 10             	add    esp,0x10
c001f943:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f949:	85 f6                	test   esi,esi
c001f94b:	89 38                	mov    DWORD PTR [eax],edi
c001f94d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f953:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f956:	74 10                	je     c001f968 <CPU::open(int, int, void*)+0x90>
c001f958:	50                   	push   eax
c001f959:	50                   	push   eax
c001f95a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f960:	56                   	push   esi
c001f961:	e8 60 88 ff ff       	call   c00181c6 <VAS::setCPUSpecific(unsigned long)>
c001f966:	eb 0d                	jmp    c001f975 <CPU::open(int, int, void*)+0x9d>
c001f968:	83 ec 0c             	sub    esp,0xc
c001f96b:	68 fa 27 03 c0       	push   0xc00327fa
c001f970:	e8 01 09 00 00       	call   c0020276 <KePanic(char const*)>
c001f975:	83 c4 10             	add    esp,0x10
c001f978:	83 ec 0c             	sub    esp,0xc
c001f97b:	68 08 28 03 c0       	push   0xc0032808
c001f980:	e8 8e 01 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001f985:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f988:	e8 07 f7 ff ff       	call   c001f094 <CPU::detectFeatures()>
c001f98d:	c7 04 24 2b 28 03 c0 	mov    DWORD PTR [esp],0xc003282b
c001f994:	e8 7a 01 00 00       	call   c001fb13 <KeSetBootMessage(char const*)>
c001f999:	e8 17 77 00 00       	call   c00270b5 <HalInitialise()>
c001f99e:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f9a3:	83 e0 10             	and    eax,0x10
c001f9a6:	83 f8 01             	cmp    eax,0x1
c001f9a9:	19 c0                	sbb    eax,eax
c001f9ab:	83 e0 46             	and    eax,0x46
c001f9ae:	83 c0 1e             	add    eax,0x1e
c001f9b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9b4:	e8 5c d3 ff ff       	call   c001cd15 <setupTimer(int)>
c001f9b9:	83 c4 10             	add    esp,0x10
c001f9bc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f9c2:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f9c9:	74 0c                	je     c001f9d7 <CPU::open(int, int, void*)+0xff>
c001f9cb:	83 ec 0c             	sub    esp,0xc
c001f9ce:	53                   	push   ebx
c001f9cf:	e8 38 fe ff ff       	call   c001f80c <CPU::setupFeatures()>
c001f9d4:	83 c4 10             	add    esp,0x10
c001f9d7:	83 c4 0c             	add    esp,0xc
c001f9da:	31 c0                	xor    eax,eax
c001f9dc:	5b                   	pop    ebx
c001f9dd:	5e                   	pop    esi
c001f9de:	5f                   	pop    edi
c001f9df:	5d                   	pop    ebp
c001f9e0:	c3                   	ret    

c001f9e1 <KeInitialiseAtexit()>:
c001f9e1:	83 ec 10             	sub    esp,0x10
c001f9e4:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f9ee:	6a 60                	push   0x60
c001f9f0:	6a 00                	push   0x0
c001f9f2:	68 20 f9 03 c0       	push   0xc003f920
c001f9f7:	e8 f4 0a fe ff       	call   c00004f0 <memset>
c001f9fc:	83 c4 1c             	add    esp,0x1c
c001f9ff:	c3                   	ret    

c001fa00 <KeRegisterAtexit(void (*)(void*), void*)>:
c001fa00:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001fa05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa09:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001fa10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa14:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001fa1b:	40                   	inc    eax
c001fa1c:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fa21:	83 f8 17             	cmp    eax,0x17
c001fa24:	7e 0d                	jle    c001fa33 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fa26:	c7 44 24 04 6c 28 03 c0 	mov    DWORD PTR [esp+0x4],0xc003286c
c001fa2e:	e9 43 08 00 00       	jmp    c0020276 <KePanic(char const*)>
c001fa33:	c3                   	ret    

c001fa34 <KeExecuteAtexit()>:
c001fa34:	53                   	push   ebx
c001fa35:	31 db                	xor    ebx,ebx
c001fa37:	83 ec 08             	sub    esp,0x8
c001fa3a:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fa40:	7e 50                	jle    c001fa92 <KeExecuteAtexit()+0x5e>
c001fa42:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fa49:	85 c0                	test   eax,eax
c001fa4b:	74 42                	je     c001fa8f <KeExecuteAtexit()+0x5b>
c001fa4d:	51                   	push   ecx
c001fa4e:	50                   	push   eax
c001fa4f:	53                   	push   ebx
c001fa50:	68 85 28 03 c0       	push   0xc0032885
c001fa55:	e8 03 98 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001fa5a:	58                   	pop    eax
c001fa5b:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fa62:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fa69:	c7 04 24 a7 28 03 c0 	mov    DWORD PTR [esp],0xc00328a7
c001fa70:	e8 e8 97 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001fa75:	c7 04 24 53 3a 03 c0 	mov    DWORD PTR [esp],0xc0033a53
c001fa7c:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fa87:	e8 d1 97 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001fa8c:	83 c4 10             	add    esp,0x10
c001fa8f:	43                   	inc    ebx
c001fa90:	eb a8                	jmp    c001fa3a <KeExecuteAtexit()+0x6>
c001fa92:	83 c4 08             	add    esp,0x8
c001fa95:	5b                   	pop    ebx
c001fa96:	c3                   	ret    

c001fa97 <KeDisplaySplashScreen()>:
c001fa97:	55                   	push   ebp
c001fa98:	bd 05 00 00 00       	mov    ebp,0x5
c001fa9d:	57                   	push   edi
c001fa9e:	bf 0a 00 00 00       	mov    edi,0xa
c001faa3:	56                   	push   esi
c001faa4:	31 f6                	xor    esi,esi
c001faa6:	53                   	push   ebx
c001faa7:	31 db                	xor    ebx,ebx
c001faa9:	83 ec 0c             	sub    esp,0xc
c001faac:	0f b6 96 c0 3c 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc340]
c001fab3:	89 d0                	mov    eax,edx
c001fab5:	85 d2                	test   edx,edx
c001fab7:	74 52                	je     c001fb0b <KeDisplaySplashScreen()+0x74>
c001fab9:	80 bb f6 3c 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc30a],0xdb
c001fac0:	75 13                	jne    c001fad5 <KeDisplaySplashScreen()+0x3e>
c001fac2:	0f b6 8b f5 3c 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc30b]
c001fac9:	83 e1 fe             	and    ecx,0xfffffffe
c001facc:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fad2:	75 01                	jne    c001fad5 <KeDisplaySplashScreen()+0x3e>
c001fad4:	47                   	inc    edi
c001fad5:	83 fa 0d             	cmp    edx,0xd
c001fad8:	74 28                	je     c001fb02 <KeDisplaySplashScreen()+0x6b>
c001fada:	83 fa 0a             	cmp    edx,0xa
c001fadd:	75 0a                	jne    c001fae9 <KeDisplaySplashScreen()+0x52>
c001fadf:	45                   	inc    ebp
c001fae0:	bf 0a 00 00 00       	mov    edi,0xa
c001fae5:	31 db                	xor    ebx,ebx
c001fae7:	eb 19                	jmp    c001fb02 <KeDisplaySplashScreen()+0x6b>
c001fae9:	83 ec 0c             	sub    esp,0xc
c001faec:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001faef:	55                   	push   ebp
c001faf0:	0f be c0             	movsx  eax,al
c001faf3:	52                   	push   edx
c001faf4:	43                   	inc    ebx
c001faf5:	6a 00                	push   0x0
c001faf7:	6a 0e                	push   0xe
c001faf9:	50                   	push   eax
c001fafa:	e8 35 82 00 00       	call   c0027d34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001faff:	83 c4 20             	add    esp,0x20
c001fb02:	46                   	inc    esi
c001fb03:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fb09:	75 a1                	jne    c001faac <KeDisplaySplashScreen()+0x15>
c001fb0b:	83 c4 0c             	add    esp,0xc
c001fb0e:	5b                   	pop    ebx
c001fb0f:	5e                   	pop    esi
c001fb10:	5f                   	pop    edi
c001fb11:	5d                   	pop    ebp
c001fb12:	c3                   	ret    

c001fb13 <KeSetBootMessage(char const*)>:
c001fb13:	57                   	push   edi
c001fb14:	56                   	push   esi
c001fb15:	53                   	push   ebx
c001fb16:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fb1c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fb23:	68 9e 00 00 00       	push   0x9e
c001fb28:	6a 00                	push   0x0
c001fb2a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fb2e:	56                   	push   esi
c001fb2f:	e8 bc 09 fe ff       	call   c00004f0 <memset>
c001fb34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb37:	e8 34 0a fe ff       	call   c0000570 <strlen>
c001fb3c:	ba 50 00 00 00       	mov    edx,0x50
c001fb41:	83 c4 10             	add    esp,0x10
c001fb44:	29 c2                	sub    edx,eax
c001fb46:	31 c9                	xor    ecx,ecx
c001fb48:	83 e2 fe             	and    edx,0xfffffffe
c001fb4b:	01 f2                	add    edx,esi
c001fb4d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fb52:	84 c0                	test   al,al
c001fb54:	74 0a                	je     c001fb60 <KeSetBootMessage(char const*)+0x4d>
c001fb56:	80 cc 0f             	or     ah,0xf
c001fb59:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fb5d:	41                   	inc    ecx
c001fb5e:	eb ed                	jmp    c001fb4d <KeSetBootMessage(char const*)+0x3a>
c001fb60:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fb65:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fb6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fb6c:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fb72:	5b                   	pop    ebx
c001fb73:	5e                   	pop    esi
c001fb74:	5f                   	pop    edi
c001fb75:	c3                   	ret    
c001fb76:	66 90                	xchg   ax,ax

c001fb78 <CUnlockScheduler>:
c001fb78:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb7d:	83 e8 01             	sub    eax,0x1
c001fb80:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fb85:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb8a:	85 c0                	test   eax,eax
c001fb8c:	75 02                	jne    c001fb90 <CUnlockScheduler+0x18>
c001fb8e:	fb                   	sti    
c001fb8f:	90                   	nop
c001fb90:	90                   	nop
c001fb91:	c3                   	ret    
c001fb92:	66 90                	xchg   ax,ax

c001fb94 <CLockScheduler>:
c001fb94:	fa                   	cli    
c001fb95:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb9a:	83 c0 01             	add    eax,0x1
c001fb9d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fba2:	90                   	nop
c001fba3:	c3                   	ret    

c001fba4 <CPrintf>:
c001fba4:	83 ec 0c             	sub    esp,0xc
c001fba7:	83 ec 08             	sub    esp,0x8
c001fbaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fbae:	68 30 fb 02 c0       	push   0xc002fb30
c001fbb3:	e8 a5 96 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c001fbb8:	83 c4 10             	add    esp,0x10
c001fbbb:	90                   	nop
c001fbbc:	83 c4 0c             	add    esp,0xc
c001fbbf:	c3                   	ret    

c001fbc0 <Krnl::handlePowerButton()>:
c001fbc0:	83 ec 0c             	sub    esp,0xc
c001fbc3:	e8 09 07 00 00       	call   c00202d1 <KeHandlePowerButton()>
c001fbc8:	90                   	nop
c001fbc9:	83 c4 0c             	add    esp,0xc
c001fbcc:	c3                   	ret    
c001fbcd:	8d 76 00             	lea    esi,[esi+0x0]

c001fbd0 <Krnl::handleSleepButton()>:
c001fbd0:	83 ec 0c             	sub    esp,0xc
c001fbd3:	e8 2e 07 00 00       	call   c0020306 <KeHandleSleepButton()>
c001fbd8:	90                   	nop
c001fbd9:	83 c4 0c             	add    esp,0xc
c001fbdc:	c3                   	ret    

c001fbdd <KeCalculateCRC32(unsigned char*, int)>:
c001fbdd:	53                   	push   ebx
c001fbde:	83 c8 ff             	or     eax,0xffffffff
c001fbe1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbe5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fbe9:	01 cb                	add    ebx,ecx
c001fbeb:	39 d9                	cmp    ecx,ebx
c001fbed:	74 15                	je     c001fc04 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fbef:	41                   	inc    ecx
c001fbf0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fbf3:	31 c2                	xor    edx,eax
c001fbf5:	c1 e8 08             	shr    eax,0x8
c001fbf8:	0f b6 d2             	movzx  edx,dl
c001fbfb:	33 04 95 20 3e 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc1e0]
c001fc02:	eb e7                	jmp    c001fbeb <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fc04:	f7 d0                	not    eax
c001fc06:	5b                   	pop    ebx
c001fc07:	c3                   	ret    

c001fc08 <EnvVarContainer::getEnv(char const*)>:
c001fc08:	57                   	push   edi
c001fc09:	56                   	push   esi
c001fc0a:	53                   	push   ebx
c001fc0b:	31 db                	xor    ebx,ebx
c001fc0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc11:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fc13:	7e 2b                	jle    c001fc40 <EnvVarContainer::getEnv(char const*)+0x38>
c001fc15:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fc1c:	50                   	push   eax
c001fc1d:	50                   	push   eax
c001fc1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fc21:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fc24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fc28:	e8 23 0b fe ff       	call   c0000750 <strcmp>
c001fc2d:	83 c4 10             	add    esp,0x10
c001fc30:	85 c0                	test   eax,eax
c001fc32:	75 09                	jne    c001fc3d <EnvVarContainer::getEnv(char const*)+0x35>
c001fc34:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fc37:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fc3b:	eb 05                	jmp    c001fc42 <EnvVarContainer::getEnv(char const*)+0x3a>
c001fc3d:	43                   	inc    ebx
c001fc3e:	eb d1                	jmp    c001fc11 <EnvVarContainer::getEnv(char const*)+0x9>
c001fc40:	31 c0                	xor    eax,eax
c001fc42:	5b                   	pop    ebx
c001fc43:	5e                   	pop    esi
c001fc44:	5f                   	pop    edi
c001fc45:	c3                   	ret    

c001fc46 <EnvVarContainer::setEnv(char const*, char const*)>:
c001fc46:	55                   	push   ebp
c001fc47:	57                   	push   edi
c001fc48:	56                   	push   esi
c001fc49:	53                   	push   ebx
c001fc4a:	83 ec 28             	sub    esp,0x28
c001fc4d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fc51:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fc55:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fc59:	56                   	push   esi
c001fc5a:	e8 11 09 fe ff       	call   c0000570 <strlen>
c001fc5f:	40                   	inc    eax
c001fc60:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc63:	e8 56 67 ff ff       	call   c00163be <malloc>
c001fc68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc6f:	e8 fc 08 fe ff       	call   c0000570 <strlen>
c001fc74:	40                   	inc    eax
c001fc75:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc78:	e8 41 67 ff ff       	call   c00163be <malloc>
c001fc7d:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fc84:	e8 e7 08 fe ff       	call   c0000570 <strlen>
c001fc89:	83 c4 0c             	add    esp,0xc
c001fc8c:	40                   	inc    eax
c001fc8d:	50                   	push   eax
c001fc8e:	6a 00                	push   0x0
c001fc90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fc94:	e8 57 08 fe ff       	call   c00004f0 <memset>
c001fc99:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc9c:	e8 cf 08 fe ff       	call   c0000570 <strlen>
c001fca1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fca5:	8d 48 01             	lea    ecx,[eax+0x1]
c001fca8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcad:	89 de                	mov    esi,ebx
c001fcaf:	e8 bc 08 fe ff       	call   c0000570 <strlen>
c001fcb4:	83 c4 0c             	add    esp,0xc
c001fcb7:	40                   	inc    eax
c001fcb8:	50                   	push   eax
c001fcb9:	6a 00                	push   0x0
c001fcbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fcbf:	e8 2c 08 fe ff       	call   c00004f0 <memset>
c001fcc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcc7:	e8 a4 08 fe ff       	call   c0000570 <strlen>
c001fccc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fcd0:	8d 48 01             	lea    ecx,[eax+0x1]
c001fcd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcd5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fcd8:	40                   	inc    eax
c001fcd9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fcdc:	c1 e0 03             	shl    eax,0x3
c001fcdf:	5a                   	pop    edx
c001fce0:	59                   	pop    ecx
c001fce1:	50                   	push   eax
c001fce2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fce5:	e8 c0 66 ff ff       	call   c00163aa <realloc>
c001fcea:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fcee:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fcf1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fcf4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fcf8:	b9 08 00 00 00       	mov    ecx,0x8
c001fcfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcff:	83 c4 2c             	add    esp,0x2c
c001fd02:	5b                   	pop    ebx
c001fd03:	5e                   	pop    esi
c001fd04:	5f                   	pop    edi
c001fd05:	5d                   	pop    ebp
c001fd06:	c3                   	ret    
c001fd07:	90                   	nop

c001fd08 <EnvVarContainer::deleteEnv(char const*)>:
c001fd08:	c3                   	ret    
c001fd09:	90                   	nop

c001fd0a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fd0a:	55                   	push   ebp
c001fd0b:	57                   	push   edi
c001fd0c:	56                   	push   esi
c001fd0d:	53                   	push   ebx
c001fd0e:	81 ec 38 01 00 00    	sub    esp,0x138
c001fd14:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fd1b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fd22:	68 14 01 00 00       	push   0x114
c001fd27:	e8 92 66 ff ff       	call   c00163be <malloc>
c001fd2c:	83 c4 0c             	add    esp,0xc
c001fd2f:	89 c3                	mov    ebx,eax
c001fd31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd34:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fd3b:	50                   	push   eax
c001fd3c:	e8 23 a7 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c001fd41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd44:	e8 fd a9 ff ff       	call   c001a746 <File::exists()>
c001fd49:	83 c4 10             	add    esp,0x10
c001fd4c:	84 c0                	test   al,al
c001fd4e:	75 31                	jne    c001fd81 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fd50:	50                   	push   eax
c001fd51:	50                   	push   eax
c001fd52:	6a 12                	push   0x12
c001fd54:	53                   	push   ebx
c001fd55:	e8 28 a7 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c001fd5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fd5c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fd5f:	89 34 24             	mov    DWORD PTR [esp],esi
c001fd62:	e8 09 08 fe ff       	call   c0000570 <strlen>
c001fd67:	5a                   	pop    edx
c001fd68:	31 d2                	xor    edx,edx
c001fd6a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fd6e:	51                   	push   ecx
c001fd6f:	56                   	push   esi
c001fd70:	52                   	push   edx
c001fd71:	50                   	push   eax
c001fd72:	53                   	push   ebx
c001fd73:	ff d7                	call   edi
c001fd75:	83 c4 14             	add    esp,0x14
c001fd78:	53                   	push   ebx
c001fd79:	e8 62 a7 ff ff       	call   c001a4e0 <File::close()>
c001fd7e:	83 c4 10             	add    esp,0x10
c001fd81:	56                   	push   esi
c001fd82:	31 f6                	xor    esi,esi
c001fd84:	68 00 01 00 00       	push   0x100
c001fd89:	6a 00                	push   0x0
c001fd8b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fd8f:	50                   	push   eax
c001fd90:	e8 5b 07 fe ff       	call   c00004f0 <memset>
c001fd95:	5f                   	pop    edi
c001fd96:	58                   	pop    eax
c001fd97:	6a 01                	push   0x1
c001fd99:	53                   	push   ebx
c001fd9a:	e8 e3 a6 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c001fd9f:	83 c4 10             	add    esp,0x10
c001fda2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fdaa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fdb2:	83 ec 0c             	sub    esp,0xc
c001fdb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fdb7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fdbb:	51                   	push   ecx
c001fdbc:	8d 54 24 23          	lea    edx,[esp+0x23]
c001fdc0:	52                   	push   edx
c001fdc1:	6a 00                	push   0x0
c001fdc3:	6a 01                	push   0x1
c001fdc5:	53                   	push   ebx
c001fdc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fdc9:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fdce:	83 c4 20             	add    esp,0x20
c001fdd1:	89 c2                	mov    edx,eax
c001fdd3:	85 c0                	test   eax,eax
c001fdd5:	0f 84 36 01 00 00    	je     c001ff11 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fddb:	83 f8 0d             	cmp    eax,0xd
c001fdde:	0f 84 22 01 00 00    	je     c001ff06 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fde4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fde9:	0f 84 f0 00 00 00    	je     c001fedf <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fdef:	83 f8 0a             	cmp    eax,0xa
c001fdf2:	74 13                	je     c001fe07 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fdf4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fdf9:	74 0c                	je     c001fe07 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fdfb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fe01:	0f 8e f6 00 00 00    	jle    c001fefd <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fe07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe0b:	83 ec 0c             	sub    esp,0xc
c001fe0e:	8d 78 01             	lea    edi,[eax+0x1]
c001fe11:	57                   	push   edi
c001fe12:	e8 a7 65 ff ff       	call   c00163be <malloc>
c001fe17:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fe1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fe1f:	8d 56 04             	lea    edx,[esi+0x4]
c001fe22:	89 14 24             	mov    DWORD PTR [esp],edx
c001fe25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fe29:	e8 90 65 ff ff       	call   c00163be <malloc>
c001fe2e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fe32:	83 c4 0c             	add    esp,0xc
c001fe35:	57                   	push   edi
c001fe36:	6a 00                	push   0x0
c001fe38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fe3c:	e8 af 06 fe ff       	call   c00004f0 <memset>
c001fe41:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe45:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fe49:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe4f:	83 c4 0c             	add    esp,0xc
c001fe52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fe56:	52                   	push   edx
c001fe57:	6a 00                	push   0x0
c001fe59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fe5d:	e8 8e 06 fe ff       	call   c00004f0 <memset>
c001fe62:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe66:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fe6a:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe6d:	e8 fe 06 fe ff       	call   c0000570 <strlen>
c001fe72:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fe76:	89 c1                	mov    ecx,eax
c001fe78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe7a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fe7d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fe80:	40                   	inc    eax
c001fe81:	83 c4 10             	add    esp,0x10
c001fe84:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fe87:	85 d2                	test   edx,edx
c001fe89:	75 0c                	jne    c001fe97 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fe8b:	83 ec 0c             	sub    esp,0xc
c001fe8e:	6a 08                	push   0x8
c001fe90:	e8 29 65 ff ff       	call   c00163be <malloc>
c001fe95:	eb 0c                	jmp    c001fea3 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fe97:	c1 e0 03             	shl    eax,0x3
c001fe9a:	51                   	push   ecx
c001fe9b:	51                   	push   ecx
c001fe9c:	50                   	push   eax
c001fe9d:	52                   	push   edx
c001fe9e:	e8 07 65 ff ff       	call   c00163aa <realloc>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fea9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001feac:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001feaf:	8d 74 24 18          	lea    esi,[esp+0x18]
c001feb3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001feb7:	b9 08 00 00 00       	mov    ecx,0x8
c001febc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001febe:	31 f6                	xor    esi,esi
c001fec0:	50                   	push   eax
c001fec1:	68 00 01 00 00       	push   0x100
c001fec6:	6a 00                	push   0x0
c001fec8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fecc:	50                   	push   eax
c001fecd:	e8 1e 06 fe ff       	call   c00004f0 <memset>
c001fed2:	83 c4 10             	add    esp,0x10
c001fed5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fedd:	eb 27                	jmp    c001ff06 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fedf:	83 f8 3d             	cmp    eax,0x3d
c001fee2:	74 1e                	je     c001ff02 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fee4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001feea:	7f 07                	jg     c001fef3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001feec:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001fef0:	46                   	inc    esi
c001fef1:	eb 13                	jmp    c001ff06 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fef3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fefb:	eb 09                	jmp    c001ff06 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fefd:	83 f8 3d             	cmp    eax,0x3d
c001ff00:	75 ea                	jne    c001feec <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001ff02:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001ff06:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ff0b:	0f 85 99 fe ff ff    	jne    c001fdaa <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001ff11:	83 ec 0c             	sub    esp,0xc
c001ff14:	53                   	push   ebx
c001ff15:	e8 c6 a5 ff ff       	call   c001a4e0 <File::close()>
c001ff1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ff22:	81 c4 3c 01 00 00    	add    esp,0x13c
c001ff28:	5b                   	pop    ebx
c001ff29:	5e                   	pop    esi
c001ff2a:	5f                   	pop    edi
c001ff2b:	5d                   	pop    ebp
c001ff2c:	c3                   	ret    
c001ff2d:	90                   	nop

c001ff2e <EnvVarContainer::__loadSystem()>:
c001ff2e:	83 ec 10             	sub    esp,0x10
c001ff31:	68 20 42 03 c0       	push   0xc0034220
c001ff36:	68 ac 28 03 c0       	push   0xc00328ac
c001ff3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3f:	e8 c6 fd ff ff       	call   c001fd0a <EnvVarContainer::loadFrom(char const*, char const*)>
c001ff44:	83 c4 1c             	add    esp,0x1c
c001ff47:	c3                   	ret    

c001ff48 <EnvVarContainer::__loadUser()>:
c001ff48:	c3                   	ret    
c001ff49:	90                   	nop

c001ff4a <EnvVarContainer::EnvVarContainer(Process*)>:
c001ff4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff5c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff6a:	90                   	nop
c001ff6b:	c3                   	ret    

c001ff6c <EnvVarContainer::~EnvVarContainer()>:
c001ff6c:	83 ec 0c             	sub    esp,0xc
c001ff6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff76:	85 c0                	test   eax,eax
c001ff78:	74 1d                	je     c001ff97 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff80:	85 c0                	test   eax,eax
c001ff82:	74 13                	je     c001ff97 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff8b:	83 ec 0c             	sub    esp,0xc
c001ff8e:	50                   	push   eax
c001ff8f:	e8 4a 64 ff ff       	call   c00163de <free>
c001ff94:	83 c4 10             	add    esp,0x10
c001ff97:	90                   	nop
c001ff98:	83 c4 0c             	add    esp,0xc
c001ff9b:	c3                   	ret    

c001ff9c <KeGetEnv(Process*, char const*)>:
c001ff9c:	53                   	push   ebx
c001ff9d:	83 ec 08             	sub    esp,0x8
c001ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ffa8:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001ffae:	74 04                	je     c001ffb4 <KeGetEnv(Process*, char const*)+0x18>
c001ffb0:	85 c0                	test   eax,eax
c001ffb2:	75 0b                	jne    c001ffbf <KeGetEnv(Process*, char const*)+0x23>
c001ffb4:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001ffb9:	85 c0                	test   eax,eax
c001ffbb:	75 19                	jne    c001ffd6 <KeGetEnv(Process*, char const*)+0x3a>
c001ffbd:	eb 27                	jmp    c001ffe6 <KeGetEnv(Process*, char const*)+0x4a>
c001ffbf:	52                   	push   edx
c001ffc0:	52                   	push   edx
c001ffc1:	53                   	push   ebx
c001ffc2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001ffc8:	e8 3b fc ff ff       	call   c001fc08 <EnvVarContainer::getEnv(char const*)>
c001ffcd:	83 c4 10             	add    esp,0x10
c001ffd0:	85 c0                	test   eax,eax
c001ffd2:	75 28                	jne    c001fffc <KeGetEnv(Process*, char const*)+0x60>
c001ffd4:	eb de                	jmp    c001ffb4 <KeGetEnv(Process*, char const*)+0x18>
c001ffd6:	52                   	push   edx
c001ffd7:	52                   	push   edx
c001ffd8:	53                   	push   ebx
c001ffd9:	50                   	push   eax
c001ffda:	e8 29 fc ff ff       	call   c001fc08 <EnvVarContainer::getEnv(char const*)>
c001ffdf:	83 c4 10             	add    esp,0x10
c001ffe2:	85 c0                	test   eax,eax
c001ffe4:	75 16                	jne    c001fffc <KeGetEnv(Process*, char const*)+0x60>
c001ffe6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ffea:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ffef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fff3:	83 c4 08             	add    esp,0x8
c001fff6:	5b                   	pop    ebx
c001fff7:	e9 0c fc ff ff       	jmp    c001fc08 <EnvVarContainer::getEnv(char const*)>
c001fffc:	83 c4 08             	add    esp,0x8
c001ffff:	5b                   	pop    ebx
c0020000:	c3                   	ret    

c0020001 <KeSetEnvSystem(char const*, char const*)>:
c0020001:	83 ec 10             	sub    esp,0x10
c0020004:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020008:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002000c:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c0020012:	e8 2f fc ff ff       	call   c001fc46 <EnvVarContainer::setEnv(char const*, char const*)>
c0020017:	83 c4 1c             	add    esp,0x1c
c002001a:	c3                   	ret    

c002001b <KeSetEnvUser(char const*, char const*)>:
c002001b:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c0020020:	85 c0                	test   eax,eax
c0020022:	74 15                	je     c0020039 <KeSetEnvUser(char const*, char const*)+0x1e>
c0020024:	83 ec 10             	sub    esp,0x10
c0020027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002002b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002002f:	50                   	push   eax
c0020030:	e8 11 fc ff ff       	call   c001fc46 <EnvVarContainer::setEnv(char const*, char const*)>
c0020035:	83 c4 1c             	add    esp,0x1c
c0020038:	c3                   	ret    
c0020039:	c3                   	ret    

c002003a <KeSetEnvProcess(Process*, char const*, char const*)>:
c002003a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0020044:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020048:	e9 f9 fb ff ff       	jmp    c001fc46 <EnvVarContainer::setEnv(char const*, char const*)>

c002004d <KeDeleteEnvSystem(char const*)>:
c002004d:	c3                   	ret    

c002004e <KeDeleteEnvUser(char const*)>:
c002004e:	c3                   	ret    

c002004f <KeDeleteEnvProcess(Process*, char const*)>:
c002004f:	c3                   	ret    

c0020050 <KeNewProcessEnv(Process*)>:
c0020050:	83 ec 28             	sub    esp,0x28
c0020053:	6a 0c                	push   0xc
c0020055:	e8 64 63 ff ff       	call   c00163be <malloc>
c002005a:	5a                   	pop    edx
c002005b:	59                   	pop    ecx
c002005c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020060:	50                   	push   eax
c0020061:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020065:	e8 e0 fe ff ff       	call   c001ff4a <EnvVarContainer::EnvVarContainer(Process*)>
c002006a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002006e:	83 c4 2c             	add    esp,0x2c
c0020071:	c3                   	ret    

c0020072 <KeCopyProcessEnv(Process*, Process*)>:
c0020072:	57                   	push   edi
c0020073:	56                   	push   esi
c0020074:	53                   	push   ebx
c0020075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020079:	83 ec 0c             	sub    esp,0xc
c002007c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0020082:	6a 0c                	push   0xc
c0020084:	e8 35 63 ff ff       	call   c00163be <malloc>
c0020089:	89 c3                	mov    ebx,eax
c002008b:	58                   	pop    eax
c002008c:	5a                   	pop    edx
c002008d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020091:	53                   	push   ebx
c0020092:	e8 b3 fe ff ff       	call   c001ff4a <EnvVarContainer::EnvVarContainer(Process*)>
c0020097:	8b 07                	mov    eax,DWORD PTR [edi]
c0020099:	89 03                	mov    DWORD PTR [ebx],eax
c002009b:	c1 e0 03             	shl    eax,0x3
c002009e:	89 04 24             	mov    DWORD PTR [esp],eax
c00200a1:	e8 18 63 ff ff       	call   c00163be <malloc>
c00200a6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00200a9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00200ab:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00200ae:	c1 e1 03             	shl    ecx,0x3
c00200b1:	89 c7                	mov    edi,eax
c00200b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200b5:	83 c4 10             	add    esp,0x10
c00200b8:	89 d8                	mov    eax,ebx
c00200ba:	5b                   	pop    ebx
c00200bb:	5e                   	pop    esi
c00200bc:	5f                   	pop    edi
c00200bd:	c3                   	ret    

c00200be <KeLoadSystemEnv()>:
c00200be:	53                   	push   ebx
c00200bf:	83 ec 14             	sub    esp,0x14
c00200c2:	6a 0c                	push   0xc
c00200c4:	e8 f5 62 ff ff       	call   c00163be <malloc>
c00200c9:	89 c3                	mov    ebx,eax
c00200cb:	58                   	pop    eax
c00200cc:	5a                   	pop    edx
c00200cd:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00200d3:	53                   	push   ebx
c00200d4:	e8 71 fe ff ff       	call   c001ff4a <EnvVarContainer::EnvVarContainer(Process*)>
c00200d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00200dc:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c00200e2:	e8 47 fe ff ff       	call   c001ff2e <EnvVarContainer::__loadSystem()>
c00200e7:	83 c4 18             	add    esp,0x18
c00200ea:	5b                   	pop    ebx
c00200eb:	c3                   	ret    

c00200ec <KeLoadUserEnv()>:
c00200ec:	53                   	push   ebx
c00200ed:	83 ec 14             	sub    esp,0x14
c00200f0:	6a 0c                	push   0xc
c00200f2:	e8 c7 62 ff ff       	call   c00163be <malloc>
c00200f7:	89 c3                	mov    ebx,eax
c00200f9:	58                   	pop    eax
c00200fa:	5a                   	pop    edx
c00200fb:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020101:	53                   	push   ebx
c0020102:	e8 43 fe ff ff       	call   c001ff4a <EnvVarContainer::EnvVarContainer(Process*)>
c0020107:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c002010d:	83 c4 18             	add    esp,0x18
c0020110:	5b                   	pop    ebx
c0020111:	c3                   	ret    

c0020112 <KeFlushEnv()>:
c0020112:	c3                   	ret    

c0020113 <KeGetProcessTotalEnvCount(Process*)>:
c0020113:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020117:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c002011d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020123:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020128:	8b 00                	mov    eax,DWORD PTR [eax]
c002012a:	03 01                	add    eax,DWORD PTR [ecx]
c002012c:	85 d2                	test   edx,edx
c002012e:	74 02                	je     c0020132 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020130:	03 02                	add    eax,DWORD PTR [edx]
c0020132:	c3                   	ret    

c0020133 <KeGetProcessEnvPair(Process*, int)>:
c0020133:	57                   	push   edi
c0020134:	56                   	push   esi
c0020135:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c002013b:	53                   	push   ebx
c002013c:	85 f6                	test   esi,esi
c002013e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020146:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c002014c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020150:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020152:	75 16                	jne    c002016a <KeGetProcessEnvPair(Process*, int)+0x37>
c0020154:	39 c2                	cmp    edx,eax
c0020156:	7c 16                	jl     c002016e <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020158:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c002015e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020160:	01 c6                	add    esi,eax
c0020162:	39 d6                	cmp    esi,edx
c0020164:	7e 3c                	jle    c00201a2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020166:	29 c2                	sub    edx,eax
c0020168:	eb 04                	jmp    c002016e <KeGetProcessEnvPair(Process*, int)+0x3b>
c002016a:	39 c2                	cmp    edx,eax
c002016c:	7d 05                	jge    c0020173 <KeGetProcessEnvPair(Process*, int)+0x40>
c002016e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020171:	eb 20                	jmp    c0020193 <KeGetProcessEnvPair(Process*, int)+0x60>
c0020173:	8b 3e                	mov    edi,DWORD PTR [esi]
c0020175:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0020178:	39 d1                	cmp    ecx,edx
c002017a:	7e 04                	jle    c0020180 <KeGetProcessEnvPair(Process*, int)+0x4d>
c002017c:	29 c2                	sub    edx,eax
c002017e:	eb 10                	jmp    c0020190 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0020180:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c0020186:	03 0e                	add    ecx,DWORD PTR [esi]
c0020188:	39 d1                	cmp    ecx,edx
c002018a:	7e 16                	jle    c00201a2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c002018c:	29 c2                	sub    edx,eax
c002018e:	29 fa                	sub    edx,edi
c0020190:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0020193:	8d 14 d0             	lea    edx,[eax+edx*8]
c0020196:	8b 02                	mov    eax,DWORD PTR [edx]
c0020198:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c002019b:	89 03                	mov    DWORD PTR [ebx],eax
c002019d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00201a0:	eb 1d                	jmp    c00201bf <KeGetProcessEnvPair(Process*, int)+0x8c>
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	68 ce 28 03 c0       	push   0xc00328ce
c00201aa:	e8 c7 00 00 00       	call   c0020276 <KePanic(char const*)>
c00201af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00201b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00201bc:	83 c4 10             	add    esp,0x10
c00201bf:	89 d8                	mov    eax,ebx
c00201c1:	5b                   	pop    ebx
c00201c2:	5e                   	pop    esi
c00201c3:	5f                   	pop    edi
c00201c4:	c2 04 00             	ret    0x4

c00201c7 <CPU::current()>:
c00201c7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00201cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201d2:	c3                   	ret    

c00201d3 <operator new(unsigned long)>:
c00201d3:	e9 e6 61 ff ff       	jmp    c00163be <malloc>

c00201d8 <operator delete(void*)>:
c00201d8:	e9 11 62 ff ff       	jmp    c00163ee <rfree>

c00201dd <disableIRQs()>:
c00201dd:	fa                   	cli    
c00201de:	c3                   	ret    

c00201df <enableIRQs()>:
c00201df:	fb                   	sti    
c00201e0:	c3                   	ret    

c00201e1 <lockScheduler()>:
c00201e1:	fa                   	cli    
c00201e2:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201e8:	c3                   	ret    

c00201e9 <unlockScheduler()>:
c00201e9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00201ee:	48                   	dec    eax
c00201ef:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00201f4:	75 01                	jne    c00201f7 <unlockScheduler()+0xe>
c00201f6:	fb                   	sti    
c00201f7:	c3                   	ret    

c00201f8 <lockStuff()>:
c00201f8:	fa                   	cli    
c00201f9:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201ff:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c0020205:	c3                   	ret    

c0020206 <unlockStuff()>:
c0020206:	83 ec 0c             	sub    esp,0xc
c0020209:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002020e:	48                   	dec    eax
c002020f:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020214:	75 18                	jne    c002022e <unlockStuff()+0x28>
c0020216:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c002021d:	74 0f                	je     c002022e <unlockStuff()+0x28>
c002021f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020229:	e8 5e 50 00 00       	call   c002528c <schedule()>
c002022e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020233:	48                   	dec    eax
c0020234:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020239:	75 01                	jne    c002023c <unlockStuff()+0x36>
c002023b:	fb                   	sti    
c002023c:	83 c4 0c             	add    esp,0xc
c002023f:	c3                   	ret    

c0020240 <Virt::getAKernelVAS()>:
c0020240:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020245:	c3                   	ret    

c0020246 <__not_memcpy>:
c0020246:	57                   	push   edi
c0020247:	56                   	push   esi
c0020248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002024c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020250:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020254:	89 c7                	mov    edi,eax
c0020256:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020258:	5e                   	pop    esi
c0020259:	5f                   	pop    edi
c002025a:	c3                   	ret    
c002025b:	90                   	nop

c002025c <Mutex::Mutex()>:
c002025c:	83 ec 0c             	sub    esp,0xc
c002025f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020263:	83 ec 08             	sub    esp,0x8
c0020266:	6a 01                	push   0x1
c0020268:	50                   	push   eax
c0020269:	e8 b2 03 00 00       	call   c0020620 <Semaphore::Semaphore(int)>
c002026e:	83 c4 10             	add    esp,0x10
c0020271:	90                   	nop
c0020272:	83 c4 0c             	add    esp,0xc
c0020275:	c3                   	ret    

c0020276 <KePanic(char const*)>:
c0020276:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c002027d:	e9 04 6d 00 00       	jmp    c0026f86 <HalPanic(char const*)>

c0020282 <KePowerThread(void*)>:
c0020282:	83 ec 0c             	sub    esp,0xc
c0020285:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002028a:	48                   	dec    eax
c002028b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020290:	75 01                	jne    c0020293 <KePowerThread(void*)+0x11>
c0020292:	fb                   	sti    
c0020293:	83 ec 0c             	sub    esp,0xc
c0020296:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c002029d:	6a 0a                	push   0xa
c002029f:	e8 d4 51 00 00       	call   c0025478 <sleep(unsigned int)>
c00202a4:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	eb e3                	jmp    c0020293 <KePowerThread(void*)+0x11>

c00202b0 <KeChangePowerSettings(PowerSettings)>:
c00202b0:	57                   	push   edi
c00202b1:	b9 09 00 00 00       	mov    ecx,0x9
c00202b6:	56                   	push   esi
c00202b7:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00202bc:	fc                   	cld    
c00202bd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00202c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00202c3:	5e                   	pop    esi
c00202c4:	5f                   	pop    edi
c00202c5:	c3                   	ret    

c00202c6 <KeUserIOReceived()>:
c00202c6:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00202d0:	c3                   	ret    

c00202d1 <KeHandlePowerButton()>:
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00202d9:	83 f8 02             	cmp    eax,0x2
c00202dc:	75 10                	jne    c00202ee <KeHandlePowerButton()+0x1d>
c00202de:	83 ec 0c             	sub    esp,0xc
c00202e1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202e7:	e8 44 57 ff ff       	call   c0015a30 <Computer::shutdown()>
c00202ec:	eb 11                	jmp    c00202ff <KeHandlePowerButton()+0x2e>
c00202ee:	48                   	dec    eax
c00202ef:	75 11                	jne    c0020302 <KeHandlePowerButton()+0x31>
c00202f1:	83 ec 0c             	sub    esp,0xc
c00202f4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202fa:	e8 61 57 ff ff       	call   c0015a60 <Computer::sleep()>
c00202ff:	83 c4 10             	add    esp,0x10
c0020302:	83 c4 0c             	add    esp,0xc
c0020305:	c3                   	ret    

c0020306 <KeHandleSleepButton()>:
c0020306:	83 ec 0c             	sub    esp,0xc
c0020309:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c002030e:	83 f8 02             	cmp    eax,0x2
c0020311:	75 10                	jne    c0020323 <KeHandleSleepButton()+0x1d>
c0020313:	83 ec 0c             	sub    esp,0xc
c0020316:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002031c:	e8 0f 57 ff ff       	call   c0015a30 <Computer::shutdown()>
c0020321:	eb 11                	jmp    c0020334 <KeHandleSleepButton()+0x2e>
c0020323:	48                   	dec    eax
c0020324:	75 11                	jne    c0020337 <KeHandleSleepButton()+0x31>
c0020326:	83 ec 0c             	sub    esp,0xc
c0020329:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002032f:	e8 2c 57 ff ff       	call   c0015a60 <Computer::sleep()>
c0020334:	83 c4 10             	add    esp,0x10
c0020337:	83 c4 0c             	add    esp,0xc
c002033a:	c3                   	ret    

c002033b <KeSetupPowerManager()>:
c002033b:	83 ec 0c             	sub    esp,0xc
c002033e:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020348:	68 f0 00 00 00       	push   0xf0
c002034d:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020354:	6a 00                	push   0x0
c0020356:	68 82 02 02 c0       	push   0xc0020282
c002035b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020361:	e8 d6 4c 00 00       	call   c002503c <Process::createThread(void (*)(void*), void*, int)>
c0020366:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c0020370:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c002037a:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c0020384:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c002038e:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c0020398:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c00203a2:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c00203ac:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00203b6:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00203c0:	83 c4 1c             	add    esp,0x1c
c00203c3:	c3                   	ret    

c00203c4 <KeRand()>:
c00203c4:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00203ce:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00203d8:	53                   	push   ebx
c00203d9:	01 c1                	add    ecx,eax
c00203db:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00203e0:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c00203e6:	01 ca                	add    edx,ecx
c00203e8:	05 ef 04 b5 00       	add    eax,0xb504ef
c00203ed:	83 d2 00             	adc    edx,0x0
c00203f0:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c00203f5:	0f b7 da             	movzx  ebx,dx
c00203f8:	89 da                	mov    edx,ebx
c00203fa:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c0020400:	0f ac d0 0e          	shrd   eax,edx,0xe
c0020404:	5b                   	pop    ebx
c0020405:	c3                   	ret    

c0020406 <KeSeedRand(unsigned int)>:
c0020406:	53                   	push   ebx
c0020407:	83 ec 08             	sub    esp,0x8
c002040a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002040e:	e8 92 6e 00 00       	call   c00272a5 <HalGetRand()>
c0020413:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c002041d:	31 d8                	xor    eax,ebx
c002041f:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020424:	e8 9b ff ff ff       	call   c00203c4 <KeRand()>
c0020429:	83 c4 08             	add    esp,0x8
c002042c:	5b                   	pop    ebx
c002042d:	eb 95                	jmp    c00203c4 <KeRand()>

c002042f <KeInitRand()>:
c002042f:	83 ec 0c             	sub    esp,0xc
c0020432:	e8 63 6c 00 00       	call   c002709a <HalQueryPerformanceCounter()>
c0020437:	0f 20 da             	mov    edx,cr3
c002043a:	0f 22 da             	mov    cr3,edx
c002043d:	0f 20 da             	mov    edx,cr3
c0020440:	0f 22 da             	mov    cr3,edx
c0020443:	0f 20 da             	mov    edx,cr3
c0020446:	0f 22 da             	mov    cr3,edx
c0020449:	0f 20 da             	mov    edx,cr3
c002044c:	0f 22 da             	mov    cr3,edx
c002044f:	83 ec 0c             	sub    esp,0xc
c0020452:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020457:	50                   	push   eax
c0020458:	e8 a9 ff ff ff       	call   c0020406 <KeSeedRand(unsigned int)>
c002045d:	83 c4 1c             	add    esp,0x1c
c0020460:	c3                   	ret    
c0020461:	66 90                	xchg   ax,ax
c0020463:	90                   	nop

c0020464 <KeResolveCompatibilitySymbol(char*)>:
c0020464:	83 ec 0c             	sub    esp,0xc
c0020467:	83 ec 08             	sub    esp,0x8
c002046a:	68 e8 28 03 c0       	push   0xc00328e8
c002046f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020473:	e8 d8 02 fe ff       	call   c0000750 <strcmp>
c0020478:	83 c4 10             	add    esp,0x10
c002047b:	85 c0                	test   eax,eax
c002047d:	0f 94 c0             	sete   al
c0020480:	0f b6 c0             	movzx  eax,al
c0020483:	85 c0                	test   eax,eax
c0020485:	74 0d                	je     c0020494 <KeResolveCompatibilitySymbol(char*)+0x30>
c0020487:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c002048c:	e9 8b 01 00 00       	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020491:	8d 76 00             	lea    esi,[esi+0x0]
c0020494:	83 ec 08             	sub    esp,0x8
c0020497:	68 f1 28 03 c0       	push   0xc00328f1
c002049c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204a0:	e8 ab 02 fe ff       	call   c0000750 <strcmp>
c00204a5:	83 c4 10             	add    esp,0x10
c00204a8:	85 c0                	test   eax,eax
c00204aa:	0f 94 c0             	sete   al
c00204ad:	0f b6 c0             	movzx  eax,al
c00204b0:	85 c0                	test   eax,eax
c00204b2:	74 0c                	je     c00204c0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00204b4:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c00204b9:	e9 5e 01 00 00       	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204be:	66 90                	xchg   ax,ax
c00204c0:	83 ec 08             	sub    esp,0x8
c00204c3:	68 fb 28 03 c0       	push   0xc00328fb
c00204c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204cc:	e8 7f 02 fe ff       	call   c0000750 <strcmp>
c00204d1:	83 c4 10             	add    esp,0x10
c00204d4:	85 c0                	test   eax,eax
c00204d6:	0f 94 c0             	sete   al
c00204d9:	0f b6 c0             	movzx  eax,al
c00204dc:	85 c0                	test   eax,eax
c00204de:	74 0c                	je     c00204ec <KeResolveCompatibilitySymbol(char*)+0x88>
c00204e0:	b8 c4 e3 02 c0       	mov    eax,0xc002e3c4
c00204e5:	e9 32 01 00 00       	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204ea:	66 90                	xchg   ax,ax
c00204ec:	83 ec 08             	sub    esp,0x8
c00204ef:	68 04 29 03 c0       	push   0xc0032904
c00204f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204f8:	e8 53 02 fe ff       	call   c0000750 <strcmp>
c00204fd:	83 c4 10             	add    esp,0x10
c0020500:	85 c0                	test   eax,eax
c0020502:	0f 94 c0             	sete   al
c0020505:	0f b6 c0             	movzx  eax,al
c0020508:	85 c0                	test   eax,eax
c002050a:	74 0c                	je     c0020518 <KeResolveCompatibilitySymbol(char*)+0xb4>
c002050c:	b8 76 02 02 c0       	mov    eax,0xc0020276
c0020511:	e9 06 01 00 00       	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020516:	66 90                	xchg   ax,ax
c0020518:	83 ec 08             	sub    esp,0x8
c002051b:	68 17 29 03 c0       	push   0xc0032917
c0020520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020524:	e8 27 02 fe ff       	call   c0000750 <strcmp>
c0020529:	83 c4 10             	add    esp,0x10
c002052c:	85 c0                	test   eax,eax
c002052e:	0f 94 c0             	sete   al
c0020531:	0f b6 c0             	movzx  eax,al
c0020534:	85 c0                	test   eax,eax
c0020536:	74 0c                	je     c0020544 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020538:	b8 13 fb 01 c0       	mov    eax,0xc001fb13
c002053d:	e9 da 00 00 00       	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020542:	66 90                	xchg   ax,ax
c0020544:	83 ec 08             	sub    esp,0x8
c0020547:	68 34 29 03 c0       	push   0xc0032934
c002054c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020550:	e8 fb 01 fe ff       	call   c0000750 <strcmp>
c0020555:	83 c4 10             	add    esp,0x10
c0020558:	85 c0                	test   eax,eax
c002055a:	0f 94 c0             	sete   al
c002055d:	0f b6 c0             	movzx  eax,al
c0020560:	85 c0                	test   eax,eax
c0020562:	74 0c                	je     c0020570 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020564:	b8 90 e7 02 c0       	mov    eax,0xc002e790
c0020569:	e9 ae 00 00 00       	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002056e:	66 90                	xchg   ax,ax
c0020570:	83 ec 08             	sub    esp,0x8
c0020573:	68 3e 29 03 c0       	push   0xc003293e
c0020578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002057c:	e8 cf 01 fe ff       	call   c0000750 <strcmp>
c0020581:	83 c4 10             	add    esp,0x10
c0020584:	85 c0                	test   eax,eax
c0020586:	0f 94 c0             	sete   al
c0020589:	0f b6 c0             	movzx  eax,al
c002058c:	85 c0                	test   eax,eax
c002058e:	74 0c                	je     c002059c <KeResolveCompatibilitySymbol(char*)+0x138>
c0020590:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0020595:	e9 82 00 00 00       	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002059a:	66 90                	xchg   ax,ax
c002059c:	83 ec 08             	sub    esp,0x8
c002059f:	68 47 29 03 c0       	push   0xc0032947
c00205a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205a8:	e8 a3 01 fe ff       	call   c0000750 <strcmp>
c00205ad:	83 c4 10             	add    esp,0x10
c00205b0:	85 c0                	test   eax,eax
c00205b2:	0f 94 c0             	sete   al
c00205b5:	0f b6 c0             	movzx  eax,al
c00205b8:	85 c0                	test   eax,eax
c00205ba:	74 08                	je     c00205c4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00205bc:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00205c1:	eb 59                	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205c3:	90                   	nop
c00205c4:	83 ec 08             	sub    esp,0x8
c00205c7:	68 5f 29 03 c0       	push   0xc003295f
c00205cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205d0:	e8 7b 01 fe ff       	call   c0000750 <strcmp>
c00205d5:	83 c4 10             	add    esp,0x10
c00205d8:	85 c0                	test   eax,eax
c00205da:	0f 94 c0             	sete   al
c00205dd:	0f b6 c0             	movzx  eax,al
c00205e0:	85 c0                	test   eax,eax
c00205e2:	74 08                	je     c00205ec <KeResolveCompatibilitySymbol(char*)+0x188>
c00205e4:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00205e9:	eb 31                	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205eb:	90                   	nop
c00205ec:	83 ec 08             	sub    esp,0x8
c00205ef:	68 6c 29 03 c0       	push   0xc003296c
c00205f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205f8:	e8 53 01 fe ff       	call   c0000750 <strcmp>
c00205fd:	83 c4 10             	add    esp,0x10
c0020600:	85 c0                	test   eax,eax
c0020602:	0f 94 c0             	sete   al
c0020605:	0f b6 c0             	movzx  eax,al
c0020608:	85 c0                	test   eax,eax
c002060a:	74 08                	je     c0020614 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c002060c:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020611:	eb 09                	jmp    c002061c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020613:	90                   	nop
c0020614:	b8 00 00 00 00       	mov    eax,0x0
c0020619:	8d 76 00             	lea    esi,[esi+0x0]
c002061c:	83 c4 0c             	add    esp,0xc
c002061f:	c3                   	ret    

c0020620 <Semaphore::Semaphore(int)>:
c0020620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020624:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020628:	89 10                	mov    DWORD PTR [eax],edx
c002062a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002062e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020635:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020639:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020644:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002064b:	90                   	nop
c002064c:	c3                   	ret    
c002064d:	90                   	nop
c002064e:	66 90                	xchg   ax,ax

c0020650 <Semaphore::tryAcquire()>:
c0020650:	83 ec 0c             	sub    esp,0xc
c0020653:	fa                   	cli    
c0020654:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020659:	83 c0 01             	add    eax,0x1
c002065c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020661:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020666:	83 c0 01             	add    eax,0x1
c0020669:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002066e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020672:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020679:	8b 00                	mov    eax,DWORD PTR [eax]
c002067b:	39 c2                	cmp    edx,eax
c002067d:	7d 5d                	jge    c00206dc <Semaphore::tryAcquire()+0x8c>
c002067f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020683:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020686:	8d 50 01             	lea    edx,[eax+0x1]
c0020689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002068d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020690:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020695:	83 e8 01             	sub    eax,0x1
c0020698:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002069d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206a2:	85 c0                	test   eax,eax
c00206a4:	75 1a                	jne    c00206c0 <Semaphore::tryAcquire()+0x70>
c00206a6:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206ab:	85 c0                	test   eax,eax
c00206ad:	74 11                	je     c00206c0 <Semaphore::tryAcquire()+0x70>
c00206af:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206b9:	e8 ce 4b 00 00       	call   c002528c <schedule()>
c00206be:	66 90                	xchg   ax,ax
c00206c0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206c5:	83 e8 01             	sub    eax,0x1
c00206c8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206cd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206d2:	85 c0                	test   eax,eax
c00206d4:	75 02                	jne    c00206d8 <Semaphore::tryAcquire()+0x88>
c00206d6:	fb                   	sti    
c00206d7:	90                   	nop
c00206d8:	b0 01                	mov    al,0x1
c00206da:	eb 4c                	jmp    c0020728 <Semaphore::tryAcquire()+0xd8>
c00206dc:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206e1:	83 e8 01             	sub    eax,0x1
c00206e4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00206e9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206ee:	85 c0                	test   eax,eax
c00206f0:	75 1a                	jne    c002070c <Semaphore::tryAcquire()+0xbc>
c00206f2:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206f7:	85 c0                	test   eax,eax
c00206f9:	74 11                	je     c002070c <Semaphore::tryAcquire()+0xbc>
c00206fb:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020705:	e8 82 4b 00 00       	call   c002528c <schedule()>
c002070a:	66 90                	xchg   ax,ax
c002070c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020711:	83 e8 01             	sub    eax,0x1
c0020714:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020719:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002071e:	85 c0                	test   eax,eax
c0020720:	75 02                	jne    c0020724 <Semaphore::tryAcquire()+0xd4>
c0020722:	fb                   	sti    
c0020723:	90                   	nop
c0020724:	b0 00                	mov    al,0x0
c0020726:	66 90                	xchg   ax,ax
c0020728:	83 c4 0c             	add    esp,0xc
c002072b:	c3                   	ret    

c002072c <Semaphore::assertLocked(char const*)>:
c002072c:	83 ec 0c             	sub    esp,0xc
c002072f:	fa                   	cli    
c0020730:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020735:	83 c0 01             	add    eax,0x1
c0020738:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002073d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020742:	83 c0 01             	add    eax,0x1
c0020745:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002074a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002074e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020755:	8b 00                	mov    eax,DWORD PTR [eax]
c0020757:	39 c2                	cmp    edx,eax
c0020759:	7d 11                	jge    c002076c <Semaphore::assertLocked(char const*)+0x40>
c002075b:	83 ec 0c             	sub    esp,0xc
c002075e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020762:	e8 0f fb ff ff       	call   c0020276 <KePanic(char const*)>
c0020767:	83 c4 10             	add    esp,0x10
c002076a:	66 90                	xchg   ax,ax
c002076c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020771:	83 e8 01             	sub    eax,0x1
c0020774:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020779:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002077e:	85 c0                	test   eax,eax
c0020780:	75 1a                	jne    c002079c <Semaphore::assertLocked(char const*)+0x70>
c0020782:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020787:	85 c0                	test   eax,eax
c0020789:	74 11                	je     c002079c <Semaphore::assertLocked(char const*)+0x70>
c002078b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020795:	e8 f2 4a 00 00       	call   c002528c <schedule()>
c002079a:	66 90                	xchg   ax,ax
c002079c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00207a1:	83 e8 01             	sub    eax,0x1
c00207a4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00207a9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00207ae:	85 c0                	test   eax,eax
c00207b0:	75 02                	jne    c00207b4 <Semaphore::assertLocked(char const*)+0x88>
c00207b2:	fb                   	sti    
c00207b3:	90                   	nop
c00207b4:	90                   	nop
c00207b5:	83 c4 0c             	add    esp,0xc
c00207b8:	c3                   	ret    
c00207b9:	90                   	nop
c00207ba:	66 90                	xchg   ax,ax

c00207bc <Semaphore::acquire(int)>:
c00207bc:	83 ec 1c             	sub    esp,0x1c
c00207bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207c4:	0f 84 9a 00 00 00    	je     c0020864 <Semaphore::acquire(int)+0xa8>
c00207ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00207d2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00207d7:	90                   	nop
c00207d8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00207dd:	85 c0                	test   eax,eax
c00207df:	74 77                	je     c0020858 <Semaphore::acquire(int)+0x9c>
c00207e1:	83 ec 0c             	sub    esp,0xc
c00207e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207e8:	e8 63 fe ff ff       	call   c0020650 <Semaphore::tryAcquire()>
c00207ed:	83 c4 10             	add    esp,0x10
c00207f0:	83 f0 01             	xor    eax,0x1
c00207f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00207f7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00207fb:	83 f0 01             	xor    eax,0x1
c00207fe:	0f b6 c0             	movzx  eax,al
c0020801:	85 c0                	test   eax,eax
c0020803:	75 4f                	jne    c0020854 <Semaphore::acquire(int)+0x98>
c0020805:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c002080a:	7f 2c                	jg     c0020838 <Semaphore::acquire(int)+0x7c>
c002080c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020810:	89 d0                	mov    eax,edx
c0020812:	c1 e0 02             	shl    eax,0x2
c0020815:	01 d0                	add    eax,edx
c0020817:	01 c0                	add    eax,eax
c0020819:	83 ec 0c             	sub    esp,0xc
c002081c:	50                   	push   eax
c002081d:	e8 42 4c 00 00       	call   c0025464 <milliTenthSleep(unsigned int)>
c0020822:	83 c4 10             	add    esp,0x10
c0020825:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020829:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c002082d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020835:	eb a1                	jmp    c00207d8 <Semaphore::acquire(int)+0x1c>
c0020837:	90                   	nop
c0020838:	83 ec 0c             	sub    esp,0xc
c002083b:	68 90 01 00 00       	push   0x190
c0020840:	e8 1f 4c 00 00       	call   c0025464 <milliTenthSleep(unsigned int)>
c0020845:	83 c4 10             	add    esp,0x10
c0020848:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c002084d:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020852:	eb 84                	jmp    c00207d8 <Semaphore::acquire(int)+0x1c>
c0020854:	90                   	nop
c0020855:	8d 76 00             	lea    esi,[esi+0x0]
c0020858:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002085c:	e9 ff 00 00 00       	jmp    c0020960 <Semaphore::acquire(int)+0x1a4>
c0020861:	8d 76 00             	lea    esi,[esi+0x0]
c0020864:	fa                   	cli    
c0020865:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002086a:	83 c0 01             	add    eax,0x1
c002086d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020872:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020877:	83 c0 01             	add    eax,0x1
c002087a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002087f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020883:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002088a:	8b 00                	mov    eax,DWORD PTR [eax]
c002088c:	39 c2                	cmp    edx,eax
c002088e:	7d 14                	jge    c00208a4 <Semaphore::acquire(int)+0xe8>
c0020890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020894:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020897:	8d 50 01             	lea    edx,[eax+0x1]
c002089a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002089e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00208a1:	eb 6d                	jmp    c0020910 <Semaphore::acquire(int)+0x154>
c00208a3:	90                   	nop
c00208a4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00208ab:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00208b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208b9:	85 c0                	test   eax,eax
c00208bb:	75 13                	jne    c00208d0 <Semaphore::acquire(int)+0x114>
c00208bd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00208c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208cb:	eb 17                	jmp    c00208e4 <Semaphore::acquire(int)+0x128>
c00208cd:	8d 76 00             	lea    esi,[esi+0x0]
c00208d0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00208d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208dc:	8b 12                	mov    edx,DWORD PTR [edx]
c00208de:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00208e1:	8d 76 00             	lea    esi,[esi+0x0]
c00208e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00208eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208ef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00208f2:	83 ec 0c             	sub    esp,0xc
c00208f5:	68 7c 29 03 c0       	push   0xc003297c
c00208fa:	e8 5e 89 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00208ff:	83 c4 10             	add    esp,0x10
c0020902:	83 ec 0c             	sub    esp,0xc
c0020905:	6a 05                	push   0x5
c0020907:	e8 3c 4a 00 00       	call   c0025348 <blockTask(TaskState)>
c002090c:	83 c4 10             	add    esp,0x10
c002090f:	90                   	nop
c0020910:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020915:	83 e8 01             	sub    eax,0x1
c0020918:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002091d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020922:	85 c0                	test   eax,eax
c0020924:	75 1a                	jne    c0020940 <Semaphore::acquire(int)+0x184>
c0020926:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002092b:	85 c0                	test   eax,eax
c002092d:	74 11                	je     c0020940 <Semaphore::acquire(int)+0x184>
c002092f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020939:	e8 4e 49 00 00       	call   c002528c <schedule()>
c002093e:	66 90                	xchg   ax,ax
c0020940:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020945:	83 e8 01             	sub    eax,0x1
c0020948:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002094d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020952:	85 c0                	test   eax,eax
c0020954:	75 02                	jne    c0020958 <Semaphore::acquire(int)+0x19c>
c0020956:	fb                   	sti    
c0020957:	90                   	nop
c0020958:	b8 00 00 00 00       	mov    eax,0x0
c002095d:	8d 76 00             	lea    esi,[esi+0x0]
c0020960:	83 c4 1c             	add    esp,0x1c
c0020963:	c3                   	ret    

c0020964 <Semaphore::acquire()>:
c0020964:	83 ec 0c             	sub    esp,0xc
c0020967:	83 ec 08             	sub    esp,0x8
c002096a:	6a 00                	push   0x0
c002096c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020970:	e8 47 fe ff ff       	call   c00207bc <Semaphore::acquire(int)>
c0020975:	83 c4 10             	add    esp,0x10
c0020978:	90                   	nop
c0020979:	83 c4 0c             	add    esp,0xc
c002097c:	c3                   	ret    
c002097d:	90                   	nop
c002097e:	66 90                	xchg   ax,ax

c0020980 <Semaphore::release()>:
c0020980:	83 ec 1c             	sub    esp,0x1c
c0020983:	fa                   	cli    
c0020984:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020989:	83 c0 01             	add    eax,0x1
c002098c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020991:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020996:	83 c0 01             	add    eax,0x1
c0020999:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002099e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00209a5:	85 c0                	test   eax,eax
c00209a7:	74 2b                	je     c00209d4 <Semaphore::release()+0x54>
c00209a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00209b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209b8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00209bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00209c2:	83 ec 0c             	sub    esp,0xc
c00209c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00209c9:	e8 b6 4b 00 00       	call   c0025584 <unblockTask(ThreadControlBlock*)>
c00209ce:	83 c4 10             	add    esp,0x10
c00209d1:	eb 15                	jmp    c00209e8 <Semaphore::release()+0x68>
c00209d3:	90                   	nop
c00209d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00209db:	8d 50 ff             	lea    edx,[eax-0x1]
c00209de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209e2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00209e5:	8d 76 00             	lea    esi,[esi+0x0]
c00209e8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209ed:	83 e8 01             	sub    eax,0x1
c00209f0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209f5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209fa:	85 c0                	test   eax,eax
c00209fc:	75 1a                	jne    c0020a18 <Semaphore::release()+0x98>
c00209fe:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020a03:	85 c0                	test   eax,eax
c0020a05:	74 11                	je     c0020a18 <Semaphore::release()+0x98>
c0020a07:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020a11:	e8 76 48 00 00       	call   c002528c <schedule()>
c0020a16:	66 90                	xchg   ax,ax
c0020a18:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a1d:	83 e8 01             	sub    eax,0x1
c0020a20:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a25:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a2a:	85 c0                	test   eax,eax
c0020a2c:	75 02                	jne    c0020a30 <Semaphore::release()+0xb0>
c0020a2e:	fb                   	sti    
c0020a2f:	90                   	nop
c0020a30:	90                   	nop
c0020a31:	83 c4 1c             	add    esp,0x1c
c0020a34:	c3                   	ret    

c0020a35 <KiSigKill(int)>:
c0020a35:	83 ec 0c             	sub    esp,0xc
c0020a38:	6a 00                	push   0x0
c0020a3a:	6a 00                	push   0x0
c0020a3c:	6a ff                	push   0xffffffff
c0020a3e:	6a 01                	push   0x1
c0020a40:	e8 0d 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a45:	83 c4 1c             	add    esp,0x1c
c0020a48:	c3                   	ret    

c0020a49 <KiDefaultSignalHandlerIgnore(int)>:
c0020a49:	c3                   	ret    

c0020a4a <KiDefaultSignalHandlerPause(int)>:
c0020a4a:	57                   	push   edi
c0020a4b:	b9 07 00 00 00       	mov    ecx,0x7
c0020a50:	56                   	push   esi
c0020a51:	be d7 29 03 c0       	mov    esi,0xc00329d7
c0020a56:	83 ec 24             	sub    esp,0x24
c0020a59:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020a5d:	fc                   	cld    
c0020a5e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020a60:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020a64:	50                   	push   eax
c0020a65:	6a 00                	push   0x0
c0020a67:	6a 00                	push   0x0
c0020a69:	6a 27                	push   0x27
c0020a6b:	e8 e2 45 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a70:	83 c4 34             	add    esp,0x34
c0020a73:	5e                   	pop    esi
c0020a74:	5f                   	pop    edi
c0020a75:	c3                   	ret    

c0020a76 <KiDefaultSignalHandlerResume(int)>:
c0020a76:	57                   	push   edi
c0020a77:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020a7c:	56                   	push   esi
c0020a7d:	be f3 29 03 c0       	mov    esi,0xc00329f3
c0020a82:	83 ec 24             	sub    esp,0x24
c0020a85:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020a89:	fc                   	cld    
c0020a8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a8c:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020a90:	50                   	push   eax
c0020a91:	6a 00                	push   0x0
c0020a93:	6a 00                	push   0x0
c0020a95:	6a 27                	push   0x27
c0020a97:	e8 b6 45 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a9c:	83 c4 34             	add    esp,0x34
c0020a9f:	5e                   	pop    esi
c0020aa0:	5f                   	pop    edi
c0020aa1:	c3                   	ret    

c0020aa2 <KeDeinitSignals(SigHandlerBlock*)>:
c0020aa2:	e9 37 59 ff ff       	jmp    c00163de <free>

c0020aa7 <KeInitSignals()>:
c0020aa7:	53                   	push   ebx
c0020aa8:	83 ec 14             	sub    esp,0x14
c0020aab:	68 c8 00 00 00       	push   0xc8
c0020ab0:	e8 09 59 ff ff       	call   c00163be <malloc>
c0020ab5:	83 c4 0c             	add    esp,0xc
c0020ab8:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020ac2:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020acc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020ad3:	89 c3                	mov    ebx,eax
c0020ad5:	6a 20                	push   0x20
c0020ad7:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020add:	6a 00                	push   0x0
c0020adf:	50                   	push   eax
c0020ae0:	e8 0b fa fd ff       	call   c00004f0 <memset>
c0020ae5:	83 c4 0c             	add    esp,0xc
c0020ae8:	6a 44                	push   0x44
c0020aea:	6a 00                	push   0x0
c0020aec:	53                   	push   ebx
c0020aed:	e8 fe f9 fd ff       	call   c00004f0 <memset>
c0020af2:	89 d8                	mov    eax,ebx
c0020af4:	83 c4 18             	add    esp,0x18
c0020af7:	5b                   	pop    ebx
c0020af8:	c3                   	ret    

c0020af9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020af9:	53                   	push   ebx
c0020afa:	b8 01 00 00 00       	mov    eax,0x1
c0020aff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020b03:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020b07:	83 f9 10             	cmp    ecx,0x10
c0020b0a:	7f 21                	jg     c0020b2d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020b0c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b13:	89 03                	mov    DWORD PTR [ebx],eax
c0020b15:	b8 01 00 00 00       	mov    eax,0x1
c0020b1a:	d3 e0                	shl    eax,cl
c0020b1c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020b20:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020b23:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020b2b:	31 c0                	xor    eax,eax
c0020b2d:	5b                   	pop    ebx
c0020b2e:	c3                   	ret    

c0020b2f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020b2f:	55                   	push   ebp
c0020b30:	57                   	push   edi
c0020b31:	bf 08 00 00 00       	mov    edi,0x8
c0020b36:	56                   	push   esi
c0020b37:	53                   	push   ebx
c0020b38:	83 ec 18             	sub    esp,0x18
c0020b3b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020b3f:	68 10 2a 03 c0       	push   0xc0032a10
c0020b44:	e8 14 87 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0020b49:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020b50:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020b56:	83 c4 10             	add    esp,0x10
c0020b59:	31 c9                	xor    ecx,ecx
c0020b5b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020b5f:	99                   	cdq    
c0020b60:	f7 ff                	idiv   edi
c0020b62:	8d 42 24             	lea    eax,[edx+0x24]
c0020b65:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020b69:	85 f6                	test   esi,esi
c0020b6b:	75 1a                	jne    c0020b87 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020b6d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020b71:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020b75:	50                   	push   eax
c0020b76:	50                   	push   eax
c0020b77:	52                   	push   edx
c0020b78:	68 21 2a 03 c0       	push   0xc0032a21
c0020b7d:	e8 db 86 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0020b82:	83 c4 10             	add    esp,0x10
c0020b85:	eb 1b                	jmp    c0020ba2 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020b87:	41                   	inc    ecx
c0020b88:	83 f9 08             	cmp    ecx,0x8
c0020b8b:	75 ce                	jne    c0020b5b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020b8d:	83 ec 0c             	sub    esp,0xc
c0020b90:	be 01 00 00 00       	mov    esi,0x1
c0020b95:	68 42 2a 03 c0       	push   0xc0032a42
c0020b9a:	e8 be 86 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0020b9f:	83 c4 10             	add    esp,0x10
c0020ba2:	83 c4 0c             	add    esp,0xc
c0020ba5:	89 f0                	mov    eax,esi
c0020ba7:	5b                   	pop    ebx
c0020ba8:	5e                   	pop    esi
c0020ba9:	5f                   	pop    edi
c0020baa:	5d                   	pop    ebp
c0020bab:	c3                   	ret    

c0020bac <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020bac:	55                   	push   ebp
c0020bad:	57                   	push   edi
c0020bae:	56                   	push   esi
c0020baf:	53                   	push   ebx
c0020bb0:	51                   	push   ecx
c0020bb1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020bb5:	85 db                	test   ebx,ebx
c0020bb7:	0f 84 bc 00 00 00    	je     c0020c79 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bbd:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020bc4:	0f 84 af 00 00 00    	je     c0020c79 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bca:	31 c9                	xor    ecx,ecx
c0020bcc:	bf 08 00 00 00       	mov    edi,0x8
c0020bd1:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020bd7:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020bda:	99                   	cdq    
c0020bdb:	f7 ff                	idiv   edi
c0020bdd:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020be4:	85 ed                	test   ebp,ebp
c0020be6:	0f 84 9e 00 00 00    	je     c0020c8a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020bec:	89 e9                	mov    ecx,ebp
c0020bee:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020bf4:	bf 01 00 00 00       	mov    edi,0x1
c0020bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0020bfc:	d3 e7                	shl    edi,cl
c0020bfe:	31 c9                	xor    ecx,ecx
c0020c00:	b8 01 00 00 00       	mov    eax,0x1
c0020c05:	d3 e0                	shl    eax,cl
c0020c07:	85 04 24             	test   DWORD PTR [esp],eax
c0020c0a:	74 06                	je     c0020c12 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020c0c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020c10:	75 67                	jne    c0020c79 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020c12:	41                   	inc    ecx
c0020c13:	83 f9 11             	cmp    ecx,0x11
c0020c16:	75 e8                	jne    c0020c00 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020c18:	46                   	inc    esi
c0020c19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c1c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020c22:	09 f8                	or     eax,edi
c0020c24:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020c2f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020c35:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020c3c:	31 c0                	xor    eax,eax
c0020c3e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020c46:	74 09                	je     c0020c51 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020c48:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020c4f:	eb 06                	jmp    c0020c57 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020c51:	40                   	inc    eax
c0020c52:	83 f8 08             	cmp    eax,0x8
c0020c55:	75 e7                	jne    c0020c3e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020c57:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020c5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c5e:	83 fd 09             	cmp    ebp,0x9
c0020c61:	89 2a                	mov    DWORD PTR [edx],ebp
c0020c63:	75 07                	jne    c0020c6c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020c65:	b8 35 0a 02 c0       	mov    eax,0xc0020a35
c0020c6a:	eb 31                	jmp    c0020c9d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c6c:	83 f8 01             	cmp    eax,0x1
c0020c6f:	75 0c                	jne    c0020c7d <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020c71:	f7 d7                	not    edi
c0020c73:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020c79:	31 c0                	xor    eax,eax
c0020c7b:	eb 20                	jmp    c0020c9d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c7d:	85 c0                	test   eax,eax
c0020c7f:	75 1c                	jne    c0020c9d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c81:	8b 04 ad 80 42 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbd80]
c0020c88:	eb 13                	jmp    c0020c9d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c8a:	46                   	inc    esi
c0020c8b:	41                   	inc    ecx
c0020c8c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020c92:	83 f9 08             	cmp    ecx,0x8
c0020c95:	0f 85 36 ff ff ff    	jne    c0020bd1 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020c9b:	eb dc                	jmp    c0020c79 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020c9d:	5a                   	pop    edx
c0020c9e:	5b                   	pop    ebx
c0020c9f:	5e                   	pop    esi
c0020ca0:	5f                   	pop    edi
c0020ca1:	5d                   	pop    ebp
c0020ca2:	c3                   	ret    

c0020ca3 <KiCheckSignalZ>:
c0020ca3:	83 ec 10             	sub    esp,0x10
c0020ca6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020caa:	50                   	push   eax
c0020cab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020cb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020cb3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020cb9:	e8 ee fe ff ff       	call   c0020bac <KeCheckSignal(SigHandlerBlock*, int*)>
c0020cbe:	5a                   	pop    edx
c0020cbf:	31 d2                	xor    edx,edx
c0020cc1:	59                   	pop    ecx
c0020cc2:	85 c0                	test   eax,eax
c0020cc4:	74 19                	je     c0020cdf <KiCheckSignalZ+0x3c>
c0020cc6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020ccc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020ccf:	89 02                	mov    DWORD PTR [edx],eax
c0020cd1:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020cd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cdc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020cdf:	89 d0                	mov    eax,edx
c0020ce1:	83 c4 10             	add    esp,0x10
c0020ce4:	c3                   	ret    

c0020ce5 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020ce5:	56                   	push   esi
c0020ce6:	53                   	push   ebx
c0020ce7:	bb 01 00 00 00       	mov    ebx,0x1
c0020cec:	52                   	push   edx
c0020ced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020cf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020cf5:	d3 e3                	shl    ebx,cl
c0020cf7:	83 f9 10             	cmp    ecx,0x10
c0020cfa:	7f 08                	jg     c0020d04 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020cfc:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020d02:	75 10                	jne    c0020d14 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020d04:	83 ec 0c             	sub    esp,0xc
c0020d07:	68 53 2a 03 c0       	push   0xc0032a53
c0020d0c:	e8 65 f5 ff ff       	call   c0020276 <KePanic(char const*)>
c0020d11:	83 c4 10             	add    esp,0x10
c0020d14:	f7 d3                	not    ebx
c0020d16:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020d1c:	58                   	pop    eax
c0020d1d:	5b                   	pop    ebx
c0020d1e:	5e                   	pop    esi
c0020d1f:	c3                   	ret    

c0020d20 <KiFinishSignalZ>:
c0020d20:	53                   	push   ebx
c0020d21:	83 ec 10             	sub    esp,0x10
c0020d24:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020d28:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020d2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d33:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020d39:	e8 a7 ff ff ff       	call   c0020ce5 <KeCompleteSignal(SigHandlerBlock*, int)>
c0020d3e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020d44:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020d4b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020d52:	83 c4 18             	add    esp,0x18
c0020d55:	5b                   	pop    ebx
c0020d56:	c3                   	ret    

c0020d57 <SysSeekDir(regs*)>:
c0020d57:	31 c0                	xor    eax,eax
c0020d59:	31 d2                	xor    edx,edx
c0020d5b:	c3                   	ret    

c0020d5c <SysTellDir(regs*)>:
c0020d5c:	31 c0                	xor    eax,eax
c0020d5e:	31 d2                	xor    edx,edx
c0020d60:	c3                   	ret    

c0020d61 <SysVerify(regs*)>:
c0020d61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d65:	31 d2                	xor    edx,edx
c0020d67:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020d6a:	c3                   	ret    

c0020d6b <SysGetArgc(regs*)>:
c0020d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d73:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020d79:	89 c2                	mov    edx,eax
c0020d7b:	c1 fa 1f             	sar    edx,0x1f
c0020d7e:	c3                   	ret    

c0020d7f <SysTTYName(regs*)>:
c0020d7f:	b8 01 00 00 00       	mov    eax,0x1
c0020d84:	31 d2                	xor    edx,edx
c0020d86:	c3                   	ret    

c0020d87 <SysFormatDisk(regs*)>:
c0020d87:	56                   	push   esi
c0020d88:	53                   	push   ebx
c0020d89:	83 ec 04             	sub    esp,0x4
c0020d8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020d90:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020d96:	eb 28                	jmp    c0020dc0 <SysFormatDisk(regs*)+0x39>
c0020d98:	83 ec 0c             	sub    esp,0xc
c0020d9b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020d9e:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020da1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020da3:	51                   	push   ecx
c0020da4:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020da7:	51                   	push   ecx
c0020da8:	50                   	push   eax
c0020da9:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020db0:	50                   	push   eax
c0020db1:	53                   	push   ebx
c0020db2:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020db5:	83 c4 20             	add    esp,0x20
c0020db8:	83 f8 08             	cmp    eax,0x8
c0020dbb:	75 14                	jne    c0020dd1 <SysFormatDisk(regs*)+0x4a>
c0020dbd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020dc0:	85 db                	test   ebx,ebx
c0020dc2:	75 d4                	jne    c0020d98 <SysFormatDisk(regs*)+0x11>
c0020dc4:	83 c4 04             	add    esp,0x4
c0020dc7:	b8 03 00 00 00       	mov    eax,0x3
c0020dcc:	31 d2                	xor    edx,edx
c0020dce:	5b                   	pop    ebx
c0020dcf:	5e                   	pop    esi
c0020dd0:	c3                   	ret    
c0020dd1:	85 c0                	test   eax,eax
c0020dd3:	74 1f                	je     c0020df4 <SysFormatDisk(regs*)+0x6d>
c0020dd5:	83 f8 09             	cmp    eax,0x9
c0020dd8:	74 0d                	je     c0020de7 <SysFormatDisk(regs*)+0x60>
c0020dda:	83 c4 04             	add    esp,0x4
c0020ddd:	b8 02 00 00 00       	mov    eax,0x2
c0020de2:	31 d2                	xor    edx,edx
c0020de4:	5b                   	pop    ebx
c0020de5:	5e                   	pop    esi
c0020de6:	c3                   	ret    
c0020de7:	83 c4 04             	add    esp,0x4
c0020dea:	b8 01 00 00 00       	mov    eax,0x1
c0020def:	31 d2                	xor    edx,edx
c0020df1:	5b                   	pop    ebx
c0020df2:	5e                   	pop    esi
c0020df3:	c3                   	ret    
c0020df4:	83 c4 04             	add    esp,0x4
c0020df7:	31 c0                	xor    eax,eax
c0020df9:	31 d2                	xor    edx,edx
c0020dfb:	5b                   	pop    ebx
c0020dfc:	5e                   	pop    esi
c0020dfd:	c3                   	ret    

c0020dfe <SysSetDiskVolumeLabel(regs*)>:
c0020dfe:	56                   	push   esi
c0020dff:	53                   	push   ebx
c0020e00:	83 ec 04             	sub    esp,0x4
c0020e03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020e07:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020e0a:	83 f8 19             	cmp    eax,0x19
c0020e0d:	77 33                	ja     c0020e42 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e0f:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020e16:	85 c9                	test   ecx,ecx
c0020e18:	74 28                	je     c0020e42 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e1a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0020e1d:	85 db                	test   ebx,ebx
c0020e1f:	74 21                	je     c0020e42 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e21:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0020e27:	85 d2                	test   edx,edx
c0020e29:	74 17                	je     c0020e42 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e2b:	8b 32                	mov    esi,DWORD PTR [edx]
c0020e2d:	53                   	push   ebx
c0020e2e:	50                   	push   eax
c0020e2f:	51                   	push   ecx
c0020e30:	52                   	push   edx
c0020e31:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020e34:	83 c4 10             	add    esp,0x10
c0020e37:	89 c2                	mov    edx,eax
c0020e39:	83 c4 04             	add    esp,0x4
c0020e3c:	c1 fa 1f             	sar    edx,0x1f
c0020e3f:	5b                   	pop    ebx
c0020e40:	5e                   	pop    esi
c0020e41:	c3                   	ret    
c0020e42:	83 c4 04             	add    esp,0x4
c0020e45:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020e4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e4f:	5b                   	pop    ebx
c0020e50:	5e                   	pop    esi
c0020e51:	c3                   	ret    

c0020e52 <SysGetDiskVolumeLabel(regs*)>:
c0020e52:	57                   	push   edi
c0020e53:	56                   	push   esi
c0020e54:	53                   	push   ebx
c0020e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e59:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020e5c:	83 fa 19             	cmp    edx,0x19
c0020e5f:	77 3c                	ja     c0020e9d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e61:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020e68:	85 c9                	test   ecx,ecx
c0020e6a:	74 31                	je     c0020e9d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e6c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020e6f:	85 db                	test   ebx,ebx
c0020e71:	74 2a                	je     c0020e9d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e73:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020e76:	85 f6                	test   esi,esi
c0020e78:	74 23                	je     c0020e9d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e7a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020e80:	85 c0                	test   eax,eax
c0020e82:	74 19                	je     c0020e9d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e84:	83 ec 0c             	sub    esp,0xc
c0020e87:	8b 38                	mov    edi,DWORD PTR [eax]
c0020e89:	56                   	push   esi
c0020e8a:	53                   	push   ebx
c0020e8b:	52                   	push   edx
c0020e8c:	51                   	push   ecx
c0020e8d:	50                   	push   eax
c0020e8e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020e91:	83 c4 20             	add    esp,0x20
c0020e94:	89 c2                	mov    edx,eax
c0020e96:	5b                   	pop    ebx
c0020e97:	c1 fa 1f             	sar    edx,0x1f
c0020e9a:	5e                   	pop    esi
c0020e9b:	5f                   	pop    edi
c0020e9c:	c3                   	ret    
c0020e9d:	5b                   	pop    ebx
c0020e9e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020ea3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020ea8:	5e                   	pop    esi
c0020ea9:	5f                   	pop    edi
c0020eaa:	c3                   	ret    

c0020eab <SysShutdown(regs*)>:
c0020eab:	83 ec 0c             	sub    esp,0xc
c0020eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eb2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020eb5:	85 c0                	test   eax,eax
c0020eb7:	74 18                	je     c0020ed1 <SysShutdown(regs*)+0x26>
c0020eb9:	83 f8 01             	cmp    eax,0x1
c0020ebc:	74 38                	je     c0020ef6 <SysShutdown(regs*)+0x4b>
c0020ebe:	83 f8 02             	cmp    eax,0x2
c0020ec1:	74 24                	je     c0020ee7 <SysShutdown(regs*)+0x3c>
c0020ec3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020ec8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020ecd:	83 c4 0c             	add    esp,0xc
c0020ed0:	c3                   	ret    
c0020ed1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020ed6:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ed8:	6a 00                	push   0x0
c0020eda:	6a 00                	push   0x0
c0020edc:	6a 00                	push   0x0
c0020ede:	50                   	push   eax
c0020edf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020ee2:	83 c4 10             	add    esp,0x10
c0020ee5:	eb dc                	jmp    c0020ec3 <SysShutdown(regs*)+0x18>
c0020ee7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020eec:	8b 10                	mov    edx,DWORD PTR [eax]
c0020eee:	6a 00                	push   0x0
c0020ef0:	6a 00                	push   0x0
c0020ef2:	6a 01                	push   0x1
c0020ef4:	eb e8                	jmp    c0020ede <SysShutdown(regs*)+0x33>
c0020ef6:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0020efb:	85 c0                	test   eax,eax
c0020efd:	74 02                	je     c0020f01 <SysShutdown(regs*)+0x56>
c0020eff:	ff d0                	call   eax
c0020f01:	31 c0                	xor    eax,eax
c0020f03:	31 d2                	xor    edx,edx
c0020f05:	83 c4 0c             	add    esp,0xc
c0020f08:	c3                   	ret    

c0020f09 <SysRealpath(regs*)>:
c0020f09:	83 ec 0c             	sub    esp,0xc
c0020f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f10:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0020f13:	85 d2                	test   edx,edx
c0020f15:	74 07                	je     c0020f1e <SysRealpath(regs*)+0x15>
c0020f17:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020f1a:	85 c0                	test   eax,eax
c0020f1c:	75 0b                	jne    c0020f29 <SysRealpath(regs*)+0x20>
c0020f1e:	b8 01 00 00 00       	mov    eax,0x1
c0020f23:	31 d2                	xor    edx,edx
c0020f25:	83 c4 0c             	add    esp,0xc
c0020f28:	c3                   	ret    
c0020f29:	6a 00                	push   0x0
c0020f2b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0020f31:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0020f34:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0020f3a:	51                   	push   ecx
c0020f3b:	52                   	push   edx
c0020f3c:	50                   	push   eax
c0020f3d:	e8 2a 92 ff ff       	call   c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020f42:	83 c4 10             	add    esp,0x10
c0020f45:	31 c0                	xor    eax,eax
c0020f47:	31 d2                	xor    edx,edx
c0020f49:	83 c4 0c             	add    esp,0xc
c0020f4c:	c3                   	ret    

c0020f4d <SysReadDir(regs*)>:
c0020f4d:	53                   	push   ebx
c0020f4e:	83 ec 18             	sub    esp,0x18
c0020f51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020f55:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020f58:	83 f8 02             	cmp    eax,0x2
c0020f5b:	76 61                	jbe    c0020fbe <SysReadDir(regs*)+0x71>
c0020f5d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020f64:	77 49                	ja     c0020faf <SysReadDir(regs*)+0x62>
c0020f66:	83 ec 0c             	sub    esp,0xc
c0020f69:	50                   	push   eax
c0020f6a:	e8 5c 6e ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c0020f6f:	83 c4 10             	add    esp,0x10
c0020f72:	85 c0                	test   eax,eax
c0020f74:	74 39                	je     c0020faf <SysReadDir(regs*)+0x62>
c0020f76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f7e:	83 ec 0c             	sub    esp,0xc
c0020f81:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f83:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020f87:	51                   	push   ecx
c0020f88:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020f8b:	51                   	push   ecx
c0020f8c:	6a 00                	push   0x0
c0020f8e:	68 10 01 00 00       	push   0x110
c0020f93:	50                   	push   eax
c0020f94:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020f97:	83 c4 20             	add    esp,0x20
c0020f9a:	85 c0                	test   eax,eax
c0020f9c:	74 29                	je     c0020fc7 <SysReadDir(regs*)+0x7a>
c0020f9e:	83 f8 07             	cmp    eax,0x7
c0020fa1:	74 1b                	je     c0020fbe <SysReadDir(regs*)+0x71>
c0020fa3:	b8 02 00 00 00       	mov    eax,0x2
c0020fa8:	31 d2                	xor    edx,edx
c0020faa:	83 c4 18             	add    esp,0x18
c0020fad:	5b                   	pop    ebx
c0020fae:	c3                   	ret    
c0020faf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020fb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fb9:	83 c4 18             	add    esp,0x18
c0020fbc:	5b                   	pop    ebx
c0020fbd:	c3                   	ret    
c0020fbe:	b8 01 00 00 00       	mov    eax,0x1
c0020fc3:	31 d2                	xor    edx,edx
c0020fc5:	eb e3                	jmp    c0020faa <SysReadDir(regs*)+0x5d>
c0020fc7:	31 c0                	xor    eax,eax
c0020fc9:	31 d2                	xor    edx,edx
c0020fcb:	eb dd                	jmp    c0020faa <SysReadDir(regs*)+0x5d>

c0020fcd <SysIsATTY(regs*)>:
c0020fcd:	83 ec 0c             	sub    esp,0xc
c0020fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fd4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020fd7:	83 f8 02             	cmp    eax,0x2
c0020fda:	76 07                	jbe    c0020fe3 <SysIsATTY(regs*)+0x16>
c0020fdc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0020fe1:	75 26                	jne    c0021009 <SysIsATTY(regs*)+0x3c>
c0020fe3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020fe8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020feb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0020ff1:	85 c0                	test   eax,eax
c0020ff3:	74 24                	je     c0021019 <SysIsATTY(regs*)+0x4c>
c0020ff5:	83 ec 0c             	sub    esp,0xc
c0020ff8:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ffa:	50                   	push   eax
c0020ffb:	ff 12                	call   DWORD PTR [edx]
c0020ffd:	31 d2                	xor    edx,edx
c0020fff:	0f b6 c0             	movzx  eax,al
c0021002:	83 c4 10             	add    esp,0x10
c0021005:	83 c4 0c             	add    esp,0xc
c0021008:	c3                   	ret    
c0021009:	83 ec 0c             	sub    esp,0xc
c002100c:	50                   	push   eax
c002100d:	e8 b9 6d ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c0021012:	83 c4 10             	add    esp,0x10
c0021015:	85 c0                	test   eax,eax
c0021017:	75 dc                	jne    c0020ff5 <SysIsATTY(regs*)+0x28>
c0021019:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002101e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021023:	83 c4 0c             	add    esp,0xc
c0021026:	c3                   	ret    

c0021027 <SysSeek(regs*)>:
c0021027:	53                   	push   ebx
c0021028:	83 ec 08             	sub    esp,0x8
c002102b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002102f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021032:	8d 50 fd             	lea    edx,[eax-0x3]
c0021035:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c002103b:	77 32                	ja     c002106f <SysSeek(regs*)+0x48>
c002103d:	83 ec 0c             	sub    esp,0xc
c0021040:	50                   	push   eax
c0021041:	e8 85 6d ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c0021046:	83 c4 0c             	add    esp,0xc
c0021049:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002104c:	31 db                	xor    ebx,ebx
c002104e:	53                   	push   ebx
c002104f:	51                   	push   ecx
c0021050:	50                   	push   eax
c0021051:	e8 ea 94 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0021056:	83 c4 10             	add    esp,0x10
c0021059:	85 c0                	test   eax,eax
c002105b:	0f 95 c0             	setne  al
c002105e:	31 d2                	xor    edx,edx
c0021060:	0f b6 c0             	movzx  eax,al
c0021063:	f7 d8                	neg    eax
c0021065:	83 d2 00             	adc    edx,0x0
c0021068:	83 c4 08             	add    esp,0x8
c002106b:	f7 da                	neg    edx
c002106d:	5b                   	pop    ebx
c002106e:	c3                   	ret    
c002106f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021074:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021079:	83 c4 08             	add    esp,0x8
c002107c:	5b                   	pop    ebx
c002107d:	c3                   	ret    

c002107e <SysTell(regs*)>:
c002107e:	53                   	push   ebx
c002107f:	83 ec 08             	sub    esp,0x8
c0021082:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021086:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021089:	83 f8 02             	cmp    eax,0x2
c002108c:	76 4e                	jbe    c00210dc <SysTell(regs*)+0x5e>
c002108e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021093:	76 19                	jbe    c00210ae <SysTell(regs*)+0x30>
c0021095:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021098:	31 d2                	xor    edx,edx
c002109a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210a7:	31 c0                	xor    eax,eax
c00210a9:	83 c4 08             	add    esp,0x8
c00210ac:	5b                   	pop    ebx
c00210ad:	c3                   	ret    
c00210ae:	83 ec 0c             	sub    esp,0xc
c00210b1:	50                   	push   eax
c00210b2:	e8 14 6d ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c00210b7:	5a                   	pop    edx
c00210b8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00210bb:	59                   	pop    ecx
c00210bc:	53                   	push   ebx
c00210bd:	50                   	push   eax
c00210be:	e8 29 95 ff ff       	call   c001a5ec <File::tell(unsigned long long*)>
c00210c3:	83 c4 10             	add    esp,0x10
c00210c6:	85 c0                	test   eax,eax
c00210c8:	0f 95 c0             	setne  al
c00210cb:	31 d2                	xor    edx,edx
c00210cd:	0f b6 c0             	movzx  eax,al
c00210d0:	f7 d8                	neg    eax
c00210d2:	83 d2 00             	adc    edx,0x0
c00210d5:	83 c4 08             	add    esp,0x8
c00210d8:	f7 da                	neg    edx
c00210da:	5b                   	pop    ebx
c00210db:	c3                   	ret    
c00210dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210e6:	83 c4 08             	add    esp,0x8
c00210e9:	5b                   	pop    ebx
c00210ea:	c3                   	ret    

c00210eb <SysSize(regs*)>:
c00210eb:	53                   	push   ebx
c00210ec:	83 ec 18             	sub    esp,0x18
c00210ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00210f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00210f6:	83 f8 02             	cmp    eax,0x2
c00210f9:	76 54                	jbe    c002114f <SysSize(regs*)+0x64>
c00210fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021100:	76 19                	jbe    c002111b <SysSize(regs*)+0x30>
c0021102:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021105:	31 d2                	xor    edx,edx
c0021107:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002110d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021114:	31 c0                	xor    eax,eax
c0021116:	83 c4 18             	add    esp,0x18
c0021119:	5b                   	pop    ebx
c002111a:	c3                   	ret    
c002111b:	83 ec 0c             	sub    esp,0xc
c002111e:	50                   	push   eax
c002111f:	e8 a7 6c ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c0021124:	83 c4 0c             	add    esp,0xc
c0021127:	8d 54 24 13          	lea    edx,[esp+0x13]
c002112b:	52                   	push   edx
c002112c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002112f:	52                   	push   edx
c0021130:	50                   	push   eax
c0021131:	e8 4e 96 ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c0021136:	83 c4 10             	add    esp,0x10
c0021139:	85 c0                	test   eax,eax
c002113b:	0f 95 c0             	setne  al
c002113e:	31 d2                	xor    edx,edx
c0021140:	0f b6 c0             	movzx  eax,al
c0021143:	f7 d8                	neg    eax
c0021145:	83 d2 00             	adc    edx,0x0
c0021148:	83 c4 18             	add    esp,0x18
c002114b:	f7 da                	neg    edx
c002114d:	5b                   	pop    ebx
c002114e:	c3                   	ret    
c002114f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021154:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021159:	83 c4 18             	add    esp,0x18
c002115c:	5b                   	pop    ebx
c002115d:	c3                   	ret    

c002115e <SysSizeFromFilename(regs*)>:
c002115e:	55                   	push   ebp
c002115f:	57                   	push   edi
c0021160:	56                   	push   esi
c0021161:	53                   	push   ebx
c0021162:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021168:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c002116f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021172:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021175:	85 f6                	test   esi,esi
c0021177:	74 34                	je     c00211ad <SysSizeFromFilename(regs*)+0x4f>
c0021179:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002117f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021182:	83 f8 02             	cmp    eax,0x2
c0021185:	76 2d                	jbe    c00211b4 <SysSizeFromFilename(regs*)+0x56>
c0021187:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c002118c:	76 3b                	jbe    c00211c9 <SysSizeFromFilename(regs*)+0x6b>
c002118e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021191:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021197:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002119e:	81 c4 5c 02 00 00    	add    esp,0x25c
c00211a4:	31 c0                	xor    eax,eax
c00211a6:	5b                   	pop    ebx
c00211a7:	31 d2                	xor    edx,edx
c00211a9:	5e                   	pop    esi
c00211aa:	5f                   	pop    edi
c00211ab:	5d                   	pop    ebp
c00211ac:	c3                   	ret    
c00211ad:	89 f8                	mov    eax,edi
c00211af:	83 f8 02             	cmp    eax,0x2
c00211b2:	77 d3                	ja     c0021187 <SysSizeFromFilename(regs*)+0x29>
c00211b4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00211ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00211bf:	5b                   	pop    ebx
c00211c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00211c5:	5e                   	pop    esi
c00211c6:	5f                   	pop    edi
c00211c7:	5d                   	pop    ebp
c00211c8:	c3                   	ret    
c00211c9:	83 ec 0c             	sub    esp,0xc
c00211cc:	68 14 01 00 00       	push   0x114
c00211d1:	e8 e8 51 ff ff       	call   c00163be <malloc>
c00211d6:	6a 01                	push   0x1
c00211d8:	89 c5                	mov    ebp,eax
c00211da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211df:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00211e2:	51                   	push   ecx
c00211e3:	57                   	push   edi
c00211e4:	55                   	push   ebp
c00211e5:	e8 9c 91 ff ff       	call   c001a386 <File::File(char const*, Process*, bool)>
c00211ea:	83 c4 1c             	add    esp,0x1c
c00211ed:	8d 44 24 23          	lea    eax,[esp+0x23]
c00211f1:	50                   	push   eax
c00211f2:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00211f5:	53                   	push   ebx
c00211f6:	55                   	push   ebp
c00211f7:	e8 88 95 ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c00211fc:	83 c4 10             	add    esp,0x10
c00211ff:	85 ed                	test   ebp,ebp
c0021201:	74 15                	je     c0021218 <SysSizeFromFilename(regs*)+0xba>
c0021203:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021207:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002120a:	83 ec 0c             	sub    esp,0xc
c002120d:	55                   	push   ebp
c002120e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021211:	83 c4 10             	add    esp,0x10
c0021214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021218:	85 c0                	test   eax,eax
c002121a:	75 98                	jne    c00211b4 <SysSizeFromFilename(regs*)+0x56>
c002121c:	6a 00                	push   0x0
c002121e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021223:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021226:	05 0c 01 00 00       	add    eax,0x10c
c002122b:	50                   	push   eax
c002122c:	57                   	push   edi
c002122d:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021234:	53                   	push   ebx
c0021235:	e8 32 8f ff ff       	call   c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002123a:	58                   	pop    eax
c002123b:	5a                   	pop    edx
c002123c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021240:	50                   	push   eax
c0021241:	53                   	push   ebx
c0021242:	e8 8d 89 ff ff       	call   c0019bd4 <KeDereferenceSymlink(char const*, char*)>
c0021247:	83 c4 10             	add    esp,0x10
c002124a:	83 f8 01             	cmp    eax,0x1
c002124d:	74 1a                	je     c0021269 <SysSizeFromFilename(regs*)+0x10b>
c002124f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0021254:	74 26                	je     c002127c <SysSizeFromFilename(regs*)+0x11e>
c0021256:	85 f6                	test   esi,esi
c0021258:	0f 84 40 ff ff ff    	je     c002119e <SysSizeFromFilename(regs*)+0x40>
c002125e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021264:	e9 35 ff ff ff       	jmp    c002119e <SysSizeFromFilename(regs*)+0x40>
c0021269:	85 f6                	test   esi,esi
c002126b:	0f 84 2d ff ff ff    	je     c002119e <SysSizeFromFilename(regs*)+0x40>
c0021271:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0021277:	e9 22 ff ff ff       	jmp    c002119e <SysSizeFromFilename(regs*)+0x40>
c002127c:	85 f6                	test   esi,esi
c002127e:	0f 84 1a ff ff ff    	je     c002119e <SysSizeFromFilename(regs*)+0x40>
c0021284:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002128a:	e9 0f ff ff ff       	jmp    c002119e <SysSizeFromFilename(regs*)+0x40>

c002128f <SysSizeFromFilenameNoSymlink(regs*)>:
c002128f:	55                   	push   ebp
c0021290:	57                   	push   edi
c0021291:	56                   	push   esi
c0021292:	53                   	push   ebx
c0021293:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021299:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00212a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00212a3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00212a6:	85 f6                	test   esi,esi
c00212a8:	74 34                	je     c00212de <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00212aa:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00212b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00212b3:	83 f8 02             	cmp    eax,0x2
c00212b6:	76 2d                	jbe    c00212e5 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00212b8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00212bd:	76 3b                	jbe    c00212fa <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00212bf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00212c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212cf:	81 c4 5c 02 00 00    	add    esp,0x25c
c00212d5:	31 c0                	xor    eax,eax
c00212d7:	5b                   	pop    ebx
c00212d8:	31 d2                	xor    edx,edx
c00212da:	5e                   	pop    esi
c00212db:	5f                   	pop    edi
c00212dc:	5d                   	pop    ebp
c00212dd:	c3                   	ret    
c00212de:	89 f8                	mov    eax,edi
c00212e0:	83 f8 02             	cmp    eax,0x2
c00212e3:	77 d3                	ja     c00212b8 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00212e5:	81 c4 5c 02 00 00    	add    esp,0x25c
c00212eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00212f0:	5b                   	pop    ebx
c00212f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212f6:	5e                   	pop    esi
c00212f7:	5f                   	pop    edi
c00212f8:	5d                   	pop    ebp
c00212f9:	c3                   	ret    
c00212fa:	83 ec 0c             	sub    esp,0xc
c00212fd:	68 14 01 00 00       	push   0x114
c0021302:	e8 b7 50 ff ff       	call   c00163be <malloc>
c0021307:	6a 00                	push   0x0
c0021309:	89 c5                	mov    ebp,eax
c002130b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021310:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021313:	51                   	push   ecx
c0021314:	57                   	push   edi
c0021315:	55                   	push   ebp
c0021316:	e8 6b 90 ff ff       	call   c001a386 <File::File(char const*, Process*, bool)>
c002131b:	83 c4 1c             	add    esp,0x1c
c002131e:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021322:	50                   	push   eax
c0021323:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021326:	53                   	push   ebx
c0021327:	55                   	push   ebp
c0021328:	e8 57 94 ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c002132d:	83 c4 10             	add    esp,0x10
c0021330:	85 ed                	test   ebp,ebp
c0021332:	74 15                	je     c0021349 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0021334:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021338:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002133b:	83 ec 0c             	sub    esp,0xc
c002133e:	55                   	push   ebp
c002133f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021342:	83 c4 10             	add    esp,0x10
c0021345:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021349:	85 c0                	test   eax,eax
c002134b:	75 98                	jne    c00212e5 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c002134d:	6a 00                	push   0x0
c002134f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021354:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021357:	05 0c 01 00 00       	add    eax,0x10c
c002135c:	50                   	push   eax
c002135d:	57                   	push   edi
c002135e:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021365:	53                   	push   ebx
c0021366:	e8 01 8e ff ff       	call   c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002136b:	58                   	pop    eax
c002136c:	5a                   	pop    edx
c002136d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021371:	50                   	push   eax
c0021372:	53                   	push   ebx
c0021373:	e8 5c 88 ff ff       	call   c0019bd4 <KeDereferenceSymlink(char const*, char*)>
c0021378:	83 c4 10             	add    esp,0x10
c002137b:	83 f8 01             	cmp    eax,0x1
c002137e:	74 1a                	je     c002139a <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0021380:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0021385:	74 26                	je     c00213ad <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c0021387:	85 f6                	test   esi,esi
c0021389:	0f 84 40 ff ff ff    	je     c00212cf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c002138f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021395:	e9 35 ff ff ff       	jmp    c00212cf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c002139a:	85 f6                	test   esi,esi
c002139c:	0f 84 2d ff ff ff    	je     c00212cf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00213a2:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00213a8:	e9 22 ff ff ff       	jmp    c00212cf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00213ad:	85 f6                	test   esi,esi
c00213af:	0f 84 1a ff ff ff    	je     c00212cf <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00213b5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00213bb:	e9 0f ff ff ff       	jmp    c00212cf <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00213c0 <SysClose(regs*)>:
c00213c0:	53                   	push   ebx
c00213c1:	83 ec 08             	sub    esp,0x8
c00213c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00213cb:	83 f8 02             	cmp    eax,0x2
c00213ce:	76 41                	jbe    c0021411 <SysClose(regs*)+0x51>
c00213d0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00213d6:	83 fa 01             	cmp    edx,0x1
c00213d9:	76 2d                	jbe    c0021408 <SysClose(regs*)+0x48>
c00213db:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00213e0:	77 2f                	ja     c0021411 <SysClose(regs*)+0x51>
c00213e2:	83 ec 0c             	sub    esp,0xc
c00213e5:	50                   	push   eax
c00213e6:	e8 e0 69 ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c00213eb:	89 c3                	mov    ebx,eax
c00213ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00213f0:	e8 eb 90 ff ff       	call   c001a4e0 <File::close()>
c00213f5:	83 c4 10             	add    esp,0x10
c00213f8:	85 db                	test   ebx,ebx
c00213fa:	74 0c                	je     c0021408 <SysClose(regs*)+0x48>
c00213fc:	83 ec 0c             	sub    esp,0xc
c00213ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021401:	53                   	push   ebx
c0021402:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021405:	83 c4 10             	add    esp,0x10
c0021408:	31 c0                	xor    eax,eax
c002140a:	31 d2                	xor    edx,edx
c002140c:	83 c4 08             	add    esp,0x8
c002140f:	5b                   	pop    ebx
c0021410:	c3                   	ret    
c0021411:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021416:	ba ff ff ff ff       	mov    edx,0xffffffff
c002141b:	83 c4 08             	add    esp,0x8
c002141e:	5b                   	pop    ebx
c002141f:	c3                   	ret    

c0021420 <SysOpenDir(regs*)>:
c0021420:	56                   	push   esi
c0021421:	53                   	push   ebx
c0021422:	83 ec 04             	sub    esp,0x4
c0021425:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021429:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002142c:	85 c9                	test   ecx,ecx
c002142e:	74 5d                	je     c002148d <SysOpenDir(regs*)+0x6d>
c0021430:	83 ec 0c             	sub    esp,0xc
c0021433:	68 14 01 00 00       	push   0x114
c0021438:	e8 81 4f ff ff       	call   c00163be <malloc>
c002143d:	83 c4 0c             	add    esp,0xc
c0021440:	89 c6                	mov    esi,eax
c0021442:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021447:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002144a:	50                   	push   eax
c002144b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002144e:	52                   	push   edx
c002144f:	56                   	push   esi
c0021450:	e8 ef 94 ff ff       	call   c001a944 <Directory::Directory(char const*, Process*)>
c0021455:	83 c4 10             	add    esp,0x10
c0021458:	85 f6                	test   esi,esi
c002145a:	74 31                	je     c002148d <SysOpenDir(regs*)+0x6d>
c002145c:	83 ec 0c             	sub    esp,0xc
c002145f:	56                   	push   esi
c0021460:	e8 a7 95 ff ff       	call   c001aa0c <Directory::open()>
c0021465:	83 c4 10             	add    esp,0x10
c0021468:	85 c0                	test   eax,eax
c002146a:	75 21                	jne    c002148d <SysOpenDir(regs*)+0x6d>
c002146c:	83 ec 0c             	sub    esp,0xc
c002146f:	56                   	push   esi
c0021470:	e8 59 66 ff ff       	call   c0017ace <UnixFile::getFileDescriptor()>
c0021475:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021478:	83 c4 10             	add    esp,0x10
c002147b:	89 02                	mov    DWORD PTR [edx],eax
c002147d:	c1 f8 1f             	sar    eax,0x1f
c0021480:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021483:	83 c4 04             	add    esp,0x4
c0021486:	31 c0                	xor    eax,eax
c0021488:	31 d2                	xor    edx,edx
c002148a:	5b                   	pop    ebx
c002148b:	5e                   	pop    esi
c002148c:	c3                   	ret    
c002148d:	83 c4 04             	add    esp,0x4
c0021490:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021495:	ba ff ff ff ff       	mov    edx,0xffffffff
c002149a:	5b                   	pop    ebx
c002149b:	5e                   	pop    esi
c002149c:	c3                   	ret    

c002149d <SysMakeDir(regs*)>:
c002149d:	56                   	push   esi
c002149e:	53                   	push   ebx
c002149f:	83 ec 10             	sub    esp,0x10
c00214a2:	68 14 01 00 00       	push   0x114
c00214a7:	e8 12 4f ff ff       	call   c00163be <malloc>
c00214ac:	83 c4 0c             	add    esp,0xc
c00214af:	89 c3                	mov    ebx,eax
c00214b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00214b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00214b9:	50                   	push   eax
c00214ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214be:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00214c1:	52                   	push   edx
c00214c2:	53                   	push   ebx
c00214c3:	e8 7c 94 ff ff       	call   c001a944 <Directory::Directory(char const*, Process*)>
c00214c8:	83 c4 10             	add    esp,0x10
c00214cb:	85 db                	test   ebx,ebx
c00214cd:	74 2c                	je     c00214fb <SysMakeDir(regs*)+0x5e>
c00214cf:	83 ec 0c             	sub    esp,0xc
c00214d2:	53                   	push   ebx
c00214d3:	e8 14 97 ff ff       	call   c001abec <Directory::create()>
c00214d8:	89 c6                	mov    esi,eax
c00214da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00214dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00214df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00214e2:	83 c4 10             	add    esp,0x10
c00214e5:	31 c0                	xor    eax,eax
c00214e7:	85 f6                	test   esi,esi
c00214e9:	0f 95 c0             	setne  al
c00214ec:	31 d2                	xor    edx,edx
c00214ee:	f7 d8                	neg    eax
c00214f0:	83 d2 00             	adc    edx,0x0
c00214f3:	83 c4 04             	add    esp,0x4
c00214f6:	f7 da                	neg    edx
c00214f8:	5b                   	pop    ebx
c00214f9:	5e                   	pop    esi
c00214fa:	c3                   	ret    
c00214fb:	83 c4 04             	add    esp,0x4
c00214fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021503:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021508:	5b                   	pop    ebx
c0021509:	5e                   	pop    esi
c002150a:	c3                   	ret    

c002150b <SysCloseDir(regs*)>:
c002150b:	53                   	push   ebx
c002150c:	83 ec 08             	sub    esp,0x8
c002150f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021513:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021516:	8d 50 fd             	lea    edx,[eax-0x3]
c0021519:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c002151f:	77 2f                	ja     c0021550 <SysCloseDir(regs*)+0x45>
c0021521:	83 ec 0c             	sub    esp,0xc
c0021524:	50                   	push   eax
c0021525:	e8 a1 68 ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c002152a:	89 c3                	mov    ebx,eax
c002152c:	89 04 24             	mov    DWORD PTR [esp],eax
c002152f:	e8 34 95 ff ff       	call   c001aa68 <Directory::close()>
c0021534:	83 c4 10             	add    esp,0x10
c0021537:	85 db                	test   ebx,ebx
c0021539:	74 0c                	je     c0021547 <SysCloseDir(regs*)+0x3c>
c002153b:	83 ec 0c             	sub    esp,0xc
c002153e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021540:	53                   	push   ebx
c0021541:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021544:	83 c4 10             	add    esp,0x10
c0021547:	31 c0                	xor    eax,eax
c0021549:	31 d2                	xor    edx,edx
c002154b:	83 c4 08             	add    esp,0x8
c002154e:	5b                   	pop    ebx
c002154f:	c3                   	ret    
c0021550:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021555:	ba ff ff ff ff       	mov    edx,0xffffffff
c002155a:	83 c4 08             	add    esp,0x8
c002155d:	5b                   	pop    ebx
c002155e:	c3                   	ret    

c002155f <SysWait(regs*)>:
c002155f:	83 ec 10             	sub    esp,0x10
c0021562:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021566:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021569:	52                   	push   edx
c002156a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c002156d:	51                   	push   ecx
c002156e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021571:	50                   	push   eax
c0021572:	e8 09 3e 00 00       	call   c0025380 <waitTask(int, int*, int)>
c0021577:	83 c4 1c             	add    esp,0x1c
c002157a:	89 c2                	mov    edx,eax
c002157c:	c1 fa 1f             	sar    edx,0x1f
c002157f:	c3                   	ret    

c0021580 <SysNotImpl(regs*)>:
c0021580:	83 ec 18             	sub    esp,0x18
c0021583:	68 64 2a 03 c0       	push   0xc0032a64
c0021588:	e8 e9 ec ff ff       	call   c0020276 <KePanic(char const*)>
c002158d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021592:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021597:	83 c4 1c             	add    esp,0x1c
c002159a:	c3                   	ret    

c002159b <SysPanic(regs*)>:
c002159b:	83 ec 18             	sub    esp,0x18
c002159e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215a2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00215a5:	50                   	push   eax
c00215a6:	e8 cb ec ff ff       	call   c0020276 <KePanic(char const*)>
c00215ab:	b8 01 00 00 00       	mov    eax,0x1
c00215b0:	31 d2                	xor    edx,edx
c00215b2:	83 c4 1c             	add    esp,0x1c
c00215b5:	c3                   	ret    

c00215b6 <SysRmdir(regs*)>:
c00215b6:	56                   	push   esi
c00215b7:	53                   	push   ebx
c00215b8:	83 ec 20             	sub    esp,0x20
c00215bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00215bf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00215c2:	68 14 01 00 00       	push   0x114
c00215c7:	e8 f2 4d ff ff       	call   c00163be <malloc>
c00215cc:	6a 00                	push   0x0
c00215ce:	89 c3                	mov    ebx,eax
c00215d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00215d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00215d8:	50                   	push   eax
c00215d9:	56                   	push   esi
c00215da:	53                   	push   ebx
c00215db:	e8 a6 8d ff ff       	call   c001a386 <File::File(char const*, Process*, bool)>
c00215e0:	83 c4 14             	add    esp,0x14
c00215e3:	53                   	push   ebx
c00215e4:	e8 67 90 ff ff       	call   c001a650 <File::unlink()>
c00215e9:	83 c4 10             	add    esp,0x10
c00215ec:	85 db                	test   ebx,ebx
c00215ee:	74 14                	je     c0021604 <SysRmdir(regs*)+0x4e>
c00215f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215f4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00215f6:	83 ec 0c             	sub    esp,0xc
c00215f9:	53                   	push   ebx
c00215fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00215fd:	83 c4 10             	add    esp,0x10
c0021600:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021604:	85 c0                	test   eax,eax
c0021606:	0f 95 c0             	setne  al
c0021609:	31 d2                	xor    edx,edx
c002160b:	0f b6 c0             	movzx  eax,al
c002160e:	f7 d8                	neg    eax
c0021610:	83 d2 00             	adc    edx,0x0
c0021613:	83 c4 14             	add    esp,0x14
c0021616:	f7 da                	neg    edx
c0021618:	5b                   	pop    ebx
c0021619:	5e                   	pop    esi
c002161a:	c3                   	ret    

c002161b <SysUnlink(regs*)>:
c002161b:	56                   	push   esi
c002161c:	53                   	push   ebx
c002161d:	83 ec 20             	sub    esp,0x20
c0021620:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021624:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021627:	68 14 01 00 00       	push   0x114
c002162c:	e8 8d 4d ff ff       	call   c00163be <malloc>
c0021631:	6a 00                	push   0x0
c0021633:	89 c3                	mov    ebx,eax
c0021635:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002163a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002163d:	50                   	push   eax
c002163e:	56                   	push   esi
c002163f:	53                   	push   ebx
c0021640:	e8 41 8d ff ff       	call   c001a386 <File::File(char const*, Process*, bool)>
c0021645:	83 c4 14             	add    esp,0x14
c0021648:	53                   	push   ebx
c0021649:	e8 02 90 ff ff       	call   c001a650 <File::unlink()>
c002164e:	83 c4 10             	add    esp,0x10
c0021651:	85 db                	test   ebx,ebx
c0021653:	74 14                	je     c0021669 <SysUnlink(regs*)+0x4e>
c0021655:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021659:	8b 13                	mov    edx,DWORD PTR [ebx]
c002165b:	83 ec 0c             	sub    esp,0xc
c002165e:	53                   	push   ebx
c002165f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021662:	83 c4 10             	add    esp,0x10
c0021665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021669:	85 c0                	test   eax,eax
c002166b:	0f 95 c0             	setne  al
c002166e:	31 d2                	xor    edx,edx
c0021670:	0f b6 c0             	movzx  eax,al
c0021673:	f7 d8                	neg    eax
c0021675:	83 d2 00             	adc    edx,0x0
c0021678:	83 c4 14             	add    esp,0x14
c002167b:	f7 da                	neg    edx
c002167d:	5b                   	pop    ebx
c002167e:	5e                   	pop    esi
c002167f:	c3                   	ret    

c0021680 <SysGetArgv(regs*)>:
c0021680:	83 ec 0c             	sub    esp,0xc
c0021683:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021687:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c002168a:	85 c0                	test   eax,eax
c002168c:	78 2c                	js     c00216ba <SysGetArgv(regs*)+0x3a>
c002168e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021694:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0021697:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c002169d:	7d 1b                	jge    c00216ba <SysGetArgv(regs*)+0x3a>
c002169f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00216a6:	85 c0                	test   eax,eax
c00216a8:	74 18                	je     c00216c2 <SysGetArgv(regs*)+0x42>
c00216aa:	83 ec 08             	sub    esp,0x8
c00216ad:	50                   	push   eax
c00216ae:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00216b1:	50                   	push   eax
c00216b2:	e8 89 ef fd ff       	call   c0000640 <strcpy>
c00216b7:	83 c4 10             	add    esp,0x10
c00216ba:	31 c0                	xor    eax,eax
c00216bc:	31 d2                	xor    edx,edx
c00216be:	83 c4 0c             	add    esp,0xc
c00216c1:	c3                   	ret    
c00216c2:	b8 01 00 00 00       	mov    eax,0x1
c00216c7:	31 d2                	xor    edx,edx
c00216c9:	83 c4 0c             	add    esp,0xc
c00216cc:	c3                   	ret    

c00216cd <SysUSleep(regs*)>:
c00216cd:	83 ec 1c             	sub    esp,0x1c
c00216d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00216d4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00216d7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00216da:	6a 00                	push   0x0
c00216dc:	6a 64                	push   0x64
c00216de:	52                   	push   edx
c00216df:	50                   	push   eax
c00216e0:	e8 ab cf 00 00       	call   c002e690 <__udivdi3>
c00216e5:	83 c4 14             	add    esp,0x14
c00216e8:	50                   	push   eax
c00216e9:	e8 76 3d 00 00       	call   c0025464 <milliTenthSleep(unsigned int)>
c00216ee:	31 c0                	xor    eax,eax
c00216f0:	31 d2                	xor    edx,edx
c00216f2:	83 c4 1c             	add    esp,0x1c
c00216f5:	c3                   	ret    

c00216f6 <SysSpawn(regs*)>:
c00216f6:	56                   	push   esi
c00216f7:	53                   	push   ebx
c00216f8:	83 ec 04             	sub    esp,0x4
c00216fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216ff:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021702:	85 f6                	test   esi,esi
c0021704:	75 0a                	jne    c0021710 <SysSpawn(regs*)+0x1a>
c0021706:	83 c4 04             	add    esp,0x4
c0021709:	31 c0                	xor    eax,eax
c002170b:	31 d2                	xor    edx,edx
c002170d:	5b                   	pop    ebx
c002170e:	5e                   	pop    esi
c002170f:	c3                   	ret    
c0021710:	83 ec 0c             	sub    esp,0xc
c0021713:	68 24 07 00 00       	push   0x724
c0021718:	e8 a1 4c ff ff       	call   c00163be <malloc>
c002171d:	83 c4 10             	add    esp,0x10
c0021720:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021723:	89 c6                	mov    esi,eax
c0021725:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021728:	85 c9                	test   ecx,ecx
c002172a:	75 39                	jne    c0021765 <SysSpawn(regs*)+0x6f>
c002172c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021731:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021734:	52                   	push   edx
c0021735:	50                   	push   eax
c0021736:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021739:	50                   	push   eax
c002173a:	56                   	push   esi
c002173b:	e8 c8 34 00 00       	call   c0024c08 <Process::Process(char const*, Process*, char**)>
c0021740:	83 c4 10             	add    esp,0x10
c0021743:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c002174a:	75 ba                	jne    c0021706 <SysSpawn(regs*)+0x10>
c002174c:	83 ec 0c             	sub    esp,0xc
c002174f:	56                   	push   esi
c0021750:	e8 f3 39 00 00       	call   c0025148 <Process::createUserThread()>
c0021755:	8b 06                	mov    eax,DWORD PTR [esi]
c0021757:	83 c4 10             	add    esp,0x10
c002175a:	89 c2                	mov    edx,eax
c002175c:	83 c4 04             	add    esp,0x4
c002175f:	c1 fa 1f             	sar    edx,0x1f
c0021762:	5b                   	pop    ebx
c0021763:	5e                   	pop    esi
c0021764:	c3                   	ret    
c0021765:	31 c0                	xor    eax,eax
c0021767:	eb cb                	jmp    c0021734 <SysSpawn(regs*)+0x3e>

c0021769 <SysGetEnv(regs*)>:
c0021769:	57                   	push   edi
c002176a:	56                   	push   esi
c002176b:	53                   	push   ebx
c002176c:	83 ec 1c             	sub    esp,0x1c
c002176f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021773:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021778:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002177b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002177e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021781:	51                   	push   ecx
c0021782:	e8 8c e9 ff ff       	call   c0020113 <KeGetProcessTotalEnvCount(Process*)>
c0021787:	83 c4 10             	add    esp,0x10
c002178a:	39 c7                	cmp    edi,eax
c002178c:	7c 14                	jl     c00217a2 <SysGetEnv(regs*)+0x39>
c002178e:	85 f6                	test   esi,esi
c0021790:	75 0b                	jne    c002179d <SysGetEnv(regs*)+0x34>
c0021792:	83 c4 10             	add    esp,0x10
c0021795:	31 c0                	xor    eax,eax
c0021797:	5b                   	pop    ebx
c0021798:	31 d2                	xor    edx,edx
c002179a:	5e                   	pop    esi
c002179b:	5f                   	pop    edi
c002179c:	c3                   	ret    
c002179d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00217a0:	eb f0                	jmp    c0021792 <SysGetEnv(regs*)+0x29>
c00217a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217a6:	83 ec 04             	sub    esp,0x4
c00217a9:	57                   	push   edi
c00217aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00217b0:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00217b3:	57                   	push   edi
c00217b4:	50                   	push   eax
c00217b5:	e8 79 e9 ff ff       	call   c0020133 <KeGetProcessEnvPair(Process*, int)>
c00217ba:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00217bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217c1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00217c5:	83 c4 0c             	add    esp,0xc
c00217c8:	85 d2                	test   edx,edx
c00217ca:	75 23                	jne    c00217ef <SysGetEnv(regs*)+0x86>
c00217cc:	83 ec 0c             	sub    esp,0xc
c00217cf:	50                   	push   eax
c00217d0:	e8 9b ed fd ff       	call   c0000570 <strlen>
c00217d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00217d8:	89 c3                	mov    ebx,eax
c00217da:	e8 91 ed fd ff       	call   c0000570 <strlen>
c00217df:	83 c4 10             	add    esp,0x10
c00217e2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00217e6:	83 c4 10             	add    esp,0x10
c00217e9:	31 d2                	xor    edx,edx
c00217eb:	5b                   	pop    ebx
c00217ec:	5e                   	pop    esi
c00217ed:	5f                   	pop    edi
c00217ee:	c3                   	ret    
c00217ef:	83 ec 08             	sub    esp,0x8
c00217f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00217f5:	50                   	push   eax
c00217f6:	56                   	push   esi
c00217f7:	e8 44 ee fd ff       	call   c0000640 <strcpy>
c00217fc:	58                   	pop    eax
c00217fd:	5a                   	pop    edx
c00217fe:	68 7e 2a 03 c0       	push   0xc0032a7e
c0021803:	56                   	push   esi
c0021804:	e8 37 f0 fd ff       	call   c0000840 <strcat>
c0021809:	59                   	pop    ecx
c002180a:	5b                   	pop    ebx
c002180b:	57                   	push   edi
c002180c:	56                   	push   esi
c002180d:	e8 2e f0 fd ff       	call   c0000840 <strcat>
c0021812:	83 c4 10             	add    esp,0x10
c0021815:	e9 78 ff ff ff       	jmp    c0021792 <SysGetEnv(regs*)+0x29>

c002181a <SysSetFatAttrib(regs*)>:
c002181a:	57                   	push   edi
c002181b:	56                   	push   esi
c002181c:	53                   	push   ebx
c002181d:	83 ec 1c             	sub    esp,0x1c
c0021820:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021824:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021827:	68 14 01 00 00       	push   0x114
c002182c:	e8 8d 4b ff ff       	call   c00163be <malloc>
c0021831:	83 c4 0c             	add    esp,0xc
c0021834:	89 c3                	mov    ebx,eax
c0021836:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002183b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002183e:	50                   	push   eax
c002183f:	57                   	push   edi
c0021840:	53                   	push   ebx
c0021841:	e8 1e 8c ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0021846:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021849:	83 c4 0c             	add    esp,0xc
c002184c:	0f b6 d4             	movzx  edx,ah
c002184f:	0f b6 c0             	movzx  eax,al
c0021852:	52                   	push   edx
c0021853:	50                   	push   eax
c0021854:	53                   	push   ebx
c0021855:	e8 90 8e ff ff       	call   c001a6ea <File::chfatattr(unsigned char, unsigned char)>
c002185a:	83 c4 10             	add    esp,0x10
c002185d:	85 db                	test   ebx,ebx
c002185f:	74 14                	je     c0021875 <SysSetFatAttrib(regs*)+0x5b>
c0021861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021865:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021867:	83 ec 0c             	sub    esp,0xc
c002186a:	53                   	push   ebx
c002186b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002186e:	83 c4 10             	add    esp,0x10
c0021871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021875:	85 c0                	test   eax,eax
c0021877:	0f 95 c0             	setne  al
c002187a:	31 d2                	xor    edx,edx
c002187c:	0f b6 c0             	movzx  eax,al
c002187f:	f7 d8                	neg    eax
c0021881:	83 d2 00             	adc    edx,0x0
c0021884:	83 c4 10             	add    esp,0x10
c0021887:	f7 da                	neg    edx
c0021889:	5b                   	pop    ebx
c002188a:	5e                   	pop    esi
c002188b:	5f                   	pop    edi
c002188c:	c3                   	ret    

c002188d <SysPipe(regs*)>:
c002188d:	57                   	push   edi
c002188e:	56                   	push   esi
c002188f:	53                   	push   ebx
c0021890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021894:	83 ec 0c             	sub    esp,0xc
c0021897:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c002189a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c002189d:	6a 20                	push   0x20
c002189f:	e8 1a 4b ff ff       	call   c00163be <malloc>
c00218a4:	89 c3                	mov    ebx,eax
c00218a6:	58                   	pop    eax
c00218a7:	5a                   	pop    edx
c00218a8:	68 00 50 00 00       	push   0x5000
c00218ad:	53                   	push   ebx
c00218ae:	e8 8d 54 ff ff       	call   c0016d40 <Pipe::Pipe(int)>
c00218b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218b6:	e8 13 62 ff ff       	call   c0017ace <UnixFile::getFileDescriptor()>
c00218bb:	89 07                	mov    DWORD PTR [edi],eax
c00218bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218c0:	e8 09 62 ff ff       	call   c0017ace <UnixFile::getFileDescriptor()>
c00218c5:	83 c4 10             	add    esp,0x10
c00218c8:	89 06                	mov    DWORD PTR [esi],eax
c00218ca:	31 d2                	xor    edx,edx
c00218cc:	5b                   	pop    ebx
c00218cd:	31 c0                	xor    eax,eax
c00218cf:	5e                   	pop    esi
c00218d0:	5f                   	pop    edi
c00218d1:	c3                   	ret    

c00218d2 <SysGetUnixTime(regs*)>:
c00218d2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00218d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00218dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00218e1:	e9 4c 95 ff ff       	jmp    c001ae32 <Clock::timeInSecondsLocal()>

c00218e6 <string_ends_with(char const*, char const*)>:
c00218e6:	57                   	push   edi
c00218e7:	56                   	push   esi
c00218e8:	53                   	push   ebx
c00218e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218ed:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00218f1:	83 ec 0c             	sub    esp,0xc
c00218f4:	53                   	push   ebx
c00218f5:	e8 76 ec fd ff       	call   c0000570 <strlen>
c00218fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00218fd:	89 c6                	mov    esi,eax
c00218ff:	e8 6c ec fd ff       	call   c0000570 <strlen>
c0021904:	83 c4 10             	add    esp,0x10
c0021907:	39 c6                	cmp    esi,eax
c0021909:	7d 06                	jge    c0021911 <string_ends_with(char const*, char const*)+0x2b>
c002190b:	5b                   	pop    ebx
c002190c:	31 c0                	xor    eax,eax
c002190e:	5e                   	pop    esi
c002190f:	5f                   	pop    edi
c0021910:	c3                   	ret    
c0021911:	83 ec 08             	sub    esp,0x8
c0021914:	29 c6                	sub    esi,eax
c0021916:	57                   	push   edi
c0021917:	01 f3                	add    ebx,esi
c0021919:	53                   	push   ebx
c002191a:	e8 31 ee fd ff       	call   c0000750 <strcmp>
c002191f:	83 c4 10             	add    esp,0x10
c0021922:	85 c0                	test   eax,eax
c0021924:	5b                   	pop    ebx
c0021925:	0f 94 c0             	sete   al
c0021928:	5e                   	pop    esi
c0021929:	0f b6 c0             	movzx  eax,al
c002192c:	5f                   	pop    edi
c002192d:	c3                   	ret    

c002192e <SysOpen(regs*)>:
c002192e:	56                   	push   esi
c002192f:	53                   	push   ebx
c0021930:	81 ec 04 01 00 00    	sub    esp,0x104
c0021936:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c002193d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021940:	85 c0                	test   eax,eax
c0021942:	0f 84 bc 01 00 00    	je     c0021b04 <SysOpen(regs*)+0x1d6>
c0021948:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002194b:	85 c0                	test   eax,eax
c002194d:	0f 84 b1 01 00 00    	je     c0021b04 <SysOpen(regs*)+0x1d6>
c0021953:	6a 00                	push   0x0
c0021955:	68 80 2a 03 c0       	push   0xc0032a80
c002195a:	50                   	push   eax
c002195b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002195f:	56                   	push   esi
c0021960:	e8 07 88 ff ff       	call   c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021965:	89 34 24             	mov    DWORD PTR [esp],esi
c0021968:	e8 03 ec fd ff       	call   c0000570 <strlen>
c002196d:	83 c4 10             	add    esp,0x10
c0021970:	83 e8 01             	sub    eax,0x1
c0021973:	74 21                	je     c0021996 <SysOpen(regs*)+0x68>
c0021975:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021979:	eb 12                	jmp    c002198d <SysOpen(regs*)+0x5f>
c002197b:	83 fa 3a             	cmp    edx,0x3a
c002197e:	74 12                	je     c0021992 <SysOpen(regs*)+0x64>
c0021980:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021984:	83 e8 01             	sub    eax,0x1
c0021987:	74 0d                	je     c0021996 <SysOpen(regs*)+0x68>
c0021989:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c002198d:	83 fa 2e             	cmp    edx,0x2e
c0021990:	75 e9                	jne    c002197b <SysOpen(regs*)+0x4d>
c0021992:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021996:	83 ec 08             	sub    esp,0x8
c0021999:	68 84 2a 03 c0       	push   0xc0032a84
c002199e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219a1:	50                   	push   eax
c00219a2:	e8 3f ff ff ff       	call   c00218e6 <string_ends_with(char const*, char const*)>
c00219a7:	83 c4 10             	add    esp,0x10
c00219aa:	85 c0                	test   eax,eax
c00219ac:	74 1d                	je     c00219cb <SysOpen(regs*)+0x9d>
c00219ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00219b1:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00219b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00219be:	81 c4 04 01 00 00    	add    esp,0x104
c00219c4:	31 c0                	xor    eax,eax
c00219c6:	31 d2                	xor    edx,edx
c00219c8:	5b                   	pop    ebx
c00219c9:	5e                   	pop    esi
c00219ca:	c3                   	ret    
c00219cb:	83 ec 08             	sub    esp,0x8
c00219ce:	68 89 2a 03 c0       	push   0xc0032a89
c00219d3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219d6:	50                   	push   eax
c00219d7:	e8 0a ff ff ff       	call   c00218e6 <string_ends_with(char const*, char const*)>
c00219dc:	83 c4 10             	add    esp,0x10
c00219df:	85 c0                	test   eax,eax
c00219e1:	75 cb                	jne    c00219ae <SysOpen(regs*)+0x80>
c00219e3:	83 ec 08             	sub    esp,0x8
c00219e6:	68 85 2a 03 c0       	push   0xc0032a85
c00219eb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219ee:	50                   	push   eax
c00219ef:	e8 5c ed fd ff       	call   c0000750 <strcmp>
c00219f4:	83 c4 10             	add    esp,0x10
c00219f7:	85 c0                	test   eax,eax
c00219f9:	74 b3                	je     c00219ae <SysOpen(regs*)+0x80>
c00219fb:	83 ec 08             	sub    esp,0x8
c00219fe:	68 84 2a 03 c0       	push   0xc0032a84
c0021a03:	56                   	push   esi
c0021a04:	e8 dd fe ff ff       	call   c00218e6 <string_ends_with(char const*, char const*)>
c0021a09:	83 c4 10             	add    esp,0x10
c0021a0c:	85 c0                	test   eax,eax
c0021a0e:	75 9e                	jne    c00219ae <SysOpen(regs*)+0x80>
c0021a10:	83 ec 08             	sub    esp,0x8
c0021a13:	68 8e 2a 03 c0       	push   0xc0032a8e
c0021a18:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a1b:	50                   	push   eax
c0021a1c:	e8 c5 fe ff ff       	call   c00218e6 <string_ends_with(char const*, char const*)>
c0021a21:	83 c4 10             	add    esp,0x10
c0021a24:	85 c0                	test   eax,eax
c0021a26:	0f 85 eb 00 00 00    	jne    c0021b17 <SysOpen(regs*)+0x1e9>
c0021a2c:	83 ec 08             	sub    esp,0x8
c0021a2f:	68 93 2a 03 c0       	push   0xc0032a93
c0021a34:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a37:	50                   	push   eax
c0021a38:	e8 a9 fe ff ff       	call   c00218e6 <string_ends_with(char const*, char const*)>
c0021a3d:	83 c4 10             	add    esp,0x10
c0021a40:	85 c0                	test   eax,eax
c0021a42:	0f 85 cf 00 00 00    	jne    c0021b17 <SysOpen(regs*)+0x1e9>
c0021a48:	83 ec 08             	sub    esp,0x8
c0021a4b:	68 8f 2a 03 c0       	push   0xc0032a8f
c0021a50:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021a53:	51                   	push   ecx
c0021a54:	e8 f7 ec fd ff       	call   c0000750 <strcmp>
c0021a59:	83 c4 10             	add    esp,0x10
c0021a5c:	85 c0                	test   eax,eax
c0021a5e:	0f 84 b3 00 00 00    	je     c0021b17 <SysOpen(regs*)+0x1e9>
c0021a64:	83 ec 08             	sub    esp,0x8
c0021a67:	68 8e 2a 03 c0       	push   0xc0032a8e
c0021a6c:	56                   	push   esi
c0021a6d:	e8 74 fe ff ff       	call   c00218e6 <string_ends_with(char const*, char const*)>
c0021a72:	83 c4 10             	add    esp,0x10
c0021a75:	85 c0                	test   eax,eax
c0021a77:	0f 85 9a 00 00 00    	jne    c0021b17 <SysOpen(regs*)+0x1e9>
c0021a7d:	83 ec 0c             	sub    esp,0xc
c0021a80:	68 14 01 00 00       	push   0x114
c0021a85:	e8 34 49 ff ff       	call   c00163be <malloc>
c0021a8a:	83 c4 0c             	add    esp,0xc
c0021a8d:	89 c6                	mov    esi,eax
c0021a8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021a94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021a97:	50                   	push   eax
c0021a98:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021a9b:	52                   	push   edx
c0021a9c:	56                   	push   esi
c0021a9d:	e8 c2 89 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0021aa2:	83 c4 10             	add    esp,0x10
c0021aa5:	85 f6                	test   esi,esi
c0021aa7:	74 5b                	je     c0021b04 <SysOpen(regs*)+0x1d6>
c0021aa9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021aac:	0f b6 c2             	movzx  eax,dl
c0021aaf:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021ab2:	89 d0                	mov    eax,edx
c0021ab4:	83 e0 01             	and    eax,0x1
c0021ab7:	f6 c2 02             	test   dl,0x2
c0021aba:	74 03                	je     c0021abf <SysOpen(regs*)+0x191>
c0021abc:	83 c8 02             	or     eax,0x2
c0021abf:	f6 c2 04             	test   dl,0x4
c0021ac2:	74 03                	je     c0021ac7 <SysOpen(regs*)+0x199>
c0021ac4:	83 c8 04             	or     eax,0x4
c0021ac7:	f6 c2 08             	test   dl,0x8
c0021aca:	74 03                	je     c0021acf <SysOpen(regs*)+0x1a1>
c0021acc:	83 c8 0a             	or     eax,0xa
c0021acf:	80 e2 10             	and    dl,0x10
c0021ad2:	74 03                	je     c0021ad7 <SysOpen(regs*)+0x1a9>
c0021ad4:	83 c8 12             	or     eax,0x12
c0021ad7:	83 ec 08             	sub    esp,0x8
c0021ada:	50                   	push   eax
c0021adb:	56                   	push   esi
c0021adc:	e8 a1 89 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c0021ae1:	83 c4 10             	add    esp,0x10
c0021ae4:	85 c0                	test   eax,eax
c0021ae6:	75 1c                	jne    c0021b04 <SysOpen(regs*)+0x1d6>
c0021ae8:	83 ec 0c             	sub    esp,0xc
c0021aeb:	56                   	push   esi
c0021aec:	e8 dd 5f ff ff       	call   c0017ace <UnixFile::getFileDescriptor()>
c0021af1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021af4:	83 c4 10             	add    esp,0x10
c0021af7:	89 02                	mov    DWORD PTR [edx],eax
c0021af9:	c1 f8 1f             	sar    eax,0x1f
c0021afc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021aff:	e9 ba fe ff ff       	jmp    c00219be <SysOpen(regs*)+0x90>
c0021b04:	81 c4 04 01 00 00    	add    esp,0x104
c0021b0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021b0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021b14:	5b                   	pop    ebx
c0021b15:	5e                   	pop    esi
c0021b16:	c3                   	ret    
c0021b17:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021b1a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021b20:	e9 92 fe ff ff       	jmp    c00219b7 <SysOpen(regs*)+0x89>

c0021b25 <KeSystemCall(regs*, void*)>:
c0021b25:	53                   	push   ebx
c0021b26:	83 ec 08             	sub    esp,0x8
c0021b29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021b2d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021b30:	83 f8 3e             	cmp    eax,0x3e
c0021b33:	77 16                	ja     c0021b4b <KeSystemCall(regs*, void*)+0x26>
c0021b35:	8b 14 85 e0 42 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbd20]
c0021b3c:	85 d2                	test   edx,edx
c0021b3e:	74 0b                	je     c0021b4b <KeSystemCall(regs*, void*)+0x26>
c0021b40:	83 ec 0c             	sub    esp,0xc
c0021b43:	53                   	push   ebx
c0021b44:	ff d2                	call   edx
c0021b46:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021b49:	eb 0d                	jmp    c0021b58 <KeSystemCall(regs*, void*)+0x33>
c0021b4b:	52                   	push   edx
c0021b4c:	52                   	push   edx
c0021b4d:	50                   	push   eax
c0021b4e:	68 98 2a 03 c0       	push   0xc0032a98
c0021b53:	e8 05 77 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0021b58:	83 c4 10             	add    esp,0x10
c0021b5b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021b60:	31 d2                	xor    edx,edx
c0021b62:	83 c4 08             	add    esp,0x8
c0021b65:	5b                   	pop    ebx
c0021b66:	c3                   	ret    
c0021b67:	90                   	nop

c0021b68 <KeSwitchEndian16(unsigned short)>:
c0021b68:	83 ec 04             	sub    esp,0x4
c0021b6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b6f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021b73:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b77:	c1 f8 08             	sar    eax,0x8
c0021b7a:	89 c2                	mov    edx,eax
c0021b7c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b80:	c1 e0 08             	shl    eax,0x8
c0021b83:	09 d0                	or     eax,edx
c0021b85:	83 c4 04             	add    esp,0x4
c0021b88:	c3                   	ret    
c0021b89:	8d 76 00             	lea    esi,[esi+0x0]

c0021b8c <KeSwitchEndian32(unsigned int)>:
c0021b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b90:	c1 e8 18             	shr    eax,0x18
c0021b93:	89 c2                	mov    edx,eax
c0021b95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b99:	c1 e0 08             	shl    eax,0x8
c0021b9c:	25 00 00 ff 00       	and    eax,0xff0000
c0021ba1:	09 c2                	or     edx,eax
c0021ba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ba7:	c1 e8 08             	shr    eax,0x8
c0021baa:	25 00 ff 00 00       	and    eax,0xff00
c0021baf:	09 c2                	or     edx,eax
c0021bb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb5:	c1 e0 18             	shl    eax,0x18
c0021bb8:	09 d0                	or     eax,edx
c0021bba:	c3                   	ret    
c0021bbb:	90                   	nop

c0021bbc <EthernetCRC32(unsigned char*, int)>:
c0021bbc:	83 ec 10             	sub    esp,0x10
c0021bbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021bc4:	75 0a                	jne    c0021bd0 <EthernetCRC32(unsigned char*, int)+0x14>
c0021bc6:	b8 00 00 00 00       	mov    eax,0x0
c0021bcb:	e9 8c 00 00 00       	jmp    c0021c5c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021bd0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021bd5:	7f 09                	jg     c0021be0 <EthernetCRC32(unsigned char*, int)+0x24>
c0021bd7:	b8 00 00 00 00       	mov    eax,0x0
c0021bdc:	eb 7e                	jmp    c0021c5c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021bde:	66 90                	xchg   ax,ax
c0021be0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021be8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021bf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bf4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021bf8:	7d 5a                	jge    c0021c54 <EthernetCRC32(unsigned char*, int)+0x98>
c0021bfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021bfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c02:	01 d0                	add    eax,edx
c0021c04:	8a 00                	mov    al,BYTE PTR [eax]
c0021c06:	0f b6 c0             	movzx  eax,al
c0021c09:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021c0d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c15:	8d 76 00             	lea    esi,[esi+0x0]
c0021c18:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021c1d:	7f 2d                	jg     c0021c4c <EthernetCRC32(unsigned char*, int)+0x90>
c0021c1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c23:	83 e0 01             	and    eax,0x1
c0021c26:	74 10                	je     c0021c38 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c2c:	d1 e8                	shr    eax,1
c0021c2e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021c33:	eb 0b                	jmp    c0021c40 <EthernetCRC32(unsigned char*, int)+0x84>
c0021c35:	8d 76 00             	lea    esi,[esi+0x0]
c0021c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c3c:	d1 e8                	shr    eax,1
c0021c3e:	66 90                	xchg   ax,ax
c0021c40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c44:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021c49:	eb cd                	jmp    c0021c18 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021c4b:	90                   	nop
c0021c4c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021c51:	eb 9d                	jmp    c0021bf0 <EthernetCRC32(unsigned char*, int)+0x34>
c0021c53:	90                   	nop
c0021c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c58:	f7 d0                	not    eax
c0021c5a:	66 90                	xchg   ax,ax
c0021c5c:	83 c4 10             	add    esp,0x10
c0021c5f:	c3                   	ret    

c0021c60 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021c60:	83 ec 2c             	sub    esp,0x2c
c0021c63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c67:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021c7b:	0f b7 c0             	movzx  eax,ax
c0021c7e:	3d 06 08 00 00       	cmp    eax,0x806
c0021c83:	75 13                	jne    c0021c98 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021c85:	83 ec 0c             	sub    esp,0xc
c0021c88:	68 ac 2a 03 c0       	push   0xc0032aac
c0021c8d:	e8 cb 75 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0021c92:	83 c4 10             	add    esp,0x10
c0021c95:	eb 25                	jmp    c0021cbc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021c97:	90                   	nop
c0021c98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021c9f:	0f b7 c0             	movzx  eax,ax
c0021ca2:	3d 00 08 00 00       	cmp    eax,0x800
c0021ca7:	75 13                	jne    c0021cbc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021ca9:	83 ec 0c             	sub    esp,0xc
c0021cac:	68 c2 2a 03 c0       	push   0xc0032ac2
c0021cb1:	e8 a7 75 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0021cb6:	83 c4 10             	add    esp,0x10
c0021cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0021cbc:	90                   	nop
c0021cbd:	83 c4 2c             	add    esp,0x2c
c0021cc0:	c3                   	ret    
c0021cc1:	66 90                	xchg   ax,ax
c0021cc3:	90                   	nop

c0021cc4 <KeNetCreateSemaphore>:
c0021cc4:	53                   	push   ebx
c0021cc5:	83 ec 18             	sub    esp,0x18
c0021cc8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021cd0:	83 ec 0c             	sub    esp,0xc
c0021cd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021cd7:	e8 e2 46 ff ff       	call   c00163be <malloc>
c0021cdc:	83 c4 10             	add    esp,0x10
c0021cdf:	89 c3                	mov    ebx,eax
c0021ce1:	83 ec 08             	sub    esp,0x8
c0021ce4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021ce8:	53                   	push   ebx
c0021ce9:	e8 32 e9 ff ff       	call   c0020620 <Semaphore::Semaphore(int)>
c0021cee:	83 c4 10             	add    esp,0x10
c0021cf1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021cf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cfd:	89 10                	mov    DWORD PTR [eax],edx
c0021cff:	90                   	nop
c0021d00:	83 c4 18             	add    esp,0x18
c0021d03:	5b                   	pop    ebx
c0021d04:	c3                   	ret    
c0021d05:	8d 76 00             	lea    esi,[esi+0x0]

c0021d08 <KeNetFreeSemaphore>:
c0021d08:	83 ec 0c             	sub    esp,0xc
c0021d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d11:	83 ec 08             	sub    esp,0x8
c0021d14:	6a 10                	push   0x10
c0021d16:	50                   	push   eax
c0021d17:	e8 14 74 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c0021d1c:	83 c4 10             	add    esp,0x10
c0021d1f:	90                   	nop
c0021d20:	83 c4 0c             	add    esp,0xc
c0021d23:	c3                   	ret    

c0021d24 <KeNetSignalSemaphore>:
c0021d24:	83 ec 0c             	sub    esp,0xc
c0021d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d2d:	83 ec 0c             	sub    esp,0xc
c0021d30:	50                   	push   eax
c0021d31:	e8 4a ec ff ff       	call   c0020980 <Semaphore::release()>
c0021d36:	83 c4 10             	add    esp,0x10
c0021d39:	90                   	nop
c0021d3a:	83 c4 0c             	add    esp,0xc
c0021d3d:	c3                   	ret    
c0021d3e:	66 90                	xchg   ax,ax

c0021d40 <KeNetWaitSemaphore>:
c0021d40:	83 ec 0c             	sub    esp,0xc
c0021d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d47:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d49:	83 ec 08             	sub    esp,0x8
c0021d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d50:	50                   	push   eax
c0021d51:	e8 66 ea ff ff       	call   c00207bc <Semaphore::acquire(int)>
c0021d56:	83 c4 10             	add    esp,0x10
c0021d59:	83 c4 0c             	add    esp,0xc
c0021d5c:	c3                   	ret    
c0021d5d:	8d 76 00             	lea    esi,[esi+0x0]

c0021d60 <KeNetCreateThread>:
c0021d60:	83 ec 0c             	sub    esp,0xc
c0021d63:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021d68:	68 80 00 00 00       	push   0x80
c0021d6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d75:	50                   	push   eax
c0021d76:	e8 c1 32 00 00       	call   c002503c <Process::createThread(void (*)(void*), void*, int)>
c0021d7b:	83 c4 10             	add    esp,0x10
c0021d7e:	90                   	nop
c0021d7f:	83 c4 0c             	add    esp,0xc
c0021d82:	c3                   	ret    
c0021d83:	90                   	nop

c0021d84 <KeCPanic>:
c0021d84:	83 ec 0c             	sub    esp,0xc
c0021d87:	83 ec 0c             	sub    esp,0xc
c0021d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d8e:	e8 e3 e4 ff ff       	call   c0020276 <KePanic(char const*)>
c0021d93:	83 c4 10             	add    esp,0x10
c0021d96:	90                   	nop
c0021d97:	83 c4 0c             	add    esp,0xc
c0021d9a:	c3                   	ret    
c0021d9b:	90                   	nop

c0021d9c <KeCPuts>:
c0021d9c:	83 ec 0c             	sub    esp,0xc
c0021d9f:	83 ec 08             	sub    esp,0x8
c0021da2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021da6:	68 76 31 03 c0       	push   0xc0033176
c0021dab:	e8 ad 74 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0021db0:	83 c4 10             	add    esp,0x10
c0021db3:	90                   	nop
c0021db4:	83 c4 0c             	add    esp,0xc
c0021db7:	c3                   	ret    

c0021db8 <CmOpen(char const*)>:
c0021db8:	57                   	push   edi
c0021db9:	56                   	push   esi
c0021dba:	53                   	push   ebx
c0021dbb:	83 ec 1c             	sub    esp,0x1c
c0021dbe:	6a 30                	push   0x30
c0021dc0:	e8 f9 45 ff ff       	call   c00163be <malloc>
c0021dc5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021dcc:	89 c3                	mov    ebx,eax
c0021dce:	e8 eb 45 ff ff       	call   c00163be <malloc>
c0021dd3:	83 c4 0c             	add    esp,0xc
c0021dd6:	89 c6                	mov    esi,eax
c0021dd8:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021dde:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021de2:	50                   	push   eax
c0021de3:	e8 7c 86 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0021de8:	83 c4 0c             	add    esp,0xc
c0021deb:	89 33                	mov    DWORD PTR [ebx],esi
c0021ded:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021df1:	50                   	push   eax
c0021df2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021df6:	50                   	push   eax
c0021df7:	56                   	push   esi
c0021df8:	e8 87 89 ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c0021dfd:	5a                   	pop    edx
c0021dfe:	59                   	pop    ecx
c0021dff:	6a 01                	push   0x1
c0021e01:	ff 33                	push   DWORD PTR [ebx]
c0021e03:	e8 7a 86 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c0021e08:	5e                   	pop    esi
c0021e09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e0d:	e8 ac 45 ff ff       	call   c00163be <malloc>
c0021e12:	5a                   	pop    edx
c0021e13:	89 c7                	mov    edi,eax
c0021e15:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021e19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e1d:	56                   	push   esi
c0021e1e:	57                   	push   edi
c0021e1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e27:	50                   	push   eax
c0021e28:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021e2b:	83 c4 14             	add    esp,0x14
c0021e2e:	ff 33                	push   DWORD PTR [ebx]
c0021e30:	e8 ab 86 ff ff       	call   c001a4e0 <File::close()>
c0021e35:	59                   	pop    ecx
c0021e36:	58                   	pop    eax
c0021e37:	6a 13                	push   0x13
c0021e39:	ff 33                	push   DWORD PTR [ebx]
c0021e3b:	e8 42 86 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c0021e40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e42:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e44:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e47:	57                   	push   edi
c0021e48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e50:	50                   	push   eax
c0021e51:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021e54:	83 c4 14             	add    esp,0x14
c0021e57:	57                   	push   edi
c0021e58:	e8 81 45 ff ff       	call   c00163de <free>
c0021e5d:	83 c4 10             	add    esp,0x10
c0021e60:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021e63:	75 10                	jne    c0021e75 <CmOpen(char const*)+0xbd>
c0021e65:	83 ec 0c             	sub    esp,0xc
c0021e68:	68 d7 2a 03 c0       	push   0xc0032ad7
c0021e6d:	e8 04 e4 ff ff       	call   c0020276 <KePanic(char const*)>
c0021e72:	83 c4 10             	add    esp,0x10
c0021e75:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021e78:	50                   	push   eax
c0021e79:	6a 00                	push   0x0
c0021e7b:	6a 00                	push   0x0
c0021e7d:	ff 33                	push   DWORD PTR [ebx]
c0021e7f:	e8 bc 86 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0021e84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e86:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e88:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e8b:	57                   	push   edi
c0021e8c:	6a 00                	push   0x0
c0021e8e:	6a 2b                	push   0x2b
c0021e90:	50                   	push   eax
c0021e91:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021e94:	83 c4 1c             	add    esp,0x1c
c0021e97:	6a 00                	push   0x0
c0021e99:	6a 00                	push   0x0
c0021e9b:	ff 33                	push   DWORD PTR [ebx]
c0021e9d:	e8 9e 86 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0021ea2:	83 c4 0c             	add    esp,0xc
c0021ea5:	6a 08                	push   0x8
c0021ea7:	68 e8 2a 03 c0       	push   0xc0032ae8
c0021eac:	57                   	push   edi
c0021ead:	e8 ce e4 fd ff       	call   c0000380 <memcmp>
c0021eb2:	83 c4 10             	add    esp,0x10
c0021eb5:	85 c0                	test   eax,eax
c0021eb7:	74 10                	je     c0021ec9 <CmOpen(char const*)+0x111>
c0021eb9:	83 ec 0c             	sub    esp,0xc
c0021ebc:	68 f1 2a 03 c0       	push   0xc0032af1
c0021ec1:	e8 b0 e3 ff ff       	call   c0020276 <KePanic(char const*)>
c0021ec6:	83 c4 10             	add    esp,0x10
c0021ec9:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021ecd:	89 d8                	mov    eax,ebx
c0021ecf:	83 c4 10             	add    esp,0x10
c0021ed2:	5b                   	pop    ebx
c0021ed3:	5e                   	pop    esi
c0021ed4:	5f                   	pop    edi
c0021ed5:	c3                   	ret    

c0021ed6 <CmClose(Reghive_Tag*)>:
c0021ed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eda:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021ede:	74 0b                	je     c0021eeb <CmClose(Reghive_Tag*)+0x15>
c0021ee0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ee2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ee6:	e9 f5 85 ff ff       	jmp    c001a4e0 <File::close()>
c0021eeb:	c3                   	ret    

c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0021eec:	53                   	push   ebx
c0021eed:	83 ec 18             	sub    esp,0x18
c0021ef0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ef4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021ef8:	74 29                	je     c0021f23 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021efa:	50                   	push   eax
c0021efb:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021f00:	99                   	cdq    
c0021f01:	52                   	push   edx
c0021f02:	50                   	push   eax
c0021f03:	ff 33                	push   DWORD PTR [ebx]
c0021f05:	e8 36 86 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0021f0a:	5a                   	pop    edx
c0021f0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021f0d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021f11:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f13:	51                   	push   ecx
c0021f14:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021f18:	6a 00                	push   0x0
c0021f1a:	6a 2b                	push   0x2b
c0021f1c:	50                   	push   eax
c0021f1d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021f20:	83 c4 20             	add    esp,0x20
c0021f23:	83 c4 18             	add    esp,0x18
c0021f26:	5b                   	pop    ebx
c0021f27:	c3                   	ret    

c0021f28 <CmGetString(Reghive_Tag*, int, char*)>:
c0021f28:	55                   	push   ebp
c0021f29:	57                   	push   edi
c0021f2a:	56                   	push   esi
c0021f2b:	53                   	push   ebx
c0021f2c:	31 db                	xor    ebx,ebx
c0021f2e:	83 ec 70             	sub    esp,0x70
c0021f31:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021f38:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021f3c:	50                   	push   eax
c0021f3d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021f44:	55                   	push   ebp
c0021f45:	e8 a2 ff ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f4a:	83 c4 10             	add    esp,0x10
c0021f4d:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0021f52:	c1 e0 08             	shl    eax,0x8
c0021f55:	89 c2                	mov    edx,eax
c0021f57:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021f5c:	09 d0                	or     eax,edx
c0021f5e:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021f63:	c1 e0 08             	shl    eax,0x8
c0021f66:	09 d0                	or     eax,edx
c0021f68:	74 25                	je     c0021f8f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021f6a:	6b fb 0d             	imul   edi,ebx,0xd
c0021f6d:	52                   	push   edx
c0021f6e:	8d 54 24 39          	lea    edx,[esp+0x39]
c0021f72:	52                   	push   edx
c0021f73:	50                   	push   eax
c0021f74:	55                   	push   ebp
c0021f75:	e8 72 ff ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f7a:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021f7e:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021f85:	b9 27 00 00 00       	mov    ecx,0x27
c0021f8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f8c:	83 c4 10             	add    esp,0x10
c0021f8f:	83 c3 03             	add    ebx,0x3
c0021f92:	83 fb 15             	cmp    ebx,0x15
c0021f95:	75 b6                	jne    c0021f4d <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021f97:	83 c4 6c             	add    esp,0x6c
c0021f9a:	5b                   	pop    ebx
c0021f9b:	5e                   	pop    esi
c0021f9c:	5f                   	pop    edi
c0021f9d:	5d                   	pop    ebp
c0021f9e:	c3                   	ret    

c0021f9f <CmEnterDirectory(Reghive_Tag*, int)>:
c0021f9f:	83 ec 40             	sub    esp,0x40
c0021fa2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021fa6:	50                   	push   eax
c0021fa7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021faf:	e8 38 ff ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021fb4:	83 c4 10             	add    esp,0x10
c0021fb7:	83 c8 ff             	or     eax,0xffffffff
c0021fba:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021fbf:	75 19                	jne    c0021fda <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0021fc1:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0021fc6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021fcb:	c1 e0 08             	shl    eax,0x8
c0021fce:	09 c2                	or     edx,eax
c0021fd0:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0021fd5:	c1 e0 10             	shl    eax,0x10
c0021fd8:	09 d0                	or     eax,edx
c0021fda:	83 c4 3c             	add    esp,0x3c
c0021fdd:	c3                   	ret    

c0021fde <CmGetNext(Reghive_Tag*, int)>:
c0021fde:	83 ec 40             	sub    esp,0x40
c0021fe1:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021fe5:	50                   	push   eax
c0021fe6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fee:	e8 f9 fe ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021ff3:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0021ff8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0021ffd:	c1 e0 08             	shl    eax,0x8
c0022000:	09 c2                	or     edx,eax
c0022002:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0022007:	83 c4 4c             	add    esp,0x4c
c002200a:	c1 e0 10             	shl    eax,0x10
c002200d:	09 d0                	or     eax,edx
c002200f:	c3                   	ret    

c0022010 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0022010:	53                   	push   ebx
c0022011:	83 ec 18             	sub    esp,0x18
c0022014:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022018:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c002201c:	74 29                	je     c0022047 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c002201e:	50                   	push   eax
c002201f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022024:	99                   	cdq    
c0022025:	52                   	push   edx
c0022026:	50                   	push   eax
c0022027:	ff 33                	push   DWORD PTR [ebx]
c0022029:	e8 12 85 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c002202e:	5a                   	pop    edx
c002202f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022031:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022035:	8b 10                	mov    edx,DWORD PTR [eax]
c0022037:	51                   	push   ecx
c0022038:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002203c:	6a 00                	push   0x0
c002203e:	6a 2b                	push   0x2b
c0022040:	50                   	push   eax
c0022041:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022044:	83 c4 20             	add    esp,0x20
c0022047:	83 c4 18             	add    esp,0x18
c002204a:	5b                   	pop    ebx
c002204b:	c3                   	ret    

c002204c <CmFreeExtent(Reghive_Tag*, int)>:
c002204c:	53                   	push   ebx
c002204d:	83 ec 3c             	sub    esp,0x3c
c0022050:	6a 2b                	push   0x2b
c0022052:	6a 00                	push   0x0
c0022054:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022058:	53                   	push   ebx
c0022059:	e8 92 e4 fd ff       	call   c00004f0 <memset>
c002205e:	83 c4 0c             	add    esp,0xc
c0022061:	53                   	push   ebx
c0022062:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022066:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002206a:	e8 a1 ff ff ff       	call   c0022010 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002206f:	83 c4 48             	add    esp,0x48
c0022072:	5b                   	pop    ebx
c0022073:	c3                   	ret    

c0022074 <CmUpdateHeader(Reghive_Tag*)>:
c0022074:	83 ec 0c             	sub    esp,0xc
c0022077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002207b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c002207f:	74 10                	je     c0022091 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0022081:	52                   	push   edx
c0022082:	8d 50 05             	lea    edx,[eax+0x5]
c0022085:	52                   	push   edx
c0022086:	6a 00                	push   0x0
c0022088:	50                   	push   eax
c0022089:	e8 82 ff ff ff       	call   c0022010 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002208e:	83 c4 10             	add    esp,0x10
c0022091:	83 c4 0c             	add    esp,0xc
c0022094:	c3                   	ret    

c0022095 <CmExpand(Reghive_Tag*, int)>:
c0022095:	57                   	push   edi
c0022096:	56                   	push   esi
c0022097:	83 ce ff             	or     esi,0xffffffff
c002209a:	53                   	push   ebx
c002209b:	83 ec 30             	sub    esp,0x30
c002209e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00220a2:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00220a6:	74 5f                	je     c0022107 <CmExpand(Reghive_Tag*, int)+0x72>
c00220a8:	31 d2                	xor    edx,edx
c00220aa:	31 f6                	xor    esi,esi
c00220ac:	50                   	push   eax
c00220ad:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00220b1:	52                   	push   edx
c00220b2:	50                   	push   eax
c00220b3:	ff 33                	push   DWORD PTR [ebx]
c00220b5:	e8 86 84 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c00220ba:	83 c4 0c             	add    esp,0xc
c00220bd:	6a 2b                	push   0x2b
c00220bf:	6a 00                	push   0x0
c00220c1:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00220c5:	57                   	push   edi
c00220c6:	e8 25 e4 fd ff       	call   c00004f0 <memset>
c00220cb:	83 c4 10             	add    esp,0x10
c00220ce:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00220d2:	7d 1b                	jge    c00220ef <CmExpand(Reghive_Tag*, int)+0x5a>
c00220d4:	83 ec 0c             	sub    esp,0xc
c00220d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220d9:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00220dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00220df:	46                   	inc    esi
c00220e0:	51                   	push   ecx
c00220e1:	57                   	push   edi
c00220e2:	6a 00                	push   0x0
c00220e4:	6a 2b                	push   0x2b
c00220e6:	50                   	push   eax
c00220e7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00220ea:	83 c4 20             	add    esp,0x20
c00220ed:	eb df                	jmp    c00220ce <CmExpand(Reghive_Tag*, int)+0x39>
c00220ef:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00220f3:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00220f6:	83 ec 0c             	sub    esp,0xc
c00220f9:	01 f2                	add    edx,esi
c00220fb:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00220fe:	53                   	push   ebx
c00220ff:	e8 70 ff ff ff       	call   c0022074 <CmUpdateHeader(Reghive_Tag*)>
c0022104:	83 c4 10             	add    esp,0x10
c0022107:	83 c4 30             	add    esp,0x30
c002210a:	89 f0                	mov    eax,esi
c002210c:	5b                   	pop    ebx
c002210d:	5e                   	pop    esi
c002210e:	5f                   	pop    edi
c002210f:	c3                   	ret    

c0022110 <CmFindUnusedExtent(Reghive_Tag*)>:
c0022110:	55                   	push   ebp
c0022111:	57                   	push   edi
c0022112:	56                   	push   esi
c0022113:	53                   	push   ebx
c0022114:	83 cb ff             	or     ebx,0xffffffff
c0022117:	83 ec 1c             	sub    esp,0x1c
c002211a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002211e:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0022122:	74 68                	je     c002218c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022124:	be 2b 00 00 00       	mov    esi,0x2b
c0022129:	51                   	push   ecx
c002212a:	31 ff                	xor    edi,edi
c002212c:	6a 00                	push   0x0
c002212e:	31 db                	xor    ebx,ebx
c0022130:	6a 00                	push   0x0
c0022132:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022135:	e8 06 84 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c002213a:	83 c4 10             	add    esp,0x10
c002213d:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022140:	76 3b                	jbe    c002217d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0022142:	83 ec 0c             	sub    esp,0xc
c0022145:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022148:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002214c:	8b 10                	mov    edx,DWORD PTR [eax]
c002214e:	51                   	push   ecx
c002214f:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0022153:	51                   	push   ecx
c0022154:	6a 00                	push   0x0
c0022156:	6a 01                	push   0x1
c0022158:	50                   	push   eax
c0022159:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002215c:	83 c4 20             	add    esp,0x20
c002215f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022164:	74 26                	je     c002218c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022166:	43                   	inc    ebx
c0022167:	52                   	push   edx
c0022168:	57                   	push   edi
c0022169:	56                   	push   esi
c002216a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002216d:	e8 ce 83 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0022172:	83 c6 2b             	add    esi,0x2b
c0022175:	83 d7 00             	adc    edi,0x0
c0022178:	83 c4 10             	add    esp,0x10
c002217b:	eb c0                	jmp    c002213d <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c002217d:	50                   	push   eax
c002217e:	50                   	push   eax
c002217f:	6a 40                	push   0x40
c0022181:	55                   	push   ebp
c0022182:	e8 0e ff ff ff       	call   c0022095 <CmExpand(Reghive_Tag*, int)>
c0022187:	83 c4 10             	add    esp,0x10
c002218a:	89 c3                	mov    ebx,eax
c002218c:	83 c4 1c             	add    esp,0x1c
c002218f:	89 d8                	mov    eax,ebx
c0022191:	5b                   	pop    ebx
c0022192:	5e                   	pop    esi
c0022193:	5f                   	pop    edi
c0022194:	5d                   	pop    ebp
c0022195:	c3                   	ret    

c0022196 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0022196:	55                   	push   ebp
c0022197:	57                   	push   edi
c0022198:	56                   	push   esi
c0022199:	53                   	push   ebx
c002219a:	81 ec 88 00 00 00    	sub    esp,0x88
c00221a0:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00221a7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221ae:	e8 5d ff ff ff       	call   c0022110 <CmFindUnusedExtent(Reghive_Tag*)>
c00221b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00221b7:	83 c4 0c             	add    esp,0xc
c00221ba:	6a 2b                	push   0x2b
c00221bc:	6a 00                	push   0x0
c00221be:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00221c2:	55                   	push   ebp
c00221c3:	e8 28 e3 fd ff       	call   c00004f0 <memset>
c00221c8:	83 c4 10             	add    esp,0x10
c00221cb:	85 db                	test   ebx,ebx
c00221cd:	74 12                	je     c00221e1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00221cf:	51                   	push   ecx
c00221d0:	55                   	push   ebp
c00221d1:	53                   	push   ebx
c00221d2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221d9:	e8 0e fd ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221de:	83 c4 10             	add    esp,0x10
c00221e1:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00221e5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00221ec:	b9 2b 00 00 00       	mov    ecx,0x2b
c00221f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00221f3:	85 db                	test   ebx,ebx
c00221f5:	74 49                	je     c0022240 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00221f7:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00221fc:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0022201:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022205:	c1 e0 08             	shl    eax,0x8
c0022208:	81 e2 ff ff ff 00    	and    edx,0xffffff
c002220e:	09 c8                	or     eax,ecx
c0022210:	74 11                	je     c0022223 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0022212:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0022216:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c002221a:	c1 e8 10             	shr    eax,0x10
c002221d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022221:	eb 0f                	jmp    c0022232 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0022223:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022228:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002222d:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022232:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0022236:	c1 ea 08             	shr    edx,0x8
c0022239:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c002223e:	eb 0f                	jmp    c002224f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022240:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022245:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002224a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002224f:	52                   	push   edx
c0022250:	8d 44 24 49          	lea    eax,[esp+0x49]
c0022254:	50                   	push   eax
c0022255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022259:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022260:	e8 ab fd ff ff       	call   c0022010 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022265:	83 c4 10             	add    esp,0x10
c0022268:	85 db                	test   ebx,ebx
c002226a:	74 12                	je     c002227e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c002226c:	50                   	push   eax
c002226d:	55                   	push   ebp
c002226e:	53                   	push   ebx
c002226f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022276:	e8 95 fd ff ff       	call   c0022010 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002227b:	83 c4 10             	add    esp,0x10
c002227e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022282:	83 c4 7c             	add    esp,0x7c
c0022285:	5b                   	pop    ebx
c0022286:	5e                   	pop    esi
c0022287:	5f                   	pop    edi
c0022288:	5d                   	pop    ebp
c0022289:	c3                   	ret    

c002228a <CmSetString(Reghive_Tag*, int, char const*)>:
c002228a:	55                   	push   ebp
c002228b:	57                   	push   edi
c002228c:	56                   	push   esi
c002228d:	53                   	push   ebx
c002228e:	bb 27 00 00 00       	mov    ebx,0x27
c0022293:	81 ec 88 00 00 00    	sub    esp,0x88
c0022299:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00222a0:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00222a7:	e8 c4 e2 fd ff       	call   c0000570 <strlen>
c00222ac:	8d 48 26             	lea    ecx,[eax+0x26]
c00222af:	89 c8                	mov    eax,ecx
c00222b1:	99                   	cdq    
c00222b2:	f7 fb                	idiv   ebx
c00222b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222b8:	83 c4 10             	add    esp,0x10
c00222bb:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00222c1:	7e 10                	jle    c00222d3 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00222c3:	83 ec 0c             	sub    esp,0xc
c00222c6:	68 02 2b 03 c0       	push   0xc0032b02
c00222cb:	e8 a6 df ff ff       	call   c0020276 <KePanic(char const*)>
c00222d0:	83 c4 10             	add    esp,0x10
c00222d3:	31 ff                	xor    edi,edi
c00222d5:	50                   	push   eax
c00222d6:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00222da:	53                   	push   ebx
c00222db:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00222e2:	56                   	push   esi
c00222e3:	e8 04 fc ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00222e8:	83 c4 10             	add    esp,0x10
c00222eb:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00222ef:	89 d0                	mov    eax,edx
c00222f1:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00222f5:	c1 e0 08             	shl    eax,0x8
c00222f8:	09 c2                	or     edx,eax
c00222fa:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00222fe:	c1 e2 08             	shl    edx,0x8
c0022301:	09 c2                	or     edx,eax
c0022303:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022307:	7e 76                	jle    c002237f <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0022309:	85 d2                	test   edx,edx
c002230b:	75 25                	jne    c0022332 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c002230d:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0022312:	8d 44 24 45          	lea    eax,[esp+0x45]
c0022316:	50                   	push   eax
c0022317:	6a 00                	push   0x0
c0022319:	6a 00                	push   0x0
c002231b:	56                   	push   esi
c002231c:	e8 75 fe ff ff       	call   c0022196 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022321:	83 c4 10             	add    esp,0x10
c0022324:	89 c2                	mov    edx,eax
c0022326:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022329:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c002232c:	c1 f8 10             	sar    eax,0x10
c002232f:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0022332:	55                   	push   ebp
c0022333:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0022337:	55                   	push   ebp
c0022338:	52                   	push   edx
c0022339:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002233d:	56                   	push   esi
c002233e:	e8 a9 fb ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022343:	83 c4 0c             	add    esp,0xc
c0022346:	6a 27                	push   0x27
c0022348:	6a 00                	push   0x0
c002234a:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c002234e:	51                   	push   ecx
c002234f:	e8 9c e1 fd ff       	call   c00004f0 <memset>
c0022354:	83 c4 0c             	add    esp,0xc
c0022357:	6b c7 27             	imul   eax,edi,0x27
c002235a:	6a 27                	push   0x27
c002235c:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0022363:	50                   	push   eax
c0022364:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022368:	51                   	push   ecx
c0022369:	e8 12 e3 fd ff       	call   c0000680 <strncpy>
c002236e:	83 c4 0c             	add    esp,0xc
c0022371:	55                   	push   ebp
c0022372:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022376:	52                   	push   edx
c0022377:	56                   	push   esi
c0022378:	e8 93 fc ff ff       	call   c0022010 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002237d:	eb 19                	jmp    c0022398 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c002237f:	85 d2                	test   edx,edx
c0022381:	74 18                	je     c002239b <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0022383:	51                   	push   ecx
c0022384:	51                   	push   ecx
c0022385:	52                   	push   edx
c0022386:	56                   	push   esi
c0022387:	e8 c0 fc ff ff       	call   c002204c <CmFreeExtent(Reghive_Tag*, int)>
c002238c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0022390:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022394:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022398:	83 c4 10             	add    esp,0x10
c002239b:	47                   	inc    edi
c002239c:	83 c3 03             	add    ebx,0x3
c002239f:	83 ff 07             	cmp    edi,0x7
c00223a2:	0f 85 43 ff ff ff    	jne    c00222eb <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00223a8:	50                   	push   eax
c00223a9:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00223ad:	50                   	push   eax
c00223ae:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00223b5:	56                   	push   esi
c00223b6:	e8 55 fc ff ff       	call   c0022010 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00223bb:	81 c4 8c 00 00 00    	add    esp,0x8c
c00223c1:	5b                   	pop    ebx
c00223c2:	5e                   	pop    esi
c00223c3:	5f                   	pop    edi
c00223c4:	5d                   	pop    ebp
c00223c5:	c3                   	ret    

c00223c6 <CmGetMatch(char*, char*, bool, bool*)>:
c00223c6:	56                   	push   esi
c00223c7:	53                   	push   ebx
c00223c8:	50                   	push   eax
c00223c9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00223cd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00223d2:	74 25                	je     c00223f9 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00223d4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00223d7:	31 db                	xor    ebx,ebx
c00223d9:	50                   	push   eax
c00223da:	50                   	push   eax
c00223db:	8d 04 9d e0 43 03 c0 	lea    eax,[ebx*4-0x3ffcbc20]
c00223e2:	50                   	push   eax
c00223e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223e7:	e8 64 e3 fd ff       	call   c0000750 <strcmp>
c00223ec:	83 c4 10             	add    esp,0x10
c00223ef:	85 c0                	test   eax,eax
c00223f1:	74 2e                	je     c0022421 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00223f3:	43                   	inc    ebx
c00223f4:	83 fb 3f             	cmp    ebx,0x3f
c00223f7:	75 e0                	jne    c00223d9 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00223f9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00223fc:	31 db                	xor    ebx,ebx
c00223fe:	8d 04 9d e0 43 03 c0 	lea    eax,[ebx*4-0x3ffcbc20]
c0022405:	51                   	push   ecx
c0022406:	51                   	push   ecx
c0022407:	50                   	push   eax
c0022408:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002240c:	e8 3f e3 fd ff       	call   c0000750 <strcmp>
c0022411:	83 c4 10             	add    esp,0x10
c0022414:	85 c0                	test   eax,eax
c0022416:	74 09                	je     c0022421 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022418:	43                   	inc    ebx
c0022419:	83 fb 3f             	cmp    ebx,0x3f
c002241c:	75 e0                	jne    c00223fe <CmGetMatch(char*, char*, bool, bool*)+0x38>
c002241e:	83 cb ff             	or     ebx,0xffffffff
c0022421:	89 d8                	mov    eax,ebx
c0022423:	5a                   	pop    edx
c0022424:	5b                   	pop    ebx
c0022425:	5e                   	pop    esi
c0022426:	c3                   	ret    

c0022427 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0022427:	55                   	push   ebp
c0022428:	31 c0                	xor    eax,eax
c002242a:	57                   	push   edi
c002242b:	56                   	push   esi
c002242c:	53                   	push   ebx
c002242d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022431:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022435:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0022437:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002243b:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c002243e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022442:	83 fd 1f             	cmp    ebp,0x1f
c0022445:	7f 0b                	jg     c0022452 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0022447:	0f b6 c2             	movzx  eax,dl
c002244a:	d3 e0                	shl    eax,cl
c002244c:	09 07                	or     DWORD PTR [edi],eax
c002244e:	b0 01                	mov    al,0x1
c0022450:	01 33                	add    DWORD PTR [ebx],esi
c0022452:	5b                   	pop    ebx
c0022453:	5e                   	pop    esi
c0022454:	5f                   	pop    edi
c0022455:	5d                   	pop    ebp
c0022456:	c3                   	ret    

c0022457 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0022457:	57                   	push   edi
c0022458:	56                   	push   esi
c0022459:	53                   	push   ebx
c002245a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002245e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022462:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022466:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002246a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c002246c:	7c 17                	jl     c0022485 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c002246e:	8b 17                	mov    edx,DWORD PTR [edi]
c0022470:	b8 01 00 00 00       	mov    eax,0x1
c0022475:	d3 e0                	shl    eax,cl
c0022477:	48                   	dec    eax
c0022478:	21 d0                	and    eax,edx
c002247a:	d3 ea                	shr    edx,cl
c002247c:	89 17                	mov    DWORD PTR [edi],edx
c002247e:	29 0b                	sub    DWORD PTR [ebx],ecx
c0022480:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0022483:	eb 05                	jmp    c002248a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022485:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022488:	31 c0                	xor    eax,eax
c002248a:	5b                   	pop    ebx
c002248b:	5e                   	pop    esi
c002248c:	5f                   	pop    edi
c002248d:	c3                   	ret    

c002248e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c002248e:	83 ec 40             	sub    esp,0x40
c0022491:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022495:	50                   	push   eax
c0022496:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002249a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002249e:	e8 49 fa ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224a3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00224a7:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00224ab:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00224af:	89 10                	mov    DWORD PTR [eax],edx
c00224b1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00224b4:	83 c4 4c             	add    esp,0x4c
c00224b7:	c3                   	ret    

c00224b8 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00224b8:	55                   	push   ebp
c00224b9:	57                   	push   edi
c00224ba:	56                   	push   esi
c00224bb:	53                   	push   ebx
c00224bc:	83 ec 40             	sub    esp,0x40
c00224bf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00224c3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00224c7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00224cb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00224cf:	53                   	push   ebx
c00224d0:	56                   	push   esi
c00224d1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224d5:	e8 12 fa ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224da:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00224de:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00224e2:	83 c4 0c             	add    esp,0xc
c00224e5:	53                   	push   ebx
c00224e6:	56                   	push   esi
c00224e7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224eb:	e8 20 fb ff ff       	call   c0022010 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224f0:	83 c4 4c             	add    esp,0x4c
c00224f3:	5b                   	pop    ebx
c00224f4:	5e                   	pop    esi
c00224f5:	5f                   	pop    edi
c00224f6:	5d                   	pop    ebp
c00224f7:	c3                   	ret    

c00224f8 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00224f8:	55                   	push   ebp
c00224f9:	57                   	push   edi
c00224fa:	56                   	push   esi
c00224fb:	31 f6                	xor    esi,esi
c00224fd:	53                   	push   ebx
c00224fe:	31 db                	xor    ebx,ebx
c0022500:	83 ec 40             	sub    esp,0x40
c0022503:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002250b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0022513:	6a 12                	push   0x12
c0022515:	68 ee 00 00 00       	push   0xee
c002251a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c002251e:	e8 cd df fd ff       	call   c00004f0 <memset>
c0022523:	83 c4 10             	add    esp,0x10
c0022526:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002252a:	6a 08                	push   0x8
c002252c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022530:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022534:	50                   	push   eax
c0022535:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022539:	55                   	push   ebp
c002253a:	57                   	push   edi
c002253b:	e8 e7 fe ff ff       	call   c0022427 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022540:	83 c4 10             	add    esp,0x10
c0022543:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022547:	50                   	push   eax
c0022548:	6a 06                	push   0x6
c002254a:	55                   	push   ebp
c002254b:	57                   	push   edi
c002254c:	e8 06 ff ff ff       	call   c0022457 <CmGetShift(unsigned int*, int*, int, bool*)>
c0022551:	83 c4 10             	add    esp,0x10
c0022554:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022559:	74 07                	je     c0022562 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c002255b:	46                   	inc    esi
c002255c:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022560:	eb e1                	jmp    c0022543 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0022562:	43                   	inc    ebx
c0022563:	83 fb 12             	cmp    ebx,0x12
c0022566:	75 c2                	jne    c002252a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022568:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002256c:	31 db                	xor    ebx,ebx
c002256e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022571:	50                   	push   eax
c0022572:	50                   	push   eax
c0022573:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0022578:	43                   	inc    ebx
c0022579:	8d 04 85 e0 43 03 c0 	lea    eax,[eax*4-0x3ffcbc20]
c0022580:	50                   	push   eax
c0022581:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022585:	e8 b6 e2 fd ff       	call   c0000840 <strcat>
c002258a:	83 c4 10             	add    esp,0x10
c002258d:	83 fb 18             	cmp    ebx,0x18
c0022590:	75 df                	jne    c0022571 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022592:	83 c4 3c             	add    esp,0x3c
c0022595:	31 c0                	xor    eax,eax
c0022597:	5b                   	pop    ebx
c0022598:	5e                   	pop    esi
c0022599:	5f                   	pop    edi
c002259a:	5d                   	pop    ebp
c002259b:	c3                   	ret    

c002259c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c002259c:	83 ec 40             	sub    esp,0x40
c002259f:	8d 44 24 09          	lea    eax,[esp+0x9]
c00225a3:	50                   	push   eax
c00225a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00225a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00225ac:	e8 3b f9 ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00225b1:	58                   	pop    eax
c00225b2:	5a                   	pop    edx
c00225b3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00225b7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00225bb:	50                   	push   eax
c00225bc:	e8 37 ff ff ff       	call   c00224f8 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00225c1:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00225c6:	83 c4 4c             	add    esp,0x4c
c00225c9:	c3                   	ret    

c00225ca <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00225ca:	55                   	push   ebp
c00225cb:	57                   	push   edi
c00225cc:	56                   	push   esi
c00225cd:	53                   	push   ebx
c00225ce:	31 db                	xor    ebx,ebx
c00225d0:	83 ec 70             	sub    esp,0x70
c00225d3:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00225da:	6a 30                	push   0x30
c00225dc:	6a 00                	push   0x0
c00225de:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00225e2:	56                   	push   esi
c00225e3:	e8 08 df fd ff       	call   c00004f0 <memset>
c00225e8:	83 c4 10             	add    esp,0x10
c00225eb:	83 ec 0c             	sub    esp,0xc
c00225ee:	57                   	push   edi
c00225ef:	e8 7c df fd ff       	call   c0000570 <strlen>
c00225f4:	83 c4 10             	add    esp,0x10
c00225f7:	39 d8                	cmp    eax,ebx
c00225f9:	76 16                	jbe    c0022611 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00225fb:	83 ec 0c             	sub    esp,0xc
c00225fe:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0022602:	50                   	push   eax
c0022603:	e8 28 e3 fd ff       	call   c0000930 <toupper>
c0022608:	83 c4 10             	add    esp,0x10
c002260b:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002260e:	43                   	inc    ebx
c002260f:	eb da                	jmp    c00225eb <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0022611:	31 f6                	xor    esi,esi
c0022613:	52                   	push   edx
c0022614:	31 ff                	xor    edi,edi
c0022616:	6a 18                	push   0x18
c0022618:	6a 3f                	push   0x3f
c002261a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002261e:	50                   	push   eax
c002261f:	e8 cc de fd ff       	call   c00004f0 <memset>
c0022624:	83 c4 10             	add    esp,0x10
c0022627:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c002262b:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c002262f:	84 c0                	test   al,al
c0022631:	0f 84 b0 00 00 00    	je     c00226e7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022637:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c002263b:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0022640:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0022644:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0022649:	8d 6e 01             	lea    ebp,[esi+0x1]
c002264c:	83 ec 0c             	sub    esp,0xc
c002264f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022653:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022657:	53                   	push   ebx
c0022658:	e8 13 df fd ff       	call   c0000570 <strlen>
c002265d:	83 c4 10             	add    esp,0x10
c0022660:	85 c0                	test   eax,eax
c0022662:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022666:	74 0b                	je     c0022673 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022668:	50                   	push   eax
c0022669:	6a 01                	push   0x1
c002266b:	53                   	push   ebx
c002266c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022670:	50                   	push   eax
c0022671:	eb 0a                	jmp    c002267d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022673:	50                   	push   eax
c0022674:	6a 00                	push   0x0
c0022676:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002267a:	50                   	push   eax
c002267b:	6a 00                	push   0x0
c002267d:	e8 44 fd ff ff       	call   c00223c6 <CmGetMatch(char*, char*, bool, bool*)>
c0022682:	83 c4 10             	add    esp,0x10
c0022685:	83 f8 ff             	cmp    eax,0xffffffff
c0022688:	75 1a                	jne    c00226a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c002268a:	83 ec 0c             	sub    esp,0xc
c002268d:	68 17 2b 03 c0       	push   0xc0032b17
c0022692:	e8 df db ff ff       	call   c0020276 <KePanic(char const*)>
c0022697:	83 c4 10             	add    esp,0x10
c002269a:	b8 02 00 00 00       	mov    eax,0x2
c002269f:	e9 bc 00 00 00       	jmp    c0022760 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00226a4:	83 ff 18             	cmp    edi,0x18
c00226a7:	75 1a                	jne    c00226c3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00226a9:	83 ec 0c             	sub    esp,0xc
c00226ac:	68 2c 2b 03 c0       	push   0xc0032b2c
c00226b1:	e8 c0 db ff ff       	call   c0020276 <KePanic(char const*)>
c00226b6:	83 c4 10             	add    esp,0x10
c00226b9:	b8 01 00 00 00       	mov    eax,0x1
c00226be:	e9 9d 00 00 00       	jmp    c0022760 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00226c3:	47                   	inc    edi
c00226c4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00226c9:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00226cd:	74 02                	je     c00226d1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00226cf:	89 ee                	mov    esi,ebp
c00226d1:	83 ec 0c             	sub    esp,0xc
c00226d4:	53                   	push   ebx
c00226d5:	e8 96 de fd ff       	call   c0000570 <strlen>
c00226da:	83 c4 10             	add    esp,0x10
c00226dd:	85 c0                	test   eax,eax
c00226df:	74 06                	je     c00226e7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00226e1:	46                   	inc    esi
c00226e2:	e9 40 ff ff ff       	jmp    c0022627 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00226e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00226ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00226f7:	31 f6                	xor    esi,esi
c00226f9:	50                   	push   eax
c00226fa:	31 ff                	xor    edi,edi
c00226fc:	6a 12                	push   0x12
c00226fe:	68 ee 00 00 00       	push   0xee
c0022703:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002270a:	e8 e1 dd fd ff       	call   c00004f0 <memset>
c002270f:	83 c4 10             	add    esp,0x10
c0022712:	83 fe 17             	cmp    esi,0x17
c0022715:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0022719:	7e 26                	jle    c0022741 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c002271b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002271f:	50                   	push   eax
c0022720:	6a 08                	push   0x8
c0022722:	55                   	push   ebp
c0022723:	53                   	push   ebx
c0022724:	e8 2e fd ff ff       	call   c0022457 <CmGetShift(unsigned int*, int*, int, bool*)>
c0022729:	83 c4 10             	add    esp,0x10
c002272c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022731:	74 26                	je     c0022759 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0022733:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c002273a:	4e                   	dec    esi
c002273b:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c002273e:	47                   	inc    edi
c002273f:	eb 1c                	jmp    c002275d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022741:	6a 06                	push   0x6
c0022743:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0022748:	50                   	push   eax
c0022749:	55                   	push   ebp
c002274a:	53                   	push   ebx
c002274b:	e8 d7 fc ff ff       	call   c0022427 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022750:	83 c4 10             	add    esp,0x10
c0022753:	84 c0                	test   al,al
c0022755:	75 06                	jne    c002275d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022757:	eb c2                	jmp    c002271b <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0022759:	31 c0                	xor    eax,eax
c002275b:	eb 03                	jmp    c0022760 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c002275d:	46                   	inc    esi
c002275e:	eb b2                	jmp    c0022712 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0022760:	83 c4 6c             	add    esp,0x6c
c0022763:	5b                   	pop    ebx
c0022764:	5e                   	pop    esi
c0022765:	5f                   	pop    edi
c0022766:	5d                   	pop    ebp
c0022767:	c3                   	ret    

c0022768 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022768:	53                   	push   ebx
c0022769:	83 ec 3c             	sub    esp,0x3c
c002276c:	6a 2b                	push   0x2b
c002276e:	6a 00                	push   0x0
c0022770:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022774:	53                   	push   ebx
c0022775:	e8 76 dd fd ff       	call   c00004f0 <memset>
c002277a:	58                   	pop    eax
c002277b:	5a                   	pop    edx
c002277c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022780:	50                   	push   eax
c0022781:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022785:	e8 40 fe ff ff       	call   c00225ca <CmConvertToInternalFilename(char const*, unsigned char*)>
c002278a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c002278f:	83 c4 0c             	add    esp,0xc
c0022792:	6a 15                	push   0x15
c0022794:	6a 00                	push   0x0
c0022796:	8d 44 24 27          	lea    eax,[esp+0x27]
c002279a:	50                   	push   eax
c002279b:	e8 50 dd fd ff       	call   c00004f0 <memset>
c00227a0:	53                   	push   ebx
c00227a1:	6a 00                	push   0x0
c00227a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00227a7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00227ab:	e8 e6 f9 ff ff       	call   c0022196 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00227b0:	83 c4 58             	add    esp,0x58
c00227b3:	5b                   	pop    ebx
c00227b4:	c3                   	ret    

c00227b5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00227b5:	56                   	push   esi
c00227b6:	53                   	push   ebx
c00227b7:	83 ec 48             	sub    esp,0x48
c00227ba:	6a 12                	push   0x12
c00227bc:	68 ff 00 00 00       	push   0xff
c00227c1:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00227c5:	56                   	push   esi
c00227c6:	e8 25 dd fd ff       	call   c00004f0 <memset>
c00227cb:	5a                   	pop    edx
c00227cc:	59                   	pop    ecx
c00227cd:	56                   	push   esi
c00227ce:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00227d2:	e8 f3 fd ff ff       	call   c00225ca <CmConvertToInternalFilename(char const*, unsigned char*)>
c00227d7:	83 c4 10             	add    esp,0x10
c00227da:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00227de:	85 db                	test   ebx,ebx
c00227e0:	74 42                	je     c0022824 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00227e2:	50                   	push   eax
c00227e3:	8d 44 24 19          	lea    eax,[esp+0x19]
c00227e7:	50                   	push   eax
c00227e8:	53                   	push   ebx
c00227e9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00227ed:	e8 fa f6 ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227f2:	83 c4 0c             	add    esp,0xc
c00227f5:	6a 12                	push   0x12
c00227f7:	8d 44 24 21          	lea    eax,[esp+0x21]
c00227fb:	50                   	push   eax
c00227fc:	56                   	push   esi
c00227fd:	e8 7e db fd ff       	call   c0000380 <memcmp>
c0022802:	83 c4 10             	add    esp,0x10
c0022805:	85 c0                	test   eax,eax
c0022807:	74 1e                	je     c0022827 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022809:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002280e:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022813:	c1 e3 08             	shl    ebx,0x8
c0022816:	09 d8                	or     eax,ebx
c0022818:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c002281d:	c1 e3 10             	shl    ebx,0x10
c0022820:	09 c3                	or     ebx,eax
c0022822:	eb ba                	jmp    c00227de <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022824:	83 cb ff             	or     ebx,0xffffffff
c0022827:	89 d8                	mov    eax,ebx
c0022829:	83 c4 44             	add    esp,0x44
c002282c:	5b                   	pop    ebx
c002282d:	5e                   	pop    esi
c002282e:	c3                   	ret    

c002282f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c002282f:	57                   	push   edi
c0022830:	56                   	push   esi
c0022831:	53                   	push   ebx
c0022832:	83 ec 34             	sub    esp,0x34
c0022835:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022839:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002283d:	6a 2b                	push   0x2b
c002283f:	6a 00                	push   0x0
c0022841:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022845:	53                   	push   ebx
c0022846:	e8 a5 dc fd ff       	call   c00004f0 <memset>
c002284b:	58                   	pop    eax
c002284c:	5a                   	pop    edx
c002284d:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022851:	50                   	push   eax
c0022852:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022856:	e8 6f fd ff ff       	call   c00225ca <CmConvertToInternalFilename(char const*, unsigned char*)>
c002285b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c002285f:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022863:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022867:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c002286b:	53                   	push   ebx
c002286c:	6a 00                	push   0x0
c002286e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022872:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022876:	e8 1b f9 ff ff       	call   c0022196 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002287b:	83 c4 50             	add    esp,0x50
c002287e:	5b                   	pop    ebx
c002287f:	5e                   	pop    esi
c0022880:	5f                   	pop    edi
c0022881:	c3                   	ret    

c0022882 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022882:	55                   	push   ebp
c0022883:	57                   	push   edi
c0022884:	56                   	push   esi
c0022885:	53                   	push   ebx
c0022886:	83 ec 40             	sub    esp,0x40
c0022889:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c002288d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022891:	6a 2b                	push   0x2b
c0022893:	6a 00                	push   0x0
c0022895:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022899:	56                   	push   esi
c002289a:	e8 51 dc fd ff       	call   c00004f0 <memset>
c002289f:	5f                   	pop    edi
c00228a0:	89 ef                	mov    edi,ebp
c00228a2:	58                   	pop    eax
c00228a3:	8d 44 24 11          	lea    eax,[esp+0x11]
c00228a7:	50                   	push   eax
c00228a8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00228ac:	e8 19 fd ff ff       	call   c00225ca <CmConvertToInternalFilename(char const*, unsigned char*)>
c00228b1:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00228b6:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00228bb:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00228c0:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00228c5:	83 c4 10             	add    esp,0x10
c00228c8:	85 ed                	test   ebp,ebp
c00228ca:	74 14                	je     c00228e0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00228cc:	51                   	push   ecx
c00228cd:	51                   	push   ecx
c00228ce:	57                   	push   edi
c00228cf:	53                   	push   ebx
c00228d0:	e8 09 f7 ff ff       	call   c0021fde <CmGetNext(Reghive_Tag*, int)>
c00228d5:	83 c4 10             	add    esp,0x10
c00228d8:	85 c0                	test   eax,eax
c00228da:	74 04                	je     c00228e0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00228dc:	89 c7                	mov    edi,eax
c00228de:	eb e8                	jmp    c00228c8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00228e0:	56                   	push   esi
c00228e1:	6a 00                	push   0x0
c00228e3:	57                   	push   edi
c00228e4:	53                   	push   ebx
c00228e5:	e8 ac f8 ff ff       	call   c0022196 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00228ea:	83 c4 0c             	add    esp,0xc
c00228ed:	89 c7                	mov    edi,eax
c00228ef:	56                   	push   esi
c00228f0:	50                   	push   eax
c00228f1:	53                   	push   ebx
c00228f2:	e8 f5 f5 ff ff       	call   c0021eec <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00228f7:	58                   	pop    eax
c00228f8:	5a                   	pop    edx
c00228f9:	6a 6c                	push   0x6c
c00228fb:	6a 00                	push   0x0
c00228fd:	6a 00                	push   0x0
c00228ff:	68 3d 2b 03 c0       	push   0xc0032b3d
c0022904:	57                   	push   edi
c0022905:	53                   	push   ebx
c0022906:	e8 24 ff ff ff       	call   c002282f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c002290b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c002290f:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0022913:	c1 e8 10             	shr    eax,0x10
c0022916:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c002291a:	83 c4 1c             	add    esp,0x1c
c002291d:	56                   	push   esi
c002291e:	57                   	push   edi
c002291f:	53                   	push   ebx
c0022920:	e8 eb f6 ff ff       	call   c0022010 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022925:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c002292a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002292f:	c1 e0 08             	shl    eax,0x8
c0022932:	09 c2                	or     edx,eax
c0022934:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022939:	83 c4 4c             	add    esp,0x4c
c002293c:	c1 e0 10             	shl    eax,0x10
c002293f:	5b                   	pop    ebx
c0022940:	09 d0                	or     eax,edx
c0022942:	5e                   	pop    esi
c0022943:	5f                   	pop    edi
c0022944:	5d                   	pop    ebp
c0022945:	c3                   	ret    

c0022946 <zStrtok(char*, char const*)>:
c0022946:	55                   	push   ebp
c0022947:	57                   	push   edi
c0022948:	56                   	push   esi
c0022949:	53                   	push   ebx
c002294a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002294e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022952:	85 db                	test   ebx,ebx
c0022954:	74 2f                	je     c0022985 <zStrtok(char*, char const*)+0x3f>
c0022956:	85 c0                	test   eax,eax
c0022958:	75 09                	jne    c0022963 <zStrtok(char*, char const*)+0x1d>
c002295a:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c002295f:	85 c0                	test   eax,eax
c0022961:	74 50                	je     c00229b3 <zStrtok(char*, char const*)+0x6d>
c0022963:	31 c9                	xor    ecx,ecx
c0022965:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022969:	74 03                	je     c002296e <zStrtok(char*, char const*)+0x28>
c002296b:	41                   	inc    ecx
c002296c:	eb f7                	jmp    c0022965 <zStrtok(char*, char const*)+0x1f>
c002296e:	31 d2                	xor    edx,edx
c0022970:	39 ca                	cmp    edx,ecx
c0022972:	74 15                	je     c0022989 <zStrtok(char*, char const*)+0x43>
c0022974:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022978:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c002297b:	8d 3c 10             	lea    edi,[eax+edx*1]
c002297e:	39 ee                	cmp    esi,ebp
c0022980:	74 13                	je     c0022995 <zStrtok(char*, char const*)+0x4f>
c0022982:	42                   	inc    edx
c0022983:	eb eb                	jmp    c0022970 <zStrtok(char*, char const*)+0x2a>
c0022985:	31 c0                	xor    eax,eax
c0022987:	eb 2a                	jmp    c00229b3 <zStrtok(char*, char const*)+0x6d>
c0022989:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022993:	eb 1e                	jmp    c00229b3 <zStrtok(char*, char const*)+0x6d>
c0022995:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022998:	39 ce                	cmp    esi,ecx
c002299a:	75 0a                	jne    c00229a6 <zStrtok(char*, char const*)+0x60>
c002299c:	40                   	inc    eax
c002299d:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c00229a2:	89 d8                	mov    eax,ebx
c00229a4:	eb 0d                	jmp    c00229b3 <zStrtok(char*, char const*)+0x6d>
c00229a6:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00229aa:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00229ad:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c00229b3:	5b                   	pop    ebx
c00229b4:	5e                   	pop    esi
c00229b5:	5f                   	pop    edi
c00229b6:	5d                   	pop    ebp
c00229b7:	c3                   	ret    

c00229b8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00229b8:	57                   	push   edi
c00229b9:	56                   	push   esi
c00229ba:	53                   	push   ebx
c00229bb:	81 ec 08 01 00 00    	sub    esp,0x108
c00229c1:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00229c8:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00229cf:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00229d3:	53                   	push   ebx
c00229d4:	e8 67 dc fd ff       	call   c0000640 <strcpy>
c00229d9:	59                   	pop    ecx
c00229da:	5e                   	pop    esi
c00229db:	68 df 2e 03 c0       	push   0xc0032edf
c00229e0:	53                   	push   ebx
c00229e1:	bb 01 00 00 00       	mov    ebx,0x1
c00229e6:	e8 5b ff ff ff       	call   c0022946 <zStrtok(char*, char const*)>
c00229eb:	83 c4 10             	add    esp,0x10
c00229ee:	85 c0                	test   eax,eax
c00229f0:	74 3b                	je     c0022a2d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229f2:	52                   	push   edx
c00229f3:	50                   	push   eax
c00229f4:	6a 01                	push   0x1
c00229f6:	57                   	push   edi
c00229f7:	e8 b9 fd ff ff       	call   c00227b5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00229fc:	59                   	pop    ecx
c00229fd:	89 c3                	mov    ebx,eax
c00229ff:	5e                   	pop    esi
c0022a00:	68 df 2e 03 c0       	push   0xc0032edf
c0022a05:	6a 00                	push   0x0
c0022a07:	e8 3a ff ff ff       	call   c0022946 <zStrtok(char*, char const*)>
c0022a0c:	83 c4 10             	add    esp,0x10
c0022a0f:	89 c6                	mov    esi,eax
c0022a11:	85 c0                	test   eax,eax
c0022a13:	74 18                	je     c0022a2d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022a15:	52                   	push   edx
c0022a16:	52                   	push   edx
c0022a17:	53                   	push   ebx
c0022a18:	57                   	push   edi
c0022a19:	e8 81 f5 ff ff       	call   c0021f9f <CmEnterDirectory(Reghive_Tag*, int)>
c0022a1e:	83 c4 10             	add    esp,0x10
c0022a21:	89 c3                	mov    ebx,eax
c0022a23:	83 f8 ff             	cmp    eax,0xffffffff
c0022a26:	74 05                	je     c0022a2d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022a28:	50                   	push   eax
c0022a29:	56                   	push   esi
c0022a2a:	53                   	push   ebx
c0022a2b:	eb c9                	jmp    c00229f6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022a2d:	81 c4 00 01 00 00    	add    esp,0x100
c0022a33:	89 d8                	mov    eax,ebx
c0022a35:	5b                   	pop    ebx
c0022a36:	5e                   	pop    esi
c0022a37:	5f                   	pop    edi
c0022a38:	c3                   	ret    

c0022a39 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022a39:	55                   	push   ebp
c0022a3a:	57                   	push   edi
c0022a3b:	56                   	push   esi
c0022a3c:	53                   	push   ebx
c0022a3d:	83 ec 5c             	sub    esp,0x5c
c0022a40:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022a44:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022a48:	85 db                	test   ebx,ebx
c0022a4a:	0f 8e 84 00 00 00    	jle    c0022ad4 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022a50:	31 ed                	xor    ebp,ebp
c0022a52:	57                   	push   edi
c0022a53:	6a 32                	push   0x32
c0022a55:	6a 00                	push   0x0
c0022a57:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022a5b:	57                   	push   edi
c0022a5c:	e8 8f da fd ff       	call   c00004f0 <memset>
c0022a61:	83 c4 0c             	add    esp,0xc
c0022a64:	57                   	push   edi
c0022a65:	53                   	push   ebx
c0022a66:	56                   	push   esi
c0022a67:	e8 30 fb ff ff       	call   c002259c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022a6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022a70:	83 c4 10             	add    esp,0x10
c0022a73:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022a77:	7d 13                	jge    c0022a8c <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022a79:	83 ec 0c             	sub    esp,0xc
c0022a7c:	45                   	inc    ebp
c0022a7d:	68 63 32 03 c0       	push   0xc0033263
c0022a82:	e8 d6 67 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0022a87:	83 c4 10             	add    esp,0x10
c0022a8a:	eb e7                	jmp    c0022a73 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022a8c:	51                   	push   ecx
c0022a8d:	57                   	push   edi
c0022a8e:	53                   	push   ebx
c0022a8f:	68 43 2b 03 c0       	push   0xc0032b43
c0022a94:	e8 c4 67 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0022a99:	83 c4 10             	add    esp,0x10
c0022a9c:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022aa1:	75 1e                	jne    c0022ac1 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022aa3:	52                   	push   edx
c0022aa4:	52                   	push   edx
c0022aa5:	53                   	push   ebx
c0022aa6:	56                   	push   esi
c0022aa7:	e8 f3 f4 ff ff       	call   c0021f9f <CmEnterDirectory(Reghive_Tag*, int)>
c0022aac:	83 c4 0c             	add    esp,0xc
c0022aaf:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022ab3:	8d 51 04             	lea    edx,[ecx+0x4]
c0022ab6:	52                   	push   edx
c0022ab7:	50                   	push   eax
c0022ab8:	56                   	push   esi
c0022ab9:	e8 7b ff ff ff       	call   c0022a39 <CmDisplayTree(Reghive_Tag*, int, int)>
c0022abe:	83 c4 10             	add    esp,0x10
c0022ac1:	50                   	push   eax
c0022ac2:	50                   	push   eax
c0022ac3:	53                   	push   ebx
c0022ac4:	56                   	push   esi
c0022ac5:	e8 14 f5 ff ff       	call   c0021fde <CmGetNext(Reghive_Tag*, int)>
c0022aca:	83 c4 10             	add    esp,0x10
c0022acd:	89 c3                	mov    ebx,eax
c0022acf:	e9 74 ff ff ff       	jmp    c0022a48 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022ad4:	83 c4 5c             	add    esp,0x5c
c0022ad7:	5b                   	pop    ebx
c0022ad8:	5e                   	pop    esi
c0022ad9:	5f                   	pop    edi
c0022ada:	5d                   	pop    ebp
c0022adb:	c3                   	ret    

c0022adc <CmSplitFinalSlashInPlace(char*)>:
c0022adc:	53                   	push   ebx
c0022add:	83 ec 14             	sub    esp,0x14
c0022ae0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022ae4:	53                   	push   ebx
c0022ae5:	e8 86 da fd ff       	call   c0000570 <strlen>
c0022aea:	83 c4 10             	add    esp,0x10
c0022aed:	48                   	dec    eax
c0022aee:	85 c0                	test   eax,eax
c0022af0:	74 15                	je     c0022b07 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022af2:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022af5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022af9:	75 09                	jne    c0022b04 <CmSplitFinalSlashInPlace(char*)+0x28>
c0022afb:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022afe:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022b02:	eb 05                	jmp    c0022b09 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022b04:	48                   	dec    eax
c0022b05:	eb e7                	jmp    c0022aee <CmSplitFinalSlashInPlace(char*)+0x12>
c0022b07:	31 c0                	xor    eax,eax
c0022b09:	83 c4 08             	add    esp,0x8
c0022b0c:	5b                   	pop    ebx
c0022b0d:	c3                   	ret    

c0022b0e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022b0e:	55                   	push   ebp
c0022b0f:	57                   	push   edi
c0022b10:	56                   	push   esi
c0022b11:	53                   	push   ebx
c0022b12:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022b18:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022b1f:	8a 13                	mov    dl,BYTE PTR [ebx]
c0022b21:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022b24:	80 fa 40             	cmp    dl,0x40
c0022b27:	75 1c                	jne    c0022b45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0022b29:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0022b2c:	85 c9                	test   ecx,ecx
c0022b2e:	0f 84 09 01 00 00    	je     c0022c3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b34:	8d 43 01             	lea    eax,[ebx+0x1]
c0022b37:	83 f9 3a             	cmp    ecx,0x3a
c0022b3a:	74 04                	je     c0022b40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0022b3c:	89 c3                	mov    ebx,eax
c0022b3e:	eb e9                	jmp    c0022b29 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0022b40:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022b43:	89 c3                	mov    ebx,eax
c0022b45:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0022b49:	50                   	push   eax
c0022b4a:	6a 40                	push   0x40
c0022b4c:	6a 00                	push   0x0
c0022b4e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022b52:	50                   	push   eax
c0022b53:	e8 98 d9 fd ff       	call   c00004f0 <memset>
c0022b58:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022b5f:	31 c0                	xor    eax,eax
c0022b61:	83 c4 10             	add    esp,0x10
c0022b64:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0022b69:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022b6c:	89 d1                	mov    ecx,edx
c0022b6e:	85 d2                	test   edx,edx
c0022b70:	0f 84 c7 00 00 00    	je     c0022c3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b76:	3d c7 00 00 00       	cmp    eax,0xc7
c0022b7b:	0f 8f bc 00 00 00    	jg     c0022c3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b81:	83 fa 0a             	cmp    edx,0xa
c0022b84:	0f 85 a4 00 00 00    	jne    c0022c2e <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0022b8a:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022b8f:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022b94:	89 c8                	mov    eax,ecx
c0022b96:	a8 df                	test   al,0xdf
c0022b98:	0f 94 c2             	sete   dl
c0022b9b:	83 f9 23             	cmp    ecx,0x23
c0022b9e:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022ba3:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0022ba7:	80 e2 01             	and    dl,0x1
c0022baa:	75 4a                	jne    c0022bf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022bac:	83 e8 09             	sub    eax,0x9
c0022baf:	3c 01                	cmp    al,0x1
c0022bb1:	76 43                	jbe    c0022bf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022bb3:	83 f9 5b             	cmp    ecx,0x5b
c0022bb6:	75 42                	jne    c0022bfa <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0022bb8:	83 fe 40             	cmp    esi,0x40
c0022bbb:	75 39                	jne    c0022bf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022bbd:	83 ec 0c             	sub    esp,0xc
c0022bc0:	8d 54 24 65          	lea    edx,[esp+0x65]
c0022bc4:	52                   	push   edx
c0022bc5:	e8 a6 d9 fd ff       	call   c0000570 <strlen>
c0022bca:	83 c4 10             	add    esp,0x10
c0022bcd:	83 f8 3f             	cmp    eax,0x3f
c0022bd0:	77 6b                	ja     c0022c3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022bd2:	50                   	push   eax
c0022bd3:	50                   	push   eax
c0022bd4:	8d 54 24 61          	lea    edx,[esp+0x61]
c0022bd8:	52                   	push   edx
c0022bd9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022bdd:	52                   	push   edx
c0022bde:	e8 5d da fd ff       	call   c0000640 <strcpy>
c0022be3:	58                   	pop    eax
c0022be4:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022be8:	52                   	push   edx
c0022be9:	e8 82 d9 fd ff       	call   c0000570 <strlen>
c0022bee:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022bf3:	83 c4 10             	add    esp,0x10
c0022bf6:	31 d2                	xor    edx,edx
c0022bf8:	eb 3b                	jmp    c0022c35 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0022bfa:	83 fe 40             	cmp    esi,0x40
c0022bfd:	74 06                	je     c0022c05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0022bff:	8d 44 24 58          	lea    eax,[esp+0x58]
c0022c03:	eb 20                	jmp    c0022c25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0022c05:	50                   	push   eax
c0022c06:	50                   	push   eax
c0022c07:	55                   	push   ebp
c0022c08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022c0c:	50                   	push   eax
c0022c0d:	e8 3e db fd ff       	call   c0000750 <strcmp>
c0022c12:	83 c4 10             	add    esp,0x10
c0022c15:	85 c0                	test   eax,eax
c0022c17:	75 dd                	jne    c0022bf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022c19:	eb e4                	jmp    c0022bff <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022c1b:	8d 50 01             	lea    edx,[eax+0x1]
c0022c1e:	83 f9 3d             	cmp    ecx,0x3d
c0022c21:	74 1e                	je     c0022c41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0022c23:	89 d0                	mov    eax,edx
c0022c25:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022c28:	85 c9                	test   ecx,ecx
c0022c2a:	75 ef                	jne    c0022c1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0022c2c:	eb 0f                	jmp    c0022c3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022c2e:	8d 50 01             	lea    edx,[eax+0x1]
c0022c31:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022c35:	47                   	inc    edi
c0022c36:	89 d0                	mov    eax,edx
c0022c38:	e9 2c ff ff ff       	jmp    c0022b69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0022c3d:	31 c0                	xor    eax,eax
c0022c3f:	eb 33                	jmp    c0022c74 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0022c41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c45:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022c48:	50                   	push   eax
c0022c49:	50                   	push   eax
c0022c4a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022c4e:	50                   	push   eax
c0022c4f:	53                   	push   ebx
c0022c50:	e8 fb da fd ff       	call   c0000750 <strcmp>
c0022c55:	83 c4 10             	add    esp,0x10
c0022c58:	85 c0                	test   eax,eax
c0022c5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c5e:	75 96                	jne    c0022bf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022c60:	51                   	push   ecx
c0022c61:	51                   	push   ecx
c0022c62:	52                   	push   edx
c0022c63:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022c6a:	e8 d1 d9 fd ff       	call   c0000640 <strcpy>
c0022c6f:	83 c4 10             	add    esp,0x10
c0022c72:	b0 01                	mov    al,0x1
c0022c74:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022c7a:	5b                   	pop    ebx
c0022c7b:	5e                   	pop    esi
c0022c7c:	5f                   	pop    edi
c0022c7d:	5d                   	pop    ebp
c0022c7e:	c3                   	ret    

c0022c7f <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022c7f:	57                   	push   edi
c0022c80:	56                   	push   esi
c0022c81:	53                   	push   ebx
c0022c82:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022c88:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022c8f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022c96:	53                   	push   ebx
c0022c97:	e8 d4 d8 fd ff       	call   c0000570 <strlen>
c0022c9c:	89 34 24             	mov    DWORD PTR [esp],esi
c0022c9f:	89 c7                	mov    edi,eax
c0022ca1:	e8 ca d8 fd ff       	call   c0000570 <strlen>
c0022ca6:	83 c4 10             	add    esp,0x10
c0022ca9:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022cad:	3d ff 00 00 00       	cmp    eax,0xff
c0022cb2:	0f 87 d3 00 00 00    	ja     c0022d8b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022cb8:	57                   	push   edi
c0022cb9:	57                   	push   edi
c0022cba:	56                   	push   esi
c0022cbb:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022cbf:	56                   	push   esi
c0022cc0:	e8 7b d9 fd ff       	call   c0000640 <strcpy>
c0022cc5:	58                   	pop    eax
c0022cc6:	5a                   	pop    edx
c0022cc7:	68 df 2e 03 c0       	push   0xc0032edf
c0022ccc:	56                   	push   esi
c0022ccd:	e8 6e db fd ff       	call   c0000840 <strcat>
c0022cd2:	59                   	pop    ecx
c0022cd3:	5f                   	pop    edi
c0022cd4:	53                   	push   ebx
c0022cd5:	56                   	push   esi
c0022cd6:	e8 65 db fd ff       	call   c0000840 <strcat>
c0022cdb:	58                   	pop    eax
c0022cdc:	5a                   	pop    edx
c0022cdd:	68 4d 2b 03 c0       	push   0xc0032b4d
c0022ce2:	56                   	push   esi
c0022ce3:	e8 58 db fd ff       	call   c0000840 <strcat>
c0022ce8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022cef:	e8 ca 36 ff ff       	call   c00163be <malloc>
c0022cf4:	83 c4 0c             	add    esp,0xc
c0022cf7:	89 c3                	mov    ebx,eax
c0022cf9:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022cff:	56                   	push   esi
c0022d00:	50                   	push   eax
c0022d01:	e8 5e 77 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0022d06:	83 c4 10             	add    esp,0x10
c0022d09:	85 db                	test   ebx,ebx
c0022d0b:	74 7e                	je     c0022d8b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022d0d:	51                   	push   ecx
c0022d0e:	51                   	push   ecx
c0022d0f:	6a 01                	push   0x1
c0022d11:	53                   	push   ebx
c0022d12:	e8 6b 77 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c0022d17:	83 c4 10             	add    esp,0x10
c0022d1a:	85 c0                	test   eax,eax
c0022d1c:	74 08                	je     c0022d26 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022d1e:	83 ec 0c             	sub    esp,0xc
c0022d21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d23:	53                   	push   ebx
c0022d24:	eb 5f                	jmp    c0022d85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022d26:	52                   	push   edx
c0022d27:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022d2b:	50                   	push   eax
c0022d2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022d30:	50                   	push   eax
c0022d31:	53                   	push   ebx
c0022d32:	e8 4d 7a ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c0022d37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022d3b:	83 c4 10             	add    esp,0x10
c0022d3e:	89 c1                	mov    ecx,eax
c0022d40:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022d44:	74 31                	je     c0022d77 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d46:	83 ec 0c             	sub    esp,0xc
c0022d49:	50                   	push   eax
c0022d4a:	e8 6f 36 ff ff       	call   c00163be <malloc>
c0022d4f:	89 c6                	mov    esi,eax
c0022d51:	58                   	pop    eax
c0022d52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d54:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022d58:	52                   	push   edx
c0022d59:	56                   	push   esi
c0022d5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d62:	53                   	push   ebx
c0022d63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022d66:	83 c4 20             	add    esp,0x20
c0022d69:	85 c0                	test   eax,eax
c0022d6b:	75 0a                	jne    c0022d77 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d71:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022d75:	74 18                	je     c0022d8f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022d77:	83 ec 0c             	sub    esp,0xc
c0022d7a:	53                   	push   ebx
c0022d7b:	e8 60 77 ff ff       	call   c001a4e0 <File::close()>
c0022d80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022d85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d88:	83 c4 10             	add    esp,0x10
c0022d8b:	31 c0                	xor    eax,eax
c0022d8d:	eb 3b                	jmp    c0022dca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022d8f:	83 ec 0c             	sub    esp,0xc
c0022d92:	53                   	push   ebx
c0022d93:	e8 48 77 ff ff       	call   c001a4e0 <File::close()>
c0022d98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022d9d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022da0:	83 c4 0c             	add    esp,0xc
c0022da3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022daa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022db1:	56                   	push   esi
c0022db2:	e8 57 fd ff ff       	call   c0022b0e <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022db7:	89 34 24             	mov    DWORD PTR [esp],esi
c0022dba:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022dbe:	e8 1b 36 ff ff       	call   c00163de <free>
c0022dc3:	83 c4 10             	add    esp,0x10
c0022dc6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022dca:	81 c4 20 01 00 00    	add    esp,0x120
c0022dd0:	5b                   	pop    ebx
c0022dd1:	5e                   	pop    esi
c0022dd2:	5f                   	pop    edi
c0022dd3:	c3                   	ret    

c0022dd4 <Reg::getLine(char*, char*, char*)>:
c0022dd4:	57                   	push   edi
c0022dd5:	56                   	push   esi
c0022dd6:	53                   	push   ebx
c0022dd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022ddb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022ddf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022de3:	57                   	push   edi
c0022de4:	56                   	push   esi
c0022de5:	53                   	push   ebx
c0022de6:	68 52 2b 03 c0       	push   0xc0032b52
c0022deb:	e8 8f fe ff ff       	call   c0022c7f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022df0:	83 c4 10             	add    esp,0x10
c0022df3:	84 c0                	test   al,al
c0022df5:	75 10                	jne    c0022e07 <Reg::getLine(char*, char*, char*)+0x33>
c0022df7:	57                   	push   edi
c0022df8:	56                   	push   esi
c0022df9:	53                   	push   ebx
c0022dfa:	68 77 2b 03 c0       	push   0xc0032b77
c0022dff:	e8 7b fe ff ff       	call   c0022c7f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022e04:	83 c4 10             	add    esp,0x10
c0022e07:	5b                   	pop    ebx
c0022e08:	5e                   	pop    esi
c0022e09:	5f                   	pop    edi
c0022e0a:	c3                   	ret    

c0022e0b <Reg::readInt(char*, char*, int*)>:
c0022e0b:	55                   	push   ebp
c0022e0c:	57                   	push   edi
c0022e0d:	56                   	push   esi
c0022e0e:	53                   	push   ebx
c0022e0f:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022e15:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022e19:	55                   	push   ebp
c0022e1a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022e21:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022e28:	e8 a7 ff ff ff       	call   c0022dd4 <Reg::getLine(char*, char*, char*)>
c0022e2d:	83 c4 10             	add    esp,0x10
c0022e30:	84 c0                	test   al,al
c0022e32:	0f 84 b6 00 00 00    	je     c0022eee <Reg::readInt(char*, char*, int*)+0xe3>
c0022e38:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022e3d:	83 fa 2b             	cmp    edx,0x2b
c0022e40:	74 0c                	je     c0022e4e <Reg::readInt(char*, char*, int*)+0x43>
c0022e42:	83 fa 2d             	cmp    edx,0x2d
c0022e45:	75 0e                	jne    c0022e55 <Reg::readInt(char*, char*, int*)+0x4a>
c0022e47:	ba 01 00 00 00       	mov    edx,0x1
c0022e4c:	eb 0b                	jmp    c0022e59 <Reg::readInt(char*, char*, int*)+0x4e>
c0022e4e:	ba 01 00 00 00       	mov    edx,0x1
c0022e53:	eb 02                	jmp    c0022e57 <Reg::readInt(char*, char*, int*)+0x4c>
c0022e55:	31 d2                	xor    edx,edx
c0022e57:	31 c0                	xor    eax,eax
c0022e59:	be 0a 00 00 00       	mov    esi,0xa
c0022e5e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022e63:	75 21                	jne    c0022e86 <Reg::readInt(char*, char*, int*)+0x7b>
c0022e65:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022e6a:	83 f9 78             	cmp    ecx,0x78
c0022e6d:	75 0a                	jne    c0022e79 <Reg::readInt(char*, char*, int*)+0x6e>
c0022e6f:	83 c2 02             	add    edx,0x2
c0022e72:	be 10 00 00 00       	mov    esi,0x10
c0022e77:	eb 0d                	jmp    c0022e86 <Reg::readInt(char*, char*, int*)+0x7b>
c0022e79:	83 f9 62             	cmp    ecx,0x62
c0022e7c:	75 08                	jne    c0022e86 <Reg::readInt(char*, char*, int*)+0x7b>
c0022e7e:	83 c2 02             	add    edx,0x2
c0022e81:	be 02 00 00 00       	mov    esi,0x2
c0022e86:	01 d5                	add    ebp,edx
c0022e88:	31 d2                	xor    edx,edx
c0022e8a:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022e8e:	83 f9 0d             	cmp    ecx,0xd
c0022e91:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0022e95:	0f 94 c3             	sete   bl
c0022e98:	85 c9                	test   ecx,ecx
c0022e9a:	89 df                	mov    edi,ebx
c0022e9c:	0f 94 c3             	sete   bl
c0022e9f:	09 df                	or     edi,ebx
c0022ea1:	89 fb                	mov    ebx,edi
c0022ea3:	83 e7 01             	and    edi,0x1
c0022ea6:	75 35                	jne    c0022edd <Reg::readInt(char*, char*, int*)+0xd2>
c0022ea8:	0f af d6             	imul   edx,esi
c0022eab:	83 fe 10             	cmp    esi,0x10
c0022eae:	75 26                	jne    c0022ed6 <Reg::readInt(char*, char*, int*)+0xcb>
c0022eb0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022eb4:	83 ef 41             	sub    edi,0x41
c0022eb7:	89 fb                	mov    ebx,edi
c0022eb9:	80 fb 05             	cmp    bl,0x5
c0022ebc:	77 06                	ja     c0022ec4 <Reg::readInt(char*, char*, int*)+0xb9>
c0022ebe:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0022ec2:	eb 16                	jmp    c0022eda <Reg::readInt(char*, char*, int*)+0xcf>
c0022ec4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022ec8:	83 eb 61             	sub    ebx,0x61
c0022ecb:	80 fb 05             	cmp    bl,0x5
c0022ece:	77 06                	ja     c0022ed6 <Reg::readInt(char*, char*, int*)+0xcb>
c0022ed0:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0022ed4:	eb 04                	jmp    c0022eda <Reg::readInt(char*, char*, int*)+0xcf>
c0022ed6:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0022eda:	45                   	inc    ebp
c0022edb:	eb ad                	jmp    c0022e8a <Reg::readInt(char*, char*, int*)+0x7f>
c0022edd:	84 c0                	test   al,al
c0022edf:	74 02                	je     c0022ee3 <Reg::readInt(char*, char*, int*)+0xd8>
c0022ee1:	f7 da                	neg    edx
c0022ee3:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0022eea:	89 10                	mov    DWORD PTR [eax],edx
c0022eec:	88 d8                	mov    al,bl
c0022eee:	81 c4 ec 00 00 00    	add    esp,0xec
c0022ef4:	5b                   	pop    ebx
c0022ef5:	5e                   	pop    esi
c0022ef6:	5f                   	pop    edi
c0022ef7:	5d                   	pop    ebp
c0022ef8:	c3                   	ret    

c0022ef9 <Reg::readString(char*, char*, char*, int)>:
c0022ef9:	57                   	push   edi
c0022efa:	56                   	push   esi
c0022efb:	53                   	push   ebx
c0022efc:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022f02:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022f09:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022f0d:	57                   	push   edi
c0022f0e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022f15:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022f1c:	e8 b3 fe ff ff       	call   c0022dd4 <Reg::getLine(char*, char*, char*)>
c0022f21:	83 c4 10             	add    esp,0x10
c0022f24:	89 c6                	mov    esi,eax
c0022f26:	84 c0                	test   al,al
c0022f28:	74 44                	je     c0022f6e <Reg::readString(char*, char*, char*, int)+0x75>
c0022f2a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022f31:	31 c0                	xor    eax,eax
c0022f33:	4a                   	dec    edx
c0022f34:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022f37:	84 c9                	test   cl,cl
c0022f39:	74 0f                	je     c0022f4a <Reg::readString(char*, char*, char*, int)+0x51>
c0022f3b:	39 c2                	cmp    edx,eax
c0022f3d:	7e 0b                	jle    c0022f4a <Reg::readString(char*, char*, char*, int)+0x51>
c0022f3f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022f42:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022f47:	40                   	inc    eax
c0022f48:	eb ea                	jmp    c0022f34 <Reg::readString(char*, char*, char*, int)+0x3b>
c0022f4a:	83 ec 0c             	sub    esp,0xc
c0022f4d:	53                   	push   ebx
c0022f4e:	e8 1d d6 fd ff       	call   c0000570 <strlen>
c0022f53:	83 c4 10             	add    esp,0x10
c0022f56:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022f5b:	75 11                	jne    c0022f6e <Reg::readString(char*, char*, char*, int)+0x75>
c0022f5d:	83 ec 0c             	sub    esp,0xc
c0022f60:	53                   	push   ebx
c0022f61:	e8 0a d6 fd ff       	call   c0000570 <strlen>
c0022f66:	83 c4 10             	add    esp,0x10
c0022f69:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022f6e:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022f74:	89 f0                	mov    eax,esi
c0022f76:	5b                   	pop    ebx
c0022f77:	5e                   	pop    esi
c0022f78:	5f                   	pop    edi
c0022f79:	c3                   	ret    

c0022f7a <Reg::readBool(char*, char*, bool*)>:
c0022f7a:	83 ec 20             	sub    esp,0x20
c0022f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022f81:	50                   	push   eax
c0022f82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f8a:	e8 7c fe ff ff       	call   c0022e0b <Reg::readInt(char*, char*, int*)>
c0022f8f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022f94:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022f98:	0f 95 02             	setne  BYTE PTR [edx]
c0022f9b:	83 c4 2c             	add    esp,0x2c
c0022f9e:	c3                   	ret    

c0022f9f <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022f9f:	53                   	push   ebx
c0022fa0:	83 ec 1c             	sub    esp,0x1c
c0022fa3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022fa7:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022fab:	50                   	push   eax
c0022fac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fb4:	e8 c1 ff ff ff       	call   c0022f7a <Reg::readBool(char*, char*, bool*)>
c0022fb9:	83 c4 10             	add    esp,0x10
c0022fbc:	84 c0                	test   al,al
c0022fbe:	74 04                	je     c0022fc4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022fc0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0022fc4:	88 d8                	mov    al,bl
c0022fc6:	83 c4 18             	add    esp,0x18
c0022fc9:	5b                   	pop    ebx
c0022fca:	c3                   	ret    

c0022fcb <Reg::readIntWithDefault(char*, char*, int)>:
c0022fcb:	53                   	push   ebx
c0022fcc:	83 ec 1c             	sub    esp,0x1c
c0022fcf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022fd3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022fd7:	50                   	push   eax
c0022fd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fe0:	e8 26 fe ff ff       	call   c0022e0b <Reg::readInt(char*, char*, int*)>
c0022fe5:	83 c4 10             	add    esp,0x10
c0022fe8:	84 c0                	test   al,al
c0022fea:	74 04                	je     c0022ff0 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0022fec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022ff0:	89 d8                	mov    eax,ebx
c0022ff2:	83 c4 18             	add    esp,0x18
c0022ff5:	5b                   	pop    ebx
c0022ff6:	c3                   	ret    

c0022ff7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0022ff7:	57                   	push   edi
c0022ff8:	56                   	push   esi
c0022ff9:	56                   	push   esi
c0022ffa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022ffe:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0023002:	56                   	push   esi
c0023003:	57                   	push   edi
c0023004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002300c:	e8 e8 fe ff ff       	call   c0022ef9 <Reg::readString(char*, char*, char*, int)>
c0023011:	83 c4 10             	add    esp,0x10
c0023014:	84 c0                	test   al,al
c0023016:	75 1a                	jne    c0023032 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0023018:	51                   	push   ecx
c0023019:	56                   	push   esi
c002301a:	6a 00                	push   0x0
c002301c:	57                   	push   edi
c002301d:	e8 ce d4 fd ff       	call   c00004f0 <memset>
c0023022:	8d 4e ff             	lea    ecx,[esi-0x1]
c0023025:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023029:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002302b:	83 c4 10             	add    esp,0x10
c002302e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023032:	89 f8                	mov    eax,edi
c0023034:	5a                   	pop    edx
c0023035:	5e                   	pop    esi
c0023036:	5f                   	pop    edi
c0023037:	c3                   	ret    

c0023038 <SysEject(regs*)>:
c0023038:	83 ec 0c             	sub    esp,0xc
c002303b:	83 ca ff             	or     edx,0xffffffff
c002303e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023042:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023045:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002304a:	83 e9 41             	sub    ecx,0x41
c002304d:	83 f9 19             	cmp    ecx,0x19
c0023050:	77 18                	ja     c002306a <SysEject(regs*)+0x32>
c0023052:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0023059:	85 c9                	test   ecx,ecx
c002305b:	74 0d                	je     c002306a <SysEject(regs*)+0x32>
c002305d:	83 ec 0c             	sub    esp,0xc
c0023060:	51                   	push   ecx
c0023061:	e8 00 96 ff ff       	call   c001c666 <LogicalDisk::eject()>
c0023066:	83 c4 10             	add    esp,0x10
c0023069:	99                   	cdq    
c002306a:	83 c4 0c             	add    esp,0xc
c002306d:	c3                   	ret    

c002306e <SysExit(regs*)>:
c002306e:	83 ec 18             	sub    esp,0x18
c0023071:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023075:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023078:	e8 8f 29 00 00       	call   c0025a0c <terminateTask(int)>
c002307d:	83 c8 ff             	or     eax,0xffffffff
c0023080:	83 c4 1c             	add    esp,0x1c
c0023083:	89 c2                	mov    edx,eax
c0023085:	c3                   	ret    

c0023086 <SysGetCwd(regs*)>:
c0023086:	83 ec 10             	sub    esp,0x10
c0023089:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002308d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0023090:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023093:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023098:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002309b:	e8 78 70 ff ff       	call   c001a118 <Fs::getcwd(Process*, char*, int)>
c00230a0:	83 c4 1c             	add    esp,0x1c
c00230a3:	99                   	cdq    
c00230a4:	c3                   	ret    

c00230a5 <SysGetPID(regs*)>:
c00230a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00230aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00230ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00230af:	99                   	cdq    
c00230b0:	c3                   	ret    

c00230b1 <SysGetRAMData(regs*)>:
c00230b1:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c00230b7:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c00230c1:	99                   	cdq    
c00230c2:	f7 f9                	idiv   ecx
c00230c4:	c1 e0 18             	shl    eax,0x18
c00230c7:	09 c8                	or     eax,ecx
c00230c9:	99                   	cdq    
c00230ca:	c3                   	ret    

c00230cb <SysGetVGAPtr(regs*)>:
c00230cb:	55                   	push   ebp
c00230cc:	57                   	push   edi
c00230cd:	56                   	push   esi
c00230ce:	53                   	push   ebx
c00230cf:	83 ec 18             	sub    esp,0x18
c00230d2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00230d6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00230d9:	e8 fa 23 00 00       	call   c00254d8 <Thr::processFromPID(int)>
c00230de:	83 c4 10             	add    esp,0x10
c00230e1:	89 c1                	mov    ecx,eax
c00230e3:	b8 01 00 00 00       	mov    eax,0x1
c00230e8:	85 c9                	test   ecx,ecx
c00230ea:	74 57                	je     c0023143 <SysGetVGAPtr(regs*)+0x78>
c00230ec:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00230f2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00230f6:	74 0c                	je     c0023104 <SysGetVGAPtr(regs*)+0x39>
c00230f8:	83 ec 0c             	sub    esp,0xc
c00230fb:	55                   	push   ebp
c00230fc:	e8 70 3f ff ff       	call   c0017071 <setActiveTerminal(VgaText*)>
c0023101:	83 c4 10             	add    esp,0x10
c0023104:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023107:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002310a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c002310f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023111:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0023114:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023117:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c002311d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023120:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023123:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0023129:	50                   	push   eax
c002312a:	50                   	push   eax
c002312b:	68 92 2b 03 c0       	push   0xc0032b92
c0023130:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023133:	05 a8 0f 00 00       	add    eax,0xfa8
c0023138:	50                   	push   eax
c0023139:	e8 02 d5 fd ff       	call   c0000640 <strcpy>
c002313e:	83 c4 10             	add    esp,0x10
c0023141:	31 c0                	xor    eax,eax
c0023143:	83 c4 0c             	add    esp,0xc
c0023146:	31 d2                	xor    edx,edx
c0023148:	5b                   	pop    ebx
c0023149:	5e                   	pop    esi
c002314a:	5f                   	pop    edi
c002314b:	5d                   	pop    ebp
c002314c:	c3                   	ret    
c002314d:	66 90                	xchg   ax,ax
c002314f:	90                   	nop

c0023150 <SysKill(regs*)>:
c0023150:	53                   	push   ebx
c0023151:	83 ec 08             	sub    esp,0x8
c0023154:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023158:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c002315c:	75 16                	jne    c0023174 <SysKill(regs*)+0x24>
c002315e:	83 ec 0c             	sub    esp,0xc
c0023161:	68 9c 2b 03 c0       	push   0xc0032b9c
c0023166:	e8 0b d1 ff ff       	call   c0020276 <KePanic(char const*)>
c002316b:	83 c4 10             	add    esp,0x10
c002316e:	e9 89 00 00 00       	jmp    c00231fc <SysKill(regs*)+0xac>
c0023173:	90                   	nop
c0023174:	83 ec 0c             	sub    esp,0xc
c0023177:	68 ec 01 04 c0       	push   0xc00401ec
c002317c:	e8 fb ba 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023181:	8d 76 00             	lea    esi,[esi+0x0]
c0023184:	83 c4 10             	add    esp,0x10
c0023187:	85 c0                	test   eax,eax
c0023189:	74 19                	je     c00231a4 <SysKill(regs*)+0x54>
c002318b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002318e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023191:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023193:	74 33                	je     c00231c8 <SysKill(regs*)+0x78>
c0023195:	52                   	push   edx
c0023196:	52                   	push   edx
c0023197:	50                   	push   eax
c0023198:	68 ec 01 04 c0       	push   0xc00401ec
c002319d:	e8 fa bd 00 00       	call   c002ef9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00231a2:	eb e0                	jmp    c0023184 <SysKill(regs*)+0x34>
c00231a4:	83 ec 0c             	sub    esp,0xc
c00231a7:	68 e0 01 04 c0       	push   0xc00401e0
c00231ac:	e8 cb ba 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00231b1:	8d 76 00             	lea    esi,[esi+0x0]
c00231b4:	83 c4 10             	add    esp,0x10
c00231b7:	85 c0                	test   eax,eax
c00231b9:	74 41                	je     c00231fc <SysKill(regs*)+0xac>
c00231bb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00231be:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00231c1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00231c3:	75 27                	jne    c00231ec <SysKill(regs*)+0x9c>
c00231c5:	8d 76 00             	lea    esi,[esi+0x0]
c00231c8:	51                   	push   ecx
c00231c9:	51                   	push   ecx
c00231ca:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00231cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00231d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00231d5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00231db:	e8 4f d9 ff ff       	call   c0020b2f <KeRaiseSignal(SigHandlerBlock*, int)>
c00231e0:	83 c4 10             	add    esp,0x10
c00231e3:	31 c0                	xor    eax,eax
c00231e5:	31 d2                	xor    edx,edx
c00231e7:	eb 1b                	jmp    c0023204 <SysKill(regs*)+0xb4>
c00231e9:	8d 76 00             	lea    esi,[esi+0x0]
c00231ec:	52                   	push   edx
c00231ed:	52                   	push   edx
c00231ee:	50                   	push   eax
c00231ef:	68 e0 01 04 c0       	push   0xc00401e0
c00231f4:	e8 a3 bd 00 00       	call   c002ef9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00231f9:	eb b9                	jmp    c00231b4 <SysKill(regs*)+0x64>
c00231fb:	90                   	nop
c00231fc:	83 c8 ff             	or     eax,0xffffffff
c00231ff:	89 c2                	mov    edx,eax
c0023201:	8d 76 00             	lea    esi,[esi+0x0]
c0023204:	83 c4 08             	add    esp,0x8
c0023207:	5b                   	pop    ebx
c0023208:	c3                   	ret    

c0023209 <SysLoadDLL(regs*)>:
c0023209:	56                   	push   esi
c002320a:	53                   	push   ebx
c002320b:	31 d2                	xor    edx,edx
c002320d:	51                   	push   ecx
c002320e:	b8 01 00 00 00       	mov    eax,0x1
c0023213:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023217:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c002321b:	0f 84 8c 00 00 00    	je     c00232ad <SysLoadDLL(regs*)+0xa4>
c0023221:	83 ec 0c             	sub    esp,0xc
c0023224:	68 14 01 00 00       	push   0x114
c0023229:	e8 90 31 ff ff       	call   c00163be <malloc>
c002322e:	83 c4 0c             	add    esp,0xc
c0023231:	89 c3                	mov    ebx,eax
c0023233:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023238:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002323b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002323e:	53                   	push   ebx
c002323f:	e8 20 72 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0023244:	83 c4 10             	add    esp,0x10
c0023247:	31 d2                	xor    edx,edx
c0023249:	b8 02 00 00 00       	mov    eax,0x2
c002324e:	85 db                	test   ebx,ebx
c0023250:	74 5b                	je     c00232ad <SysLoadDLL(regs*)+0xa4>
c0023252:	83 ec 0c             	sub    esp,0xc
c0023255:	53                   	push   ebx
c0023256:	e8 eb 74 ff ff       	call   c001a746 <File::exists()>
c002325b:	83 c4 10             	add    esp,0x10
c002325e:	84 c0                	test   al,al
c0023260:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023262:	75 11                	jne    c0023275 <SysLoadDLL(regs*)+0x6c>
c0023264:	83 ec 0c             	sub    esp,0xc
c0023267:	53                   	push   ebx
c0023268:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002326b:	83 c4 10             	add    esp,0x10
c002326e:	b8 03 00 00 00       	mov    eax,0x3
c0023273:	eb 36                	jmp    c00232ab <SysLoadDLL(regs*)+0xa2>
c0023275:	83 ec 0c             	sub    esp,0xc
c0023278:	53                   	push   ebx
c0023279:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002327c:	58                   	pop    eax
c002327d:	5a                   	pop    edx
c002327e:	6a 00                	push   0x0
c0023280:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023283:	e8 81 15 00 00       	call   c0024809 <Thr::loadDLL(char const*, bool)>
c0023288:	83 c4 10             	add    esp,0x10
c002328b:	89 c1                	mov    ecx,eax
c002328d:	31 d2                	xor    edx,edx
c002328f:	b8 04 00 00 00       	mov    eax,0x4
c0023294:	85 c9                	test   ecx,ecx
c0023296:	74 15                	je     c00232ad <SysLoadDLL(regs*)+0xa4>
c0023298:	53                   	push   ebx
c0023299:	53                   	push   ebx
c002329a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00232a0:	51                   	push   ecx
c00232a1:	e8 b5 17 00 00       	call   c0024a5b <Thr::executeDLL(unsigned long, void*)>
c00232a6:	83 c4 10             	add    esp,0x10
c00232a9:	31 c0                	xor    eax,eax
c00232ab:	31 d2                	xor    edx,edx
c00232ad:	59                   	pop    ecx
c00232ae:	5b                   	pop    ebx
c00232af:	5e                   	pop    esi
c00232b0:	c3                   	ret    

c00232b1 <SysRead(regs*)>:
c00232b1:	57                   	push   edi
c00232b2:	56                   	push   esi
c00232b3:	53                   	push   ebx
c00232b4:	83 ec 10             	sub    esp,0x10
c00232b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00232bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00232be:	83 f8 02             	cmp    eax,0x2
c00232c1:	77 10                	ja     c00232d3 <SysRead(regs*)+0x22>
c00232c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00232cb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00232d1:	eb 0e                	jmp    c00232e1 <SysRead(regs*)+0x30>
c00232d3:	83 ec 0c             	sub    esp,0xc
c00232d6:	50                   	push   eax
c00232d7:	e8 ef 4a ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c00232dc:	83 c4 10             	add    esp,0x10
c00232df:	89 c1                	mov    ecx,eax
c00232e1:	83 c8 ff             	or     eax,0xffffffff
c00232e4:	85 c9                	test   ecx,ecx
c00232e6:	89 c2                	mov    edx,eax
c00232e8:	74 28                	je     c0023312 <SysRead(regs*)+0x61>
c00232ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00232f2:	31 ff                	xor    edi,edi
c00232f4:	83 ec 0c             	sub    esp,0xc
c00232f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00232f9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00232fd:	52                   	push   edx
c00232fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023301:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023304:	57                   	push   edi
c0023305:	56                   	push   esi
c0023306:	51                   	push   ecx
c0023307:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002330a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002330e:	83 c4 20             	add    esp,0x20
c0023311:	99                   	cdq    
c0023312:	83 c4 10             	add    esp,0x10
c0023315:	5b                   	pop    ebx
c0023316:	5e                   	pop    esi
c0023317:	5f                   	pop    edi
c0023318:	c3                   	ret    

c0023319 <SysRegisterSignal(regs*)>:
c0023319:	83 ec 18             	sub    esp,0x18
c002331c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023320:	6a 00                	push   0x0
c0023322:	6a 00                	push   0x0
c0023324:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023327:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002332a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002332f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023332:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023338:	e8 bc d7 ff ff       	call   c0020af9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c002333d:	83 c4 2c             	add    esp,0x2c
c0023340:	99                   	cdq    
c0023341:	c3                   	ret    

c0023342 <SysRegistryGetTypeFromPath(regs*)>:
c0023342:	57                   	push   edi
c0023343:	56                   	push   esi
c0023344:	53                   	push   ebx
c0023345:	81 ec 38 01 00 00    	sub    esp,0x138
c002334b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0023352:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023355:	68 bd 2b 03 c0       	push   0xc0032bbd
c002335a:	e8 fe 5e ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002335f:	5a                   	pop    edx
c0023360:	59                   	pop    ecx
c0023361:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023364:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023367:	e8 4c f6 ff ff       	call   c00229b8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c002336c:	5f                   	pop    edi
c002336d:	89 c6                	mov    esi,eax
c002336f:	5a                   	pop    edx
c0023370:	50                   	push   eax
c0023371:	68 dd 2b 03 c0       	push   0xc0032bdd
c0023376:	e8 e2 5e ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002337b:	83 c4 10             	add    esp,0x10
c002337e:	85 f6                	test   esi,esi
c0023380:	74 28                	je     c00233aa <SysRegistryGetTypeFromPath(regs*)+0x68>
c0023382:	50                   	push   eax
c0023383:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023387:	57                   	push   edi
c0023388:	56                   	push   esi
c0023389:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002338c:	e8 0b f2 ff ff       	call   c002259c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023391:	83 c4 0c             	add    esp,0xc
c0023394:	89 c3                	mov    ebx,eax
c0023396:	57                   	push   edi
c0023397:	50                   	push   eax
c0023398:	68 e5 2b 03 c0       	push   0xc0032be5
c002339d:	e8 bb 5e ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00233a2:	89 d8                	mov    eax,ebx
c00233a4:	83 c4 10             	add    esp,0x10
c00233a7:	99                   	cdq    
c00233a8:	eb 05                	jmp    c00233af <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00233aa:	83 c8 ff             	or     eax,0xffffffff
c00233ad:	89 c2                	mov    edx,eax
c00233af:	81 c4 30 01 00 00    	add    esp,0x130
c00233b5:	5b                   	pop    ebx
c00233b6:	5e                   	pop    esi
c00233b7:	5f                   	pop    edi
c00233b8:	c3                   	ret    

c00233b9 <SysRegistryReadExtent(regs*)>:
c00233b9:	83 ec 1c             	sub    esp,0x1c
c00233bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00233c0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00233c3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00233c6:	85 c0                	test   eax,eax
c00233c8:	79 1f                	jns    c00233e9 <SysRegistryReadExtent(regs*)+0x30>
c00233ca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00233cf:	52                   	push   edx
c00233d0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00233d4:	52                   	push   edx
c00233d5:	50                   	push   eax
c00233d6:	51                   	push   ecx
c00233d7:	e8 b2 f0 ff ff       	call   c002248e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00233dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00233e4:	83 c4 10             	add    esp,0x10
c00233e7:	eb 14                	jmp    c00233fd <SysRegistryReadExtent(regs*)+0x44>
c00233e9:	83 ec 04             	sub    esp,0x4
c00233ec:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00233ef:	50                   	push   eax
c00233f0:	51                   	push   ecx
c00233f1:	e8 32 eb ff ff       	call   c0021f28 <CmGetString(Reghive_Tag*, int, char*)>
c00233f6:	83 c4 10             	add    esp,0x10
c00233f9:	31 c0                	xor    eax,eax
c00233fb:	31 d2                	xor    edx,edx
c00233fd:	83 c4 1c             	add    esp,0x1c
c0023400:	c3                   	ret    

c0023401 <SysRegistryPathToExtentLookup(regs*)>:
c0023401:	53                   	push   ebx
c0023402:	83 ec 10             	sub    esp,0x10
c0023405:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023409:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002340c:	68 fb 2b 03 c0       	push   0xc0032bfb
c0023411:	e8 47 5e ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0023416:	58                   	pop    eax
c0023417:	5a                   	pop    edx
c0023418:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002341b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002341e:	e8 95 f5 ff ff       	call   c00229b8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023423:	83 c4 18             	add    esp,0x18
c0023426:	99                   	cdq    
c0023427:	5b                   	pop    ebx
c0023428:	c3                   	ret    

c0023429 <SysRegistryEnterDirectory(regs*)>:
c0023429:	53                   	push   ebx
c002342a:	83 ec 10             	sub    esp,0x10
c002342d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023431:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023434:	68 1e 2c 03 c0       	push   0xc0032c1e
c0023439:	e8 1f 5e ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002343e:	58                   	pop    eax
c002343f:	5a                   	pop    edx
c0023440:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023443:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023446:	e8 54 eb ff ff       	call   c0021f9f <CmEnterDirectory(Reghive_Tag*, int)>
c002344b:	83 c4 18             	add    esp,0x18
c002344e:	99                   	cdq    
c002344f:	5b                   	pop    ebx
c0023450:	c3                   	ret    

c0023451 <SysRegistryGetNext(regs*)>:
c0023451:	53                   	push   ebx
c0023452:	83 ec 10             	sub    esp,0x10
c0023455:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023459:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002345c:	68 3c 2c 03 c0       	push   0xc0032c3c
c0023461:	e8 f7 5d ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0023466:	58                   	pop    eax
c0023467:	5a                   	pop    edx
c0023468:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002346b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002346e:	e8 6b eb ff ff       	call   c0021fde <CmGetNext(Reghive_Tag*, int)>
c0023473:	83 c4 18             	add    esp,0x18
c0023476:	99                   	cdq    
c0023477:	5b                   	pop    ebx
c0023478:	c3                   	ret    

c0023479 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023479:	57                   	push   edi
c002347a:	56                   	push   esi
c002347b:	53                   	push   ebx
c002347c:	81 ec 34 01 00 00    	sub    esp,0x134
c0023482:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0023489:	8d 7c 24 08          	lea    edi,[esp+0x8]
c002348d:	57                   	push   edi
c002348e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0023491:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023494:	e8 03 f1 ff ff       	call   c002259c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023499:	89 c3                	mov    ebx,eax
c002349b:	58                   	pop    eax
c002349c:	5a                   	pop    edx
c002349d:	57                   	push   edi
c002349e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00234a1:	e8 9a d1 fd ff       	call   c0000640 <strcpy>
c00234a6:	89 d8                	mov    eax,ebx
c00234a8:	81 c4 40 01 00 00    	add    esp,0x140
c00234ae:	99                   	cdq    
c00234af:	5b                   	pop    ebx
c00234b0:	5e                   	pop    esi
c00234b1:	5f                   	pop    edi
c00234b2:	c3                   	ret    

c00234b3 <SysRegistryOpen(regs*)>:
c00234b3:	83 ec 18             	sub    esp,0x18
c00234b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00234ba:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00234bd:	e8 f6 e8 ff ff       	call   c0021db8 <CmOpen(char const*)>
c00234c2:	83 c4 1c             	add    esp,0x1c
c00234c5:	99                   	cdq    
c00234c6:	c3                   	ret    

c00234c7 <SysRegistryClose(regs*)>:
c00234c7:	83 ec 18             	sub    esp,0x18
c00234ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00234ce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00234d1:	e8 00 ea ff ff       	call   c0021ed6 <CmClose(Reghive_Tag*)>
c00234d6:	31 c0                	xor    eax,eax
c00234d8:	31 d2                	xor    edx,edx
c00234da:	83 c4 1c             	add    esp,0x1c
c00234dd:	c3                   	ret    

c00234de <SysSbrk(regs*)>:
c00234de:	56                   	push   esi
c00234df:	53                   	push   ebx
c00234e0:	50                   	push   eax
c00234e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00234ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00234ed:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00234f0:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00234f6:	85 db                	test   ebx,ebx
c00234f8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00234fb:	74 02                	je     c00234ff <SysSbrk(regs*)+0x21>
c00234fd:	79 06                	jns    c0023505 <SysSbrk(regs*)+0x27>
c00234ff:	89 f0                	mov    eax,esi
c0023501:	31 d2                	xor    edx,edx
c0023503:	eb 2a                	jmp    c002352f <SysSbrk(regs*)+0x51>
c0023505:	83 c8 ff             	or     eax,0xffffffff
c0023508:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c002350e:	89 c2                	mov    edx,eax
c0023510:	77 1d                	ja     c002352f <SysSbrk(regs*)+0x51>
c0023512:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0023518:	50                   	push   eax
c0023519:	c1 ea 0c             	shr    edx,0xc
c002351c:	68 07 0c 00 00       	push   0xc07
c0023521:	52                   	push   edx
c0023522:	51                   	push   ecx
c0023523:	e8 14 52 ff ff       	call   c001873c <VAS::allocatePages(int, int)>
c0023528:	89 f0                	mov    eax,esi
c002352a:	31 d2                	xor    edx,edx
c002352c:	83 c4 10             	add    esp,0x10
c002352f:	59                   	pop    ecx
c0023530:	5b                   	pop    ebx
c0023531:	5e                   	pop    esi
c0023532:	c3                   	ret    

c0023533 <SysSetCwd(regs*)>:
c0023533:	83 ec 14             	sub    esp,0x14
c0023536:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002353a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002353d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023542:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023545:	e8 9b 72 ff ff       	call   c001a7e5 <Fs::setcwd(Process*, char*)>
c002354a:	83 c4 1c             	add    esp,0x1c
c002354d:	99                   	cdq    
c002354e:	c3                   	ret    

c002354f <SysSetTime(regs*)>:
c002354f:	55                   	push   ebp
c0023550:	31 c9                	xor    ecx,ecx
c0023552:	57                   	push   edi
c0023553:	bd 0c 00 00 00       	mov    ebp,0xc
c0023558:	56                   	push   esi
c0023559:	53                   	push   ebx
c002355a:	31 db                	xor    ebx,ebx
c002355c:	83 ec 10             	sub    esp,0x10
c002355f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023563:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0023566:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023569:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c002356c:	89 c2                	mov    edx,eax
c002356e:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023574:	83 e2 1f             	and    edx,0x1f
c0023577:	c1 e7 10             	shl    edi,0x10
c002357a:	42                   	inc    edx
c002357b:	c1 e8 05             	shr    eax,0x5
c002357e:	88 d1                	mov    cl,dl
c0023580:	31 d2                	xor    edx,edx
c0023582:	f7 f5                	div    ebp
c0023584:	89 dd                	mov    ebp,ebx
c0023586:	88 d5                	mov    ch,dl
c0023588:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c002358e:	0f b7 c1             	movzx  eax,cx
c0023591:	31 d2                	xor    edx,edx
c0023593:	09 f8                	or     eax,edi
c0023595:	bf 3c 00 00 00       	mov    edi,0x3c
c002359a:	89 c1                	mov    ecx,eax
c002359c:	89 f0                	mov    eax,esi
c002359e:	f7 f7                	div    edi
c00235a0:	c1 e2 10             	shl    edx,0x10
c00235a3:	09 d5                	or     ebp,edx
c00235a5:	31 d2                	xor    edx,edx
c00235a7:	89 eb                	mov    ebx,ebp
c00235a9:	f7 f7                	div    edi
c00235ab:	bf 10 0e 00 00       	mov    edi,0xe10
c00235b0:	88 d7                	mov    bh,dl
c00235b2:	89 f0                	mov    eax,esi
c00235b4:	31 d2                	xor    edx,edx
c00235b6:	f7 f7                	div    edi
c00235b8:	bf 18 00 00 00       	mov    edi,0x18
c00235bd:	31 d2                	xor    edx,edx
c00235bf:	f7 f7                	div    edi
c00235c1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00235c6:	88 d3                	mov    bl,dl
c00235c8:	53                   	push   ebx
c00235c9:	51                   	push   ecx
c00235ca:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00235d0:	e8 1d 7a ff ff       	call   c001aff2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00235d5:	83 c4 1c             	add    esp,0x1c
c00235d8:	83 f0 01             	xor    eax,0x1
c00235db:	5b                   	pop    ebx
c00235dc:	0f b6 c0             	movzx  eax,al
c00235df:	5e                   	pop    esi
c00235e0:	31 d2                	xor    edx,edx
c00235e2:	5f                   	pop    edi
c00235e3:	5d                   	pop    ebp
c00235e4:	c3                   	ret    

c00235e5 <SysSymlink(regs*)>:
c00235e5:	56                   	push   esi
c00235e6:	83 c8 ff             	or     eax,0xffffffff
c00235e9:	53                   	push   ebx
c00235ea:	89 c2                	mov    edx,eax
c00235ec:	81 ec 34 02 00 00    	sub    esp,0x234
c00235f2:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00235f9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00235fd:	74 50                	je     c002364f <SysSymlink(regs*)+0x6a>
c00235ff:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0023602:	85 c9                	test   ecx,ecx
c0023604:	74 49                	je     c002364f <SysSymlink(regs*)+0x6a>
c0023606:	6a 01                	push   0x1
c0023608:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002360d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023610:	05 0c 01 00 00       	add    eax,0x10c
c0023615:	50                   	push   eax
c0023616:	51                   	push   ecx
c0023617:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002361b:	56                   	push   esi
c002361c:	e8 4b 6b ff ff       	call   c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023621:	6a 01                	push   0x1
c0023623:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023628:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002362b:	05 0c 01 00 00       	add    eax,0x10c
c0023630:	50                   	push   eax
c0023631:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023634:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002363b:	53                   	push   ebx
c002363c:	e8 2b 6b ff ff       	call   c001a16c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023641:	83 c4 18             	add    esp,0x18
c0023644:	56                   	push   esi
c0023645:	53                   	push   ebx
c0023646:	e8 30 67 ff ff       	call   c0019d7b <KeCreateSymlink(char const*, char const*)>
c002364b:	83 c4 10             	add    esp,0x10
c002364e:	99                   	cdq    
c002364f:	81 c4 34 02 00 00    	add    esp,0x234
c0023655:	5b                   	pop    ebx
c0023656:	5e                   	pop    esi
c0023657:	c3                   	ret    

c0023658 <SysTimezone(regs*)>:
c0023658:	53                   	push   ebx
c0023659:	83 ec 08             	sub    esp,0x8
c002365c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023660:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023664:	75 17                	jne    c002367d <SysTimezone(regs*)+0x25>
c0023666:	83 ec 0c             	sub    esp,0xc
c0023669:	68 53 2c 03 c0       	push   0xc0032c53
c002366e:	e8 ea 5b ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0023673:	83 c8 ff             	or     eax,0xffffffff
c0023676:	83 c4 10             	add    esp,0x10
c0023679:	89 c2                	mov    edx,eax
c002367b:	eb 20                	jmp    c002369d <SysTimezone(regs*)+0x45>
c002367d:	83 ec 0c             	sub    esp,0xc
c0023680:	68 68 2c 03 c0       	push   0xc0032c68
c0023685:	e8 d3 5b ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002368a:	58                   	pop    eax
c002368b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002368e:	e8 c9 76 ff ff       	call   c001ad5c <User::loadClockSettings(int)>
c0023693:	83 c4 10             	add    esp,0x10
c0023696:	b8 01 00 00 00       	mov    eax,0x1
c002369b:	31 d2                	xor    edx,edx
c002369d:	83 c4 08             	add    esp,0x8
c00236a0:	5b                   	pop    ebx
c00236a1:	c3                   	ret    

c00236a2 <SysTruncate(regs*)>:
c00236a2:	55                   	push   ebp
c00236a3:	57                   	push   edi
c00236a4:	31 ff                	xor    edi,edi
c00236a6:	56                   	push   esi
c00236a7:	53                   	push   ebx
c00236a8:	83 ec 0c             	sub    esp,0xc
c00236ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00236af:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00236b2:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00236b5:	89 ce                	mov    esi,ecx
c00236b7:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00236bb:	0f 84 9a 00 00 00    	je     c002375b <SysTruncate(regs*)+0xb9>
c00236c1:	83 ec 0c             	sub    esp,0xc
c00236c4:	68 14 01 00 00       	push   0x114
c00236c9:	e8 f0 2c ff ff       	call   c00163be <malloc>
c00236ce:	83 c4 0c             	add    esp,0xc
c00236d1:	89 c3                	mov    ebx,eax
c00236d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236d8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00236db:	55                   	push   ebp
c00236dc:	53                   	push   ebx
c00236dd:	e8 82 6d ff ff       	call   c001a464 <File::File(char const*, Process*)>
c00236e2:	83 c4 10             	add    esp,0x10
c00236e5:	31 d2                	xor    edx,edx
c00236e7:	b8 03 00 00 00       	mov    eax,0x3
c00236ec:	85 db                	test   ebx,ebx
c00236ee:	0f 84 a2 00 00 00    	je     c0023796 <SysTruncate(regs*)+0xf4>
c00236f4:	51                   	push   ecx
c00236f5:	51                   	push   ecx
c00236f6:	6a 02                	push   0x2
c00236f8:	53                   	push   ebx
c00236f9:	e8 84 6d ff ff       	call   c001a482 <File::open(FileOpenMode)>
c00236fe:	83 c4 10             	add    esp,0x10
c0023701:	85 c0                	test   eax,eax
c0023703:	74 13                	je     c0023718 <SysTruncate(regs*)+0x76>
c0023705:	83 ec 0c             	sub    esp,0xc
c0023708:	8b 03                	mov    eax,DWORD PTR [ebx]
c002370a:	53                   	push   ebx
c002370b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002370e:	83 c4 10             	add    esp,0x10
c0023711:	b8 04 00 00 00       	mov    eax,0x4
c0023716:	eb 7c                	jmp    c0023794 <SysTruncate(regs*)+0xf2>
c0023718:	52                   	push   edx
c0023719:	57                   	push   edi
c002371a:	56                   	push   esi
c002371b:	53                   	push   ebx
c002371c:	e8 75 6e ff ff       	call   c001a596 <File::truncate(unsigned long long)>
c0023721:	83 c4 10             	add    esp,0x10
c0023724:	85 c0                	test   eax,eax
c0023726:	74 1b                	je     c0023743 <SysTruncate(regs*)+0xa1>
c0023728:	83 ec 0c             	sub    esp,0xc
c002372b:	53                   	push   ebx
c002372c:	e8 af 6d ff ff       	call   c001a4e0 <File::close()>
c0023731:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023733:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023736:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023739:	83 c4 10             	add    esp,0x10
c002373c:	b8 05 00 00 00       	mov    eax,0x5
c0023741:	eb 51                	jmp    c0023794 <SysTruncate(regs*)+0xf2>
c0023743:	83 ec 0c             	sub    esp,0xc
c0023746:	53                   	push   ebx
c0023747:	e8 94 6d ff ff       	call   c001a4e0 <File::close()>
c002374c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002374e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023751:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023754:	83 c4 10             	add    esp,0x10
c0023757:	31 c0                	xor    eax,eax
c0023759:	eb 39                	jmp    c0023794 <SysTruncate(regs*)+0xf2>
c002375b:	31 d2                	xor    edx,edx
c002375d:	b8 01 00 00 00       	mov    eax,0x1
c0023762:	83 fd 02             	cmp    ebp,0x2
c0023765:	7e 2f                	jle    c0023796 <SysTruncate(regs*)+0xf4>
c0023767:	83 ec 0c             	sub    esp,0xc
c002376a:	51                   	push   ecx
c002376b:	e8 5b 46 ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c0023770:	83 c4 10             	add    esp,0x10
c0023773:	89 c1                	mov    ecx,eax
c0023775:	31 d2                	xor    edx,edx
c0023777:	b8 02 00 00 00       	mov    eax,0x2
c002377c:	85 c9                	test   ecx,ecx
c002377e:	74 16                	je     c0023796 <SysTruncate(regs*)+0xf4>
c0023780:	50                   	push   eax
c0023781:	57                   	push   edi
c0023782:	56                   	push   esi
c0023783:	51                   	push   ecx
c0023784:	e8 0d 6e ff ff       	call   c001a596 <File::truncate(unsigned long long)>
c0023789:	83 c4 10             	add    esp,0x10
c002378c:	85 c0                	test   eax,eax
c002378e:	0f 95 c0             	setne  al
c0023791:	0f b6 c0             	movzx  eax,al
c0023794:	31 d2                	xor    edx,edx
c0023796:	83 c4 0c             	add    esp,0xc
c0023799:	5b                   	pop    ebx
c002379a:	5e                   	pop    esi
c002379b:	5f                   	pop    edi
c002379c:	5d                   	pop    ebp
c002379d:	c3                   	ret    

c002379e <SysWrite(regs*)>:
c002379e:	57                   	push   edi
c002379f:	56                   	push   esi
c00237a0:	53                   	push   ebx
c00237a1:	83 ec 10             	sub    esp,0x10
c00237a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00237a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00237ab:	83 f8 02             	cmp    eax,0x2
c00237ae:	77 10                	ja     c00237c0 <SysWrite(regs*)+0x22>
c00237b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00237b8:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00237be:	eb 0e                	jmp    c00237ce <SysWrite(regs*)+0x30>
c00237c0:	83 ec 0c             	sub    esp,0xc
c00237c3:	50                   	push   eax
c00237c4:	e8 02 46 ff ff       	call   c0017dcb <KeGetFileFromDescriptor(int)>
c00237c9:	83 c4 10             	add    esp,0x10
c00237cc:	89 c1                	mov    ecx,eax
c00237ce:	83 c8 ff             	or     eax,0xffffffff
c00237d1:	85 c9                	test   ecx,ecx
c00237d3:	89 c2                	mov    edx,eax
c00237d5:	74 28                	je     c00237ff <SysWrite(regs*)+0x61>
c00237d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00237df:	31 ff                	xor    edi,edi
c00237e1:	83 ec 0c             	sub    esp,0xc
c00237e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00237e6:	8d 54 24 18          	lea    edx,[esp+0x18]
c00237ea:	52                   	push   edx
c00237eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00237ee:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00237f1:	57                   	push   edi
c00237f2:	56                   	push   esi
c00237f3:	51                   	push   ecx
c00237f4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00237f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00237fb:	83 c4 20             	add    esp,0x20
c00237fe:	99                   	cdq    
c00237ff:	83 c4 10             	add    esp,0x10
c0023802:	5b                   	pop    ebx
c0023803:	5e                   	pop    esi
c0023804:	5f                   	pop    edi
c0023805:	c3                   	ret    

c0023806 <SysWsbe(regs*)>:
c0023806:	57                   	push   edi
c0023807:	b9 0b 00 00 00       	mov    ecx,0xb
c002380c:	56                   	push   esi
c002380d:	be a7 2c 03 c0       	mov    esi,0xc0032ca7
c0023812:	53                   	push   ebx
c0023813:	83 ec 30             	sub    esp,0x30
c0023816:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002381a:	fc                   	cld    
c002381b:	83 ec 0c             	sub    esp,0xc
c002381e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023820:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023824:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023829:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002382c:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023832:	8b 06                	mov    eax,DWORD PTR [esi]
c0023834:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023837:	57                   	push   edi
c0023838:	e8 33 cd fd ff       	call   c0000570 <strlen>
c002383d:	5a                   	pop    edx
c002383e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023842:	52                   	push   edx
c0023843:	31 d2                	xor    edx,edx
c0023845:	57                   	push   edi
c0023846:	52                   	push   edx
c0023847:	50                   	push   eax
c0023848:	56                   	push   esi
c0023849:	ff d3                	call   ebx
c002384b:	83 c4 14             	add    esp,0x14
c002384e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023852:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023855:	e8 b2 21 00 00       	call   c0025a0c <terminateTask(int)>
c002385a:	83 c4 40             	add    esp,0x40
c002385d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023862:	5b                   	pop    ebx
c0023863:	31 d2                	xor    edx,edx
c0023865:	5e                   	pop    esi
c0023866:	5f                   	pop    edi
c0023867:	c3                   	ret    

c0023868 <SysYield(regs*)>:
c0023868:	83 ec 0c             	sub    esp,0xc
c002386b:	fa                   	cli    
c002386c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023872:	e8 15 1a 00 00       	call   c002528c <schedule()>
c0023877:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002387c:	48                   	dec    eax
c002387d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023882:	75 01                	jne    c0023885 <SysYield(regs*)+0x1d>
c0023884:	fb                   	sti    
c0023885:	31 c0                	xor    eax,eax
c0023887:	31 d2                	xor    edx,edx
c0023889:	83 c4 0c             	add    esp,0xc
c002388c:	c3                   	ret    

c002388d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c002388d:	55                   	push   ebp
c002388e:	57                   	push   edi
c002388f:	56                   	push   esi
c0023890:	53                   	push   ebx
c0023891:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023897:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c002389f:	0f 95 c0             	setne  al
c00238a2:	31 d2                	xor    edx,edx
c00238a4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00238ac:	0f 94 c2             	sete   dl
c00238af:	85 c2                	test   edx,eax
c00238b1:	74 34                	je     c00238e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00238b3:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00238be:	74 27                	je     c00238e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00238c0:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00238c7:	05 00 10 00 00       	add    eax,0x1000
c00238cc:	89 c1                	mov    ecx,eax
c00238ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00238d3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00238d9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00238e0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00238e7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00238ee:	83 ec 0c             	sub    esp,0xc
c00238f1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00238f7:	6a 01                	push   0x1
c00238f9:	e8 27 46 ff ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c00238fe:	83 c4 10             	add    esp,0x10
c0023901:	89 c3                	mov    ebx,eax
c0023903:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023909:	0f 86 25 01 00 00    	jbe    c0023a34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c002390f:	c1 ee 0c             	shr    esi,0xc
c0023912:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023919:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002391d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023925:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c002392c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023930:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023937:	29 ef                	sub    edi,ebp
c0023939:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c002393d:	0f 83 f8 00 00 00    	jae    c0023a3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0023943:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023949:	76 05                	jbe    c0023950 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c002394b:	bf 00 10 00 00       	mov    edi,0x1000
c0023950:	83 ec 0c             	sub    esp,0xc
c0023953:	31 d2                	xor    edx,edx
c0023955:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c002395c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002395e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023962:	50                   	push   eax
c0023963:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023967:	56                   	push   esi
c0023968:	52                   	push   edx
c0023969:	57                   	push   edi
c002396a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023971:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023974:	83 c4 20             	add    esp,0x20
c0023977:	85 c0                	test   eax,eax
c0023979:	75 06                	jne    c0023981 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c002397b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c002397f:	74 13                	je     c0023994 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023981:	83 ec 0c             	sub    esp,0xc
c0023984:	53                   	push   ebx
c0023985:	e8 b9 48 ff ff       	call   c0018243 <Virt::freeKernelVirtualPages(unsigned long)>
c002398a:	83 c4 10             	add    esp,0x10
c002398d:	31 c0                	xor    eax,eax
c002398f:	e9 7c 01 00 00       	jmp    c0023b10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0023994:	fa                   	cli    
c0023995:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002399b:	e8 37 2d ff ff       	call   c00166d7 <Phys::allocatePage()>
c00239a0:	6a 07                	push   0x7
c00239a2:	89 c7                	mov    edi,eax
c00239a4:	53                   	push   ebx
c00239a5:	50                   	push   eax
c00239a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239ae:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239b4:	e8 7f 4c ff ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c00239b9:	83 c4 0c             	add    esp,0xc
c00239bc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00239c3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239c9:	6a 00                	push   0x0
c00239cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239d3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239d9:	e8 c0 4a ff ff       	call   c001849e <VAS::mapOtherVASIn(bool, VAS*)>
c00239de:	58                   	pop    eax
c00239df:	5a                   	pop    edx
c00239e0:	68 07 0c 00 00       	push   0xc07
c00239e5:	55                   	push   ebp
c00239e6:	57                   	push   edi
c00239e7:	89 df                	mov    edi,ebx
c00239e9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00239f0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239f6:	6a 00                	push   0x0
c00239f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a00:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a06:	e8 7f 4e ff ff       	call   c001888a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023a0b:	b9 00 10 00 00       	mov    ecx,0x1000
c0023a10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023a12:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023a17:	83 c4 20             	add    esp,0x20
c0023a1a:	48                   	dec    eax
c0023a1b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023a20:	85 c0                	test   eax,eax
c0023a22:	75 01                	jne    c0023a25 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0023a24:	fb                   	sti    
c0023a25:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023a2b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023a2f:	e9 f1 fe ff ff       	jmp    c0023925 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0023a34:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023a3b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023a42:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023a48:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023a4e:	0f 86 ae 00 00 00    	jbe    c0023b02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023a54:	fa                   	cli    
c0023a55:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023a5b:	c1 ee 0c             	shr    esi,0xc
c0023a5e:	51                   	push   ecx
c0023a5f:	31 ff                	xor    edi,edi
c0023a61:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023a68:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a6e:	6a 00                	push   0x0
c0023a70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a78:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a7e:	e8 1b 4a ff ff       	call   c001849e <VAS::mapOtherVASIn(bool, VAS*)>
c0023a83:	83 c4 10             	add    esp,0x10
c0023a86:	e8 4c 2c ff ff       	call   c00166d7 <Phys::allocatePage()>
c0023a8b:	47                   	inc    edi
c0023a8c:	6a 07                	push   0x7
c0023a8e:	53                   	push   ebx
c0023a8f:	50                   	push   eax
c0023a90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023a94:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023a9a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023a9d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023aa3:	e8 90 4b ff ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023aa8:	58                   	pop    eax
c0023aa9:	5a                   	pop    edx
c0023aaa:	68 07 0c 00 00       	push   0xc07
c0023aaf:	55                   	push   ebp
c0023ab0:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023ab6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023aba:	50                   	push   eax
c0023abb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023ac2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ac8:	6a 00                	push   0x0
c0023aca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023acf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023ad2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ad8:	e8 ad 4d ff ff       	call   c001888a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023add:	83 c4 1c             	add    esp,0x1c
c0023ae0:	68 00 10 00 00       	push   0x1000
c0023ae5:	6a 00                	push   0x0
c0023ae7:	53                   	push   ebx
c0023ae8:	e8 03 ca fd ff       	call   c00004f0 <memset>
c0023aed:	83 c4 10             	add    esp,0x10
c0023af0:	39 fe                	cmp    esi,edi
c0023af2:	77 92                	ja     c0023a86 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0023af4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023af9:	48                   	dec    eax
c0023afa:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023aff:	75 01                	jne    c0023b02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023b01:	fb                   	sti    
c0023b02:	83 ec 0c             	sub    esp,0xc
c0023b05:	53                   	push   ebx
c0023b06:	e8 38 47 ff ff       	call   c0018243 <Virt::freeKernelVirtualPages(unsigned long)>
c0023b0b:	83 c4 10             	add    esp,0x10
c0023b0e:	b0 01                	mov    al,0x1
c0023b10:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023b16:	5b                   	pop    ebx
c0023b17:	5e                   	pop    esi
c0023b18:	5f                   	pop    edi
c0023b19:	5d                   	pop    ebp
c0023b1a:	c3                   	ret    

c0023b1b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023b1b:	55                   	push   ebp
c0023b1c:	57                   	push   edi
c0023b1d:	56                   	push   esi
c0023b1e:	53                   	push   ebx
c0023b1f:	83 ec 48             	sub    esp,0x48
c0023b22:	68 14 01 00 00       	push   0x114
c0023b27:	e8 92 28 ff ff       	call   c00163be <malloc>
c0023b2c:	83 c4 0c             	add    esp,0xc
c0023b2f:	89 c6                	mov    esi,eax
c0023b31:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023b35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023b39:	50                   	push   eax
c0023b3a:	e8 25 69 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0023b3f:	58                   	pop    eax
c0023b40:	5a                   	pop    edx
c0023b41:	6a 01                	push   0x1
c0023b43:	56                   	push   esi
c0023b44:	e8 39 69 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c0023b49:	83 c4 10             	add    esp,0x10
c0023b4c:	85 c0                	test   eax,eax
c0023b4e:	0f 85 43 01 00 00    	jne    c0023c97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b54:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023b5c:	83 ec 0c             	sub    esp,0xc
c0023b5f:	6a 34                	push   0x34
c0023b61:	e8 58 28 ff ff       	call   c00163be <malloc>
c0023b66:	89 c3                	mov    ebx,eax
c0023b68:	58                   	pop    eax
c0023b69:	8b 06                	mov    eax,DWORD PTR [esi]
c0023b6b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0023b6f:	57                   	push   edi
c0023b70:	53                   	push   ebx
c0023b71:	6a 00                	push   0x0
c0023b73:	6a 34                	push   0x34
c0023b75:	56                   	push   esi
c0023b76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023b79:	83 c4 20             	add    esp,0x20
c0023b7c:	85 c0                	test   eax,eax
c0023b7e:	0f 85 13 01 00 00    	jne    c0023c97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b84:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023b8a:	0f 85 07 01 00 00    	jne    c0023c97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b90:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023b93:	85 c0                	test   eax,eax
c0023b95:	0f 84 fc 00 00 00    	je     c0023c97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b9b:	31 d2                	xor    edx,edx
c0023b9d:	55                   	push   ebp
c0023b9e:	52                   	push   edx
c0023b9f:	50                   	push   eax
c0023ba0:	56                   	push   esi
c0023ba1:	e8 9a 69 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0023ba6:	83 c4 10             	add    esp,0x10
c0023ba9:	85 c0                	test   eax,eax
c0023bab:	0f 85 e6 00 00 00    	jne    c0023c97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023bb1:	83 ec 0c             	sub    esp,0xc
c0023bb4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023bb7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023bbb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023bbf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023bc3:	0f af c2             	imul   eax,edx
c0023bc6:	50                   	push   eax
c0023bc7:	e8 f2 27 ff ff       	call   c00163be <malloc>
c0023bcc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023bce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023bd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023bd5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023bd9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023bdd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023be1:	0f af c2             	imul   eax,edx
c0023be4:	99                   	cdq    
c0023be5:	52                   	push   edx
c0023be6:	50                   	push   eax
c0023be7:	56                   	push   esi
c0023be8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023beb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023bee:	83 c4 20             	add    esp,0x20
c0023bf1:	85 c0                	test   eax,eax
c0023bf3:	0f 84 9e 00 00 00    	je     c0023c97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023bf9:	31 d2                	xor    edx,edx
c0023bfb:	51                   	push   ecx
c0023bfc:	52                   	push   edx
c0023bfd:	50                   	push   eax
c0023bfe:	56                   	push   esi
c0023bff:	e8 3c 69 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0023c04:	83 c4 10             	add    esp,0x10
c0023c07:	85 c0                	test   eax,eax
c0023c09:	0f 85 88 00 00 00    	jne    c0023c97 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023c0f:	83 ec 0c             	sub    esp,0xc
c0023c12:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023c16:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023c1a:	31 ed                	xor    ebp,ebp
c0023c1c:	0f af c2             	imul   eax,edx
c0023c1f:	50                   	push   eax
c0023c20:	e8 99 27 ff ff       	call   c00163be <malloc>
c0023c25:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023c27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c2b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c32:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023c36:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023c3a:	0f af c2             	imul   eax,edx
c0023c3d:	99                   	cdq    
c0023c3e:	52                   	push   edx
c0023c3f:	50                   	push   eax
c0023c40:	56                   	push   esi
c0023c41:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023c44:	83 c4 20             	add    esp,0x20
c0023c47:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023c4f:	0f b7 fd             	movzx  edi,bp
c0023c52:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0023c56:	73 7d                	jae    c0023cd5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0023c58:	c1 e7 05             	shl    edi,0x5
c0023c5b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0023c5f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0023c62:	75 6b                	jne    c0023ccf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023c64:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0023c67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c6b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023c6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023c72:	52                   	push   edx
c0023c73:	31 d2                	xor    edx,edx
c0023c75:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023c78:	52                   	push   edx
c0023c79:	50                   	push   eax
c0023c7a:	56                   	push   esi
c0023c7b:	e8 c0 68 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0023c80:	83 c4 10             	add    esp,0x10
c0023c83:	85 c0                	test   eax,eax
c0023c85:	74 17                	je     c0023c9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0023c87:	83 ec 0c             	sub    esp,0xc
c0023c8a:	68 d3 2c 03 c0       	push   0xc0032cd3
c0023c8f:	e8 c9 55 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0023c94:	83 c4 10             	add    esp,0x10
c0023c97:	31 c0                	xor    eax,eax
c0023c99:	e9 87 00 00 00       	jmp    c0023d25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0023c9e:	83 ec 0c             	sub    esp,0xc
c0023ca1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023ca4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0023ca7:	50                   	push   eax
c0023ca8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023cb0:	56                   	push   esi
c0023cb1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023cb5:	e8 d3 fb ff ff       	call   c002388d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023cba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0023cbe:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0023cc2:	83 c4 20             	add    esp,0x20
c0023cc5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0023cc9:	73 04                	jae    c0023ccf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023ccb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023ccf:	45                   	inc    ebp
c0023cd0:	e9 7a ff ff ff       	jmp    c0023c4f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023cd5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0023cd9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023cdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ce1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0023ce7:	83 ec 0c             	sub    esp,0xc
c0023cea:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0023cf0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023cf5:	05 00 10 00 00       	add    eax,0x1000
c0023cfa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023cfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d01:	e8 d8 26 ff ff       	call   c00163de <free>
c0023d06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d09:	e8 d0 26 ff ff       	call   c00163de <free>
c0023d0e:	58                   	pop    eax
c0023d0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d13:	e8 c6 26 ff ff       	call   c00163de <free>
c0023d18:	89 34 24             	mov    DWORD PTR [esp],esi
c0023d1b:	e8 c0 67 ff ff       	call   c001a4e0 <File::close()>
c0023d20:	83 c4 10             	add    esp,0x10
c0023d23:	b0 01                	mov    al,0x1
c0023d25:	83 c4 3c             	add    esp,0x3c
c0023d28:	5b                   	pop    ebx
c0023d29:	5e                   	pop    esi
c0023d2a:	5f                   	pop    edi
c0023d2b:	5d                   	pop    ebp
c0023d2c:	c3                   	ret    

c0023d2d <Thr::runtimeReferenceHelper()>:
c0023d2d:	83 ec 18             	sub    esp,0x18
c0023d30:	68 db 2c 03 c0       	push   0xc0032cdb
c0023d35:	e8 23 55 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0023d3a:	fa                   	cli    
c0023d3b:	83 c4 10             	add    esp,0x10
c0023d3e:	eb fe                	jmp    c0023d3e <Thr::runtimeReferenceHelper()+0x11>

c0023d40 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023d40:	57                   	push   edi
c0023d41:	56                   	push   esi
c0023d42:	53                   	push   ebx
c0023d43:	31 db                	xor    ebx,ebx
c0023d45:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023d4b:	7e 3c                	jle    c0023d89 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023d4d:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023d54:	31 ff                	xor    edi,edi
c0023d56:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023d5d:	7e 27                	jle    c0023d86 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023d5f:	50                   	push   eax
c0023d60:	50                   	push   eax
c0023d61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d65:	8b 06                	mov    eax,DWORD PTR [esi]
c0023d67:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023d6e:	50                   	push   eax
c0023d6f:	e8 dc c9 fd ff       	call   c0000750 <strcmp>
c0023d74:	83 c4 10             	add    esp,0x10
c0023d77:	85 c0                	test   eax,eax
c0023d79:	75 05                	jne    c0023d80 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023d7b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023d7e:	eb 0b                	jmp    c0023d8b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023d80:	83 c6 10             	add    esi,0x10
c0023d83:	47                   	inc    edi
c0023d84:	eb d0                	jmp    c0023d56 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023d86:	43                   	inc    ebx
c0023d87:	eb bc                	jmp    c0023d45 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023d89:	31 c0                	xor    eax,eax
c0023d8b:	5b                   	pop    ebx
c0023d8c:	5e                   	pop    esi
c0023d8d:	5f                   	pop    edi
c0023d8e:	c3                   	ret    

c0023d8f <Thr::loadKernelSymbolTable(char const*)>:
c0023d8f:	55                   	push   ebp
c0023d90:	57                   	push   edi
c0023d91:	56                   	push   esi
c0023d92:	53                   	push   ebx
c0023d93:	83 ec 68             	sub    esp,0x68
c0023d96:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023d9c:	68 14 01 00 00       	push   0x114
c0023da1:	e8 18 26 ff ff       	call   c00163be <malloc>
c0023da6:	83 c4 0c             	add    esp,0xc
c0023da9:	89 c3                	mov    ebx,eax
c0023dab:	56                   	push   esi
c0023dac:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023db0:	50                   	push   eax
c0023db1:	e8 ae 66 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0023db6:	5e                   	pop    esi
c0023db7:	5f                   	pop    edi
c0023db8:	6a 01                	push   0x1
c0023dba:	53                   	push   ebx
c0023dbb:	e8 c2 66 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c0023dc0:	83 c4 10             	add    esp,0x10
c0023dc3:	85 c0                	test   eax,eax
c0023dc5:	74 0a                	je     c0023dd1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023dc7:	83 ec 0c             	sub    esp,0xc
c0023dca:	68 fd 2c 03 c0       	push   0xc0032cfd
c0023dcf:	eb 34                	jmp    c0023e05 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023dd1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023dd9:	83 ec 0c             	sub    esp,0xc
c0023ddc:	6a 34                	push   0x34
c0023dde:	e8 db 25 ff ff       	call   c00163be <malloc>
c0023de3:	59                   	pop    ecx
c0023de4:	89 c7                	mov    edi,eax
c0023de6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023dea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dec:	56                   	push   esi
c0023ded:	57                   	push   edi
c0023dee:	6a 00                	push   0x0
c0023df0:	6a 34                	push   0x34
c0023df2:	53                   	push   ebx
c0023df3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023df6:	83 c4 20             	add    esp,0x20
c0023df9:	85 c0                	test   eax,eax
c0023dfb:	74 17                	je     c0023e14 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023dfd:	83 ec 0c             	sub    esp,0xc
c0023e00:	68 14 2d 03 c0       	push   0xc0032d14
c0023e05:	e8 6c c4 ff ff       	call   c0020276 <KePanic(char const*)>
c0023e0a:	83 c4 10             	add    esp,0x10
c0023e0d:	31 c0                	xor    eax,eax
c0023e0f:	e9 31 02 00 00       	jmp    c0024045 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023e14:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023e1a:	75 e1                	jne    c0023dfd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e1c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023e1f:	85 c0                	test   eax,eax
c0023e21:	74 da                	je     c0023dfd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e23:	52                   	push   edx
c0023e24:	31 d2                	xor    edx,edx
c0023e26:	52                   	push   edx
c0023e27:	50                   	push   eax
c0023e28:	53                   	push   ebx
c0023e29:	e8 12 67 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0023e2e:	83 c4 10             	add    esp,0x10
c0023e31:	85 c0                	test   eax,eax
c0023e33:	75 c8                	jne    c0023dfd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e35:	83 ec 0c             	sub    esp,0xc
c0023e38:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e3c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e40:	31 ed                	xor    ebp,ebp
c0023e42:	0f af c2             	imul   eax,edx
c0023e45:	50                   	push   eax
c0023e46:	e8 73 25 ff ff       	call   c00163be <malloc>
c0023e4b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023e4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e51:	89 34 24             	mov    DWORD PTR [esp],esi
c0023e54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023e58:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e5c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e60:	0f af c2             	imul   eax,edx
c0023e63:	99                   	cdq    
c0023e64:	52                   	push   edx
c0023e65:	50                   	push   eax
c0023e66:	53                   	push   ebx
c0023e67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e6a:	83 c4 20             	add    esp,0x20
c0023e6d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023e75:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023e7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023e85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023e8d:	0f b7 f5             	movzx  esi,bp
c0023e90:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0023e94:	0f 83 a7 00 00 00    	jae    c0023f41 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023e9a:	6b f6 28             	imul   esi,esi,0x28
c0023e9d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023ea1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023ea4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023ea8:	50                   	push   eax
c0023ea9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023ead:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023eb1:	8b 16                	mov    edx,DWORD PTR [esi]
c0023eb3:	6b c0 28             	imul   eax,eax,0x28
c0023eb6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023eba:	89 d0                	mov    eax,edx
c0023ebc:	31 d2                	xor    edx,edx
c0023ebe:	52                   	push   edx
c0023ebf:	50                   	push   eax
c0023ec0:	53                   	push   ebx
c0023ec1:	e8 7a 66 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0023ec6:	83 c4 0c             	add    esp,0xc
c0023ec9:	6a 20                	push   0x20
c0023ecb:	6a 00                	push   0x0
c0023ecd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023ed1:	52                   	push   edx
c0023ed2:	e8 19 c6 fd ff       	call   c00004f0 <memset>
c0023ed7:	58                   	pop    eax
c0023ed8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eda:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023ede:	51                   	push   ecx
c0023edf:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023ee3:	52                   	push   edx
c0023ee4:	6a 00                	push   0x0
c0023ee6:	6a 1f                	push   0x1f
c0023ee8:	53                   	push   ebx
c0023ee9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023eec:	83 c4 18             	add    esp,0x18
c0023eef:	68 2b 2d 03 c0       	push   0xc0032d2b
c0023ef4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023ef8:	52                   	push   edx
c0023ef9:	e8 52 c8 fd ff       	call   c0000750 <strcmp>
c0023efe:	83 c4 10             	add    esp,0x10
c0023f01:	85 c0                	test   eax,eax
c0023f03:	75 0f                	jne    c0023f14 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0023f05:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023f08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f14:	50                   	push   eax
c0023f15:	50                   	push   eax
c0023f16:	68 33 2d 03 c0       	push   0xc0032d33
c0023f1b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023f1f:	50                   	push   eax
c0023f20:	e8 2b c8 fd ff       	call   c0000750 <strcmp>
c0023f25:	83 c4 10             	add    esp,0x10
c0023f28:	85 c0                	test   eax,eax
c0023f2a:	75 0f                	jne    c0023f3b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023f2c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023f2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023f33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023f3b:	45                   	inc    ebp
c0023f3c:	e9 4c ff ff ff       	jmp    c0023e8d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023f41:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0023f46:	75 10                	jne    c0023f58 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023f48:	83 ec 0c             	sub    esp,0xc
c0023f4b:	68 3b 2d 03 c0       	push   0xc0032d3b
c0023f50:	e8 21 c3 ff ff       	call   c0020276 <KePanic(char const*)>
c0023f55:	83 c4 10             	add    esp,0x10
c0023f58:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023f5d:	75 10                	jne    c0023f6f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023f5f:	83 ec 0c             	sub    esp,0xc
c0023f62:	68 3b 2d 03 c0       	push   0xc0032d3b
c0023f67:	e8 0a c3 ff ff       	call   c0020276 <KePanic(char const*)>
c0023f6c:	83 c4 10             	add    esp,0x10
c0023f6f:	31 d2                	xor    edx,edx
c0023f71:	50                   	push   eax
c0023f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f76:	52                   	push   edx
c0023f77:	50                   	push   eax
c0023f78:	53                   	push   ebx
c0023f79:	e8 c2 65 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0023f7e:	5a                   	pop    edx
c0023f7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023f83:	e8 36 24 ff ff       	call   c00163be <malloc>
c0023f88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023f8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f90:	31 c9                	xor    ecx,ecx
c0023f92:	5e                   	pop    esi
c0023f93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f95:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023f99:	55                   	push   ebp
c0023f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f9e:	51                   	push   ecx
c0023f9f:	52                   	push   edx
c0023fa0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0023fa4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023fa8:	53                   	push   ebx
c0023fa9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023fac:	83 c4 14             	add    esp,0x14
c0023faf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023fb3:	e8 06 24 ff ff       	call   c00163be <malloc>
c0023fb8:	89 c6                	mov    esi,eax
c0023fba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023fbc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023fbf:	56                   	push   esi
c0023fc0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023fc4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023fc8:	51                   	push   ecx
c0023fc9:	52                   	push   edx
c0023fca:	53                   	push   ebx
c0023fcb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023fce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023fd2:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0023fd8:	83 c4 1c             	add    esp,0x1c
c0023fdb:	c1 e8 04             	shr    eax,0x4
c0023fde:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0023fe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fe9:	31 d2                	xor    edx,edx
c0023feb:	52                   	push   edx
c0023fec:	50                   	push   eax
c0023fed:	53                   	push   ebx
c0023fee:	e8 4d 65 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0023ff3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023ff5:	31 d2                	xor    edx,edx
c0023ff7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023ffa:	56                   	push   esi
c0023ffb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023fff:	52                   	push   edx
c0024000:	50                   	push   eax
c0024001:	53                   	push   ebx
c0024002:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024005:	83 c4 14             	add    esp,0x14
c0024008:	53                   	push   ebx
c0024009:	e8 d2 64 ff ff       	call   c001a4e0 <File::close()>
c002400e:	5d                   	pop    ebp
c002400f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024013:	e8 c6 23 ff ff       	call   c00163de <free>
c0024018:	89 3c 24             	mov    DWORD PTR [esp],edi
c002401b:	e8 be 23 ff ff       	call   c00163de <free>
c0024020:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0024025:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024029:	8d 50 01             	lea    edx,[eax+0x1]
c002402c:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0024033:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c002403a:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0024040:	83 c4 10             	add    esp,0x10
c0024043:	b0 01                	mov    al,0x1
c0024045:	83 c4 5c             	add    esp,0x5c
c0024048:	5b                   	pop    ebx
c0024049:	5e                   	pop    esi
c002404a:	5f                   	pop    edi
c002404b:	5d                   	pop    ebp
c002404c:	c3                   	ret    

c002404d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c002404d:	55                   	push   ebp
c002404e:	57                   	push   edi
c002404f:	56                   	push   esi
c0024050:	53                   	push   ebx
c0024051:	81 ec 68 03 00 00    	sub    esp,0x368
c0024057:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c002405e:	8b 1d f8 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401f8
c0024064:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0024068:	68 14 01 00 00       	push   0x114
c002406d:	e8 4c 23 ff ff       	call   c00163be <malloc>
c0024072:	83 c4 0c             	add    esp,0xc
c0024075:	89 c5                	mov    ebp,eax
c0024077:	53                   	push   ebx
c0024078:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c002407f:	50                   	push   eax
c0024080:	e8 df 63 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0024085:	5e                   	pop    esi
c0024086:	5f                   	pop    edi
c0024087:	6a 01                	push   0x1
c0024089:	55                   	push   ebp
c002408a:	e8 f3 63 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c002408f:	83 c4 10             	add    esp,0x10
c0024092:	85 c0                	test   eax,eax
c0024094:	0f 85 aa 06 00 00    	jne    c0024744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002409a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00240a2:	83 ec 0c             	sub    esp,0xc
c00240a5:	6a 34                	push   0x34
c00240a7:	e8 12 23 ff ff       	call   c00163be <malloc>
c00240ac:	5b                   	pop    ebx
c00240ad:	89 c7                	mov    edi,eax
c00240af:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00240b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00240b6:	53                   	push   ebx
c00240b7:	57                   	push   edi
c00240b8:	6a 00                	push   0x0
c00240ba:	6a 34                	push   0x34
c00240bc:	55                   	push   ebp
c00240bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00240c0:	83 c4 20             	add    esp,0x20
c00240c3:	85 c0                	test   eax,eax
c00240c5:	0f 85 79 06 00 00    	jne    c0024744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240cb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00240d1:	0f 85 6d 06 00 00    	jne    c0024744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240d7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00240da:	85 c0                	test   eax,eax
c00240dc:	0f 84 62 06 00 00    	je     c0024744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240e2:	31 d2                	xor    edx,edx
c00240e4:	51                   	push   ecx
c00240e5:	52                   	push   edx
c00240e6:	50                   	push   eax
c00240e7:	55                   	push   ebp
c00240e8:	e8 53 64 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c00240ed:	83 c4 10             	add    esp,0x10
c00240f0:	85 c0                	test   eax,eax
c00240f2:	0f 85 4c 06 00 00    	jne    c0024744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240f8:	83 ec 0c             	sub    esp,0xc
c00240fb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00240fe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024102:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024106:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002410a:	0f af c2             	imul   eax,edx
c002410d:	50                   	push   eax
c002410e:	e8 ab 22 ff ff       	call   c00163be <malloc>
c0024113:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024116:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002411a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002411d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024121:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024125:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024129:	0f af c2             	imul   eax,edx
c002412c:	99                   	cdq    
c002412d:	52                   	push   edx
c002412e:	50                   	push   eax
c002412f:	55                   	push   ebp
c0024130:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024133:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0024136:	83 c4 20             	add    esp,0x20
c0024139:	85 c0                	test   eax,eax
c002413b:	0f 84 03 06 00 00    	je     c0024744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024141:	52                   	push   edx
c0024142:	31 d2                	xor    edx,edx
c0024144:	52                   	push   edx
c0024145:	50                   	push   eax
c0024146:	55                   	push   ebp
c0024147:	e8 f4 63 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c002414c:	83 c4 10             	add    esp,0x10
c002414f:	85 c0                	test   eax,eax
c0024151:	0f 85 ed 05 00 00    	jne    c0024744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024157:	83 ec 0c             	sub    esp,0xc
c002415a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002415e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024162:	31 f6                	xor    esi,esi
c0024164:	0f af c2             	imul   eax,edx
c0024167:	50                   	push   eax
c0024168:	e8 51 22 ff ff       	call   c00163be <malloc>
c002416d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024170:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024174:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024177:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002417b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002417f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024183:	0f af c2             	imul   eax,edx
c0024186:	99                   	cdq    
c0024187:	52                   	push   edx
c0024188:	50                   	push   eax
c0024189:	55                   	push   ebp
c002418a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002418d:	83 c4 20             	add    esp,0x20
c0024190:	0f b7 de             	movzx  ebx,si
c0024193:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0024197:	0f 83 87 00 00 00    	jae    c0024224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c002419d:	c1 e3 05             	shl    ebx,0x5
c00241a0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00241a4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00241a7:	75 75                	jne    c002421e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00241a9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00241ac:	31 d2                	xor    edx,edx
c00241ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00241b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00241b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00241b9:	50                   	push   eax
c00241ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00241bd:	52                   	push   edx
c00241be:	50                   	push   eax
c00241bf:	55                   	push   ebp
c00241c0:	e8 7b 63 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c00241c5:	83 c4 10             	add    esp,0x10
c00241c8:	85 c0                	test   eax,eax
c00241ca:	0f 85 74 05 00 00    	jne    c0024744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00241d0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00241d7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00241da:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00241de:	31 d2                	xor    edx,edx
c00241e0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00241e4:	83 ec 0c             	sub    esp,0xc
c00241e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00241eb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00241f2:	50                   	push   eax
c00241f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00241fb:	52                   	push   edx
c00241fc:	50                   	push   eax
c00241fd:	55                   	push   ebp
c00241fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024201:	83 c4 1c             	add    esp,0x1c
c0024204:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0024207:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c002420a:	50                   	push   eax
c002420b:	6a 00                	push   0x0
c002420d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024211:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0024215:	50                   	push   eax
c0024216:	e8 d5 c2 fd ff       	call   c00004f0 <memset>
c002421b:	83 c4 10             	add    esp,0x10
c002421e:	46                   	inc    esi
c002421f:	e9 6c ff ff ff       	jmp    c0024190 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0024224:	53                   	push   ebx
c0024225:	31 db                	xor    ebx,ebx
c0024227:	68 00 01 00 00       	push   0x100
c002422c:	6a 00                	push   0x0
c002422e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0024232:	50                   	push   eax
c0024233:	e8 b8 c2 fd ff       	call   c00004f0 <memset>
c0024238:	83 c4 0c             	add    esp,0xc
c002423b:	68 00 01 00 00       	push   0x100
c0024240:	6a 00                	push   0x0
c0024242:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024249:	50                   	push   eax
c002424a:	e8 a1 c2 fd ff       	call   c00004f0 <memset>
c002424f:	83 c4 10             	add    esp,0x10
c0024252:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002425a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0024262:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c002426a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024272:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002427a:	0f b7 f3             	movzx  esi,bx
c002427d:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0024281:	0f 83 2d 01 00 00    	jae    c00243b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0024287:	6b f6 28             	imul   esi,esi,0x28
c002428a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002428e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0024291:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024295:	52                   	push   edx
c0024296:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002429a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c002429e:	8b 06                	mov    eax,DWORD PTR [esi]
c00242a0:	6b d2 28             	imul   edx,edx,0x28
c00242a3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00242a7:	31 d2                	xor    edx,edx
c00242a9:	52                   	push   edx
c00242aa:	50                   	push   eax
c00242ab:	55                   	push   ebp
c00242ac:	e8 8f 62 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c00242b1:	83 c4 0c             	add    esp,0xc
c00242b4:	6a 20                	push   0x20
c00242b6:	6a 00                	push   0x0
c00242b8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00242bf:	51                   	push   ecx
c00242c0:	e8 2b c2 fd ff       	call   c00004f0 <memset>
c00242c5:	59                   	pop    ecx
c00242c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00242c9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00242cd:	52                   	push   edx
c00242ce:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00242d5:	51                   	push   ecx
c00242d6:	6a 00                	push   0x0
c00242d8:	6a 1f                	push   0x1f
c00242da:	55                   	push   ebp
c00242db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00242de:	83 c4 1c             	add    esp,0x1c
c00242e1:	6a 09                	push   0x9
c00242e3:	68 55 2d 03 c0       	push   0xc0032d55
c00242e8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00242ef:	51                   	push   ecx
c00242f0:	e8 8b c0 fd ff       	call   c0000380 <memcmp>
c00242f5:	83 c4 10             	add    esp,0x10
c00242f8:	85 c0                	test   eax,eax
c00242fa:	75 21                	jne    c002431d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00242fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024300:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024304:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0024308:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002430c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002430f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024316:	89 d0                	mov    eax,edx
c0024318:	40                   	inc    eax
c0024319:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002431d:	50                   	push   eax
c002431e:	6a 09                	push   0x9
c0024320:	68 5f 2d 03 c0       	push   0xc0032d5f
c0024325:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002432c:	50                   	push   eax
c002432d:	e8 4e c0 fd ff       	call   c0000380 <memcmp>
c0024332:	83 c4 10             	add    esp,0x10
c0024335:	85 c0                	test   eax,eax
c0024337:	75 21                	jne    c002435a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0024339:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002433d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024341:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024345:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0024349:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002434c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024353:	89 d0                	mov    eax,edx
c0024355:	40                   	inc    eax
c0024356:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002435a:	50                   	push   eax
c002435b:	50                   	push   eax
c002435c:	68 2b 2d 03 c0       	push   0xc0032d2b
c0024361:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024368:	50                   	push   eax
c0024369:	e8 e2 c3 fd ff       	call   c0000750 <strcmp>
c002436e:	83 c4 10             	add    esp,0x10
c0024371:	85 c0                	test   eax,eax
c0024373:	75 0f                	jne    c0024384 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0024375:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024378:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002437c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024380:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024384:	50                   	push   eax
c0024385:	50                   	push   eax
c0024386:	68 33 2d 03 c0       	push   0xc0032d33
c002438b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024392:	50                   	push   eax
c0024393:	e8 b8 c3 fd ff       	call   c0000750 <strcmp>
c0024398:	83 c4 10             	add    esp,0x10
c002439b:	85 c0                	test   eax,eax
c002439d:	75 0f                	jne    c00243ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c002439f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00243a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00243a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00243ae:	43                   	inc    ebx
c00243af:	e9 c6 fe ff ff       	jmp    c002427a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00243b4:	31 d2                	xor    edx,edx
c00243b6:	50                   	push   eax
c00243b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243bb:	52                   	push   edx
c00243bc:	50                   	push   eax
c00243bd:	55                   	push   ebp
c00243be:	e8 7d 61 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c00243c3:	58                   	pop    eax
c00243c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00243c8:	e8 f1 1f ff ff       	call   c00163be <malloc>
c00243cd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00243d0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00243d4:	31 d2                	xor    edx,edx
c00243d6:	58                   	pop    eax
c00243d7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00243db:	53                   	push   ebx
c00243dc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00243e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00243e4:	52                   	push   edx
c00243e5:	50                   	push   eax
c00243e6:	55                   	push   ebp
c00243e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243ea:	83 c4 14             	add    esp,0x14
c00243ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00243f1:	e8 c8 1f ff ff       	call   c00163be <malloc>
c00243f6:	31 d2                	xor    edx,edx
c00243f8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00243fc:	83 c4 0c             	add    esp,0xc
c00243ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024403:	52                   	push   edx
c0024404:	50                   	push   eax
c0024405:	55                   	push   ebp
c0024406:	e8 35 61 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c002440b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002440e:	31 d2                	xor    edx,edx
c0024410:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024413:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024417:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002441b:	52                   	push   edx
c002441c:	50                   	push   eax
c002441d:	55                   	push   ebp
c002441e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024421:	83 c4 20             	add    esp,0x20
c0024424:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0024429:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024431:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024435:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024439:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c002443d:	0f 84 05 03 00 00    	je     c0024748 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0024443:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c002444a:	31 d2                	xor    edx,edx
c002444c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024450:	c1 e8 03             	shr    eax,0x3
c0024453:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0024457:	51                   	push   ecx
c0024458:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002445c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0024460:	52                   	push   edx
c0024461:	50                   	push   eax
c0024462:	55                   	push   ebp
c0024463:	e8 d8 60 ff ff       	call   c001a540 <File::seek(unsigned long long)>
c0024468:	5b                   	pop    ebx
c0024469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002446d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024474:	e8 45 1f ff ff       	call   c00163be <malloc>
c0024479:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002447c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024480:	31 d2                	xor    edx,edx
c0024482:	5e                   	pop    esi
c0024483:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024487:	50                   	push   eax
c0024488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002448c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024490:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0024497:	52                   	push   edx
c0024498:	50                   	push   eax
c0024499:	55                   	push   ebp
c002449a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002449d:	83 c4 20             	add    esp,0x20
c00244a0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00244a8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00244ac:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00244b0:	0f 8d 76 02 00 00    	jge    c002472c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00244b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00244ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244be:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00244c3:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00244c6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00244ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244ce:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00244d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00244d6:	c1 e8 08             	shr    eax,0x8
c00244d9:	89 c6                	mov    esi,eax
c00244db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00244df:	c1 e6 04             	shl    esi,0x4
c00244e2:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00244e6:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00244e9:	85 db                	test   ebx,ebx
c00244eb:	0f 85 b3 00 00 00    	jne    c00245a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00244f1:	83 ec 0c             	sub    esp,0xc
c00244f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00244f8:	03 06                	add    eax,DWORD PTR [esi]
c00244fa:	50                   	push   eax
c00244fb:	e8 40 f8 ff ff       	call   c0023d40 <Thr::getAddressOfKernelSymbol(char const*)>
c0024500:	83 c4 10             	add    esp,0x10
c0024503:	89 c3                	mov    ebx,eax
c0024505:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c002450a:	85 c0                	test   eax,eax
c002450c:	0f 85 92 00 00 00    	jne    c00245a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024512:	83 ec 0c             	sub    esp,0xc
c0024515:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024519:	03 06                	add    eax,DWORD PTR [esi]
c002451b:	50                   	push   eax
c002451c:	e8 43 bf ff ff       	call   c0020464 <KeResolveCompatibilitySymbol(char*)>
c0024521:	83 c4 10             	add    esp,0x10
c0024524:	89 c3                	mov    ebx,eax
c0024526:	85 c0                	test   eax,eax
c0024528:	75 7a                	jne    c00245a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c002452a:	51                   	push   ecx
c002452b:	51                   	push   ecx
c002452c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024530:	03 06                	add    eax,DWORD PTR [esi]
c0024532:	50                   	push   eax
c0024533:	68 69 2d 03 c0       	push   0xc0032d69
c0024538:	e8 20 4d ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002453d:	58                   	pop    eax
c002453e:	5a                   	pop    edx
c002453f:	68 83 2d 03 c0       	push   0xc0032d83
c0024544:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002454b:	50                   	push   eax
c002454c:	e8 ef c0 fd ff       	call   c0000640 <strcpy>
c0024551:	59                   	pop    ecx
c0024552:	58                   	pop    eax
c0024553:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024557:	03 06                	add    eax,DWORD PTR [esi]
c0024559:	50                   	push   eax
c002455a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024561:	50                   	push   eax
c0024562:	e8 d9 c2 fd ff       	call   c0000840 <strcat>
c0024567:	58                   	pop    eax
c0024568:	5a                   	pop    edx
c0024569:	68 1d 2e 03 c0       	push   0xc0032e1d
c002456e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024575:	50                   	push   eax
c0024576:	e8 c5 c2 fd ff       	call   c0000840 <strcat>
c002457b:	83 c4 10             	add    esp,0x10
c002457e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024583:	0f 84 5d 01 00 00    	je     c00246e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024589:	83 ec 0c             	sub    esp,0xc
c002458c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024593:	50                   	push   eax
c0024594:	e8 dd bc ff ff       	call   c0020276 <KePanic(char const*)>
c0024599:	83 c4 10             	add    esp,0x10
c002459c:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00245a0:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00245a4:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00245a9:	83 f8 01             	cmp    eax,0x1
c00245ac:	0f 85 8f 00 00 00    	jne    c0024641 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00245b2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00245b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00245bd:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00245c1:	01 ce                	add    esi,ecx
c00245c3:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00245cb:	0f 94 c0             	sete   al
c00245ce:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00245d6:	0f 94 c2             	sete   dl
c00245d9:	09 c2                	or     edx,eax
c00245db:	8b 06                	mov    eax,DWORD PTR [esi]
c00245dd:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00245e2:	0f b6 d2             	movzx  edx,dl
c00245e5:	74 41                	je     c0024628 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00245e7:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00245ea:	85 d2                	test   edx,edx
c00245ec:	75 15                	jne    c0024603 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00245ee:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00245f2:	66 83 f8 0c          	cmp    ax,0xc
c00245f6:	76 05                	jbe    c00245fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00245f8:	b8 0c 00 00 00       	mov    eax,0xc
c00245fd:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024601:	76 37                	jbe    c002463a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024603:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0024607:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002460c:	0f 84 d4 00 00 00    	je     c00246e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024612:	83 ec 0c             	sub    esp,0xc
c0024615:	68 9a 2d 03 c0       	push   0xc0032d9a
c002461a:	e8 57 bc ff ff       	call   c0020276 <KePanic(char const*)>
c002461f:	83 c4 10             	add    esp,0x10
c0024622:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024626:	eb 12                	jmp    c002463a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024628:	01 c1                	add    ecx,eax
c002462a:	85 d2                	test   edx,edx
c002462c:	75 0c                	jne    c002463a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c002462e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024632:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024636:	77 02                	ja     c002463a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024638:	01 d9                	add    ecx,ebx
c002463a:	89 0e                	mov    DWORD PTR [esi],ecx
c002463c:	e9 e2 00 00 00       	jmp    c0024723 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024641:	83 f8 02             	cmp    eax,0x2
c0024644:	75 77                	jne    c00246bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0024646:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c002464d:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0024651:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0024655:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c002465d:	74 21                	je     c0024680 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c002465f:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0024667:	74 17                	je     c0024680 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024669:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c002466d:	b8 0a 00 00 00       	mov    eax,0xa
c0024672:	83 fa 0e             	cmp    edx,0xe
c0024675:	77 03                	ja     c002467a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0024677:	8d 42 fc             	lea    eax,[edx-0x4]
c002467a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c002467e:	76 17                	jbe    c0024697 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0024680:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024685:	74 5f                	je     c00246e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024687:	83 ec 0c             	sub    esp,0xc
c002468a:	68 b6 2d 03 c0       	push   0xc0032db6
c002468f:	e8 e2 bb ff ff       	call   c0020276 <KePanic(char const*)>
c0024694:	83 c4 10             	add    esp,0x10
c0024697:	8b 06                	mov    eax,DWORD PTR [esi]
c0024699:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c002469e:	74 13                	je     c00246b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00246a0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00246a4:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00246ab:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00246af:	01 d0                	add    eax,edx
c00246b1:	eb 04                	jmp    c00246b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00246b3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00246b7:	01 c3                	add    ebx,eax
c00246b9:	89 1e                	mov    DWORD PTR [esi],ebx
c00246bb:	eb 66                	jmp    c0024723 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00246bd:	52                   	push   edx
c00246be:	52                   	push   edx
c00246bf:	50                   	push   eax
c00246c0:	68 d2 2d 03 c0       	push   0xc0032dd2
c00246c5:	e8 93 4b ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00246ca:	83 c4 10             	add    esp,0x10
c00246cd:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00246d2:	74 12                	je     c00246e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00246d4:	83 ec 0c             	sub    esp,0xc
c00246d7:	68 dd 2d 03 c0       	push   0xc0032ddd
c00246dc:	e8 95 bb ff ff       	call   c0020276 <KePanic(char const*)>
c00246e1:	83 c4 10             	add    esp,0x10
c00246e4:	eb 3d                	jmp    c0024723 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00246e6:	83 ec 0c             	sub    esp,0xc
c00246e9:	55                   	push   ebp
c00246ea:	e8 f1 5d ff ff       	call   c001a4e0 <File::close()>
c00246ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00246f2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00246f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00246f8:	59                   	pop    ecx
c00246f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00246fd:	e8 dc 1c ff ff       	call   c00163de <free>
c0024702:	5b                   	pop    ebx
c0024703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024707:	e8 d2 1c ff ff       	call   c00163de <free>
c002470c:	89 3c 24             	mov    DWORD PTR [esp],edi
c002470f:	e8 ca 1c ff ff       	call   c00163de <free>
c0024714:	5e                   	pop    esi
c0024715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024719:	e8 c0 1c ff ff       	call   c00163de <free>
c002471e:	83 c4 10             	add    esp,0x10
c0024721:	eb 21                	jmp    c0024744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024723:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0024727:	e9 7c fd ff ff       	jmp    c00244a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c002472c:	83 ec 0c             	sub    esp,0xc
c002472f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024733:	e8 a6 1c ff ff       	call   c00163de <free>
c0024738:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c002473c:	83 c4 10             	add    esp,0x10
c002473f:	e9 f1 fc ff ff       	jmp    c0024435 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0024744:	31 c0                	xor    eax,eax
c0024746:	eb 33                	jmp    c002477b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0024748:	83 ec 0c             	sub    esp,0xc
c002474b:	55                   	push   ebp
c002474c:	e8 8f 5d ff ff       	call   c001a4e0 <File::close()>
c0024751:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024754:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024757:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002475a:	58                   	pop    eax
c002475b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002475f:	e8 7a 1c ff ff       	call   c00163de <free>
c0024764:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024767:	e8 72 1c ff ff       	call   c00163de <free>
c002476c:	5a                   	pop    edx
c002476d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024771:	e8 68 1c ff ff       	call   c00163de <free>
c0024776:	83 c4 10             	add    esp,0x10
c0024779:	b0 01                	mov    al,0x1
c002477b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024781:	5b                   	pop    ebx
c0024782:	5e                   	pop    esi
c0024783:	5f                   	pop    edi
c0024784:	5d                   	pop    ebp
c0024785:	c3                   	ret    

c0024786 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024786:	56                   	push   esi
c0024787:	31 d2                	xor    edx,edx
c0024789:	53                   	push   ebx
c002478a:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024790:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024794:	39 d3                	cmp    ebx,edx
c0024796:	7e 1b                	jle    c00247b3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024798:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c002479f:	39 c8                	cmp    eax,ecx
c00247a1:	77 0d                	ja     c00247b0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00247a3:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c00247aa:	01 c6                	add    esi,eax
c00247ac:	39 ce                	cmp    esi,ecx
c00247ae:	77 05                	ja     c00247b5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00247b0:	42                   	inc    edx
c00247b1:	eb e1                	jmp    c0024794 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00247b3:	31 c0                	xor    eax,eax
c00247b5:	5b                   	pop    ebx
c00247b6:	5e                   	pop    esi
c00247b7:	c3                   	ret    

c00247b8 <Thr::getDriverNameFromAddress(unsigned long)>:
c00247b8:	53                   	push   ebx
c00247b9:	31 c0                	xor    eax,eax
c00247bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00247bf:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00247c5:	39 c3                	cmp    ebx,eax
c00247c7:	7e 22                	jle    c00247eb <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00247c9:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00247d0:	39 ca                	cmp    edx,ecx
c00247d2:	77 14                	ja     c00247e8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00247d4:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00247db:	39 ca                	cmp    edx,ecx
c00247dd:	76 09                	jbe    c00247e8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00247df:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00247e6:	eb 05                	jmp    c00247ed <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00247e8:	40                   	inc    eax
c00247e9:	eb da                	jmp    c00247c5 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00247eb:	31 c0                	xor    eax,eax
c00247ed:	5b                   	pop    ebx
c00247ee:	c3                   	ret    

c00247ef <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00247ef:	53                   	push   ebx
c00247f0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00247f4:	53                   	push   ebx
c00247f5:	e8 8c ff ff ff       	call   c0024786 <Thr::getDriverBaseFromAddress(unsigned long)>
c00247fa:	5a                   	pop    edx
c00247fb:	31 d2                	xor    edx,edx
c00247fd:	85 c0                	test   eax,eax
c00247ff:	74 04                	je     c0024805 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024801:	89 da                	mov    edx,ebx
c0024803:	29 c2                	sub    edx,eax
c0024805:	89 d0                	mov    eax,edx
c0024807:	5b                   	pop    ebx
c0024808:	c3                   	ret    

c0024809 <Thr::loadDLL(char const*, bool)>:
c0024809:	55                   	push   ebp
c002480a:	57                   	push   edi
c002480b:	56                   	push   esi
c002480c:	53                   	push   ebx
c002480d:	81 ec 34 01 00 00    	sub    esp,0x134
c0024813:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c002481a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0024821:	56                   	push   esi
c0024822:	68 f5 2d 03 c0       	push   0xc0032df5
c0024827:	e8 31 4a ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002482c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024833:	e8 86 1b ff ff       	call   c00163be <malloc>
c0024838:	83 c4 0c             	add    esp,0xc
c002483b:	89 c3                	mov    ebx,eax
c002483d:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024843:	56                   	push   esi
c0024844:	50                   	push   eax
c0024845:	e8 1a 5c ff ff       	call   c001a464 <File::File(char const*, Process*)>
c002484a:	83 c4 10             	add    esp,0x10
c002484d:	85 db                	test   ebx,ebx
c002484f:	75 3c                	jne    c002488d <Thr::loadDLL(char const*, bool)+0x84>
c0024851:	89 f8                	mov    eax,edi
c0024853:	84 c0                	test   al,al
c0024855:	0f 84 f3 01 00 00    	je     c0024a4e <Thr::loadDLL(char const*, bool)+0x245>
c002485b:	55                   	push   ebp
c002485c:	55                   	push   ebp
c002485d:	68 06 2e 03 c0       	push   0xc0032e06
c0024862:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0024866:	55                   	push   ebp
c0024867:	e8 d4 bd fd ff       	call   c0000640 <strcpy>
c002486c:	58                   	pop    eax
c002486d:	5a                   	pop    edx
c002486e:	56                   	push   esi
c002486f:	55                   	push   ebp
c0024870:	e8 cb bf fd ff       	call   c0000840 <strcat>
c0024875:	59                   	pop    ecx
c0024876:	58                   	pop    eax
c0024877:	68 1d 2e 03 c0       	push   0xc0032e1d
c002487c:	55                   	push   ebp
c002487d:	e8 be bf fd ff       	call   c0000840 <strcat>
c0024882:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024885:	e8 ec b9 ff ff       	call   c0020276 <KePanic(char const*)>
c002488a:	83 c4 10             	add    esp,0x10
c002488d:	51                   	push   ecx
c002488e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024892:	50                   	push   eax
c0024893:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024897:	50                   	push   eax
c0024898:	53                   	push   ebx
c0024899:	e8 e6 5e ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c002489e:	83 c4 10             	add    esp,0x10
c00248a1:	89 c5                	mov    ebp,eax
c00248a3:	85 db                	test   ebx,ebx
c00248a5:	74 0c                	je     c00248b3 <Thr::loadDLL(char const*, bool)+0xaa>
c00248a7:	83 ec 0c             	sub    esp,0xc
c00248aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00248ac:	53                   	push   ebx
c00248ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00248b0:	83 c4 10             	add    esp,0x10
c00248b3:	83 ec 0c             	sub    esp,0xc
c00248b6:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00248bb:	50                   	push   eax
c00248bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00248c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00248c4:	55                   	push   ebp
c00248c5:	68 1f 2e 03 c0       	push   0xc0032e1f
c00248ca:	e8 8e 49 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00248cf:	83 c4 20             	add    esp,0x20
c00248d2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00248d7:	75 0a                	jne    c00248e3 <Thr::loadDLL(char const*, bool)+0xda>
c00248d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00248dd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00248e1:	75 3c                	jne    c002491f <Thr::loadDLL(char const*, bool)+0x116>
c00248e3:	89 f8                	mov    eax,edi
c00248e5:	84 c0                	test   al,al
c00248e7:	0f 84 49 01 00 00    	je     c0024a36 <Thr::loadDLL(char const*, bool)+0x22d>
c00248ed:	51                   	push   ecx
c00248ee:	51                   	push   ecx
c00248ef:	68 40 2e 03 c0       	push   0xc0032e40
c00248f4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00248f8:	53                   	push   ebx
c00248f9:	e8 42 bd fd ff       	call   c0000640 <strcpy>
c00248fe:	5d                   	pop    ebp
c00248ff:	58                   	pop    eax
c0024900:	56                   	push   esi
c0024901:	53                   	push   ebx
c0024902:	e8 39 bf fd ff       	call   c0000840 <strcat>
c0024907:	58                   	pop    eax
c0024908:	5a                   	pop    edx
c0024909:	68 1d 2e 03 c0       	push   0xc0032e1d
c002490e:	53                   	push   ebx
c002490f:	e8 2c bf fd ff       	call   c0000840 <strcat>
c0024914:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024917:	e8 5a b9 ff ff       	call   c0020276 <KePanic(char const*)>
c002491c:	83 c4 10             	add    esp,0x10
c002491f:	52                   	push   edx
c0024920:	6a 03                	push   0x3
c0024922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024926:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002492a:	05 ff 0f 00 00       	add    eax,0xfff
c002492f:	83 d2 00             	adc    edx,0x0
c0024932:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024936:	50                   	push   eax
c0024937:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002493d:	e8 fa 3d ff ff       	call   c001873c <VAS::allocatePages(int, int)>
c0024942:	59                   	pop    ecx
c0024943:	89 c3                	mov    ebx,eax
c0024945:	5d                   	pop    ebp
c0024946:	50                   	push   eax
c0024947:	68 6e 12 03 c0       	push   0xc003126e
c002494c:	e8 0c 49 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0024951:	89 34 24             	mov    DWORD PTR [esp],esi
c0024954:	e8 17 bc fd ff       	call   c0000570 <strlen>
c0024959:	8b 2d 00 fa 03 c0    	mov    ebp,DWORD PTR ds:0xc003fa00
c002495f:	40                   	inc    eax
c0024960:	89 04 24             	mov    DWORD PTR [esp],eax
c0024963:	e8 56 1a ff ff       	call   c00163be <malloc>
c0024968:	89 04 ad 20 fe 03 c0 	mov    DWORD PTR [ebp*4-0x3ffc01e0],eax
c002496f:	58                   	pop    eax
c0024970:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024975:	5a                   	pop    edx
c0024976:	56                   	push   esi
c0024977:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c002497e:	e8 bd bc fd ff       	call   c0000640 <strcpy>
c0024983:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024988:	8d 50 01             	lea    edx,[eax+0x1]
c002498b:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024992:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024998:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002499c:	83 c4 0c             	add    esp,0xc
c002499f:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c00249a6:	6a 01                	push   0x1
c00249a8:	53                   	push   ebx
c00249a9:	56                   	push   esi
c00249aa:	e8 9e f6 ff ff       	call   c002404d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00249af:	83 c4 10             	add    esp,0x10
c00249b2:	0f b6 c0             	movzx  eax,al
c00249b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00249b9:	85 c0                	test   eax,eax
c00249bb:	0f 85 89 00 00 00    	jne    c0024a4a <Thr::loadDLL(char const*, bool)+0x241>
c00249c1:	89 f8                	mov    eax,edi
c00249c3:	84 c0                	test   al,al
c00249c5:	74 73                	je     c0024a3a <Thr::loadDLL(char const*, bool)+0x231>
c00249c7:	83 ec 0c             	sub    esp,0xc
c00249ca:	68 59 2e 03 c0       	push   0xc0032e59
c00249cf:	e8 a2 b8 ff ff       	call   c0020276 <KePanic(char const*)>
c00249d4:	83 c4 10             	add    esp,0x10
c00249d7:	eb 61                	jmp    c0024a3a <Thr::loadDLL(char const*, bool)+0x231>
c00249d9:	50                   	push   eax
c00249da:	50                   	push   eax
c00249db:	89 e8                	mov    eax,ebp
c00249dd:	c1 e0 0c             	shl    eax,0xc
c00249e0:	01 d8                	add    eax,ebx
c00249e2:	50                   	push   eax
c00249e3:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00249e9:	e8 36 38 ff ff       	call   c0018224 <VAS::getPageTableEntry(unsigned long)>
c00249ee:	83 c4 10             	add    esp,0x10
c00249f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00249f3:	a8 60                	test   al,0x60
c00249f5:	75 11                	jne    c0024a08 <Thr::loadDLL(char const*, bool)+0x1ff>
c00249f7:	83 ec 0c             	sub    esp,0xc
c00249fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00249ff:	50                   	push   eax
c0024a00:	e8 69 1c ff ff       	call   c001666e <Phys::freePage(unsigned long)>
c0024a05:	83 c4 10             	add    esp,0x10
c0024a08:	45                   	inc    ebp
c0024a09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a11:	05 ff 0f 00 00       	add    eax,0xfff
c0024a16:	bf 00 00 00 00       	mov    edi,0x0
c0024a1b:	83 d2 00             	adc    edx,0x0
c0024a1e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024a22:	c1 ea 0c             	shr    edx,0xc
c0024a25:	39 c5                	cmp    ebp,eax
c0024a27:	89 d1                	mov    ecx,edx
c0024a29:	89 f8                	mov    eax,edi
c0024a2b:	19 c8                	sbb    eax,ecx
c0024a2d:	72 aa                	jb     c00249d9 <Thr::loadDLL(char const*, bool)+0x1d0>
c0024a2f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024a34:	75 18                	jne    c0024a4e <Thr::loadDLL(char const*, bool)+0x245>
c0024a36:	31 db                	xor    ebx,ebx
c0024a38:	eb 14                	jmp    c0024a4e <Thr::loadDLL(char const*, bool)+0x245>
c0024a3a:	83 ec 0c             	sub    esp,0xc
c0024a3d:	68 78 2e 03 c0       	push   0xc0032e78
c0024a42:	e8 2f b8 ff ff       	call   c0020276 <KePanic(char const*)>
c0024a47:	83 c4 10             	add    esp,0x10
c0024a4a:	31 ed                	xor    ebp,ebp
c0024a4c:	eb bb                	jmp    c0024a09 <Thr::loadDLL(char const*, bool)+0x200>
c0024a4e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024a54:	89 d8                	mov    eax,ebx
c0024a56:	5b                   	pop    ebx
c0024a57:	5e                   	pop    esi
c0024a58:	5f                   	pop    edi
c0024a59:	5d                   	pop    ebp
c0024a5a:	c3                   	ret    

c0024a5b <Thr::executeDLL(unsigned long, void*)>:
c0024a5b:	56                   	push   esi
c0024a5c:	53                   	push   ebx
c0024a5d:	52                   	push   edx
c0024a5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a62:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024a66:	85 db                	test   ebx,ebx
c0024a68:	75 10                	jne    c0024a7a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024a6a:	83 ec 0c             	sub    esp,0xc
c0024a6d:	68 94 2e 03 c0       	push   0xc0032e94
c0024a72:	e8 ff b7 ff ff       	call   c0020276 <KePanic(char const*)>
c0024a77:	83 c4 10             	add    esp,0x10
c0024a7a:	50                   	push   eax
c0024a7b:	50                   	push   eax
c0024a7c:	53                   	push   ebx
c0024a7d:	68 be 2e 03 c0       	push   0xc0032ebe
c0024a82:	e8 d6 47 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0024a87:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024a8b:	89 d8                	mov    eax,ebx
c0024a8d:	83 c4 14             	add    esp,0x14
c0024a90:	5b                   	pop    ebx
c0024a91:	5e                   	pop    esi
c0024a92:	ff e0                	jmp    eax

c0024a94 <userModeEntryPoint(void*)>:
c0024a94:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024a99:	83 e8 01             	sub    eax,0x1
c0024a9c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024aa1:	75 01                	jne    c0024aa4 <userModeEntryPoint(void*)+0x10>
c0024aa3:	fb                   	sti    
c0024aa4:	fb                   	sti    
c0024aa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024aaa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024aad:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024ab3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024ab7:	e9 83 b7 fd ff       	jmp    c000023f <goToUsermode>

c0024abc <changeTSS>:
c0024abc:	83 ec 14             	sub    esp,0x14
c0024abf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024ac4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024ac7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024acc:	c1 e2 15             	shl    edx,0x15
c0024acf:	29 d0                	sub    eax,edx
c0024ad1:	50                   	push   eax
c0024ad2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024ad7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024add:	05 7c 11 00 00       	add    eax,0x117c
c0024ae2:	50                   	push   eax
c0024ae3:	e8 84 2d ff ff       	call   c001786c <TSS::setESP(unsigned long)>
c0024ae8:	83 c4 1c             	add    esp,0x1c
c0024aeb:	c3                   	ret    

c0024aec <switchToThread(ThreadControlBlock*)>:
c0024aec:	57                   	push   edi
c0024aed:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024af3:	56                   	push   esi
c0024af4:	85 c9                	test   ecx,ecx
c0024af6:	53                   	push   ebx
c0024af7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024afb:	0f 85 8b 00 00 00    	jne    c0024b8c <switchToThread(ThreadControlBlock*)+0xa0>
c0024b01:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024b05:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024b0b:	74 7b                	je     c0024b88 <switchToThread(ThreadControlBlock*)+0x9c>
c0024b0d:	b8 00 04 00 00       	mov    eax,0x400
c0024b12:	29 d0                	sub    eax,edx
c0024b14:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024b17:	d1 f8                	sar    eax,1
c0024b19:	01 d0                	add    eax,edx
c0024b1b:	90                   	nop
c0024b1c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024b1f:	e8 76 25 00 00       	call   c002709a <HalQueryPerformanceCounter()>
c0024b24:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024b29:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024b2f:	89 c6                	mov    esi,eax
c0024b31:	89 d7                	mov    edi,edx
c0024b33:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024b39:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024b3e:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024b44:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024b4a:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024b50:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024b56:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024b5c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024b5f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024b62:	01 c6                	add    esi,eax
c0024b64:	11 d7                	adc    edi,edx
c0024b66:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024b69:	83 ec 0c             	sub    esp,0xc
c0024b6c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024b6f:	53                   	push   ebx
c0024b70:	e8 02 b7 fd ff       	call   c0000277 <switchToThreadASM>
c0024b75:	0f 20 c0             	mov    eax,cr0
c0024b78:	83 c8 08             	or     eax,0x8
c0024b7b:	0f 22 c0             	mov    cr0,eax
c0024b7e:	83 c4 10             	add    esp,0x10
c0024b81:	5b                   	pop    ebx
c0024b82:	5e                   	pop    esi
c0024b83:	5f                   	pop    edi
c0024b84:	c3                   	ret    
c0024b85:	8d 76 00             	lea    esi,[esi+0x0]
c0024b88:	31 c0                	xor    eax,eax
c0024b8a:	eb 90                	jmp    c0024b1c <switchToThread(ThreadControlBlock*)+0x30>
c0024b8c:	5b                   	pop    ebx
c0024b8d:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024b97:	5e                   	pop    esi
c0024b98:	5f                   	pop    edi
c0024b99:	c3                   	ret    
c0024b9a:	66 90                	xchg   ax,ax

c0024b9c <Process::addArgs(char**)>:
c0024b9c:	57                   	push   edi
c0024b9d:	56                   	push   esi
c0024b9e:	53                   	push   ebx
c0024b9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024ba3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0024ba7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0024bb1:	85 ff                	test   edi,edi
c0024bb3:	74 4f                	je     c0024c04 <Process::addArgs(char**)+0x68>
c0024bb5:	8b 07                	mov    eax,DWORD PTR [edi]
c0024bb7:	85 c0                	test   eax,eax
c0024bb9:	74 49                	je     c0024c04 <Process::addArgs(char**)+0x68>
c0024bbb:	31 db                	xor    ebx,ebx
c0024bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0024bc0:	83 ec 0c             	sub    esp,0xc
c0024bc3:	50                   	push   eax
c0024bc4:	e8 a7 b9 fd ff       	call   c0000570 <strlen>
c0024bc9:	83 c0 01             	add    eax,0x1
c0024bcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0024bcf:	e8 ea 17 ff ff       	call   c00163be <malloc>
c0024bd4:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0024bdb:	5a                   	pop    edx
c0024bdc:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0024bdf:	59                   	pop    ecx
c0024be0:	83 c3 01             	add    ebx,0x1
c0024be3:	52                   	push   edx
c0024be4:	50                   	push   eax
c0024be5:	e8 56 ba fd ff       	call   c0000640 <strcpy>
c0024bea:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0024bf0:	83 c4 10             	add    esp,0x10
c0024bf3:	83 c1 01             	add    ecx,0x1
c0024bf6:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0024bfc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0024bff:	85 c0                	test   eax,eax
c0024c01:	75 bd                	jne    c0024bc0 <Process::addArgs(char**)+0x24>
c0024c03:	90                   	nop
c0024c04:	5b                   	pop    ebx
c0024c05:	5e                   	pop    esi
c0024c06:	5f                   	pop    edi
c0024c07:	c3                   	ret    

c0024c08 <Process::Process(char const*, Process*, char**)>:
c0024c08:	56                   	push   esi
c0024c09:	53                   	push   ebx
c0024c0a:	83 ec 14             	sub    esp,0x14
c0024c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c11:	05 0c 02 00 00       	add    eax,0x20c
c0024c16:	bb 07 00 00 00       	mov    ebx,0x7
c0024c1b:	89 c6                	mov    esi,eax
c0024c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0024c20:	85 db                	test   ebx,ebx
c0024c22:	78 14                	js     c0024c38 <Process::Process(char const*, Process*, char**)+0x30>
c0024c24:	83 ec 0c             	sub    esp,0xc
c0024c27:	56                   	push   esi
c0024c28:	e8 7b a3 00 00       	call   c002efa8 <ThreadControlBlock::ThreadControlBlock()>
c0024c2d:	83 c4 10             	add    esp,0x10
c0024c30:	83 c6 5f             	add    esi,0x5f
c0024c33:	83 eb 01             	sub    ebx,0x1
c0024c36:	eb e8                	jmp    c0024c20 <Process::Process(char const*, Process*, char**)+0x18>
c0024c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c3c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c47:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024c4e:	83 ec 0c             	sub    esp,0xc
c0024c51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c55:	e8 f6 b3 ff ff       	call   c0020050 <KeNewProcessEnv(Process*)>
c0024c5a:	83 c4 10             	add    esp,0x10
c0024c5d:	89 c2                	mov    edx,eax
c0024c5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c63:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c6d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024c76:	a1 e0 44 03 c0       	mov    eax,ds:0xc00344e0
c0024c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0024c7e:	89 15 e0 44 03 c0    	mov    DWORD PTR ds:0xc00344e0,edx
c0024c84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024c88:	89 02                	mov    DWORD PTR [edx],eax
c0024c8a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024c92:	83 ec 0c             	sub    esp,0xc
c0024c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c99:	e8 20 17 ff ff       	call   c00163be <malloc>
c0024c9e:	83 c4 10             	add    esp,0x10
c0024ca1:	89 c3                	mov    ebx,eax
c0024ca3:	83 ec 08             	sub    esp,0x8
c0024ca6:	6a 00                	push   0x0
c0024ca8:	53                   	push   ebx
c0024ca9:	e8 d2 3c ff ff       	call   c0018980 <VAS::VAS(bool)>
c0024cae:	83 c4 10             	add    esp,0x10
c0024cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cb5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cbf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ccd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024cd1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024cd7:	e8 cb bd ff ff       	call   c0020aa7 <KeInitSignals()>
c0024cdc:	89 c2                	mov    edx,eax
c0024cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ce2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024cf2:	85 c0                	test   eax,eax
c0024cf4:	74 42                	je     c0024d38 <Process::Process(char const*, Process*, char**)+0x130>
c0024cf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cfa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024d00:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024d06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d0a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024d10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d14:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024d1a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d24:	05 0c 01 00 00       	add    eax,0x10c
c0024d29:	83 ec 08             	sub    esp,0x8
c0024d2c:	52                   	push   edx
c0024d2d:	50                   	push   eax
c0024d2e:	e8 0d b9 fd ff       	call   c0000640 <strcpy>
c0024d33:	83 c4 10             	add    esp,0x10
c0024d36:	eb 64                	jmp    c0024d9c <Process::Process(char const*, Process*, char**)+0x194>
c0024d38:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024d40:	83 ec 0c             	sub    esp,0xc
c0024d43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024d47:	e8 72 16 ff ff       	call   c00163be <malloc>
c0024d4c:	83 c4 10             	add    esp,0x10
c0024d4f:	89 c3                	mov    ebx,eax
c0024d51:	83 ec 08             	sub    esp,0x8
c0024d54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d58:	53                   	push   ebx
c0024d59:	e8 20 28 ff ff       	call   c001757e <VgaText::VgaText(char const*)>
c0024d5e:	83 c4 10             	add    esp,0x10
c0024d61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d65:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024d6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024d75:	83 ec 0c             	sub    esp,0xc
c0024d78:	50                   	push   eax
c0024d79:	e8 9e 20 ff ff       	call   c0016e1c <addToTerminalCycle(VgaText*)>
c0024d7e:	83 c4 10             	add    esp,0x10
c0024d81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d85:	05 0c 01 00 00       	add    eax,0x10c
c0024d8a:	83 ec 08             	sub    esp,0x8
c0024d8d:	68 dd 2e 03 c0       	push   0xc0032edd
c0024d92:	50                   	push   eax
c0024d93:	e8 a8 b8 fd ff       	call   c0000640 <strcpy>
c0024d98:	83 c4 10             	add    esp,0x10
c0024d9b:	90                   	nop
c0024d9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024da0:	83 c0 0c             	add    eax,0xc
c0024da3:	83 ec 08             	sub    esp,0x8
c0024da6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024daa:	50                   	push   eax
c0024dab:	e8 90 b8 fd ff       	call   c0000640 <strcpy>
c0024db0:	83 c4 10             	add    esp,0x10
c0024db3:	83 ec 08             	sub    esp,0x8
c0024db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024dba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dbe:	e8 d9 fd ff ff       	call   c0024b9c <Process::addArgs(char**)>
c0024dc3:	83 c4 10             	add    esp,0x10
c0024dc6:	83 ec 08             	sub    esp,0x8
c0024dc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dd1:	e8 45 ed ff ff       	call   c0023b1b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024dd6:	83 c4 10             	add    esp,0x10
c0024dd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ddd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024de1:	83 f0 01             	xor    eax,0x1
c0024de4:	88 c2                	mov    dl,al
c0024de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024dea:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024df0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024df5:	83 ec 04             	sub    esp,0x4
c0024df8:	50                   	push   eax
c0024df9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dfd:	68 34 2f 03 c0       	push   0xc0032f34
c0024e02:	e8 56 44 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0024e07:	83 c4 10             	add    esp,0x10
c0024e0a:	90                   	nop
c0024e0b:	83 c4 14             	add    esp,0x14
c0024e0e:	5b                   	pop    ebx
c0024e0f:	5e                   	pop    esi
c0024e10:	c3                   	ret    
c0024e11:	90                   	nop
c0024e12:	66 90                	xchg   ax,ax

c0024e14 <Process::Process(bool, char const*, Process*, char**)>:
c0024e14:	56                   	push   esi
c0024e15:	53                   	push   ebx
c0024e16:	83 ec 24             	sub    esp,0x24
c0024e19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0024e1d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024e21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e25:	05 0c 02 00 00       	add    eax,0x20c
c0024e2a:	bb 07 00 00 00       	mov    ebx,0x7
c0024e2f:	89 c6                	mov    esi,eax
c0024e31:	8d 76 00             	lea    esi,[esi+0x0]
c0024e34:	85 db                	test   ebx,ebx
c0024e36:	78 14                	js     c0024e4c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024e38:	83 ec 0c             	sub    esp,0xc
c0024e3b:	56                   	push   esi
c0024e3c:	e8 67 a1 00 00       	call   c002efa8 <ThreadControlBlock::ThreadControlBlock()>
c0024e41:	83 c4 10             	add    esp,0x10
c0024e44:	83 c6 5f             	add    esi,0x5f
c0024e47:	83 eb 01             	sub    ebx,0x1
c0024e4a:	eb e8                	jmp    c0024e34 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024e4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e50:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024e57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e5b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024e62:	83 ec 0c             	sub    esp,0xc
c0024e65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e69:	e8 e2 b1 ff ff       	call   c0020050 <KeNewProcessEnv(Process*)>
c0024e6e:	83 c4 10             	add    esp,0x10
c0024e71:	89 c2                	mov    edx,eax
c0024e73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e77:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024e7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e81:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024e8a:	a1 e0 44 03 c0       	mov    eax,ds:0xc00344e0
c0024e8f:	8d 50 01             	lea    edx,[eax+0x1]
c0024e92:	89 15 e0 44 03 c0    	mov    DWORD PTR ds:0xc00344e0,edx
c0024e98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024e9c:	89 02                	mov    DWORD PTR [edx],eax
c0024e9e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0024ea6:	83 ec 0c             	sub    esp,0xc
c0024ea9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024ead:	e8 0c 15 ff ff       	call   c00163be <malloc>
c0024eb2:	83 c4 10             	add    esp,0x10
c0024eb5:	89 c3                	mov    ebx,eax
c0024eb7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024ebc:	83 ec 08             	sub    esp,0x8
c0024ebf:	50                   	push   eax
c0024ec0:	53                   	push   ebx
c0024ec1:	e8 ba 3a ff ff       	call   c0018980 <VAS::VAS(bool)>
c0024ec6:	83 c4 10             	add    esp,0x10
c0024ec9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ecd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024ed3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ed7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024ee1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ee5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024ee9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024eef:	e8 b3 bb ff ff       	call   c0020aa7 <KeInitSignals()>
c0024ef4:	89 c2                	mov    edx,eax
c0024ef6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024efa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024f00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f0a:	85 c0                	test   eax,eax
c0024f0c:	74 42                	je     c0024f50 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0024f0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f12:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f18:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024f1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f22:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024f28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f2c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f32:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024f38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f3c:	05 0c 01 00 00       	add    eax,0x10c
c0024f41:	83 ec 08             	sub    esp,0x8
c0024f44:	52                   	push   edx
c0024f45:	50                   	push   eax
c0024f46:	e8 f5 b6 fd ff       	call   c0000640 <strcpy>
c0024f4b:	83 c4 10             	add    esp,0x10
c0024f4e:	eb 64                	jmp    c0024fb4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024f50:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024f58:	83 ec 0c             	sub    esp,0xc
c0024f5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024f5f:	e8 5a 14 ff ff       	call   c00163be <malloc>
c0024f64:	83 c4 10             	add    esp,0x10
c0024f67:	89 c3                	mov    ebx,eax
c0024f69:	83 ec 08             	sub    esp,0x8
c0024f6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024f70:	53                   	push   ebx
c0024f71:	e8 08 26 ff ff       	call   c001757e <VgaText::VgaText(char const*)>
c0024f76:	83 c4 10             	add    esp,0x10
c0024f79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f7d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024f83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024f8d:	83 ec 0c             	sub    esp,0xc
c0024f90:	50                   	push   eax
c0024f91:	e8 86 1e ff ff       	call   c0016e1c <addToTerminalCycle(VgaText*)>
c0024f96:	83 c4 10             	add    esp,0x10
c0024f99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f9d:	05 0c 01 00 00       	add    eax,0x10c
c0024fa2:	83 ec 08             	sub    esp,0x8
c0024fa5:	68 dd 2e 03 c0       	push   0xc0032edd
c0024faa:	50                   	push   eax
c0024fab:	e8 90 b6 fd ff       	call   c0000640 <strcpy>
c0024fb0:	83 c4 10             	add    esp,0x10
c0024fb3:	90                   	nop
c0024fb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024fb8:	83 c0 0c             	add    eax,0xc
c0024fbb:	83 ec 08             	sub    esp,0x8
c0024fbe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024fc2:	50                   	push   eax
c0024fc3:	e8 78 b6 fd ff       	call   c0000640 <strcpy>
c0024fc8:	83 c4 10             	add    esp,0x10
c0024fcb:	83 ec 08             	sub    esp,0x8
c0024fce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024fd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fd6:	e8 c1 fb ff ff       	call   c0024b9c <Process::addArgs(char**)>
c0024fdb:	83 c4 10             	add    esp,0x10
c0024fde:	90                   	nop
c0024fdf:	83 c4 24             	add    esp,0x24
c0024fe2:	5b                   	pop    ebx
c0024fe3:	5e                   	pop    esi
c0024fe4:	c3                   	ret    
c0024fe5:	8d 76 00             	lea    esi,[esi+0x0]

c0024fe8 <taskStartupFunction>:
c0024fe8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024fed:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0024ff0:	c3                   	ret    
c0024ff1:	8d 76 00             	lea    esi,[esi+0x0]

c0024ff4 <KeDisablePreemption()>:
c0024ff4:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024ff9:	85 c0                	test   eax,eax
c0024ffb:	75 13                	jne    c0025010 <KeDisablePreemption()+0x1c>
c0024ffd:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0025003:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c002500a:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0025010:	83 c0 01             	add    eax,0x1
c0025013:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0025018:	c3                   	ret    
c0025019:	8d 76 00             	lea    esi,[esi+0x0]

c002501c <KeRestorePreemption()>:
c002501c:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0025021:	83 e8 01             	sub    eax,0x1
c0025024:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0025029:	75 0d                	jne    c0025038 <KeRestorePreemption()+0x1c>
c002502b:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0025030:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0025035:	8d 76 00             	lea    esi,[esi+0x0]
c0025038:	c3                   	ret    
c0025039:	90                   	nop
c002503a:	66 90                	xchg   ax,ax

c002503c <Process::createThread(void (*)(void*), void*, int)>:
c002503c:	57                   	push   edi
c002503d:	31 c9                	xor    ecx,ecx
c002503f:	56                   	push   esi
c0025040:	53                   	push   ebx
c0025041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025045:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c002504c:	89 f2                	mov    edx,esi
c002504e:	66 90                	xchg   ax,ax
c0025050:	0f b7 c2             	movzx  eax,dx
c0025053:	80 e2 01             	and    dl,0x1
c0025056:	74 14                	je     c002506c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0025058:	d1 f8                	sar    eax,1
c002505a:	83 c1 01             	add    ecx,0x1
c002505d:	89 c2                	mov    edx,eax
c002505f:	83 f9 10             	cmp    ecx,0x10
c0025062:	75 ec                	jne    c0025050 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0025064:	31 db                	xor    ebx,ebx
c0025066:	89 d8                	mov    eax,ebx
c0025068:	5b                   	pop    ebx
c0025069:	5e                   	pop    esi
c002506a:	5f                   	pop    edi
c002506b:	c3                   	ret    
c002506c:	b8 01 00 00 00       	mov    eax,0x1
c0025071:	d3 e0                	shl    eax,cl
c0025073:	09 c6                	or     esi,eax
c0025075:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0025078:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c002507f:	01 c0                	add    eax,eax
c0025081:	01 c8                	add    eax,ecx
c0025083:	8d 04 80             	lea    eax,[eax+eax*4]
c0025086:	01 d8                	add    eax,ebx
c0025088:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c002508f:	75 0b                	jne    c002509c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0025091:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c002509b:	90                   	nop
c002509c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00250a2:	83 ec 0c             	sub    esp,0xc
c00250a5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00250a8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00250ab:	01 c0                	add    eax,eax
c00250ad:	01 c8                	add    eax,ecx
c00250af:	8d 3c 80             	lea    edi,[eax+eax*4]
c00250b2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00250b5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00250bb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00250c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00250c5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00250cb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00250d1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00250d7:	89 ca                	mov    edx,ecx
c00250d9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00250e0:	f7 da                	neg    edx
c00250e2:	c1 e2 15             	shl    edx,0x15
c00250e5:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00250eb:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00250f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00250f5:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00250ff:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0025105:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025109:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c002510f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0025119:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0025123:	68 00 01 00 00       	push   0x100
c0025128:	e8 91 12 ff ff       	call   c00163be <malloc>
c002512d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0025130:	58                   	pop    eax
c0025131:	5a                   	pop    edx
c0025132:	53                   	push   ebx
c0025133:	68 ec 01 04 c0       	push   0xc00401ec
c0025138:	e8 03 9c 00 00       	call   c002ed40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002513d:	83 c4 10             	add    esp,0x10
c0025140:	89 d8                	mov    eax,ebx
c0025142:	5b                   	pop    ebx
c0025143:	5e                   	pop    esi
c0025144:	5f                   	pop    edi
c0025145:	c3                   	ret    
c0025146:	66 90                	xchg   ax,ax

c0025148 <Process::createUserThread()>:
c0025148:	83 ec 0c             	sub    esp,0xc
c002514b:	68 80 00 00 00       	push   0x80
c0025150:	6a 00                	push   0x0
c0025152:	68 94 4a 02 c0       	push   0xc0024a94
c0025157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002515b:	50                   	push   eax
c002515c:	e8 db fe ff ff       	call   c002503c <Process::createThread(void (*)(void*), void*, int)>
c0025161:	83 c4 1c             	add    esp,0x1c
c0025164:	c3                   	ret    
c0025165:	8d 76 00             	lea    esi,[esi+0x0]

c0025168 <setupMultitasking(void (*)())>:
c0025168:	56                   	push   esi
c0025169:	53                   	push   ebx
c002516a:	83 ec 04             	sub    esp,0x4
c002516d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025171:	eb 11                	jmp    c0025184 <setupMultitasking(void (*)())+0x1c>
c0025173:	90                   	nop
c0025174:	83 ec 0c             	sub    esp,0xc
c0025177:	68 ec 01 04 c0       	push   0xc00401ec
c002517c:	e8 03 9b 00 00       	call   c002ec84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025181:	83 c4 10             	add    esp,0x10
c0025184:	83 ec 0c             	sub    esp,0xc
c0025187:	68 ec 01 04 c0       	push   0xc00401ec
c002518c:	e8 cf 9a 00 00       	call   c002ec60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025191:	83 c4 10             	add    esp,0x10
c0025194:	84 c0                	test   al,al
c0025196:	74 dc                	je     c0025174 <setupMultitasking(void (*)())+0xc>
c0025198:	83 ec 0c             	sub    esp,0xc
c002519b:	68 24 07 00 00       	push   0x724
c00251a0:	e8 19 12 ff ff       	call   c00163be <malloc>
c00251a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00251ac:	89 c3                	mov    ebx,eax
c00251ae:	6a 00                	push   0x0
c00251b0:	68 e1 2e 03 c0       	push   0xc0032ee1
c00251b5:	6a 01                	push   0x1
c00251b7:	50                   	push   eax
c00251b8:	e8 57 fc ff ff       	call   c0024e14 <Process::Process(bool, char const*, Process*, char**)>
c00251bd:	83 c4 14             	add    esp,0x14
c00251c0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00251c6:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c00251cc:	50                   	push   eax
c00251cd:	e8 9f 1e ff ff       	call   c0017071 <setActiveTerminal(VgaText*)>
c00251d2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00251d9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00251e3:	83 c8 01             	or     eax,0x1
c00251e6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00251ed:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00251f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00251f6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025200:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0025206:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c002520c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0025216:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025220:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c002522a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025230:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c002523a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025240:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c002524a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025251:	e8 68 11 ff ff       	call   c00163be <malloc>
c0025256:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c002525c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025262:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025268:	5a                   	pop    edx
c0025269:	59                   	pop    ecx
c002526a:	68 dd 2e 03 c0       	push   0xc0032edd
c002526f:	50                   	push   eax
c0025270:	e8 cb b3 fd ff       	call   c0000640 <strcpy>
c0025275:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c002527c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025280:	83 c4 14             	add    esp,0x14
c0025283:	5b                   	pop    ebx
c0025284:	5e                   	pop    esi
c0025285:	e9 df af fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c002528a:	66 90                	xchg   ax,ax

c002528c <schedule()>:
c002528c:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c0025292:	85 d2                	test   edx,edx
c0025294:	74 0e                	je     c00252a4 <schedule()+0x18>
c0025296:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c00252a0:	c3                   	ret    
c00252a1:	8d 76 00             	lea    esi,[esi+0x0]
c00252a4:	53                   	push   ebx
c00252a5:	83 ec 14             	sub    esp,0x14
c00252a8:	68 ec 01 04 c0       	push   0xc00401ec
c00252ad:	e8 ae 99 00 00       	call   c002ec60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00252b2:	83 c4 10             	add    esp,0x10
c00252b5:	84 c0                	test   al,al
c00252b7:	75 3f                	jne    c00252f8 <schedule()+0x6c>
c00252b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00252c1:	83 fa 01             	cmp    edx,0x1
c00252c4:	74 3a                	je     c0025300 <schedule()+0x74>
c00252c6:	66 90                	xchg   ax,ax
c00252c8:	83 ec 0c             	sub    esp,0xc
c00252cb:	68 ec 01 04 c0       	push   0xc00401ec
c00252d0:	e8 a7 99 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00252d5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00252dc:	89 c3                	mov    ebx,eax
c00252de:	e8 a1 99 00 00       	call   c002ec84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00252e3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00252ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00252ed:	e8 fa f7 ff ff       	call   c0024aec <switchToThread(ThreadControlBlock*)>
c00252f2:	83 c4 10             	add    esp,0x10
c00252f5:	8d 76 00             	lea    esi,[esi+0x0]
c00252f8:	83 c4 08             	add    esp,0x8
c00252fb:	5b                   	pop    ebx
c00252fc:	c3                   	ret    
c00252fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025300:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0025307:	83 ec 08             	sub    esp,0x8
c002530a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002530f:	50                   	push   eax
c0025310:	68 ec 01 04 c0       	push   0xc00401ec
c0025315:	e8 26 9a 00 00       	call   c002ed40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002531a:	83 c4 10             	add    esp,0x10
c002531d:	eb a9                	jmp    c00252c8 <schedule()+0x3c>
c002531f:	90                   	nop

c0025320 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025320:	83 ec 0c             	sub    esp,0xc
c0025323:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025328:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002532c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002532f:	e8 58 ff ff ff       	call   c002528c <schedule()>
c0025334:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025339:	83 e8 01             	sub    eax,0x1
c002533c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025341:	75 01                	jne    c0025344 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0025343:	fb                   	sti    
c0025344:	83 c4 0c             	add    esp,0xc
c0025347:	c3                   	ret    

c0025348 <blockTask(TaskState)>:
c0025348:	83 ec 0c             	sub    esp,0xc
c002534b:	fa                   	cli    
c002534c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025351:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025355:	83 c0 01             	add    eax,0x1
c0025358:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002535d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025362:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025365:	e8 22 ff ff ff       	call   c002528c <schedule()>
c002536a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002536f:	83 e8 01             	sub    eax,0x1
c0025372:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025377:	75 03                	jne    c002537c <blockTask(TaskState)+0x34>
c0025379:	fb                   	sti    
c002537a:	66 90                	xchg   ax,ax
c002537c:	83 c4 0c             	add    esp,0xc
c002537f:	c3                   	ret    

c0025380 <waitTask(int, int*, int)>:
c0025380:	83 ec 18             	sub    esp,0x18
c0025383:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025388:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002538c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c002538f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025398:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c002539b:	6a 07                	push   0x7
c002539d:	e8 a6 ff ff ff       	call   c0025348 <blockTask(TaskState)>
c00253a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253a7:	83 c4 10             	add    esp,0x10
c00253aa:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00253ad:	85 d2                	test   edx,edx
c00253af:	74 0b                	je     c00253bc <waitTask(int, int*, int)+0x3c>
c00253b1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00253b4:	89 02                	mov    DWORD PTR [edx],eax
c00253b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253bb:	90                   	nop
c00253bc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00253bf:	83 c4 0c             	add    esp,0xc
c00253c2:	c3                   	ret    
c00253c3:	90                   	nop

c00253c4 <milliTenthSleepUntil(unsigned int)>:
c00253c4:	83 ec 0c             	sub    esp,0xc
c00253c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cb:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c00253d1:	76 05                	jbe    c00253d8 <milliTenthSleepUntil(unsigned int)+0x14>
c00253d3:	90                   	nop
c00253d4:	83 c4 0c             	add    esp,0xc
c00253d7:	c3                   	ret    
c00253d8:	fa                   	cli    
c00253d9:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00253df:	83 ec 08             	sub    esp,0x8
c00253e2:	83 c2 01             	add    edx,0x1
c00253e5:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00253eb:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00253f1:	83 c1 01             	add    ecx,0x1
c00253f4:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00253fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025400:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0025403:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025408:	50                   	push   eax
c0025409:	68 e0 01 04 c0       	push   0xc00401e0
c002540e:	e8 2d 99 00 00       	call   c002ed40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025413:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c002541a:	e8 29 ff ff ff       	call   c0025348 <blockTask(TaskState)>
c002541f:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025424:	83 c4 10             	add    esp,0x10
c0025427:	83 e8 01             	sub    eax,0x1
c002542a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002542f:	85 c0                	test   eax,eax
c0025431:	75 09                	jne    c002543c <milliTenthSleepUntil(unsigned int)+0x78>
c0025433:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025438:	85 c0                	test   eax,eax
c002543a:	75 14                	jne    c0025450 <milliTenthSleepUntil(unsigned int)+0x8c>
c002543c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025441:	83 e8 01             	sub    eax,0x1
c0025444:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025449:	75 89                	jne    c00253d4 <milliTenthSleepUntil(unsigned int)+0x10>
c002544b:	fb                   	sti    
c002544c:	83 c4 0c             	add    esp,0xc
c002544f:	c3                   	ret    
c0025450:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002545a:	e8 2d fe ff ff       	call   c002528c <schedule()>
c002545f:	eb db                	jmp    c002543c <milliTenthSleepUntil(unsigned int)+0x78>
c0025461:	8d 76 00             	lea    esi,[esi+0x0]

c0025464 <milliTenthSleep(unsigned int)>:
c0025464:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025468:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c002546d:	01 c2                	add    edx,eax
c002546f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025473:	e9 4c ff ff ff       	jmp    c00253c4 <milliTenthSleepUntil(unsigned int)>

c0025478 <sleep(unsigned int)>:
c0025478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002547c:	8d 04 80             	lea    eax,[eax+eax*4]
c002547f:	8d 04 80             	lea    eax,[eax+eax*4]
c0025482:	8d 04 80             	lea    eax,[eax+eax*4]
c0025485:	8d 04 80             	lea    eax,[eax+eax*4]
c0025488:	c1 e0 04             	shl    eax,0x4
c002548b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002548f:	eb d3                	jmp    c0025464 <milliTenthSleep(unsigned int)>
c0025491:	8d 76 00             	lea    esi,[esi+0x0]

c0025494 <taskReturned>:
c0025494:	83 ec 18             	sub    esp,0x18
c0025497:	68 60 2f 03 c0       	push   0xc0032f60
c002549c:	e8 d5 ad ff ff       	call   c0020276 <KePanic(char const*)>
c00254a1:	83 c4 10             	add    esp,0x10
c00254a4:	83 ec 0c             	sub    esp,0xc
c00254a7:	6a 02                	push   0x2
c00254a9:	e8 9a fe ff ff       	call   c0025348 <blockTask(TaskState)>
c00254ae:	fa                   	cli    
c00254af:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254b4:	83 c0 01             	add    eax,0x1
c00254b7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254bc:	e8 cb fd ff ff       	call   c002528c <schedule()>
c00254c1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254c6:	83 c4 10             	add    esp,0x10
c00254c9:	83 e8 01             	sub    eax,0x1
c00254cc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254d1:	85 c0                	test   eax,eax
c00254d3:	75 cf                	jne    c00254a4 <taskReturned+0x10>
c00254d5:	fb                   	sti    
c00254d6:	eb cc                	jmp    c00254a4 <taskReturned+0x10>

c00254d8 <Thr::processFromPID(int)>:
c00254d8:	57                   	push   edi
c00254d9:	56                   	push   esi
c00254da:	53                   	push   ebx
c00254db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00254df:	fa                   	cli    
c00254e0:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c00254e6:	83 ec 0c             	sub    esp,0xc
c00254e9:	83 c1 01             	add    ecx,0x1
c00254ec:	68 ec 01 04 c0       	push   0xc00401ec
c00254f1:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c00254f7:	e8 80 97 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254fc:	83 c4 10             	add    esp,0x10
c00254ff:	89 c7                	mov    edi,eax
c0025501:	eb 15                	jmp    c0025518 <Thr::processFromPID(int)+0x40>
c0025503:	90                   	nop
c0025504:	83 ec 0c             	sub    esp,0xc
c0025507:	68 ec 01 04 c0       	push   0xc00401ec
c002550c:	e8 6b 97 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025511:	83 c4 10             	add    esp,0x10
c0025514:	39 f8                	cmp    eax,edi
c0025516:	74 50                	je     c0025568 <Thr::processFromPID(int)+0x90>
c0025518:	83 ec 0c             	sub    esp,0xc
c002551b:	68 ec 01 04 c0       	push   0xc00401ec
c0025520:	e8 57 97 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025525:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c002552c:	89 c3                	mov    ebx,eax
c002552e:	e8 51 97 00 00       	call   c002ec84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025533:	58                   	pop    eax
c0025534:	5a                   	pop    edx
c0025535:	53                   	push   ebx
c0025536:	68 ec 01 04 c0       	push   0xc00401ec
c002553b:	e8 00 98 00 00       	call   c002ed40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025540:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025543:	83 c4 10             	add    esp,0x10
c0025546:	39 30                	cmp    DWORD PTR [eax],esi
c0025548:	75 ba                	jne    c0025504 <Thr::processFromPID(int)+0x2c>
c002554a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002554f:	83 e8 01             	sub    eax,0x1
c0025552:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025557:	74 0b                	je     c0025564 <Thr::processFromPID(int)+0x8c>
c0025559:	8d 76 00             	lea    esi,[esi+0x0]
c002555c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002555f:	5b                   	pop    ebx
c0025560:	5e                   	pop    esi
c0025561:	5f                   	pop    edi
c0025562:	c3                   	ret    
c0025563:	90                   	nop
c0025564:	fb                   	sti    
c0025565:	eb f5                	jmp    c002555c <Thr::processFromPID(int)+0x84>
c0025567:	90                   	nop
c0025568:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002556d:	83 e8 01             	sub    eax,0x1
c0025570:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025575:	75 05                	jne    c002557c <Thr::processFromPID(int)+0xa4>
c0025577:	fb                   	sti    
c0025578:	5b                   	pop    ebx
c0025579:	5e                   	pop    esi
c002557a:	5f                   	pop    edi
c002557b:	c3                   	ret    
c002557c:	5b                   	pop    ebx
c002557d:	31 c0                	xor    eax,eax
c002557f:	5e                   	pop    esi
c0025580:	5f                   	pop    edi
c0025581:	c3                   	ret    
c0025582:	66 90                	xchg   ax,ax

c0025584 <unblockTask(ThreadControlBlock*)>:
c0025584:	53                   	push   ebx
c0025585:	83 ec 08             	sub    esp,0x8
c0025588:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002558c:	fa                   	cli    
c002558d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025592:	83 c0 01             	add    eax,0x1
c0025595:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002559a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c002559d:	85 c0                	test   eax,eax
c002559f:	74 67                	je     c0025608 <unblockTask(ThreadControlBlock*)+0x84>
c00255a1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00255a4:	83 f8 01             	cmp    eax,0x1
c00255a7:	74 37                	je     c00255e0 <unblockTask(ThreadControlBlock*)+0x5c>
c00255a9:	83 ec 0c             	sub    esp,0xc
c00255ac:	68 ec 01 04 c0       	push   0xc00401ec
c00255b1:	e8 c6 96 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00255b6:	83 c4 10             	add    esp,0x10
c00255b9:	85 c0                	test   eax,eax
c00255bb:	75 1b                	jne    c00255d8 <unblockTask(ThreadControlBlock*)+0x54>
c00255bd:	eb 5d                	jmp    c002561c <unblockTask(ThreadControlBlock*)+0x98>
c00255bf:	90                   	nop
c00255c0:	83 ec 08             	sub    esp,0x8
c00255c3:	50                   	push   eax
c00255c4:	68 ec 01 04 c0       	push   0xc00401ec
c00255c9:	e8 ce 99 00 00       	call   c002ef9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00255ce:	83 c4 10             	add    esp,0x10
c00255d1:	85 c0                	test   eax,eax
c00255d3:	74 47                	je     c002561c <unblockTask(ThreadControlBlock*)+0x98>
c00255d5:	8d 76 00             	lea    esi,[esi+0x0]
c00255d8:	39 c3                	cmp    ebx,eax
c00255da:	75 e4                	jne    c00255c0 <unblockTask(ThreadControlBlock*)+0x3c>
c00255dc:	eb 12                	jmp    c00255f0 <unblockTask(ThreadControlBlock*)+0x6c>
c00255de:	66 90                	xchg   ax,ax
c00255e0:	83 ec 0c             	sub    esp,0xc
c00255e3:	68 ff 2e 03 c0       	push   0xc0032eff
c00255e8:	e8 70 3c ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00255ed:	83 c4 10             	add    esp,0x10
c00255f0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255f5:	83 e8 01             	sub    eax,0x1
c00255f8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255fd:	75 01                	jne    c0025600 <unblockTask(ThreadControlBlock*)+0x7c>
c00255ff:	fb                   	sti    
c0025600:	83 c4 08             	add    esp,0x8
c0025603:	5b                   	pop    ebx
c0025604:	c3                   	ret    
c0025605:	8d 76 00             	lea    esi,[esi+0x0]
c0025608:	83 ec 0c             	sub    esp,0xc
c002560b:	68 e8 2e 03 c0       	push   0xc0032ee8
c0025610:	e8 48 3c ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0025615:	83 c4 10             	add    esp,0x10
c0025618:	eb d6                	jmp    c00255f0 <unblockTask(ThreadControlBlock*)+0x6c>
c002561a:	66 90                	xchg   ax,ax
c002561c:	83 ec 08             	sub    esp,0x8
c002561f:	53                   	push   ebx
c0025620:	68 ec 01 04 c0       	push   0xc00401ec
c0025625:	e8 16 97 00 00       	call   c002ed40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002562a:	83 c4 10             	add    esp,0x10
c002562d:	eb c1                	jmp    c00255f0 <unblockTask(ThreadControlBlock*)+0x6c>
c002562f:	90                   	nop

c0025630 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025630:	55                   	push   ebp
c0025631:	57                   	push   edi
c0025632:	56                   	push   esi
c0025633:	53                   	push   ebx
c0025634:	83 ec 1c             	sub    esp,0x1c
c0025637:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002563b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002563e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025644:	85 ed                	test   ebp,ebp
c0025646:	7e 28                	jle    c0025670 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025648:	31 f6                	xor    esi,esi
c002564a:	66 90                	xchg   ax,ax
c002564c:	83 ec 0c             	sub    esp,0xc
c002564f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025656:	83 c6 01             	add    esi,0x1
c0025659:	57                   	push   edi
c002565a:	e8 7f 0d ff ff       	call   c00163de <free>
c002565f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025662:	83 c4 10             	add    esp,0x10
c0025665:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c002566b:	7f df                	jg     c002564c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c002566d:	8d 76 00             	lea    esi,[esi+0x0]
c0025670:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c002567a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002567f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025682:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025685:	d3 c0                	rol    eax,cl
c0025687:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c002568e:	21 c8                	and    eax,ecx
c0025690:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025697:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002569a:	89 f7                	mov    edi,esi
c002569c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00256a4:	0f 85 72 01 00 00    	jne    c002581c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00256aa:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00256b0:	85 ed                	test   ebp,ebp
c00256b2:	74 1c                	je     c00256d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00256b4:	83 ec 0c             	sub    esp,0xc
c00256b7:	55                   	push   ebp
c00256b8:	e8 af a8 ff ff       	call   c001ff6c <EnvVarContainer::~EnvVarContainer()>
c00256bd:	59                   	pop    ecx
c00256be:	5e                   	pop    esi
c00256bf:	6a 0c                	push   0xc
c00256c1:	55                   	push   ebp
c00256c2:	e8 69 3a ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c00256c7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00256ca:	83 c4 10             	add    esp,0x10
c00256cd:	89 f7                	mov    edi,esi
c00256cf:	90                   	nop
c00256d0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00256d6:	85 c0                	test   eax,eax
c00256d8:	0f 84 b2 00 00 00    	je     c0025790 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00256de:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00256e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00256e5:	31 c9                	xor    ecx,ecx
c00256e7:	eb 17                	jmp    c0025700 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00256e9:	8d 76 00             	lea    esi,[esi+0x0]
c00256ec:	83 c1 01             	add    ecx,0x1
c00256ef:	83 f9 10             	cmp    ecx,0x10
c00256f2:	0f 84 98 00 00 00    	je     c0025790 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00256f8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00256fe:	66 90                	xchg   ax,ax
c0025700:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0025707:	d3 fa                	sar    edx,cl
c0025709:	80 e2 01             	and    dl,0x1
c002570c:	74 de                	je     c00256ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002570e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0025711:	01 d2                	add    edx,edx
c0025713:	01 ca                	add    edx,ecx
c0025715:	8d 14 92             	lea    edx,[edx+edx*4]
c0025718:	01 d0                	add    eax,edx
c002571a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025720:	83 fd 07             	cmp    ebp,0x7
c0025723:	75 c7                	jne    c00256ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025725:	05 40 02 00 00       	add    eax,0x240
c002572a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c002572d:	83 fd ff             	cmp    ebp,0xffffffff
c0025730:	0f 8c ee 00 00 00    	jl     c0025824 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025736:	0f 84 ac 01 00 00    	je     c00258e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c002573c:	85 ed                	test   ebp,ebp
c002573e:	0f 84 90 01 00 00    	je     c00258d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025744:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025746:	75 a4                	jne    c00256ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025748:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002574e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025752:	01 d0                	add    eax,edx
c0025754:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025758:	83 ec 0c             	sub    esp,0xc
c002575b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025761:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025764:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002576a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025771:	50                   	push   eax
c0025772:	e8 0d fe ff ff       	call   c0025584 <unblockTask(ThreadControlBlock*)>
c0025777:	83 c4 10             	add    esp,0x10
c002577a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002577d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025781:	89 f7                	mov    edi,esi
c0025783:	83 c1 01             	add    ecx,0x1
c0025786:	83 f9 10             	cmp    ecx,0x10
c0025789:	0f 85 69 ff ff ff    	jne    c00256f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c002578f:	90                   	nop
c0025790:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025796:	85 c0                	test   eax,eax
c0025798:	74 62                	je     c00257fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c002579a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00257a0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00257a6:	74 54                	je     c00257fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00257a8:	83 ec 0c             	sub    esp,0xc
c00257ab:	68 ec 01 04 c0       	push   0xc00401ec
c00257b0:	e8 c7 94 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257b5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00257bc:	89 c7                	mov    edi,eax
c00257be:	e8 9d 94 00 00       	call   c002ec60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00257c3:	83 c4 10             	add    esp,0x10
c00257c6:	84 c0                	test   al,al
c00257c8:	0f 84 ce 00 00 00    	je     c002589c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00257ce:	66 90                	xchg   ax,ax
c00257d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257d3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00257d9:	85 d2                	test   edx,edx
c00257db:	74 0f                	je     c00257ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00257dd:	83 ec 0c             	sub    esp,0xc
c00257e0:	8b 02                	mov    eax,DWORD PTR [edx]
c00257e2:	52                   	push   edx
c00257e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00257e6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257e9:	83 c4 10             	add    esp,0x10
c00257ec:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00257f6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00257f9:	8d 76 00             	lea    esi,[esi+0x0]
c00257fc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025802:	85 db                	test   ebx,ebx
c0025804:	74 16                	je     c002581c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025806:	83 ec 0c             	sub    esp,0xc
c0025809:	53                   	push   ebx
c002580a:	e8 bb 2c ff ff       	call   c00184ca <VAS::~VAS()>
c002580f:	58                   	pop    eax
c0025810:	5a                   	pop    edx
c0025811:	6a 14                	push   0x14
c0025813:	53                   	push   ebx
c0025814:	e8 17 39 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c0025819:	83 c4 10             	add    esp,0x10
c002581c:	83 c4 1c             	add    esp,0x1c
c002581f:	5b                   	pop    ebx
c0025820:	5e                   	pop    esi
c0025821:	5f                   	pop    edi
c0025822:	5d                   	pop    ebp
c0025823:	c3                   	ret    
c0025824:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025828:	83 ec 0c             	sub    esp,0xc
c002582b:	68 94 2f 03 c0       	push   0xc0032f94
c0025830:	e8 41 aa ff ff       	call   c0020276 <KePanic(char const*)>
c0025835:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025838:	83 c4 10             	add    esp,0x10
c002583b:	89 f7                	mov    edi,esi
c002583d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025841:	e9 a6 fe ff ff       	jmp    c00256ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025846:	66 90                	xchg   ax,ax
c0025848:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002584e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025854:	75 1e                	jne    c0025874 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025856:	83 ec 0c             	sub    esp,0xc
c0025859:	68 fc 2f 03 c0       	push   0xc0032ffc
c002585e:	e8 fa 39 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0025863:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c002586a:	e8 d9 fa ff ff       	call   c0025348 <blockTask(TaskState)>
c002586f:	83 c4 10             	add    esp,0x10
c0025872:	66 90                	xchg   ax,ax
c0025874:	83 ec 08             	sub    esp,0x8
c0025877:	56                   	push   esi
c0025878:	68 ec 01 04 c0       	push   0xc00401ec
c002587d:	e8 be 94 00 00       	call   c002ed40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025882:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025889:	e8 ee 93 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002588e:	83 c4 10             	add    esp,0x10
c0025891:	39 f8                	cmp    eax,edi
c0025893:	0f 84 37 ff ff ff    	je     c00257d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025899:	8d 76 00             	lea    esi,[esi+0x0]
c002589c:	83 ec 0c             	sub    esp,0xc
c002589f:	68 ec 01 04 c0       	push   0xc00401ec
c00258a4:	e8 d3 93 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00258a9:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00258b0:	89 c6                	mov    esi,eax
c00258b2:	e8 cd 93 00 00       	call   c002ec84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00258b7:	83 c4 10             	add    esp,0x10
c00258ba:	39 f3                	cmp    ebx,esi
c00258bc:	74 b6                	je     c0025874 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00258be:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00258c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258c4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00258ca:	75 a8                	jne    c0025874 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00258cc:	e9 77 ff ff ff       	jmp    c0025848 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00258d1:	8d 76 00             	lea    esi,[esi+0x0]
c00258d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00258d8:	83 ec 0c             	sub    esp,0xc
c00258db:	68 c8 2f 03 c0       	push   0xc0032fc8
c00258e0:	e9 4b ff ff ff       	jmp    c0025830 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00258e5:	8d 76 00             	lea    esi,[esi+0x0]
c00258e8:	8b 36                	mov    esi,DWORD PTR [esi]
c00258ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00258ee:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00258f1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258f4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00258fa:	01 d7                	add    edi,edx
c00258fc:	89 f8                	mov    eax,edi
c00258fe:	e9 51 fe ff ff       	jmp    c0025754 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025903:	90                   	nop

c0025904 <cleanerTaskFunction(void*)>:
c0025904:	53                   	push   ebx
c0025905:	83 ec 08             	sub    esp,0x8
c0025908:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002590d:	83 e8 01             	sub    eax,0x1
c0025910:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025915:	75 01                	jne    c0025918 <cleanerTaskFunction(void*)+0x14>
c0025917:	fb                   	sti    
c0025918:	fa                   	cli    
c0025919:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002591e:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025925:	8d 50 01             	lea    edx,[eax+0x1]
c0025928:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c002592e:	0f 84 c4 00 00 00    	je     c00259f8 <cleanerTaskFunction(void*)+0xf4>
c0025934:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025939:	85 c0                	test   eax,eax
c002593b:	75 03                	jne    c0025940 <cleanerTaskFunction(void*)+0x3c>
c002593d:	fb                   	sti    
c002593e:	66 90                	xchg   ax,ax
c0025940:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025947:	fa                   	cli    
c0025948:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002594e:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025954:	83 c2 01             	add    edx,0x1
c0025957:	83 c1 01             	add    ecx,0x1
c002595a:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025960:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025966:	fa                   	cli    
c0025967:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c002596d:	83 c3 01             	add    ebx,0x1
c0025970:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025976:	eb 28                	jmp    c00259a0 <cleanerTaskFunction(void*)+0x9c>
c0025978:	83 ec 0c             	sub    esp,0xc
c002597b:	68 d4 01 04 c0       	push   0xc00401d4
c0025980:	e8 f7 92 00 00       	call   c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025985:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c002598c:	89 c3                	mov    ebx,eax
c002598e:	e8 f1 92 00 00       	call   c002ec84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025993:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025996:	e8 95 fc ff ff       	call   c0025630 <cleanupTerminatedTask(ThreadControlBlock*)>
c002599b:	83 c4 10             	add    esp,0x10
c002599e:	66 90                	xchg   ax,ax
c00259a0:	83 ec 0c             	sub    esp,0xc
c00259a3:	68 d4 01 04 c0       	push   0xc00401d4
c00259a8:	e8 b3 92 00 00       	call   c002ec60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00259ad:	83 c4 10             	add    esp,0x10
c00259b0:	84 c0                	test   al,al
c00259b2:	74 c4                	je     c0025978 <cleanerTaskFunction(void*)+0x74>
c00259b4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259b9:	83 e8 01             	sub    eax,0x1
c00259bc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259c1:	75 01                	jne    c00259c4 <cleanerTaskFunction(void*)+0xc0>
c00259c3:	fb                   	sti    
c00259c4:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00259c9:	83 e8 01             	sub    eax,0x1
c00259cc:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00259d1:	0f 85 31 ff ff ff    	jne    c0025908 <cleanerTaskFunction(void*)+0x4>
c00259d7:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00259dc:	85 c0                	test   eax,eax
c00259de:	0f 84 24 ff ff ff    	je     c0025908 <cleanerTaskFunction(void*)+0x4>
c00259e4:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00259ee:	e8 99 f8 ff ff       	call   c002528c <schedule()>
c00259f3:	e9 10 ff ff ff       	jmp    c0025908 <cleanerTaskFunction(void*)+0x4>
c00259f8:	83 ec 0c             	sub    esp,0xc
c00259fb:	6a 02                	push   0x2
c00259fd:	e8 1e f9 ff ff       	call   c0025320 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025a02:	83 c4 10             	add    esp,0x10
c0025a05:	e9 36 ff ff ff       	jmp    c0025940 <cleanerTaskFunction(void*)+0x3c>
c0025a0a:	66 90                	xchg   ax,ax

c0025a0c <terminateTask(int)>:
c0025a0c:	83 ec 14             	sub    esp,0x14
c0025a0f:	fa                   	cli    
c0025a10:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025a16:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025a1c:	83 c2 01             	add    edx,0x1
c0025a1f:	83 c1 01             	add    ecx,0x1
c0025a22:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025a28:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025a2e:	fa                   	cli    
c0025a2f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025a38:	83 c0 01             	add    eax,0x1
c0025a3b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a45:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025a48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a4d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025a50:	50                   	push   eax
c0025a51:	68 d4 01 04 c0       	push   0xc00401d4
c0025a56:	e8 e5 92 00 00       	call   c002ed40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025a5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a60:	83 c4 10             	add    esp,0x10
c0025a63:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025a6a:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025a6f:	85 c0                	test   eax,eax
c0025a71:	74 65                	je     c0025ad8 <terminateTask(int)+0xcc>
c0025a73:	83 ec 0c             	sub    esp,0xc
c0025a76:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025a7d:	50                   	push   eax
c0025a7e:	e8 01 fb ff ff       	call   c0025584 <unblockTask(ThreadControlBlock*)>
c0025a83:	83 c4 10             	add    esp,0x10
c0025a86:	66 90                	xchg   ax,ax
c0025a88:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a8d:	83 e8 01             	sub    eax,0x1
c0025a90:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a95:	75 01                	jne    c0025a98 <terminateTask(int)+0x8c>
c0025a97:	fb                   	sti    
c0025a98:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025a9d:	83 e8 01             	sub    eax,0x1
c0025aa0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025aa5:	75 09                	jne    c0025ab0 <terminateTask(int)+0xa4>
c0025aa7:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025aae:	75 3c                	jne    c0025aec <terminateTask(int)+0xe0>
c0025ab0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ab5:	83 e8 01             	sub    eax,0x1
c0025ab8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025abd:	75 01                	jne    c0025ac0 <terminateTask(int)+0xb4>
c0025abf:	fb                   	sti    
c0025ac0:	fa                   	cli    
c0025ac1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ac6:	83 c0 01             	add    eax,0x1
c0025ac9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ace:	66 90                	xchg   ax,ax
c0025ad0:	e8 b7 f7 ff ff       	call   c002528c <schedule()>
c0025ad5:	eb d9                	jmp    c0025ab0 <terminateTask(int)+0xa4>
c0025ad7:	90                   	nop
c0025ad8:	83 ec 0c             	sub    esp,0xc
c0025adb:	68 16 2f 03 c0       	push   0xc0032f16
c0025ae0:	e8 78 37 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0025ae5:	83 c4 10             	add    esp,0x10
c0025ae8:	eb 9e                	jmp    c0025a88 <terminateTask(int)+0x7c>
c0025aea:	66 90                	xchg   ax,ax
c0025aec:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025af6:	eb d8                	jmp    c0025ad0 <terminateTask(int)+0xc4>

c0025af8 <Thr::terminateFromIRQ(int)>:
c0025af8:	83 ec 18             	sub    esp,0x18
c0025afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025aff:	50                   	push   eax
c0025b00:	e8 07 ff ff ff       	call   c0025a0c <terminateTask(int)>
c0025b05:	8d 76 00             	lea    esi,[esi+0x0]

c0025b08 <__static_initialization_and_destruction_0(int, int)>:
c0025b08:	83 ec 0c             	sub    esp,0xc
c0025b0b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025b10:	0f 85 8e 00 00 00    	jne    c0025ba4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025b16:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025b1e:	0f 85 80 00 00 00    	jne    c0025ba4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025b24:	83 ec 0c             	sub    esp,0xc
c0025b27:	68 ec 01 04 c0       	push   0xc00401ec
c0025b2c:	e8 c3 94 00 00       	call   c002eff4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b31:	83 c4 10             	add    esp,0x10
c0025b34:	83 ec 04             	sub    esp,0x4
c0025b37:	68 d8 3b 03 c0       	push   0xc0033bd8
c0025b3c:	68 ec 01 04 c0       	push   0xc00401ec
c0025b41:	68 a4 ef 02 c0       	push   0xc002efa4
c0025b46:	e8 95 35 ff ff       	call   c00190e0 <__cxa_atexit>
c0025b4b:	83 c4 10             	add    esp,0x10
c0025b4e:	83 ec 0c             	sub    esp,0xc
c0025b51:	68 e0 01 04 c0       	push   0xc00401e0
c0025b56:	e8 99 94 00 00       	call   c002eff4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b5b:	83 c4 10             	add    esp,0x10
c0025b5e:	83 ec 04             	sub    esp,0x4
c0025b61:	68 d8 3b 03 c0       	push   0xc0033bd8
c0025b66:	68 e0 01 04 c0       	push   0xc00401e0
c0025b6b:	68 a4 ef 02 c0       	push   0xc002efa4
c0025b70:	e8 6b 35 ff ff       	call   c00190e0 <__cxa_atexit>
c0025b75:	83 c4 10             	add    esp,0x10
c0025b78:	83 ec 0c             	sub    esp,0xc
c0025b7b:	68 d4 01 04 c0       	push   0xc00401d4
c0025b80:	e8 6f 94 00 00       	call   c002eff4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b85:	83 c4 10             	add    esp,0x10
c0025b88:	83 ec 04             	sub    esp,0x4
c0025b8b:	68 d8 3b 03 c0       	push   0xc0033bd8
c0025b90:	68 d4 01 04 c0       	push   0xc00401d4
c0025b95:	68 a4 ef 02 c0       	push   0xc002efa4
c0025b9a:	e8 41 35 ff ff       	call   c00190e0 <__cxa_atexit>
c0025b9f:	83 c4 10             	add    esp,0x10
c0025ba2:	66 90                	xchg   ax,ax
c0025ba4:	90                   	nop
c0025ba5:	83 c4 0c             	add    esp,0xc
c0025ba8:	c3                   	ret    
c0025ba9:	8d 76 00             	lea    esi,[esi+0x0]

c0025bac <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025bac:	83 ec 0c             	sub    esp,0xc
c0025baf:	83 ec 08             	sub    esp,0x8
c0025bb2:	68 ff ff 00 00       	push   0xffff
c0025bb7:	6a 01                	push   0x1
c0025bb9:	e8 4a ff ff ff       	call   c0025b08 <__static_initialization_and_destruction_0(int, int)>
c0025bbe:	83 c4 10             	add    esp,0x10
c0025bc1:	83 c4 0c             	add    esp,0xc
c0025bc4:	c3                   	ret    

c0025bc5 <Vm::inbv(unsigned short)>:
c0025bc5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025bc9:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025bce:	75 06                	jne    c0025bd6 <Vm::inbv(unsigned short)+0x11>
c0025bd0:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025bd5:	c3                   	ret    
c0025bd6:	ec                   	in     al,dx
c0025bd7:	c3                   	ret    

c0025bd8 <Vm::outbv(unsigned short, unsigned char)>:
c0025bd8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025be0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025be5:	75 25                	jne    c0025c0c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025be7:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025bed:	8d 51 01             	lea    edx,[ecx+0x1]
c0025bf0:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025bf6:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025bfc:	83 fa 20             	cmp    edx,0x20
c0025bff:	75 0c                	jne    c0025c0d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025c01:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025c0b:	c3                   	ret    
c0025c0c:	ee                   	out    dx,al
c0025c0d:	c3                   	ret    

c0025c0e <Vm::realToLinear(unsigned short, unsigned short)>:
c0025c0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c18:	c1 e0 04             	shl    eax,0x4
c0025c1b:	01 d0                	add    eax,edx
c0025c1d:	c3                   	ret    

c0025c1e <Vm::getSegment(unsigned int)>:
c0025c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c22:	c1 e8 10             	shr    eax,0x10
c0025c25:	c3                   	ret    

c0025c26 <Vm::getOffset(unsigned int)>:
c0025c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c2a:	c3                   	ret    

c0025c2b <Vm::mainloop2()>:
c0025c2b:	83 ec 18             	sub    esp,0x18
c0025c2e:	fa                   	cli    
c0025c2f:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c35:	6a 02                	push   0x2
c0025c37:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025c3e:	e8 dd f6 ff ff       	call   c0025320 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c48:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025c4c:	52                   	push   edx
c0025c4d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025c51:	52                   	push   edx
c0025c52:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025c56:	52                   	push   edx
c0025c57:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025c5b:	50                   	push   eax
c0025c5c:	e8 ae a5 fd ff       	call   c000020f <goToVM86>
c0025c61:	83 c4 2c             	add    esp,0x2c
c0025c64:	c3                   	ret    

c0025c65 <Vm::mainVm8086Loop(void*)>:
c0025c65:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c6a:	48                   	dec    eax
c0025c6b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c70:	75 01                	jne    c0025c73 <Vm::mainVm8086Loop(void*)+0xe>
c0025c72:	fb                   	sti    
c0025c73:	eb b6                	jmp    c0025c2b <Vm::mainloop2()>

c0025c75 <Vm::mainloop3(unsigned long)>:
c0025c75:	83 ec 18             	sub    esp,0x18
c0025c78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c7c:	fa                   	cli    
c0025c7d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c83:	6a 02                	push   0x2
c0025c85:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025c8c:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025c91:	e8 8a f6 ff ff       	call   c0025320 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c96:	83 c4 1c             	add    esp,0x1c
c0025c99:	eb 90                	jmp    c0025c2b <Vm::mainloop2()>

c0025c9b <Vm::initialise8086()>:
c0025c9b:	83 ec 0c             	sub    esp,0xc
c0025c9e:	68 80 00 00 00       	push   0x80
c0025ca3:	6a 00                	push   0x0
c0025ca5:	68 65 5c 02 c0       	push   0xc0025c65
c0025caa:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025cb0:	e8 87 f3 ff ff       	call   c002503c <Process::createThread(void (*)(void*), void*, int)>
c0025cb5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025cbc:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025cc1:	68 00 01 00 00       	push   0x100
c0025cc6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025ccb:	6a 00                	push   0x0
c0025ccd:	6a 00                	push   0x0
c0025ccf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025cd5:	e8 58 2b ff ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025cda:	83 c4 2c             	add    esp,0x2c
c0025cdd:	c3                   	ret    

c0025cde <Vm::finish8086()>:
c0025cde:	53                   	push   ebx
c0025cdf:	83 ec 08             	sub    esp,0x8
c0025ce2:	fa                   	cli    
c0025ce3:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025ce9:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025cf0:	75 15                	jne    c0025d07 <Vm::finish8086()+0x29>
c0025cf2:	e8 95 f5 ff ff       	call   c002528c <schedule()>
c0025cf7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cfc:	48                   	dec    eax
c0025cfd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d02:	75 de                	jne    c0025ce2 <Vm::finish8086()+0x4>
c0025d04:	fb                   	sti    
c0025d05:	eb db                	jmp    c0025ce2 <Vm::finish8086()+0x4>
c0025d07:	83 ec 0c             	sub    esp,0xc
c0025d0a:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025d10:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025d16:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025d1d:	e8 62 f8 ff ff       	call   c0025584 <unblockTask(ThreadControlBlock*)>
c0025d22:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d27:	83 c4 10             	add    esp,0x10
c0025d2a:	8d 50 ff             	lea    edx,[eax-0x1]
c0025d2d:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025d33:	85 d2                	test   edx,edx
c0025d35:	75 01                	jne    c0025d38 <Vm::finish8086()+0x5a>
c0025d37:	fb                   	sti    
c0025d38:	89 d8                	mov    eax,ebx
c0025d3a:	83 c4 08             	add    esp,0x8
c0025d3d:	5b                   	pop    ebx
c0025d3e:	c3                   	ret    

c0025d3f <Vm::getOutput8086(unsigned char*)>:
c0025d3f:	57                   	push   edi
c0025d40:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025d46:	56                   	push   esi
c0025d47:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025d4c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025d50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d52:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025d57:	5e                   	pop    esi
c0025d58:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d62:	5f                   	pop    edi
c0025d63:	c3                   	ret    

c0025d64 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025d64:	55                   	push   ebp
c0025d65:	57                   	push   edi
c0025d66:	56                   	push   esi
c0025d67:	53                   	push   ebx
c0025d68:	83 ec 0c             	sub    esp,0xc
c0025d6b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025d6f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025d73:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025d77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d7b:	fa                   	cli    
c0025d7c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025d82:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025d89:	75 15                	jne    c0025da0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025d8b:	e8 fc f4 ff ff       	call   c002528c <schedule()>
c0025d90:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d95:	48                   	dec    eax
c0025d96:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d9b:	75 de                	jne    c0025d7b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025d9d:	fb                   	sti    
c0025d9e:	eb db                	jmp    c0025d7b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025da0:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025da5:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025daf:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025db3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025db7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025dbb:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025dbf:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025dc3:	0f b7 ff             	movzx  edi,di
c0025dc6:	0f b7 f6             	movzx  esi,si
c0025dc9:	50                   	push   eax
c0025dca:	6a 20                	push   0x20
c0025dcc:	6a 00                	push   0x0
c0025dce:	68 40 02 04 c0       	push   0xc0040240
c0025dd3:	e8 18 a7 fd ff       	call   c00004f0 <memset>
c0025dd8:	5a                   	pop    edx
c0025dd9:	59                   	pop    ecx
c0025dda:	57                   	push   edi
c0025ddb:	56                   	push   esi
c0025ddc:	e8 2d fe ff ff       	call   c0025c0e <Vm::realToLinear(unsigned short, unsigned short)>
c0025de1:	83 c4 10             	add    esp,0x10
c0025de4:	89 c7                	mov    edi,eax
c0025de6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025dea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025dee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025df0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025df5:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025dfc:	48                   	dec    eax
c0025dfd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e02:	75 01                	jne    c0025e05 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025e04:	fb                   	sti    
c0025e05:	83 ec 0c             	sub    esp,0xc
c0025e08:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025e0e:	e8 71 f7 ff ff       	call   c0025584 <unblockTask(ThreadControlBlock*)>
c0025e13:	83 c4 1c             	add    esp,0x1c
c0025e16:	b0 01                	mov    al,0x1
c0025e18:	5b                   	pop    ebx
c0025e19:	5e                   	pop    esi
c0025e1a:	5f                   	pop    edi
c0025e1b:	5d                   	pop    ebp
c0025e1c:	c3                   	ret    

c0025e1d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025e1d:	55                   	push   ebp
c0025e1e:	57                   	push   edi
c0025e1f:	56                   	push   esi
c0025e20:	53                   	push   ebx
c0025e21:	83 ec 34             	sub    esp,0x34
c0025e24:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025e28:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025e2c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025e30:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025e34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025e38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025e3c:	68 24 30 03 c0       	push   0xc0033024
c0025e41:	e8 17 34 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0025e46:	83 c4 10             	add    esp,0x10
c0025e49:	fa                   	cli    
c0025e4a:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025e50:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025e56:	84 db                	test   bl,bl
c0025e58:	75 15                	jne    c0025e6f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025e5a:	e8 2d f4 ff ff       	call   c002528c <schedule()>
c0025e5f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e64:	48                   	dec    eax
c0025e65:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e6a:	75 dd                	jne    c0025e49 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025e6c:	fb                   	sti    
c0025e6d:	eb da                	jmp    c0025e49 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025e6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025e73:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025e78:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025e82:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025e86:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025e8a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025e8e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025e92:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025e96:	50                   	push   eax
c0025e97:	6a 20                	push   0x20
c0025e99:	6a 00                	push   0x0
c0025e9b:	68 40 02 04 c0       	push   0xc0040240
c0025ea0:	e8 4b a6 fd ff       	call   c00004f0 <memset>
c0025ea5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025eac:	e8 0d 05 ff ff       	call   c00163be <malloc>
c0025eb1:	83 c4 0c             	add    esp,0xc
c0025eb4:	89 c5                	mov    ebp,eax
c0025eb6:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025ebc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025ec0:	50                   	push   eax
c0025ec1:	e8 9e 45 ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0025ec6:	83 c4 10             	add    esp,0x10
c0025ec9:	85 ed                	test   ebp,ebp
c0025ecb:	75 0a                	jne    c0025ed7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025ecd:	83 ec 0c             	sub    esp,0xc
c0025ed0:	68 46 30 03 c0       	push   0xc0033046
c0025ed5:	eb 2b                	jmp    c0025f02 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025ed7:	50                   	push   eax
c0025ed8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025edc:	50                   	push   eax
c0025edd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025ee1:	50                   	push   eax
c0025ee2:	55                   	push   ebp
c0025ee3:	e8 9c 48 ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c0025ee8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025eec:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025ef0:	83 c4 10             	add    esp,0x10
c0025ef3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025ef8:	74 27                	je     c0025f21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025efa:	83 ec 0c             	sub    esp,0xc
c0025efd:	68 5a 30 03 c0       	push   0xc003305a
c0025f02:	e8 6f a3 ff ff       	call   c0020276 <KePanic(char const*)>
c0025f07:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f0c:	83 c4 10             	add    esp,0x10
c0025f0f:	48                   	dec    eax
c0025f10:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f15:	85 c0                	test   eax,eax
c0025f17:	75 01                	jne    c0025f1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025f19:	fb                   	sti    
c0025f1a:	31 db                	xor    ebx,ebx
c0025f1c:	e9 90 00 00 00       	jmp    c0025fb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025f21:	51                   	push   ecx
c0025f22:	51                   	push   ecx
c0025f23:	6a 01                	push   0x1
c0025f25:	55                   	push   ebp
c0025f26:	e8 57 45 ff ff       	call   c001a482 <File::open(FileOpenMode)>
c0025f2b:	83 c4 10             	add    esp,0x10
c0025f2e:	85 c0                	test   eax,eax
c0025f30:	74 26                	je     c0025f58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025f32:	83 ec 0c             	sub    esp,0xc
c0025f35:	68 73 30 03 c0       	push   0xc0033073
c0025f3a:	e8 37 a3 ff ff       	call   c0020276 <KePanic(char const*)>
c0025f3f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f44:	83 c4 10             	add    esp,0x10
c0025f47:	48                   	dec    eax
c0025f48:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f4d:	85 c0                	test   eax,eax
c0025f4f:	75 c9                	jne    c0025f1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025f51:	fb                   	sti    
c0025f52:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025f56:	eb 59                	jmp    c0025fb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025f58:	0f b7 ff             	movzx  edi,di
c0025f5b:	50                   	push   eax
c0025f5c:	0f b7 f6             	movzx  esi,si
c0025f5f:	50                   	push   eax
c0025f60:	57                   	push   edi
c0025f61:	56                   	push   esi
c0025f62:	e8 a7 fc ff ff       	call   c0025c0e <Vm::realToLinear(unsigned short, unsigned short)>
c0025f67:	5a                   	pop    edx
c0025f68:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0025f6b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0025f6f:	51                   	push   ecx
c0025f70:	50                   	push   eax
c0025f71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025f79:	55                   	push   ebp
c0025f7a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0025f7d:	83 c4 14             	add    esp,0x14
c0025f80:	55                   	push   ebp
c0025f81:	e8 5a 45 ff ff       	call   c001a4e0 <File::close()>
c0025f86:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f8b:	83 c4 10             	add    esp,0x10
c0025f8e:	48                   	dec    eax
c0025f8f:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025f96:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f9b:	85 c0                	test   eax,eax
c0025f9d:	75 01                	jne    c0025fa0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025f9f:	fb                   	sti    
c0025fa0:	83 ec 0c             	sub    esp,0xc
c0025fa3:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025fa9:	e8 d6 f5 ff ff       	call   c0025584 <unblockTask(ThreadControlBlock*)>
c0025fae:	83 c4 10             	add    esp,0x10
c0025fb1:	83 c4 2c             	add    esp,0x2c
c0025fb4:	88 d8                	mov    al,bl
c0025fb6:	5b                   	pop    ebx
c0025fb7:	5e                   	pop    esi
c0025fb8:	5f                   	pop    edi
c0025fb9:	5d                   	pop    ebp
c0025fba:	c3                   	ret    

c0025fbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025fbb:	57                   	push   edi
c0025fbc:	56                   	push   esi
c0025fbd:	53                   	push   ebx
c0025fbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025fc6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025fca:	83 e8 06             	sub    eax,0x6
c0025fcd:	0f b7 c0             	movzx  eax,ax
c0025fd0:	50                   	push   eax
c0025fd1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025fd6:	50                   	push   eax
c0025fd7:	e8 32 fc ff ff       	call   c0025c0e <Vm::realToLinear(unsigned short, unsigned short)>
c0025fdc:	5a                   	pop    edx
c0025fdd:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0025fe0:	59                   	pop    ecx
c0025fe1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025fe4:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025fe7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025fed:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025ff0:	8d 56 02             	lea    edx,[esi+0x2]
c0025ff3:	66 89 10             	mov    WORD PTR [eax],dx
c0025ff6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025ffa:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0025ffe:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026001:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0026005:	0f b6 f1             	movzx  esi,cl
c0026008:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c002600c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026012:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0026016:	0f b6 d5             	movzx  edx,ch
c0026019:	74 0a                	je     c0026025 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c002601b:	c1 e2 08             	shl    edx,0x8
c002601e:	09 f2                	or     edx,esi
c0026020:	80 ce 02             	or     dh,0x2
c0026023:	eb 08                	jmp    c002602d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0026025:	c1 e2 08             	shl    edx,0x8
c0026028:	09 f2                	or     edx,esi
c002602a:	80 e6 fd             	and    dh,0xfd
c002602d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026031:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026036:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002603a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0026042:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0026045:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c002604d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0026050:	5b                   	pop    ebx
c0026051:	5e                   	pop    esi
c0026052:	5f                   	pop    edi
c0026053:	c3                   	ret    

c0026054 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0026054:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026059:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002605e:	c1 e0 04             	shl    eax,0x4
c0026061:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0026064:	c3                   	ret    

c0026065 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0026065:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002606a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002606f:	c1 e0 04             	shl    eax,0x4
c0026072:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0026076:	c3                   	ret    

c0026077 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0026077:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002607c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026081:	c1 e0 04             	shl    eax,0x4
c0026084:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0026087:	c3                   	ret    

c0026088 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0026088:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002608d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026092:	c1 e0 04             	shl    eax,0x4
c0026095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026099:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c002609c:	c3                   	ret    

c002609d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c002609d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260a7:	c1 e0 04             	shl    eax,0x4
c00260aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00260ae:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00260b2:	c3                   	ret    

c00260b3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00260b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260b8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260bd:	c1 e0 04             	shl    eax,0x4
c00260c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00260c4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00260c7:	c3                   	ret    

c00260c8 <Vm::faultHandler(regs*)>:
c00260c8:	55                   	push   ebp
c00260c9:	57                   	push   edi
c00260ca:	56                   	push   esi
c00260cb:	53                   	push   ebx
c00260cc:	83 ec 2c             	sub    esp,0x2c
c00260cf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00260d3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00260d6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00260da:	0f b7 f8             	movzx  edi,ax
c00260dd:	52                   	push   edx
c00260de:	0f b7 c0             	movzx  eax,ax
c00260e1:	50                   	push   eax
c00260e2:	e8 27 fb ff ff       	call   c0025c0e <Vm::realToLinear(unsigned short, unsigned short)>
c00260e7:	5a                   	pop    edx
c00260e8:	59                   	pop    ecx
c00260e9:	89 c1                	mov    ecx,eax
c00260eb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00260ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00260f2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00260f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00260fb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00260fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0026102:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0026107:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002610b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002610f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0026113:	e8 f6 fa ff ff       	call   c0025c0e <Vm::realToLinear(unsigned short, unsigned short)>
c0026118:	5e                   	pop    esi
c0026119:	be 06 00 00 00       	mov    esi,0x6
c002611e:	5d                   	pop    ebp
c002611f:	31 ed                	xor    ebp,ebp
c0026121:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026126:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026129:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c002612f:	0f 84 74 02 00 00    	je     c00263a9 <Vm::faultHandler(regs*)+0x2e1>
c0026135:	0f 87 94 00 00 00    	ja     c00261cf <Vm::faultHandler(regs*)+0x107>
c002613b:	83 fa 66             	cmp    edx,0x66
c002613e:	0f 84 e2 01 00 00    	je     c0026326 <Vm::faultHandler(regs*)+0x25e>
c0026144:	77 47                	ja     c002618d <Vm::faultHandler(regs*)+0xc5>
c0026146:	83 fa 36             	cmp    edx,0x36
c0026149:	0f 84 ca 01 00 00    	je     c0026319 <Vm::faultHandler(regs*)+0x251>
c002614f:	77 1a                	ja     c002616b <Vm::faultHandler(regs*)+0xa3>
c0026151:	83 fa 26             	cmp    edx,0x26
c0026154:	0f 84 98 01 00 00    	je     c00262f2 <Vm::faultHandler(regs*)+0x22a>
c002615a:	83 fa 2e             	cmp    edx,0x2e
c002615d:	0f 85 21 06 00 00    	jne    c0026784 <Vm::faultHandler(regs*)+0x6bc>
c0026163:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026166:	31 f6                	xor    esi,esi
c0026168:	41                   	inc    ecx
c0026169:	eb bb                	jmp    c0026126 <Vm::faultHandler(regs*)+0x5e>
c002616b:	83 fa 64             	cmp    edx,0x64
c002616e:	0f 84 8b 01 00 00    	je     c00262ff <Vm::faultHandler(regs*)+0x237>
c0026174:	0f 87 92 01 00 00    	ja     c002630c <Vm::faultHandler(regs*)+0x244>
c002617a:	83 fa 3e             	cmp    edx,0x3e
c002617d:	0f 85 01 06 00 00    	jne    c0026784 <Vm::faultHandler(regs*)+0x6bc>
c0026183:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026186:	be 01 00 00 00       	mov    esi,0x1
c002618b:	eb db                	jmp    c0026168 <Vm::faultHandler(regs*)+0xa0>
c002618d:	83 fa 6d             	cmp    edx,0x6d
c0026190:	0f 84 34 03 00 00    	je     c00264ca <Vm::faultHandler(regs*)+0x402>
c0026196:	77 17                	ja     c00261af <Vm::faultHandler(regs*)+0xe7>
c0026198:	83 fa 67             	cmp    edx,0x67
c002619b:	0f 84 92 01 00 00    	je     c0026333 <Vm::faultHandler(regs*)+0x26b>
c00261a1:	83 fa 6c             	cmp    edx,0x6c
c00261a4:	0f 84 b1 02 00 00    	je     c002645b <Vm::faultHandler(regs*)+0x393>
c00261aa:	e9 d5 05 00 00       	jmp    c0026784 <Vm::faultHandler(regs*)+0x6bc>
c00261af:	83 fa 6f             	cmp    edx,0x6f
c00261b2:	0f 84 3d 04 00 00    	je     c00265f5 <Vm::faultHandler(regs*)+0x52d>
c00261b8:	0f 82 9f 03 00 00    	jb     c002655d <Vm::faultHandler(regs*)+0x495>
c00261be:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00261c4:	0f 84 76 01 00 00    	je     c0026340 <Vm::faultHandler(regs*)+0x278>
c00261ca:	e9 b5 05 00 00       	jmp    c0026784 <Vm::faultHandler(regs*)+0x6bc>
c00261cf:	81 fa ec 00 00 00    	cmp    edx,0xec
c00261d5:	0f 84 51 05 00 00    	je     c002672c <Vm::faultHandler(regs*)+0x664>
c00261db:	0f 87 a9 00 00 00    	ja     c002628a <Vm::faultHandler(regs*)+0x1c2>
c00261e1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00261e7:	0f 84 d0 04 00 00    	je     c00266bd <Vm::faultHandler(regs*)+0x5f5>
c00261ed:	77 78                	ja     c0026267 <Vm::faultHandler(regs*)+0x19f>
c00261ef:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00261f5:	0f 84 0e 02 00 00    	je     c0026409 <Vm::faultHandler(regs*)+0x341>
c00261fb:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0026201:	0f 85 7d 05 00 00    	jne    c0026784 <Vm::faultHandler(regs*)+0x6bc>
c0026207:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c002620b:	89 d1                	mov    ecx,edx
c002620d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0026210:	c1 e1 08             	shl    ecx,0x8
c0026213:	09 ca                	or     edx,ecx
c0026215:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0026218:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c002621c:	89 d1                	mov    ecx,edx
c002621e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0026222:	c1 e1 08             	shl    ecx,0x8
c0026225:	09 ca                	or     edx,ecx
c0026227:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c002622a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c002622e:	89 d1                	mov    ecx,edx
c0026230:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0026234:	c1 e1 08             	shl    ecx,0x8
c0026237:	09 ca                	or     edx,ecx
c0026239:	81 ca 00 02 02 00    	or     edx,0x20200
c002623f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026242:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0026246:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002624c:	d1 e8                	shr    eax,1
c002624e:	83 e0 01             	and    eax,0x1
c0026251:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026254:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026257:	83 c0 06             	add    eax,0x6
c002625a:	25 ff ff 00 00       	and    eax,0xffff
c002625f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026262:	e9 19 05 00 00       	jmp    c0026780 <Vm::faultHandler(regs*)+0x6b8>
c0026267:	81 fa e6 00 00 00    	cmp    edx,0xe6
c002626d:	0f 84 8f 04 00 00    	je     c0026702 <Vm::faultHandler(regs*)+0x63a>
c0026273:	0f 82 60 04 00 00    	jb     c00266d9 <Vm::faultHandler(regs*)+0x611>
c0026279:	81 fa e7 00 00 00    	cmp    edx,0xe7
c002627f:	0f 84 94 04 00 00    	je     c0026719 <Vm::faultHandler(regs*)+0x651>
c0026285:	e9 fa 04 00 00       	jmp    c0026784 <Vm::faultHandler(regs*)+0x6bc>
c002628a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026290:	0f 84 d7 04 00 00    	je     c002676d <Vm::faultHandler(regs*)+0x6a5>
c0026296:	77 2e                	ja     c00262c6 <Vm::faultHandler(regs*)+0x1fe>
c0026298:	81 fa ed 00 00 00    	cmp    edx,0xed
c002629e:	0f 84 a4 04 00 00    	je     c0026748 <Vm::faultHandler(regs*)+0x680>
c00262a4:	81 fa ee 00 00 00    	cmp    edx,0xee
c00262aa:	0f 85 d4 04 00 00    	jne    c0026784 <Vm::faultHandler(regs*)+0x6bc>
c00262b0:	50                   	push   eax
c00262b1:	50                   	push   eax
c00262b2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00262b6:	50                   	push   eax
c00262b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00262bb:	50                   	push   eax
c00262bc:	e8 17 f9 ff ff       	call   c0025bd8 <Vm::outbv(unsigned short, unsigned char)>
c00262c1:	e9 9f 04 00 00       	jmp    c0026765 <Vm::faultHandler(regs*)+0x69d>
c00262c6:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00262cc:	0f 84 6d 01 00 00    	je     c002643f <Vm::faultHandler(regs*)+0x377>
c00262d2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00262d8:	0f 84 6f 01 00 00    	je     c002644d <Vm::faultHandler(regs*)+0x385>
c00262de:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00262e4:	0f 85 9a 04 00 00    	jne    c0026784 <Vm::faultHandler(regs*)+0x6bc>
c00262ea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262ed:	e9 76 fe ff ff       	jmp    c0026168 <Vm::faultHandler(regs*)+0xa0>
c00262f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00262f5:	be 02 00 00 00       	mov    esi,0x2
c00262fa:	e9 69 fe ff ff       	jmp    c0026168 <Vm::faultHandler(regs*)+0xa0>
c00262ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026302:	be 03 00 00 00       	mov    esi,0x3
c0026307:	e9 5c fe ff ff       	jmp    c0026168 <Vm::faultHandler(regs*)+0xa0>
c002630c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002630f:	be 04 00 00 00       	mov    esi,0x4
c0026314:	e9 4f fe ff ff       	jmp    c0026168 <Vm::faultHandler(regs*)+0xa0>
c0026319:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002631c:	be 05 00 00 00       	mov    esi,0x5
c0026321:	e9 42 fe ff ff       	jmp    c0026168 <Vm::faultHandler(regs*)+0xa0>
c0026326:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026329:	bd 01 00 00 00       	mov    ebp,0x1
c002632e:	e9 35 fe ff ff       	jmp    c0026168 <Vm::faultHandler(regs*)+0xa0>
c0026333:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026336:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c002633b:	e9 28 fe ff ff       	jmp    c0026168 <Vm::faultHandler(regs*)+0xa0>
c0026340:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0026343:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026347:	83 e5 01             	and    ebp,0x1
c002634a:	74 30                	je     c002637c <Vm::faultHandler(regs*)+0x2b4>
c002634c:	83 e9 04             	sub    ecx,0x4
c002634f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026355:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002635b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c002635e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026361:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026367:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002636b:	0f 84 0c 04 00 00    	je     c002677d <Vm::faultHandler(regs*)+0x6b5>
c0026371:	80 ce 02             	or     dh,0x2
c0026374:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026377:	e9 01 04 00 00       	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c002637c:	83 e9 02             	sub    ecx,0x2
c002637f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026385:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026388:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c002638c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026392:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026396:	74 05                	je     c002639d <Vm::faultHandler(regs*)+0x2d5>
c0026398:	80 ce 02             	or     dh,0x2
c002639b:	eb 03                	jmp    c00263a0 <Vm::faultHandler(regs*)+0x2d8>
c002639d:	80 e6 fd             	and    dh,0xfd
c00263a0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00263a4:	e9 d4 03 00 00       	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c00263a9:	83 e5 01             	and    ebp,0x1
c00263ac:	74 2a                	je     c00263d8 <Vm::faultHandler(regs*)+0x310>
c00263ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00263b0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00263b6:	81 ca 00 02 02 00    	or     edx,0x20200
c00263bc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00263bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00263c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00263c7:	c1 e8 09             	shr    eax,0x9
c00263ca:	83 e0 01             	and    eax,0x1
c00263cd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00263d0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00263d3:	83 c0 04             	add    eax,0x4
c00263d6:	eb 24                	jmp    c00263fc <Vm::faultHandler(regs*)+0x334>
c00263d8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00263db:	81 ca 00 02 02 00    	or     edx,0x20200
c00263e1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00263e4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00263e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00263ed:	c1 e8 09             	shr    eax,0x9
c00263f0:	83 e0 01             	and    eax,0x1
c00263f3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00263f6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00263f9:	83 c0 02             	add    eax,0x2
c00263fc:	25 ff ff 00 00       	and    eax,0xffff
c0026401:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026404:	e9 74 03 00 00       	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c0026409:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002640d:	3d ee 00 00 00       	cmp    eax,0xee
c0026412:	75 10                	jne    c0026424 <Vm::faultHandler(regs*)+0x35c>
c0026414:	83 ec 0c             	sub    esp,0xc
c0026417:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c002641a:	e8 56 f8 ff ff       	call   c0025c75 <Vm::mainloop3(unsigned long)>
c002641f:	e9 44 03 00 00       	jmp    c0026768 <Vm::faultHandler(regs*)+0x6a0>
c0026424:	83 ec 0c             	sub    esp,0xc
c0026427:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002642b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002642f:	51                   	push   ecx
c0026430:	50                   	push   eax
c0026431:	53                   	push   ebx
c0026432:	e8 84 fb ff ff       	call   c0025fbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0026437:	83 c4 20             	add    esp,0x20
c002643a:	e9 41 03 00 00       	jmp    c0026780 <Vm::faultHandler(regs*)+0x6b8>
c002643f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026444:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026448:	e9 30 03 00 00       	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c002644d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026452:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0026456:	e9 22 03 00 00       	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c002645b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002645e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026463:	74 2b                	je     c0026490 <Vm::faultHandler(regs*)+0x3c8>
c0026465:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c002646c:	76 22                	jbe    c0026490 <Vm::faultHandler(regs*)+0x3c8>
c002646e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026472:	50                   	push   eax
c0026473:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026477:	50                   	push   eax
c0026478:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002647c:	50                   	push   eax
c002647d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026481:	50                   	push   eax
c0026482:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026486:	50                   	push   eax
c0026487:	6a 6c                	push   0x6c
c0026489:	6a 6c                	push   0x6c
c002648b:	e9 bd 01 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x585>
c0026490:	83 ec 0c             	sub    esp,0xc
c0026493:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026497:	0f b7 f6             	movzx  esi,si
c002649a:	50                   	push   eax
c002649b:	e8 25 f7 ff ff       	call   c0025bc5 <Vm::inbv(unsigned short)>
c00264a0:	83 c4 0c             	add    esp,0xc
c00264a3:	0f b6 c0             	movzx  eax,al
c00264a6:	50                   	push   eax
c00264a7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00264ab:	50                   	push   eax
c00264ac:	56                   	push   esi
c00264ad:	e8 d6 fb ff ff       	call   c0026088 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00264b2:	83 c4 10             	add    esp,0x10
c00264b5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00264b8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00264bc:	74 03                	je     c00264c1 <Vm::faultHandler(regs*)+0x3f9>
c00264be:	48                   	dec    eax
c00264bf:	eb 01                	jmp    c00264c2 <Vm::faultHandler(regs*)+0x3fa>
c00264c1:	40                   	inc    eax
c00264c2:	0f b7 c0             	movzx  eax,ax
c00264c5:	e9 8b 00 00 00       	jmp    c0026555 <Vm::faultHandler(regs*)+0x48d>
c00264ca:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00264cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00264d0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00264d5:	74 29                	je     c0026500 <Vm::faultHandler(regs*)+0x438>
c00264d7:	3d ff ff 00 00       	cmp    eax,0xffff
c00264dc:	76 22                	jbe    c0026500 <Vm::faultHandler(regs*)+0x438>
c00264de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00264e2:	50                   	push   eax
c00264e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00264e7:	50                   	push   eax
c00264e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00264ec:	50                   	push   eax
c00264ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00264f1:	50                   	push   eax
c00264f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00264f6:	50                   	push   eax
c00264f7:	6a 6d                	push   0x6d
c00264f9:	6a 6d                	push   0x6d
c00264fb:	e9 4d 01 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x585>
c0026500:	0f b7 c8             	movzx  ecx,ax
c0026503:	0f b7 f6             	movzx  esi,si
c0026506:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026509:	83 e5 01             	and    ebp,0x1
c002650c:	74 20                	je     c002652e <Vm::faultHandler(regs*)+0x466>
c002650e:	ed                   	in     eax,dx
c002650f:	55                   	push   ebp
c0026510:	50                   	push   eax
c0026511:	51                   	push   ecx
c0026512:	56                   	push   esi
c0026513:	e8 9b fb ff ff       	call   c00260b3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026518:	83 c4 10             	add    esp,0x10
c002651b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002651e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026522:	74 05                	je     c0026529 <Vm::faultHandler(regs*)+0x461>
c0026524:	83 e8 04             	sub    eax,0x4
c0026527:	eb 27                	jmp    c0026550 <Vm::faultHandler(regs*)+0x488>
c0026529:	83 c0 04             	add    eax,0x4
c002652c:	eb 22                	jmp    c0026550 <Vm::faultHandler(regs*)+0x488>
c002652e:	66 ed                	in     ax,dx
c0026530:	0f b7 c0             	movzx  eax,ax
c0026533:	57                   	push   edi
c0026534:	50                   	push   eax
c0026535:	51                   	push   ecx
c0026536:	56                   	push   esi
c0026537:	e8 61 fb ff ff       	call   c002609d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c002653c:	83 c4 10             	add    esp,0x10
c002653f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026542:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026546:	74 05                	je     c002654d <Vm::faultHandler(regs*)+0x485>
c0026548:	83 e8 02             	sub    eax,0x2
c002654b:	eb 03                	jmp    c0026550 <Vm::faultHandler(regs*)+0x488>
c002654d:	83 c0 02             	add    eax,0x2
c0026550:	25 ff ff 00 00       	and    eax,0xffff
c0026555:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026558:	e9 20 02 00 00       	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c002655d:	8d 46 ff             	lea    eax,[esi-0x1]
c0026560:	0f b6 f0             	movzx  esi,al
c0026563:	83 fe 05             	cmp    esi,0x5
c0026566:	77 23                	ja     c002658b <Vm::faultHandler(regs*)+0x4c3>
c0026568:	ff 24 b5 e8 30 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccf18]
c002656f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026574:	eb 15                	jmp    c002658b <Vm::faultHandler(regs*)+0x4c3>
c0026576:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c002657a:	eb 0f                	jmp    c002658b <Vm::faultHandler(regs*)+0x4c3>
c002657c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026580:	eb 09                	jmp    c002658b <Vm::faultHandler(regs*)+0x4c3>
c0026582:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026586:	eb 03                	jmp    c002658b <Vm::faultHandler(regs*)+0x4c3>
c0026588:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c002658b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002658e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026593:	74 29                	je     c00265be <Vm::faultHandler(regs*)+0x4f6>
c0026595:	3d ff ff 00 00       	cmp    eax,0xffff
c002659a:	76 22                	jbe    c00265be <Vm::faultHandler(regs*)+0x4f6>
c002659c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00265a0:	50                   	push   eax
c00265a1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00265a5:	50                   	push   eax
c00265a6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00265aa:	50                   	push   eax
c00265ab:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00265af:	50                   	push   eax
c00265b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00265b4:	50                   	push   eax
c00265b5:	6a 6e                	push   0x6e
c00265b7:	6a 6e                	push   0x6e
c00265b9:	e9 8f 00 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x585>
c00265be:	0f b7 c0             	movzx  eax,ax
c00265c1:	52                   	push   edx
c00265c2:	52                   	push   edx
c00265c3:	50                   	push   eax
c00265c4:	57                   	push   edi
c00265c5:	e8 8a fa ff ff       	call   c0026054 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00265ca:	59                   	pop    ecx
c00265cb:	0f b6 c0             	movzx  eax,al
c00265ce:	5e                   	pop    esi
c00265cf:	50                   	push   eax
c00265d0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00265d4:	50                   	push   eax
c00265d5:	e8 fe f5 ff ff       	call   c0025bd8 <Vm::outbv(unsigned short, unsigned char)>
c00265da:	83 c4 10             	add    esp,0x10
c00265dd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00265e0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00265e4:	74 03                	je     c00265e9 <Vm::faultHandler(regs*)+0x521>
c00265e6:	48                   	dec    eax
c00265e7:	eb 01                	jmp    c00265ea <Vm::faultHandler(regs*)+0x522>
c00265e9:	40                   	inc    eax
c00265ea:	0f b7 c0             	movzx  eax,ax
c00265ed:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00265f0:	e9 88 01 00 00       	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c00265f5:	8d 46 ff             	lea    eax,[esi-0x1]
c00265f8:	0f b6 f0             	movzx  esi,al
c00265fb:	83 fe 05             	cmp    esi,0x5
c00265fe:	77 1e                	ja     c002661e <Vm::faultHandler(regs*)+0x556>
c0026600:	ff 24 b5 00 31 03 c0 	jmp    DWORD PTR [esi*4-0x3ffccf00]
c0026607:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002660b:	eb 11                	jmp    c002661e <Vm::faultHandler(regs*)+0x556>
c002660d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026610:	eb 0c                	jmp    c002661e <Vm::faultHandler(regs*)+0x556>
c0026612:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026615:	eb 07                	jmp    c002661e <Vm::faultHandler(regs*)+0x556>
c0026617:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c002661a:	eb 02                	jmp    c002661e <Vm::faultHandler(regs*)+0x556>
c002661c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c002661e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026621:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026626:	74 37                	je     c002665f <Vm::faultHandler(regs*)+0x597>
c0026628:	81 fe ff ff 00 00    	cmp    esi,0xffff
c002662e:	76 2f                	jbe    c002665f <Vm::faultHandler(regs*)+0x597>
c0026630:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026634:	50                   	push   eax
c0026635:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026639:	50                   	push   eax
c002663a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002663e:	50                   	push   eax
c002663f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026643:	50                   	push   eax
c0026644:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026648:	50                   	push   eax
c0026649:	6a 6f                	push   0x6f
c002664b:	6a 6f                	push   0x6f
c002664d:	68 8c 30 03 c0       	push   0xc003308c
c0026652:	e8 06 2c ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026657:	83 c4 20             	add    esp,0x20
c002665a:	e9 83 01 00 00       	jmp    c00267e2 <Vm::faultHandler(regs*)+0x71a>
c002665f:	0f b7 d7             	movzx  edx,di
c0026662:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026665:	0f b7 c6             	movzx  eax,si
c0026668:	81 e1 00 04 00 00    	and    ecx,0x400
c002666e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026671:	83 e5 01             	and    ebp,0x1
c0026674:	74 1d                	je     c0026693 <Vm::faultHandler(regs*)+0x5cb>
c0026676:	55                   	push   ebp
c0026677:	55                   	push   ebp
c0026678:	50                   	push   eax
c0026679:	52                   	push   edx
c002667a:	e8 f8 f9 ff ff       	call   c0026077 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c002667f:	83 c4 10             	add    esp,0x10
c0026682:	89 fa                	mov    edx,edi
c0026684:	ef                   	out    dx,eax
c0026685:	85 c9                	test   ecx,ecx
c0026687:	74 05                	je     c002668e <Vm::faultHandler(regs*)+0x5c6>
c0026689:	83 ee 04             	sub    esi,0x4
c002668c:	eb 21                	jmp    c00266af <Vm::faultHandler(regs*)+0x5e7>
c002668e:	83 c6 04             	add    esi,0x4
c0026691:	eb 1c                	jmp    c00266af <Vm::faultHandler(regs*)+0x5e7>
c0026693:	55                   	push   ebp
c0026694:	55                   	push   ebp
c0026695:	50                   	push   eax
c0026696:	52                   	push   edx
c0026697:	e8 c9 f9 ff ff       	call   c0026065 <Vm::readWordFromReal(unsigned short, unsigned short)>
c002669c:	83 c4 10             	add    esp,0x10
c002669f:	89 fa                	mov    edx,edi
c00266a1:	66 ef                	out    dx,ax
c00266a3:	85 c9                	test   ecx,ecx
c00266a5:	74 05                	je     c00266ac <Vm::faultHandler(regs*)+0x5e4>
c00266a7:	83 ee 02             	sub    esi,0x2
c00266aa:	eb 03                	jmp    c00266af <Vm::faultHandler(regs*)+0x5e7>
c00266ac:	83 c6 02             	add    esi,0x2
c00266af:	81 e6 ff ff 00 00    	and    esi,0xffff
c00266b5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00266b8:	e9 c0 00 00 00       	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c00266bd:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00266c4:	83 ec 0c             	sub    esp,0xc
c00266c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266cb:	50                   	push   eax
c00266cc:	e8 f4 f4 ff ff       	call   c0025bc5 <Vm::inbv(unsigned short)>
c00266d1:	0f b6 c0             	movzx  eax,al
c00266d4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00266d7:	eb 3a                	jmp    c0026713 <Vm::faultHandler(regs*)+0x64b>
c00266d9:	83 e5 01             	and    ebp,0x1
c00266dc:	74 07                	je     c00266e5 <Vm::faultHandler(regs*)+0x61d>
c00266de:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00266e2:	ed                   	in     eax,dx
c00266e3:	eb 14                	jmp    c00266f9 <Vm::faultHandler(regs*)+0x631>
c00266e5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00266e8:	66 31 f6             	xor    si,si
c00266eb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00266ee:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00266f2:	66 ed                	in     ax,dx
c00266f4:	0f b7 c0             	movzx  eax,ax
c00266f7:	09 f0                	or     eax,esi
c00266f9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00266fc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026700:	eb 7e                	jmp    c0026780 <Vm::faultHandler(regs*)+0x6b8>
c0026702:	52                   	push   edx
c0026703:	52                   	push   edx
c0026704:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026708:	50                   	push   eax
c0026709:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002670d:	50                   	push   eax
c002670e:	e8 c5 f4 ff ff       	call   c0025bd8 <Vm::outbv(unsigned short, unsigned char)>
c0026713:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026717:	eb 4f                	jmp    c0026768 <Vm::faultHandler(regs*)+0x6a0>
c0026719:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c002671c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026720:	83 e5 01             	and    ebp,0x1
c0026723:	74 03                	je     c0026728 <Vm::faultHandler(regs*)+0x660>
c0026725:	ef                   	out    dx,eax
c0026726:	eb d4                	jmp    c00266fc <Vm::faultHandler(regs*)+0x634>
c0026728:	66 ef                	out    dx,ax
c002672a:	eb d0                	jmp    c00266fc <Vm::faultHandler(regs*)+0x634>
c002672c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026733:	83 ec 0c             	sub    esp,0xc
c0026736:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002673a:	50                   	push   eax
c002673b:	e8 85 f4 ff ff       	call   c0025bc5 <Vm::inbv(unsigned short)>
c0026740:	0f b6 c0             	movzx  eax,al
c0026743:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026746:	eb 1d                	jmp    c0026765 <Vm::faultHandler(regs*)+0x69d>
c0026748:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002674b:	83 e5 01             	and    ebp,0x1
c002674e:	74 03                	je     c0026753 <Vm::faultHandler(regs*)+0x68b>
c0026750:	ed                   	in     eax,dx
c0026751:	eb 0d                	jmp    c0026760 <Vm::faultHandler(regs*)+0x698>
c0026753:	66 ed                	in     ax,dx
c0026755:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026758:	0f b7 c0             	movzx  eax,ax
c002675b:	66 31 d2             	xor    dx,dx
c002675e:	09 d0                	or     eax,edx
c0026760:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026763:	eb 18                	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c0026765:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026768:	83 c4 10             	add    esp,0x10
c002676b:	eb 13                	jmp    c0026780 <Vm::faultHandler(regs*)+0x6b8>
c002676d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026770:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026773:	83 e5 01             	and    ebp,0x1
c0026776:	74 03                	je     c002677b <Vm::faultHandler(regs*)+0x6b3>
c0026778:	ef                   	out    dx,eax
c0026779:	eb 02                	jmp    c002677d <Vm::faultHandler(regs*)+0x6b5>
c002677b:	66 ef                	out    dx,ax
c002677d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026780:	b0 01                	mov    al,0x1
c0026782:	eb 60                	jmp    c00267e4 <Vm::faultHandler(regs*)+0x71c>
c0026784:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026788:	50                   	push   eax
c0026789:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002678d:	50                   	push   eax
c002678e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026792:	50                   	push   eax
c0026793:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026797:	50                   	push   eax
c0026798:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002679c:	50                   	push   eax
c002679d:	52                   	push   edx
c002679e:	52                   	push   edx
c002679f:	68 b9 30 03 c0       	push   0xc00330b9
c00267a4:	e8 b4 2a ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00267a9:	83 c4 20             	add    esp,0x20
c00267ac:	83 ec 0c             	sub    esp,0xc
c00267af:	6a 60                	push   0x60
c00267b1:	e8 0f f4 ff ff       	call   c0025bc5 <Vm::inbv(unsigned short)>
c00267b6:	83 c4 10             	add    esp,0x10
c00267b9:	0f b6 d0             	movzx  edx,al
c00267bc:	83 fa 1c             	cmp    edx,0x1c
c00267bf:	74 05                	je     c00267c6 <Vm::faultHandler(regs*)+0x6fe>
c00267c1:	83 fa 5a             	cmp    edx,0x5a
c00267c4:	75 e6                	jne    c00267ac <Vm::faultHandler(regs*)+0x6e4>
c00267c6:	0f b6 c0             	movzx  eax,al
c00267c9:	83 f8 1c             	cmp    eax,0x1c
c00267cc:	74 05                	je     c00267d3 <Vm::faultHandler(regs*)+0x70b>
c00267ce:	83 f8 5a             	cmp    eax,0x5a
c00267d1:	75 0f                	jne    c00267e2 <Vm::faultHandler(regs*)+0x71a>
c00267d3:	83 ec 0c             	sub    esp,0xc
c00267d6:	6a 60                	push   0x60
c00267d8:	e8 e8 f3 ff ff       	call   c0025bc5 <Vm::inbv(unsigned short)>
c00267dd:	83 c4 10             	add    esp,0x10
c00267e0:	eb e4                	jmp    c00267c6 <Vm::faultHandler(regs*)+0x6fe>
c00267e2:	31 c0                	xor    eax,eax
c00267e4:	83 c4 2c             	add    esp,0x2c
c00267e7:	5b                   	pop    ebx
c00267e8:	5e                   	pop    esi
c00267e9:	5f                   	pop    edi
c00267ea:	5d                   	pop    ebp
c00267eb:	c3                   	ret    

c00267ec <noCopro(unsigned long)>:
c00267ec:	c3                   	ret    

c00267ed <nmiHandler(regs*, void*)>:
c00267ed:	83 ec 0c             	sub    esp,0xc
c00267f0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00267f5:	83 ec 0c             	sub    esp,0xc
c00267f8:	50                   	push   eax
c00267f9:	e8 c0 f3 fe ff       	call   c0015bbe <Computer::handleNMI()>
c00267fe:	83 c4 10             	add    esp,0x10
c0026801:	90                   	nop
c0026802:	83 c4 0c             	add    esp,0xc
c0026805:	c3                   	ret    

c0026806 <doubleFault(regs*, void*)>:
c0026806:	55                   	push   ebp
c0026807:	89 e5                	mov    ebp,esp
c0026809:	83 ec 08             	sub    esp,0x8
c002680c:	83 ec 0c             	sub    esp,0xc
c002680f:	68 18 31 03 c0       	push   0xc0033118
c0026814:	e8 5d 9a ff ff       	call   c0020276 <KePanic(char const*)>
c0026819:	83 c4 10             	add    esp,0x10
c002681c:	90                   	nop
c002681d:	c9                   	leave  
c002681e:	c3                   	ret    

c002681f <displayDebugInfo(regs*)>:
c002681f:	83 ec 1c             	sub    esp,0x1c
c0026822:	0f 20 c0             	mov    eax,cr0
c0026825:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026829:	0f 20 d0             	mov    eax,cr2
c002682c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026830:	0f 20 d8             	mov    eax,cr3
c0026833:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026837:	0f 20 e0             	mov    eax,cr4
c002683a:	89 04 24             	mov    DWORD PTR [esp],eax
c002683d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026841:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026844:	83 ec 08             	sub    esp,0x8
c0026847:	50                   	push   eax
c0026848:	68 34 31 03 c0       	push   0xc0033134
c002684d:	e8 0b 2a ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026852:	83 c4 10             	add    esp,0x10
c0026855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026859:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c002685c:	83 ec 08             	sub    esp,0x8
c002685f:	50                   	push   eax
c0026860:	68 25 31 03 c0       	push   0xc0033125
c0026865:	e8 f3 29 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002686a:	83 c4 10             	add    esp,0x10
c002686d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026871:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026874:	83 ec 08             	sub    esp,0x8
c0026877:	50                   	push   eax
c0026878:	68 30 31 03 c0       	push   0xc0033130
c002687d:	e8 db 29 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026882:	83 c4 10             	add    esp,0x10
c0026885:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026889:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002688c:	83 ec 08             	sub    esp,0x8
c002688f:	50                   	push   eax
c0026890:	68 3f 31 03 c0       	push   0xc003313f
c0026895:	e8 c3 29 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002689a:	83 c4 10             	add    esp,0x10
c002689d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268a1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00268a4:	83 ec 08             	sub    esp,0x8
c00268a7:	50                   	push   eax
c00268a8:	68 4a 31 03 c0       	push   0xc003314a
c00268ad:	e8 ab 29 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00268b2:	83 c4 10             	add    esp,0x10
c00268b5:	83 ec 08             	sub    esp,0x8
c00268b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00268bc:	68 55 31 03 c0       	push   0xc0033155
c00268c1:	e8 97 29 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00268c6:	83 c4 10             	add    esp,0x10
c00268c9:	83 ec 08             	sub    esp,0x8
c00268cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00268d0:	68 60 31 03 c0       	push   0xc0033160
c00268d5:	e8 83 29 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00268da:	83 c4 10             	add    esp,0x10
c00268dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268e1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00268e4:	c1 e0 05             	shl    eax,0x5
c00268e7:	8d 90 00 45 03 c0    	lea    edx,[eax-0x3ffcbb00]
c00268ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268f1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00268f4:	83 ec 04             	sub    esp,0x4
c00268f7:	52                   	push   edx
c00268f8:	50                   	push   eax
c00268f9:	68 6b 31 03 c0       	push   0xc003316b
c00268fe:	e8 5a 29 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026903:	83 c4 10             	add    esp,0x10
c0026906:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002690b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026911:	83 ec 0c             	sub    esp,0xc
c0026914:	50                   	push   eax
c0026915:	e8 57 07 ff ff       	call   c0017071 <setActiveTerminal(VgaText*)>
c002691a:	83 c4 10             	add    esp,0x10
c002691d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026922:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026928:	83 ec 08             	sub    esp,0x8
c002692b:	68 7a 31 03 c0       	push   0xc003317a
c0026930:	50                   	push   eax
c0026931:	e8 88 0a ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026936:	83 c4 10             	add    esp,0x10
c0026939:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002693e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026944:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026948:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c002694b:	83 ec 08             	sub    esp,0x8
c002694e:	52                   	push   edx
c002694f:	50                   	push   eax
c0026950:	e8 23 0a ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c0026955:	83 c4 10             	add    esp,0x10
c0026958:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002695d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026963:	83 ec 08             	sub    esp,0x8
c0026966:	68 88 31 03 c0       	push   0xc0033188
c002696b:	50                   	push   eax
c002696c:	e8 4d 0a ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026971:	83 c4 10             	add    esp,0x10
c0026974:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026979:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002697f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026984:	8b 12                	mov    edx,DWORD PTR [edx]
c0026986:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026989:	83 c2 0c             	add    edx,0xc
c002698c:	83 ec 08             	sub    esp,0x8
c002698f:	52                   	push   edx
c0026990:	50                   	push   eax
c0026991:	e8 28 0a ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026996:	83 c4 10             	add    esp,0x10
c0026999:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002699e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269a4:	83 ec 08             	sub    esp,0x8
c00269a7:	68 91 31 03 c0       	push   0xc0033191
c00269ac:	50                   	push   eax
c00269ad:	e8 0c 0a ff ff       	call   c00173be <VgaText::puts(char const*)>
c00269b2:	83 c4 10             	add    esp,0x10
c00269b5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269c4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00269c7:	83 ec 08             	sub    esp,0x8
c00269ca:	52                   	push   edx
c00269cb:	50                   	push   eax
c00269cc:	e8 a7 09 ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c00269d1:	83 c4 10             	add    esp,0x10
c00269d4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269df:	83 ec 08             	sub    esp,0x8
c00269e2:	68 99 31 03 c0       	push   0xc0033199
c00269e7:	50                   	push   eax
c00269e8:	e8 d1 09 ff ff       	call   c00173be <VgaText::puts(char const*)>
c00269ed:	83 c4 10             	add    esp,0x10
c00269f0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269ff:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026a02:	83 ec 08             	sub    esp,0x8
c0026a05:	52                   	push   edx
c0026a06:	50                   	push   eax
c0026a07:	e8 6c 09 ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c0026a0c:	83 c4 10             	add    esp,0x10
c0026a0f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a1a:	83 ec 08             	sub    esp,0x8
c0026a1d:	68 a1 31 03 c0       	push   0xc00331a1
c0026a22:	50                   	push   eax
c0026a23:	e8 96 09 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026a28:	83 c4 10             	add    esp,0x10
c0026a2b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a3a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026a3d:	83 ec 08             	sub    esp,0x8
c0026a40:	52                   	push   edx
c0026a41:	50                   	push   eax
c0026a42:	e8 31 09 ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c0026a47:	83 c4 10             	add    esp,0x10
c0026a4a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a55:	83 ec 08             	sub    esp,0x8
c0026a58:	68 a9 31 03 c0       	push   0xc00331a9
c0026a5d:	50                   	push   eax
c0026a5e:	e8 5b 09 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026a63:	83 c4 10             	add    esp,0x10
c0026a66:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a75:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026a78:	83 ec 08             	sub    esp,0x8
c0026a7b:	52                   	push   edx
c0026a7c:	50                   	push   eax
c0026a7d:	e8 f6 08 ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c0026a82:	83 c4 10             	add    esp,0x10
c0026a85:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a90:	83 ec 08             	sub    esp,0x8
c0026a93:	68 b1 31 03 c0       	push   0xc00331b1
c0026a98:	50                   	push   eax
c0026a99:	e8 20 09 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026a9e:	83 c4 10             	add    esp,0x10
c0026aa1:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026aa6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026aac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ab0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026ab3:	83 ec 08             	sub    esp,0x8
c0026ab6:	52                   	push   edx
c0026ab7:	50                   	push   eax
c0026ab8:	e8 bb 08 ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c0026abd:	83 c4 10             	add    esp,0x10
c0026ac0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ac5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026acb:	83 ec 08             	sub    esp,0x8
c0026ace:	68 b9 31 03 c0       	push   0xc00331b9
c0026ad3:	50                   	push   eax
c0026ad4:	e8 e5 08 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026ad9:	83 c4 10             	add    esp,0x10
c0026adc:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ae1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ae7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026aeb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026aee:	83 ec 08             	sub    esp,0x8
c0026af1:	52                   	push   edx
c0026af2:	50                   	push   eax
c0026af3:	e8 80 08 ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c0026af8:	83 c4 10             	add    esp,0x10
c0026afb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b06:	83 ec 08             	sub    esp,0x8
c0026b09:	68 c1 31 03 c0       	push   0xc00331c1
c0026b0e:	50                   	push   eax
c0026b0f:	e8 aa 08 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026b14:	83 c4 10             	add    esp,0x10
c0026b17:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b22:	83 ec 08             	sub    esp,0x8
c0026b25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026b29:	50                   	push   eax
c0026b2a:	e8 49 08 ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c0026b2f:	83 c4 10             	add    esp,0x10
c0026b32:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b3d:	83 ec 08             	sub    esp,0x8
c0026b40:	68 ca 31 03 c0       	push   0xc00331ca
c0026b45:	50                   	push   eax
c0026b46:	e8 73 08 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026b4b:	83 c4 10             	add    esp,0x10
c0026b4e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b53:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b59:	83 ec 08             	sub    esp,0x8
c0026b5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026b60:	50                   	push   eax
c0026b61:	e8 12 08 ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c0026b66:	83 c4 10             	add    esp,0x10
c0026b69:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b74:	83 ec 08             	sub    esp,0x8
c0026b77:	68 d2 31 03 c0       	push   0xc00331d2
c0026b7c:	50                   	push   eax
c0026b7d:	e8 3c 08 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0026b82:	83 c4 10             	add    esp,0x10
c0026b85:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b90:	83 ec 08             	sub    esp,0x8
c0026b93:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026b97:	50                   	push   eax
c0026b98:	e8 db 07 ff ff       	call   c0017378 <VgaText::putx(unsigned int)>
c0026b9d:	83 c4 10             	add    esp,0x10
c0026ba0:	fa                   	cli    
c0026ba1:	f4                   	hlt    
c0026ba2:	eb fe                	jmp    c0026ba2 <displayDebugInfo(regs*)+0x383>

c0026ba4 <HalSystemIdle()>:
c0026ba4:	56                   	push   esi
c0026ba5:	53                   	push   ebx
c0026ba6:	83 ec 14             	sub    esp,0x14
c0026ba9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026bae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026bb4:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026bba:	83 e0 04             	and    eax,0x4
c0026bbd:	0f b6 c0             	movzx  eax,al
c0026bc0:	85 c0                	test   eax,eax
c0026bc2:	0f 95 c0             	setne  al
c0026bc5:	0f b6 c0             	movzx  eax,al
c0026bc8:	85 c0                	test   eax,eax
c0026bca:	74 4c                	je     c0026c18 <HalSystemIdle()+0x74>
c0026bcc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026bd1:	83 ec 08             	sub    esp,0x8
c0026bd4:	68 e1 00 00 00       	push   0xe1
c0026bd9:	50                   	push   eax
c0026bda:	e8 e9 ed fe ff       	call   c00159c8 <Computer::rdmsr(unsigned int)>
c0026bdf:	83 c4 10             	add    esp,0x10
c0026be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026be6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026bea:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026bef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026bf3:	83 e2 02             	and    edx,0x2
c0026bf6:	89 d3                	mov    ebx,edx
c0026bf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026bfc:	83 e2 00             	and    edx,0x0
c0026bff:	89 d6                	mov    esi,edx
c0026c01:	56                   	push   esi
c0026c02:	53                   	push   ebx
c0026c03:	68 e1 00 00 00       	push   0xe1
c0026c08:	50                   	push   eax
c0026c09:	e8 e6 ed fe ff       	call   c00159f4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0026c0e:	83 c4 10             	add    esp,0x10
c0026c11:	e8 7e 95 fd ff       	call   c0000194 <doTPAUSE>
c0026c16:	eb 01                	jmp    c0026c19 <HalSystemIdle()+0x75>
c0026c18:	f4                   	hlt    
c0026c19:	90                   	nop
c0026c1a:	83 c4 14             	add    esp,0x14
c0026c1d:	5b                   	pop    ebx
c0026c1e:	5e                   	pop    esi
c0026c1f:	c3                   	ret    

c0026c20 <displayProgramFault(char const*)>:
c0026c20:	83 ec 0c             	sub    esp,0xc
c0026c23:	83 ec 0c             	sub    esp,0xc
c0026c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c2a:	e8 2e 26 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026c2f:	83 c4 10             	add    esp,0x10
c0026c32:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c42:	85 c0                	test   eax,eax
c0026c44:	74 21                	je     c0026c67 <displayProgramFault(char const*)+0x47>
c0026c46:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c50:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c56:	6a 04                	push   0x4
c0026c58:	6a 0f                	push   0xf
c0026c5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026c5e:	50                   	push   eax
c0026c5f:	e8 cc 07 ff ff       	call   c0017430 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026c64:	83 c4 10             	add    esp,0x10
c0026c67:	90                   	nop
c0026c68:	83 c4 0c             	add    esp,0xc
c0026c6b:	c3                   	ret    

c0026c6c <gpFault(regs*, void*)>:
c0026c6c:	83 ec 1c             	sub    esp,0x1c
c0026c6f:	c7 05 74 02 04 c0 c8 60 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc00260c8
c0026c79:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026c7e:	85 c0                	test   eax,eax
c0026c80:	74 1e                	je     c0026ca0 <gpFault(regs*, void*)+0x34>
c0026c82:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026c87:	83 ec 0c             	sub    esp,0xc
c0026c8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c8e:	ff d0                	call   eax
c0026c90:	83 c4 10             	add    esp,0x10
c0026c93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026c97:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026c9c:	85 c0                	test   eax,eax
c0026c9e:	75 2e                	jne    c0026cce <gpFault(regs*, void*)+0x62>
c0026ca0:	83 ec 0c             	sub    esp,0xc
c0026ca3:	68 da 31 03 c0       	push   0xc00331da
c0026ca8:	e8 73 ff ff ff       	call   c0026c20 <displayProgramFault(char const*)>
c0026cad:	83 c4 10             	add    esp,0x10
c0026cb0:	83 ec 0c             	sub    esp,0xc
c0026cb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026cb7:	e8 63 fb ff ff       	call   c002681f <displayDebugInfo(regs*)>
c0026cbc:	83 c4 10             	add    esp,0x10
c0026cbf:	83 ec 0c             	sub    esp,0xc
c0026cc2:	6a 00                	push   0x0
c0026cc4:	e8 2f ee ff ff       	call   c0025af8 <Thr::terminateFromIRQ(int)>
c0026cc9:	83 c4 10             	add    esp,0x10
c0026ccc:	eb 01                	jmp    c0026ccf <gpFault(regs*, void*)+0x63>
c0026cce:	90                   	nop
c0026ccf:	83 c4 1c             	add    esp,0x1c
c0026cd2:	c3                   	ret    

c0026cd3 <pgFault(regs*, void*)>:
c0026cd3:	83 ec 1c             	sub    esp,0x1c
c0026cd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026cda:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026cdd:	0f 20 d0             	mov    eax,cr2
c0026ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ce4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026ce8:	83 ec 04             	sub    esp,0x4
c0026ceb:	52                   	push   edx
c0026cec:	50                   	push   eax
c0026ced:	68 b8 32 03 c0       	push   0xc00332b8
c0026cf2:	e8 66 25 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026cf7:	83 c4 10             	add    esp,0x10
c0026cfa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026d04:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026d0a:	0f 20 d2             	mov    edx,cr2
c0026d0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026d11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026d15:	83 ec 08             	sub    esp,0x8
c0026d18:	52                   	push   edx
c0026d19:	50                   	push   eax
c0026d1a:	e8 89 1f ff ff       	call   c0018ca8 <VAS::tryLoadBackOffDisk(unsigned long)>
c0026d1f:	83 c4 10             	add    esp,0x10
c0026d22:	0f b6 c0             	movzx  eax,al
c0026d25:	85 c0                	test   eax,eax
c0026d27:	75 2e                	jne    c0026d57 <pgFault(regs*, void*)+0x84>
c0026d29:	83 ec 0c             	sub    esp,0xc
c0026d2c:	68 f3 31 03 c0       	push   0xc00331f3
c0026d31:	e8 ea fe ff ff       	call   c0026c20 <displayProgramFault(char const*)>
c0026d36:	83 c4 10             	add    esp,0x10
c0026d39:	83 ec 0c             	sub    esp,0xc
c0026d3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026d40:	e8 da fa ff ff       	call   c002681f <displayDebugInfo(regs*)>
c0026d45:	83 c4 10             	add    esp,0x10
c0026d48:	83 ec 0c             	sub    esp,0xc
c0026d4b:	6a 00                	push   0x0
c0026d4d:	e8 a6 ed ff ff       	call   c0025af8 <Thr::terminateFromIRQ(int)>
c0026d52:	83 c4 10             	add    esp,0x10
c0026d55:	eb 01                	jmp    c0026d58 <pgFault(regs*, void*)+0x85>
c0026d57:	90                   	nop
c0026d58:	83 c4 1c             	add    esp,0x1c
c0026d5b:	c3                   	ret    

c0026d5c <otherISRHandler(regs*, void*)>:
c0026d5c:	83 ec 0c             	sub    esp,0xc
c0026d5f:	83 ec 0c             	sub    esp,0xc
c0026d62:	68 e0 32 03 c0       	push   0xc00332e0
c0026d67:	e8 b4 fe ff ff       	call   c0026c20 <displayProgramFault(char const*)>
c0026d6c:	83 c4 10             	add    esp,0x10
c0026d6f:	83 ec 0c             	sub    esp,0xc
c0026d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d76:	e8 a4 fa ff ff       	call   c002681f <displayDebugInfo(regs*)>
c0026d7b:	83 c4 10             	add    esp,0x10
c0026d7e:	83 ec 0c             	sub    esp,0xc
c0026d81:	6a 00                	push   0x0
c0026d83:	e8 70 ed ff ff       	call   c0025af8 <Thr::terminateFromIRQ(int)>
c0026d88:	83 c4 10             	add    esp,0x10
c0026d8b:	90                   	nop
c0026d8c:	83 c4 0c             	add    esp,0xc
c0026d8f:	c3                   	ret    

c0026d90 <opcodeFault(regs*, void*)>:
c0026d90:	55                   	push   ebp
c0026d91:	89 e5                	mov    ebp,esp
c0026d93:	83 ec 08             	sub    esp,0x8
c0026d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026d9c:	83 ec 08             	sub    esp,0x8
c0026d9f:	50                   	push   eax
c0026da0:	68 fe 31 03 c0       	push   0xc00331fe
c0026da5:	e8 b3 24 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026daa:	83 c4 10             	add    esp,0x10
c0026dad:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026db2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026db8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026dbe:	0f b6 c0             	movzx  eax,al
c0026dc1:	85 c0                	test   eax,eax
c0026dc3:	74 21                	je     c0026de6 <opcodeFault(regs*, void*)+0x56>
c0026dc5:	83 ec 0c             	sub    esp,0xc
c0026dc8:	68 08 33 03 c0       	push   0xc0033308
c0026dcd:	e8 8b 24 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026dd2:	83 c4 10             	add    esp,0x10
c0026dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026dd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026ddb:	8d 50 19             	lea    edx,[eax+0x19]
c0026dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026de1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026de4:	eb 2b                	jmp    c0026e11 <opcodeFault(regs*, void*)+0x81>
c0026de6:	83 ec 0c             	sub    esp,0xc
c0026de9:	68 0c 32 03 c0       	push   0xc003320c
c0026dee:	e8 2d fe ff ff       	call   c0026c20 <displayProgramFault(char const*)>
c0026df3:	83 c4 10             	add    esp,0x10
c0026df6:	83 ec 0c             	sub    esp,0xc
c0026df9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dfc:	e8 1e fa ff ff       	call   c002681f <displayDebugInfo(regs*)>
c0026e01:	83 c4 10             	add    esp,0x10
c0026e04:	83 ec 0c             	sub    esp,0xc
c0026e07:	6a 00                	push   0x0
c0026e09:	e8 ea ec ff ff       	call   c0025af8 <Thr::terminateFromIRQ(int)>
c0026e0e:	83 c4 10             	add    esp,0x10
c0026e11:	c9                   	leave  
c0026e12:	c3                   	ret    

c0026e13 <i386SaveCoprocessor(void*)>:
c0026e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e17:	83 c0 3f             	add    eax,0x3f
c0026e1a:	83 e0 c0             	and    eax,0xffffffc0
c0026e1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e21:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026e27 <i386LoadCoprocessor(void*)>:
c0026e27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e2b:	83 c0 3f             	add    eax,0x3f
c0026e2e:	83 e0 c0             	and    eax,0xffffffc0
c0026e31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e35:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026e3b <x87EmulHandler(regs*, void*)>:
c0026e3b:	53                   	push   ebx
c0026e3c:	83 ec 08             	sub    esp,0x8
c0026e3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026e44:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026e48:	74 10                	je     c0026e5a <x87EmulHandler(regs*, void*)+0x1f>
c0026e4a:	83 ec 0c             	sub    esp,0xc
c0026e4d:	68 19 32 03 c0       	push   0xc0033219
c0026e52:	e8 1f 94 ff ff       	call   c0020276 <KePanic(char const*)>
c0026e57:	83 c4 10             	add    esp,0x10
c0026e5a:	0f 20 c0             	mov    eax,cr0
c0026e5d:	a8 08                	test   al,0x8
c0026e5f:	74 59                	je     c0026eba <x87EmulHandler(regs*, void*)+0x7f>
c0026e61:	0f 06                	clts   
c0026e63:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026e68:	85 c0                	test   eax,eax
c0026e6a:	74 0e                	je     c0026e7a <x87EmulHandler(regs*, void*)+0x3f>
c0026e6c:	83 ec 0c             	sub    esp,0xc
c0026e6f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026e72:	e8 9c ff ff ff       	call   c0026e13 <i386SaveCoprocessor(void*)>
c0026e77:	83 c4 10             	add    esp,0x10
c0026e7a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026e80:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026e84:	75 12                	jne    c0026e98 <x87EmulHandler(regs*, void*)+0x5d>
c0026e86:	83 ec 0c             	sub    esp,0xc
c0026e89:	68 40 02 00 00       	push   0x240
c0026e8e:	e8 2b f5 fe ff       	call   c00163be <malloc>
c0026e93:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026e96:	eb 10                	jmp    c0026ea8 <x87EmulHandler(regs*, void*)+0x6d>
c0026e98:	83 ec 0c             	sub    esp,0xc
c0026e9b:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026ea0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026ea3:	e8 7f ff ff ff       	call   c0026e27 <i386LoadCoprocessor(void*)>
c0026ea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026ead:	83 c4 10             	add    esp,0x10
c0026eb0:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026eb5:	83 c4 08             	add    esp,0x8
c0026eb8:	5b                   	pop    ebx
c0026eb9:	c3                   	ret    
c0026eba:	83 ec 0c             	sub    esp,0xc
c0026ebd:	68 2d 32 03 c0       	push   0xc003322d
c0026ec2:	e8 96 23 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026ec7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026ecf:	83 c4 18             	add    esp,0x18
c0026ed2:	5b                   	pop    ebx
c0026ed3:	e9 20 ec ff ff       	jmp    c0025af8 <Thr::terminateFromIRQ(int)>

c0026ed8 <HalInitialiseCoprocessor()>:
c0026ed8:	83 ec 10             	sub    esp,0x10
c0026edb:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026ee5:	6a 00                	push   0x0
c0026ee7:	68 3b 6e 02 c0       	push   0xc0026e3b
c0026eec:	6a 07                	push   0x7
c0026eee:	e8 37 49 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026ef3:	e8 a8 70 00 00       	call   c002dfa0 <avxDetect>
c0026ef8:	83 c4 10             	add    esp,0x10
c0026efb:	85 c0                	test   eax,eax
c0026efd:	74 1c                	je     c0026f1b <HalInitialiseCoprocessor()+0x43>
c0026eff:	c7 05 70 02 04 c0 ca df 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002dfca
c0026f09:	c7 05 6c 02 04 c0 db df 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002dfdb
c0026f13:	83 c4 0c             	add    esp,0xc
c0026f16:	e9 d1 70 00 00       	jmp    c002dfec <avxInit>
c0026f1b:	e8 f0 73 00 00       	call   c002e310 <sseDetect>
c0026f20:	85 c0                	test   eax,eax
c0026f22:	74 1c                	je     c0026f40 <HalInitialiseCoprocessor()+0x68>
c0026f24:	c7 05 70 02 04 c0 28 e3 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e328
c0026f2e:	c7 05 6c 02 04 c0 30 e3 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e330
c0026f38:	83 c4 0c             	add    esp,0xc
c0026f3b:	e9 f8 73 00 00       	jmp    c002e338 <sseInit>
c0026f40:	e8 11 74 00 00       	call   c002e356 <x87Detect>
c0026f45:	85 c0                	test   eax,eax
c0026f47:	74 1c                	je     c0026f65 <HalInitialiseCoprocessor()+0x8d>
c0026f49:	c7 05 70 02 04 c0 71 e3 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e371
c0026f53:	c7 05 6c 02 04 c0 78 e3 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e378
c0026f5d:	83 c4 0c             	add    esp,0xc
c0026f60:	e9 1a 74 00 00       	jmp    c002e37f <x87Init>
c0026f65:	c7 05 70 02 04 c0 ec 67 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00267ec
c0026f6f:	c7 05 6c 02 04 c0 ec 67 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00267ec
c0026f79:	0f 20 c0             	mov    eax,cr0
c0026f7c:	83 c8 04             	or     eax,0x4
c0026f7f:	0f 22 c0             	mov    cr0,eax
c0026f82:	83 c4 0c             	add    esp,0xc
c0026f85:	c3                   	ret    

c0026f86 <HalPanic(char const*)>:
c0026f86:	53                   	push   ebx
c0026f87:	83 ec 10             	sub    esp,0x10
c0026f8a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026f8e:	fa                   	cli    
c0026f8f:	53                   	push   ebx
c0026f90:	68 43 32 03 c0       	push   0xc0033243
c0026f95:	e8 c3 22 ff ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0026f9a:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026f9f:	83 c4 10             	add    esp,0x10
c0026fa2:	85 c0                	test   eax,eax
c0026fa4:	74 09                	je     c0026faf <HalPanic(char const*)+0x29>
c0026fa6:	83 ec 0c             	sub    esp,0xc
c0026fa9:	53                   	push   ebx
c0026faa:	ff d0                	call   eax
c0026fac:	83 c4 10             	add    esp,0x10
c0026faf:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026fb4:	85 c0                	test   eax,eax
c0026fb6:	0f 84 dc 00 00 00    	je     c0027098 <HalPanic(char const*)+0x112>
c0026fbc:	52                   	push   edx
c0026fbd:	6a 01                	push   0x1
c0026fbf:	6a 0f                	push   0xf
c0026fc1:	50                   	push   eax
c0026fc2:	e8 05 ff fe ff       	call   c0016ecc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026fc7:	59                   	pop    ecx
c0026fc8:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fce:	e8 e9 00 ff ff       	call   c00170bc <VgaText::clearScreen()>
c0026fd3:	58                   	pop    eax
c0026fd4:	5a                   	pop    edx
c0026fd5:	68 20 13 03 c0       	push   0xc0031320
c0026fda:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026fe0:	e8 1f ff fe ff       	call   c0016f04 <VgaText::setTitle(char*)>
c0026fe5:	83 c4 0c             	add    esp,0xc
c0026fe8:	6a 01                	push   0x1
c0026fea:	6a 0f                	push   0xf
c0026fec:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ff2:	e8 d5 fe fe ff       	call   c0016ecc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026ff7:	59                   	pop    ecx
c0026ff8:	58                   	pop    eax
c0026ff9:	68 5c 32 03 c0       	push   0xc003325c
c0026ffe:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027004:	e8 b5 03 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0027009:	83 c4 0c             	add    esp,0xc
c002700c:	6a 0f                	push   0xf
c002700e:	6a 01                	push   0x1
c0027010:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027016:	e8 b1 fe fe ff       	call   c0016ecc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002701b:	58                   	pop    eax
c002701c:	5a                   	pop    edx
c002701d:	68 65 32 03 c0       	push   0xc0033265
c0027022:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027028:	e8 91 03 ff ff       	call   c00173be <VgaText::puts(char const*)>
c002702d:	83 c4 0c             	add    esp,0xc
c0027030:	6a 01                	push   0x1
c0027032:	6a 0f                	push   0xf
c0027034:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002703a:	e8 8d fe fe ff       	call   c0016ecc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002703f:	59                   	pop    ecx
c0027040:	58                   	pop    eax
c0027041:	68 a9 32 03 c0       	push   0xc00332a9
c0027046:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002704c:	e8 6d 03 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0027051:	58                   	pop    eax
c0027052:	5a                   	pop    edx
c0027053:	68 72 32 03 c0       	push   0xc0033272
c0027058:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002705e:	e8 5b 03 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0027063:	59                   	pop    ecx
c0027064:	58                   	pop    eax
c0027065:	68 ac 32 03 c0       	push   0xc00332ac
c002706a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027070:	e8 49 03 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0027075:	58                   	pop    eax
c0027076:	5a                   	pop    edx
c0027077:	53                   	push   ebx
c0027078:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002707e:	e8 3b 03 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0027083:	59                   	pop    ecx
c0027084:	5b                   	pop    ebx
c0027085:	68 a9 32 03 c0       	push   0xc00332a9
c002708a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027090:	e8 29 03 ff ff       	call   c00173be <VgaText::puts(char const*)>
c0027095:	83 c4 10             	add    esp,0x10
c0027098:	eb fe                	jmp    c0027098 <HalPanic(char const*)+0x112>

c002709a <HalQueryPerformanceCounter()>:
c002709a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002709f:	31 d2                	xor    edx,edx
c00270a1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00270a7:	31 c0                	xor    eax,eax
c00270a9:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00270b0:	74 02                	je     c00270b4 <HalQueryPerformanceCounter()+0x1a>
c00270b2:	0f 31                	rdtsc  
c00270b4:	c3                   	ret    

c00270b5 <HalInitialise()>:
c00270b5:	53                   	push   ebx
c00270b6:	83 ec 08             	sub    esp,0x8
c00270b9:	e8 9c 49 ff ff       	call   c001ba5a <setupINTS()>
c00270be:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c00270c5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00270ca:	75 0f                	jne    c00270db <HalInitialise()+0x26>
c00270cc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00270d2:	83 e2 fe             	and    edx,0xfffffffe
c00270d5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00270db:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00270e1:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c00270e8:	83 e2 fe             	and    edx,0xfffffffe
c00270eb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00270f1:	e8 9e 02 00 00       	call   c0027394 <picOpen()>
c00270f6:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00270fd:	74 0a                	je     c0027109 <HalInitialise()+0x54>
c00270ff:	e8 e0 01 00 00       	call   c00272e4 <picDisable()>
c0027104:	e8 03 68 00 00       	call   c002d90c <apicOpen()>
c0027109:	bb 0f 00 00 00       	mov    ebx,0xf
c002710e:	50                   	push   eax
c002710f:	6a 00                	push   0x0
c0027111:	68 5c 6d 02 c0       	push   0xc0026d5c
c0027116:	6a 00                	push   0x0
c0027118:	e8 0d 47 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002711d:	83 c4 0c             	add    esp,0xc
c0027120:	6a 00                	push   0x0
c0027122:	68 5c 6d 02 c0       	push   0xc0026d5c
c0027127:	6a 01                	push   0x1
c0027129:	e8 fc 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002712e:	83 c4 0c             	add    esp,0xc
c0027131:	6a 00                	push   0x0
c0027133:	68 ed 67 02 c0       	push   0xc00267ed
c0027138:	6a 02                	push   0x2
c002713a:	e8 eb 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002713f:	83 c4 0c             	add    esp,0xc
c0027142:	6a 00                	push   0x0
c0027144:	68 5c 6d 02 c0       	push   0xc0026d5c
c0027149:	6a 03                	push   0x3
c002714b:	e8 da 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027150:	83 c4 0c             	add    esp,0xc
c0027153:	6a 00                	push   0x0
c0027155:	68 5c 6d 02 c0       	push   0xc0026d5c
c002715a:	6a 04                	push   0x4
c002715c:	e8 c9 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027161:	83 c4 0c             	add    esp,0xc
c0027164:	6a 00                	push   0x0
c0027166:	68 5c 6d 02 c0       	push   0xc0026d5c
c002716b:	6a 05                	push   0x5
c002716d:	e8 b8 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027172:	83 c4 0c             	add    esp,0xc
c0027175:	6a 00                	push   0x0
c0027177:	68 90 6d 02 c0       	push   0xc0026d90
c002717c:	6a 06                	push   0x6
c002717e:	e8 a7 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027183:	83 c4 0c             	add    esp,0xc
c0027186:	6a 00                	push   0x0
c0027188:	68 06 68 02 c0       	push   0xc0026806
c002718d:	6a 08                	push   0x8
c002718f:	e8 96 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027194:	83 c4 0c             	add    esp,0xc
c0027197:	6a 00                	push   0x0
c0027199:	68 5c 6d 02 c0       	push   0xc0026d5c
c002719e:	6a 09                	push   0x9
c00271a0:	e8 85 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271a5:	83 c4 0c             	add    esp,0xc
c00271a8:	6a 00                	push   0x0
c00271aa:	68 5c 6d 02 c0       	push   0xc0026d5c
c00271af:	6a 0a                	push   0xa
c00271b1:	e8 74 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271b6:	83 c4 0c             	add    esp,0xc
c00271b9:	6a 00                	push   0x0
c00271bb:	68 5c 6d 02 c0       	push   0xc0026d5c
c00271c0:	6a 0b                	push   0xb
c00271c2:	e8 63 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271c7:	83 c4 0c             	add    esp,0xc
c00271ca:	6a 00                	push   0x0
c00271cc:	68 6c 6c 02 c0       	push   0xc0026c6c
c00271d1:	6a 0d                	push   0xd
c00271d3:	e8 52 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271d8:	83 c4 0c             	add    esp,0xc
c00271db:	6a 00                	push   0x0
c00271dd:	68 d3 6c 02 c0       	push   0xc0026cd3
c00271e2:	6a 0e                	push   0xe
c00271e4:	e8 41 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271e9:	83 c4 10             	add    esp,0x10
c00271ec:	50                   	push   eax
c00271ed:	6a 00                	push   0x0
c00271ef:	68 5c 6d 02 c0       	push   0xc0026d5c
c00271f4:	53                   	push   ebx
c00271f5:	43                   	inc    ebx
c00271f6:	e8 2f 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271fb:	83 c4 10             	add    esp,0x10
c00271fe:	83 fb 1e             	cmp    ebx,0x1e
c0027201:	75 e9                	jne    c00271ec <HalInitialise()+0x137>
c0027203:	50                   	push   eax
c0027204:	6a 00                	push   0x0
c0027206:	68 25 1b 02 c0       	push   0xc0021b25
c002720b:	6a 60                	push   0x60
c002720d:	e8 18 46 ff ff       	call   c001b82a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027212:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027217:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0027221:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0027228:	e8 91 f1 fe ff       	call   c00163be <malloc>
c002722d:	89 04 24             	mov    DWORD PTR [esp],eax
c0027230:	89 c3                	mov    ebx,eax
c0027232:	e8 3b 09 00 00       	call   c0027b72 <RTC::RTC()>
c0027237:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0027241:	5a                   	pop    edx
c0027242:	59                   	pop    ecx
c0027243:	53                   	push   ebx
c0027244:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002724a:	e8 8f 40 ff ff       	call   c001b2de <Device::addChild(Device*)>
c002724f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027251:	6a 00                	push   0x0
c0027253:	6a 00                	push   0x0
c0027255:	6a 00                	push   0x0
c0027257:	53                   	push   ebx
c0027258:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002725b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027260:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0027266:	83 c4 28             	add    esp,0x28
c0027269:	5b                   	pop    ebx
c002726a:	c3                   	ret    

c002726b <HalMakeBeep(int)>:
c002726b:	53                   	push   ebx
c002726c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027270:	85 db                	test   ebx,ebx
c0027272:	75 07                	jne    c002727b <HalMakeBeep(int)+0x10>
c0027274:	e4 61                	in     al,0x61
c0027276:	83 e0 fc             	and    eax,0xfffffffc
c0027279:	eb 26                	jmp    c00272a1 <HalMakeBeep(int)+0x36>
c002727b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027280:	99                   	cdq    
c0027281:	f7 fb                	idiv   ebx
c0027283:	89 c1                	mov    ecx,eax
c0027285:	b0 b6                	mov    al,0xb6
c0027287:	e6 43                	out    0x43,al
c0027289:	88 c8                	mov    al,cl
c002728b:	e6 42                	out    0x42,al
c002728d:	89 c8                	mov    eax,ecx
c002728f:	c1 e8 08             	shr    eax,0x8
c0027292:	e6 42                	out    0x42,al
c0027294:	e4 61                	in     al,0x61
c0027296:	89 c2                	mov    edx,eax
c0027298:	83 ca 03             	or     edx,0x3
c002729b:	38 d0                	cmp    al,dl
c002729d:	74 04                	je     c00272a3 <HalMakeBeep(int)+0x38>
c002729f:	88 d0                	mov    al,dl
c00272a1:	e6 61                	out    0x61,al
c00272a3:	5b                   	pop    ebx
c00272a4:	c3                   	ret    

c00272a5 <HalGetRand()>:
c00272a5:	31 c0                	xor    eax,eax
c00272a7:	c3                   	ret    

c00272a8 <HalEndOfInterrupt(int)>:
c00272a8:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00272af:	74 23                	je     c00272d4 <HalEndOfInterrupt(int)+0x2c>
c00272b1:	83 ec 14             	sub    esp,0x14
c00272b4:	6a 1b                	push   0x1b
c00272b6:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272bc:	e8 07 e7 fe ff       	call   c00159c8 <Computer::rdmsr(unsigned int)>
c00272c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00272c6:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00272d0:	83 c4 1c             	add    esp,0x1c
c00272d3:	c3                   	ret    
c00272d4:	e9 3f 02 00 00       	jmp    c0027518 <picEOI(int)>

c00272d9 <HalRestart()>:
c00272d9:	c3                   	ret    

c00272da <HalShutdown()>:
c00272da:	c3                   	ret    

c00272db <HalSleep()>:
c00272db:	c3                   	ret    

c00272dc <picIoWait()>:
c00272dc:	eb 00                	jmp    c00272de <picIoWait()+0x2>
c00272de:	eb 00                	jmp    c00272e0 <picIoWait()+0x4>
c00272e0:	90                   	nop
c00272e1:	c3                   	ret    
c00272e2:	66 90                	xchg   ax,ax

c00272e4 <picDisable()>:
c00272e4:	83 ec 10             	sub    esp,0x10
c00272e7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00272ee:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00272f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00272f7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00272fc:	ee                   	out    dx,al
c00272fd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0027304:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0027309:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002730d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0027312:	ee                   	out    dx,al
c0027313:	90                   	nop
c0027314:	83 c4 10             	add    esp,0x10
c0027317:	c3                   	ret    

c0027318 <picGetIRQReg(int)>:
c0027318:	83 ec 10             	sub    esp,0x10
c002731b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002731f:	0f b6 c0             	movzx  eax,al
c0027322:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027329:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c002732d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027331:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027336:	ee                   	out    dx,al
c0027337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002733b:	0f b6 c0             	movzx  eax,al
c002733e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027345:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027349:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002734d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027352:	ee                   	out    dx,al
c0027353:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c002735a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c002735f:	89 c2                	mov    edx,eax
c0027361:	ec                   	in     al,dx
c0027362:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027366:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002736a:	0f b6 c0             	movzx  eax,al
c002736d:	c1 e0 08             	shl    eax,0x8
c0027370:	89 c1                	mov    ecx,eax
c0027372:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027379:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c002737e:	89 c2                	mov    edx,eax
c0027380:	ec                   	in     al,dx
c0027381:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027385:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027389:	0f b6 c0             	movzx  eax,al
c002738c:	09 c8                	or     eax,ecx
c002738e:	83 c4 10             	add    esp,0x10
c0027391:	c3                   	ret    
c0027392:	66 90                	xchg   ax,ax

c0027394 <picOpen()>:
c0027394:	83 ec 50             	sub    esp,0x50
c0027397:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c002739e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00273a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00273a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00273ab:	ee                   	out    dx,al
c00273ac:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00273b3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00273b8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00273bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273c0:	ee                   	out    dx,al
c00273c1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00273c9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00273d1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00273d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00273dc:	89 c2                	mov    edx,eax
c00273de:	ec                   	in     al,dx
c00273df:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00273e3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00273e7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00273eb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00273f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00273f6:	89 c2                	mov    edx,eax
c00273f8:	ec                   	in     al,dx
c00273f9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00273fd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027401:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0027405:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c002740c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027411:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0027415:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027419:	ee                   	out    dx,al
c002741a:	e8 bd fe ff ff       	call   c00272dc <picIoWait()>
c002741f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0027426:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c002742b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c002742f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027433:	ee                   	out    dx,al
c0027434:	e8 a3 fe ff ff       	call   c00272dc <picIoWait()>
c0027439:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002743d:	0f b6 c0             	movzx  eax,al
c0027440:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0027447:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c002744b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c002744f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027453:	ee                   	out    dx,al
c0027454:	e8 83 fe ff ff       	call   c00272dc <picIoWait()>
c0027459:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002745d:	0f b6 c0             	movzx  eax,al
c0027460:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0027467:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002746b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002746f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027473:	ee                   	out    dx,al
c0027474:	e8 63 fe ff ff       	call   c00272dc <picIoWait()>
c0027479:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027480:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027485:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027489:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002748d:	ee                   	out    dx,al
c002748e:	e8 49 fe ff ff       	call   c00272dc <picIoWait()>
c0027493:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c002749a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c002749f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00274a3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00274a7:	ee                   	out    dx,al
c00274a8:	e8 2f fe ff ff       	call   c00272dc <picIoWait()>
c00274ad:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00274b4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00274b9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00274bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00274c1:	ee                   	out    dx,al
c00274c2:	e8 15 fe ff ff       	call   c00272dc <picIoWait()>
c00274c7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00274ce:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00274d3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00274d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00274db:	ee                   	out    dx,al
c00274dc:	e8 fb fd ff ff       	call   c00272dc <picIoWait()>
c00274e1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00274e6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00274ed:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00274f1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00274f5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00274f9:	ee                   	out    dx,al
c00274fa:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00274ff:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0027506:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002750a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c002750e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0027512:	ee                   	out    dx,al
c0027513:	90                   	nop
c0027514:	83 c4 50             	add    esp,0x50
c0027517:	c3                   	ret    

c0027518 <picEOI(int)>:
c0027518:	83 ec 10             	sub    esp,0x10
c002751b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027520:	75 1e                	jne    c0027540 <picEOI(int)+0x28>
c0027522:	6a 0b                	push   0xb
c0027524:	e8 ef fd ff ff       	call   c0027318 <picGetIRQReg(int)>
c0027529:	83 c4 04             	add    esp,0x4
c002752c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027531:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0027536:	25 80 00 00 00       	and    eax,0x80
c002753b:	74 73                	je     c00275b0 <picEOI(int)+0x98>
c002753d:	8d 76 00             	lea    esi,[esi+0x0]
c0027540:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027545:	75 31                	jne    c0027578 <picEOI(int)+0x60>
c0027547:	6a 0b                	push   0xb
c0027549:	e8 ca fd ff ff       	call   c0027318 <picGetIRQReg(int)>
c002754e:	83 c4 04             	add    esp,0x4
c0027551:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0027556:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002755a:	98                   	cwde   
c002755b:	85 c0                	test   eax,eax
c002755d:	78 19                	js     c0027578 <picEOI(int)+0x60>
c002755f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0027566:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c002756b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002756f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027574:	ee                   	out    dx,al
c0027575:	eb 3d                	jmp    c00275b4 <picEOI(int)+0x9c>
c0027577:	90                   	nop
c0027578:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c002757d:	7e 19                	jle    c0027598 <picEOI(int)+0x80>
c002757f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027586:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c002758b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002758f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027594:	ee                   	out    dx,al
c0027595:	8d 76 00             	lea    esi,[esi+0x0]
c0027598:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c002759f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00275a4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00275a8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00275ad:	ee                   	out    dx,al
c00275ae:	eb 04                	jmp    c00275b4 <picEOI(int)+0x9c>
c00275b0:	90                   	nop
c00275b1:	8d 76 00             	lea    esi,[esi+0x0]
c00275b4:	83 c4 10             	add    esp,0x10
c00275b7:	c3                   	ret    

c00275b8 <RTC::open(int, int, void*)>:
c00275b8:	31 c0                	xor    eax,eax
c00275ba:	c3                   	ret    
c00275bb:	90                   	nop

c00275bc <RTC::close(int, int, void*)>:
c00275bc:	31 c0                	xor    eax,eax
c00275be:	c3                   	ret    
c00275bf:	90                   	nop

c00275c0 <RTC::timeInSecondsUTC()>:
c00275c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275c4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00275ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00275d0:	c3                   	ret    
c00275d1:	90                   	nop

c00275d2 <RTC::timeInDatetimeUTC()>:
c00275d2:	53                   	push   ebx
c00275d3:	83 ec 14             	sub    esp,0x14
c00275d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00275da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00275de:	8b 10                	mov    edx,DWORD PTR [eax]
c00275e0:	50                   	push   eax
c00275e1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00275e4:	83 c4 0c             	add    esp,0xc
c00275e7:	52                   	push   edx
c00275e8:	50                   	push   eax
c00275e9:	53                   	push   ebx
c00275ea:	e8 63 3a ff ff       	call   c001b052 <secondsToDatetime(unsigned long long)>
c00275ef:	89 d8                	mov    eax,ebx
c00275f1:	83 c4 14             	add    esp,0x14
c00275f4:	5b                   	pop    ebx
c00275f5:	c2 04 00             	ret    0x4

c00275f8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00275f8:	56                   	push   esi
c00275f9:	53                   	push   ebx
c00275fa:	83 ec 14             	sub    esp,0x14
c00275fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027601:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027603:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0027606:	8d 44 24 08          	lea    eax,[esp+0x8]
c002760a:	52                   	push   edx
c002760b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002760f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027613:	50                   	push   eax
c0027614:	e8 39 3a ff ff       	call   c001b052 <secondsToDatetime(unsigned long long)>
c0027619:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002761d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027621:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027625:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0027629:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002762d:	89 f0                	mov    eax,esi
c002762f:	83 c4 20             	add    esp,0x20
c0027632:	5b                   	pop    ebx
c0027633:	5e                   	pop    esi
c0027634:	ff e0                	jmp    eax

c0027636 <RTC::~RTC()>:
c0027636:	83 ec 0c             	sub    esp,0xc
c0027639:	ba 48 33 03 c0       	mov    edx,0xc0033348
c002763e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027642:	89 10                	mov    DWORD PTR [eax],edx
c0027644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027648:	83 ec 0c             	sub    esp,0xc
c002764b:	50                   	push   eax
c002764c:	e8 93 37 ff ff       	call   c001ade4 <Clock::~Clock()>
c0027651:	83 c4 10             	add    esp,0x10
c0027654:	90                   	nop
c0027655:	83 c4 0c             	add    esp,0xc
c0027658:	c3                   	ret    
c0027659:	90                   	nop

c002765a <RTC::~RTC()>:
c002765a:	83 ec 0c             	sub    esp,0xc
c002765d:	83 ec 0c             	sub    esp,0xc
c0027660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027664:	e8 cd ff ff ff       	call   c0027636 <RTC::~RTC()>
c0027669:	83 c4 10             	add    esp,0x10
c002766c:	83 ec 08             	sub    esp,0x8
c002766f:	68 60 01 00 00       	push   0x160
c0027674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027678:	e8 b3 1a ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002767d:	83 c4 10             	add    esp,0x10
c0027680:	83 c4 0c             	add    esp,0xc
c0027683:	c3                   	ret    

c0027684 <RTC::get_update_in_progress_flag()>:
c0027684:	83 ec 14             	sub    esp,0x14
c0027687:	6a 0a                	push   0xa
c0027689:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002768f:	e8 ec e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027694:	83 c4 1c             	add    esp,0x1c
c0027697:	0f b6 c0             	movzx  eax,al
c002769a:	c1 e8 07             	shr    eax,0x7
c002769d:	c3                   	ret    

c002769e <RTC::completeRTCRefresh()>:
c002769e:	55                   	push   ebp
c002769f:	57                   	push   edi
c00276a0:	56                   	push   esi
c00276a1:	53                   	push   ebx
c00276a2:	83 ec 3c             	sub    esp,0x3c
c00276a5:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00276ab:	83 ec 0c             	sub    esp,0xc
c00276ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00276b2:	e8 cd ff ff ff       	call   c0027684 <RTC::get_update_in_progress_flag()>
c00276b7:	83 c4 10             	add    esp,0x10
c00276ba:	84 c0                	test   al,al
c00276bc:	74 0e                	je     c00276cc <RTC::completeRTCRefresh()+0x2e>
c00276be:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00276c4:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00276ca:	73 df                	jae    c00276ab <RTC::completeRTCRefresh()+0xd>
c00276cc:	51                   	push   ecx
c00276cd:	51                   	push   ecx
c00276ce:	6a 00                	push   0x0
c00276d0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276d6:	e8 a5 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00276db:	5b                   	pop    ebx
c00276dc:	89 c7                	mov    edi,eax
c00276de:	5e                   	pop    esi
c00276df:	6a 02                	push   0x2
c00276e1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276e7:	e8 94 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00276ec:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00276f0:	5d                   	pop    ebp
c00276f1:	58                   	pop    eax
c00276f2:	6a 04                	push   0x4
c00276f4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276fa:	e8 81 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00276ff:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0027703:	58                   	pop    eax
c0027704:	5a                   	pop    edx
c0027705:	6a 07                	push   0x7
c0027707:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002770d:	e8 6e e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027712:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0027716:	59                   	pop    ecx
c0027717:	5b                   	pop    ebx
c0027718:	6a 08                	push   0x8
c002771a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027720:	e8 5b e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027725:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027729:	5e                   	pop    esi
c002772a:	5d                   	pop    ebp
c002772b:	6a 09                	push   0x9
c002772d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027733:	e8 48 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027738:	0f b6 c0             	movzx  eax,al
c002773b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002773f:	83 c4 10             	add    esp,0x10
c0027742:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027748:	83 ec 0c             	sub    esp,0xc
c002774b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002774f:	e8 30 ff ff ff       	call   c0027684 <RTC::get_update_in_progress_flag()>
c0027754:	83 c4 10             	add    esp,0x10
c0027757:	84 c0                	test   al,al
c0027759:	74 0e                	je     c0027769 <RTC::completeRTCRefresh()+0xcb>
c002775b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027761:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027767:	73 df                	jae    c0027748 <RTC::completeRTCRefresh()+0xaa>
c0027769:	51                   	push   ecx
c002776a:	51                   	push   ecx
c002776b:	6a 00                	push   0x0
c002776d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027773:	e8 08 e3 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027778:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002777c:	5b                   	pop    ebx
c002777d:	5e                   	pop    esi
c002777e:	6a 02                	push   0x2
c0027780:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027786:	e8 f5 e2 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c002778b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002778f:	5d                   	pop    ebp
c0027790:	58                   	pop    eax
c0027791:	6a 04                	push   0x4
c0027793:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027799:	e8 e2 e2 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c002779e:	88 c3                	mov    bl,al
c00277a0:	58                   	pop    eax
c00277a1:	5a                   	pop    edx
c00277a2:	6a 07                	push   0x7
c00277a4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277aa:	e8 d1 e2 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00277af:	59                   	pop    ecx
c00277b0:	89 c6                	mov    esi,eax
c00277b2:	5d                   	pop    ebp
c00277b3:	6a 08                	push   0x8
c00277b5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277bb:	e8 c0 e2 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00277c0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00277c4:	58                   	pop    eax
c00277c5:	5a                   	pop    edx
c00277c6:	6a 09                	push   0x9
c00277c8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277ce:	e8 ad e2 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00277d3:	89 f9                	mov    ecx,edi
c00277d5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00277d9:	0f b6 e8             	movzx  ebp,al
c00277dc:	83 c4 10             	add    esp,0x10
c00277df:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00277e3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00277e8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00277ed:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00277f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00277f5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00277f9:	0f 94 c0             	sete   al
c00277fc:	0f b6 fb             	movzx  edi,bl
c00277ff:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0027803:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0027808:	0f 94 c2             	sete   dl
c002780b:	21 d0                	and    eax,edx
c002780d:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027811:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027815:	0f 94 c2             	sete   dl
c0027818:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002781c:	21 c2                	and    edx,eax
c002781e:	89 f0                	mov    eax,esi
c0027820:	0f b6 c0             	movzx  eax,al
c0027823:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027827:	89 f0                	mov    eax,esi
c0027829:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c002782d:	0f 94 c0             	sete   al
c0027830:	21 d0                	and    eax,edx
c0027832:	31 d2                	xor    edx,edx
c0027834:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027838:	0f 94 c2             	sete   dl
c002783b:	85 c2                	test   edx,eax
c002783d:	75 27                	jne    c0027866 <RTC::completeRTCRefresh()+0x1c8>
c002783f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027843:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027847:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c002784b:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c002784f:	89 f0                	mov    eax,esi
c0027851:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027855:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027859:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002785d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027861:	e9 dc fe ff ff       	jmp    c0027742 <RTC::completeRTCRefresh()+0xa4>
c0027866:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c002786a:	75 d3                	jne    c002783f <RTC::completeRTCRefresh()+0x1a1>
c002786c:	52                   	push   edx
c002786d:	52                   	push   edx
c002786e:	6a 0b                	push   0xb
c0027870:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027876:	e8 05 e2 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c002787b:	83 c4 10             	add    esp,0x10
c002787e:	a8 04                	test   al,0x4
c0027880:	75 7a                	jne    c00278fc <RTC::completeRTCRefresh()+0x25e>
c0027882:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027886:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002788a:	83 e1 0f             	and    ecx,0xf
c002788d:	c1 ea 04             	shr    edx,0x4
c0027890:	c1 ef 04             	shr    edi,0x4
c0027893:	6b d2 0a             	imul   edx,edx,0xa
c0027896:	83 e6 0f             	and    esi,0xf
c0027899:	01 d1                	add    ecx,edx
c002789b:	c1 ed 04             	shr    ebp,0x4
c002789e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00278a2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00278a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00278aa:	c1 ea 04             	shr    edx,0x4
c00278ad:	83 e1 0f             	and    ecx,0xf
c00278b0:	6b d2 0a             	imul   edx,edx,0xa
c00278b3:	6b ed 0a             	imul   ebp,ebp,0xa
c00278b6:	01 d1                	add    ecx,edx
c00278b8:	89 fa                	mov    edx,edi
c00278ba:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00278be:	83 e2 07             	and    edx,0x7
c00278c1:	89 d9                	mov    ecx,ebx
c00278c3:	6b d2 0a             	imul   edx,edx,0xa
c00278c6:	83 e1 0f             	and    ecx,0xf
c00278c9:	83 e3 80             	and    ebx,0xffffff80
c00278cc:	01 d1                	add    ecx,edx
c00278ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00278d2:	09 cb                	or     ebx,ecx
c00278d4:	c1 ea 04             	shr    edx,0x4
c00278d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00278db:	6b d2 0a             	imul   edx,edx,0xa
c00278de:	83 e1 0f             	and    ecx,0xf
c00278e1:	01 d6                	add    esi,edx
c00278e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00278e7:	c1 ea 04             	shr    edx,0x4
c00278ea:	6b d2 0a             	imul   edx,edx,0xa
c00278ed:	01 d1                	add    ecx,edx
c00278ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00278f3:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00278f7:	83 e2 0f             	and    edx,0xf
c00278fa:	01 d5                	add    ebp,edx
c00278fc:	a8 02                	test   al,0x2
c00278fe:	75 15                	jne    c0027915 <RTC::completeRTCRefresh()+0x277>
c0027900:	f6 c3 80             	test   bl,0x80
c0027903:	74 10                	je     c0027915 <RTC::completeRTCRefresh()+0x277>
c0027905:	83 e3 7f             	and    ebx,0x7f
c0027908:	b9 18 00 00 00       	mov    ecx,0x18
c002790d:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027910:	99                   	cdq    
c0027911:	f7 f9                	idiv   ecx
c0027913:	88 d3                	mov    bl,dl
c0027915:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c002791b:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027921:	77 06                	ja     c0027929 <RTC::completeRTCRefresh()+0x28b>
c0027923:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027929:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002792e:	31 c9                	xor    ecx,ecx
c0027930:	c1 e0 10             	shl    eax,0x10
c0027933:	89 cd                	mov    ebp,ecx
c0027935:	c1 e7 10             	shl    edi,0x10
c0027938:	31 d2                	xor    edx,edx
c002793a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027940:	09 c5                	or     ebp,eax
c0027942:	89 f0                	mov    eax,esi
c0027944:	89 e9                	mov    ecx,ebp
c0027946:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002794a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c002794e:	88 c2                	mov    dl,al
c0027950:	88 d9                	mov    cl,bl
c0027952:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0027956:	0f b7 c2             	movzx  eax,dx
c0027959:	09 f8                	or     eax,edi
c002795b:	89 c2                	mov    edx,eax
c002795d:	50                   	push   eax
c002795e:	50                   	push   eax
c002795f:	51                   	push   ecx
c0027960:	52                   	push   edx
c0027961:	e8 6d 35 ff ff       	call   c001aed3 <datetimeToSeconds(datetime_t)>
c0027966:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c002796a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027970:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027976:	83 c4 4c             	add    esp,0x4c
c0027979:	5b                   	pop    ebx
c002797a:	5e                   	pop    esi
c002797b:	5f                   	pop    edi
c002797c:	5d                   	pop    ebp
c002797d:	c3                   	ret    

c002797e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c002797e:	55                   	push   ebp
c002797f:	57                   	push   edi
c0027980:	56                   	push   esi
c0027981:	53                   	push   ebx
c0027982:	83 ec 30             	sub    esp,0x30
c0027985:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027989:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c002798d:	6a 00                	push   0x0
c002798f:	6a 00                	push   0x0
c0027991:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027997:	e8 fe e1 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c002799c:	83 c4 0c             	add    esp,0xc
c002799f:	6a 00                	push   0x0
c00279a1:	6a 02                	push   0x2
c00279a3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279a9:	e8 ec e1 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c00279ae:	31 d2                	xor    edx,edx
c00279b0:	89 f9                	mov    ecx,edi
c00279b2:	89 f8                	mov    eax,edi
c00279b4:	c1 e9 10             	shr    ecx,0x10
c00279b7:	0f b6 c4             	movzx  eax,ah
c00279ba:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00279be:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00279c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00279c6:	b9 64 00 00 00       	mov    ecx,0x64
c00279cb:	89 f0                	mov    eax,esi
c00279cd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00279d1:	89 f0                	mov    eax,esi
c00279d3:	0f b6 c4             	movzx  eax,ah
c00279d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00279da:	89 f0                	mov    eax,esi
c00279dc:	c1 e8 10             	shr    eax,0x10
c00279df:	f7 f1                	div    ecx
c00279e1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00279e5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00279e9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00279ed:	59                   	pop    ecx
c00279ee:	5b                   	pop    ebx
c00279ef:	89 fb                	mov    ebx,edi
c00279f1:	6a 0b                	push   0xb
c00279f3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279f9:	e8 82 e0 fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c00279fe:	83 c4 10             	add    esp,0x10
c0027a01:	89 c5                	mov    ebp,eax
c0027a03:	a8 04                	test   al,0x4
c0027a05:	75 6e                	jne    c0027a75 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027a07:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027a0b:	31 d2                	xor    edx,edx
c0027a0d:	0f b6 c1             	movzx  eax,cl
c0027a10:	b9 0a 00 00 00       	mov    ecx,0xa
c0027a15:	f7 f1                	div    ecx
c0027a17:	c1 e0 04             	shl    eax,0x4
c0027a1a:	09 d0                	or     eax,edx
c0027a1c:	31 d2                	xor    edx,edx
c0027a1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027a22:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027a27:	f7 f1                	div    ecx
c0027a29:	c1 e0 04             	shl    eax,0x4
c0027a2c:	09 d0                	or     eax,edx
c0027a2e:	31 d2                	xor    edx,edx
c0027a30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027a34:	0f b6 c3             	movzx  eax,bl
c0027a37:	f7 f1                	div    ecx
c0027a39:	c1 e0 04             	shl    eax,0x4
c0027a3c:	09 d0                	or     eax,edx
c0027a3e:	31 d2                	xor    edx,edx
c0027a40:	89 c3                	mov    ebx,eax
c0027a42:	89 f0                	mov    eax,esi
c0027a44:	0f b6 c0             	movzx  eax,al
c0027a47:	f7 f1                	div    ecx
c0027a49:	c1 e0 04             	shl    eax,0x4
c0027a4c:	09 d0                	or     eax,edx
c0027a4e:	31 d2                	xor    edx,edx
c0027a50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027a54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a59:	f7 f1                	div    ecx
c0027a5b:	c1 e0 04             	shl    eax,0x4
c0027a5e:	09 d0                	or     eax,edx
c0027a60:	31 d2                	xor    edx,edx
c0027a62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027a66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027a6a:	f7 f1                	div    ecx
c0027a6c:	c1 e0 04             	shl    eax,0x4
c0027a6f:	09 d0                	or     eax,edx
c0027a71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027a75:	83 e5 02             	and    ebp,0x2
c0027a78:	75 1e                	jne    c0027a98 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a7a:	0f b6 c3             	movzx  eax,bl
c0027a7d:	83 f8 0b             	cmp    eax,0xb
c0027a80:	76 10                	jbe    c0027a92 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027a82:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027a85:	88 d3                	mov    bl,dl
c0027a87:	84 d2                	test   dl,dl
c0027a89:	75 02                	jne    c0027a8d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027a8b:	b3 0c                	mov    bl,0xc
c0027a8d:	83 cb 80             	or     ebx,0xffffff80
c0027a90:	eb 06                	jmp    c0027a98 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a92:	85 c0                	test   eax,eax
c0027a94:	75 02                	jne    c0027a98 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027a96:	b3 0c                	mov    bl,0xc
c0027a98:	0f b6 db             	movzx  ebx,bl
c0027a9b:	50                   	push   eax
c0027a9c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027aa1:	52                   	push   edx
c0027aa2:	6a 00                	push   0x0
c0027aa4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027aaa:	e8 eb e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027aaf:	83 c4 0c             	add    esp,0xc
c0027ab2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027ab7:	50                   	push   eax
c0027ab8:	6a 02                	push   0x2
c0027aba:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ac0:	e8 d5 e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ac5:	83 c4 0c             	add    esp,0xc
c0027ac8:	53                   	push   ebx
c0027ac9:	6a 04                	push   0x4
c0027acb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ad1:	e8 c4 e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ad6:	83 c4 0c             	add    esp,0xc
c0027ad9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027ade:	52                   	push   edx
c0027adf:	6a 07                	push   0x7
c0027ae1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ae7:	e8 ae e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027aec:	83 c4 0c             	add    esp,0xc
c0027aef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027af4:	50                   	push   eax
c0027af5:	6a 08                	push   0x8
c0027af7:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027afd:	e8 98 e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b02:	83 c4 0c             	add    esp,0xc
c0027b05:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027b0a:	55                   	push   ebp
c0027b0b:	6a 09                	push   0x9
c0027b0d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b13:	e8 82 e0 fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b18:	5a                   	pop    edx
c0027b19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027b1d:	e8 7c fb ff ff       	call   c002769e <RTC::completeRTCRefresh()>
c0027b22:	83 c4 3c             	add    esp,0x3c
c0027b25:	b0 01                	mov    al,0x1
c0027b27:	5b                   	pop    ebx
c0027b28:	5e                   	pop    esi
c0027b29:	5f                   	pop    edi
c0027b2a:	5d                   	pop    ebp
c0027b2b:	c3                   	ret    

c0027b2c <rtcIRQHandler(regs*, void*)>:
c0027b2c:	53                   	push   ebx
c0027b2d:	83 ec 10             	sub    esp,0x10
c0027b30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027b34:	6a 0c                	push   0xc
c0027b36:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b3c:	e8 3f df fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027b41:	83 c4 10             	add    esp,0x10
c0027b44:	a8 80                	test   al,0x80
c0027b46:	74 24                	je     c0027b6c <rtcIRQHandler(regs*, void*)+0x40>
c0027b48:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027b4f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027b56:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027b5d:	75 0d                	jne    c0027b6c <rtcIRQHandler(regs*, void*)+0x40>
c0027b5f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027b63:	83 c4 08             	add    esp,0x8
c0027b66:	5b                   	pop    ebx
c0027b67:	e9 32 fb ff ff       	jmp    c002769e <RTC::completeRTCRefresh()>
c0027b6c:	83 c4 08             	add    esp,0x8
c0027b6f:	5b                   	pop    ebx
c0027b70:	c3                   	ret    
c0027b71:	90                   	nop

c0027b72 <RTC::RTC()>:
c0027b72:	83 ec 1c             	sub    esp,0x1c
c0027b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b79:	83 ec 08             	sub    esp,0x8
c0027b7c:	68 2b 33 03 c0       	push   0xc003332b
c0027b81:	50                   	push   eax
c0027b82:	e8 27 32 ff ff       	call   c001adae <Clock::Clock(char const*)>
c0027b87:	83 c4 10             	add    esp,0x10
c0027b8a:	ba 48 33 03 c0       	mov    edx,0xc0033348
c0027b8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b93:	89 10                	mov    DWORD PTR [eax],edx
c0027b95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027b99:	83 ec 0c             	sub    esp,0xc
c0027b9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027ba0:	6a 01                	push   0x1
c0027ba2:	68 2c 7b 02 c0       	push   0xc0027b2c
c0027ba7:	6a 08                	push   0x8
c0027ba9:	50                   	push   eax
c0027baa:	e8 db 36 ff ff       	call   c001b28a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027baf:	83 c4 20             	add    esp,0x20
c0027bb2:	89 c2                	mov    edx,eax
c0027bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027bb8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027bbe:	fa                   	cli    
c0027bbf:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027bc4:	83 c0 01             	add    eax,0x1
c0027bc7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027bcc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027bd1:	83 ec 08             	sub    esp,0x8
c0027bd4:	6a 0b                	push   0xb
c0027bd6:	50                   	push   eax
c0027bd7:	e8 a4 de fe ff       	call   c0015a80 <Computer::readCMOS(unsigned char)>
c0027bdc:	83 c4 10             	add    esp,0x10
c0027bdf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027be3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027be8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027bec:	83 ca 10             	or     edx,0x10
c0027bef:	0f b6 d2             	movzx  edx,dl
c0027bf2:	83 ec 04             	sub    esp,0x4
c0027bf5:	52                   	push   edx
c0027bf6:	6a 0b                	push   0xb
c0027bf8:	50                   	push   eax
c0027bf9:	e8 9c df fe ff       	call   c0015b9a <Computer::writeCMOS(unsigned char, unsigned char)>
c0027bfe:	83 c4 10             	add    esp,0x10
c0027c01:	83 ec 0c             	sub    esp,0xc
c0027c04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027c08:	e8 91 fa ff ff       	call   c002769e <RTC::completeRTCRefresh()>
c0027c0d:	83 c4 10             	add    esp,0x10
c0027c10:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027c15:	83 e8 01             	sub    eax,0x1
c0027c18:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027c1d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027c22:	85 c0                	test   eax,eax
c0027c24:	75 01                	jne    c0027c27 <RTC::RTC()+0xb5>
c0027c26:	fb                   	sti    
c0027c27:	90                   	nop
c0027c28:	83 c4 1c             	add    esp,0x1c
c0027c2b:	c3                   	ret    

c0027c2c <HalConsoleScroll(int, int)>:
c0027c2c:	83 ec 10             	sub    esp,0x10
c0027c2f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027c37:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027c3f:	90                   	nop
c0027c40:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027c45:	0f 8f e1 00 00 00    	jg     c0027d2c <HalConsoleScroll(int, int)+0x100>
c0027c4b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027c53:	90                   	nop
c0027c54:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027c5c:	0f 8f be 00 00 00    	jg     c0027d20 <HalConsoleScroll(int, int)+0xf4>
c0027c62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c66:	89 d0                	mov    eax,edx
c0027c68:	c1 e0 02             	shl    eax,0x2
c0027c6b:	01 d0                	add    eax,edx
c0027c6d:	c1 e0 05             	shl    eax,0x5
c0027c70:	89 c2                	mov    edx,eax
c0027c72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c76:	01 d0                	add    eax,edx
c0027c78:	89 c2                	mov    edx,eax
c0027c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c7e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027c81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c85:	89 d0                	mov    eax,edx
c0027c87:	c1 e0 02             	shl    eax,0x2
c0027c8a:	01 d0                	add    eax,edx
c0027c8c:	c1 e0 05             	shl    eax,0x5
c0027c8f:	89 c2                	mov    edx,eax
c0027c91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c95:	01 d0                	add    eax,edx
c0027c97:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ca1:	01 c2                	add    edx,eax
c0027ca3:	8a 01                	mov    al,BYTE PTR [ecx]
c0027ca5:	88 02                	mov    BYTE PTR [edx],al
c0027ca7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027cac:	75 66                	jne    c0027d14 <HalConsoleScroll(int, int)+0xe8>
c0027cae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027cb2:	83 e0 01             	and    eax,0x1
c0027cb5:	74 39                	je     c0027cf0 <HalConsoleScroll(int, int)+0xc4>
c0027cb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027cbb:	83 e0 0f             	and    eax,0xf
c0027cbe:	88 c2                	mov    dl,al
c0027cc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027cc4:	c1 e0 04             	shl    eax,0x4
c0027cc7:	09 d0                	or     eax,edx
c0027cc9:	88 c1                	mov    cl,al
c0027ccb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027ccf:	89 d0                	mov    eax,edx
c0027cd1:	c1 e0 02             	shl    eax,0x2
c0027cd4:	01 d0                	add    eax,edx
c0027cd6:	c1 e0 05             	shl    eax,0x5
c0027cd9:	89 c2                	mov    edx,eax
c0027cdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027cdf:	01 d0                	add    eax,edx
c0027ce1:	89 c2                	mov    edx,eax
c0027ce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ce7:	01 d0                	add    eax,edx
c0027ce9:	88 ca                	mov    dl,cl
c0027ceb:	88 10                	mov    BYTE PTR [eax],dl
c0027ced:	eb 25                	jmp    c0027d14 <HalConsoleScroll(int, int)+0xe8>
c0027cef:	90                   	nop
c0027cf0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027cf4:	89 d0                	mov    eax,edx
c0027cf6:	c1 e0 02             	shl    eax,0x2
c0027cf9:	01 d0                	add    eax,edx
c0027cfb:	c1 e0 05             	shl    eax,0x5
c0027cfe:	89 c2                	mov    edx,eax
c0027d00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d04:	01 d0                	add    eax,edx
c0027d06:	89 c2                	mov    edx,eax
c0027d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d0c:	01 d0                	add    eax,edx
c0027d0e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027d11:	8d 76 00             	lea    esi,[esi+0x0]
c0027d14:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027d19:	e9 36 ff ff ff       	jmp    c0027c54 <HalConsoleScroll(int, int)+0x28>
c0027d1e:	66 90                	xchg   ax,ax
c0027d20:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027d25:	e9 16 ff ff ff       	jmp    c0027c40 <HalConsoleScroll(int, int)+0x14>
c0027d2a:	66 90                	xchg   ax,ax
c0027d2c:	90                   	nop
c0027d2d:	83 c4 10             	add    esp,0x10
c0027d30:	c3                   	ret    
c0027d31:	8d 76 00             	lea    esi,[esi+0x0]

c0027d34 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027d34:	83 ec 14             	sub    esp,0x14
c0027d37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027d3b:	88 04 24             	mov    BYTE PTR [esp],al
c0027d3e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027d41:	0f b6 c0             	movzx  eax,al
c0027d44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d48:	89 d1                	mov    ecx,edx
c0027d4a:	83 e1 0f             	and    ecx,0xf
c0027d4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027d51:	c1 e2 04             	shl    edx,0x4
c0027d54:	0f b6 d2             	movzx  edx,dl
c0027d57:	09 ca                	or     edx,ecx
c0027d59:	c1 e2 08             	shl    edx,0x8
c0027d5c:	09 d0                	or     eax,edx
c0027d5e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027d63:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027d6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027d6f:	89 d0                	mov    eax,edx
c0027d71:	c1 e0 02             	shl    eax,0x2
c0027d74:	01 d0                	add    eax,edx
c0027d76:	c1 e0 04             	shl    eax,0x4
c0027d79:	89 c2                	mov    edx,eax
c0027d7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027d7f:	01 d0                	add    eax,edx
c0027d81:	01 c0                	add    eax,eax
c0027d83:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027d87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027d8b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0027d90:	66 89 02             	mov    WORD PTR [edx],ax
c0027d93:	90                   	nop
c0027d94:	83 c4 14             	add    esp,0x14
c0027d97:	c3                   	ret    

c0027d98 <HalConsoleCursorUpdate(int, int)>:
c0027d98:	83 ec 20             	sub    esp,0x20
c0027d9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027d9f:	89 c2                	mov    edx,eax
c0027da1:	c1 e2 02             	shl    edx,0x2
c0027da4:	01 d0                	add    eax,edx
c0027da6:	c1 e0 04             	shl    eax,0x4
c0027da9:	89 c2                	mov    edx,eax
c0027dab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027daf:	01 d0                	add    eax,edx
c0027db1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027db6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027dbd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027dc2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027dc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027dca:	ee                   	out    dx,al
c0027dcb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027dd0:	0f b6 c0             	movzx  eax,al
c0027dd3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027dda:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027dde:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027de2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027de6:	ee                   	out    dx,al
c0027de7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027dee:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027df3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027df7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027dfb:	ee                   	out    dx,al
c0027dfc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027e01:	c1 e8 08             	shr    eax,0x8
c0027e04:	0f b6 c0             	movzx  eax,al
c0027e07:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027e0e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027e12:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027e16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027e1a:	ee                   	out    dx,al
c0027e1b:	90                   	nop
c0027e1c:	83 c4 20             	add    esp,0x20
c0027e1f:	c3                   	ret    

c0027e20 <FAT::getName()>:
c0027e20:	b8 7c 33 03 c0       	mov    eax,0xc003337c
c0027e25:	c3                   	ret    
c0027e26:	66 90                	xchg   ax,ax

c0027e28 <FAT::tell(void*, unsigned long long*)>:
c0027e28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027e2d:	75 09                	jne    c0027e38 <FAT::tell(void*, unsigned long long*)+0x10>
c0027e2f:	b8 04 00 00 00       	mov    eax,0x4
c0027e34:	c3                   	ret    
c0027e35:	8d 76 00             	lea    esi,[esi+0x0]
c0027e38:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e3d:	75 09                	jne    c0027e48 <FAT::tell(void*, unsigned long long*)+0x20>
c0027e3f:	b8 04 00 00 00       	mov    eax,0x4
c0027e44:	c3                   	ret    
c0027e45:	8d 76 00             	lea    esi,[esi+0x0]
c0027e48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e4c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027e4f:	ba 00 00 00 00       	mov    edx,0x0
c0027e54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e58:	89 01                	mov    DWORD PTR [ecx],eax
c0027e5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027e5d:	b8 00 00 00 00       	mov    eax,0x0
c0027e62:	c3                   	ret    
c0027e63:	90                   	nop

c0027e64 <FAT::stat(void*, unsigned long long*)>:
c0027e64:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027e69:	75 09                	jne    c0027e74 <FAT::stat(void*, unsigned long long*)+0x10>
c0027e6b:	b8 04 00 00 00       	mov    eax,0x4
c0027e70:	c3                   	ret    
c0027e71:	8d 76 00             	lea    esi,[esi+0x0]
c0027e74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e79:	75 09                	jne    c0027e84 <FAT::stat(void*, unsigned long long*)+0x20>
c0027e7b:	b8 04 00 00 00       	mov    eax,0x4
c0027e80:	c3                   	ret    
c0027e81:	8d 76 00             	lea    esi,[esi+0x0]
c0027e84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027e8b:	ba 00 00 00 00       	mov    edx,0x0
c0027e90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e94:	89 01                	mov    DWORD PTR [ecx],eax
c0027e96:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027e99:	b8 00 00 00 00       	mov    eax,0x0
c0027e9e:	c3                   	ret    
c0027e9f:	90                   	nop

c0027ea0 <FAT::~FAT()>:
c0027ea0:	83 ec 0c             	sub    esp,0xc
c0027ea3:	ba c8 33 03 c0       	mov    edx,0xc00333c8
c0027ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027eac:	89 10                	mov    DWORD PTR [eax],edx
c0027eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027eb2:	83 ec 0c             	sub    esp,0xc
c0027eb5:	50                   	push   eax
c0027eb6:	e8 2b 22 ff ff       	call   c001a0e6 <Filesystem::~Filesystem()>
c0027ebb:	83 c4 10             	add    esp,0x10
c0027ebe:	90                   	nop
c0027ebf:	83 c4 0c             	add    esp,0xc
c0027ec2:	c3                   	ret    
c0027ec3:	90                   	nop

c0027ec4 <FAT::~FAT()>:
c0027ec4:	83 ec 0c             	sub    esp,0xc
c0027ec7:	83 ec 0c             	sub    esp,0xc
c0027eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ece:	e8 cd ff ff ff       	call   c0027ea0 <FAT::~FAT()>
c0027ed3:	83 c4 10             	add    esp,0x10
c0027ed6:	83 ec 08             	sub    esp,0x8
c0027ed9:	6a 08                	push   0x8
c0027edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027edf:	e8 4c 12 ff ff       	call   c0019130 <operator delete(void*, unsigned long)>
c0027ee4:	83 c4 10             	add    esp,0x10
c0027ee7:	83 c4 0c             	add    esp,0xc
c0027eea:	c3                   	ret    
c0027eeb:	90                   	nop

c0027eec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027eec:	83 ec 1c             	sub    esp,0x1c
c0027eef:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027ef6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027efb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027eff:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f06:	83 f8 ff             	cmp    eax,0xffffffff
c0027f09:	75 35                	jne    c0027f40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027f0b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027f0f:	88 c2                	mov    dl,al
c0027f11:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f16:	01 d0                	add    eax,edx
c0027f18:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027f1c:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027f22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f26:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027f2d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027f36:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027f3d:	eb 19                	jmp    c0027f58 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027f3f:	90                   	nop
c0027f40:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027f44:	88 c2                	mov    dl,al
c0027f46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f4a:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f51:	01 d0                	add    eax,edx
c0027f53:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027f57:	90                   	nop
c0027f58:	83 ec 04             	sub    esp,0x4
c0027f5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f63:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027f67:	50                   	push   eax
c0027f68:	e8 16 d2 fd ff       	call   c0005183 <f_getlabel>
c0027f6d:	83 c4 10             	add    esp,0x10
c0027f70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027f74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027f79:	75 09                	jne    c0027f84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027f7b:	b8 00 00 00 00       	mov    eax,0x0
c0027f80:	eb 0a                	jmp    c0027f8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027f82:	66 90                	xchg   ax,ax
c0027f84:	b8 01 00 00 00       	mov    eax,0x1
c0027f89:	8d 76 00             	lea    esi,[esi+0x0]
c0027f8c:	83 c4 1c             	add    esp,0x1c
c0027f8f:	c3                   	ret    

c0027f90 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027f90:	57                   	push   edi
c0027f91:	83 ec 58             	sub    esp,0x58
c0027f94:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027f9c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027fa0:	b8 00 00 00 00       	mov    eax,0x0
c0027fa5:	b9 0f 00 00 00       	mov    ecx,0xf
c0027faa:	fc                   	cld    
c0027fab:	89 d7                	mov    edi,edx
c0027fad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0027faf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027fb3:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027fba:	83 f8 ff             	cmp    eax,0xffffffff
c0027fbd:	75 35                	jne    c0027ff4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0027fbf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027fc3:	88 c2                	mov    dl,al
c0027fc5:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027fca:	01 d0                	add    eax,edx
c0027fcc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027fd0:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027fd6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027fda:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027fe1:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027fe6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0027fea:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027ff1:	eb 19                	jmp    c002800c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0027ff3:	90                   	nop
c0027ff4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027ff8:	88 c2                	mov    dl,al
c0027ffa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027ffe:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028005:	01 d0                	add    eax,edx
c0028007:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002800b:	90                   	nop
c002800c:	83 ec 08             	sub    esp,0x8
c002800f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0028013:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028017:	50                   	push   eax
c0028018:	e8 23 88 fd ff       	call   c0000840 <strcat>
c002801d:	83 c4 10             	add    esp,0x10
c0028020:	83 ec 0c             	sub    esp,0xc
c0028023:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028027:	50                   	push   eax
c0028028:	e8 a7 d2 fd ff       	call   c00052d4 <f_setlabel>
c002802d:	83 c4 10             	add    esp,0x10
c0028030:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0028034:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0028039:	75 09                	jne    c0028044 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c002803b:	b8 00 00 00 00       	mov    eax,0x0
c0028040:	eb 0a                	jmp    c002804c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0028042:	66 90                	xchg   ax,ax
c0028044:	b8 01 00 00 00       	mov    eax,0x1
c0028049:	8d 76 00             	lea    esi,[esi+0x0]
c002804c:	83 c4 58             	add    esp,0x58
c002804f:	5f                   	pop    edi
c0028050:	c3                   	ret    
c0028051:	90                   	nop
c0028052:	66 90                	xchg   ax,ax

c0028054 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0028054:	83 ec 2c             	sub    esp,0x2c
c0028057:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002805f:	83 ec 08             	sub    esp,0x8
c0028062:	68 a0 33 03 c0       	push   0xc00333a0
c0028067:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002806b:	e8 e0 86 fd ff       	call   c0000750 <strcmp>
c0028070:	83 c4 10             	add    esp,0x10
c0028073:	85 c0                	test   eax,eax
c0028075:	0f 94 c0             	sete   al
c0028078:	0f b6 c0             	movzx  eax,al
c002807b:	85 c0                	test   eax,eax
c002807d:	74 0d                	je     c002808c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c002807f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028087:	e9 c0 00 00 00       	jmp    c002814c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002808c:	83 ec 08             	sub    esp,0x8
c002808f:	68 92 33 03 c0       	push   0xc0033392
c0028094:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028098:	e8 b3 86 fd ff       	call   c0000750 <strcmp>
c002809d:	83 c4 10             	add    esp,0x10
c00280a0:	85 c0                	test   eax,eax
c00280a2:	0f 94 c0             	sete   al
c00280a5:	0f b6 c0             	movzx  eax,al
c00280a8:	85 c0                	test   eax,eax
c00280aa:	74 10                	je     c00280bc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00280ac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00280b4:	e9 93 00 00 00       	jmp    c002814c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00280b9:	8d 76 00             	lea    esi,[esi+0x0]
c00280bc:	83 ec 08             	sub    esp,0x8
c00280bf:	68 98 33 03 c0       	push   0xc0033398
c00280c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280c8:	e8 83 86 fd ff       	call   c0000750 <strcmp>
c00280cd:	83 c4 10             	add    esp,0x10
c00280d0:	85 c0                	test   eax,eax
c00280d2:	0f 94 c0             	sete   al
c00280d5:	0f b6 c0             	movzx  eax,al
c00280d8:	85 c0                	test   eax,eax
c00280da:	74 0c                	je     c00280e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00280dc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00280e4:	eb 66                	jmp    c002814c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00280e6:	66 90                	xchg   ax,ax
c00280e8:	83 ec 08             	sub    esp,0x8
c00280eb:	68 38 f5 02 c0       	push   0xc002f538
c00280f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280f4:	e8 57 86 fd ff       	call   c0000750 <strcmp>
c00280f9:	83 c4 10             	add    esp,0x10
c00280fc:	85 c0                	test   eax,eax
c00280fe:	0f 94 c0             	sete   al
c0028101:	0f b6 c0             	movzx  eax,al
c0028104:	85 c0                	test   eax,eax
c0028106:	74 0c                	je     c0028114 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0028108:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0028110:	eb 3a                	jmp    c002814c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028112:	66 90                	xchg   ax,ax
c0028114:	83 ec 08             	sub    esp,0x8
c0028117:	68 9e 33 03 c0       	push   0xc003339e
c002811c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028120:	e8 2b 86 fd ff       	call   c0000750 <strcmp>
c0028125:	83 c4 10             	add    esp,0x10
c0028128:	85 c0                	test   eax,eax
c002812a:	0f 94 c0             	sete   al
c002812d:	0f b6 c0             	movzx  eax,al
c0028130:	85 c0                	test   eax,eax
c0028132:	74 0c                	je     c0028140 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0028134:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002813c:	eb 0e                	jmp    c002814c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002813e:	66 90                	xchg   ax,ax
c0028140:	b8 08 00 00 00       	mov    eax,0x8
c0028145:	e9 ea 00 00 00       	jmp    c0028234 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002814a:	66 90                	xchg   ax,ax
c002814c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0028153:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028158:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002815c:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028163:	83 f8 ff             	cmp    eax,0xffffffff
c0028166:	75 34                	jne    c002819c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028168:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002816c:	88 c2                	mov    dl,al
c002816e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028173:	01 d0                	add    eax,edx
c0028175:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028179:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002817f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028183:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c002818a:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002818f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0028193:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c002819a:	eb 18                	jmp    c00281b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c002819c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00281a0:	88 c2                	mov    dl,al
c00281a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00281a6:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281ad:	01 d0                	add    eax,edx
c00281af:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00281b3:	90                   	nop
c00281b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00281b8:	88 04 24             	mov    BYTE PTR [esp],al
c00281bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00281bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00281c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00281cb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00281d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00281d8:	83 ec 0c             	sub    esp,0xc
c00281db:	68 00 20 00 00       	push   0x2000
c00281e0:	e8 d9 e1 fe ff       	call   c00163be <malloc>
c00281e5:	83 c4 10             	add    esp,0x10
c00281e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00281ec:	68 00 20 00 00       	push   0x2000
c00281f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00281f9:	50                   	push   eax
c00281fa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00281fe:	50                   	push   eax
c00281ff:	e8 cd d3 fd ff       	call   c00055d1 <f_mkfs>
c0028204:	83 c4 10             	add    esp,0x10
c0028207:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002820b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028210:	75 0a                	jne    c002821c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0028212:	b8 00 00 00 00       	mov    eax,0x0
c0028217:	eb 1b                	jmp    c0028234 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028219:	8d 76 00             	lea    esi,[esi+0x0]
c002821c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028221:	75 09                	jne    c002822c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0028223:	b8 09 00 00 00       	mov    eax,0x9
c0028228:	eb 0a                	jmp    c0028234 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002822a:	66 90                	xchg   ax,ax
c002822c:	b8 01 00 00 00       	mov    eax,0x1
c0028231:	8d 76 00             	lea    esi,[esi+0x0]
c0028234:	83 c4 2c             	add    esp,0x2c
c0028237:	c3                   	ret    

c0028238 <FAT::tryMount(LogicalDisk*, int)>:
c0028238:	81 ec 4c 03 00 00    	sub    esp,0x34c
c002823e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028243:	83 f8 14             	cmp    eax,0x14
c0028246:	75 18                	jne    c0028260 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028248:	83 ec 0c             	sub    esp,0xc
c002824b:	68 a4 33 03 c0       	push   0xc00333a4
c0028250:	e8 21 80 ff ff       	call   c0020276 <KePanic(char const*)>
c0028255:	83 c4 10             	add    esp,0x10
c0028258:	b0 00                	mov    al,0x0
c002825a:	e9 ed 01 00 00       	jmp    c002844c <FAT::tryMount(LogicalDisk*, int)+0x214>
c002825f:	90                   	nop
c0028260:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0028267:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002826d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028273:	3d 00 02 00 00       	cmp    eax,0x200
c0028278:	74 0a                	je     c0028284 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c002827a:	b0 00                	mov    al,0x0
c002827c:	e9 cb 01 00 00       	jmp    c002844c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028281:	8d 76 00             	lea    esi,[esi+0x0]
c0028284:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c002828c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028293:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002829a:	83 f8 ff             	cmp    eax,0xffffffff
c002829d:	74 09                	je     c00282a8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c002829f:	b0 01                	mov    al,0x1
c00282a1:	e9 a6 01 00 00       	jmp    c002844c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00282a6:	66 90                	xchg   ax,ax
c00282a8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00282b2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00282ba:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00282c1:	88 c2                	mov    dl,al
c00282c3:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00282c8:	01 d0                	add    eax,edx
c00282ca:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00282d1:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00282d7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00282de:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00282e5:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00282ea:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00282f1:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00282f8:	83 ec 0c             	sub    esp,0xc
c00282fb:	68 34 02 00 00       	push   0x234
c0028300:	e8 b9 e0 fe ff       	call   c00163be <malloc>
c0028305:	83 c4 10             	add    esp,0x10
c0028308:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c002830f:	83 ec 04             	sub    esp,0x4
c0028312:	6a 00                	push   0x0
c0028314:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002831b:	50                   	push   eax
c002831c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028323:	e8 84 ba fd ff       	call   c0003dac <f_mount>
c0028328:	83 c4 10             	add    esp,0x10
c002832b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028332:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c002833a:	74 1c                	je     c0028358 <FAT::tryMount(LogicalDisk*, int)+0x120>
c002833c:	83 ec 0c             	sub    esp,0xc
c002833f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028346:	e8 a3 e0 fe ff       	call   c00163ee <rfree>
c002834b:	83 c4 10             	add    esp,0x10
c002834e:	b0 00                	mov    al,0x0
c0028350:	e9 f7 00 00 00       	jmp    c002844c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028355:	8d 76 00             	lea    esi,[esi+0x0]
c0028358:	83 ec 04             	sub    esp,0x4
c002835b:	68 00 01 00 00       	push   0x100
c0028360:	6a 00                	push   0x0
c0028362:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028369:	50                   	push   eax
c002836a:	e8 81 81 fd ff       	call   c00004f0 <memset>
c002836f:	83 c4 10             	add    esp,0x10
c0028372:	83 ec 08             	sub    esp,0x8
c0028375:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002837c:	50                   	push   eax
c002837d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028384:	50                   	push   eax
c0028385:	e8 b6 84 fd ff       	call   c0000840 <strcat>
c002838a:	83 c4 10             	add    esp,0x10
c002838d:	83 ec 08             	sub    esp,0x8
c0028390:	68 b2 33 03 c0       	push   0xc00333b2
c0028395:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c002839c:	50                   	push   eax
c002839d:	e8 9e 84 fd ff       	call   c0000840 <strcat>
c00283a2:	83 c4 10             	add    esp,0x10
c00283a5:	83 ec 04             	sub    esp,0x4
c00283a8:	6a 01                	push   0x1
c00283aa:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00283b1:	50                   	push   eax
c00283b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00283b6:	50                   	push   eax
c00283b7:	e8 52 ba fd ff       	call   c0003e0e <f_open>
c00283bc:	83 c4 10             	add    esp,0x10
c00283bf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00283c6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00283cd:	85 c0                	test   eax,eax
c00283cf:	74 0b                	je     c00283dc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00283d1:	78 31                	js     c0028404 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00283d3:	83 e8 04             	sub    eax,0x4
c00283d6:	83 f8 01             	cmp    eax,0x1
c00283d9:	77 29                	ja     c0028404 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00283db:	90                   	nop
c00283dc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00283e4:	83 ec 0c             	sub    esp,0xc
c00283e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00283eb:	50                   	push   eax
c00283ec:	e8 ec c1 fd ff       	call   c00045dd <f_close>
c00283f1:	83 c4 10             	add    esp,0x10
c00283f4:	90                   	nop
c00283f5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00283fd:	85 c0                	test   eax,eax
c00283ff:	74 43                	je     c0028444 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0028401:	eb 31                	jmp    c0028434 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0028403:	90                   	nop
c0028404:	83 ec 0c             	sub    esp,0xc
c0028407:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002840e:	e8 db df fe ff       	call   c00163ee <rfree>
c0028413:	83 c4 10             	add    esp,0x10
c0028416:	83 ec 04             	sub    esp,0x4
c0028419:	6a 00                	push   0x0
c002841b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028422:	50                   	push   eax
c0028423:	6a 00                	push   0x0
c0028425:	e8 82 b9 fd ff       	call   c0003dac <f_mount>
c002842a:	83 c4 10             	add    esp,0x10
c002842d:	b0 00                	mov    al,0x0
c002842f:	eb 1b                	jmp    c002844c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028431:	8d 76 00             	lea    esi,[esi+0x0]
c0028434:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028439:	83 c0 01             	add    eax,0x1
c002843c:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028441:	8d 76 00             	lea    esi,[esi+0x0]
c0028444:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c002844b:	90                   	nop
c002844c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0028452:	c3                   	ret    
c0028453:	90                   	nop

c0028454 <FAT::allocateSwapfile(char const*, int)>:
c0028454:	55                   	push   ebp
c0028455:	57                   	push   edi
c0028456:	56                   	push   esi
c0028457:	53                   	push   ebx
c0028458:	81 ec 3c 04 00 00    	sub    esp,0x43c
c002845e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028469:	83 ec 0c             	sub    esp,0xc
c002846c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0028473:	e8 46 df fe ff       	call   c00163be <malloc>
c0028478:	83 c4 10             	add    esp,0x10
c002847b:	89 c7                	mov    edi,eax
c002847d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0028482:	83 ec 04             	sub    esp,0x4
c0028485:	50                   	push   eax
c0028486:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c002848d:	57                   	push   edi
c002848e:	e8 d1 1f ff ff       	call   c001a464 <File::File(char const*, Process*)>
c0028493:	83 c4 10             	add    esp,0x10
c0028496:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c002849d:	83 ec 04             	sub    esp,0x4
c00284a0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00284a4:	50                   	push   eax
c00284a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00284a9:	50                   	push   eax
c00284aa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284b1:	e8 ce 22 ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c00284b6:	83 c4 10             	add    esp,0x10
c00284b9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00284c0:	c1 e0 14             	shl    eax,0x14
c00284c3:	89 c7                	mov    edi,eax
c00284c5:	89 c5                	mov    ebp,eax
c00284c7:	c1 fd 1f             	sar    ebp,0x1f
c00284ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284d2:	89 f9                	mov    ecx,edi
c00284d4:	31 c1                	xor    ecx,eax
c00284d6:	89 cb                	mov    ebx,ecx
c00284d8:	89 e9                	mov    ecx,ebp
c00284da:	31 d1                	xor    ecx,edx
c00284dc:	89 ce                	mov    esi,ecx
c00284de:	89 f0                	mov    eax,esi
c00284e0:	09 d8                	or     eax,ebx
c00284e2:	0f 84 9c 00 00 00    	je     c0028584 <FAT::allocateSwapfile(char const*, int)+0x130>
c00284e8:	83 ec 0c             	sub    esp,0xc
c00284eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284f2:	e8 59 21 ff ff       	call   c001a650 <File::unlink()>
c00284f7:	83 c4 10             	add    esp,0x10
c00284fa:	83 ec 08             	sub    esp,0x8
c00284fd:	6a 12                	push   0x12
c00284ff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028506:	e8 77 1f ff ff       	call   c001a482 <File::open(FileOpenMode)>
c002850b:	83 c4 10             	add    esp,0x10
c002850e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028515:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002851b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028522:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028529:	c1 e0 14             	shl    eax,0x14
c002852c:	83 ec 04             	sub    esp,0x4
c002852f:	6a 01                	push   0x1
c0028531:	50                   	push   eax
c0028532:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028539:	e8 26 cf fd ff       	call   c0005464 <f_expand>
c002853e:	83 c4 10             	add    esp,0x10
c0028541:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028548:	8b 00                	mov    eax,DWORD PTR [eax]
c002854a:	83 c0 10             	add    eax,0x10
c002854d:	8b 00                	mov    eax,DWORD PTR [eax]
c002854f:	83 ec 0c             	sub    esp,0xc
c0028552:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028556:	52                   	push   edx
c0028557:	8d 54 24 30          	lea    edx,[esp+0x30]
c002855b:	52                   	push   edx
c002855c:	6a 00                	push   0x0
c002855e:	68 00 04 00 00       	push   0x400
c0028563:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002856a:	ff d0                	call   eax
c002856c:	83 c4 20             	add    esp,0x20
c002856f:	83 ec 0c             	sub    esp,0xc
c0028572:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028579:	e8 62 1f ff ff       	call   c001a4e0 <File::close()>
c002857e:	83 c4 10             	add    esp,0x10
c0028581:	8d 76 00             	lea    esi,[esi+0x0]
c0028584:	83 ec 08             	sub    esp,0x8
c0028587:	6a 01                	push   0x1
c0028589:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028590:	e8 ed 1e ff ff       	call   c001a482 <File::open(FileOpenMode)>
c0028595:	83 c4 10             	add    esp,0x10
c0028598:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002859f:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a1:	83 c0 0c             	add    eax,0xc
c00285a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a6:	83 ec 0c             	sub    esp,0xc
c00285a9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00285ad:	52                   	push   edx
c00285ae:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00285b2:	52                   	push   edx
c00285b3:	6a 00                	push   0x0
c00285b5:	6a 04                	push   0x4
c00285b7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00285be:	ff d0                	call   eax
c00285c0:	83 c4 20             	add    esp,0x20
c00285c3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00285ca:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00285d0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00285d7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00285de:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00285e1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00285e8:	83 ec 0c             	sub    esp,0xc
c00285eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00285f2:	e8 e9 1e ff ff       	call   c001a4e0 <File::close()>
c00285f7:	83 c4 10             	add    esp,0x10
c00285fa:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028601:	ba 00 00 00 00       	mov    edx,0x0
c0028606:	81 c4 3c 04 00 00    	add    esp,0x43c
c002860c:	5b                   	pop    ebx
c002860d:	5e                   	pop    esi
c002860e:	5f                   	pop    edi
c002860f:	5d                   	pop    ebp
c0028610:	c3                   	ret    
c0028611:	90                   	nop
c0028612:	66 90                	xchg   ax,ax

c0028614 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0028614:	57                   	push   edi
c0028615:	56                   	push   esi
c0028616:	53                   	push   ebx
c0028617:	81 ec 50 02 00 00    	sub    esp,0x250
c002861d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0028625:	74 0d                	je     c0028634 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0028627:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002862f:	75 0f                	jne    c0028640 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028631:	8d 76 00             	lea    esi,[esi+0x0]
c0028634:	b8 04 00 00 00       	mov    eax,0x4
c0028639:	e9 3a 01 00 00       	jmp    c0028778 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002863e:	66 90                	xchg   ax,ax
c0028640:	83 ec 08             	sub    esp,0x8
c0028643:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002864a:	50                   	push   eax
c002864b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028652:	e8 53 c2 fd ff       	call   c00048aa <f_readdir>
c0028657:	83 c4 10             	add    esp,0x10
c002865a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028661:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028668:	83 ec 0c             	sub    esp,0xc
c002866b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028672:	83 c0 16             	add    eax,0x16
c0028675:	50                   	push   eax
c0028676:	e8 f5 7e fd ff       	call   c0000570 <strlen>
c002867b:	83 c4 10             	add    esp,0x10
c002867e:	ba 00 00 00 00       	mov    edx,0x0
c0028683:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028687:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002868b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028692:	0f b6 c0             	movzx  eax,al
c0028695:	83 e0 10             	and    eax,0x10
c0028698:	74 0a                	je     c00286a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c002869a:	b8 02 00 00 00       	mov    eax,0x2
c002869f:	eb 0b                	jmp    c00286ac <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00286a1:	8d 76 00             	lea    esi,[esi+0x0]
c00286a4:	b8 01 00 00 00       	mov    eax,0x1
c00286a9:	8d 76 00             	lea    esi,[esi+0x0]
c00286ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00286b0:	83 ec 08             	sub    esp,0x8
c00286b3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00286ba:	83 c0 16             	add    eax,0x16
c00286bd:	50                   	push   eax
c00286be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00286c2:	83 c0 10             	add    eax,0x10
c00286c5:	50                   	push   eax
c00286c6:	e8 75 7f fd ff       	call   c0000640 <strcpy>
c00286cb:	83 c4 10             	add    esp,0x10
c00286ce:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00286d5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00286dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00286e0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00286e7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00286ee:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00286f5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00286fc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0028703:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002870a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028711:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028718:	89 c6                	mov    esi,eax
c002871a:	89 d7                	mov    edi,edx
c002871c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002871e:	89 c8                	mov    eax,ecx
c0028720:	89 fa                	mov    edx,edi
c0028722:	89 f3                	mov    ebx,esi
c0028724:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002872b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028732:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028739:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028740:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028746:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002874d:	0f be c0             	movsx  eax,al
c0028750:	85 c0                	test   eax,eax
c0028752:	75 08                	jne    c002875c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028754:	b8 07 00 00 00       	mov    eax,0x7
c0028759:	eb 1d                	jmp    c0028778 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002875b:	90                   	nop
c002875c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028763:	85 c0                	test   eax,eax
c0028765:	75 09                	jne    c0028770 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028767:	b8 00 00 00 00       	mov    eax,0x0
c002876c:	eb 0a                	jmp    c0028778 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002876e:	66 90                	xchg   ax,ax
c0028770:	b8 01 00 00 00       	mov    eax,0x1
c0028775:	8d 76 00             	lea    esi,[esi+0x0]
c0028778:	81 c4 50 02 00 00    	add    esp,0x250
c002877e:	5b                   	pop    ebx
c002877f:	5e                   	pop    esi
c0028780:	5f                   	pop    edi
c0028781:	c3                   	ret    
c0028782:	66 90                	xchg   ax,ax

c0028784 <FAT::read(void*, unsigned long, void*, int*)>:
c0028784:	83 ec 1c             	sub    esp,0x1c
c0028787:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002878c:	74 0a                	je     c0028798 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c002878e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028793:	75 0b                	jne    c00287a0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028795:	8d 76 00             	lea    esi,[esi+0x0]
c0028798:	b8 04 00 00 00       	mov    eax,0x4
c002879d:	eb 41                	jmp    c00287e0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c002879f:	90                   	nop
c00287a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00287a4:	50                   	push   eax
c00287a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00287a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00287ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287b1:	e8 1b b9 fd ff       	call   c00040d1 <f_read>
c00287b6:	83 c4 10             	add    esp,0x10
c00287b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287c1:	89 c2                	mov    edx,eax
c00287c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00287c7:	89 10                	mov    DWORD PTR [eax],edx
c00287c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287cd:	85 c0                	test   eax,eax
c00287cf:	75 07                	jne    c00287d8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00287d1:	b8 00 00 00 00       	mov    eax,0x0
c00287d6:	eb 08                	jmp    c00287e0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00287d8:	b8 01 00 00 00       	mov    eax,0x1
c00287dd:	8d 76 00             	lea    esi,[esi+0x0]
c00287e0:	83 c4 1c             	add    esp,0x1c
c00287e3:	c3                   	ret    

c00287e4 <FAT::write(void*, unsigned long, void*, int*)>:
c00287e4:	83 ec 1c             	sub    esp,0x1c
c00287e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00287ec:	74 0a                	je     c00287f8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00287ee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00287f3:	75 0b                	jne    c0028800 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00287f5:	8d 76 00             	lea    esi,[esi+0x0]
c00287f8:	b8 04 00 00 00       	mov    eax,0x4
c00287fd:	eb 41                	jmp    c0028840 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00287ff:	90                   	nop
c0028800:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028804:	50                   	push   eax
c0028805:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028809:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002880d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028811:	e8 ba ba fd ff       	call   c00042d0 <f_write>
c0028816:	83 c4 10             	add    esp,0x10
c0028819:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002881d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028821:	89 c2                	mov    edx,eax
c0028823:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028827:	89 10                	mov    DWORD PTR [eax],edx
c0028829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002882d:	85 c0                	test   eax,eax
c002882f:	75 07                	jne    c0028838 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028831:	b8 00 00 00 00       	mov    eax,0x0
c0028836:	eb 08                	jmp    c0028840 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028838:	b8 01 00 00 00       	mov    eax,0x1
c002883d:	8d 76 00             	lea    esi,[esi+0x0]
c0028840:	83 c4 1c             	add    esp,0x1c
c0028843:	c3                   	ret    

c0028844 <FAT::close(void*)>:
c0028844:	83 ec 1c             	sub    esp,0x1c
c0028847:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002884c:	75 0a                	jne    c0028858 <FAT::close(void*)+0x14>
c002884e:	b8 04 00 00 00       	mov    eax,0x4
c0028853:	eb 3f                	jmp    c0028894 <FAT::close(void*)+0x50>
c0028855:	8d 76 00             	lea    esi,[esi+0x0]
c0028858:	83 ec 0c             	sub    esp,0xc
c002885b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002885f:	e8 79 bd fd ff       	call   c00045dd <f_close>
c0028864:	83 c4 10             	add    esp,0x10
c0028867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002886b:	83 ec 0c             	sub    esp,0xc
c002886e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028872:	e8 67 db fe ff       	call   c00163de <free>
c0028877:	83 c4 10             	add    esp,0x10
c002887a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002887e:	85 c0                	test   eax,eax
c0028880:	75 0a                	jne    c002888c <FAT::close(void*)+0x48>
c0028882:	b8 00 00 00 00       	mov    eax,0x0
c0028887:	eb 0b                	jmp    c0028894 <FAT::close(void*)+0x50>
c0028889:	8d 76 00             	lea    esi,[esi+0x0]
c002888c:	b8 01 00 00 00       	mov    eax,0x1
c0028891:	8d 76 00             	lea    esi,[esi+0x0]
c0028894:	83 c4 1c             	add    esp,0x1c
c0028897:	c3                   	ret    

c0028898 <FAT::closeDir(void*)>:
c0028898:	83 ec 1c             	sub    esp,0x1c
c002889b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00288a0:	75 0a                	jne    c00288ac <FAT::closeDir(void*)+0x14>
c00288a2:	b8 04 00 00 00       	mov    eax,0x4
c00288a7:	eb 3f                	jmp    c00288e8 <FAT::closeDir(void*)+0x50>
c00288a9:	8d 76 00             	lea    esi,[esi+0x0]
c00288ac:	83 ec 0c             	sub    esp,0xc
c00288af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288b3:	e8 d0 bf fd ff       	call   c0004888 <f_closedir>
c00288b8:	83 c4 10             	add    esp,0x10
c00288bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00288bf:	83 ec 0c             	sub    esp,0xc
c00288c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288c6:	e8 13 db fe ff       	call   c00163de <free>
c00288cb:	83 c4 10             	add    esp,0x10
c00288ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00288d2:	85 c0                	test   eax,eax
c00288d4:	75 0a                	jne    c00288e0 <FAT::closeDir(void*)+0x48>
c00288d6:	b8 00 00 00 00       	mov    eax,0x0
c00288db:	eb 0b                	jmp    c00288e8 <FAT::closeDir(void*)+0x50>
c00288dd:	8d 76 00             	lea    esi,[esi+0x0]
c00288e0:	b8 01 00 00 00       	mov    eax,0x1
c00288e5:	8d 76 00             	lea    esi,[esi+0x0]
c00288e8:	83 c4 1c             	add    esp,0x1c
c00288eb:	c3                   	ret    

c00288ec <FAT::truncate(void*, unsigned long long)>:
c00288ec:	83 ec 2c             	sub    esp,0x2c
c00288ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00288f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00288f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00288fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00288ff:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028904:	75 0a                	jne    c0028910 <FAT::truncate(void*, unsigned long long)+0x24>
c0028906:	b8 04 00 00 00       	mov    eax,0x4
c002890b:	eb 47                	jmp    c0028954 <FAT::truncate(void*, unsigned long long)+0x68>
c002890d:	8d 76 00             	lea    esi,[esi+0x0]
c0028910:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028914:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028917:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002891b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028923:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028927:	83 ec 08             	sub    esp,0x8
c002892a:	50                   	push   eax
c002892b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002892f:	e8 d8 bc fd ff       	call   c000460c <f_lseek>
c0028934:	83 c4 10             	add    esp,0x10
c0028937:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002893b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002893f:	85 c0                	test   eax,eax
c0028941:	75 09                	jne    c002894c <FAT::truncate(void*, unsigned long long)+0x60>
c0028943:	b8 00 00 00 00       	mov    eax,0x0
c0028948:	eb 0a                	jmp    c0028954 <FAT::truncate(void*, unsigned long long)+0x68>
c002894a:	66 90                	xchg   ax,ax
c002894c:	b8 01 00 00 00       	mov    eax,0x1
c0028951:	8d 76 00             	lea    esi,[esi+0x0]
c0028954:	83 c4 2c             	add    esp,0x2c
c0028957:	c3                   	ret    

c0028958 <FAT::seek(void*, unsigned long long)>:
c0028958:	83 ec 2c             	sub    esp,0x2c
c002895b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002895f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028963:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028967:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002896b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028970:	75 0a                	jne    c002897c <FAT::seek(void*, unsigned long long)+0x24>
c0028972:	b8 04 00 00 00       	mov    eax,0x4
c0028977:	eb 33                	jmp    c00289ac <FAT::seek(void*, unsigned long long)+0x54>
c0028979:	8d 76 00             	lea    esi,[esi+0x0]
c002897c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028980:	83 ec 08             	sub    esp,0x8
c0028983:	50                   	push   eax
c0028984:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028988:	e8 7f bc fd ff       	call   c000460c <f_lseek>
c002898d:	83 c4 10             	add    esp,0x10
c0028990:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028994:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028998:	85 c0                	test   eax,eax
c002899a:	75 08                	jne    c00289a4 <FAT::seek(void*, unsigned long long)+0x4c>
c002899c:	b8 00 00 00 00       	mov    eax,0x0
c00289a1:	eb 09                	jmp    c00289ac <FAT::seek(void*, unsigned long long)+0x54>
c00289a3:	90                   	nop
c00289a4:	b8 01 00 00 00       	mov    eax,0x1
c00289a9:	8d 76 00             	lea    esi,[esi+0x0]
c00289ac:	83 c4 2c             	add    esp,0x2c
c00289af:	c3                   	ret    

c00289b0 <fatWrapperReadDisk>:
c00289b0:	53                   	push   ebx
c00289b1:	83 ec 18             	sub    esp,0x18
c00289b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00289bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00289c1:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00289c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00289cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00289d0:	ba 00 00 00 00       	mov    edx,0x0
c00289d5:	83 ec 0c             	sub    esp,0xc
c00289d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00289dc:	53                   	push   ebx
c00289dd:	52                   	push   edx
c00289de:	50                   	push   eax
c00289df:	51                   	push   ecx
c00289e0:	e8 eb 3c ff ff       	call   c001c6d0 <LogicalDisk::read(unsigned long long, int, void*)>
c00289e5:	83 c4 20             	add    esp,0x20
c00289e8:	83 c4 18             	add    esp,0x18
c00289eb:	5b                   	pop    ebx
c00289ec:	c3                   	ret    
c00289ed:	8d 76 00             	lea    esi,[esi+0x0]

c00289f0 <fatWrapperWriteDisk>:
c00289f0:	53                   	push   ebx
c00289f1:	83 ec 18             	sub    esp,0x18
c00289f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00289fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a01:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028a08:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028a0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028a10:	ba 00 00 00 00       	mov    edx,0x0
c0028a15:	83 ec 0c             	sub    esp,0xc
c0028a18:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a1c:	53                   	push   ebx
c0028a1d:	52                   	push   edx
c0028a1e:	50                   	push   eax
c0028a1f:	51                   	push   ecx
c0028a20:	e8 17 3d ff ff       	call   c001c73c <LogicalDisk::write(unsigned long long, int, void*)>
c0028a25:	83 c4 20             	add    esp,0x20
c0028a28:	83 c4 18             	add    esp,0x18
c0028a2b:	5b                   	pop    ebx
c0028a2c:	c3                   	ret    
c0028a2d:	8d 76 00             	lea    esi,[esi+0x0]

c0028a30 <fatWrapperIoctl>:
c0028a30:	53                   	push   ebx
c0028a31:	83 ec 28             	sub    esp,0x28
c0028a34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0028a38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028a3c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028a40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028a44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a49:	83 f8 02             	cmp    eax,0x2
c0028a4c:	75 32                	jne    c0028a80 <fatWrapperIoctl+0x50>
c0028a4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028a56:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a5b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028a62:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028a68:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028a6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028a72:	66 89 02             	mov    WORD PTR [edx],ax
c0028a75:	b8 00 00 00 00       	mov    eax,0x0
c0028a7a:	e9 c5 00 00 00       	jmp    c0028b44 <fatWrapperIoctl+0x114>
c0028a7f:	90                   	nop
c0028a80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a85:	83 f8 01             	cmp    eax,0x1
c0028a88:	75 6a                	jne    c0028af4 <fatWrapperIoctl+0xc4>
c0028a8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028a92:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a97:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028a9e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028aa4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028aaa:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028ab0:	89 c8                	mov    eax,ecx
c0028ab2:	89 da                	mov    edx,ebx
c0028ab4:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028ab8:	c1 e0 0a             	shl    eax,0xa
c0028abb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028ac0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028ac7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028acd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028ad3:	89 cb                	mov    ebx,ecx
c0028ad5:	c1 fb 1f             	sar    ebx,0x1f
c0028ad8:	53                   	push   ebx
c0028ad9:	51                   	push   ecx
c0028ada:	52                   	push   edx
c0028adb:	50                   	push   eax
c0028adc:	e8 af 5b 00 00       	call   c002e690 <__udivdi3>
c0028ae1:	83 c4 10             	add    esp,0x10
c0028ae4:	89 c2                	mov    edx,eax
c0028ae6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028aea:	89 10                	mov    DWORD PTR [eax],edx
c0028aec:	b8 00 00 00 00       	mov    eax,0x0
c0028af1:	eb 51                	jmp    c0028b44 <fatWrapperIoctl+0x114>
c0028af3:	90                   	nop
c0028af4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028af9:	85 c0                	test   eax,eax
c0028afb:	75 07                	jne    c0028b04 <fatWrapperIoctl+0xd4>
c0028afd:	b8 00 00 00 00       	mov    eax,0x0
c0028b02:	eb 40                	jmp    c0028b44 <fatWrapperIoctl+0x114>
c0028b04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028b09:	83 f8 03             	cmp    eax,0x3
c0028b0c:	75 1a                	jne    c0028b28 <fatWrapperIoctl+0xf8>
c0028b0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028b12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028b16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b1a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028b20:	b8 00 00 00 00       	mov    eax,0x0
c0028b25:	eb 1d                	jmp    c0028b44 <fatWrapperIoctl+0x114>
c0028b27:	90                   	nop
c0028b28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028b2d:	83 f8 04             	cmp    eax,0x4
c0028b30:	75 0a                	jne    c0028b3c <fatWrapperIoctl+0x10c>
c0028b32:	b8 00 00 00 00       	mov    eax,0x0
c0028b37:	eb 0b                	jmp    c0028b44 <fatWrapperIoctl+0x114>
c0028b39:	8d 76 00             	lea    esi,[esi+0x0]
c0028b3c:	b8 04 00 00 00       	mov    eax,0x4
c0028b41:	8d 76 00             	lea    esi,[esi+0x0]
c0028b44:	83 c4 28             	add    esp,0x28
c0028b47:	5b                   	pop    ebx
c0028b48:	c3                   	ret    
c0028b49:	90                   	nop
c0028b4a:	66 90                	xchg   ax,ax

c0028b4c <FAT::FAT()>:
c0028b4c:	83 ec 1c             	sub    esp,0x1c
c0028b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b53:	83 ec 0c             	sub    esp,0xc
c0028b56:	50                   	push   eax
c0028b57:	e8 66 15 ff ff       	call   c001a0c2 <Filesystem::Filesystem()>
c0028b5c:	83 c4 10             	add    esp,0x10
c0028b5f:	ba c8 33 03 c0       	mov    edx,0xc00333c8
c0028b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b68:	89 10                	mov    DWORD PTR [eax],edx
c0028b6a:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028b74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028b7c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028b81:	7f 19                	jg     c0028b9c <FAT::FAT()+0x50>
c0028b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028b87:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028b92:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028b97:	eb e3                	jmp    c0028b7c <FAT::FAT()+0x30>
c0028b99:	8d 76 00             	lea    esi,[esi+0x0]
c0028b9c:	90                   	nop
c0028b9d:	83 c4 1c             	add    esp,0x1c
c0028ba0:	c3                   	ret    
c0028ba1:	90                   	nop
c0028ba2:	66 90                	xchg   ax,ax

c0028ba4 <FAT::fixFilepath(char*)>:
c0028ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ba8:	8a 00                	mov    al,BYTE PTR [eax]
c0028baa:	0f be c0             	movsx  eax,al
c0028bad:	83 f8 40             	cmp    eax,0x40
c0028bb0:	7e 2e                	jle    c0028be0 <FAT::fixFilepath(char*)+0x3c>
c0028bb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bb6:	8a 00                	mov    al,BYTE PTR [eax]
c0028bb8:	83 e8 41             	sub    eax,0x41
c0028bbb:	88 c2                	mov    dl,al
c0028bbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bc1:	88 10                	mov    BYTE PTR [eax],dl
c0028bc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bc7:	8a 00                	mov    al,BYTE PTR [eax]
c0028bc9:	0f be c0             	movsx  eax,al
c0028bcc:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028bd3:	83 c0 30             	add    eax,0x30
c0028bd6:	88 c2                	mov    dl,al
c0028bd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bdc:	88 10                	mov    BYTE PTR [eax],dl
c0028bde:	66 90                	xchg   ax,ax
c0028be0:	90                   	nop
c0028be1:	c3                   	ret    
c0028be2:	66 90                	xchg   ax,ax

c0028be4 <FAT::open(char const*, void**, FileOpenMode)>:
c0028be4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028bea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028bf2:	74 0c                	je     c0028c00 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028bf4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028bfc:	75 0e                	jne    c0028c0c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028bfe:	66 90                	xchg   ax,ax
c0028c00:	b8 04 00 00 00       	mov    eax,0x4
c0028c05:	e9 46 01 00 00       	jmp    c0028d50 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028c0a:	66 90                	xchg   ax,ax
c0028c0c:	83 ec 08             	sub    esp,0x8
c0028c0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c16:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028c1a:	50                   	push   eax
c0028c1b:	e8 20 7a fd ff       	call   c0000640 <strcpy>
c0028c20:	83 c4 10             	add    esp,0x10
c0028c23:	83 ec 08             	sub    esp,0x8
c0028c26:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028c2a:	50                   	push   eax
c0028c2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c32:	e8 6d ff ff ff       	call   c0028ba4 <FAT::fixFilepath(char*)>
c0028c37:	83 c4 10             	add    esp,0x10
c0028c3a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028c42:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c49:	83 e0 01             	and    eax,0x1
c0028c4c:	74 12                	je     c0028c60 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028c4e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c55:	83 c8 01             	or     eax,0x1
c0028c58:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c5f:	90                   	nop
c0028c60:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c67:	83 e0 04             	and    eax,0x4
c0028c6a:	74 24                	je     c0028c90 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028c6c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c73:	83 c8 30             	or     eax,0x30
c0028c76:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c7d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c84:	83 c8 02             	or     eax,0x2
c0028c87:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c8e:	66 90                	xchg   ax,ax
c0028c90:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c97:	83 e0 02             	and    eax,0x2
c0028c9a:	74 14                	je     c0028cb0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028c9c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ca3:	83 c8 02             	or     eax,0x2
c0028ca6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028cad:	8d 76 00             	lea    esi,[esi+0x0]
c0028cb0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028cb7:	83 e0 08             	and    eax,0x8
c0028cba:	74 14                	je     c0028cd0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028cbc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028cc3:	83 c8 04             	or     eax,0x4
c0028cc6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0028cd0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028cd7:	83 e0 10             	and    eax,0x10
c0028cda:	74 14                	je     c0028cf0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028cdc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ce3:	83 c8 08             	or     eax,0x8
c0028ce6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ced:	8d 76 00             	lea    esi,[esi+0x0]
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	68 28 02 00 00       	push   0x228
c0028cf8:	e8 c1 d6 fe ff       	call   c00163be <malloc>
c0028cfd:	83 c4 10             	add    esp,0x10
c0028d00:	89 c2                	mov    edx,eax
c0028d02:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d09:	89 10                	mov    DWORD PTR [eax],edx
c0028d0b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028d13:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d1c:	83 ec 04             	sub    esp,0x4
c0028d1f:	52                   	push   edx
c0028d20:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028d24:	52                   	push   edx
c0028d25:	50                   	push   eax
c0028d26:	e8 e3 b0 fd ff       	call   c0003e0e <f_open>
c0028d2b:	83 c4 10             	add    esp,0x10
c0028d2e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028d35:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028d3d:	74 09                	je     c0028d48 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028d3f:	b8 01 00 00 00       	mov    eax,0x1
c0028d44:	eb 0a                	jmp    c0028d50 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028d46:	66 90                	xchg   ax,ax
c0028d48:	b8 00 00 00 00       	mov    eax,0x0
c0028d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0028d50:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028d56:	c3                   	ret    
c0028d57:	90                   	nop

c0028d58 <FAT::openDir(char const*, void**)>:
c0028d58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028d5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028d66:	74 0c                	je     c0028d74 <FAT::openDir(char const*, void**)+0x1c>
c0028d68:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028d70:	75 0e                	jne    c0028d80 <FAT::openDir(char const*, void**)+0x28>
c0028d72:	66 90                	xchg   ax,ax
c0028d74:	b8 04 00 00 00       	mov    eax,0x4
c0028d79:	e9 82 00 00 00       	jmp    c0028e00 <FAT::openDir(char const*, void**)+0xa8>
c0028d7e:	66 90                	xchg   ax,ax
c0028d80:	83 ec 08             	sub    esp,0x8
c0028d83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028d8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028d8e:	50                   	push   eax
c0028d8f:	e8 ac 78 fd ff       	call   c0000640 <strcpy>
c0028d94:	83 c4 10             	add    esp,0x10
c0028d97:	83 ec 08             	sub    esp,0x8
c0028d9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028d9e:	50                   	push   eax
c0028d9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028da6:	e8 f9 fd ff ff       	call   c0028ba4 <FAT::fixFilepath(char*)>
c0028dab:	83 c4 10             	add    esp,0x10
c0028dae:	83 ec 0c             	sub    esp,0xc
c0028db1:	6a 30                	push   0x30
c0028db3:	e8 06 d6 fe ff       	call   c00163be <malloc>
c0028db8:	83 c4 10             	add    esp,0x10
c0028dbb:	89 c2                	mov    edx,eax
c0028dbd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028dc4:	89 10                	mov    DWORD PTR [eax],edx
c0028dc6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0028dcf:	83 ec 08             	sub    esp,0x8
c0028dd2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028dd6:	52                   	push   edx
c0028dd7:	50                   	push   eax
c0028dd8:	e8 e0 b9 fd ff       	call   c00047bd <f_opendir>
c0028ddd:	83 c4 10             	add    esp,0x10
c0028de0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028de7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028def:	74 07                	je     c0028df8 <FAT::openDir(char const*, void**)+0xa0>
c0028df1:	b8 01 00 00 00       	mov    eax,0x1
c0028df6:	eb 08                	jmp    c0028e00 <FAT::openDir(char const*, void**)+0xa8>
c0028df8:	b8 00 00 00 00       	mov    eax,0x0
c0028dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0028e00:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028e06:	c3                   	ret    
c0028e07:	90                   	nop

c0028e08 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028e08:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028e0e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028e16:	75 0c                	jne    c0028e24 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028e18:	b8 04 00 00 00       	mov    eax,0x4
c0028e1d:	e9 d6 00 00 00       	jmp    c0028ef8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e22:	66 90                	xchg   ax,ax
c0028e24:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028e2c:	75 0a                	jne    c0028e38 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028e2e:	b8 04 00 00 00       	mov    eax,0x4
c0028e33:	e9 c0 00 00 00       	jmp    c0028ef8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e38:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028e40:	75 0a                	jne    c0028e4c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028e42:	b8 04 00 00 00       	mov    eax,0x4
c0028e47:	e9 ac 00 00 00       	jmp    c0028ef8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e4c:	83 ec 08             	sub    esp,0x8
c0028e4f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028e56:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028e5d:	50                   	push   eax
c0028e5e:	e8 dd 77 fd ff       	call   c0000640 <strcpy>
c0028e63:	83 c4 10             	add    esp,0x10
c0028e66:	83 ec 08             	sub    esp,0x8
c0028e69:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028e70:	50                   	push   eax
c0028e71:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028e78:	e8 27 fd ff ff       	call   c0028ba4 <FAT::fixFilepath(char*)>
c0028e7d:	83 c4 10             	add    esp,0x10
c0028e80:	83 ec 08             	sub    esp,0x8
c0028e83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028e87:	50                   	push   eax
c0028e88:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028e8f:	50                   	push   eax
c0028e90:	e8 a7 ba fd ff       	call   c000493c <f_stat>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028e9f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028ea6:	85 c0                	test   eax,eax
c0028ea8:	74 0a                	je     c0028eb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028eaa:	83 f8 04             	cmp    eax,0x4
c0028ead:	74 39                	je     c0028ee8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028eaf:	eb 3f                	jmp    c0028ef0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0028eb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028eb8:	0f b6 c0             	movzx  eax,al
c0028ebb:	83 e0 10             	and    eax,0x10
c0028ebe:	0f 95 c2             	setne  dl
c0028ec1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028ec8:	88 10                	mov    BYTE PTR [eax],dl
c0028eca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ece:	ba 00 00 00 00       	mov    edx,0x0
c0028ed3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028eda:	89 01                	mov    DWORD PTR [ecx],eax
c0028edc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028edf:	b8 00 00 00 00       	mov    eax,0x0
c0028ee4:	eb 12                	jmp    c0028ef8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028ee6:	66 90                	xchg   ax,ax
c0028ee8:	b8 02 00 00 00       	mov    eax,0x2
c0028eed:	eb 09                	jmp    c0028ef8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028eef:	90                   	nop
c0028ef0:	b8 01 00 00 00       	mov    eax,0x1
c0028ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ef8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028efe:	c3                   	ret    
c0028eff:	90                   	nop

c0028f00 <FAT::unlink(char const*)>:
c0028f00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028f06:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028f0e:	75 08                	jne    c0028f18 <FAT::unlink(char const*)+0x18>
c0028f10:	b8 04 00 00 00       	mov    eax,0x4
c0028f15:	eb 61                	jmp    c0028f78 <FAT::unlink(char const*)+0x78>
c0028f17:	90                   	nop
c0028f18:	83 ec 08             	sub    esp,0x8
c0028f1b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f22:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028f26:	50                   	push   eax
c0028f27:	e8 14 77 fd ff       	call   c0000640 <strcpy>
c0028f2c:	83 c4 10             	add    esp,0x10
c0028f2f:	83 ec 08             	sub    esp,0x8
c0028f32:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028f36:	50                   	push   eax
c0028f37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f3e:	e8 61 fc ff ff       	call   c0028ba4 <FAT::fixFilepath(char*)>
c0028f43:	83 c4 10             	add    esp,0x10
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028f4d:	50                   	push   eax
c0028f4e:	e8 5b bc fd ff       	call   c0004bae <f_unlink>
c0028f53:	83 c4 10             	add    esp,0x10
c0028f56:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028f5d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028f64:	85 c0                	test   eax,eax
c0028f66:	75 08                	jne    c0028f70 <FAT::unlink(char const*)+0x70>
c0028f68:	b8 00 00 00 00       	mov    eax,0x0
c0028f6d:	eb 09                	jmp    c0028f78 <FAT::unlink(char const*)+0x78>
c0028f6f:	90                   	nop
c0028f70:	b8 01 00 00 00       	mov    eax,0x1
c0028f75:	8d 76 00             	lea    esi,[esi+0x0]
c0028f78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028f7e:	c3                   	ret    
c0028f7f:	90                   	nop

c0028f80 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028f80:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028f86:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0028f8d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0028f94:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028f98:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028f9c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028fa4:	75 0a                	jne    c0028fb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0028fa6:	b8 04 00 00 00       	mov    eax,0x4
c0028fab:	e9 7c 01 00 00       	jmp    c002912c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0028fb0:	83 ec 08             	sub    esp,0x8
c0028fb3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028fba:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028fbe:	50                   	push   eax
c0028fbf:	e8 7c 76 fd ff       	call   c0000640 <strcpy>
c0028fc4:	83 c4 10             	add    esp,0x10
c0028fc7:	83 ec 08             	sub    esp,0x8
c0028fca:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028fce:	50                   	push   eax
c0028fcf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028fd6:	e8 c9 fb ff ff       	call   c0028ba4 <FAT::fixFilepath(char*)>
c0028fdb:	83 c4 10             	add    esp,0x10
c0028fde:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0028fe6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0028fee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ff3:	83 e0 01             	and    eax,0x1
c0028ff6:	74 14                	je     c002900c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0028ff8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028fff:	83 c8 01             	or     eax,0x1
c0029002:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029009:	8d 76 00             	lea    esi,[esi+0x0]
c002900c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029011:	83 e0 02             	and    eax,0x2
c0029014:	74 12                	je     c0029028 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0029016:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002901d:	83 c8 20             	or     eax,0x20
c0029020:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029027:	90                   	nop
c0029028:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002902d:	83 e0 04             	and    eax,0x4
c0029030:	74 12                	je     c0029044 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0029032:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029039:	83 c8 04             	or     eax,0x4
c002903c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029043:	90                   	nop
c0029044:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029049:	83 e0 08             	and    eax,0x8
c002904c:	74 12                	je     c0029060 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c002904e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029055:	83 c8 02             	or     eax,0x2
c0029058:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002905f:	90                   	nop
c0029060:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029065:	83 e0 01             	and    eax,0x1
c0029068:	74 12                	je     c002907c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c002906a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029071:	83 c8 01             	or     eax,0x1
c0029074:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002907b:	90                   	nop
c002907c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029081:	83 e0 02             	and    eax,0x2
c0029084:	74 12                	je     c0029098 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0029086:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002908d:	83 c8 20             	or     eax,0x20
c0029090:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029097:	90                   	nop
c0029098:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002909d:	83 e0 04             	and    eax,0x4
c00290a0:	74 12                	je     c00290b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c00290a2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00290a9:	83 c8 04             	or     eax,0x4
c00290ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290b3:	90                   	nop
c00290b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00290b9:	83 e0 08             	and    eax,0x8
c00290bc:	74 12                	je     c00290d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00290be:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00290c5:	83 c8 02             	or     eax,0x2
c00290c8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290cf:	90                   	nop
c00290d0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00290d7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00290de:	09 d0                	or     eax,edx
c00290e0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290e7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00290ef:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00290f7:	83 ec 04             	sub    esp,0x4
c00290fa:	52                   	push   edx
c00290fb:	50                   	push   eax
c00290fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029100:	50                   	push   eax
c0029101:	e8 1d bf fd ff       	call   c0005023 <f_chmod>
c0029106:	83 c4 10             	add    esp,0x10
c0029109:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0029110:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0029117:	85 c0                	test   eax,eax
c0029119:	75 09                	jne    c0029124 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c002911b:	b8 00 00 00 00       	mov    eax,0x0
c0029120:	eb 0a                	jmp    c002912c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0029122:	66 90                	xchg   ax,ax
c0029124:	b8 01 00 00 00       	mov    eax,0x1
c0029129:	8d 76 00             	lea    esi,[esi+0x0]
c002912c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0029132:	c3                   	ret    
c0029133:	90                   	nop

c0029134 <FAT::rename(char const*, char const*)>:
c0029134:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002913a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0029142:	74 0c                	je     c0029150 <FAT::rename(char const*, char const*)+0x1c>
c0029144:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002914c:	75 0e                	jne    c002915c <FAT::rename(char const*, char const*)+0x28>
c002914e:	66 90                	xchg   ax,ax
c0029150:	b8 04 00 00 00       	mov    eax,0x4
c0029155:	e9 9e 00 00 00       	jmp    c00291f8 <FAT::rename(char const*, char const*)+0xc4>
c002915a:	66 90                	xchg   ax,ax
c002915c:	83 ec 08             	sub    esp,0x8
c002915f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029166:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002916d:	50                   	push   eax
c002916e:	e8 cd 74 fd ff       	call   c0000640 <strcpy>
c0029173:	83 c4 10             	add    esp,0x10
c0029176:	83 ec 08             	sub    esp,0x8
c0029179:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0029180:	50                   	push   eax
c0029181:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029188:	e8 17 fa ff ff       	call   c0028ba4 <FAT::fixFilepath(char*)>
c002918d:	83 c4 10             	add    esp,0x10
c0029190:	83 ec 08             	sub    esp,0x8
c0029193:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002919a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002919e:	50                   	push   eax
c002919f:	e8 9c 74 fd ff       	call   c0000640 <strcpy>
c00291a4:	83 c4 10             	add    esp,0x10
c00291a7:	83 ec 08             	sub    esp,0x8
c00291aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00291ae:	50                   	push   eax
c00291af:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00291b6:	e8 e9 f9 ff ff       	call   c0028ba4 <FAT::fixFilepath(char*)>
c00291bb:	83 c4 10             	add    esp,0x10
c00291be:	83 ec 08             	sub    esp,0x8
c00291c1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00291c5:	50                   	push   eax
c00291c6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00291cd:	50                   	push   eax
c00291ce:	e8 98 bc fd ff       	call   c0004e6b <f_rename>
c00291d3:	83 c4 10             	add    esp,0x10
c00291d6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00291dd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00291e4:	85 c0                	test   eax,eax
c00291e6:	75 08                	jne    c00291f0 <FAT::rename(char const*, char const*)+0xbc>
c00291e8:	b8 00 00 00 00       	mov    eax,0x0
c00291ed:	eb 09                	jmp    c00291f8 <FAT::rename(char const*, char const*)+0xc4>
c00291ef:	90                   	nop
c00291f0:	b8 01 00 00 00       	mov    eax,0x1
c00291f5:	8d 76 00             	lea    esi,[esi+0x0]
c00291f8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00291fe:	c3                   	ret    
c00291ff:	90                   	nop

c0029200 <FAT::mkdir(char const*)>:
c0029200:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029206:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002920e:	75 08                	jne    c0029218 <FAT::mkdir(char const*)+0x18>
c0029210:	b8 04 00 00 00       	mov    eax,0x4
c0029215:	eb 61                	jmp    c0029278 <FAT::mkdir(char const*)+0x78>
c0029217:	90                   	nop
c0029218:	83 ec 08             	sub    esp,0x8
c002921b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029222:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029226:	50                   	push   eax
c0029227:	e8 14 74 fd ff       	call   c0000640 <strcpy>
c002922c:	83 c4 10             	add    esp,0x10
c002922f:	83 ec 08             	sub    esp,0x8
c0029232:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029236:	50                   	push   eax
c0029237:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002923e:	e8 61 f9 ff ff       	call   c0028ba4 <FAT::fixFilepath(char*)>
c0029243:	83 c4 10             	add    esp,0x10
c0029246:	83 ec 0c             	sub    esp,0xc
c0029249:	8d 44 24 18          	lea    eax,[esp+0x18]
c002924d:	50                   	push   eax
c002924e:	e8 7d ba fd ff       	call   c0004cd0 <f_mkdir>
c0029253:	83 c4 10             	add    esp,0x10
c0029256:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002925d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029264:	85 c0                	test   eax,eax
c0029266:	75 08                	jne    c0029270 <FAT::mkdir(char const*)+0x70>
c0029268:	b8 00 00 00 00       	mov    eax,0x0
c002926d:	eb 09                	jmp    c0029278 <FAT::mkdir(char const*)+0x78>
c002926f:	90                   	nop
c0029270:	b8 01 00 00 00       	mov    eax,0x1
c0029275:	8d 76 00             	lea    esi,[esi+0x0]
c0029278:	81 c4 1c 01 00 00    	add    esp,0x11c
c002927e:	c3                   	ret    
c002927f:	90                   	nop

c0029280 <FAT::exists(char const*)>:
c0029280:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0029286:	83 ec 08             	sub    esp,0x8
c0029289:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029290:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029294:	50                   	push   eax
c0029295:	e8 a6 73 fd ff       	call   c0000640 <strcpy>
c002929a:	83 c4 10             	add    esp,0x10
c002929d:	83 ec 08             	sub    esp,0x8
c00292a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00292a4:	50                   	push   eax
c00292a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00292ac:	e8 f3 f8 ff ff       	call   c0028ba4 <FAT::fixFilepath(char*)>
c00292b1:	83 c4 10             	add    esp,0x10
c00292b4:	83 ec 08             	sub    esp,0x8
c00292b7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00292be:	50                   	push   eax
c00292bf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00292c3:	50                   	push   eax
c00292c4:	e8 73 b6 fd ff       	call   c000493c <f_stat>
c00292c9:	83 c4 10             	add    esp,0x10
c00292cc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00292d3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00292da:	85 c0                	test   eax,eax
c00292dc:	75 06                	jne    c00292e4 <FAT::exists(char const*)+0x64>
c00292de:	b0 01                	mov    al,0x1
c00292e0:	eb 06                	jmp    c00292e8 <FAT::exists(char const*)+0x68>
c00292e2:	66 90                	xchg   ax,ax
c00292e4:	b0 00                	mov    al,0x0
c00292e6:	66 90                	xchg   ax,ax
c00292e8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00292ee:	c3                   	ret    
c00292ef:	90                   	nop

c00292f0 <isoReadDiscSectorHelper>:
c00292f0:	83 ec 2c             	sub    esp,0x2c
c00292f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00292f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00292fb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0029300:	83 e8 41             	sub    eax,0x41
c0029303:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c002930a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002930e:	ba 00 00 00 00       	mov    edx,0x0
c0029313:	83 ec 0c             	sub    esp,0xc
c0029316:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002931a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002931e:	52                   	push   edx
c002931f:	50                   	push   eax
c0029320:	51                   	push   ecx
c0029321:	e8 aa 33 ff ff       	call   c001c6d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0029326:	83 c4 20             	add    esp,0x20
c0029329:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002932d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0029332:	74 0c                	je     c0029340 <isoReadDiscSectorHelper+0x50>
c0029334:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029338:	c1 e0 0b             	shl    eax,0xb
c002933b:	eb 0b                	jmp    c0029348 <isoReadDiscSectorHelper+0x58>
c002933d:	8d 76 00             	lea    esi,[esi+0x0]
c0029340:	b8 00 00 00 00       	mov    eax,0x0
c0029345:	8d 76 00             	lea    esi,[esi+0x0]
c0029348:	83 c4 2c             	add    esp,0x2c
c002934b:	c3                   	ret    

c002934c <iso_kprintf>:
c002934c:	83 ec 0c             	sub    esp,0xc
c002934f:	83 ec 08             	sub    esp,0x8
c0029352:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029356:	68 76 31 03 c0       	push   0xc0033176
c002935b:	e8 fd fe fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0029360:	83 c4 10             	add    esp,0x10
c0029363:	90                   	nop
c0029364:	83 c4 0c             	add    esp,0xc
c0029367:	c3                   	ret    

c0029368 <iso_kprintfd>:
c0029368:	83 ec 0c             	sub    esp,0xc
c002936b:	83 ec 08             	sub    esp,0x8
c002936e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029372:	68 b6 17 03 c0       	push   0xc00317b6
c0029377:	e8 e1 fe fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002937c:	83 c4 10             	add    esp,0x10
c002937f:	90                   	nop
c0029380:	83 c4 0c             	add    esp,0xc
c0029383:	c3                   	ret    

c0029384 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0029384:	b8 08 00 00 00       	mov    eax,0x8
c0029389:	c3                   	ret    

c002938a <ISO9660::truncate(void*, unsigned long long)>:
c002938a:	b8 01 00 00 00       	mov    eax,0x1
c002938f:	c3                   	ret    

c0029390 <ISO9660::getName()>:
c0029390:	b8 2c 34 03 c0       	mov    eax,0xc003342c
c0029395:	c3                   	ret    

c0029396 <ISO9660::closeDir(void*)>:
c0029396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002939a:	8b 00                	mov    eax,DWORD PTR [eax]
c002939c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c002939f:	90                   	nop

c00293a0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00293a0:	b8 01 00 00 00       	mov    eax,0x1
c00293a5:	c3                   	ret    

c00293a6 <ISO9660::unlink(char const*)>:
c00293a6:	b8 01 00 00 00       	mov    eax,0x1
c00293ab:	c3                   	ret    

c00293ac <ISO9660::write(void*, unsigned long, void*, int*)>:
c00293ac:	b8 03 00 00 00       	mov    eax,0x3
c00293b1:	c3                   	ret    

c00293b2 <ISO9660::rename(char const*, char const*)>:
c00293b2:	b8 01 00 00 00       	mov    eax,0x1
c00293b7:	c3                   	ret    

c00293b8 <ISO9660::mkdir(char const*)>:
c00293b8:	b8 01 00 00 00       	mov    eax,0x1
c00293bd:	c3                   	ret    

c00293be <ISO9660::~ISO9660()>:
c00293be:	83 ec 0c             	sub    esp,0xc
c00293c1:	ba 6c 35 03 c0       	mov    edx,0xc003356c
c00293c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ca:	89 10                	mov    DWORD PTR [eax],edx
c00293cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d0:	83 ec 0c             	sub    esp,0xc
c00293d3:	50                   	push   eax
c00293d4:	e8 0d 0d ff ff       	call   c001a0e6 <Filesystem::~Filesystem()>
c00293d9:	83 c4 10             	add    esp,0x10
c00293dc:	90                   	nop
c00293dd:	83 c4 0c             	add    esp,0xc
c00293e0:	c3                   	ret    
c00293e1:	90                   	nop

c00293e2 <ISO9660::~ISO9660()>:
c00293e2:	83 ec 0c             	sub    esp,0xc
c00293e5:	83 ec 0c             	sub    esp,0xc
c00293e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ec:	e8 cd ff ff ff       	call   c00293be <ISO9660::~ISO9660()>
c00293f1:	83 c4 10             	add    esp,0x10
c00293f4:	83 ec 08             	sub    esp,0x8
c00293f7:	6a 08                	push   0x8
c00293f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293fd:	e8 2e fd fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c0029402:	83 c4 10             	add    esp,0x10
c0029405:	83 c4 0c             	add    esp,0xc
c0029408:	c3                   	ret    
c0029409:	90                   	nop

c002940a <ISO9660::exists(char const*)>:
c002940a:	83 ec 18             	sub    esp,0x18
c002940d:	68 47 34 03 c0       	push   0xc0033447
c0029412:	e8 5f 6e ff ff       	call   c0020276 <KePanic(char const*)>
c0029417:	31 c0                	xor    eax,eax
c0029419:	83 c4 1c             	add    esp,0x1c
c002941c:	c3                   	ret    
c002941d:	90                   	nop

c002941e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002941e:	56                   	push   esi
c002941f:	53                   	push   ebx
c0029420:	53                   	push   ebx
c0029421:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029425:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029429:	85 db                	test   ebx,ebx
c002942b:	0f 84 ca 00 00 00    	je     c00294fb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029431:	85 f6                	test   esi,esi
c0029433:	0f 84 c2 00 00 00    	je     c00294fb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029439:	b8 03 00 00 00       	mov    eax,0x3
c002943e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029443:	0f 85 b7 00 00 00    	jne    c0029500 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029449:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002944b:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029452:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029458:	74 1b                	je     c0029475 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c002945a:	85 c0                	test   eax,eax
c002945c:	74 10                	je     c002946e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c002945e:	83 ec 0c             	sub    esp,0xc
c0029461:	68 65 34 03 c0       	push   0xc0033465
c0029466:	e8 0b 6e ff ff       	call   c0020276 <KePanic(char const*)>
c002946b:	83 c4 10             	add    esp,0x10
c002946e:	8a 03                	mov    al,BYTE PTR [ebx]
c0029470:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029475:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029478:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002947f:	85 c0                	test   eax,eax
c0029481:	74 09                	je     c002948c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0029483:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002948a:	74 48                	je     c00294d4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c002948c:	83 ec 0c             	sub    esp,0xc
c002948f:	68 75 34 03 c0       	push   0xc0033475
c0029494:	e8 c4 fd fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c0029499:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002949c:	83 c4 10             	add    esp,0x10
c002949f:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00294a6:	85 c0                	test   eax,eax
c00294a8:	74 17                	je     c00294c1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00294aa:	83 ec 0c             	sub    esp,0xc
c00294ad:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00294b4:	68 95 34 03 c0       	push   0xc0033495
c00294b9:	e8 9f fd fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00294be:	83 c4 10             	add    esp,0x10
c00294c1:	83 ec 0c             	sub    esp,0xc
c00294c4:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00294cb:	50                   	push   eax
c00294cc:	e8 29 d7 fd ff       	call   c0006bfa <init_percd>
c00294d1:	83 c4 10             	add    esp,0x10
c00294d4:	83 c3 03             	add    ebx,0x3
c00294d7:	51                   	push   ecx
c00294d8:	51                   	push   ecx
c00294d9:	6a 00                	push   0x0
c00294db:	53                   	push   ebx
c00294dc:	e8 e0 d1 fd ff       	call   c00066c1 <iso_open>
c00294e1:	83 c4 10             	add    esp,0x10
c00294e4:	89 c2                	mov    edx,eax
c00294e6:	b8 01 00 00 00       	mov    eax,0x1
c00294eb:	83 fa ff             	cmp    edx,0xffffffff
c00294ee:	74 10                	je     c0029500 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00294f0:	83 c2 32             	add    edx,0x32
c00294f3:	31 c0                	xor    eax,eax
c00294f5:	01 d2                	add    edx,edx
c00294f7:	89 16                	mov    DWORD PTR [esi],edx
c00294f9:	eb 05                	jmp    c0029500 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00294fb:	b8 04 00 00 00       	mov    eax,0x4
c0029500:	5a                   	pop    edx
c0029501:	5b                   	pop    ebx
c0029502:	5e                   	pop    esi
c0029503:	c3                   	ret    

c0029504 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0029504:	53                   	push   ebx
c0029505:	83 ec 08             	sub    esp,0x8
c0029508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002950c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029510:	85 c0                	test   eax,eax
c0029512:	74 2d                	je     c0029541 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029514:	85 db                	test   ebx,ebx
c0029516:	74 29                	je     c0029541 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029518:	b9 02 00 00 00       	mov    ecx,0x2
c002951d:	52                   	push   edx
c002951e:	99                   	cdq    
c002951f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029523:	f7 f9                	idiv   ecx
c0029525:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029529:	83 e8 32             	sub    eax,0x32
c002952c:	50                   	push   eax
c002952d:	e8 37 d2 fd ff       	call   c0006769 <iso_read>
c0029532:	83 c4 10             	add    esp,0x10
c0029535:	89 03                	mov    DWORD PTR [ebx],eax
c0029537:	09 d0                	or     eax,edx
c0029539:	0f 94 c0             	sete   al
c002953c:	0f b6 c0             	movzx  eax,al
c002953f:	eb 05                	jmp    c0029546 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029541:	b8 04 00 00 00       	mov    eax,0x4
c0029546:	83 c4 08             	add    esp,0x8
c0029549:	5b                   	pop    ebx
c002954a:	c3                   	ret    
c002954b:	90                   	nop

c002954c <ISO9660::seek(void*, unsigned long long)>:
c002954c:	57                   	push   edi
c002954d:	56                   	push   esi
c002954e:	b8 04 00 00 00       	mov    eax,0x4
c0029553:	51                   	push   ecx
c0029554:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029558:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002955c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029560:	85 d2                	test   edx,edx
c0029562:	74 26                	je     c002958a <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029564:	6a 00                	push   0x0
c0029566:	b9 02 00 00 00       	mov    ecx,0x2
c002956b:	57                   	push   edi
c002956c:	89 d0                	mov    eax,edx
c002956e:	56                   	push   esi
c002956f:	99                   	cdq    
c0029570:	f7 f9                	idiv   ecx
c0029572:	83 e8 32             	sub    eax,0x32
c0029575:	50                   	push   eax
c0029576:	e8 04 d3 fd ff       	call   c000687f <iso_seek>
c002957b:	83 c4 10             	add    esp,0x10
c002957e:	31 f0                	xor    eax,esi
c0029580:	31 fa                	xor    edx,edi
c0029582:	09 d0                	or     eax,edx
c0029584:	0f 95 c0             	setne  al
c0029587:	0f b6 c0             	movzx  eax,al
c002958a:	5a                   	pop    edx
c002958b:	5e                   	pop    esi
c002958c:	5f                   	pop    edi
c002958d:	c3                   	ret    

c002958e <ISO9660::tell(void*, unsigned long long*)>:
c002958e:	53                   	push   ebx
c002958f:	83 ec 08             	sub    esp,0x8
c0029592:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029596:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002959a:	85 c0                	test   eax,eax
c002959c:	74 24                	je     c00295c2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c002959e:	85 db                	test   ebx,ebx
c00295a0:	74 20                	je     c00295c2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00295a2:	83 ec 0c             	sub    esp,0xc
c00295a5:	b9 02 00 00 00       	mov    ecx,0x2
c00295aa:	99                   	cdq    
c00295ab:	f7 f9                	idiv   ecx
c00295ad:	83 e8 32             	sub    eax,0x32
c00295b0:	50                   	push   eax
c00295b1:	e8 4d d3 fd ff       	call   c0006903 <iso_tell>
c00295b6:	83 c4 10             	add    esp,0x10
c00295b9:	89 03                	mov    DWORD PTR [ebx],eax
c00295bb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00295be:	31 c0                	xor    eax,eax
c00295c0:	eb 05                	jmp    c00295c7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00295c2:	b8 04 00 00 00       	mov    eax,0x4
c00295c7:	83 c4 08             	add    esp,0x8
c00295ca:	5b                   	pop    ebx
c00295cb:	c3                   	ret    

c00295cc <ISO9660::stat(void*, unsigned long long*)>:
c00295cc:	53                   	push   ebx
c00295cd:	83 ec 14             	sub    esp,0x14
c00295d0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00295d4:	68 b9 34 03 c0       	push   0xc00334b9
c00295d9:	e8 7f fc fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00295de:	83 c4 10             	add    esp,0x10
c00295e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00295e6:	74 2c                	je     c0029614 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00295e8:	85 db                	test   ebx,ebx
c00295ea:	74 28                	je     c0029614 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00295ec:	83 ec 0c             	sub    esp,0xc
c00295ef:	b9 02 00 00 00       	mov    ecx,0x2
c00295f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00295f8:	99                   	cdq    
c00295f9:	f7 f9                	idiv   ecx
c00295fb:	83 e8 32             	sub    eax,0x32
c00295fe:	50                   	push   eax
c00295ff:	e8 30 d3 fd ff       	call   c0006934 <iso_total>
c0029604:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002960b:	89 03                	mov    DWORD PTR [ebx],eax
c002960d:	83 c4 10             	add    esp,0x10
c0029610:	31 c0                	xor    eax,eax
c0029612:	eb 05                	jmp    c0029619 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0029614:	b8 04 00 00 00       	mov    eax,0x4
c0029619:	83 c4 08             	add    esp,0x8
c002961c:	5b                   	pop    ebx
c002961d:	c3                   	ret    

c002961e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002961e:	55                   	push   ebp
c002961f:	57                   	push   edi
c0029620:	56                   	push   esi
c0029621:	53                   	push   ebx
c0029622:	83 ec 18             	sub    esp,0x18
c0029625:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029629:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002962d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029631:	68 c1 34 03 c0       	push   0xc00334c1
c0029636:	e8 22 fc fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002963b:	83 c4 10             	add    esp,0x10
c002963e:	85 ff                	test   edi,edi
c0029640:	0f 94 c0             	sete   al
c0029643:	85 f6                	test   esi,esi
c0029645:	0f 94 c2             	sete   dl
c0029648:	09 d0                	or     eax,edx
c002964a:	a8 01                	test   al,0x1
c002964c:	0f 85 dd 00 00 00    	jne    c002972f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029652:	85 db                	test   ebx,ebx
c0029654:	0f 84 d5 00 00 00    	je     c002972f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002965a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002965d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029663:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002966a:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029671:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029673:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029679:	74 1b                	je     c0029696 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c002967b:	85 c0                	test   eax,eax
c002967d:	74 10                	je     c002968f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c002967f:	83 ec 0c             	sub    esp,0xc
c0029682:	68 65 34 03 c0       	push   0xc0033465
c0029687:	e8 ea 6b ff ff       	call   c0020276 <KePanic(char const*)>
c002968c:	83 c4 10             	add    esp,0x10
c002968f:	8a 03                	mov    al,BYTE PTR [ebx]
c0029691:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029696:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029699:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296a0:	85 c0                	test   eax,eax
c00296a2:	74 09                	je     c00296ad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00296a4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00296ab:	74 51                	je     c00296fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00296ad:	83 ec 0c             	sub    esp,0xc
c00296b0:	68 c9 34 03 c0       	push   0xc00334c9
c00296b5:	e8 a3 fb fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00296ba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296bd:	83 c4 10             	add    esp,0x10
c00296c0:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c00296c8:	74 21                	je     c00296eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00296ca:	83 ec 0c             	sub    esp,0xc
c00296cd:	68 e9 34 03 c0       	push   0xc00334e9
c00296d2:	e8 86 fb fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00296d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296da:	83 c4 10             	add    esp,0x10
c00296dd:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296e4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00296eb:	83 ec 0c             	sub    esp,0xc
c00296ee:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296f5:	50                   	push   eax
c00296f6:	e8 ff d4 fd ff       	call   c0006bfa <init_percd>
c00296fb:	83 c4 10             	add    esp,0x10
c00296fe:	83 c3 03             	add    ebx,0x3
c0029701:	52                   	push   edx
c0029702:	52                   	push   edx
c0029703:	6a 00                	push   0x0
c0029705:	53                   	push   ebx
c0029706:	e8 b6 cf fd ff       	call   c00066c1 <iso_open>
c002970b:	83 c4 10             	add    esp,0x10
c002970e:	89 c5                	mov    ebp,eax
c0029710:	83 f8 ff             	cmp    eax,0xffffffff
c0029713:	75 21                	jne    c0029736 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0029715:	50                   	push   eax
c0029716:	50                   	push   eax
c0029717:	6a 01                	push   0x1
c0029719:	53                   	push   ebx
c002971a:	e8 a2 cf fd ff       	call   c00066c1 <iso_open>
c002971f:	83 c4 10             	add    esp,0x10
c0029722:	ba 02 00 00 00       	mov    edx,0x2
c0029727:	40                   	inc    eax
c0029728:	74 2b                	je     c0029755 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002972a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002972d:	eb 24                	jmp    c0029753 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c002972f:	ba 04 00 00 00       	mov    edx,0x4
c0029734:	eb 1f                	jmp    c0029755 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029736:	83 ec 0c             	sub    esp,0xc
c0029739:	50                   	push   eax
c002973a:	e8 f5 d1 fd ff       	call   c0006934 <iso_total>
c002973f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029746:	89 07                	mov    DWORD PTR [edi],eax
c0029748:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002974b:	e8 fb cf fd ff       	call   c000674b <iso_close>
c0029750:	83 c4 10             	add    esp,0x10
c0029753:	31 d2                	xor    edx,edx
c0029755:	83 c4 0c             	add    esp,0xc
c0029758:	89 d0                	mov    eax,edx
c002975a:	5b                   	pop    ebx
c002975b:	5e                   	pop    esi
c002975c:	5f                   	pop    edi
c002975d:	5d                   	pop    ebp
c002975e:	c3                   	ret    
c002975f:	90                   	nop

c0029760 <ISO9660::close(void*)>:
c0029760:	83 ec 0c             	sub    esp,0xc
c0029763:	b8 04 00 00 00       	mov    eax,0x4
c0029768:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002976c:	85 d2                	test   edx,edx
c002976e:	74 1b                	je     c002978b <ISO9660::close(void*)+0x2b>
c0029770:	83 ec 0c             	sub    esp,0xc
c0029773:	b9 02 00 00 00       	mov    ecx,0x2
c0029778:	89 d0                	mov    eax,edx
c002977a:	99                   	cdq    
c002977b:	f7 f9                	idiv   ecx
c002977d:	83 e8 32             	sub    eax,0x32
c0029780:	50                   	push   eax
c0029781:	e8 c5 cf fd ff       	call   c000674b <iso_close>
c0029786:	83 c4 10             	add    esp,0x10
c0029789:	31 c0                	xor    eax,eax
c002978b:	83 c4 0c             	add    esp,0xc
c002978e:	c3                   	ret    
c002978f:	90                   	nop

c0029790 <ISO9660::openDir(char const*, void**)>:
c0029790:	56                   	push   esi
c0029791:	53                   	push   ebx
c0029792:	50                   	push   eax
c0029793:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029797:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002979b:	85 db                	test   ebx,ebx
c002979d:	0f 84 bd 00 00 00    	je     c0029860 <ISO9660::openDir(char const*, void**)+0xd0>
c00297a3:	85 f6                	test   esi,esi
c00297a5:	0f 84 b5 00 00 00    	je     c0029860 <ISO9660::openDir(char const*, void**)+0xd0>
c00297ab:	8a 13                	mov    dl,BYTE PTR [ebx]
c00297ad:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00297b4:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c00297ba:	74 1b                	je     c00297d7 <ISO9660::openDir(char const*, void**)+0x47>
c00297bc:	85 c0                	test   eax,eax
c00297be:	74 10                	je     c00297d0 <ISO9660::openDir(char const*, void**)+0x40>
c00297c0:	83 ec 0c             	sub    esp,0xc
c00297c3:	68 65 34 03 c0       	push   0xc0033465
c00297c8:	e8 a9 6a ff ff       	call   c0020276 <KePanic(char const*)>
c00297cd:	83 c4 10             	add    esp,0x10
c00297d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00297d2:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00297d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00297da:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00297e1:	85 c0                	test   eax,eax
c00297e3:	74 10                	je     c00297f5 <ISO9660::openDir(char const*, void**)+0x65>
c00297e5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00297ec:	74 1a                	je     c0029808 <ISO9660::openDir(char const*, void**)+0x78>
c00297ee:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00297f5:	83 ec 0c             	sub    esp,0xc
c00297f8:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00297ff:	50                   	push   eax
c0029800:	e8 f5 d3 fd ff       	call   c0006bfa <init_percd>
c0029805:	83 c4 10             	add    esp,0x10
c0029808:	83 c3 03             	add    ebx,0x3
c002980b:	50                   	push   eax
c002980c:	50                   	push   eax
c002980d:	6a 01                	push   0x1
c002980f:	53                   	push   ebx
c0029810:	e8 ac ce fd ff       	call   c00066c1 <iso_open>
c0029815:	83 c4 10             	add    esp,0x10
c0029818:	89 c3                	mov    ebx,eax
c002981a:	83 f8 ff             	cmp    eax,0xffffffff
c002981d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029822:	75 1c                	jne    c0029840 <ISO9660::openDir(char const*, void**)+0xb0>
c0029824:	53                   	push   ebx
c0029825:	53                   	push   ebx
c0029826:	68 0d 35 03 c0       	push   0xc003350d
c002982b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029831:	e8 88 db fe ff       	call   c00173be <VgaText::puts(char const*)>
c0029836:	83 c4 10             	add    esp,0x10
c0029839:	b8 01 00 00 00       	mov    eax,0x1
c002983e:	eb 25                	jmp    c0029865 <ISO9660::openDir(char const*, void**)+0xd5>
c0029840:	01 db                	add    ebx,ebx
c0029842:	51                   	push   ecx
c0029843:	83 c3 65             	add    ebx,0x65
c0029846:	51                   	push   ecx
c0029847:	68 20 35 03 c0       	push   0xc0033520
c002984c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029852:	e8 67 db fe ff       	call   c00173be <VgaText::puts(char const*)>
c0029857:	89 1e                	mov    DWORD PTR [esi],ebx
c0029859:	83 c4 10             	add    esp,0x10
c002985c:	31 c0                	xor    eax,eax
c002985e:	eb 05                	jmp    c0029865 <ISO9660::openDir(char const*, void**)+0xd5>
c0029860:	b8 04 00 00 00       	mov    eax,0x4
c0029865:	5a                   	pop    edx
c0029866:	5b                   	pop    ebx
c0029867:	5e                   	pop    esi
c0029868:	c3                   	ret    
c0029869:	90                   	nop

c002986a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002986a:	55                   	push   ebp
c002986b:	57                   	push   edi
c002986c:	56                   	push   esi
c002986d:	53                   	push   ebx
c002986e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029874:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c002987b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0029882:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002988a:	0f 84 e7 00 00 00    	je     c0029977 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029890:	85 db                	test   ebx,ebx
c0029892:	0f 84 df 00 00 00    	je     c0029977 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029898:	83 ec 0c             	sub    esp,0xc
c002989b:	68 33 35 03 c0       	push   0xc0033533
c00298a0:	e8 b8 f9 fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c00298a5:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00298ac:	b9 02 00 00 00       	mov    ecx,0x2
c00298b1:	99                   	cdq    
c00298b2:	f7 f9                	idiv   ecx
c00298b4:	83 e8 32             	sub    eax,0x32
c00298b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00298ba:	e8 c7 d0 fd ff       	call   c0006986 <iso_readdir>
c00298bf:	83 c4 10             	add    esp,0x10
c00298c2:	89 c6                	mov    esi,eax
c00298c4:	85 c0                	test   eax,eax
c00298c6:	75 37                	jne    c00298ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00298c8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00298cd:	56                   	push   esi
c00298ce:	56                   	push   esi
c00298cf:	68 3e 35 03 c0       	push   0xc003353e
c00298d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00298da:	e8 df da fe ff       	call   c00173be <VgaText::puts(char const*)>
c00298df:	83 c4 0c             	add    esp,0xc
c00298e2:	68 10 01 00 00       	push   0x110
c00298e7:	6a 00                	push   0x0
c00298e9:	57                   	push   edi
c00298ea:	e8 01 6c fd ff       	call   c00004f0 <memset>
c00298ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00298f5:	83 c4 10             	add    esp,0x10
c00298f8:	b8 01 00 00 00       	mov    eax,0x1
c00298fd:	eb 7d                	jmp    c002997c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00298ff:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029905:	8d 68 08             	lea    ebp,[eax+0x8]
c0029908:	83 ec 0c             	sub    esp,0xc
c002990b:	55                   	push   ebp
c002990c:	e8 5f 6c fd ff       	call   c0000570 <strlen>
c0029911:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029919:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002991d:	83 c4 10             	add    esp,0x10
c0029920:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0029924:	75 0a                	jne    c0029930 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0029926:	b8 02 00 00 00       	mov    eax,0x2
c002992b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c002992e:	74 05                	je     c0029935 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0029930:	b8 01 00 00 00       	mov    eax,0x1
c0029935:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029939:	50                   	push   eax
c002993a:	50                   	push   eax
c002993b:	55                   	push   ebp
c002993c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029940:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029944:	50                   	push   eax
c0029945:	e8 f6 6c fd ff       	call   c0000640 <strcpy>
c002994a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029951:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029953:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029959:	5a                   	pop    edx
c002995a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002995f:	59                   	pop    ecx
c0029960:	68 51 35 03 c0       	push   0xc0033551
c0029965:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c002996b:	e8 4e da fe ff       	call   c00173be <VgaText::puts(char const*)>
c0029970:	83 c4 10             	add    esp,0x10
c0029973:	31 c0                	xor    eax,eax
c0029975:	eb 05                	jmp    c002997c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029977:	b8 04 00 00 00       	mov    eax,0x4
c002997c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029982:	5b                   	pop    ebx
c0029983:	5e                   	pop    esi
c0029984:	5f                   	pop    edi
c0029985:	5d                   	pop    ebp
c0029986:	c3                   	ret    

c0029987 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029987:	57                   	push   edi
c0029988:	56                   	push   esi
c0029989:	53                   	push   ebx
c002998a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002998e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029992:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029996:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c002999c:	0f be cb             	movsx  ecx,bl
c002999f:	75 0b                	jne    c00299ac <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00299a1:	0f be 05 a0 47 03 c0 	movsx  eax,BYTE PTR ds:0xc00347a0
c00299a8:	39 c8                	cmp    eax,ecx
c00299aa:	74 47                	je     c00299f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00299ac:	83 ec 0c             	sub    esp,0xc
c00299af:	31 d2                	xor    edx,edx
c00299b1:	68 a0 03 04 c0       	push   0xc00403a0
c00299b6:	6a 01                	push   0x1
c00299b8:	52                   	push   edx
c00299b9:	56                   	push   esi
c00299ba:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c00299c1:	e8 0a 2d ff ff       	call   c001c6d0 <LogicalDisk::read(unsigned long long, int, void*)>
c00299c6:	83 c4 20             	add    esp,0x20
c00299c9:	85 c0                	test   eax,eax
c00299cb:	75 0e                	jne    c00299db <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00299cd:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c00299d3:	88 1d a0 47 03 c0    	mov    BYTE PTR ds:0xc00347a0,bl
c00299d9:	eb 18                	jmp    c00299f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00299db:	50                   	push   eax
c00299dc:	68 00 08 00 00       	push   0x800
c00299e1:	6a 00                	push   0x0
c00299e3:	57                   	push   edi
c00299e4:	e8 07 6b fd ff       	call   c00004f0 <memset>
c00299e9:	83 c4 10             	add    esp,0x10
c00299ec:	b8 01 00 00 00       	mov    eax,0x1
c00299f1:	eb 0e                	jmp    c0029a01 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00299f3:	be a0 03 04 c0       	mov    esi,0xc00403a0
c00299f8:	b9 00 08 00 00       	mov    ecx,0x800
c00299fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00299ff:	31 c0                	xor    eax,eax
c0029a01:	5b                   	pop    ebx
c0029a02:	5e                   	pop    esi
c0029a03:	5f                   	pop    edi
c0029a04:	c3                   	ret    
c0029a05:	90                   	nop

c0029a06 <ISO9660::tryMount(LogicalDisk*, int)>:
c0029a06:	53                   	push   ebx
c0029a07:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029a0d:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c0029a17:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029a1e:	8d 58 41             	lea    ebx,[eax+0x41]
c0029a21:	0f be db             	movsx  ebx,bl
c0029a24:	53                   	push   ebx
c0029a25:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029a29:	50                   	push   eax
c0029a2a:	6a 10                	push   0x10
c0029a2c:	e8 56 ff ff ff       	call   c0029987 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029a31:	83 c4 10             	add    esp,0x10
c0029a34:	31 d2                	xor    edx,edx
c0029a36:	85 c0                	test   eax,eax
c0029a38:	75 33                	jne    c0029a6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a3a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029a3f:	75 2c                	jne    c0029a6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a41:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029a46:	75 25                	jne    c0029a6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a48:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029a4d:	75 1e                	jne    c0029a6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a4f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029a54:	75 17                	jne    c0029a6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a56:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029a5b:	75 10                	jne    c0029a6d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a5d:	83 ec 0c             	sub    esp,0xc
c0029a60:	53                   	push   ebx
c0029a61:	e8 94 d1 fd ff       	call   c0006bfa <init_percd>
c0029a66:	83 c4 10             	add    esp,0x10
c0029a69:	40                   	inc    eax
c0029a6a:	0f 95 c2             	setne  dl
c0029a6d:	88 d0                	mov    al,dl
c0029a6f:	81 c4 08 08 00 00    	add    esp,0x808
c0029a75:	5b                   	pop    ebx
c0029a76:	c3                   	ret    
c0029a77:	90                   	nop

c0029a78 <ISO9660::ISO9660()>:
c0029a78:	83 ec 0c             	sub    esp,0xc
c0029a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a7f:	83 ec 0c             	sub    esp,0xc
c0029a82:	50                   	push   eax
c0029a83:	e8 3a 06 ff ff       	call   c001a0c2 <Filesystem::Filesystem()>
c0029a88:	83 c4 10             	add    esp,0x10
c0029a8b:	ba 6c 35 03 c0       	mov    edx,0xc003356c
c0029a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a94:	89 10                	mov    DWORD PTR [eax],edx
c0029a96:	e8 71 d2 fd ff       	call   c0006d0c <fs_iso9660_init>
c0029a9b:	90                   	nop
c0029a9c:	83 c4 0c             	add    esp,0xc
c0029a9f:	c3                   	ret    

c0029aa0 <SoundCard::beginPlayback()>:
c0029aa0:	c7 44 24 04 d0 35 03 c0 	mov    DWORD PTR [esp+0x4],0xc00335d0
c0029aa8:	e9 c9 67 ff ff       	jmp    c0020276 <KePanic(char const*)>
c0029aad:	90                   	nop

c0029aae <SoundCard::stopPlayback()>:
c0029aae:	c7 44 24 04 d0 35 03 c0 	mov    DWORD PTR [esp+0x4],0xc00335d0
c0029ab6:	e9 bb 67 ff ff       	jmp    c0020276 <KePanic(char const*)>
c0029abb:	90                   	nop

c0029abc <SoundCard::SoundCard(char const*)>:
c0029abc:	83 ec 1c             	sub    esp,0x1c
c0029abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ac3:	83 ec 08             	sub    esp,0x8
c0029ac6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029aca:	50                   	push   eax
c0029acb:	e8 70 19 ff ff       	call   c001b440 <Device::Device(char const*)>
c0029ad0:	83 c4 10             	add    esp,0x10
c0029ad3:	ba 1c 36 03 c0       	mov    edx,0xc003361c
c0029ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029adc:	89 10                	mov    DWORD PTR [eax],edx
c0029ade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ae2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029ae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029aed:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029afb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b09:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b17:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029b21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029b29:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029b2e:	7f 1a                	jg     c0029b4a <SoundCard::SoundCard(char const*)+0x8e>
c0029b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029b38:	83 c2 54             	add    edx,0x54
c0029b3b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029b43:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029b48:	eb df                	jmp    c0029b29 <SoundCard::SoundCard(char const*)+0x6d>
c0029b4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b4e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029b55:	90                   	nop
c0029b56:	83 c4 1c             	add    esp,0x1c
c0029b59:	c3                   	ret    

c0029b5a <SoundCard::~SoundCard()>:
c0029b5a:	83 ec 0c             	sub    esp,0xc
c0029b5d:	ba 1c 36 03 c0       	mov    edx,0xc003361c
c0029b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b66:	89 10                	mov    DWORD PTR [eax],edx
c0029b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b6c:	83 ec 0c             	sub    esp,0xc
c0029b6f:	50                   	push   eax
c0029b70:	e8 6b 16 ff ff       	call   c001b1e0 <Device::~Device()>
c0029b75:	83 c4 10             	add    esp,0x10
c0029b78:	90                   	nop
c0029b79:	83 c4 0c             	add    esp,0xc
c0029b7c:	c3                   	ret    
c0029b7d:	90                   	nop

c0029b7e <SoundCard::~SoundCard()>:
c0029b7e:	83 ec 0c             	sub    esp,0xc
c0029b81:	83 ec 0c             	sub    esp,0xc
c0029b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b88:	e8 cd ff ff ff       	call   c0029b5a <SoundCard::~SoundCard()>
c0029b8d:	83 c4 10             	add    esp,0x10
c0029b90:	83 ec 08             	sub    esp,0x8
c0029b93:	68 e8 01 00 00       	push   0x1e8
c0029b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b9c:	e8 8f f5 fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c0029ba1:	83 c4 10             	add    esp,0x10
c0029ba4:	83 c4 0c             	add    esp,0xc
c0029ba7:	c3                   	ret    

c0029ba8 <SoundCard::configureRates(int, int, int)>:
c0029ba8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029bac:	31 c0                	xor    eax,eax
c0029bae:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029bb5:	75 20                	jne    c0029bd7 <SoundCard::configureRates(int, int, int)+0x2f>
c0029bb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029bbb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029bc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029bc5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bcf:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029bd5:	b0 01                	mov    al,0x1
c0029bd7:	c3                   	ret    

c0029bd8 <SoundCard::getSamples16(int, short*)>:
c0029bd8:	55                   	push   ebp
c0029bd9:	57                   	push   edi
c0029bda:	31 ff                	xor    edi,edi
c0029bdc:	56                   	push   esi
c0029bdd:	53                   	push   ebx
c0029bde:	31 db                	xor    ebx,ebx
c0029be0:	83 ec 10             	sub    esp,0x10
c0029be3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029be7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029beb:	8d 04 36             	lea    eax,[esi+esi*1]
c0029bee:	50                   	push   eax
c0029bef:	6a 00                	push   0x0
c0029bf1:	55                   	push   ebp
c0029bf2:	e8 f9 68 fd ff       	call   c00004f0 <memset>
c0029bf7:	83 c4 10             	add    esp,0x10
c0029bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029bfe:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0029c05:	85 c0                	test   eax,eax
c0029c07:	74 1b                	je     c0029c24 <SoundCard::getSamples16(int, short*)+0x4c>
c0029c09:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029c0d:	75 15                	jne    c0029c24 <SoundCard::getSamples16(int, short*)+0x4c>
c0029c0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029c13:	55                   	push   ebp
c0029c14:	56                   	push   esi
c0029c15:	50                   	push   eax
c0029c16:	e8 f1 02 00 00       	call   c0029f0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029c1b:	83 c4 10             	add    esp,0x10
c0029c1e:	39 c7                	cmp    edi,eax
c0029c20:	7d 02                	jge    c0029c24 <SoundCard::getSamples16(int, short*)+0x4c>
c0029c22:	89 c7                	mov    edi,eax
c0029c24:	43                   	inc    ebx
c0029c25:	83 fb 20             	cmp    ebx,0x20
c0029c28:	75 d0                	jne    c0029bfa <SoundCard::getSamples16(int, short*)+0x22>
c0029c2a:	83 c4 0c             	add    esp,0xc
c0029c2d:	89 f8                	mov    eax,edi
c0029c2f:	5b                   	pop    ebx
c0029c30:	5e                   	pop    esi
c0029c31:	5f                   	pop    edi
c0029c32:	5d                   	pop    ebp
c0029c33:	c3                   	ret    

c0029c34 <SoundCard::getSamples32(int, int*)>:
c0029c34:	55                   	push   ebp
c0029c35:	57                   	push   edi
c0029c36:	31 ff                	xor    edi,edi
c0029c38:	56                   	push   esi
c0029c39:	31 f6                	xor    esi,esi
c0029c3b:	53                   	push   ebx
c0029c3c:	83 ec 10             	sub    esp,0x10
c0029c3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029c43:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029c47:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029c4b:	c1 e0 02             	shl    eax,0x2
c0029c4e:	50                   	push   eax
c0029c4f:	6a 00                	push   0x0
c0029c51:	55                   	push   ebp
c0029c52:	e8 99 68 fd ff       	call   c00004f0 <memset>
c0029c57:	83 c4 10             	add    esp,0x10
c0029c5a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029c61:	85 c0                	test   eax,eax
c0029c63:	74 1b                	je     c0029c80 <SoundCard::getSamples32(int, int*)+0x4c>
c0029c65:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029c69:	75 15                	jne    c0029c80 <SoundCard::getSamples32(int, int*)+0x4c>
c0029c6b:	53                   	push   ebx
c0029c6c:	55                   	push   ebp
c0029c6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029c71:	50                   	push   eax
c0029c72:	e8 61 03 00 00       	call   c0029fd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029c77:	83 c4 10             	add    esp,0x10
c0029c7a:	39 c6                	cmp    esi,eax
c0029c7c:	7d 02                	jge    c0029c80 <SoundCard::getSamples32(int, int*)+0x4c>
c0029c7e:	89 c6                	mov    esi,eax
c0029c80:	47                   	inc    edi
c0029c81:	83 ff 20             	cmp    edi,0x20
c0029c84:	75 d4                	jne    c0029c5a <SoundCard::getSamples32(int, int*)+0x26>
c0029c86:	85 f6                	test   esi,esi
c0029c88:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029c8f:	75 0f                	jne    c0029ca0 <SoundCard::getSamples32(int, int*)+0x6c>
c0029c91:	85 c0                	test   eax,eax
c0029c93:	74 1b                	je     c0029cb0 <SoundCard::getSamples32(int, int*)+0x7c>
c0029c95:	83 ec 0c             	sub    esp,0xc
c0029c98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029c9a:	53                   	push   ebx
c0029c9b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029c9e:	eb 0d                	jmp    c0029cad <SoundCard::getSamples32(int, int*)+0x79>
c0029ca0:	85 c0                	test   eax,eax
c0029ca2:	75 0c                	jne    c0029cb0 <SoundCard::getSamples32(int, int*)+0x7c>
c0029ca4:	83 ec 0c             	sub    esp,0xc
c0029ca7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029ca9:	53                   	push   ebx
c0029caa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029cad:	83 c4 10             	add    esp,0x10
c0029cb0:	83 c4 0c             	add    esp,0xc
c0029cb3:	89 f0                	mov    eax,esi
c0029cb5:	5b                   	pop    ebx
c0029cb6:	5e                   	pop    esi
c0029cb7:	5f                   	pop    edi
c0029cb8:	5d                   	pop    ebp
c0029cb9:	c3                   	ret    

c0029cba <SoundCard::addChannel(SoundPort*)>:
c0029cba:	83 ec 0c             	sub    esp,0xc
c0029cbd:	31 c0                	xor    eax,eax
c0029cbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029cc3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029ccb:	74 1b                	je     c0029ce8 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029ccd:	40                   	inc    eax
c0029cce:	83 f8 20             	cmp    eax,0x20
c0029cd1:	75 f0                	jne    c0029cc3 <SoundCard::addChannel(SoundPort*)+0x9>
c0029cd3:	83 ec 0c             	sub    esp,0xc
c0029cd6:	68 f5 35 03 c0       	push   0xc00335f5
c0029cdb:	e8 96 65 ff ff       	call   c0020276 <KePanic(char const*)>
c0029ce0:	83 c4 10             	add    esp,0x10
c0029ce3:	83 c8 ff             	or     eax,0xffffffff
c0029ce6:	eb 0b                	jmp    c0029cf3 <SoundCard::addChannel(SoundPort*)+0x39>
c0029ce8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029cec:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029cf3:	83 c4 0c             	add    esp,0xc
c0029cf6:	c3                   	ret    
c0029cf7:	90                   	nop

c0029cf8 <SoundCard::removeChannel(int)>:
c0029cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029d00:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029d0b:	c3                   	ret    

c0029d0c <SoundPort::SoundPort(int, int, int, int)>:
c0029d0c:	83 ec 0c             	sub    esp,0xc
c0029d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d13:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d1e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029d2a:	89 10                	mov    DWORD PTR [eax],edx
c0029d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029d34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029d3f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029d42:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029d47:	75 13                	jne    c0029d5c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0029d4f:	05 a0 0f 00 00       	add    eax,0xfa0
c0029d54:	01 c0                	add    eax,eax
c0029d56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029d5a:	66 90                	xchg   ax,ax
c0029d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029d64:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d6b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029d79:	c1 e0 02             	shl    eax,0x2
c0029d7c:	83 ec 0c             	sub    esp,0xc
c0029d7f:	50                   	push   eax
c0029d80:	e8 39 c6 fe ff       	call   c00163be <malloc>
c0029d85:	83 c4 10             	add    esp,0x10
c0029d88:	89 c2                	mov    edx,eax
c0029d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d8e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029d91:	90                   	nop
c0029d92:	83 c4 0c             	add    esp,0xc
c0029d95:	c3                   	ret    
c0029d96:	66 90                	xchg   ax,ax

c0029d98 <SoundPort::~SoundPort()>:
c0029d98:	83 ec 0c             	sub    esp,0xc
c0029d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d9f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029da2:	85 c0                	test   eax,eax
c0029da4:	74 1e                	je     c0029dc4 <SoundPort::~SoundPort()+0x2c>
c0029da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029daa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029dad:	83 ec 0c             	sub    esp,0xc
c0029db0:	50                   	push   eax
c0029db1:	e8 28 c6 fe ff       	call   c00163de <free>
c0029db6:	83 c4 10             	add    esp,0x10
c0029db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dbd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029dc4:	90                   	nop
c0029dc5:	83 c4 0c             	add    esp,0xc
c0029dc8:	c3                   	ret    
c0029dc9:	90                   	nop
c0029dca:	66 90                	xchg   ax,ax

c0029dcc <SoundPort::unpause()>:
c0029dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029dd0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029dd4:	c3                   	ret    
c0029dd5:	90                   	nop
c0029dd6:	66 90                	xchg   ax,ax

c0029dd8 <SoundPort::pause()>:
c0029dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ddc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029de0:	c3                   	ret    
c0029de1:	90                   	nop
c0029de2:	66 90                	xchg   ax,ax

c0029de4 <SoundPort::getBufferUsed()>:
c0029de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029de8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029deb:	c3                   	ret    

c0029dec <SoundPort::getBufferSize()>:
c0029dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029df0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029df3:	c3                   	ret    

c0029df4 <SoundPort::buffer16(short*, int)>:
c0029df4:	55                   	push   ebp
c0029df5:	57                   	push   edi
c0029df6:	56                   	push   esi
c0029df7:	53                   	push   ebx
c0029df8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029dfc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029e00:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029e03:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029e06:	74 68                	je     c0029e70 <SoundPort::buffer16(short*, int)+0x7c>
c0029e08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029e0c:	85 c9                	test   ecx,ecx
c0029e0e:	7e 60                	jle    c0029e70 <SoundPort::buffer16(short*, int)+0x7c>
c0029e10:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029e14:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029e17:	c1 e1 0f             	shl    ecx,0xf
c0029e1a:	8d 70 01             	lea    esi,[eax+0x1]
c0029e1d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029e20:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029e23:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e26:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e29:	74 4d                	je     c0029e78 <SoundPort::buffer16(short*, int)+0x84>
c0029e2b:	31 f6                	xor    esi,esi
c0029e2d:	eb 21                	jmp    c0029e50 <SoundPort::buffer16(short*, int)+0x5c>
c0029e2f:	90                   	nop
c0029e30:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029e35:	8d 79 01             	lea    edi,[ecx+0x1]
c0029e38:	c1 e3 0f             	shl    ebx,0xf
c0029e3b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029e3e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029e41:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029e44:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e47:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e4a:	74 1c                	je     c0029e68 <SoundPort::buffer16(short*, int)+0x74>
c0029e4c:	89 c6                	mov    esi,eax
c0029e4e:	66 90                	xchg   ax,ax
c0029e50:	8d 46 01             	lea    eax,[esi+0x1]
c0029e53:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029e57:	75 d7                	jne    c0029e30 <SoundPort::buffer16(short*, int)+0x3c>
c0029e59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0029e60:	5b                   	pop    ebx
c0029e61:	5e                   	pop    esi
c0029e62:	5f                   	pop    edi
c0029e63:	5d                   	pop    ebp
c0029e64:	c3                   	ret    
c0029e65:	8d 76 00             	lea    esi,[esi+0x0]
c0029e68:	5b                   	pop    ebx
c0029e69:	8d 46 02             	lea    eax,[esi+0x2]
c0029e6c:	5e                   	pop    esi
c0029e6d:	5f                   	pop    edi
c0029e6e:	5d                   	pop    ebp
c0029e6f:	c3                   	ret    
c0029e70:	5b                   	pop    ebx
c0029e71:	31 c0                	xor    eax,eax
c0029e73:	5e                   	pop    esi
c0029e74:	5f                   	pop    edi
c0029e75:	5d                   	pop    ebp
c0029e76:	c3                   	ret    
c0029e77:	90                   	nop
c0029e78:	b8 01 00 00 00       	mov    eax,0x1
c0029e7d:	eb e1                	jmp    c0029e60 <SoundPort::buffer16(short*, int)+0x6c>
c0029e7f:	90                   	nop

c0029e80 <SoundPort::buffer32(int*, int)>:
c0029e80:	55                   	push   ebp
c0029e81:	57                   	push   edi
c0029e82:	56                   	push   esi
c0029e83:	53                   	push   ebx
c0029e84:	83 ec 04             	sub    esp,0x4
c0029e87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029e8f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029e96:	89 04 24             	mov    DWORD PTR [esp],eax
c0029e99:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e9c:	74 5a                	je     c0029ef8 <SoundPort::buffer32(int*, int)+0x78>
c0029e9e:	85 c0                	test   eax,eax
c0029ea0:	7e 56                	jle    c0029ef8 <SoundPort::buffer32(int*, int)+0x78>
c0029ea2:	8d 71 01             	lea    esi,[ecx+0x1]
c0029ea5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029ea8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029eab:	8b 37                	mov    esi,DWORD PTR [edi]
c0029ead:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029eb0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029eb3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029eb6:	74 4c                	je     c0029f04 <SoundPort::buffer32(int*, int)+0x84>
c0029eb8:	31 f6                	xor    esi,esi
c0029eba:	eb 1c                	jmp    c0029ed8 <SoundPort::buffer32(int*, int)+0x58>
c0029ebc:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029ebf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029ec2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029ec5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029ec8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029ecc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029ecf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029ed2:	74 18                	je     c0029eec <SoundPort::buffer32(int*, int)+0x6c>
c0029ed4:	89 de                	mov    esi,ebx
c0029ed6:	66 90                	xchg   ax,ax
c0029ed8:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029edb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029ede:	75 dc                	jne    c0029ebc <SoundPort::buffer32(int*, int)+0x3c>
c0029ee0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029ee3:	90                   	nop
c0029ee4:	83 c4 04             	add    esp,0x4
c0029ee7:	5b                   	pop    ebx
c0029ee8:	5e                   	pop    esi
c0029ee9:	5f                   	pop    edi
c0029eea:	5d                   	pop    ebp
c0029eeb:	c3                   	ret    
c0029eec:	83 c4 04             	add    esp,0x4
c0029eef:	8d 46 02             	lea    eax,[esi+0x2]
c0029ef2:	5b                   	pop    ebx
c0029ef3:	5e                   	pop    esi
c0029ef4:	5f                   	pop    edi
c0029ef5:	5d                   	pop    ebp
c0029ef6:	c3                   	ret    
c0029ef7:	90                   	nop
c0029ef8:	83 c4 04             	add    esp,0x4
c0029efb:	31 c0                	xor    eax,eax
c0029efd:	5b                   	pop    ebx
c0029efe:	5e                   	pop    esi
c0029eff:	5f                   	pop    edi
c0029f00:	5d                   	pop    ebp
c0029f01:	c3                   	ret    
c0029f02:	66 90                	xchg   ax,ax
c0029f04:	b8 01 00 00 00       	mov    eax,0x1
c0029f09:	eb d9                	jmp    c0029ee4 <SoundPort::buffer32(int*, int)+0x64>
c0029f0b:	90                   	nop

c0029f0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029f0c:	57                   	push   edi
c0029f0d:	56                   	push   esi
c0029f0e:	53                   	push   ebx
c0029f0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0029f13:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0029f17:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0029f1d:	39 03                	cmp    DWORD PTR [ebx],eax
c0029f1f:	74 13                	je     c0029f34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0029f21:	83 ec 0c             	sub    esp,0xc
c0029f24:	68 48 36 03 c0       	push   0xc0033648
c0029f29:	e8 48 63 ff ff       	call   c0020276 <KePanic(char const*)>
c0029f2e:	83 c4 10             	add    esp,0x10
c0029f31:	8d 76 00             	lea    esi,[esi+0x0]
c0029f34:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0029f3a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029f3d:	74 11                	je     c0029f50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0029f3f:	83 ec 0c             	sub    esp,0xc
c0029f42:	68 87 36 03 c0       	push   0xc0033687
c0029f47:	e8 2a 63 ff ff       	call   c0020276 <KePanic(char const*)>
c0029f4c:	83 c4 10             	add    esp,0x10
c0029f4f:	90                   	nop
c0029f50:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0029f56:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029f59:	74 11                	je     c0029f6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0029f5b:	83 ec 0c             	sub    esp,0xc
c0029f5e:	68 87 36 03 c0       	push   0xc0033687
c0029f63:	e8 0e 63 ff ff       	call   c0020276 <KePanic(char const*)>
c0029f68:	83 c4 10             	add    esp,0x10
c0029f6b:	90                   	nop
c0029f6c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0029f6f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0029f73:	7e 07                	jle    c0029f7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0029f75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0029f79:	8d 76 00             	lea    esi,[esi+0x0]
c0029f7c:	85 f6                	test   esi,esi
c0029f7e:	7e 2c                	jle    c0029fac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0029f80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029f84:	8d 3c 36             	lea    edi,[esi+esi*1]
c0029f87:	31 c9                	xor    ecx,ecx
c0029f89:	01 d7                	add    edi,edx
c0029f8b:	90                   	nop
c0029f8c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0029f8f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0029f92:	85 c0                	test   eax,eax
c0029f94:	79 06                	jns    c0029f9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0029f96:	05 ff 7f 00 00       	add    eax,0x7fff
c0029f9b:	90                   	nop
c0029f9c:	c1 f8 0f             	sar    eax,0xf
c0029f9f:	83 c1 04             	add    ecx,0x4
c0029fa2:	66 01 02             	add    WORD PTR [edx],ax
c0029fa5:	83 c2 02             	add    edx,0x2
c0029fa8:	39 d7                	cmp    edi,edx
c0029faa:	75 e0                	jne    c0029f8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0029fac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029faf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029fb2:	83 ec 04             	sub    esp,0x4
c0029fb5:	29 f0                	sub    eax,esi
c0029fb7:	c1 e0 02             	shl    eax,0x2
c0029fba:	50                   	push   eax
c0029fbb:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029fbe:	50                   	push   eax
c0029fbf:	52                   	push   edx
c0029fc0:	e8 0b 64 fd ff       	call   c00003d0 <memmove>
c0029fc5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029fc8:	83 c4 10             	add    esp,0x10
c0029fcb:	29 f0                	sub    eax,esi
c0029fcd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029fd0:	89 f0                	mov    eax,esi
c0029fd2:	5b                   	pop    ebx
c0029fd3:	5e                   	pop    esi
c0029fd4:	5f                   	pop    edi
c0029fd5:	c3                   	ret    
c0029fd6:	66 90                	xchg   ax,ax

c0029fd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0029fd8:	57                   	push   edi
c0029fd9:	56                   	push   esi
c0029fda:	53                   	push   ebx
c0029fdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029fdf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029fe3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029fe7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0029fed:	39 06                	cmp    DWORD PTR [esi],eax
c0029fef:	74 13                	je     c002a004 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0029ff1:	83 ec 0c             	sub    esp,0xc
c0029ff4:	68 68 36 03 c0       	push   0xc0033668
c0029ff9:	e8 78 62 ff ff       	call   c0020276 <KePanic(char const*)>
c0029ffe:	83 c4 10             	add    esp,0x10
c002a001:	8d 76 00             	lea    esi,[esi+0x0]
c002a004:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c002a00a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c002a00d:	74 11                	je     c002a020 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c002a00f:	83 ec 0c             	sub    esp,0xc
c002a012:	68 a3 36 03 c0       	push   0xc00336a3
c002a017:	e8 5a 62 ff ff       	call   c0020276 <KePanic(char const*)>
c002a01c:	83 c4 10             	add    esp,0x10
c002a01f:	90                   	nop
c002a020:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c002a026:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c002a029:	74 11                	je     c002a03c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c002a02b:	83 ec 0c             	sub    esp,0xc
c002a02e:	68 a3 36 03 c0       	push   0xc00336a3
c002a033:	e8 3e 62 ff ff       	call   c0020276 <KePanic(char const*)>
c002a038:	83 c4 10             	add    esp,0x10
c002a03b:	90                   	nop
c002a03c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c002a03f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c002a043:	7e 07                	jle    c002a04c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c002a045:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a049:	8d 76 00             	lea    esi,[esi+0x0]
c002a04c:	85 ff                	test   edi,edi
c002a04e:	7e 1c                	jle    c002a06c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c002a050:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a057:	31 c0                	xor    eax,eax
c002a059:	8d 76 00             	lea    esi,[esi+0x0]
c002a05c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a05f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a062:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c002a065:	83 c0 04             	add    eax,0x4
c002a068:	39 c1                	cmp    ecx,eax
c002a06a:	75 f0                	jne    c002a05c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c002a06c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a06f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002a072:	83 ec 04             	sub    esp,0x4
c002a075:	29 f8                	sub    eax,edi
c002a077:	c1 e0 02             	shl    eax,0x2
c002a07a:	50                   	push   eax
c002a07b:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a07e:	50                   	push   eax
c002a07f:	52                   	push   edx
c002a080:	e8 4b 63 fd ff       	call   c00003d0 <memmove>
c002a085:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002a088:	83 c4 10             	add    esp,0x10
c002a08b:	29 f8                	sub    eax,edi
c002a08d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c002a090:	89 f8                	mov    eax,edi
c002a092:	5b                   	pop    ebx
c002a093:	5e                   	pop    esi
c002a094:	5f                   	pop    edi
c002a095:	c3                   	ret    

c002a096 <PCI::open(int, int, void*)>:
c002a096:	83 ec 18             	sub    esp,0x18
c002a099:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a09d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a0a1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a0a7:	8b 10                	mov    edx,DWORD PTR [eax]
c002a0a9:	50                   	push   eax
c002a0aa:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a0ad:	31 c0                	xor    eax,eax
c002a0af:	83 c4 1c             	add    esp,0x1c
c002a0b2:	c3                   	ret    
c002a0b3:	90                   	nop

c002a0b4 <PCI::close(int, int, void*)>:
c002a0b4:	31 c0                	xor    eax,eax
c002a0b6:	c3                   	ret    
c002a0b7:	90                   	nop

c002a0b8 <PCI::PCI()>:
c002a0b8:	83 ec 0c             	sub    esp,0xc
c002a0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0bf:	83 ec 08             	sub    esp,0x8
c002a0c2:	68 bf 36 03 c0       	push   0xc00336bf
c002a0c7:	50                   	push   eax
c002a0c8:	e8 73 0b ff ff       	call   c001ac40 <Bus::Bus(char const*)>
c002a0cd:	83 c4 10             	add    esp,0x10
c002a0d0:	ba 68 37 03 c0       	mov    edx,0xc0033768
c002a0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0d9:	89 10                	mov    DWORD PTR [eax],edx
c002a0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0df:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a0e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0ed:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a0f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a0fc:	0f b6 d0             	movzx  edx,al
c002a0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a103:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a10e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a114:	0f b6 d0             	movzx  edx,al
c002a117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a11b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a124:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a12a:	8d 50 01             	lea    edx,[eax+0x1]
c002a12d:	88 d1                	mov    cl,dl
c002a12f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a133:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a139:	0f b6 d0             	movzx  edx,al
c002a13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a140:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a144:	83 c9 c0             	or     ecx,0xffffffc0
c002a147:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a14b:	90                   	nop
c002a14c:	83 c4 0c             	add    esp,0xc
c002a14f:	c3                   	ret    

c002a150 <PCI::readBAR8(unsigned int, int)>:
c002a150:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a154:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a158:	f6 c2 01             	test   dl,0x1
c002a15b:	74 07                	je     c002a164 <PCI::readBAR8(unsigned int, int)+0x14>
c002a15d:	83 e2 fc             	and    edx,0xfffffffc
c002a160:	01 c2                	add    edx,eax
c002a162:	ec                   	in     al,dx
c002a163:	c3                   	ret    
c002a164:	83 e2 f0             	and    edx,0xfffffff0
c002a167:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a16a:	c3                   	ret    
c002a16b:	90                   	nop

c002a16c <PCI::readBAR16(unsigned int, int)>:
c002a16c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a170:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a174:	f6 c2 01             	test   dl,0x1
c002a177:	74 08                	je     c002a181 <PCI::readBAR16(unsigned int, int)+0x15>
c002a179:	83 e2 fc             	and    edx,0xfffffffc
c002a17c:	01 c2                	add    edx,eax
c002a17e:	66 ed                	in     ax,dx
c002a180:	c3                   	ret    
c002a181:	83 e2 f0             	and    edx,0xfffffff0
c002a184:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a188:	c3                   	ret    
c002a189:	90                   	nop

c002a18a <PCI::readBAR32(unsigned int, int)>:
c002a18a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a18e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a192:	f6 c2 01             	test   dl,0x1
c002a195:	74 07                	je     c002a19e <PCI::readBAR32(unsigned int, int)+0x14>
c002a197:	83 e2 fc             	and    edx,0xfffffffc
c002a19a:	01 c2                	add    edx,eax
c002a19c:	ed                   	in     eax,dx
c002a19d:	c3                   	ret    
c002a19e:	83 e2 f0             	and    edx,0xfffffff0
c002a1a1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a1a4:	c3                   	ret    
c002a1a5:	90                   	nop

c002a1a6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a1a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a1b2:	f6 c2 01             	test   dl,0x1
c002a1b5:	74 07                	je     c002a1be <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a1b7:	83 e2 fc             	and    edx,0xfffffffc
c002a1ba:	01 ca                	add    edx,ecx
c002a1bc:	ee                   	out    dx,al
c002a1bd:	c3                   	ret    
c002a1be:	83 e2 f0             	and    edx,0xfffffff0
c002a1c1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a1c4:	c3                   	ret    
c002a1c5:	90                   	nop

c002a1c6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a1c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a1d2:	f6 c2 01             	test   dl,0x1
c002a1d5:	74 08                	je     c002a1df <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a1d7:	83 e2 fc             	and    edx,0xfffffffc
c002a1da:	01 ca                	add    edx,ecx
c002a1dc:	66 ef                	out    dx,ax
c002a1de:	c3                   	ret    
c002a1df:	83 e2 f0             	and    edx,0xfffffff0
c002a1e2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a1e6:	c3                   	ret    
c002a1e7:	90                   	nop

c002a1e8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a1e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a1f4:	f6 c2 01             	test   dl,0x1
c002a1f7:	74 07                	je     c002a200 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a1f9:	83 e2 fc             	and    edx,0xfffffffc
c002a1fc:	01 ca                	add    edx,ecx
c002a1fe:	ef                   	out    dx,eax
c002a1ff:	c3                   	ret    
c002a200:	83 e2 f0             	and    edx,0xfffffff0
c002a203:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a206:	c3                   	ret    
c002a207:	90                   	nop

c002a208 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a208:	55                   	push   ebp
c002a209:	57                   	push   edi
c002a20a:	56                   	push   esi
c002a20b:	53                   	push   ebx
c002a20c:	83 ec 0c             	sub    esp,0xc
c002a20f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a214:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a218:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a21c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a220:	83 fe 07             	cmp    esi,0x7
c002a223:	76 10                	jbe    c002a235 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a225:	83 ec 0c             	sub    esp,0xc
c002a228:	68 c7 36 03 c0       	push   0xc00336c7
c002a22d:	e8 44 60 ff ff       	call   c0020276 <KePanic(char const*)>
c002a232:	83 c4 10             	add    esp,0x10
c002a235:	0f b6 db             	movzx  ebx,bl
c002a238:	83 fb 0f             	cmp    ebx,0xf
c002a23b:	76 10                	jbe    c002a24d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a23d:	83 ec 0c             	sub    esp,0xc
c002a240:	68 f7 36 03 c0       	push   0xc00336f7
c002a245:	e8 2c 60 ff ff       	call   c0020276 <KePanic(char const*)>
c002a24a:	83 c4 10             	add    esp,0x10
c002a24d:	8d 04 36             	lea    eax,[esi+esi*1]
c002a250:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a255:	83 c8 f0             	or     eax,0xfffffff0
c002a258:	ee                   	out    dx,al
c002a259:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a25e:	89 e8                	mov    eax,ebp
c002a260:	ee                   	out    dx,al
c002a261:	83 c4 0c             	add    esp,0xc
c002a264:	89 d8                	mov    eax,ebx
c002a266:	89 f9                	mov    ecx,edi
c002a268:	c1 e0 08             	shl    eax,0x8
c002a26b:	0f b6 d9             	movzx  ebx,cl
c002a26e:	83 e3 fc             	and    ebx,0xfffffffc
c002a271:	09 d8                	or     eax,ebx
c002a273:	5b                   	pop    ebx
c002a274:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a279:	5e                   	pop    esi
c002a27a:	5f                   	pop    edi
c002a27b:	5d                   	pop    ebp
c002a27c:	c3                   	ret    
c002a27d:	90                   	nop

c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a27e:	57                   	push   edi
c002a27f:	56                   	push   esi
c002a280:	53                   	push   ebx
c002a281:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a289:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a28f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a297:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a29b:	83 ff 01             	cmp    edi,0x1
c002a29e:	75 3f                	jne    c002a2df <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a2a0:	89 de                	mov    esi,ebx
c002a2a2:	0f b6 c0             	movzx  eax,al
c002a2a5:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a2ab:	c1 e0 10             	shl    eax,0x10
c002a2ae:	0f b6 c9             	movzx  ecx,cl
c002a2b1:	09 f0                	or     eax,esi
c002a2b3:	c1 e1 08             	shl    ecx,0x8
c002a2b6:	0f b6 d2             	movzx  edx,dl
c002a2b9:	09 c8                	or     eax,ecx
c002a2bb:	c1 e2 0b             	shl    edx,0xb
c002a2be:	09 d0                	or     eax,edx
c002a2c0:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a2c5:	0d 00 00 00 80       	or     eax,0x80000000
c002a2ca:	ef                   	out    dx,eax
c002a2cb:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a2d0:	ed                   	in     eax,dx
c002a2d1:	83 e3 02             	and    ebx,0x2
c002a2d4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a2db:	d3 e8                	shr    eax,cl
c002a2dd:	eb 44                	jmp    c002a323 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a2df:	83 ff 02             	cmp    edi,0x2
c002a2e2:	75 2d                	jne    c002a311 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a2e4:	83 ec 0c             	sub    esp,0xc
c002a2e7:	0f b6 c9             	movzx  ecx,cl
c002a2ea:	0f b6 d2             	movzx  edx,dl
c002a2ed:	0f b6 fb             	movzx  edi,bl
c002a2f0:	0f b6 c0             	movzx  eax,al
c002a2f3:	57                   	push   edi
c002a2f4:	51                   	push   ecx
c002a2f5:	52                   	push   edx
c002a2f6:	50                   	push   eax
c002a2f7:	56                   	push   esi
c002a2f8:	e8 0b ff ff ff       	call   c002a208 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2fd:	89 c2                	mov    edx,eax
c002a2ff:	ed                   	in     eax,dx
c002a300:	83 e3 02             	and    ebx,0x2
c002a303:	83 c4 20             	add    esp,0x20
c002a306:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a30d:	d3 e8                	shr    eax,cl
c002a30f:	eb 12                	jmp    c002a323 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a311:	83 ec 0c             	sub    esp,0xc
c002a314:	68 27 37 03 c0       	push   0xc0033727
c002a319:	e8 58 5f ff ff       	call   c0020276 <KePanic(char const*)>
c002a31e:	83 c4 10             	add    esp,0x10
c002a321:	31 c0                	xor    eax,eax
c002a323:	5b                   	pop    ebx
c002a324:	5e                   	pop    esi
c002a325:	5f                   	pop    edi
c002a326:	c3                   	ret    
c002a327:	90                   	nop

c002a328 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a328:	83 ec 18             	sub    esp,0x18
c002a32b:	6a 00                	push   0x0
c002a32d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a332:	50                   	push   eax
c002a333:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a338:	50                   	push   eax
c002a339:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a33e:	50                   	push   eax
c002a33f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a343:	e8 36 ff ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a348:	83 c4 2c             	add    esp,0x2c
c002a34b:	c3                   	ret    

c002a34c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a34c:	83 ec 18             	sub    esp,0x18
c002a34f:	6a 0e                	push   0xe
c002a351:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a356:	50                   	push   eax
c002a357:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a35c:	50                   	push   eax
c002a35d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a362:	50                   	push   eax
c002a363:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a367:	e8 12 ff ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a36c:	83 c4 2c             	add    esp,0x2c
c002a36f:	0f b6 c0             	movzx  eax,al
c002a372:	c3                   	ret    
c002a373:	90                   	nop

c002a374 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a374:	55                   	push   ebp
c002a375:	57                   	push   edi
c002a376:	56                   	push   esi
c002a377:	53                   	push   ebx
c002a378:	83 ec 18             	sub    esp,0x18
c002a37b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a380:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a385:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a38a:	6a 0a                	push   0xa
c002a38c:	56                   	push   esi
c002a38d:	55                   	push   ebp
c002a38e:	57                   	push   edi
c002a38f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a393:	e8 e6 fe ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a398:	83 c4 14             	add    esp,0x14
c002a39b:	89 c3                	mov    ebx,eax
c002a39d:	6a 0a                	push   0xa
c002a39f:	0f b6 db             	movzx  ebx,bl
c002a3a2:	56                   	push   esi
c002a3a3:	55                   	push   ebp
c002a3a4:	57                   	push   edi
c002a3a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a3a9:	e8 d0 fe ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3ae:	83 c4 2c             	add    esp,0x2c
c002a3b1:	25 00 ff 00 00       	and    eax,0xff00
c002a3b6:	09 d8                	or     eax,ebx
c002a3b8:	5b                   	pop    ebx
c002a3b9:	5e                   	pop    esi
c002a3ba:	5f                   	pop    edi
c002a3bb:	5d                   	pop    ebp
c002a3bc:	c3                   	ret    
c002a3bd:	90                   	nop

c002a3be <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a3be:	83 ec 18             	sub    esp,0x18
c002a3c1:	6a 08                	push   0x8
c002a3c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3c8:	50                   	push   eax
c002a3c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3ce:	50                   	push   eax
c002a3cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3d4:	50                   	push   eax
c002a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3d9:	e8 a0 fe ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3de:	83 c4 2c             	add    esp,0x2c
c002a3e1:	0f b6 c4             	movzx  eax,ah
c002a3e4:	c3                   	ret    
c002a3e5:	90                   	nop

c002a3e6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a3e6:	83 ec 18             	sub    esp,0x18
c002a3e9:	6a 08                	push   0x8
c002a3eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3f0:	50                   	push   eax
c002a3f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3f6:	50                   	push   eax
c002a3f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3fc:	50                   	push   eax
c002a3fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a401:	e8 78 fe ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a406:	83 c4 2c             	add    esp,0x2c
c002a409:	c3                   	ret    

c002a40a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a40a:	83 ec 18             	sub    esp,0x18
c002a40d:	6a 3c                	push   0x3c
c002a40f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a414:	50                   	push   eax
c002a415:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a41a:	50                   	push   eax
c002a41b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a420:	50                   	push   eax
c002a421:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a425:	e8 54 fe ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a42a:	83 c4 2c             	add    esp,0x2c
c002a42d:	c3                   	ret    

c002a42e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a42e:	83 ec 18             	sub    esp,0x18
c002a431:	6a 18                	push   0x18
c002a433:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a438:	50                   	push   eax
c002a439:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a43e:	50                   	push   eax
c002a43f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a444:	50                   	push   eax
c002a445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a449:	e8 30 fe ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a44e:	83 c4 2c             	add    esp,0x2c
c002a451:	0f b6 c4             	movzx  eax,ah
c002a454:	c3                   	ret    
c002a455:	90                   	nop

c002a456 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a456:	55                   	push   ebp
c002a457:	57                   	push   edi
c002a458:	56                   	push   esi
c002a459:	53                   	push   ebx
c002a45a:	83 ec 28             	sub    esp,0x28
c002a45d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a461:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a466:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a46b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a470:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a477:	8d 43 12             	lea    eax,[ebx+0x12]
c002a47a:	83 c3 10             	add    ebx,0x10
c002a47d:	0f b6 c0             	movzx  eax,al
c002a480:	0f b6 db             	movzx  ebx,bl
c002a483:	50                   	push   eax
c002a484:	51                   	push   ecx
c002a485:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a489:	57                   	push   edi
c002a48a:	55                   	push   ebp
c002a48b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a48f:	e8 ea fd ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a494:	83 c4 14             	add    esp,0x14
c002a497:	89 c6                	mov    esi,eax
c002a499:	53                   	push   ebx
c002a49a:	c1 e6 10             	shl    esi,0x10
c002a49d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a4a1:	51                   	push   ecx
c002a4a2:	57                   	push   edi
c002a4a3:	55                   	push   ebp
c002a4a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a4a8:	e8 d1 fd ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a4ad:	83 c4 3c             	add    esp,0x3c
c002a4b0:	0f b7 c0             	movzx  eax,ax
c002a4b3:	5b                   	pop    ebx
c002a4b4:	09 f0                	or     eax,esi
c002a4b6:	5e                   	pop    esi
c002a4b7:	5f                   	pop    edi
c002a4b8:	5d                   	pop    ebp
c002a4b9:	c3                   	ret    

c002a4ba <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a4ba:	55                   	push   ebp
c002a4bb:	57                   	push   edi
c002a4bc:	56                   	push   esi
c002a4bd:	53                   	push   ebx
c002a4be:	83 ec 0c             	sub    esp,0xc
c002a4c1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002a4c5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a4c9:	89 f5                	mov    ebp,esi
c002a4cb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002a4d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a4d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a4d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a4dd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a4e1:	83 f9 01             	cmp    ecx,0x1
c002a4e4:	75 5d                	jne    c002a543 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002a4e6:	0f b6 c8             	movzx  ecx,al
c002a4e9:	0f b6 d2             	movzx  edx,dl
c002a4ec:	c1 e1 10             	shl    ecx,0x10
c002a4ef:	c1 e2 0b             	shl    edx,0xb
c002a4f2:	89 f0                	mov    eax,esi
c002a4f4:	25 fc 00 00 00       	and    eax,0xfc
c002a4f9:	09 c1                	or     ecx,eax
c002a4fb:	89 e8                	mov    eax,ebp
c002a4fd:	0f b6 c0             	movzx  eax,al
c002a500:	c1 e0 08             	shl    eax,0x8
c002a503:	09 c1                	or     ecx,eax
c002a505:	09 d1                	or     ecx,edx
c002a507:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a50c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a512:	89 c8                	mov    eax,ecx
c002a514:	ef                   	out    dx,eax
c002a515:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a51a:	ed                   	in     eax,dx
c002a51b:	0f b7 db             	movzx  ebx,bx
c002a51e:	83 e6 02             	and    esi,0x2
c002a521:	74 0a                	je     c002a52d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002a523:	0f b7 d0             	movzx  edx,ax
c002a526:	c1 e3 10             	shl    ebx,0x10
c002a529:	09 d3                	or     ebx,edx
c002a52b:	eb 05                	jmp    c002a532 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002a52d:	66 31 c0             	xor    ax,ax
c002a530:	09 c3                	or     ebx,eax
c002a532:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a537:	89 c8                	mov    eax,ecx
c002a539:	ef                   	out    dx,eax
c002a53a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a53f:	89 d8                	mov    eax,ebx
c002a541:	eb 41                	jmp    c002a584 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a543:	83 f9 02             	cmp    ecx,0x2
c002a546:	75 45                	jne    c002a58d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002a548:	83 ec 0c             	sub    esp,0xc
c002a54b:	0f b6 d2             	movzx  edx,dl
c002a54e:	89 f1                	mov    ecx,esi
c002a550:	0f b6 c0             	movzx  eax,al
c002a553:	0f b6 f1             	movzx  esi,cl
c002a556:	89 e9                	mov    ecx,ebp
c002a558:	56                   	push   esi
c002a559:	0f b6 c9             	movzx  ecx,cl
c002a55c:	51                   	push   ecx
c002a55d:	52                   	push   edx
c002a55e:	50                   	push   eax
c002a55f:	57                   	push   edi
c002a560:	e8 a3 fc ff ff       	call   c002a208 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a565:	89 c2                	mov    edx,eax
c002a567:	ed                   	in     eax,dx
c002a568:	83 c4 20             	add    esp,0x20
c002a56b:	0f b7 db             	movzx  ebx,bx
c002a56e:	f6 c2 02             	test   dl,0x2
c002a571:	74 0c                	je     c002a57f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002a573:	0f b7 c8             	movzx  ecx,ax
c002a576:	89 d8                	mov    eax,ebx
c002a578:	c1 e0 10             	shl    eax,0x10
c002a57b:	09 c8                	or     eax,ecx
c002a57d:	eb 05                	jmp    c002a584 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a57f:	66 31 c0             	xor    ax,ax
c002a582:	09 d8                	or     eax,ebx
c002a584:	ef                   	out    dx,eax
c002a585:	83 c4 0c             	add    esp,0xc
c002a588:	5b                   	pop    ebx
c002a589:	5e                   	pop    esi
c002a58a:	5f                   	pop    edi
c002a58b:	5d                   	pop    ebp
c002a58c:	c3                   	ret    
c002a58d:	c7 44 24 20 27 37 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033727
c002a595:	83 c4 0c             	add    esp,0xc
c002a598:	5b                   	pop    ebx
c002a599:	5e                   	pop    esi
c002a59a:	5f                   	pop    edi
c002a59b:	5d                   	pop    ebp
c002a59c:	e9 d5 5c ff ff       	jmp    c0020276 <KePanic(char const*)>
c002a5a1:	90                   	nop

c002a5a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a5a2:	55                   	push   ebp
c002a5a3:	57                   	push   edi
c002a5a4:	56                   	push   esi
c002a5a5:	53                   	push   ebx
c002a5a6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a5ac:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002a5b3:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a5ba:	0f 85 bd 00 00 00    	jne    c002a67d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a5c0:	83 ec 0c             	sub    esp,0xc
c002a5c3:	68 14 01 00 00       	push   0x114
c002a5c8:	e8 f1 bd fe ff       	call   c00163be <malloc>
c002a5cd:	83 c4 0c             	add    esp,0xc
c002a5d0:	89 c3                	mov    ebx,eax
c002a5d2:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a5d8:	68 2d 37 03 c0       	push   0xc003372d
c002a5dd:	50                   	push   eax
c002a5de:	e8 81 fe fe ff       	call   c001a464 <File::File(char const*, Process*)>
c002a5e3:	83 c4 10             	add    esp,0x10
c002a5e6:	85 db                	test   ebx,ebx
c002a5e8:	0f 84 67 02 00 00    	je     c002a855 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a5ee:	56                   	push   esi
c002a5ef:	56                   	push   esi
c002a5f0:	6a 01                	push   0x1
c002a5f2:	53                   	push   ebx
c002a5f3:	e8 8a fe fe ff       	call   c001a482 <File::open(FileOpenMode)>
c002a5f8:	83 c4 10             	add    esp,0x10
c002a5fb:	85 c0                	test   eax,eax
c002a5fd:	0f 85 52 02 00 00    	jne    c002a855 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a603:	52                   	push   edx
c002a604:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a608:	50                   	push   eax
c002a609:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a60d:	50                   	push   eax
c002a60e:	53                   	push   ebx
c002a60f:	e8 70 01 ff ff       	call   c001a784 <File::stat(unsigned long long*, bool*)>
c002a614:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a618:	40                   	inc    eax
c002a619:	89 04 24             	mov    DWORD PTR [esp],eax
c002a61c:	e8 9d bd fe ff       	call   c00163be <malloc>
c002a621:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a625:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a62a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a62e:	59                   	pop    ecx
c002a62f:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a631:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a635:	51                   	push   ecx
c002a636:	50                   	push   eax
c002a637:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a63b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a63f:	53                   	push   ebx
c002a640:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a643:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a647:	83 c4 20             	add    esp,0x20
c002a64a:	89 c8                	mov    eax,ecx
c002a64c:	99                   	cdq    
c002a64d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a651:	0f 85 fe 01 00 00    	jne    c002a855 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a657:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a65b:	0f 85 f4 01 00 00    	jne    c002a855 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a661:	83 ec 0c             	sub    esp,0xc
c002a664:	53                   	push   ebx
c002a665:	e8 76 fe fe ff       	call   c001a4e0 <File::close()>
c002a66a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a66e:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a675:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a67a:	83 c4 10             	add    esp,0x10
c002a67d:	a1 a4 0b 04 c0       	mov    eax,ds:0xc0040ba4
c002a682:	8b 1d a8 0b 04 c0    	mov    ebx,DWORD PTR ds:0xc0040ba8
c002a688:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a68c:	31 f6                	xor    esi,esi
c002a68e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a696:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a69d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a6a2:	31 c9                	xor    ecx,ecx
c002a6a4:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a6ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a6b1:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a6b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a6bd:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a6c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a6c9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a6cd:	0f 8e 82 01 00 00    	jle    c002a855 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a6d3:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002a6d6:	d4 40                	aam    0x40
c002a6d8:	d5 39                	aad    0x39
c002a6da:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a6de:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002a6e2:	d4 40                	aam    0x40
c002a6e4:	d5 39                	aad    0x39
c002a6e6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a6ea:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002a6ee:	d4 40                	aam    0x40
c002a6f0:	d5 39                	aad    0x39
c002a6f2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a6f6:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002a6fa:	d4 40                	aam    0x40
c002a6fc:	d5 39                	aad    0x39
c002a6fe:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a702:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002a706:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a70a:	3c 56                	cmp    al,0x56
c002a70c:	74 43                	je     c002a751 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002a70e:	d4 40                	aam    0x40
c002a710:	d5 39                	aad    0x39
c002a712:	8d 48 d0             	lea    ecx,[eax-0x30]
c002a715:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002a719:	0f b6 c9             	movzx  ecx,cl
c002a71c:	c1 e1 04             	shl    ecx,0x4
c002a71f:	d4 40                	aam    0x40
c002a721:	d5 39                	aad    0x39
c002a723:	83 e8 30             	sub    eax,0x30
c002a726:	0f b6 c0             	movzx  eax,al
c002a729:	09 c1                	or     ecx,eax
c002a72b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002a72f:	c1 e1 04             	shl    ecx,0x4
c002a732:	d4 40                	aam    0x40
c002a734:	d5 39                	aad    0x39
c002a736:	83 e8 30             	sub    eax,0x30
c002a739:	0f b6 c0             	movzx  eax,al
c002a73c:	09 c1                	or     ecx,eax
c002a73e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002a742:	c1 e1 04             	shl    ecx,0x4
c002a745:	d4 40                	aam    0x40
c002a747:	d5 39                	aad    0x39
c002a749:	83 e8 30             	sub    eax,0x30
c002a74c:	0f b6 c0             	movzx  eax,al
c002a74f:	09 c1                	or     ecx,eax
c002a751:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002a755:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002a759:	3c 58                	cmp    al,0x58
c002a75b:	74 47                	je     c002a7a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002a75d:	d4 40                	aam    0x40
c002a75f:	d5 39                	aad    0x39
c002a761:	8d 50 d0             	lea    edx,[eax-0x30]
c002a764:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002a768:	0f b6 d2             	movzx  edx,dl
c002a76b:	c1 e2 04             	shl    edx,0x4
c002a76e:	d4 40                	aam    0x40
c002a770:	d5 39                	aad    0x39
c002a772:	83 e8 30             	sub    eax,0x30
c002a775:	0f b6 c0             	movzx  eax,al
c002a778:	09 c2                	or     edx,eax
c002a77a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002a77e:	c1 e2 04             	shl    edx,0x4
c002a781:	d4 40                	aam    0x40
c002a783:	d5 39                	aad    0x39
c002a785:	83 e8 30             	sub    eax,0x30
c002a788:	0f b6 c0             	movzx  eax,al
c002a78b:	09 c2                	or     edx,eax
c002a78d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002a791:	c1 e2 04             	shl    edx,0x4
c002a794:	d4 40                	aam    0x40
c002a796:	d5 39                	aad    0x39
c002a798:	83 e8 30             	sub    eax,0x30
c002a79b:	0f b6 c0             	movzx  eax,al
c002a79e:	09 c2                	or     edx,eax
c002a7a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002a7a4:	83 c6 10             	add    esi,0x10
c002a7a7:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a7ab:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002a7af:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002a7b3:	83 fa 0a             	cmp    edx,0xa
c002a7b6:	74 0b                	je     c002a7c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002a7b8:	47                   	inc    edi
c002a7b9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a7bd:	75 19                	jne    c002a7d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002a7bf:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002a7c3:	31 c0                	xor    eax,eax
c002a7c5:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002a7ca:	0f 94 c0             	sete   al
c002a7cd:	01 c6                	add    esi,eax
c002a7cf:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a7d4:	75 0b                	jne    c002a7e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002a7d6:	eb 14                	jmp    c002a7ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002a7d8:	46                   	inc    esi
c002a7d9:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002a7dc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a7df:	eb ca                	jmp    c002a7ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002a7e1:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002a7e6:	0f 85 dd fe ff ff    	jne    c002a6c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a7ec:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002a7f1:	74 10                	je     c002a803 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002a7f3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a7f8:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a7fd:	0f 85 c6 fe ff ff    	jne    c002a6c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a807:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a80b:	83 e8 30             	sub    eax,0x30
c002a80e:	83 ef 30             	sub    edi,0x30
c002a811:	c1 e0 04             	shl    eax,0x4
c002a814:	09 f8                	or     eax,edi
c002a816:	0f b6 c0             	movzx  eax,al
c002a819:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a81d:	0f 85 a6 fe ff ff    	jne    c002a6c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a827:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a82b:	83 e8 30             	sub    eax,0x30
c002a82e:	83 ef 30             	sub    edi,0x30
c002a831:	c1 e0 04             	shl    eax,0x4
c002a834:	09 f8                	or     eax,edi
c002a836:	0f b6 c0             	movzx  eax,al
c002a839:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a83d:	0f 85 86 fe ff ff    	jne    c002a6c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a843:	50                   	push   eax
c002a844:	50                   	push   eax
c002a845:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a849:	50                   	push   eax
c002a84a:	55                   	push   ebp
c002a84b:	e8 f0 5d fd ff       	call   c0000640 <strcpy>
c002a850:	83 c4 10             	add    esp,0x10
c002a853:	eb 06                	jmp    c002a85b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002a855:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002a859:	31 ed                	xor    ebp,ebp
c002a85b:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a861:	89 e8                	mov    eax,ebp
c002a863:	5b                   	pop    ebx
c002a864:	5e                   	pop    esi
c002a865:	5f                   	pop    edi
c002a866:	5d                   	pop    ebp
c002a867:	c3                   	ret    

c002a868 <PCI::checkBus(unsigned char)>:
c002a868:	56                   	push   esi
c002a869:	53                   	push   ebx
c002a86a:	31 db                	xor    ebx,ebx
c002a86c:	51                   	push   ecx
c002a86d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a872:	52                   	push   edx
c002a873:	53                   	push   ebx
c002a874:	43                   	inc    ebx
c002a875:	56                   	push   esi
c002a876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a87a:	e8 03 03 00 00       	call   c002ab82 <PCI::checkDevice(unsigned char, unsigned char)>
c002a87f:	83 c4 10             	add    esp,0x10
c002a882:	83 fb 20             	cmp    ebx,0x20
c002a885:	75 eb                	jne    c002a872 <PCI::checkBus(unsigned char)+0xa>
c002a887:	58                   	pop    eax
c002a888:	5b                   	pop    ebx
c002a889:	5e                   	pop    esi
c002a88a:	c3                   	ret    
c002a88b:	90                   	nop

c002a88c <PCI::foundDevice(PCIDeviceInfo)>:
c002a88c:	55                   	push   ebp
c002a88d:	57                   	push   edi
c002a88e:	56                   	push   esi
c002a88f:	53                   	push   ebx
c002a890:	83 ec 1c             	sub    esp,0x1c
c002a893:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a898:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a89c:	3d ff ff 00 00       	cmp    eax,0xffff
c002a8a1:	0f 84 57 01 00 00    	je     c002a9fe <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a8a7:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a8ac:	66 3d 06 04          	cmp    ax,0x406
c002a8b0:	75 2c                	jne    c002a8de <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a8b2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a8b7:	50                   	push   eax
c002a8b8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a8bd:	50                   	push   eax
c002a8be:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a8c3:	50                   	push   eax
c002a8c4:	53                   	push   ebx
c002a8c5:	e8 64 fb ff ff       	call   c002a42e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a8ca:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a8ce:	0f b6 c0             	movzx  eax,al
c002a8d1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a8d5:	83 c4 2c             	add    esp,0x2c
c002a8d8:	5b                   	pop    ebx
c002a8d9:	5e                   	pop    esi
c002a8da:	5f                   	pop    edi
c002a8db:	5d                   	pop    ebp
c002a8dc:	eb 8a                	jmp    c002a868 <PCI::checkBus(unsigned char)>
c002a8de:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a8e2:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a8e8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002a8ec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002a8f0:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c002a8f5:	85 d2                	test   edx,edx
c002a8f7:	74 36                	je     c002a92f <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c002a8f9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a8fc:	85 c9                	test   ecx,ecx
c002a8fe:	74 2b                	je     c002a92b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a900:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c002a906:	31 ee                	xor    esi,ebp
c002a908:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c002a90e:	75 1b                	jne    c002a92b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a910:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c002a914:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c002a91a:	75 0f                	jne    c002a92b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a91c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a923:	39 f9                	cmp    ecx,edi
c002a925:	0f 84 d3 00 00 00    	je     c002a9fe <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a92b:	8b 12                	mov    edx,DWORD PTR [edx]
c002a92d:	eb c6                	jmp    c002a8f5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a92f:	3d 01 06 00 00       	cmp    eax,0x601
c002a934:	75 19                	jne    c002a94f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c002a936:	83 ec 0c             	sub    esp,0xc
c002a939:	68 64 01 00 00       	push   0x164
c002a93e:	e8 7b ba fe ff       	call   c00163be <malloc>
c002a943:	89 c5                	mov    ebp,eax
c002a945:	89 04 24             	mov    DWORD PTR [esp],eax
c002a948:	e8 a1 0e 00 00       	call   c002b7ee <SATABus::SATABus()>
c002a94d:	eb 1e                	jmp    c002a96d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c002a94f:	3d 01 01 00 00       	cmp    eax,0x101
c002a954:	75 62                	jne    c002a9b8 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c002a956:	83 ec 0c             	sub    esp,0xc
c002a959:	68 70 02 00 00       	push   0x270
c002a95e:	e8 5b ba fe ff       	call   c00163be <malloc>
c002a963:	89 c5                	mov    ebp,eax
c002a965:	89 04 24             	mov    DWORD PTR [esp],eax
c002a968:	e8 e5 02 00 00       	call   c002ac52 <IDE::IDE()>
c002a96d:	5f                   	pop    edi
c002a96e:	58                   	pop    eax
c002a96f:	55                   	push   ebp
c002a970:	53                   	push   ebx
c002a971:	e8 68 09 ff ff       	call   c001b2de <Device::addChild(Device*)>
c002a976:	83 ec 1c             	sub    esp,0x1c
c002a979:	b9 09 00 00 00       	mov    ecx,0x9
c002a97e:	fc                   	cld    
c002a97f:	89 e7                	mov    edi,esp
c002a981:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a985:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a987:	55                   	push   ebp
c002a988:	e8 97 08 ff ff       	call   c001b224 <Device::preOpenPCI(PCIDeviceInfo)>
c002a98d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a990:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a994:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a99c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a9a4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a9ac:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a9af:	83 c4 4c             	add    esp,0x4c
c002a9b2:	5b                   	pop    ebx
c002a9b3:	5e                   	pop    esi
c002a9b4:	5f                   	pop    edi
c002a9b5:	5d                   	pop    ebp
c002a9b6:	ff e0                	jmp    eax
c002a9b8:	83 ec 0c             	sub    esp,0xc
c002a9bb:	68 58 01 00 00       	push   0x158
c002a9c0:	e8 f9 b9 fe ff       	call   c00163be <malloc>
c002a9c5:	89 c5                	mov    ebp,eax
c002a9c7:	58                   	pop    eax
c002a9c8:	5a                   	pop    edx
c002a9c9:	68 46 37 03 c0       	push   0xc0033746
c002a9ce:	55                   	push   ebp
c002a9cf:	e8 be 0b ff ff       	call   c001b592 <DriverlessDevice::DriverlessDevice(char const*)>
c002a9d4:	59                   	pop    ecx
c002a9d5:	5e                   	pop    esi
c002a9d6:	55                   	push   ebp
c002a9d7:	53                   	push   ebx
c002a9d8:	e8 01 09 ff ff       	call   c001b2de <Device::addChild(Device*)>
c002a9dd:	83 c4 10             	add    esp,0x10
c002a9e0:	b9 09 00 00 00       	mov    ecx,0x9
c002a9e5:	fc                   	cld    
c002a9e6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002a9ea:	89 fe                	mov    esi,edi
c002a9ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a9ee:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c002a9f2:	83 c4 1c             	add    esp,0x1c
c002a9f5:	5b                   	pop    ebx
c002a9f6:	5e                   	pop    esi
c002a9f7:	5f                   	pop    edi
c002a9f8:	5d                   	pop    ebp
c002a9f9:	e9 26 08 ff ff       	jmp    c001b224 <Device::preOpenPCI(PCIDeviceInfo)>
c002a9fe:	83 c4 1c             	add    esp,0x1c
c002aa01:	5b                   	pop    ebx
c002aa02:	5e                   	pop    esi
c002aa03:	5f                   	pop    edi
c002aa04:	5d                   	pop    ebp
c002aa05:	c3                   	ret    

c002aa06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002aa06:	55                   	push   ebp
c002aa07:	57                   	push   edi
c002aa08:	56                   	push   esi
c002aa09:	53                   	push   ebx
c002aa0a:	83 ec 68             	sub    esp,0x68
c002aa0d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002aa11:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002aa18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002aa1c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002aa23:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002aa28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002aa2c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002aa33:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002aa38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002aa3c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002aa41:	6a 0c                	push   0xc
c002aa43:	57                   	push   edi
c002aa44:	53                   	push   ebx
c002aa45:	56                   	push   esi
c002aa46:	55                   	push   ebp
c002aa47:	e8 32 f8 ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa4c:	83 c4 20             	add    esp,0x20
c002aa4f:	57                   	push   edi
c002aa50:	53                   	push   ebx
c002aa51:	56                   	push   esi
c002aa52:	55                   	push   ebp
c002aa53:	e8 1c f9 ff ff       	call   c002a374 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002aa58:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002aa5d:	57                   	push   edi
c002aa5e:	53                   	push   ebx
c002aa5f:	56                   	push   esi
c002aa60:	55                   	push   ebp
c002aa61:	e8 a4 f9 ff ff       	call   c002a40a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002aa66:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002aa6a:	83 c4 14             	add    esp,0x14
c002aa6d:	6a 3c                	push   0x3c
c002aa6f:	57                   	push   edi
c002aa70:	53                   	push   ebx
c002aa71:	56                   	push   esi
c002aa72:	55                   	push   ebp
c002aa73:	e8 06 f8 ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa78:	0f b6 c4             	movzx  eax,ah
c002aa7b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002aa7f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002aa83:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002aa87:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002aa8c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002aa92:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002aa98:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002aa9c:	83 c4 20             	add    esp,0x20
c002aa9f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002aaa4:	74 30                	je     c002aad6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002aaa6:	31 c0                	xor    eax,eax
c002aaa8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002aaac:	7e 28                	jle    c002aad6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002aaae:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002aab6:	39 cb                	cmp    ebx,ecx
c002aab8:	75 19                	jne    c002aad3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aaba:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002aac2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002aac6:	75 0b                	jne    c002aad3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aac8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002aacf:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002aad3:	40                   	inc    eax
c002aad4:	eb d2                	jmp    c002aaa8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002aad6:	31 d2                	xor    edx,edx
c002aad8:	83 ec 0c             	sub    esp,0xc
c002aadb:	57                   	push   edi
c002aadc:	53                   	push   ebx
c002aadd:	56                   	push   esi
c002aade:	52                   	push   edx
c002aadf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002aae3:	55                   	push   ebp
c002aae4:	e8 6d f9 ff ff       	call   c002a456 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aae9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002aaed:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002aaf1:	42                   	inc    edx
c002aaf2:	83 c4 20             	add    esp,0x20
c002aaf5:	83 fa 06             	cmp    edx,0x6
c002aaf8:	75 de                	jne    c002aad8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002aafa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002aafe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ab02:	c1 e2 08             	shl    edx,0x8
c002ab05:	83 ec 0c             	sub    esp,0xc
c002ab08:	0f b6 c4             	movzx  eax,ah
c002ab0b:	09 d0                	or     eax,edx
c002ab0d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002ab12:	6a 02                	push   0x2
c002ab14:	57                   	push   edi
c002ab15:	53                   	push   ebx
c002ab16:	56                   	push   esi
c002ab17:	55                   	push   ebp
c002ab18:	e8 61 f7 ff ff       	call   c002a27e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ab1d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002ab22:	83 c4 20             	add    esp,0x20
c002ab25:	57                   	push   edi
c002ab26:	53                   	push   ebx
c002ab27:	56                   	push   esi
c002ab28:	55                   	push   ebp
c002ab29:	e8 90 f8 ff ff       	call   c002a3be <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002ab2e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002ab32:	57                   	push   edi
c002ab33:	53                   	push   ebx
c002ab34:	56                   	push   esi
c002ab35:	55                   	push   ebp
c002ab36:	e8 ed f7 ff ff       	call   c002a328 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab3b:	b9 09 00 00 00       	mov    ecx,0x9
c002ab40:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002ab45:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002ab49:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002ab4d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002ab51:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002ab55:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002ab59:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002ab5d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002ab61:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002ab65:	83 ec 0c             	sub    esp,0xc
c002ab68:	fc                   	cld    
c002ab69:	89 e7                	mov    edi,esp
c002ab6b:	8d 74 24 58          	lea    esi,[esp+0x58]
c002ab6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ab71:	55                   	push   ebp
c002ab72:	e8 15 fd ff ff       	call   c002a88c <PCI::foundDevice(PCIDeviceInfo)>
c002ab77:	81 c4 8c 00 00 00    	add    esp,0x8c
c002ab7d:	5b                   	pop    ebx
c002ab7e:	5e                   	pop    esi
c002ab7f:	5f                   	pop    edi
c002ab80:	5d                   	pop    ebp
c002ab81:	c3                   	ret    

c002ab82 <PCI::checkDevice(unsigned char, unsigned char)>:
c002ab82:	55                   	push   ebp
c002ab83:	57                   	push   edi
c002ab84:	56                   	push   esi
c002ab85:	53                   	push   ebx
c002ab86:	83 ec 0c             	sub    esp,0xc
c002ab89:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002ab8d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002ab92:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002ab97:	6a 00                	push   0x0
c002ab99:	56                   	push   esi
c002ab9a:	57                   	push   edi
c002ab9b:	55                   	push   ebp
c002ab9c:	e8 87 f7 ff ff       	call   c002a328 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aba1:	6a 00                	push   0x0
c002aba3:	56                   	push   esi
c002aba4:	57                   	push   edi
c002aba5:	55                   	push   ebp
c002aba6:	e8 5b fe ff ff       	call   c002aa06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002abab:	83 c4 20             	add    esp,0x20
c002abae:	6a 00                	push   0x0
c002abb0:	56                   	push   esi
c002abb1:	57                   	push   edi
c002abb2:	55                   	push   ebp
c002abb3:	e8 94 f7 ff ff       	call   c002a34c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002abb8:	83 c4 10             	add    esp,0x10
c002abbb:	a8 80                	test   al,0x80
c002abbd:	74 2d                	je     c002abec <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002abbf:	bb 01 00 00 00       	mov    ebx,0x1
c002abc4:	53                   	push   ebx
c002abc5:	56                   	push   esi
c002abc6:	57                   	push   edi
c002abc7:	55                   	push   ebp
c002abc8:	e8 5b f7 ff ff       	call   c002a328 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002abcd:	83 c4 10             	add    esp,0x10
c002abd0:	0f b7 c0             	movzx  eax,ax
c002abd3:	3d ff ff 00 00       	cmp    eax,0xffff
c002abd8:	74 0c                	je     c002abe6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002abda:	53                   	push   ebx
c002abdb:	56                   	push   esi
c002abdc:	57                   	push   edi
c002abdd:	55                   	push   ebp
c002abde:	e8 23 fe ff ff       	call   c002aa06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002abe3:	83 c4 10             	add    esp,0x10
c002abe6:	43                   	inc    ebx
c002abe7:	83 fb 08             	cmp    ebx,0x8
c002abea:	75 d8                	jne    c002abc4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002abec:	83 c4 0c             	add    esp,0xc
c002abef:	5b                   	pop    ebx
c002abf0:	5e                   	pop    esi
c002abf1:	5f                   	pop    edi
c002abf2:	5d                   	pop    ebp
c002abf3:	c3                   	ret    

c002abf4 <PCI::detect()>:
c002abf4:	56                   	push   esi
c002abf5:	53                   	push   ebx
c002abf6:	53                   	push   ebx
c002abf7:	31 db                	xor    ebx,ebx
c002abf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002abfd:	6a 00                	push   0x0
c002abff:	6a 00                	push   0x0
c002ac01:	6a 00                	push   0x0
c002ac03:	56                   	push   esi
c002ac04:	e8 43 f7 ff ff       	call   c002a34c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ac09:	83 c4 10             	add    esp,0x10
c002ac0c:	a8 80                	test   al,0x80
c002ac0e:	75 21                	jne    c002ac31 <PCI::detect()+0x3d>
c002ac10:	51                   	push   ecx
c002ac11:	51                   	push   ecx
c002ac12:	6a 00                	push   0x0
c002ac14:	56                   	push   esi
c002ac15:	e8 4e fc ff ff       	call   c002a868 <PCI::checkBus(unsigned char)>
c002ac1a:	83 c4 10             	add    esp,0x10
c002ac1d:	eb 2a                	jmp    c002ac49 <PCI::detect()+0x55>
c002ac1f:	52                   	push   edx
c002ac20:	52                   	push   edx
c002ac21:	53                   	push   ebx
c002ac22:	43                   	inc    ebx
c002ac23:	56                   	push   esi
c002ac24:	e8 3f fc ff ff       	call   c002a868 <PCI::checkBus(unsigned char)>
c002ac29:	83 c4 10             	add    esp,0x10
c002ac2c:	83 fb 08             	cmp    ebx,0x8
c002ac2f:	74 18                	je     c002ac49 <PCI::detect()+0x55>
c002ac31:	53                   	push   ebx
c002ac32:	6a 00                	push   0x0
c002ac34:	6a 00                	push   0x0
c002ac36:	56                   	push   esi
c002ac37:	e8 ec f6 ff ff       	call   c002a328 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ac3c:	83 c4 10             	add    esp,0x10
c002ac3f:	0f b7 c0             	movzx  eax,ax
c002ac42:	3d ff ff 00 00       	cmp    eax,0xffff
c002ac47:	74 d6                	je     c002ac1f <PCI::detect()+0x2b>
c002ac49:	58                   	pop    eax
c002ac4a:	5b                   	pop    ebx
c002ac4b:	5e                   	pop    esi
c002ac4c:	c3                   	ret    
c002ac4d:	90                   	nop

c002ac4e <IDE::close(int, int, void*)>:
c002ac4e:	83 c8 ff             	or     eax,0xffffffff
c002ac51:	c3                   	ret    

c002ac52 <IDE::IDE()>:
c002ac52:	83 ec 0c             	sub    esp,0xc
c002ac55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ac59:	83 ec 08             	sub    esp,0x8
c002ac5c:	68 8c 37 03 c0       	push   0xc003378c
c002ac61:	50                   	push   eax
c002ac62:	e8 d1 09 ff ff       	call   c001b638 <HardDiskController::HardDiskController(char const*)>
c002ac67:	83 c4 10             	add    esp,0x10
c002ac6a:	ba 1c 38 03 c0       	mov    edx,0xc003381c
c002ac6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ac73:	89 10                	mov    DWORD PTR [eax],edx
c002ac75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ac79:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002ac80:	90                   	nop
c002ac81:	83 c4 0c             	add    esp,0xc
c002ac84:	c3                   	ret    
c002ac85:	90                   	nop

c002ac86 <IDE::prepareInterrupt(unsigned char)>:
c002ac86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002ac8b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ac8f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002ac97:	c3                   	ret    

c002ac98 <selectDrive(unsigned char, unsigned char)>:
c002ac98:	c3                   	ret    
c002ac99:	90                   	nop

c002ac9a <IDE::getBase(unsigned char)>:
c002ac9a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002ac9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002aca3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002acab:	c3                   	ret    

c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002acac:	55                   	push   ebp
c002acad:	57                   	push   edi
c002acae:	56                   	push   esi
c002acaf:	53                   	push   ebx
c002acb0:	83 ec 1c             	sub    esp,0x1c
c002acb3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002acb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002acbb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002acbe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002acc2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002acc6:	80 f9 03             	cmp    cl,0x3
c002acc9:	77 4f                	ja     c002ad1a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002accb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002accf:	0f b6 fa             	movzx  edi,dl
c002acd2:	0f b6 db             	movzx  ebx,bl
c002acd5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002acd8:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002acdd:	80 ca 80             	or     dl,0x80
c002ace0:	52                   	push   edx
c002ace1:	6a 0c                	push   0xc
c002ace3:	57                   	push   edi
c002ace4:	56                   	push   esi
c002ace5:	e8 c2 ff ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002acea:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002acef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002acf3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002acf7:	ee                   	out    dx,al
c002acf8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002acfd:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002ad01:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002ad05:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002ad09:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002ad11:	83 c4 2c             	add    esp,0x2c
c002ad14:	5b                   	pop    ebx
c002ad15:	5e                   	pop    esi
c002ad16:	5f                   	pop    edi
c002ad17:	5d                   	pop    ebp
c002ad18:	eb 92                	jmp    c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad1a:	0f b6 cb             	movzx  ecx,bl
c002ad1d:	83 f9 07             	cmp    ecx,0x7
c002ad20:	77 12                	ja     c002ad34 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002ad22:	0f b6 d2             	movzx  edx,dl
c002ad25:	0f b6 db             	movzx  ebx,bl
c002ad28:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002ad30:	01 da                	add    edx,ebx
c002ad32:	eb 2f                	jmp    c002ad63 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ad34:	83 f9 0d             	cmp    ecx,0xd
c002ad37:	77 13                	ja     c002ad4c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002ad39:	0f b6 d2             	movzx  edx,dl
c002ad3c:	0f b6 db             	movzx  ebx,bl
c002ad3f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002ad46:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002ad4a:	eb 17                	jmp    c002ad63 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ad4c:	83 f9 15             	cmp    ecx,0x15
c002ad4f:	77 13                	ja     c002ad64 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002ad51:	0f b6 d2             	movzx  edx,dl
c002ad54:	0f b6 db             	movzx  ebx,bl
c002ad57:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002ad5f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002ad63:	ee                   	out    dx,al
c002ad64:	83 c4 1c             	add    esp,0x1c
c002ad67:	5b                   	pop    ebx
c002ad68:	5e                   	pop    esi
c002ad69:	5f                   	pop    edi
c002ad6a:	5d                   	pop    ebp
c002ad6b:	c3                   	ret    

c002ad6c <IDE::read(unsigned char, unsigned char)>:
c002ad6c:	55                   	push   ebp
c002ad6d:	57                   	push   edi
c002ad6e:	56                   	push   esi
c002ad6f:	53                   	push   ebx
c002ad70:	83 ec 1c             	sub    esp,0x1c
c002ad73:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ad77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ad7b:	8d 43 f8             	lea    eax,[ebx-0x8]
c002ad7e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002ad82:	3c 03                	cmp    al,0x3
c002ad84:	77 40                	ja     c002adc6 <IDE::read(unsigned char, unsigned char)+0x5a>
c002ad86:	0f b6 f9             	movzx  edi,cl
c002ad89:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002ad8c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002ad91:	0c 80                	or     al,0x80
c002ad93:	50                   	push   eax
c002ad94:	6a 0c                	push   0xc
c002ad96:	57                   	push   edi
c002ad97:	56                   	push   esi
c002ad98:	e8 0f ff ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad9d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002ada2:	0f b6 d3             	movzx  edx,bl
c002ada5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002ada9:	ec                   	in     al,dx
c002adaa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002adae:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002adb3:	52                   	push   edx
c002adb4:	6a 0c                	push   0xc
c002adb6:	57                   	push   edi
c002adb7:	56                   	push   esi
c002adb8:	e8 ef fe ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002adbd:	83 c4 20             	add    esp,0x20
c002adc0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002adc4:	eb 4c                	jmp    c002ae12 <IDE::read(unsigned char, unsigned char)+0xa6>
c002adc6:	0f b6 d3             	movzx  edx,bl
c002adc9:	83 fa 07             	cmp    edx,0x7
c002adcc:	77 12                	ja     c002ade0 <IDE::read(unsigned char, unsigned char)+0x74>
c002adce:	0f b6 c9             	movzx  ecx,cl
c002add1:	0f b6 d3             	movzx  edx,bl
c002add4:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002addc:	01 c2                	add    edx,eax
c002adde:	eb 31                	jmp    c002ae11 <IDE::read(unsigned char, unsigned char)+0xa5>
c002ade0:	83 fa 0d             	cmp    edx,0xd
c002ade3:	77 13                	ja     c002adf8 <IDE::read(unsigned char, unsigned char)+0x8c>
c002ade5:	0f b6 c9             	movzx  ecx,cl
c002ade8:	0f b6 d3             	movzx  edx,bl
c002adeb:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002adf2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002adf6:	eb 19                	jmp    c002ae11 <IDE::read(unsigned char, unsigned char)+0xa5>
c002adf8:	31 c0                	xor    eax,eax
c002adfa:	83 fa 15             	cmp    edx,0x15
c002adfd:	77 13                	ja     c002ae12 <IDE::read(unsigned char, unsigned char)+0xa6>
c002adff:	0f b6 c9             	movzx  ecx,cl
c002ae02:	0f b6 d3             	movzx  edx,bl
c002ae05:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002ae0d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ae11:	ec                   	in     al,dx
c002ae12:	83 c4 1c             	add    esp,0x1c
c002ae15:	5b                   	pop    ebx
c002ae16:	5e                   	pop    esi
c002ae17:	5f                   	pop    edi
c002ae18:	5d                   	pop    ebp
c002ae19:	c3                   	ret    

c002ae1a <IDE::waitInterrupt(unsigned char)>:
c002ae1a:	55                   	push   ebp
c002ae1b:	57                   	push   edi
c002ae1c:	56                   	push   esi
c002ae1d:	53                   	push   ebx
c002ae1e:	31 db                	xor    ebx,ebx
c002ae20:	83 ec 0c             	sub    esp,0xc
c002ae23:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002ae27:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002ae2c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002ae34:	89 e8                	mov    eax,ebp
c002ae36:	84 c0                	test   al,al
c002ae38:	75 30                	jne    c002ae6a <IDE::waitInterrupt(unsigned char)+0x50>
c002ae3a:	50                   	push   eax
c002ae3b:	6a 0c                	push   0xc
c002ae3d:	56                   	push   esi
c002ae3e:	57                   	push   edi
c002ae3f:	e8 28 ff ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002ae44:	83 c4 10             	add    esp,0x10
c002ae47:	a8 01                	test   al,0x1
c002ae49:	75 27                	jne    c002ae72 <IDE::waitInterrupt(unsigned char)+0x58>
c002ae4b:	f6 c3 04             	test   bl,0x4
c002ae4e:	75 12                	jne    c002ae62 <IDE::waitInterrupt(unsigned char)+0x48>
c002ae50:	83 fb 32             	cmp    ebx,0x32
c002ae53:	7e 0d                	jle    c002ae62 <IDE::waitInterrupt(unsigned char)+0x48>
c002ae55:	83 ec 0c             	sub    esp,0xc
c002ae58:	6a 64                	push   0x64
c002ae5a:	e8 05 a6 ff ff       	call   c0025464 <milliTenthSleep(unsigned int)>
c002ae5f:	83 c4 10             	add    esp,0x10
c002ae62:	83 fb 3c             	cmp    ebx,0x3c
c002ae65:	74 0b                	je     c002ae72 <IDE::waitInterrupt(unsigned char)+0x58>
c002ae67:	43                   	inc    ebx
c002ae68:	eb c2                	jmp    c002ae2c <IDE::waitInterrupt(unsigned char)+0x12>
c002ae6a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002ae72:	83 c4 0c             	add    esp,0xc
c002ae75:	89 e8                	mov    eax,ebp
c002ae77:	5b                   	pop    ebx
c002ae78:	5e                   	pop    esi
c002ae79:	5f                   	pop    edi
c002ae7a:	5d                   	pop    ebp
c002ae7b:	c3                   	ret    

c002ae7c <ideChannel0IRQHandler(regs*, void*)>:
c002ae7c:	83 ec 10             	sub    esp,0x10
c002ae7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ae83:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002ae8a:	6a 07                	push   0x7
c002ae8c:	6a 00                	push   0x0
c002ae8e:	50                   	push   eax
c002ae8f:	e8 d8 fe ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002ae94:	83 c4 1c             	add    esp,0x1c
c002ae97:	c3                   	ret    

c002ae98 <ideChannel1IRQHandler(regs*, void*)>:
c002ae98:	83 ec 10             	sub    esp,0x10
c002ae9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ae9f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002aea6:	6a 07                	push   0x7
c002aea8:	6a 01                	push   0x1
c002aeaa:	50                   	push   eax
c002aeab:	e8 bc fe ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002aeb0:	83 c4 1c             	add    esp,0x1c
c002aeb3:	c3                   	ret    

c002aeb4 <IDE::enableIRQs(unsigned char, bool)>:
c002aeb4:	57                   	push   edi
c002aeb5:	b8 02 00 00 00       	mov    eax,0x2
c002aeba:	56                   	push   esi
c002aebb:	53                   	push   ebx
c002aebc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002aec0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002aec4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002aec9:	74 02                	je     c002aecd <IDE::enableIRQs(unsigned char, bool)+0x19>
c002aecb:	31 c0                	xor    eax,eax
c002aecd:	0f b6 db             	movzx  ebx,bl
c002aed0:	bf 04 00 00 00       	mov    edi,0x4
c002aed5:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002aedc:	50                   	push   eax
c002aedd:	6a 0c                	push   0xc
c002aedf:	53                   	push   ebx
c002aee0:	56                   	push   esi
c002aee1:	e8 c6 fd ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002aee6:	83 c4 10             	add    esp,0x10
c002aee9:	50                   	push   eax
c002aeea:	6a 0c                	push   0xc
c002aeec:	53                   	push   ebx
c002aeed:	56                   	push   esi
c002aeee:	e8 79 fe ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002aef3:	83 c4 10             	add    esp,0x10
c002aef6:	4f                   	dec    edi
c002aef7:	75 f0                	jne    c002aee9 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002aef9:	5b                   	pop    ebx
c002aefa:	5e                   	pop    esi
c002aefb:	5f                   	pop    edi
c002aefc:	c3                   	ret    
c002aefd:	90                   	nop

c002aefe <IDE::open(int, int, void*)>:
c002aefe:	55                   	push   ebp
c002aeff:	57                   	push   edi
c002af00:	56                   	push   esi
c002af01:	53                   	push   ebx
c002af02:	83 ec 1c             	sub    esp,0x1c
c002af05:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002af09:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002af12:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002af1b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002af22:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002af29:	0f 85 de 02 00 00    	jne    c002b20d <IDE::open(int, int, void*)+0x30f>
c002af2f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002af35:	88 04 24             	mov    BYTE PTR [esp],al
c002af38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002af3b:	83 e0 7f             	and    eax,0x7f
c002af3e:	83 f8 05             	cmp    eax,0x5
c002af41:	74 05                	je     c002af48 <IDE::open(int, int, void*)+0x4a>
c002af43:	83 f8 0f             	cmp    eax,0xf
c002af46:	75 32                	jne    c002af7a <IDE::open(int, int, void*)+0x7c>
c002af48:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002af4e:	83 e0 fc             	and    eax,0xfffffffc
c002af51:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002af58:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002af5e:	83 e0 fc             	and    eax,0xfffffffc
c002af61:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002af68:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002af6e:	83 e0 fc             	and    eax,0xfffffffc
c002af71:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002af78:	eb 14                	jmp    c002af8e <IDE::open(int, int, void*)+0x90>
c002af7a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002af84:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002af8e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002af95:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002af9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002afa0:	89 c6                	mov    esi,eax
c002afa2:	bf f8 0c 00 00       	mov    edi,0xcf8
c002afa7:	c1 e6 10             	shl    esi,0x10
c002afaa:	89 e8                	mov    eax,ebp
c002afac:	89 fa                	mov    edx,edi
c002afae:	c1 e0 0b             	shl    eax,0xb
c002afb1:	09 f0                	or     eax,esi
c002afb3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002afba:	c1 e6 08             	shl    esi,0x8
c002afbd:	09 c6                	or     esi,eax
c002afbf:	89 f0                	mov    eax,esi
c002afc1:	0d 08 00 00 80       	or     eax,0x80000008
c002afc6:	ef                   	out    dx,eax
c002afc7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002afcc:	89 ca                	mov    edx,ecx
c002afce:	ed                   	in     eax,dx
c002afcf:	c1 e8 10             	shr    eax,0x10
c002afd2:	3d ff ff 00 00       	cmp    eax,0xffff
c002afd7:	0f 84 f9 00 00 00    	je     c002b0d6 <IDE::open(int, int, void*)+0x1d8>
c002afdd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002afe3:	89 fa                	mov    edx,edi
c002afe5:	89 f0                	mov    eax,esi
c002afe7:	ef                   	out    dx,eax
c002afe8:	b0 fe                	mov    al,0xfe
c002afea:	89 ca                	mov    edx,ecx
c002afec:	ee                   	out    dx,al
c002afed:	89 f0                	mov    eax,esi
c002afef:	89 fa                	mov    edx,edi
c002aff1:	ef                   	out    dx,eax
c002aff2:	89 ca                	mov    edx,ecx
c002aff4:	ed                   	in     eax,dx
c002aff5:	3c fe                	cmp    al,0xfe
c002aff7:	0f 85 a9 00 00 00    	jne    c002b0a6 <IDE::open(int, int, void*)+0x1a8>
c002affd:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002b003:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b00a:	74 33                	je     c002b03f <IDE::open(int, int, void*)+0x141>
c002b00c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b012:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b016:	40                   	inc    eax
c002b017:	83 ec 0c             	sub    esp,0xc
c002b01a:	0f b6 c0             	movzx  eax,al
c002b01d:	50                   	push   eax
c002b01e:	55                   	push   ebp
c002b01f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002b023:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b029:	51                   	push   ecx
c002b02a:	e8 fd 34 ff ff       	call   c001e52c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b02f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b034:	83 c4 1c             	add    esp,0x1c
c002b037:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b03d:	eb 0a                	jmp    c002b049 <IDE::open(int, int, void*)+0x14b>
c002b03f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b049:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b050:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b057:	c1 e1 10             	shl    ecx,0x10
c002b05a:	c1 e0 08             	shl    eax,0x8
c002b05d:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b062:	09 c1                	or     ecx,eax
c002b064:	89 fa                	mov    edx,edi
c002b066:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b06d:	c1 e0 0b             	shl    eax,0xb
c002b070:	09 c1                	or     ecx,eax
c002b072:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b078:	89 c8                	mov    eax,ecx
c002b07a:	ef                   	out    dx,eax
c002b07b:	be fc 0c 00 00       	mov    esi,0xcfc
c002b080:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002b086:	89 f2                	mov    edx,esi
c002b088:	ee                   	out    dx,al
c002b089:	89 c8                	mov    eax,ecx
c002b08b:	89 fa                	mov    edx,edi
c002b08d:	ef                   	out    dx,eax
c002b08e:	89 f2                	mov    edx,esi
c002b090:	ed                   	in     eax,dx
c002b091:	0f b6 c0             	movzx  eax,al
c002b094:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002b09a:	74 4a                	je     c002b0e6 <IDE::open(int, int, void*)+0x1e8>
c002b09c:	83 ec 0c             	sub    esp,0xc
c002b09f:	68 a4 37 03 c0       	push   0xc00337a4
c002b0a4:	eb 38                	jmp    c002b0de <IDE::open(int, int, void*)+0x1e0>
c002b0a6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b0af:	75 1b                	jne    c002b0cc <IDE::open(int, int, void*)+0x1ce>
c002b0b1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002b0b5:	3d 80 00 00 00       	cmp    eax,0x80
c002b0ba:	74 07                	je     c002b0c3 <IDE::open(int, int, void*)+0x1c5>
c002b0bc:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b0c1:	75 09                	jne    c002b0cc <IDE::open(int, int, void*)+0x1ce>
c002b0c3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b0ca:	eb 1a                	jmp    c002b0e6 <IDE::open(int, int, void*)+0x1e8>
c002b0cc:	83 ec 0c             	sub    esp,0xc
c002b0cf:	68 ac 37 03 c0       	push   0xc00337ac
c002b0d4:	eb 08                	jmp    c002b0de <IDE::open(int, int, void*)+0x1e0>
c002b0d6:	83 ec 0c             	sub    esp,0xc
c002b0d9:	68 dd 37 03 c0       	push   0xc00337dd
c002b0de:	e8 93 51 ff ff       	call   c0020276 <KePanic(char const*)>
c002b0e3:	83 c4 10             	add    esp,0x10
c002b0e6:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b0ed:	74 1a                	je     c002b109 <IDE::open(int, int, void*)+0x20b>
c002b0ef:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b0f5:	83 e0 fc             	and    eax,0xfffffffc
c002b0f8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b0ff:	83 c0 08             	add    eax,0x8
c002b102:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b109:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b10f:	89 c2                	mov    edx,eax
c002b111:	83 e2 0f             	and    edx,0xf
c002b114:	83 fa 08             	cmp    edx,0x8
c002b117:	75 0a                	jne    c002b123 <IDE::open(int, int, void*)+0x225>
c002b119:	83 e8 02             	sub    eax,0x2
c002b11c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b123:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b129:	89 c2                	mov    edx,eax
c002b12b:	83 e2 0f             	and    edx,0xf
c002b12e:	83 fa 08             	cmp    edx,0x8
c002b131:	75 0a                	jne    c002b13d <IDE::open(int, int, void*)+0x23f>
c002b133:	83 e8 02             	sub    eax,0x2
c002b136:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b13d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b144:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b14b:	89 d0                	mov    eax,edx
c002b14d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b150:	8d 7a 01             	lea    edi,[edx+0x1]
c002b153:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b157:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b15b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b15f:	83 e1 3f             	and    ecx,0x3f
c002b162:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b166:	89 f9                	mov    ecx,edi
c002b168:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b16f:	0f b6 c9             	movzx  ecx,cl
c002b172:	8d 78 02             	lea    edi,[eax+0x2]
c002b175:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b178:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b17c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b180:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b184:	83 e2 3f             	and    edx,0x3f
c002b187:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b18b:	89 f9                	mov    ecx,edi
c002b18d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b193:	0f b6 d1             	movzx  edx,cl
c002b196:	8d 78 03             	lea    edi,[eax+0x3]
c002b199:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b19c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b1a0:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b1a4:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b1a8:	83 e1 3f             	and    ecx,0x3f
c002b1ab:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b1af:	89 f9                	mov    ecx,edi
c002b1b1:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b1b7:	0f b6 c9             	movzx  ecx,cl
c002b1ba:	8d 78 04             	lea    edi,[eax+0x4]
c002b1bd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b1c0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b1c4:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b1c8:	89 fa                	mov    edx,edi
c002b1ca:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b1d0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b1d4:	83 e2 3f             	and    edx,0x3f
c002b1d7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b1db:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b1e2:	66 85 f6             	test   si,si
c002b1e5:	74 65                	je     c002b24c <IDE::open(int, int, void*)+0x34e>
c002b1e7:	89 f9                	mov    ecx,edi
c002b1e9:	83 c0 05             	add    eax,0x5
c002b1ec:	0f b6 d1             	movzx  edx,cl
c002b1ef:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b1f2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b1f6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b1fa:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b200:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b204:	83 e0 3f             	and    eax,0x3f
c002b207:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b20b:	eb 3f                	jmp    c002b24c <IDE::open(int, int, void*)+0x34e>
c002b20d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b213:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b21a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b221:	05 06 02 00 00       	add    eax,0x206
c002b226:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b22d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b234:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b23b:	05 06 02 00 00       	add    eax,0x206
c002b240:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b247:	e9 bd fe ff ff       	jmp    c002b109 <IDE::open(int, int, void*)+0x20b>
c002b24c:	50                   	push   eax
c002b24d:	50                   	push   eax
c002b24e:	6a 00                	push   0x0
c002b250:	53                   	push   ebx
c002b251:	e8 30 fa ff ff       	call   c002ac86 <IDE::prepareInterrupt(unsigned char)>
c002b256:	5a                   	pop    edx
c002b257:	59                   	pop    ecx
c002b258:	6a 01                	push   0x1
c002b25a:	53                   	push   ebx
c002b25b:	e8 26 fa ff ff       	call   c002ac86 <IDE::prepareInterrupt(unsigned char)>
c002b260:	83 c4 0c             	add    esp,0xc
c002b263:	6a 00                	push   0x0
c002b265:	6a 00                	push   0x0
c002b267:	53                   	push   ebx
c002b268:	e8 47 fc ff ff       	call   c002aeb4 <IDE::enableIRQs(unsigned char, bool)>
c002b26d:	83 c4 0c             	add    esp,0xc
c002b270:	6a 00                	push   0x0
c002b272:	6a 01                	push   0x1
c002b274:	53                   	push   ebx
c002b275:	e8 3a fc ff ff       	call   c002aeb4 <IDE::enableIRQs(unsigned char, bool)>
c002b27a:	83 c4 10             	add    esp,0x10
c002b27d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b284:	74 34                	je     c002b2ba <IDE::open(int, int, void*)+0x3bc>
c002b286:	83 ec 0c             	sub    esp,0xc
c002b289:	53                   	push   ebx
c002b28a:	6a 01                	push   0x1
c002b28c:	68 7c ae 02 c0       	push   0xc002ae7c
c002b291:	6a 0e                	push   0xe
c002b293:	53                   	push   ebx
c002b294:	e8 f1 ff fe ff       	call   c001b28a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b299:	83 c4 14             	add    esp,0x14
c002b29c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b2a2:	53                   	push   ebx
c002b2a3:	6a 01                	push   0x1
c002b2a5:	68 98 ae 02 c0       	push   0xc002ae98
c002b2aa:	6a 0f                	push   0xf
c002b2ac:	53                   	push   ebx
c002b2ad:	e8 d8 ff fe ff       	call   c001b28a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b2b2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b2b8:	eb 38                	jmp    c002b2f2 <IDE::open(int, int, void*)+0x3f4>
c002b2ba:	83 ec 0c             	sub    esp,0xc
c002b2bd:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b2c7:	53                   	push   ebx
c002b2c8:	6a 00                	push   0x0
c002b2ca:	68 7c ae 02 c0       	push   0xc002ae7c
c002b2cf:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b2d5:	53                   	push   ebx
c002b2d6:	e8 af ff fe ff       	call   c001b28a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b2db:	83 c4 14             	add    esp,0x14
c002b2de:	53                   	push   ebx
c002b2df:	6a 00                	push   0x0
c002b2e1:	68 98 ae 02 c0       	push   0xc002ae98
c002b2e6:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b2ec:	53                   	push   ebx
c002b2ed:	e8 98 ff fe ff       	call   c001b28a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b2f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b2f4:	83 c4 20             	add    esp,0x20
c002b2f7:	83 ec 0c             	sub    esp,0xc
c002b2fa:	53                   	push   ebx
c002b2fb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b2fe:	83 c4 0c             	add    esp,0xc
c002b301:	6a 07                	push   0x7
c002b303:	6a 00                	push   0x0
c002b305:	53                   	push   ebx
c002b306:	e8 61 fa ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b30b:	83 c4 0c             	add    esp,0xc
c002b30e:	6a 07                	push   0x7
c002b310:	6a 01                	push   0x1
c002b312:	53                   	push   ebx
c002b313:	e8 54 fa ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b318:	83 c4 0c             	add    esp,0xc
c002b31b:	6a 01                	push   0x1
c002b31d:	6a 00                	push   0x0
c002b31f:	53                   	push   ebx
c002b320:	e8 8f fb ff ff       	call   c002aeb4 <IDE::enableIRQs(unsigned char, bool)>
c002b325:	83 c4 0c             	add    esp,0xc
c002b328:	6a 01                	push   0x1
c002b32a:	6a 01                	push   0x1
c002b32c:	53                   	push   ebx
c002b32d:	e8 82 fb ff ff       	call   c002aeb4 <IDE::enableIRQs(unsigned char, bool)>
c002b332:	83 c4 2c             	add    esp,0x2c
c002b335:	31 c0                	xor    eax,eax
c002b337:	5b                   	pop    ebx
c002b338:	5e                   	pop    esi
c002b339:	5f                   	pop    edi
c002b33a:	5d                   	pop    ebp
c002b33b:	c3                   	ret    

c002b33c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b33c:	55                   	push   ebp
c002b33d:	57                   	push   edi
c002b33e:	56                   	push   esi
c002b33f:	53                   	push   ebx
c002b340:	83 ec 1c             	sub    esp,0x1c
c002b343:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b347:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b34b:	8d 42 f8             	lea    eax,[edx-0x8]
c002b34e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b352:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b356:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b35a:	3c 03                	cmp    al,0x3
c002b35c:	77 5a                	ja     c002b3b8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b35e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b362:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b366:	0f b6 db             	movzx  ebx,bl
c002b369:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b36c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b371:	0c 80                	or     al,0x80
c002b373:	50                   	push   eax
c002b374:	6a 0c                	push   0xc
c002b376:	53                   	push   ebx
c002b377:	56                   	push   esi
c002b378:	e8 2f f9 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b37d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b382:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b386:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b38a:	0f b6 d2             	movzx  edx,dl
c002b38d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b391:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b393:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b398:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b39c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b3a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b3a4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b3ac:	83 c4 2c             	add    esp,0x2c
c002b3af:	5b                   	pop    ebx
c002b3b0:	5e                   	pop    esi
c002b3b1:	5f                   	pop    edi
c002b3b2:	5d                   	pop    ebp
c002b3b3:	e9 f4 f8 ff ff       	jmp    c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3b8:	0f b6 c2             	movzx  eax,dl
c002b3bb:	83 f8 07             	cmp    eax,0x7
c002b3be:	77 12                	ja     c002b3d2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b3c0:	0f b6 c2             	movzx  eax,dl
c002b3c3:	0f b6 db             	movzx  ebx,bl
c002b3c6:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b3ce:	01 c2                	add    edx,eax
c002b3d0:	eb 2f                	jmp    c002b401 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b3d2:	83 f8 0d             	cmp    eax,0xd
c002b3d5:	77 13                	ja     c002b3ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b3d7:	0f b6 db             	movzx  ebx,bl
c002b3da:	0f b6 d2             	movzx  edx,dl
c002b3dd:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b3e4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b3e8:	eb 17                	jmp    c002b401 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b3ea:	83 f8 15             	cmp    eax,0x15
c002b3ed:	77 14                	ja     c002b403 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b3ef:	0f b6 db             	movzx  ebx,bl
c002b3f2:	0f b6 d2             	movzx  edx,dl
c002b3f5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b3fd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b401:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b403:	83 c4 1c             	add    esp,0x1c
c002b406:	5b                   	pop    ebx
c002b407:	5e                   	pop    esi
c002b408:	5f                   	pop    edi
c002b409:	5d                   	pop    ebp
c002b40a:	c3                   	ret    
c002b40b:	90                   	nop

c002b40c <IDE::detect()>:
c002b40c:	55                   	push   ebp
c002b40d:	57                   	push   edi
c002b40e:	56                   	push   esi
c002b40f:	53                   	push   ebx
c002b410:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b416:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b41d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b424:	0f 85 a4 02 00 00    	jne    c002b6ce <IDE::detect()+0x2c2>
c002b42a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b431:	31 f6                	xor    esi,esi
c002b433:	31 ed                	xor    ebp,ebp
c002b435:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b43d:	89 e8                	mov    eax,ebp
c002b43f:	c1 e0 06             	shl    eax,0x6
c002b442:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b44a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b44e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b456:	c1 e0 04             	shl    eax,0x4
c002b459:	83 c8 a0             	or     eax,0xffffffa0
c002b45c:	0f b6 c0             	movzx  eax,al
c002b45f:	50                   	push   eax
c002b460:	6a 06                	push   0x6
c002b462:	56                   	push   esi
c002b463:	53                   	push   ebx
c002b464:	e8 43 f8 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b469:	83 c4 0c             	add    esp,0xc
c002b46c:	6a 0c                	push   0xc
c002b46e:	56                   	push   esi
c002b46f:	53                   	push   ebx
c002b470:	e8 f7 f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b475:	83 c4 0c             	add    esp,0xc
c002b478:	6a 0c                	push   0xc
c002b47a:	56                   	push   esi
c002b47b:	53                   	push   ebx
c002b47c:	e8 eb f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b481:	83 c4 0c             	add    esp,0xc
c002b484:	6a 0c                	push   0xc
c002b486:	56                   	push   esi
c002b487:	53                   	push   ebx
c002b488:	e8 df f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b48d:	83 c4 0c             	add    esp,0xc
c002b490:	6a 0c                	push   0xc
c002b492:	56                   	push   esi
c002b493:	53                   	push   ebx
c002b494:	e8 d3 f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b499:	68 ec 00 00 00       	push   0xec
c002b49e:	6a 07                	push   0x7
c002b4a0:	56                   	push   esi
c002b4a1:	53                   	push   ebx
c002b4a2:	e8 05 f8 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b4a7:	83 c4 1c             	add    esp,0x1c
c002b4aa:	6a 0c                	push   0xc
c002b4ac:	56                   	push   esi
c002b4ad:	53                   	push   ebx
c002b4ae:	e8 b9 f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b4b3:	83 c4 0c             	add    esp,0xc
c002b4b6:	6a 0c                	push   0xc
c002b4b8:	56                   	push   esi
c002b4b9:	53                   	push   ebx
c002b4ba:	e8 ad f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b4bf:	83 c4 0c             	add    esp,0xc
c002b4c2:	6a 0c                	push   0xc
c002b4c4:	56                   	push   esi
c002b4c5:	53                   	push   ebx
c002b4c6:	e8 a1 f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b4cb:	83 c4 0c             	add    esp,0xc
c002b4ce:	6a 0c                	push   0xc
c002b4d0:	56                   	push   esi
c002b4d1:	53                   	push   ebx
c002b4d2:	e8 95 f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b4d7:	83 c4 0c             	add    esp,0xc
c002b4da:	6a 0c                	push   0xc
c002b4dc:	56                   	push   esi
c002b4dd:	53                   	push   ebx
c002b4de:	e8 89 f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b4e3:	83 c4 10             	add    esp,0x10
c002b4e6:	84 c0                	test   al,al
c002b4e8:	0f 84 60 01 00 00    	je     c002b64e <IDE::detect()+0x242>
c002b4ee:	31 ff                	xor    edi,edi
c002b4f0:	50                   	push   eax
c002b4f1:	6a 0c                	push   0xc
c002b4f3:	56                   	push   esi
c002b4f4:	53                   	push   ebx
c002b4f5:	e8 72 f8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b4fa:	83 c4 10             	add    esp,0x10
c002b4fd:	a8 01                	test   al,0x1
c002b4ff:	0f 85 6a 01 00 00    	jne    c002b66f <IDE::detect()+0x263>
c002b505:	a8 80                	test   al,0x80
c002b507:	75 04                	jne    c002b50d <IDE::detect()+0x101>
c002b509:	a8 08                	test   al,0x8
c002b50b:	75 23                	jne    c002b530 <IDE::detect()+0x124>
c002b50d:	47                   	inc    edi
c002b50e:	81 ff 17 01 00 00    	cmp    edi,0x117
c002b514:	7e da                	jle    c002b4f0 <IDE::detect()+0xe4>
c002b516:	83 ec 0c             	sub    esp,0xc
c002b519:	6a 32                	push   0x32
c002b51b:	e8 44 9f ff ff       	call   c0025464 <milliTenthSleep(unsigned int)>
c002b520:	83 c4 10             	add    esp,0x10
c002b523:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002b529:	75 c5                	jne    c002b4f0 <IDE::detect()+0xe4>
c002b52b:	e9 3f 01 00 00       	jmp    c002b66f <IDE::detect()+0x263>
c002b530:	31 c9                	xor    ecx,ecx
c002b532:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b536:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002b53a:	83 ec 0c             	sub    esp,0xc
c002b53d:	68 80 00 00 00       	push   0x80
c002b542:	57                   	push   edi
c002b543:	6a 00                	push   0x0
c002b545:	56                   	push   esi
c002b546:	53                   	push   ebx
c002b547:	e8 f0 fd ff ff       	call   c002b33c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b54c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b551:	89 e8                	mov    eax,ebp
c002b553:	89 d1                	mov    ecx,edx
c002b555:	c1 e0 06             	shl    eax,0x6
c002b558:	01 d8                	add    eax,ebx
c002b55a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b561:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b568:	89 f2                	mov    edx,esi
c002b56a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b570:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b574:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b57a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b57e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b585:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b58d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b594:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b59c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b5a2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b5a9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b5af:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b5b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b5b7:	83 c4 20             	add    esp,0x20
c002b5ba:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002b5bd:	83 c0 02             	add    eax,0x2
c002b5c0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b5c6:	83 c7 02             	add    edi,0x2
c002b5c9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002b5cc:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b5d2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002b5d6:	75 e2                	jne    c002b5ba <IDE::detect()+0x1ae>
c002b5d8:	89 e8                	mov    eax,ebp
c002b5da:	c1 e0 06             	shl    eax,0x6
c002b5dd:	01 d8                	add    eax,ebx
c002b5df:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b5e6:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b5ed:	c1 ea 09             	shr    edx,0x9
c002b5f0:	83 e2 01             	and    edx,0x1
c002b5f3:	80 e1 01             	and    cl,0x1
c002b5f6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b5fc:	75 22                	jne    c002b620 <IDE::detect()+0x214>
c002b5fe:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b605:	74 46                	je     c002b64d <IDE::detect()+0x241>
c002b607:	83 ec 0c             	sub    esp,0xc
c002b60a:	68 7c 01 00 00       	push   0x17c
c002b60f:	e8 aa ad fe ff       	call   c00163be <malloc>
c002b614:	89 c7                	mov    edi,eax
c002b616:	89 04 24             	mov    DWORD PTR [esp],eax
c002b619:	e8 2e 05 00 00       	call   c002bb4c <ATA::ATA()>
c002b61e:	eb 17                	jmp    c002b637 <IDE::detect()+0x22b>
c002b620:	83 ec 0c             	sub    esp,0xc
c002b623:	68 84 01 00 00       	push   0x184
c002b628:	e8 91 ad fe ff       	call   c00163be <malloc>
c002b62d:	89 c7                	mov    edi,eax
c002b62f:	89 04 24             	mov    DWORD PTR [esp],eax
c002b632:	e8 59 0e 00 00       	call   c002c490 <ATAPI::ATAPI()>
c002b637:	5a                   	pop    edx
c002b638:	59                   	pop    ecx
c002b639:	57                   	push   edi
c002b63a:	53                   	push   ebx
c002b63b:	e8 9e fc fe ff       	call   c001b2de <Device::addChild(Device*)>
c002b640:	8b 07                	mov    eax,DWORD PTR [edi]
c002b642:	53                   	push   ebx
c002b643:	55                   	push   ebp
c002b644:	6a 00                	push   0x0
c002b646:	57                   	push   edi
c002b647:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b64a:	83 c4 20             	add    esp,0x20
c002b64d:	45                   	inc    ebp
c002b64e:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b653:	74 0d                	je     c002b662 <IDE::detect()+0x256>
c002b655:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b65d:	e9 db fd ff ff       	jmp    c002b43d <IDE::detect()+0x31>
c002b662:	4e                   	dec    esi
c002b663:	74 69                	je     c002b6ce <IDE::detect()+0x2c2>
c002b665:	be 01 00 00 00       	mov    esi,0x1
c002b66a:	e9 c6 fd ff ff       	jmp    c002b435 <IDE::detect()+0x29>
c002b66f:	50                   	push   eax
c002b670:	6a 04                	push   0x4
c002b672:	56                   	push   esi
c002b673:	53                   	push   ebx
c002b674:	e8 f3 f6 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b679:	83 c4 0c             	add    esp,0xc
c002b67c:	89 c7                	mov    edi,eax
c002b67e:	6a 05                	push   0x5
c002b680:	56                   	push   esi
c002b681:	53                   	push   ebx
c002b682:	e8 e5 f6 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b687:	83 c4 10             	add    esp,0x10
c002b68a:	89 f9                	mov    ecx,edi
c002b68c:	0f b6 c0             	movzx  eax,al
c002b68f:	0f b6 f9             	movzx  edi,cl
c002b692:	83 ff 14             	cmp    edi,0x14
c002b695:	75 07                	jne    c002b69e <IDE::detect()+0x292>
c002b697:	3d eb 00 00 00       	cmp    eax,0xeb
c002b69c:	eb 0a                	jmp    c002b6a8 <IDE::detect()+0x29c>
c002b69e:	3d 96 00 00 00       	cmp    eax,0x96
c002b6a3:	75 a9                	jne    c002b64e <IDE::detect()+0x242>
c002b6a5:	83 ff 69             	cmp    edi,0x69
c002b6a8:	75 a4                	jne    c002b64e <IDE::detect()+0x242>
c002b6aa:	68 a1 00 00 00       	push   0xa1
c002b6af:	6a 07                	push   0x7
c002b6b1:	56                   	push   esi
c002b6b2:	53                   	push   ebx
c002b6b3:	e8 f4 f5 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b6b8:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b6bf:	e8 a0 9d ff ff       	call   c0025464 <milliTenthSleep(unsigned int)>
c002b6c4:	83 c4 10             	add    esp,0x10
c002b6c7:	b1 01                	mov    cl,0x1
c002b6c9:	e9 64 fe ff ff       	jmp    c002b532 <IDE::detect()+0x126>
c002b6ce:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b6d4:	5b                   	pop    ebx
c002b6d5:	5e                   	pop    esi
c002b6d6:	5f                   	pop    edi
c002b6d7:	5d                   	pop    ebp
c002b6d8:	c3                   	ret    
c002b6d9:	90                   	nop

c002b6da <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b6da:	55                   	push   ebp
c002b6db:	57                   	push   edi
c002b6dc:	56                   	push   esi
c002b6dd:	53                   	push   ebx
c002b6de:	83 ec 1c             	sub    esp,0x1c
c002b6e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b6e5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b6e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b6ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b6f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b6f5:	88 c3                	mov    bl,al
c002b6f7:	25 ff 00 00 00       	and    eax,0xff
c002b6fc:	0f 84 88 00 00 00    	je     c002b78a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b702:	83 ec 0c             	sub    esp,0xc
c002b705:	89 c7                	mov    edi,eax
c002b707:	68 07 38 03 c0       	push   0xc0033807
c002b70c:	e8 4c db fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002b711:	83 c4 10             	add    esp,0x10
c002b714:	83 ff 01             	cmp    edi,0x1
c002b717:	74 6b                	je     c002b784 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b719:	83 ff 02             	cmp    edi,0x2
c002b71c:	75 58                	jne    c002b776 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b71e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b723:	01 ff                	add    edi,edi
c002b725:	50                   	push   eax
c002b726:	09 fe                	or     esi,edi
c002b728:	6a 01                	push   0x1
c002b72a:	89 f0                	mov    eax,esi
c002b72c:	0f b6 f0             	movzx  esi,al
c002b72f:	c1 e6 06             	shl    esi,0x6
c002b732:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b73a:	50                   	push   eax
c002b73b:	55                   	push   ebp
c002b73c:	e8 2b f6 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b741:	83 c4 10             	add    esp,0x10
c002b744:	a8 01                	test   al,0x1
c002b746:	74 02                	je     c002b74a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b748:	b3 07                	mov    bl,0x7
c002b74a:	a8 02                	test   al,0x2
c002b74c:	74 02                	je     c002b750 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b74e:	b3 03                	mov    bl,0x3
c002b750:	a8 04                	test   al,0x4
c002b752:	74 02                	je     c002b756 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b754:	b3 14                	mov    bl,0x14
c002b756:	a8 08                	test   al,0x8
c002b758:	74 02                	je     c002b75c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b75a:	b3 03                	mov    bl,0x3
c002b75c:	a8 10                	test   al,0x10
c002b75e:	74 02                	je     c002b762 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b760:	b3 15                	mov    bl,0x15
c002b762:	a8 20                	test   al,0x20
c002b764:	74 02                	je     c002b768 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b766:	b3 03                	mov    bl,0x3
c002b768:	a8 40                	test   al,0x40
c002b76a:	74 02                	je     c002b76e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b76c:	b3 16                	mov    bl,0x16
c002b76e:	a8 80                	test   al,0x80
c002b770:	74 18                	je     c002b78a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b772:	b3 0d                	mov    bl,0xd
c002b774:	eb 14                	jmp    c002b78a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b776:	83 ff 03             	cmp    edi,0x3
c002b779:	74 0d                	je     c002b788 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b77b:	83 ff 04             	cmp    edi,0x4
c002b77e:	75 0a                	jne    c002b78a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b780:	b3 08                	mov    bl,0x8
c002b782:	eb 06                	jmp    c002b78a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b784:	b3 13                	mov    bl,0x13
c002b786:	eb 02                	jmp    c002b78a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b788:	b3 17                	mov    bl,0x17
c002b78a:	83 c4 1c             	add    esp,0x1c
c002b78d:	88 d8                	mov    al,bl
c002b78f:	5b                   	pop    ebx
c002b790:	5e                   	pop    esi
c002b791:	5f                   	pop    edi
c002b792:	5d                   	pop    ebp
c002b793:	c3                   	ret    

c002b794 <IDE::polling(unsigned char, unsigned int)>:
c002b794:	57                   	push   edi
c002b795:	56                   	push   esi
c002b796:	53                   	push   ebx
c002b797:	bb 04 00 00 00       	mov    ebx,0x4
c002b79c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b7a0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b7a5:	52                   	push   edx
c002b7a6:	6a 0c                	push   0xc
c002b7a8:	56                   	push   esi
c002b7a9:	57                   	push   edi
c002b7aa:	e8 bd f5 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b7af:	83 c4 10             	add    esp,0x10
c002b7b2:	4b                   	dec    ebx
c002b7b3:	75 f0                	jne    c002b7a5 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b7b5:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b7ba:	50                   	push   eax
c002b7bb:	6a 0c                	push   0xc
c002b7bd:	56                   	push   esi
c002b7be:	57                   	push   edi
c002b7bf:	e8 a8 f5 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002b7c4:	83 c4 10             	add    esp,0x10
c002b7c7:	a8 01                	test   al,0x1
c002b7c9:	75 17                	jne    c002b7e2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b7cb:	a8 20                	test   al,0x20
c002b7cd:	75 0f                	jne    c002b7de <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b7cf:	4b                   	dec    ebx
c002b7d0:	74 10                	je     c002b7e2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b7d2:	a8 80                	test   al,0x80
c002b7d4:	75 e4                	jne    c002b7ba <IDE::polling(unsigned char, unsigned int)+0x26>
c002b7d6:	a8 08                	test   al,0x8
c002b7d8:	74 e0                	je     c002b7ba <IDE::polling(unsigned char, unsigned int)+0x26>
c002b7da:	31 c0                	xor    eax,eax
c002b7dc:	eb 06                	jmp    c002b7e4 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b7de:	b0 01                	mov    al,0x1
c002b7e0:	eb 02                	jmp    c002b7e4 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b7e2:	b0 02                	mov    al,0x2
c002b7e4:	5b                   	pop    ebx
c002b7e5:	5e                   	pop    esi
c002b7e6:	5f                   	pop    edi
c002b7e7:	c3                   	ret    

c002b7e8 <SATABus::close(int, int, void*)>:
c002b7e8:	31 c0                	xor    eax,eax
c002b7ea:	c3                   	ret    
c002b7eb:	90                   	nop

c002b7ec <SATABus::detect()>:
c002b7ec:	c3                   	ret    
c002b7ed:	90                   	nop

c002b7ee <SATABus::SATABus()>:
c002b7ee:	83 ec 0c             	sub    esp,0xc
c002b7f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b7f5:	83 ec 08             	sub    esp,0x8
c002b7f8:	68 40 38 03 c0       	push   0xc0033840
c002b7fd:	50                   	push   eax
c002b7fe:	e8 35 fe fe ff       	call   c001b638 <HardDiskController::HardDiskController(char const*)>
c002b803:	83 c4 10             	add    esp,0x10
c002b806:	ba 6c 38 03 c0       	mov    edx,0xc003386c
c002b80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b80f:	89 10                	mov    DWORD PTR [eax],edx
c002b811:	83 ec 0c             	sub    esp,0xc
c002b814:	6a 50                	push   0x50
c002b816:	e8 8b af fe ff       	call   c00167a6 <Phys::allocateContiguousPages(int)>
c002b81b:	83 c4 10             	add    esp,0x10
c002b81e:	89 c2                	mov    edx,eax
c002b820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b824:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b82a:	83 ec 0c             	sub    esp,0xc
c002b82d:	6a 50                	push   0x50
c002b82f:	e8 f1 c6 fe ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c002b834:	83 c4 10             	add    esp,0x10
c002b837:	89 c2                	mov    edx,eax
c002b839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b83d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b843:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b848:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b84c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b852:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b856:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b85c:	83 ec 0c             	sub    esp,0xc
c002b85f:	6a 03                	push   0x3
c002b861:	6a 50                	push   0x50
c002b863:	51                   	push   ecx
c002b864:	52                   	push   edx
c002b865:	50                   	push   eax
c002b866:	e8 c7 cf fe ff       	call   c0018832 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b86b:	83 c4 20             	add    esp,0x20
c002b86e:	90                   	nop
c002b86f:	83 c4 0c             	add    esp,0xc
c002b872:	c3                   	ret    
c002b873:	90                   	nop

c002b874 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b874:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b878:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b87b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b87e:	09 c2                	or     edx,eax
c002b880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b884:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b88a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b88c:	31 c0                	xor    eax,eax
c002b88e:	c1 e9 08             	shr    ecx,0x8
c002b891:	83 e1 0f             	and    ecx,0xf
c002b894:	39 c8                	cmp    eax,ecx
c002b896:	74 0a                	je     c002b8a2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b898:	f6 c2 01             	test   dl,0x1
c002b89b:	74 08                	je     c002b8a5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b89d:	d1 ea                	shr    edx,1
c002b89f:	40                   	inc    eax
c002b8a0:	eb f2                	jmp    c002b894 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b8a2:	83 c8 ff             	or     eax,0xffffffff
c002b8a5:	c3                   	ret    

c002b8a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b8a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b8aa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b8ad:	89 c2                	mov    edx,eax
c002b8af:	c1 ea 08             	shr    edx,0x8
c002b8b2:	83 e2 0f             	and    edx,0xf
c002b8b5:	4a                   	dec    edx
c002b8b6:	75 32                	jne    c002b8ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b8b8:	83 e0 0f             	and    eax,0xf
c002b8bb:	83 f8 03             	cmp    eax,0x3
c002b8be:	75 2a                	jne    c002b8ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b8c0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b8c3:	b8 02 00 00 00       	mov    eax,0x2
c002b8c8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b8ce:	74 1c                	je     c002b8ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b8d0:	b8 04 00 00 00       	mov    eax,0x4
c002b8d5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b8db:	74 0f                	je     c002b8ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b8dd:	31 c0                	xor    eax,eax
c002b8df:	83 fa 03             	cmp    edx,0x3
c002b8e2:	0f 94 c0             	sete   al
c002b8e5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b8e9:	c3                   	ret    
c002b8ea:	31 c0                	xor    eax,eax
c002b8ec:	c3                   	ret    
c002b8ed:	90                   	nop

c002b8ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b8ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b8f2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8f5:	0f ba e2 0f          	bt     edx,0xf
c002b8f9:	72 f7                	jb     c002b8f2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b8fb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b8fe:	83 ca 10             	or     edx,0x10
c002b901:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b904:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b907:	83 ca 01             	or     edx,0x1
c002b90a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b90d:	c3                   	ret    

c002b90e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b90e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b912:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b915:	83 e2 fe             	and    edx,0xfffffffe
c002b918:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b91b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b91e:	83 e2 ef             	and    edx,0xffffffef
c002b921:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b924:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b927:	0f ba e2 0e          	bt     edx,0xe
c002b92b:	72 f7                	jb     c002b924 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b92d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b930:	0f ba e2 0f          	bt     edx,0xf
c002b934:	72 ee                	jb     c002b924 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b936:	c3                   	ret    
c002b937:	90                   	nop

c002b938 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b938:	55                   	push   ebp
c002b939:	57                   	push   edi
c002b93a:	56                   	push   esi
c002b93b:	53                   	push   ebx
c002b93c:	83 ec 1c             	sub    esp,0x1c
c002b93f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b943:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b947:	53                   	push   ebx
c002b948:	56                   	push   esi
c002b949:	e8 c0 ff ff ff       	call   c002b90e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b94e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b952:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b958:	83 ec 0c             	sub    esp,0xc
c002b95b:	c1 e5 0a             	shl    ebp,0xa
c002b95e:	01 e8                	add    eax,ebp
c002b960:	89 03                	mov    DWORD PTR [ebx],eax
c002b962:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b964:	68 00 04 00 00       	push   0x400
c002b969:	6a 00                	push   0x0
c002b96b:	50                   	push   eax
c002b96c:	e8 7f 4b fd ff       	call   c00004f0 <memset>
c002b971:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002b977:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002b97b:	01 e8                	add    eax,ebp
c002b97d:	83 c4 1c             	add    esp,0x1c
c002b980:	89 03                	mov    DWORD PTR [ebx],eax
c002b982:	c1 e2 08             	shl    edx,0x8
c002b985:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b98c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002b992:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b998:	01 f8                	add    eax,edi
c002b99a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b99d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b9a0:	68 00 01 00 00       	push   0x100
c002b9a5:	6a 00                	push   0x0
c002b9a7:	50                   	push   eax
c002b9a8:	e8 43 4b fd ff       	call   c00004f0 <memset>
c002b9ad:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002b9b3:	01 fa                	add    edx,edi
c002b9b5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002b9b9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002b9bc:	c1 e7 0d             	shl    edi,0xd
c002b9bf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002b9c6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002b9cc:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002b9d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002b9d6:	31 ff                	xor    edi,edi
c002b9d8:	83 c4 10             	add    esp,0x10
c002b9db:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002b9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002b9e5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002b9eb:	83 c5 20             	add    ebp,0x20
c002b9ee:	01 f8                	add    eax,edi
c002b9f0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b9f3:	52                   	push   edx
c002b9f4:	68 00 01 00 00       	push   0x100
c002b9f9:	6a 00                	push   0x0
c002b9fb:	50                   	push   eax
c002b9fc:	e8 ef 4a fd ff       	call   c00004f0 <memset>
c002ba01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002ba05:	83 c4 10             	add    esp,0x10
c002ba08:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002ba0e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002ba15:	01 f8                	add    eax,edi
c002ba17:	81 c7 00 01 00 00    	add    edi,0x100
c002ba1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002ba20:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002ba26:	75 b3                	jne    c002b9db <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002ba28:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002ba2f:	50                   	push   eax
c002ba30:	50                   	push   eax
c002ba31:	53                   	push   ebx
c002ba32:	56                   	push   esi
c002ba33:	e8 b6 fe ff ff       	call   c002b8ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002ba38:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002ba3f:	83 c4 2c             	add    esp,0x2c
c002ba42:	5b                   	pop    ebx
c002ba43:	5e                   	pop    esi
c002ba44:	5f                   	pop    edi
c002ba45:	5d                   	pop    ebp
c002ba46:	c3                   	ret    
c002ba47:	90                   	nop

c002ba48 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002ba48:	55                   	push   ebp
c002ba49:	57                   	push   edi
c002ba4a:	56                   	push   esi
c002ba4b:	53                   	push   ebx
c002ba4c:	31 db                	xor    ebx,ebx
c002ba4e:	83 ec 0c             	sub    esp,0xc
c002ba51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ba55:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002ba59:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002ba5c:	f7 c7 01 00 00 00    	test   edi,0x1
c002ba62:	74 7a                	je     c002bade <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002ba64:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002ba68:	89 d8                	mov    eax,ebx
c002ba6a:	c1 e0 07             	shl    eax,0x7
c002ba6d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002ba74:	55                   	push   ebp
c002ba75:	56                   	push   esi
c002ba76:	e8 2b fe ff ff       	call   c002b8a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002ba7b:	5a                   	pop    edx
c002ba7c:	83 f8 01             	cmp    eax,0x1
c002ba7f:	59                   	pop    ecx
c002ba80:	75 21                	jne    c002baa3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002ba82:	50                   	push   eax
c002ba83:	53                   	push   ebx
c002ba84:	55                   	push   ebp
c002ba85:	56                   	push   esi
c002ba86:	e8 ad fe ff ff       	call   c002b938 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002ba8b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002ba92:	e8 27 a9 fe ff       	call   c00163be <malloc>
c002ba97:	89 c5                	mov    ebp,eax
c002ba99:	89 04 24             	mov    DWORD PTR [esp],eax
c002ba9c:	e8 bb 10 00 00       	call   c002cb5c <SATA::SATA()>
c002baa1:	eb 24                	jmp    c002bac7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002baa3:	83 f8 04             	cmp    eax,0x4
c002baa6:	75 36                	jne    c002bade <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002baa8:	51                   	push   ecx
c002baa9:	53                   	push   ebx
c002baaa:	55                   	push   ebp
c002baab:	56                   	push   esi
c002baac:	e8 87 fe ff ff       	call   c002b938 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bab1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002bab8:	e8 01 a9 fe ff       	call   c00163be <malloc>
c002babd:	89 c5                	mov    ebp,eax
c002babf:	89 04 24             	mov    DWORD PTR [esp],eax
c002bac2:	e8 2b 18 00 00       	call   c002d2f2 <SATAPI::SATAPI()>
c002bac7:	58                   	pop    eax
c002bac8:	5a                   	pop    edx
c002bac9:	55                   	push   ebp
c002baca:	56                   	push   esi
c002bacb:	e8 0e f8 fe ff       	call   c001b2de <Device::addChild(Device*)>
c002bad0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002bad3:	56                   	push   esi
c002bad4:	6a 00                	push   0x0
c002bad6:	53                   	push   ebx
c002bad7:	55                   	push   ebp
c002bad8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002badb:	83 c4 20             	add    esp,0x20
c002bade:	d1 ef                	shr    edi,1
c002bae0:	43                   	inc    ebx
c002bae1:	83 fb 20             	cmp    ebx,0x20
c002bae4:	0f 85 72 ff ff ff    	jne    c002ba5c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002baea:	83 c4 0c             	add    esp,0xc
c002baed:	5b                   	pop    ebx
c002baee:	5e                   	pop    esi
c002baef:	5f                   	pop    edi
c002baf0:	5d                   	pop    ebp
c002baf1:	c3                   	ret    

c002baf2 <SATABus::open(int, int, void*)>:
c002baf2:	53                   	push   ebx
c002baf3:	83 ec 08             	sub    esp,0x8
c002baf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bafa:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bb00:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bb06:	e8 e9 94 ff ff       	call   c0024ff4 <KeDisablePreemption()>
c002bb0b:	52                   	push   edx
c002bb0c:	52                   	push   edx
c002bb0d:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002bb13:	53                   	push   ebx
c002bb14:	e8 2f ff ff ff       	call   c002ba48 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bb19:	e8 fe 94 ff ff       	call   c002501c <KeRestorePreemption()>
c002bb1e:	31 c0                	xor    eax,eax
c002bb20:	83 c4 18             	add    esp,0x18
c002bb23:	5b                   	pop    ebx
c002bb24:	c3                   	ret    
c002bb25:	90                   	nop

c002bb26 <ATA::close(int, int, void*)>:
c002bb26:	83 ec 0c             	sub    esp,0xc
c002bb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb2d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002bb33:	85 c0                	test   eax,eax
c002bb35:	74 0c                	je     c002bb43 <ATA::close(int, int, void*)+0x1d>
c002bb37:	83 ec 0c             	sub    esp,0xc
c002bb3a:	8b 10                	mov    edx,DWORD PTR [eax]
c002bb3c:	50                   	push   eax
c002bb3d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002bb40:	83 c4 10             	add    esp,0x10
c002bb43:	31 c0                	xor    eax,eax
c002bb45:	83 c4 0c             	add    esp,0xc
c002bb48:	c3                   	ret    
c002bb49:	90                   	nop

c002bb4a <ATA::powerSaving(PowerSavingLevel)>:
c002bb4a:	c3                   	ret    
c002bb4b:	90                   	nop

c002bb4c <ATA::ATA()>:
c002bb4c:	83 ec 0c             	sub    esp,0xc
c002bb4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb53:	83 ec 04             	sub    esp,0x4
c002bb56:	68 00 02 00 00       	push   0x200
c002bb5b:	68 45 39 03 c0       	push   0xc0033945
c002bb60:	50                   	push   eax
c002bb61:	e8 5c fb fe ff       	call   c001b6c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002bb66:	83 c4 10             	add    esp,0x10
c002bb69:	ba ac 38 03 c0       	mov    edx,0xc00338ac
c002bb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bb72:	89 10                	mov    DWORD PTR [eax],edx
c002bb74:	90                   	nop
c002bb75:	83 c4 0c             	add    esp,0xc
c002bb78:	c3                   	ret    
c002bb79:	90                   	nop

c002bb7a <ATA::flush(bool)>:
c002bb7a:	53                   	push   ebx
c002bb7b:	83 ec 08             	sub    esp,0x8
c002bb7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bb82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bb87:	83 f8 01             	cmp    eax,0x1
c002bb8a:	19 c0                	sbb    eax,eax
c002bb8c:	83 e0 fd             	and    eax,0xfffffffd
c002bb8f:	05 ea 00 00 00       	add    eax,0xea
c002bb94:	50                   	push   eax
c002bb95:	6a 07                	push   0x7
c002bb97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bb9e:	50                   	push   eax
c002bb9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bba5:	e8 02 f1 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bbaa:	83 c4 0c             	add    esp,0xc
c002bbad:	6a 00                	push   0x0
c002bbaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bbb6:	50                   	push   eax
c002bbb7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bbbd:	e8 d2 fb ff ff       	call   c002b794 <IDE::polling(unsigned char, unsigned int)>
c002bbc2:	83 c4 18             	add    esp,0x18
c002bbc5:	5b                   	pop    ebx
c002bbc6:	c3                   	ret    
c002bbc7:	90                   	nop

c002bbc8 <ATA::readyForCommand()>:
c002bbc8:	56                   	push   esi
c002bbc9:	53                   	push   ebx
c002bbca:	53                   	push   ebx
c002bbcb:	31 db                	xor    ebx,ebx
c002bbcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bbd1:	51                   	push   ecx
c002bbd2:	6a 0c                	push   0xc
c002bbd4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002bbdb:	50                   	push   eax
c002bbdc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bbe2:	e8 85 f1 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002bbe7:	83 c4 10             	add    esp,0x10
c002bbea:	a8 88                	test   al,0x88
c002bbec:	74 1f                	je     c002bc0d <ATA::readyForCommand()+0x45>
c002bbee:	43                   	inc    ebx
c002bbef:	83 fb 63             	cmp    ebx,0x63
c002bbf2:	7e dd                	jle    c002bbd1 <ATA::readyForCommand()+0x9>
c002bbf4:	83 ec 0c             	sub    esp,0xc
c002bbf7:	6a 0a                	push   0xa
c002bbf9:	e8 66 98 ff ff       	call   c0025464 <milliTenthSleep(unsigned int)>
c002bbfe:	83 c4 10             	add    esp,0x10
c002bc01:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bc07:	75 c8                	jne    c002bbd1 <ATA::readyForCommand()+0x9>
c002bc09:	31 c0                	xor    eax,eax
c002bc0b:	eb 02                	jmp    c002bc0f <ATA::readyForCommand()+0x47>
c002bc0d:	b0 01                	mov    al,0x1
c002bc0f:	5a                   	pop    edx
c002bc10:	5b                   	pop    ebx
c002bc11:	5e                   	pop    esi
c002bc12:	c3                   	ret    
c002bc13:	90                   	nop

c002bc14 <ATA::access(unsigned long long, int, void*, bool)>:
c002bc14:	55                   	push   ebp
c002bc15:	57                   	push   edi
c002bc16:	56                   	push   esi
c002bc17:	53                   	push   ebx
c002bc18:	83 ec 2c             	sub    esp,0x2c
c002bc1b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002bc1f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002bc23:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002bc27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bc2b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bc2f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bc33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002bc37:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bc3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bc41:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bc47:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bc4b:	c1 e0 06             	shl    eax,0x6
c002bc4e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bc56:	74 5d                	je     c002bcb5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002bc58:	89 fa                	mov    edx,edi
c002bc5a:	89 f0                	mov    eax,esi
c002bc5c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002bc60:	c1 ea 1c             	shr    edx,0x1c
c002bc63:	89 d1                	mov    ecx,edx
c002bc65:	09 c1                	or     ecx,eax
c002bc67:	74 25                	je     c002bc8e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bc69:	31 ed                	xor    ebp,ebp
c002bc6b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bc72:	89 fa                	mov    edx,edi
c002bc74:	89 f0                	mov    eax,esi
c002bc76:	0f ad d0             	shrd   eax,edx,cl
c002bc79:	d3 ea                	shr    edx,cl
c002bc7b:	f6 c1 20             	test   cl,0x20
c002bc7e:	74 02                	je     c002bc82 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bc80:	89 d0                	mov    eax,edx
c002bc82:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bc86:	45                   	inc    ebp
c002bc87:	83 fd 06             	cmp    ebp,0x6
c002bc8a:	75 df                	jne    c002bc6b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bc8c:	eb 76                	jmp    c002bd04 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002bc8e:	89 f0                	mov    eax,esi
c002bc90:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bc95:	89 fa                	mov    edx,edi
c002bc97:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bc9e:	0f ac d0 10          	shrd   eax,edx,0x10
c002bca2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bca7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bcab:	c1 ee 18             	shr    esi,0x18
c002bcae:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002bcb3:	eb 56                	jmp    c002bd0b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bcb5:	6a 00                	push   0x0
c002bcb7:	6a 3f                	push   0x3f
c002bcb9:	57                   	push   edi
c002bcba:	56                   	push   esi
c002bcbb:	e8 d0 2a 00 00       	call   c002e790 <__umoddi3>
c002bcc0:	83 c4 10             	add    esp,0x10
c002bcc3:	40                   	inc    eax
c002bcc4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bcc8:	6a 00                	push   0x0
c002bcca:	68 f0 03 00 00       	push   0x3f0
c002bccf:	57                   	push   edi
c002bcd0:	56                   	push   esi
c002bcd1:	e8 ba 29 00 00       	call   c002e690 <__udivdi3>
c002bcd6:	83 c4 10             	add    esp,0x10
c002bcd9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bcde:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bce5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bcea:	6a 00                	push   0x0
c002bcec:	6a 3f                	push   0x3f
c002bcee:	57                   	push   edi
c002bcef:	56                   	push   esi
c002bcf0:	e8 9b 29 00 00       	call   c002e690 <__udivdi3>
c002bcf5:	83 c4 10             	add    esp,0x10
c002bcf8:	83 e0 0f             	and    eax,0xf
c002bcfb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002bd00:	89 c6                	mov    esi,eax
c002bd02:	eb 07                	jmp    c002bd0b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bd04:	31 f6                	xor    esi,esi
c002bd06:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002bd0b:	bf 01 00 00 00       	mov    edi,0x1
c002bd10:	50                   	push   eax
c002bd11:	6a 00                	push   0x0
c002bd13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd1a:	50                   	push   eax
c002bd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bd1f:	e8 90 f1 ff ff       	call   c002aeb4 <IDE::enableIRQs(unsigned char, bool)>
c002bd24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bd27:	e8 9c fe ff ff       	call   c002bbc8 <ATA::readyForCommand()>
c002bd2c:	83 c4 10             	add    esp,0x10
c002bd2f:	84 c0                	test   al,al
c002bd31:	0f 84 69 02 00 00    	je     c002bfa0 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bd37:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bd3d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bd43:	c1 e0 04             	shl    eax,0x4
c002bd46:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bd4d:	09 c6                	or     esi,eax
c002bd4f:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002bd54:	75 05                	jne    c002bd5b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bd56:	83 ce a0             	or     esi,0xffffffa0
c002bd59:	eb 03                	jmp    c002bd5e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002bd5b:	83 ce e0             	or     esi,0xffffffe0
c002bd5e:	89 f0                	mov    eax,esi
c002bd60:	0f b6 f0             	movzx  esi,al
c002bd63:	56                   	push   esi
c002bd64:	6a 06                	push   0x6
c002bd66:	51                   	push   ecx
c002bd67:	52                   	push   edx
c002bd68:	e8 3f ef ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd6d:	83 c4 10             	add    esp,0x10
c002bd70:	6a 00                	push   0x0
c002bd72:	6a 01                	push   0x1
c002bd74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd7b:	50                   	push   eax
c002bd7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd82:	e8 25 ef ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd87:	83 c4 10             	add    esp,0x10
c002bd8a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002bd8f:	83 f8 02             	cmp    eax,0x2
c002bd92:	75 6e                	jne    c002be02 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002bd94:	6a 00                	push   0x0
c002bd96:	6a 08                	push   0x8
c002bd98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd9f:	50                   	push   eax
c002bda0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bda6:	e8 01 ef ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdab:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bdb0:	50                   	push   eax
c002bdb1:	6a 09                	push   0x9
c002bdb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdba:	50                   	push   eax
c002bdbb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdc1:	e8 e6 ee ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdc6:	83 c4 20             	add    esp,0x20
c002bdc9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002bdce:	50                   	push   eax
c002bdcf:	6a 0a                	push   0xa
c002bdd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdd8:	50                   	push   eax
c002bdd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bddf:	e8 c8 ee ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bde4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002bde9:	50                   	push   eax
c002bdea:	6a 0b                	push   0xb
c002bdec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdf3:	50                   	push   eax
c002bdf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdfa:	e8 ad ee ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdff:	83 c4 20             	add    esp,0x20
c002be02:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002be07:	50                   	push   eax
c002be08:	6a 02                	push   0x2
c002be0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be11:	50                   	push   eax
c002be12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be18:	e8 8f ee ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be1d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002be22:	50                   	push   eax
c002be23:	6a 03                	push   0x3
c002be25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be2c:	50                   	push   eax
c002be2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be33:	e8 74 ee ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be38:	83 c4 20             	add    esp,0x20
c002be3b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002be40:	50                   	push   eax
c002be41:	6a 04                	push   0x4
c002be43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be4a:	50                   	push   eax
c002be4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be51:	e8 56 ee ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be56:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002be5b:	50                   	push   eax
c002be5c:	6a 05                	push   0x5
c002be5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be65:	50                   	push   eax
c002be66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be6c:	e8 3b ee ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be71:	83 c4 20             	add    esp,0x20
c002be74:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002be79:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002be7e:	74 11                	je     c002be91 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002be80:	b8 30 00 00 00       	mov    eax,0x30
c002be85:	83 fa 02             	cmp    edx,0x2
c002be88:	75 16                	jne    c002bea0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002be8a:	b8 34 00 00 00       	mov    eax,0x34
c002be8f:	eb 0f                	jmp    c002bea0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002be91:	b8 20 00 00 00       	mov    eax,0x20
c002be96:	83 fa 02             	cmp    edx,0x2
c002be99:	75 05                	jne    c002bea0 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002be9b:	b8 24 00 00 00       	mov    eax,0x24
c002bea0:	50                   	push   eax
c002bea1:	6a 07                	push   0x7
c002bea3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002beaa:	50                   	push   eax
c002beab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002beb1:	e8 f6 ed ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002beb6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002beba:	83 c4 10             	add    esp,0x10
c002bebd:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002bec2:	85 f6                	test   esi,esi
c002bec4:	0f 84 b3 00 00 00    	je     c002bf7d <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002beca:	50                   	push   eax
c002becb:	6a 01                	push   0x1
c002becd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bed4:	50                   	push   eax
c002bed5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bedb:	e8 b4 f8 ff ff       	call   c002b794 <IDE::polling(unsigned char, unsigned int)>
c002bee0:	83 c4 10             	add    esp,0x10
c002bee3:	0f b6 f8             	movzx  edi,al
c002bee6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002beec:	85 ff                	test   edi,edi
c002beee:	74 1d                	je     c002bf0d <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002bef0:	57                   	push   edi
c002bef1:	0f b6 d2             	movzx  edx,dl
c002bef4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002befb:	50                   	push   eax
c002befc:	52                   	push   edx
c002befd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf03:	e8 d2 f7 ff ff       	call   c002b6da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002bf08:	e9 90 00 00 00       	jmp    c002bf9d <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002bf0d:	85 ed                	test   ebp,ebp
c002bf0f:	74 3b                	je     c002bf4c <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002bf11:	31 c9                	xor    ecx,ecx
c002bf13:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002bf17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002bf1b:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002bf1f:	50                   	push   eax
c002bf20:	50                   	push   eax
c002bf21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf28:	50                   	push   eax
c002bf29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf2f:	e8 66 ed ff ff       	call   c002ac9a <IDE::getBase(unsigned char)>
c002bf34:	89 c2                	mov    edx,eax
c002bf36:	89 f8                	mov    eax,edi
c002bf38:	66 ef                	out    dx,ax
c002bf3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002bf3e:	83 c4 10             	add    esp,0x10
c002bf41:	41                   	inc    ecx
c002bf42:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002bf48:	75 c9                	jne    c002bf13 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002bf4a:	eb 23                	jmp    c002bf6f <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002bf4c:	0f b6 d2             	movzx  edx,dl
c002bf4f:	51                   	push   ecx
c002bf50:	51                   	push   ecx
c002bf51:	52                   	push   edx
c002bf52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf58:	e8 3d ed ff ff       	call   c002ac9a <IDE::getBase(unsigned char)>
c002bf5d:	b9 00 01 00 00       	mov    ecx,0x100
c002bf62:	89 c2                	mov    edx,eax
c002bf64:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002bf68:	fc                   	cld    
c002bf69:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002bf6c:	83 c4 10             	add    esp,0x10
c002bf6f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002bf77:	4e                   	dec    esi
c002bf78:	e9 45 ff ff ff       	jmp    c002bec2 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002bf7d:	31 ff                	xor    edi,edi
c002bf7f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bf84:	74 1a                	je     c002bfa0 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bf86:	50                   	push   eax
c002bf87:	50                   	push   eax
c002bf88:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002bf8d:	83 f8 02             	cmp    eax,0x2
c002bf90:	0f 94 c0             	sete   al
c002bf93:	0f b6 c0             	movzx  eax,al
c002bf96:	50                   	push   eax
c002bf97:	53                   	push   ebx
c002bf98:	e8 dd fb ff ff       	call   c002bb7a <ATA::flush(bool)>
c002bf9d:	83 c4 10             	add    esp,0x10
c002bfa0:	83 c4 2c             	add    esp,0x2c
c002bfa3:	89 f8                	mov    eax,edi
c002bfa5:	5b                   	pop    ebx
c002bfa6:	5e                   	pop    esi
c002bfa7:	5f                   	pop    edi
c002bfa8:	5d                   	pop    ebp
c002bfa9:	c3                   	ret    

c002bfaa <ATA::detectCHS()>:
c002bfaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bfae:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002bfb4:	c1 e0 06             	shl    eax,0x6
c002bfb7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002bfbd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002bfc7:	c7 44 24 04 90 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033890
c002bfcf:	e9 a2 42 ff ff       	jmp    c0020276 <KePanic(char const*)>

c002bfd4 <ATA::open(int, int, void*)>:
c002bfd4:	53                   	push   ebx
c002bfd5:	83 ec 08             	sub    esp,0x8
c002bfd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bfdc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bfe0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002bfe4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002bfea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002bff0:	c1 e0 06             	shl    eax,0x6
c002bff3:	01 d0                	add    eax,edx
c002bff5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002bffc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c002:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c009:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c013:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c019:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c020:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c027:	75 0c                	jne    c002c035 <ATA::open(int, int, void*)+0x61>
c002c029:	83 ec 0c             	sub    esp,0xc
c002c02c:	53                   	push   ebx
c002c02d:	e8 78 ff ff ff       	call   c002bfaa <ATA::detectCHS()>
c002c032:	83 c4 10             	add    esp,0x10
c002c035:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c03b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c041:	c1 e0 06             	shl    eax,0x6
c002c044:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c04b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c055:	d1 e8                	shr    eax,1
c002c057:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c05d:	6a 04                	push   0x4
c002c05f:	6a 0c                	push   0xc
c002c061:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c068:	50                   	push   eax
c002c069:	52                   	push   edx
c002c06a:	e8 3d ec ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c06f:	90                   	nop
c002c070:	90                   	nop
c002c071:	6a 00                	push   0x0
c002c073:	6a 0c                	push   0xc
c002c075:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c07c:	50                   	push   eax
c002c07d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c083:	e8 24 ec ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c088:	83 c4 14             	add    esp,0x14
c002c08b:	53                   	push   ebx
c002c08c:	e8 99 f6 fe ff       	call   c001b72a <PhysicalDisk::startCache()>
c002c091:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c094:	e8 cd 08 ff ff       	call   c001c966 <createPartitionsForDisk(PhysicalDisk*)>
c002c099:	31 c0                	xor    eax,eax
c002c09b:	83 c4 18             	add    esp,0x18
c002c09e:	5b                   	pop    ebx
c002c09f:	c3                   	ret    

c002c0a0 <combineCharAndColour(char, unsigned char)>:
c002c0a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c0a5:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c0ab:	c1 e0 08             	shl    eax,0x8
c002c0ae:	09 d0                	or     eax,edx
c002c0b0:	c3                   	ret    

c002c0b1 <combineColours(unsigned char, unsigned char)>:
c002c0b1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c0b6:	c1 e0 04             	shl    eax,0x4
c002c0b9:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c0bd:	c3                   	ret    

c002c0be <ATA::read(unsigned long long, int, void*)>:
c002c0be:	55                   	push   ebp
c002c0bf:	57                   	push   edi
c002c0c0:	56                   	push   esi
c002c0c1:	be 04 00 00 00       	mov    esi,0x4
c002c0c6:	53                   	push   ebx
c002c0c7:	83 ec 0c             	sub    esp,0xc
c002c0ca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c0ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c0d2:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c0d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c0d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c0dd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c0e3:	0f 87 a1 01 00 00    	ja     c002c28a <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c0e9:	be 06 00 00 00       	mov    esi,0x6
c002c0ee:	85 c9                	test   ecx,ecx
c002c0f0:	0f 84 94 01 00 00    	je     c002c28a <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c0f6:	55                   	push   ebp
c002c0f7:	55                   	push   ebp
c002c0f8:	6a 00                	push   0x0
c002c0fa:	51                   	push   ecx
c002c0fb:	53                   	push   ebx
c002c0fc:	52                   	push   edx
c002c0fd:	50                   	push   eax
c002c0fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c102:	e8 0d fb ff ff       	call   c002bc14 <ATA::access(unsigned long long, int, void*, bool)>
c002c107:	83 c4 20             	add    esp,0x20
c002c10a:	89 c6                	mov    esi,eax
c002c10c:	85 c0                	test   eax,eax
c002c10e:	0f 85 71 01 00 00    	jne    c002c285 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c114:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c11a:	89 da                	mov    edx,ebx
c002c11c:	50                   	push   eax
c002c11d:	bd 10 27 00 00       	mov    ebp,0x2710
c002c122:	50                   	push   eax
c002c123:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c129:	6a 0f                	push   0xf
c002c12b:	6a 00                	push   0x0
c002c12d:	e8 7f ff ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002c132:	59                   	pop    ecx
c002c133:	b9 0a 00 00 00       	mov    ecx,0xa
c002c138:	5b                   	pop    ebx
c002c139:	0f b6 d8             	movzx  ebx,al
c002c13c:	89 d0                	mov    eax,edx
c002c13e:	53                   	push   ebx
c002c13f:	99                   	cdq    
c002c140:	f7 fd                	idiv   ebp
c002c142:	99                   	cdq    
c002c143:	f7 f9                	idiv   ecx
c002c145:	83 c2 30             	add    edx,0x30
c002c148:	0f b6 d2             	movzx  edx,dl
c002c14b:	52                   	push   edx
c002c14c:	e8 4f ff ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c151:	5f                   	pop    edi
c002c152:	bf e8 03 00 00       	mov    edi,0x3e8
c002c157:	5a                   	pop    edx
c002c158:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c15e:	53                   	push   ebx
c002c15f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c164:	99                   	cdq    
c002c165:	f7 ff                	idiv   edi
c002c167:	99                   	cdq    
c002c168:	f7 f9                	idiv   ecx
c002c16a:	8d 42 30             	lea    eax,[edx+0x30]
c002c16d:	0f b6 c0             	movzx  eax,al
c002c170:	50                   	push   eax
c002c171:	e8 2a ff ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c176:	5f                   	pop    edi
c002c177:	bf 64 00 00 00       	mov    edi,0x64
c002c17c:	5a                   	pop    edx
c002c17d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c183:	53                   	push   ebx
c002c184:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c189:	99                   	cdq    
c002c18a:	f7 ff                	idiv   edi
c002c18c:	99                   	cdq    
c002c18d:	f7 f9                	idiv   ecx
c002c18f:	8d 42 30             	lea    eax,[edx+0x30]
c002c192:	0f b6 c0             	movzx  eax,al
c002c195:	50                   	push   eax
c002c196:	e8 05 ff ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c19b:	5a                   	pop    edx
c002c19c:	5a                   	pop    edx
c002c19d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c1a3:	53                   	push   ebx
c002c1a4:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c1a9:	99                   	cdq    
c002c1aa:	f7 f9                	idiv   ecx
c002c1ac:	99                   	cdq    
c002c1ad:	f7 f9                	idiv   ecx
c002c1af:	8d 42 30             	lea    eax,[edx+0x30]
c002c1b2:	0f b6 c0             	movzx  eax,al
c002c1b5:	50                   	push   eax
c002c1b6:	e8 e5 fe ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c1bb:	5a                   	pop    edx
c002c1bc:	5a                   	pop    edx
c002c1bd:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c1c3:	53                   	push   ebx
c002c1c4:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c1c9:	99                   	cdq    
c002c1ca:	f7 f9                	idiv   ecx
c002c1cc:	83 c2 30             	add    edx,0x30
c002c1cf:	0f b6 d2             	movzx  edx,dl
c002c1d2:	52                   	push   edx
c002c1d3:	e8 c8 fe ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c1d8:	5a                   	pop    edx
c002c1d9:	5a                   	pop    edx
c002c1da:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c1e0:	53                   	push   ebx
c002c1e1:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1e6:	99                   	cdq    
c002c1e7:	f7 fd                	idiv   ebp
c002c1e9:	99                   	cdq    
c002c1ea:	f7 f9                	idiv   ecx
c002c1ec:	8d 42 30             	lea    eax,[edx+0x30]
c002c1ef:	0f b6 c0             	movzx  eax,al
c002c1f2:	50                   	push   eax
c002c1f3:	e8 a8 fe ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c1f8:	5d                   	pop    ebp
c002c1f9:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c1fe:	5a                   	pop    edx
c002c1ff:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c205:	53                   	push   ebx
c002c206:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c20b:	99                   	cdq    
c002c20c:	f7 fd                	idiv   ebp
c002c20e:	99                   	cdq    
c002c20f:	f7 f9                	idiv   ecx
c002c211:	8d 42 30             	lea    eax,[edx+0x30]
c002c214:	0f b6 c0             	movzx  eax,al
c002c217:	50                   	push   eax
c002c218:	e8 83 fe ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c21d:	5d                   	pop    ebp
c002c21e:	5a                   	pop    edx
c002c21f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c225:	53                   	push   ebx
c002c226:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c22b:	99                   	cdq    
c002c22c:	f7 ff                	idiv   edi
c002c22e:	99                   	cdq    
c002c22f:	f7 f9                	idiv   ecx
c002c231:	8d 42 30             	lea    eax,[edx+0x30]
c002c234:	0f b6 c0             	movzx  eax,al
c002c237:	50                   	push   eax
c002c238:	e8 63 fe ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c23d:	5f                   	pop    edi
c002c23e:	5d                   	pop    ebp
c002c23f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c245:	53                   	push   ebx
c002c246:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c24b:	99                   	cdq    
c002c24c:	f7 f9                	idiv   ecx
c002c24e:	99                   	cdq    
c002c24f:	f7 f9                	idiv   ecx
c002c251:	8d 42 30             	lea    eax,[edx+0x30]
c002c254:	0f b6 c0             	movzx  eax,al
c002c257:	50                   	push   eax
c002c258:	e8 43 fe ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c25d:	5a                   	pop    edx
c002c25e:	5f                   	pop    edi
c002c25f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c265:	53                   	push   ebx
c002c266:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c26b:	99                   	cdq    
c002c26c:	f7 f9                	idiv   ecx
c002c26e:	83 c2 30             	add    edx,0x30
c002c271:	0f b6 d2             	movzx  edx,dl
c002c274:	52                   	push   edx
c002c275:	e8 26 fe ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c27a:	83 c4 10             	add    esp,0x10
c002c27d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c283:	eb 05                	jmp    c002c28a <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c285:	be 01 00 00 00       	mov    esi,0x1
c002c28a:	83 c4 0c             	add    esp,0xc
c002c28d:	89 f0                	mov    eax,esi
c002c28f:	5b                   	pop    ebx
c002c290:	5e                   	pop    esi
c002c291:	5f                   	pop    edi
c002c292:	5d                   	pop    ebp
c002c293:	c3                   	ret    

c002c294 <ATA::write(unsigned long long, int, void*)>:
c002c294:	55                   	push   ebp
c002c295:	57                   	push   edi
c002c296:	56                   	push   esi
c002c297:	be 04 00 00 00       	mov    esi,0x4
c002c29c:	53                   	push   ebx
c002c29d:	83 ec 0c             	sub    esp,0xc
c002c2a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c2a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c2a8:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c2ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c2af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c2b3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c2b9:	0f 87 9c 01 00 00    	ja     c002c45b <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c2bf:	be 06 00 00 00       	mov    esi,0x6
c002c2c4:	85 c9                	test   ecx,ecx
c002c2c6:	0f 84 8f 01 00 00    	je     c002c45b <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c2cc:	55                   	push   ebp
c002c2cd:	55                   	push   ebp
c002c2ce:	6a 01                	push   0x1
c002c2d0:	51                   	push   ecx
c002c2d1:	53                   	push   ebx
c002c2d2:	52                   	push   edx
c002c2d3:	50                   	push   eax
c002c2d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c2d8:	e8 37 f9 ff ff       	call   c002bc14 <ATA::access(unsigned long long, int, void*, bool)>
c002c2dd:	83 c4 20             	add    esp,0x20
c002c2e0:	89 c6                	mov    esi,eax
c002c2e2:	85 c0                	test   eax,eax
c002c2e4:	0f 85 6c 01 00 00    	jne    c002c456 <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c2ea:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c2f0:	bd 10 27 00 00       	mov    ebp,0x2710
c002c2f5:	50                   	push   eax
c002c2f6:	50                   	push   eax
c002c2f7:	6a 0f                	push   0xf
c002c2f9:	6a 00                	push   0x0
c002c2fb:	e8 b1 fd ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002c300:	5a                   	pop    edx
c002c301:	0f b6 d8             	movzx  ebx,al
c002c304:	59                   	pop    ecx
c002c305:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c30a:	53                   	push   ebx
c002c30b:	b9 0a 00 00 00       	mov    ecx,0xa
c002c310:	99                   	cdq    
c002c311:	f7 fd                	idiv   ebp
c002c313:	99                   	cdq    
c002c314:	f7 f9                	idiv   ecx
c002c316:	8d 42 30             	lea    eax,[edx+0x30]
c002c319:	0f b6 c0             	movzx  eax,al
c002c31c:	50                   	push   eax
c002c31d:	e8 7e fd ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c322:	5f                   	pop    edi
c002c323:	bf e8 03 00 00       	mov    edi,0x3e8
c002c328:	5a                   	pop    edx
c002c329:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c32f:	53                   	push   ebx
c002c330:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c335:	99                   	cdq    
c002c336:	f7 ff                	idiv   edi
c002c338:	99                   	cdq    
c002c339:	f7 f9                	idiv   ecx
c002c33b:	8d 42 30             	lea    eax,[edx+0x30]
c002c33e:	0f b6 c0             	movzx  eax,al
c002c341:	50                   	push   eax
c002c342:	e8 59 fd ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c347:	5f                   	pop    edi
c002c348:	bf 64 00 00 00       	mov    edi,0x64
c002c34d:	5a                   	pop    edx
c002c34e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c354:	53                   	push   ebx
c002c355:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c35a:	99                   	cdq    
c002c35b:	f7 ff                	idiv   edi
c002c35d:	99                   	cdq    
c002c35e:	f7 f9                	idiv   ecx
c002c360:	8d 42 30             	lea    eax,[edx+0x30]
c002c363:	0f b6 c0             	movzx  eax,al
c002c366:	50                   	push   eax
c002c367:	e8 34 fd ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c36c:	5a                   	pop    edx
c002c36d:	5a                   	pop    edx
c002c36e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c374:	53                   	push   ebx
c002c375:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c37a:	99                   	cdq    
c002c37b:	f7 f9                	idiv   ecx
c002c37d:	99                   	cdq    
c002c37e:	f7 f9                	idiv   ecx
c002c380:	8d 42 30             	lea    eax,[edx+0x30]
c002c383:	0f b6 c0             	movzx  eax,al
c002c386:	50                   	push   eax
c002c387:	e8 14 fd ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c38c:	5a                   	pop    edx
c002c38d:	5a                   	pop    edx
c002c38e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c394:	53                   	push   ebx
c002c395:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c39a:	99                   	cdq    
c002c39b:	f7 f9                	idiv   ecx
c002c39d:	8d 42 30             	lea    eax,[edx+0x30]
c002c3a0:	0f b6 c0             	movzx  eax,al
c002c3a3:	50                   	push   eax
c002c3a4:	e8 f7 fc ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c3a9:	5a                   	pop    edx
c002c3aa:	5a                   	pop    edx
c002c3ab:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c3b1:	53                   	push   ebx
c002c3b2:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3b7:	99                   	cdq    
c002c3b8:	f7 fd                	idiv   ebp
c002c3ba:	99                   	cdq    
c002c3bb:	f7 f9                	idiv   ecx
c002c3bd:	8d 42 30             	lea    eax,[edx+0x30]
c002c3c0:	0f b6 c0             	movzx  eax,al
c002c3c3:	50                   	push   eax
c002c3c4:	e8 d7 fc ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c3c9:	5d                   	pop    ebp
c002c3ca:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c3cf:	5a                   	pop    edx
c002c3d0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c3d6:	53                   	push   ebx
c002c3d7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3dc:	99                   	cdq    
c002c3dd:	f7 fd                	idiv   ebp
c002c3df:	99                   	cdq    
c002c3e0:	f7 f9                	idiv   ecx
c002c3e2:	8d 42 30             	lea    eax,[edx+0x30]
c002c3e5:	0f b6 c0             	movzx  eax,al
c002c3e8:	50                   	push   eax
c002c3e9:	e8 b2 fc ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c3ee:	5d                   	pop    ebp
c002c3ef:	5a                   	pop    edx
c002c3f0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c3f6:	53                   	push   ebx
c002c3f7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3fc:	99                   	cdq    
c002c3fd:	f7 ff                	idiv   edi
c002c3ff:	99                   	cdq    
c002c400:	f7 f9                	idiv   ecx
c002c402:	8d 42 30             	lea    eax,[edx+0x30]
c002c405:	0f b6 c0             	movzx  eax,al
c002c408:	50                   	push   eax
c002c409:	e8 92 fc ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c40e:	5f                   	pop    edi
c002c40f:	5d                   	pop    ebp
c002c410:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c416:	53                   	push   ebx
c002c417:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c41c:	99                   	cdq    
c002c41d:	f7 f9                	idiv   ecx
c002c41f:	99                   	cdq    
c002c420:	f7 f9                	idiv   ecx
c002c422:	8d 42 30             	lea    eax,[edx+0x30]
c002c425:	0f b6 c0             	movzx  eax,al
c002c428:	50                   	push   eax
c002c429:	e8 72 fc ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c42e:	5a                   	pop    edx
c002c42f:	5f                   	pop    edi
c002c430:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c436:	53                   	push   ebx
c002c437:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c43c:	99                   	cdq    
c002c43d:	f7 f9                	idiv   ecx
c002c43f:	83 c2 30             	add    edx,0x30
c002c442:	0f b6 d2             	movzx  edx,dl
c002c445:	52                   	push   edx
c002c446:	e8 55 fc ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002c44b:	83 c4 10             	add    esp,0x10
c002c44e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c454:	eb 05                	jmp    c002c45b <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c456:	be 01 00 00 00       	mov    esi,0x1
c002c45b:	83 c4 0c             	add    esp,0xc
c002c45e:	89 f0                	mov    eax,esi
c002c460:	5b                   	pop    ebx
c002c461:	5e                   	pop    esi
c002c462:	5f                   	pop    edi
c002c463:	5d                   	pop    ebp
c002c464:	c3                   	ret    
c002c465:	90                   	nop

c002c466 <ATAPI::write(unsigned long long, int, void*)>:
c002c466:	b8 03 00 00 00       	mov    eax,0x3
c002c46b:	c3                   	ret    

c002c46c <ATAPI::close(int, int, void*)>:
c002c46c:	83 ec 0c             	sub    esp,0xc
c002c46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c473:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c479:	85 c0                	test   eax,eax
c002c47b:	74 0c                	je     c002c489 <ATAPI::close(int, int, void*)+0x1d>
c002c47d:	83 ec 0c             	sub    esp,0xc
c002c480:	8b 10                	mov    edx,DWORD PTR [eax]
c002c482:	50                   	push   eax
c002c483:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c486:	83 c4 10             	add    esp,0x10
c002c489:	31 c0                	xor    eax,eax
c002c48b:	83 c4 0c             	add    esp,0xc
c002c48e:	c3                   	ret    
c002c48f:	90                   	nop

c002c490 <ATAPI::ATAPI()>:
c002c490:	83 ec 0c             	sub    esp,0xc
c002c493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c497:	83 ec 04             	sub    esp,0x4
c002c49a:	68 00 08 00 00       	push   0x800
c002c49f:	68 e5 39 03 c0       	push   0xc00339e5
c002c4a4:	50                   	push   eax
c002c4a5:	e8 18 f2 fe ff       	call   c001b6c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c4aa:	83 c4 10             	add    esp,0x10
c002c4ad:	ba f4 38 03 c0       	mov    edx,0xc00338f4
c002c4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c4b6:	89 10                	mov    DWORD PTR [eax],edx
c002c4b8:	90                   	nop
c002c4b9:	83 c4 0c             	add    esp,0xc
c002c4bc:	c3                   	ret    
c002c4bd:	90                   	nop

c002c4be <ATAPI::readyForCommand()>:
c002c4be:	56                   	push   esi
c002c4bf:	53                   	push   ebx
c002c4c0:	53                   	push   ebx
c002c4c1:	31 db                	xor    ebx,ebx
c002c4c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c4c7:	51                   	push   ecx
c002c4c8:	6a 0c                	push   0xc
c002c4ca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c4d1:	50                   	push   eax
c002c4d2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c4d8:	e8 8f e8 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002c4dd:	83 c4 10             	add    esp,0x10
c002c4e0:	a8 88                	test   al,0x88
c002c4e2:	74 25                	je     c002c509 <ATAPI::readyForCommand()+0x4b>
c002c4e4:	43                   	inc    ebx
c002c4e5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c4eb:	7e da                	jle    c002c4c7 <ATAPI::readyForCommand()+0x9>
c002c4ed:	83 ec 0c             	sub    esp,0xc
c002c4f0:	68 5e 01 00 00       	push   0x15e
c002c4f5:	e8 6a 8f ff ff       	call   c0025464 <milliTenthSleep(unsigned int)>
c002c4fa:	83 c4 10             	add    esp,0x10
c002c4fd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c503:	75 c2                	jne    c002c4c7 <ATAPI::readyForCommand()+0x9>
c002c505:	31 c0                	xor    eax,eax
c002c507:	eb 02                	jmp    c002c50b <ATAPI::readyForCommand()+0x4d>
c002c509:	b0 01                	mov    al,0x1
c002c50b:	5a                   	pop    edx
c002c50c:	5b                   	pop    ebx
c002c50d:	5e                   	pop    esi
c002c50e:	c3                   	ret    
c002c50f:	90                   	nop

c002c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c510:	55                   	push   ebp
c002c511:	57                   	push   edi
c002c512:	56                   	push   esi
c002c513:	53                   	push   ebx
c002c514:	83 ec 20             	sub    esp,0x20
c002c517:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c51b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002c51f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c523:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002c527:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c52b:	6a 01                	push   0x1
c002c52d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c534:	50                   	push   eax
c002c535:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c53b:	e8 74 e9 ff ff       	call   c002aeb4 <IDE::enableIRQs(unsigned char, bool)>
c002c540:	5e                   	pop    esi
c002c541:	58                   	pop    eax
c002c542:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c549:	50                   	push   eax
c002c54a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c550:	e8 31 e7 ff ff       	call   c002ac86 <IDE::prepareInterrupt(unsigned char)>
c002c555:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c558:	e8 61 ff ff ff       	call   c002c4be <ATAPI::readyForCommand()>
c002c55d:	83 c4 10             	add    esp,0x10
c002c560:	84 c0                	test   al,al
c002c562:	75 0a                	jne    c002c56e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002c564:	bb 01 00 00 00       	mov    ebx,0x1
c002c569:	e9 60 02 00 00       	jmp    c002c7ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c56e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c574:	c1 e0 04             	shl    eax,0x4
c002c577:	0f b6 c0             	movzx  eax,al
c002c57a:	50                   	push   eax
c002c57b:	6a 06                	push   0x6
c002c57d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c584:	50                   	push   eax
c002c585:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c58b:	e8 1c e7 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c590:	6a 00                	push   0x0
c002c592:	6a 01                	push   0x1
c002c594:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c59b:	50                   	push   eax
c002c59c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5a2:	e8 05 e7 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5a7:	83 c4 20             	add    esp,0x20
c002c5aa:	0f b6 c3             	movzx  eax,bl
c002c5ad:	0f b6 df             	movzx  ebx,bh
c002c5b0:	50                   	push   eax
c002c5b1:	6a 04                	push   0x4
c002c5b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5ba:	50                   	push   eax
c002c5bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5c1:	e8 e6 e6 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5c6:	53                   	push   ebx
c002c5c7:	6a 05                	push   0x5
c002c5c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5d0:	50                   	push   eax
c002c5d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5d7:	e8 d0 e6 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5dc:	83 c4 20             	add    esp,0x20
c002c5df:	68 a0 00 00 00       	push   0xa0
c002c5e4:	6a 07                	push   0x7
c002c5e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5ed:	50                   	push   eax
c002c5ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5f4:	e8 b3 e6 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5f9:	83 c4 0c             	add    esp,0xc
c002c5fc:	6a 01                	push   0x1
c002c5fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c605:	50                   	push   eax
c002c606:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c60c:	e8 83 f1 ff ff       	call   c002b794 <IDE::polling(unsigned char, unsigned int)>
c002c611:	83 c4 10             	add    esp,0x10
c002c614:	0f b6 d8             	movzx  ebx,al
c002c617:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c61d:	85 db                	test   ebx,ebx
c002c61f:	74 20                	je     c002c641 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002c621:	53                   	push   ebx
c002c622:	0f b6 c0             	movzx  eax,al
c002c625:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c62c:	52                   	push   edx
c002c62d:	50                   	push   eax
c002c62e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c634:	e8 a1 f0 ff ff       	call   c002b6da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c639:	83 c4 10             	add    esp,0x10
c002c63c:	e9 8d 01 00 00       	jmp    c002c7ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c641:	0f b6 c0             	movzx  eax,al
c002c644:	53                   	push   ebx
c002c645:	53                   	push   ebx
c002c646:	50                   	push   eax
c002c647:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c64d:	e8 48 e6 ff ff       	call   c002ac9a <IDE::getBase(unsigned char)>
c002c652:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c656:	b9 06 00 00 00       	mov    ecx,0x6
c002c65b:	89 c2                	mov    edx,eax
c002c65d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c660:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c664:	83 c4 10             	add    esp,0x10
c002c667:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002c66c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c670:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c676:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c67d:	85 db                	test   ebx,ebx
c002c67f:	0f 84 ec 00 00 00    	je     c002c771 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002c685:	51                   	push   ecx
c002c686:	51                   	push   ecx
c002c687:	52                   	push   edx
c002c688:	50                   	push   eax
c002c689:	e8 8c e7 ff ff       	call   c002ae1a <IDE::waitInterrupt(unsigned char)>
c002c68e:	83 c4 10             	add    esp,0x10
c002c691:	84 c0                	test   al,al
c002c693:	0f 84 cb fe ff ff    	je     c002c564 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c699:	56                   	push   esi
c002c69a:	56                   	push   esi
c002c69b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c6a2:	50                   	push   eax
c002c6a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6a9:	e8 d8 e5 ff ff       	call   c002ac86 <IDE::prepareInterrupt(unsigned char)>
c002c6ae:	83 c4 0c             	add    esp,0xc
c002c6b1:	6a 04                	push   0x4
c002c6b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c6ba:	50                   	push   eax
c002c6bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6c1:	e8 a6 e6 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002c6c6:	83 c4 0c             	add    esp,0xc
c002c6c9:	89 c6                	mov    esi,eax
c002c6cb:	6a 05                	push   0x5
c002c6cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c6d4:	50                   	push   eax
c002c6d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6db:	e8 8c e6 ff ff       	call   c002ad6c <IDE::read(unsigned char, unsigned char)>
c002c6e0:	89 f1                	mov    ecx,esi
c002c6e2:	0f b6 c0             	movzx  eax,al
c002c6e5:	0f b6 f1             	movzx  esi,cl
c002c6e8:	c1 e0 08             	shl    eax,0x8
c002c6eb:	09 c6                	or     esi,eax
c002c6ed:	d1 fe                	sar    esi,1
c002c6ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002c6f3:	83 c4 10             	add    esp,0x10
c002c6f6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002c6fb:	74 41                	je     c002c73e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002c6fd:	31 c9                	xor    ecx,ecx
c002c6ff:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c705:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c70c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002c710:	75 0a                	jne    c002c71c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002c712:	01 c9                	add    ecx,ecx
c002c714:	01 cd                	add    ebp,ecx
c002c716:	4b                   	dec    ebx
c002c717:	e9 54 ff ff ff       	jmp    c002c670 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002c71c:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002c721:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002c725:	51                   	push   ecx
c002c726:	51                   	push   ecx
c002c727:	52                   	push   edx
c002c728:	50                   	push   eax
c002c729:	e8 6c e5 ff ff       	call   c002ac9a <IDE::getBase(unsigned char)>
c002c72e:	89 c2                	mov    edx,eax
c002c730:	89 f0                	mov    eax,esi
c002c732:	66 ef                	out    dx,ax
c002c734:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002c738:	83 c4 10             	add    esp,0x10
c002c73b:	41                   	inc    ecx
c002c73c:	eb c1                	jmp    c002c6ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002c73e:	31 f6                	xor    esi,esi
c002c740:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c746:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c74d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002c751:	75 06                	jne    c002c759 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002c753:	01 f6                	add    esi,esi
c002c755:	01 f5                	add    ebp,esi
c002c757:	eb bd                	jmp    c002c716 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002c759:	51                   	push   ecx
c002c75a:	51                   	push   ecx
c002c75b:	52                   	push   edx
c002c75c:	50                   	push   eax
c002c75d:	e8 38 e5 ff ff       	call   c002ac9a <IDE::getBase(unsigned char)>
c002c762:	89 c2                	mov    edx,eax
c002c764:	66 ed                	in     ax,dx
c002c766:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002c76b:	83 c4 10             	add    esp,0x10
c002c76e:	46                   	inc    esi
c002c76f:	eb cf                	jmp    c002c740 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002c771:	51                   	push   ecx
c002c772:	51                   	push   ecx
c002c773:	52                   	push   edx
c002c774:	50                   	push   eax
c002c775:	e8 a0 e6 ff ff       	call   c002ae1a <IDE::waitInterrupt(unsigned char)>
c002c77a:	83 c4 10             	add    esp,0x10
c002c77d:	84 c0                	test   al,al
c002c77f:	0f 84 df fd ff ff    	je     c002c564 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c785:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c78a:	52                   	push   edx
c002c78b:	52                   	push   edx
c002c78c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c793:	50                   	push   eax
c002c794:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c79a:	e8 e7 e4 ff ff       	call   c002ac86 <IDE::prepareInterrupt(unsigned char)>
c002c79f:	83 c4 10             	add    esp,0x10
c002c7a2:	50                   	push   eax
c002c7a3:	50                   	push   eax
c002c7a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7ab:	50                   	push   eax
c002c7ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7b2:	e8 e3 e4 ff ff       	call   c002ac9a <IDE::getBase(unsigned char)>
c002c7b7:	8d 50 07             	lea    edx,[eax+0x7]
c002c7ba:	ec                   	in     al,dx
c002c7bb:	83 c4 10             	add    esp,0x10
c002c7be:	a8 88                	test   al,0x88
c002c7c0:	74 0a                	je     c002c7cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002c7c2:	4b                   	dec    ebx
c002c7c3:	75 dd                	jne    c002c7a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002c7c5:	bb 02 00 00 00       	mov    ebx,0x2
c002c7ca:	eb 02                	jmp    c002c7ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c7cc:	31 db                	xor    ebx,ebx
c002c7ce:	83 c4 1c             	add    esp,0x1c
c002c7d1:	89 d8                	mov    eax,ebx
c002c7d3:	5b                   	pop    ebx
c002c7d4:	5e                   	pop    esi
c002c7d5:	5f                   	pop    edi
c002c7d6:	5d                   	pop    ebp
c002c7d7:	c3                   	ret    

c002c7d8 <ATAPI::diskRemoved()>:
c002c7d8:	53                   	push   ebx
c002c7d9:	83 ec 14             	sub    esp,0x14
c002c7dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c7e0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c7e7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c7ed:	e8 64 fe fe ff       	call   c001c656 <LogicalDisk::unmount()>
c002c7f2:	58                   	pop    eax
c002c7f3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c7f9:	e8 36 08 ff ff       	call   c001d034 <VCache::writeWriteBuffer()>
c002c7fe:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c804:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c808:	83 c4 18             	add    esp,0x18
c002c80b:	5b                   	pop    ebx
c002c80c:	e9 13 08 ff ff       	jmp    c001d024 <VCache::invalidateReadBuffer()>
c002c811:	90                   	nop

c002c812 <ATAPI::eject()>:
c002c812:	57                   	push   edi
c002c813:	b9 03 00 00 00       	mov    ecx,0x3
c002c818:	53                   	push   ebx
c002c819:	83 ec 14             	sub    esp,0x14
c002c81c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c820:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c824:	fc                   	cld    
c002c825:	31 c0                	xor    eax,eax
c002c827:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c829:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c82e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c833:	50                   	push   eax
c002c834:	50                   	push   eax
c002c835:	6a 00                	push   0x0
c002c837:	6a 00                	push   0x0
c002c839:	6a 00                	push   0x0
c002c83b:	6a 02                	push   0x2
c002c83d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c841:	50                   	push   eax
c002c842:	53                   	push   ebx
c002c843:	e8 c8 fc ff ff       	call   c002c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c848:	83 c4 14             	add    esp,0x14
c002c84b:	53                   	push   ebx
c002c84c:	e8 87 ff ff ff       	call   c002c7d8 <ATAPI::diskRemoved()>
c002c851:	83 c4 24             	add    esp,0x24
c002c854:	31 c0                	xor    eax,eax
c002c856:	5b                   	pop    ebx
c002c857:	5f                   	pop    edi
c002c858:	c3                   	ret    
c002c859:	90                   	nop

c002c85a <ATAPI::diskInserted()>:
c002c85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c85e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c865:	c3                   	ret    

c002c866 <ATAPI::detectMedia()>:
c002c866:	56                   	push   esi
c002c867:	53                   	push   ebx
c002c868:	83 ec 28             	sub    esp,0x28
c002c86b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c86f:	6a 0c                	push   0xc
c002c871:	6a 00                	push   0x0
c002c873:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c877:	56                   	push   esi
c002c878:	e8 73 3c fd ff       	call   c00004f0 <memset>
c002c87d:	58                   	pop    eax
c002c87e:	5a                   	pop    edx
c002c87f:	6a 00                	push   0x0
c002c881:	6a 00                	push   0x0
c002c883:	6a 00                	push   0x0
c002c885:	6a 00                	push   0x0
c002c887:	56                   	push   esi
c002c888:	53                   	push   ebx
c002c889:	e8 82 fc ff ff       	call   c002c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c88e:	83 c4 1c             	add    esp,0x1c
c002c891:	6a 0c                	push   0xc
c002c893:	6a 00                	push   0x0
c002c895:	56                   	push   esi
c002c896:	e8 55 3c fd ff       	call   c00004f0 <memset>
c002c89b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c8a0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c8a5:	59                   	pop    ecx
c002c8a6:	58                   	pop    eax
c002c8a7:	6a 01                	push   0x1
c002c8a9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c8ad:	50                   	push   eax
c002c8ae:	6a 00                	push   0x0
c002c8b0:	6a 12                	push   0x12
c002c8b2:	56                   	push   esi
c002c8b3:	53                   	push   ebx
c002c8b4:	e8 57 fc ff ff       	call   c002c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c8b9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c8bd:	83 c4 20             	add    esp,0x20
c002c8c0:	83 e0 7f             	and    eax,0x7f
c002c8c3:	83 f8 70             	cmp    eax,0x70
c002c8c6:	74 15                	je     c002c8dd <ATAPI::detectMedia()+0x77>
c002c8c8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c8cf:	75 0c                	jne    c002c8dd <ATAPI::detectMedia()+0x77>
c002c8d1:	83 ec 0c             	sub    esp,0xc
c002c8d4:	53                   	push   ebx
c002c8d5:	e8 80 ff ff ff       	call   c002c85a <ATAPI::diskInserted()>
c002c8da:	83 c4 10             	add    esp,0x10
c002c8dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c8e1:	83 e0 0f             	and    eax,0xf
c002c8e4:	83 f8 02             	cmp    eax,0x2
c002c8e7:	75 1b                	jne    c002c904 <ATAPI::detectMedia()+0x9e>
c002c8e9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c8ee:	75 2d                	jne    c002c91d <ATAPI::detectMedia()+0xb7>
c002c8f0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c8f7:	74 24                	je     c002c91d <ATAPI::detectMedia()+0xb7>
c002c8f9:	83 ec 0c             	sub    esp,0xc
c002c8fc:	53                   	push   ebx
c002c8fd:	e8 d6 fe ff ff       	call   c002c7d8 <ATAPI::diskRemoved()>
c002c902:	eb 16                	jmp    c002c91a <ATAPI::detectMedia()+0xb4>
c002c904:	85 c0                	test   eax,eax
c002c906:	75 15                	jne    c002c91d <ATAPI::detectMedia()+0xb7>
c002c908:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c90f:	75 0c                	jne    c002c91d <ATAPI::detectMedia()+0xb7>
c002c911:	83 ec 0c             	sub    esp,0xc
c002c914:	53                   	push   ebx
c002c915:	e8 40 ff ff ff       	call   c002c85a <ATAPI::diskInserted()>
c002c91a:	83 c4 10             	add    esp,0x10
c002c91d:	83 c4 24             	add    esp,0x24
c002c920:	5b                   	pop    ebx
c002c921:	5e                   	pop    esi
c002c922:	c3                   	ret    
c002c923:	90                   	nop

c002c924 <ATAPI::open(int, int, void*)>:
c002c924:	56                   	push   esi
c002c925:	53                   	push   ebx
c002c926:	50                   	push   eax
c002c927:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c92b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c92f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c933:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c939:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c93f:	c1 e0 06             	shl    eax,0x6
c002c942:	01 d0                	add    eax,edx
c002c944:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c94b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c951:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c958:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c962:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c968:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c96f:	6a 04                	push   0x4
c002c971:	6a 0c                	push   0xc
c002c973:	51                   	push   ecx
c002c974:	52                   	push   edx
c002c975:	e8 32 e3 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c97a:	90                   	nop
c002c97b:	90                   	nop
c002c97c:	6a 00                	push   0x0
c002c97e:	6a 0c                	push   0xc
c002c980:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c987:	50                   	push   eax
c002c988:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c98e:	e8 19 e3 ff ff       	call   c002acac <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c993:	83 c4 14             	add    esp,0x14
c002c996:	68 78 01 00 00       	push   0x178
c002c99b:	e8 1e 9a fe ff       	call   c00163be <malloc>
c002c9a0:	83 c4 0c             	add    esp,0xc
c002c9a3:	89 c6                	mov    esi,eax
c002c9a5:	6a 00                	push   0x0
c002c9a7:	68 ff ff ff 7f       	push   0x7fffffff
c002c9ac:	6a 00                	push   0x0
c002c9ae:	6a 00                	push   0x0
c002c9b0:	53                   	push   ebx
c002c9b1:	68 97 3a 03 c0       	push   0xc0033a97
c002c9b6:	50                   	push   eax
c002c9b7:	e8 d8 fa fe ff       	call   c001c494 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002c9bc:	83 c4 14             	add    esp,0x14
c002c9bf:	56                   	push   esi
c002c9c0:	e8 8f fb fe ff       	call   c001c554 <LogicalDisk::assignDriveLetter()>
c002c9c5:	5a                   	pop    edx
c002c9c6:	0f be c0             	movsx  eax,al
c002c9c9:	59                   	pop    ecx
c002c9ca:	50                   	push   eax
c002c9cb:	68 dc 38 03 c0       	push   0xc00338dc
c002c9d0:	e8 88 c8 fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002c9d5:	58                   	pop    eax
c002c9d6:	5a                   	pop    edx
c002c9d7:	56                   	push   esi
c002c9d8:	53                   	push   ebx
c002c9d9:	e8 00 e9 fe ff       	call   c001b2de <Device::addChild(Device*)>
c002c9de:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002c9e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c9e7:	e8 3e ed fe ff       	call   c001b72a <PhysicalDisk::startCache()>
c002c9ec:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c9f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c9f6:	e8 6b fe ff ff       	call   c002c866 <ATAPI::detectMedia()>
c002c9fb:	83 c4 14             	add    esp,0x14
c002c9fe:	31 c0                	xor    eax,eax
c002ca00:	5b                   	pop    ebx
c002ca01:	5e                   	pop    esi
c002ca02:	c3                   	ret    
c002ca03:	90                   	nop

c002ca04 <ATAPI::read(unsigned long long, int, void*)>:
c002ca04:	55                   	push   ebp
c002ca05:	57                   	push   edi
c002ca06:	56                   	push   esi
c002ca07:	53                   	push   ebx
c002ca08:	83 ec 1c             	sub    esp,0x1c
c002ca0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002ca0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002ca13:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002ca17:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002ca1e:	74 3c                	je     c002ca5c <ATAPI::read(unsigned long long, int, void*)+0x58>
c002ca20:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002ca24:	b9 03 00 00 00       	mov    ecx,0x3
c002ca29:	fc                   	cld    
c002ca2a:	31 c0                	xor    eax,eax
c002ca2c:	0f ce                	bswap  esi
c002ca2e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002ca30:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002ca35:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002ca39:	89 e8                	mov    eax,ebp
c002ca3b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002ca3f:	50                   	push   eax
c002ca40:	50                   	push   eax
c002ca41:	55                   	push   ebp
c002ca42:	c1 e5 0b             	shl    ebp,0xb
c002ca45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002ca49:	6a 00                	push   0x0
c002ca4b:	55                   	push   ebp
c002ca4c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002ca50:	50                   	push   eax
c002ca51:	53                   	push   ebx
c002ca52:	e8 b9 fa ff ff       	call   c002c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002ca57:	83 c4 20             	add    esp,0x20
c002ca5a:	eb 1a                	jmp    c002ca76 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002ca5c:	83 ec 0c             	sub    esp,0xc
c002ca5f:	53                   	push   ebx
c002ca60:	e8 01 fe ff ff       	call   c002c866 <ATAPI::detectMedia()>
c002ca65:	83 c4 10             	add    esp,0x10
c002ca68:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002ca6f:	75 af                	jne    c002ca20 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002ca71:	b8 02 00 00 00       	mov    eax,0x2
c002ca76:	83 c4 1c             	add    esp,0x1c
c002ca79:	5b                   	pop    ebx
c002ca7a:	5e                   	pop    esi
c002ca7b:	5f                   	pop    edi
c002ca7c:	5d                   	pop    ebp
c002ca7d:	c3                   	ret    

c002ca7e <SATA::close(int, int, void*)>:
c002ca7e:	83 ec 0c             	sub    esp,0xc
c002ca81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ca85:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ca8b:	85 c0                	test   eax,eax
c002ca8d:	74 0c                	je     c002ca9b <SATA::close(int, int, void*)+0x1d>
c002ca8f:	83 ec 0c             	sub    esp,0xc
c002ca92:	8b 10                	mov    edx,DWORD PTR [eax]
c002ca94:	50                   	push   eax
c002ca95:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ca98:	83 c4 10             	add    esp,0x10
c002ca9b:	31 c0                	xor    eax,eax
c002ca9d:	83 c4 0c             	add    esp,0xc
c002caa0:	c3                   	ret    
c002caa1:	90                   	nop

c002caa2 <SATA::powerSaving(PowerSavingLevel)>:
c002caa2:	c3                   	ret    
c002caa3:	90                   	nop

c002caa4 <SATA::open(int, int, void*)>:
c002caa4:	56                   	push   esi
c002caa5:	53                   	push   ebx
c002caa6:	83 ec 10             	sub    esp,0x10
c002caa9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002caad:	68 24 39 03 c0       	push   0xc0033924
c002cab2:	e8 a6 c7 fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002cab7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cabb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002cac5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002cacb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002cad5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cad9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002cae3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cae9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002caf0:	e8 e2 9b fe ff       	call   c00166d7 <Phys::allocatePage()>
c002caf5:	89 c6                	mov    esi,eax
c002caf7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cafd:	81 c6 00 10 00 00    	add    esi,0x1000
c002cb03:	e8 cf 9b fe ff       	call   c00166d7 <Phys::allocatePage()>
c002cb08:	83 c4 10             	add    esp,0x10
c002cb0b:	39 c6                	cmp    esi,eax
c002cb0d:	74 10                	je     c002cb1f <SATA::open(int, int, void*)+0x7b>
c002cb0f:	83 ec 0c             	sub    esp,0xc
c002cb12:	68 30 39 03 c0       	push   0xc0033930
c002cb17:	e8 5a 37 ff ff       	call   c0020276 <KePanic(char const*)>
c002cb1c:	83 c4 10             	add    esp,0x10
c002cb1f:	83 ec 0c             	sub    esp,0xc
c002cb22:	6a 02                	push   0x2
c002cb24:	e8 fc b3 fe ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c002cb29:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cb2f:	6a 03                	push   0x3
c002cb31:	50                   	push   eax
c002cb32:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002cb38:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002cb3e:	e8 f5 ba fe ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c002cb43:	83 c4 14             	add    esp,0x14
c002cb46:	53                   	push   ebx
c002cb47:	e8 de eb fe ff       	call   c001b72a <PhysicalDisk::startCache()>
c002cb4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cb4f:	e8 12 fe fe ff       	call   c001c966 <createPartitionsForDisk(PhysicalDisk*)>
c002cb54:	83 c4 14             	add    esp,0x14
c002cb57:	31 c0                	xor    eax,eax
c002cb59:	5b                   	pop    ebx
c002cb5a:	5e                   	pop    esi
c002cb5b:	c3                   	ret    

c002cb5c <SATA::SATA()>:
c002cb5c:	83 ec 0c             	sub    esp,0xc
c002cb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cb63:	83 ec 04             	sub    esp,0x4
c002cb66:	68 00 02 00 00       	push   0x200
c002cb6b:	68 44 39 03 c0       	push   0xc0033944
c002cb70:	50                   	push   eax
c002cb71:	e8 4c eb fe ff       	call   c001b6c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cb76:	83 c4 10             	add    esp,0x10
c002cb79:	ba b4 39 03 c0       	mov    edx,0xc00339b4
c002cb7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cb82:	89 10                	mov    DWORD PTR [eax],edx
c002cb84:	90                   	nop
c002cb85:	83 c4 0c             	add    esp,0xc
c002cb88:	c3                   	ret    
c002cb89:	90                   	nop

c002cb8a <SATA::access(unsigned long long, int, void*, bool)>:
c002cb8a:	55                   	push   ebp
c002cb8b:	57                   	push   edi
c002cb8c:	56                   	push   esi
c002cb8d:	53                   	push   ebx
c002cb8e:	83 ec 2c             	sub    esp,0x2c
c002cb91:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cb95:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002cb99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cb9d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002cba1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002cba9:	fa                   	cli    
c002cbaa:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002cbb0:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cbb5:	7e 10                	jle    c002cbc7 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002cbb7:	83 ec 0c             	sub    esp,0xc
c002cbba:	68 54 39 03 c0       	push   0xc0033954
c002cbbf:	e8 b2 36 ff ff       	call   c0020276 <KePanic(char const*)>
c002cbc4:	83 c4 10             	add    esp,0x10
c002cbc7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002cbcd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cbd3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002cbd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cbdd:	89 d0                	mov    eax,edx
c002cbdf:	c1 e0 07             	shl    eax,0x7
c002cbe2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cbe6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cbf0:	51                   	push   ecx
c002cbf1:	8d 42 02             	lea    eax,[edx+0x2]
c002cbf4:	51                   	push   ecx
c002cbf5:	c1 e0 07             	shl    eax,0x7
c002cbf8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cbfc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002cc00:	50                   	push   eax
c002cc01:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cc07:	e8 68 ec ff ff       	call   c002b874 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cc0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cc10:	83 c4 10             	add    esp,0x10
c002cc13:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002cc18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002cc1c:	0f 84 aa 01 00 00    	je     c002cdcc <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002cc22:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cc26:	c1 e0 09             	shl    eax,0x9
c002cc29:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cc2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cc32:	74 0e                	je     c002cc42 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002cc34:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002cc3a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002cc3e:	89 c1                	mov    ecx,eax
c002cc40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cc42:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cc48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cc4c:	8d 42 02             	lea    eax,[edx+0x2]
c002cc4f:	c1 e0 07             	shl    eax,0x7
c002cc52:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cc56:	8b 00                	mov    eax,DWORD PTR [eax]
c002cc58:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002cc5e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cc64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002cc68:	c1 e1 05             	shl    ecx,0x5
c002cc6b:	01 c8                	add    eax,ecx
c002cc6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cc71:	83 e1 01             	and    ecx,0x1
c002cc74:	89 ce                	mov    esi,ecx
c002cc76:	8a 08                	mov    cl,BYTE PTR [eax]
c002cc78:	c1 e6 06             	shl    esi,0x6
c002cc7b:	83 e1 bf             	and    ecx,0xffffffbf
c002cc7e:	09 f1                	or     ecx,esi
c002cc80:	88 08                	mov    BYTE PTR [eax],cl
c002cc82:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cc84:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cc8a:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cc90:	89 08                	mov    DWORD PTR [eax],ecx
c002cc92:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cc98:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cc9e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cca4:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cca7:	50                   	push   eax
c002cca8:	68 90 00 00 00       	push   0x90
c002ccad:	6a 00                	push   0x0
c002ccaf:	56                   	push   esi
c002ccb0:	e8 3b 38 fd ff       	call   c00004f0 <memset>
c002ccb5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002ccbb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002ccc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ccc5:	83 c4 10             	add    esp,0x10
c002ccc8:	48                   	dec    eax
c002ccc9:	25 ff ff 3f 00       	and    eax,0x3fffff
c002ccce:	89 c1                	mov    ecx,eax
c002ccd0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002ccd6:	25 00 00 c0 ff       	and    eax,0xffc00000
c002ccdb:	09 c8                	or     eax,ecx
c002ccdd:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cce3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cce9:	83 c8 80             	or     eax,0xffffff80
c002ccec:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002ccf2:	66 8b 06             	mov    ax,WORD PTR [esi]
c002ccf5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002ccf9:	25 00 7f 00 00       	and    eax,0x7f00
c002ccfe:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cd03:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cd08:	66 89 06             	mov    WORD PTR [esi],ax
c002cd0b:	b0 35                	mov    al,0x35
c002cd0d:	75 02                	jne    c002cd11 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002cd0f:	b0 25                	mov    al,0x25
c002cd11:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cd14:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002cd18:	89 e8                	mov    eax,ebp
c002cd1a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cd1e:	c1 e8 10             	shr    eax,0x10
c002cd21:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cd24:	89 e8                	mov    eax,ebp
c002cd26:	c1 e8 18             	shr    eax,0x18
c002cd29:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cd2c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cd30:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cd33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cd37:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cd3a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cd3e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cd42:	89 d6                	mov    esi,edx
c002cd44:	31 c0                	xor    eax,eax
c002cd46:	c1 e6 07             	shl    esi,0x7
c002cd49:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002cd4d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cd53:	80 e1 88             	and    cl,0x88
c002cd56:	74 0a                	je     c002cd62 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cd58:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cd5d:	74 0a                	je     c002cd69 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cd5f:	40                   	inc    eax
c002cd60:	eb eb                	jmp    c002cd4d <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002cd62:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cd67:	75 0a                	jne    c002cd73 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cd69:	83 ec 0c             	sub    esp,0xc
c002cd6c:	68 8d 39 03 c0       	push   0xc003398d
c002cd71:	eb 36                	jmp    c002cda9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002cd73:	b8 01 00 00 00       	mov    eax,0x1
c002cd78:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002cd7c:	c1 e2 07             	shl    edx,0x7
c002cd7f:	d3 e0                	shl    eax,cl
c002cd81:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002cd85:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002cd8b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002cd91:	85 c8                	test   eax,ecx
c002cd93:	74 2b                	je     c002cdc0 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002cd95:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002cd9b:	0f ba e1 1e          	bt     ecx,0x1e
c002cd9f:	73 ea                	jae    c002cd8b <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002cda1:	83 ec 0c             	sub    esp,0xc
c002cda4:	68 9b 39 03 c0       	push   0xc003399b
c002cda9:	e8 af c4 fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002cdae:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cdb3:	83 c4 10             	add    esp,0x10
c002cdb6:	48                   	dec    eax
c002cdb7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cdbc:	85 c0                	test   eax,eax
c002cdbe:	eb 17                	jmp    c002cdd7 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002cdc0:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002cdc6:	0f ba e0 1e          	bt     eax,0x1e
c002cdca:	73 15                	jae    c002cde1 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002cdcc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cdd1:	48                   	dec    eax
c002cdd2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cdd7:	75 01                	jne    c002cdda <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002cdd9:	fb                   	sti    
c002cdda:	b8 01 00 00 00       	mov    eax,0x1
c002cddf:	eb 29                	jmp    c002ce0a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002cde1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cde6:	75 10                	jne    c002cdf8 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002cde8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002cdee:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002cdf2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002cdf6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cdf8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cdfd:	48                   	dec    eax
c002cdfe:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ce03:	75 03                	jne    c002ce08 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002ce05:	fb                   	sti    
c002ce06:	eb 02                	jmp    c002ce0a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002ce08:	31 c0                	xor    eax,eax
c002ce0a:	83 c4 2c             	add    esp,0x2c
c002ce0d:	5b                   	pop    ebx
c002ce0e:	5e                   	pop    esi
c002ce0f:	5f                   	pop    edi
c002ce10:	5d                   	pop    ebp
c002ce11:	c3                   	ret    

c002ce12 <SATA::read(unsigned long long, int, void*)>:
c002ce12:	55                   	push   ebp
c002ce13:	57                   	push   edi
c002ce14:	56                   	push   esi
c002ce15:	be 04 00 00 00       	mov    esi,0x4
c002ce1a:	53                   	push   ebx
c002ce1b:	83 ec 0c             	sub    esp,0xc
c002ce1e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002ce22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ce26:	8d 7b ff             	lea    edi,[ebx-0x1]
c002ce29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002ce2d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002ce31:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002ce37:	0f 87 1a 02 00 00    	ja     c002d057 <SATA::read(unsigned long long, int, void*)+0x245>
c002ce3d:	be 06 00 00 00       	mov    esi,0x6
c002ce42:	85 c9                	test   ecx,ecx
c002ce44:	0f 84 0d 02 00 00    	je     c002d057 <SATA::read(unsigned long long, int, void*)+0x245>
c002ce4a:	56                   	push   esi
c002ce4b:	56                   	push   esi
c002ce4c:	6a 00                	push   0x0
c002ce4e:	51                   	push   ecx
c002ce4f:	53                   	push   ebx
c002ce50:	52                   	push   edx
c002ce51:	50                   	push   eax
c002ce52:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002ce56:	e8 2f fd ff ff       	call   c002cb8a <SATA::access(unsigned long long, int, void*, bool)>
c002ce5b:	83 c4 20             	add    esp,0x20
c002ce5e:	89 c6                	mov    esi,eax
c002ce60:	85 c0                	test   eax,eax
c002ce62:	0f 85 ea 01 00 00    	jne    c002d052 <SATA::read(unsigned long long, int, void*)+0x240>
c002ce68:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002ce6e:	bb 0a 00 00 00       	mov    ebx,0xa
c002ce73:	50                   	push   eax
c002ce74:	50                   	push   eax
c002ce75:	6a 0f                	push   0xf
c002ce77:	6a 00                	push   0x0
c002ce79:	e8 33 f2 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002ce7e:	5a                   	pop    edx
c002ce7f:	0f b6 c0             	movzx  eax,al
c002ce82:	59                   	pop    ecx
c002ce83:	b9 10 27 00 00       	mov    ecx,0x2710
c002ce88:	50                   	push   eax
c002ce89:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce8e:	99                   	cdq    
c002ce8f:	f7 f9                	idiv   ecx
c002ce91:	99                   	cdq    
c002ce92:	f7 fb                	idiv   ebx
c002ce94:	8d 42 30             	lea    eax,[edx+0x30]
c002ce97:	0f b6 c0             	movzx  eax,al
c002ce9a:	50                   	push   eax
c002ce9b:	e8 00 f2 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002cea0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002cea6:	5f                   	pop    edi
c002cea7:	5d                   	pop    ebp
c002cea8:	bd e8 03 00 00       	mov    ebp,0x3e8
c002cead:	6a 0f                	push   0xf
c002ceaf:	6a 00                	push   0x0
c002ceb1:	e8 fb f1 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002ceb6:	5a                   	pop    edx
c002ceb7:	0f b6 c0             	movzx  eax,al
c002ceba:	59                   	pop    ecx
c002cebb:	50                   	push   eax
c002cebc:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cec1:	99                   	cdq    
c002cec2:	f7 fd                	idiv   ebp
c002cec4:	99                   	cdq    
c002cec5:	f7 fb                	idiv   ebx
c002cec7:	8d 42 30             	lea    eax,[edx+0x30]
c002ceca:	0f b6 c0             	movzx  eax,al
c002cecd:	50                   	push   eax
c002cece:	e8 cd f1 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002ced3:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002ced9:	5f                   	pop    edi
c002ceda:	bf 64 00 00 00       	mov    edi,0x64
c002cedf:	58                   	pop    eax
c002cee0:	6a 0f                	push   0xf
c002cee2:	6a 00                	push   0x0
c002cee4:	e8 c8 f1 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002cee9:	5a                   	pop    edx
c002ceea:	0f b6 c0             	movzx  eax,al
c002ceed:	59                   	pop    ecx
c002ceee:	50                   	push   eax
c002ceef:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cef4:	99                   	cdq    
c002cef5:	f7 ff                	idiv   edi
c002cef7:	99                   	cdq    
c002cef8:	f7 fb                	idiv   ebx
c002cefa:	8d 42 30             	lea    eax,[edx+0x30]
c002cefd:	0f b6 c0             	movzx  eax,al
c002cf00:	50                   	push   eax
c002cf01:	e8 9a f1 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002cf06:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cf0c:	58                   	pop    eax
c002cf0d:	5a                   	pop    edx
c002cf0e:	6a 0f                	push   0xf
c002cf10:	6a 00                	push   0x0
c002cf12:	e8 9a f1 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002cf17:	59                   	pop    ecx
c002cf18:	0f b6 c0             	movzx  eax,al
c002cf1b:	5a                   	pop    edx
c002cf1c:	50                   	push   eax
c002cf1d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf22:	99                   	cdq    
c002cf23:	f7 fb                	idiv   ebx
c002cf25:	99                   	cdq    
c002cf26:	f7 fb                	idiv   ebx
c002cf28:	8d 42 30             	lea    eax,[edx+0x30]
c002cf2b:	0f b6 c0             	movzx  eax,al
c002cf2e:	50                   	push   eax
c002cf2f:	e8 6c f1 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002cf34:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002cf3a:	59                   	pop    ecx
c002cf3b:	58                   	pop    eax
c002cf3c:	6a 0f                	push   0xf
c002cf3e:	6a 00                	push   0x0
c002cf40:	e8 6c f1 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002cf45:	5a                   	pop    edx
c002cf46:	0f b6 c0             	movzx  eax,al
c002cf49:	59                   	pop    ecx
c002cf4a:	50                   	push   eax
c002cf4b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf50:	99                   	cdq    
c002cf51:	f7 fb                	idiv   ebx
c002cf53:	8d 42 30             	lea    eax,[edx+0x30]
c002cf56:	0f b6 c0             	movzx  eax,al
c002cf59:	50                   	push   eax
c002cf5a:	e8 41 f1 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002cf5f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002cf65:	58                   	pop    eax
c002cf66:	5a                   	pop    edx
c002cf67:	6a 0f                	push   0xf
c002cf69:	6a 00                	push   0x0
c002cf6b:	e8 41 f1 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002cf70:	59                   	pop    ecx
c002cf71:	0f b6 c0             	movzx  eax,al
c002cf74:	5a                   	pop    edx
c002cf75:	b9 10 27 00 00       	mov    ecx,0x2710
c002cf7a:	50                   	push   eax
c002cf7b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf80:	99                   	cdq    
c002cf81:	f7 f9                	idiv   ecx
c002cf83:	99                   	cdq    
c002cf84:	f7 fb                	idiv   ebx
c002cf86:	8d 42 30             	lea    eax,[edx+0x30]
c002cf89:	0f b6 c0             	movzx  eax,al
c002cf8c:	50                   	push   eax
c002cf8d:	e8 0e f1 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002cf92:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002cf98:	59                   	pop    ecx
c002cf99:	58                   	pop    eax
c002cf9a:	6a 0f                	push   0xf
c002cf9c:	6a 00                	push   0x0
c002cf9e:	e8 0e f1 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002cfa3:	5a                   	pop    edx
c002cfa4:	0f b6 c0             	movzx  eax,al
c002cfa7:	59                   	pop    ecx
c002cfa8:	50                   	push   eax
c002cfa9:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cfae:	99                   	cdq    
c002cfaf:	f7 fd                	idiv   ebp
c002cfb1:	99                   	cdq    
c002cfb2:	f7 fb                	idiv   ebx
c002cfb4:	8d 42 30             	lea    eax,[edx+0x30]
c002cfb7:	0f b6 c0             	movzx  eax,al
c002cfba:	50                   	push   eax
c002cfbb:	e8 e0 f0 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002cfc0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cfc6:	5d                   	pop    ebp
c002cfc7:	58                   	pop    eax
c002cfc8:	6a 0f                	push   0xf
c002cfca:	6a 00                	push   0x0
c002cfcc:	e8 e0 f0 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002cfd1:	5a                   	pop    edx
c002cfd2:	0f b6 c0             	movzx  eax,al
c002cfd5:	59                   	pop    ecx
c002cfd6:	50                   	push   eax
c002cfd7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cfdc:	99                   	cdq    
c002cfdd:	f7 ff                	idiv   edi
c002cfdf:	99                   	cdq    
c002cfe0:	f7 fb                	idiv   ebx
c002cfe2:	8d 42 30             	lea    eax,[edx+0x30]
c002cfe5:	0f b6 c0             	movzx  eax,al
c002cfe8:	50                   	push   eax
c002cfe9:	e8 b2 f0 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002cfee:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cff4:	5f                   	pop    edi
c002cff5:	5d                   	pop    ebp
c002cff6:	6a 0f                	push   0xf
c002cff8:	6a 00                	push   0x0
c002cffa:	e8 b2 f0 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002cfff:	5a                   	pop    edx
c002d000:	0f b6 c0             	movzx  eax,al
c002d003:	59                   	pop    ecx
c002d004:	50                   	push   eax
c002d005:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d00a:	99                   	cdq    
c002d00b:	f7 fb                	idiv   ebx
c002d00d:	99                   	cdq    
c002d00e:	f7 fb                	idiv   ebx
c002d010:	8d 42 30             	lea    eax,[edx+0x30]
c002d013:	0f b6 c0             	movzx  eax,al
c002d016:	50                   	push   eax
c002d017:	e8 84 f0 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d01c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d022:	5f                   	pop    edi
c002d023:	5d                   	pop    ebp
c002d024:	6a 0f                	push   0xf
c002d026:	6a 00                	push   0x0
c002d028:	e8 84 f0 ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d02d:	5a                   	pop    edx
c002d02e:	0f b6 c0             	movzx  eax,al
c002d031:	59                   	pop    ecx
c002d032:	50                   	push   eax
c002d033:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d038:	99                   	cdq    
c002d039:	f7 fb                	idiv   ebx
c002d03b:	83 c2 30             	add    edx,0x30
c002d03e:	0f b6 d2             	movzx  edx,dl
c002d041:	52                   	push   edx
c002d042:	e8 59 f0 ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d047:	83 c4 10             	add    esp,0x10
c002d04a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d050:	eb 05                	jmp    c002d057 <SATA::read(unsigned long long, int, void*)+0x245>
c002d052:	be 01 00 00 00       	mov    esi,0x1
c002d057:	83 c4 0c             	add    esp,0xc
c002d05a:	89 f0                	mov    eax,esi
c002d05c:	5b                   	pop    ebx
c002d05d:	5e                   	pop    esi
c002d05e:	5f                   	pop    edi
c002d05f:	5d                   	pop    ebp
c002d060:	c3                   	ret    
c002d061:	90                   	nop

c002d062 <SATA::write(unsigned long long, int, void*)>:
c002d062:	55                   	push   ebp
c002d063:	b8 04 00 00 00       	mov    eax,0x4
c002d068:	57                   	push   edi
c002d069:	56                   	push   esi
c002d06a:	53                   	push   ebx
c002d06b:	83 ec 1c             	sub    esp,0x1c
c002d06e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d072:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002d076:	8d 75 ff             	lea    esi,[ebp-0x1]
c002d079:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002d07d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002d081:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d087:	0f 87 32 02 00 00    	ja     c002d2bf <SATA::write(unsigned long long, int, void*)+0x25d>
c002d08d:	b8 06 00 00 00       	mov    eax,0x6
c002d092:	85 ff                	test   edi,edi
c002d094:	0f 84 25 02 00 00    	je     c002d2bf <SATA::write(unsigned long long, int, void*)+0x25d>
c002d09a:	89 ee                	mov    esi,ebp
c002d09c:	c1 e6 09             	shl    esi,0x9
c002d09f:	01 fe                	add    esi,edi
c002d0a1:	89 c8                	mov    eax,ecx
c002d0a3:	89 da                	mov    edx,ebx
c002d0a5:	83 c0 01             	add    eax,0x1
c002d0a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d0ac:	83 d2 00             	adc    edx,0x0
c002d0af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d0b3:	50                   	push   eax
c002d0b4:	50                   	push   eax
c002d0b5:	6a 01                	push   0x1
c002d0b7:	57                   	push   edi
c002d0b8:	81 c7 00 02 00 00    	add    edi,0x200
c002d0be:	6a 01                	push   0x1
c002d0c0:	53                   	push   ebx
c002d0c1:	51                   	push   ecx
c002d0c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d0c6:	e8 bf fa ff ff       	call   c002cb8a <SATA::access(unsigned long long, int, void*, bool)>
c002d0cb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d0cf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d0d3:	83 c4 20             	add    esp,0x20
c002d0d6:	39 f7                	cmp    edi,esi
c002d0d8:	75 c7                	jne    c002d0a1 <SATA::write(unsigned long long, int, void*)+0x3f>
c002d0da:	bb 0a 00 00 00       	mov    ebx,0xa
c002d0df:	01 2d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebp
c002d0e5:	bd 10 27 00 00       	mov    ebp,0x2710
c002d0ea:	50                   	push   eax
c002d0eb:	50                   	push   eax
c002d0ec:	6a 0f                	push   0xf
c002d0ee:	6a 00                	push   0x0
c002d0f0:	e8 bc ef ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d0f5:	5a                   	pop    edx
c002d0f6:	0f b6 c0             	movzx  eax,al
c002d0f9:	59                   	pop    ecx
c002d0fa:	50                   	push   eax
c002d0fb:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d100:	99                   	cdq    
c002d101:	f7 fd                	idiv   ebp
c002d103:	99                   	cdq    
c002d104:	f7 fb                	idiv   ebx
c002d106:	8d 42 30             	lea    eax,[edx+0x30]
c002d109:	0f b6 c0             	movzx  eax,al
c002d10c:	50                   	push   eax
c002d10d:	e8 8e ef ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d112:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d118:	5e                   	pop    esi
c002d119:	5f                   	pop    edi
c002d11a:	bf e8 03 00 00       	mov    edi,0x3e8
c002d11f:	6a 0f                	push   0xf
c002d121:	6a 00                	push   0x0
c002d123:	e8 89 ef ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d128:	5a                   	pop    edx
c002d129:	0f b6 c0             	movzx  eax,al
c002d12c:	59                   	pop    ecx
c002d12d:	50                   	push   eax
c002d12e:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d133:	99                   	cdq    
c002d134:	f7 ff                	idiv   edi
c002d136:	99                   	cdq    
c002d137:	f7 fb                	idiv   ebx
c002d139:	8d 42 30             	lea    eax,[edx+0x30]
c002d13c:	0f b6 c0             	movzx  eax,al
c002d13f:	50                   	push   eax
c002d140:	e8 5b ef ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d145:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d14b:	5e                   	pop    esi
c002d14c:	be 64 00 00 00       	mov    esi,0x64
c002d151:	58                   	pop    eax
c002d152:	6a 0f                	push   0xf
c002d154:	6a 00                	push   0x0
c002d156:	e8 56 ef ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d15b:	5a                   	pop    edx
c002d15c:	0f b6 c0             	movzx  eax,al
c002d15f:	59                   	pop    ecx
c002d160:	50                   	push   eax
c002d161:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d166:	99                   	cdq    
c002d167:	f7 fe                	idiv   esi
c002d169:	99                   	cdq    
c002d16a:	f7 fb                	idiv   ebx
c002d16c:	8d 42 30             	lea    eax,[edx+0x30]
c002d16f:	0f b6 c0             	movzx  eax,al
c002d172:	50                   	push   eax
c002d173:	e8 28 ef ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d178:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d17e:	58                   	pop    eax
c002d17f:	5a                   	pop    edx
c002d180:	6a 0f                	push   0xf
c002d182:	6a 00                	push   0x0
c002d184:	e8 28 ef ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d189:	59                   	pop    ecx
c002d18a:	0f b6 c0             	movzx  eax,al
c002d18d:	5a                   	pop    edx
c002d18e:	50                   	push   eax
c002d18f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d194:	99                   	cdq    
c002d195:	f7 fb                	idiv   ebx
c002d197:	99                   	cdq    
c002d198:	f7 fb                	idiv   ebx
c002d19a:	8d 42 30             	lea    eax,[edx+0x30]
c002d19d:	0f b6 c0             	movzx  eax,al
c002d1a0:	50                   	push   eax
c002d1a1:	e8 fa ee ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d1a6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d1ac:	59                   	pop    ecx
c002d1ad:	58                   	pop    eax
c002d1ae:	6a 0f                	push   0xf
c002d1b0:	6a 00                	push   0x0
c002d1b2:	e8 fa ee ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d1b7:	5a                   	pop    edx
c002d1b8:	0f b6 c0             	movzx  eax,al
c002d1bb:	59                   	pop    ecx
c002d1bc:	50                   	push   eax
c002d1bd:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d1c2:	99                   	cdq    
c002d1c3:	f7 fb                	idiv   ebx
c002d1c5:	83 c2 30             	add    edx,0x30
c002d1c8:	0f b6 d2             	movzx  edx,dl
c002d1cb:	52                   	push   edx
c002d1cc:	e8 cf ee ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d1d1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d1d7:	58                   	pop    eax
c002d1d8:	5a                   	pop    edx
c002d1d9:	6a 0f                	push   0xf
c002d1db:	6a 00                	push   0x0
c002d1dd:	e8 cf ee ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d1e2:	59                   	pop    ecx
c002d1e3:	0f b6 c0             	movzx  eax,al
c002d1e6:	5a                   	pop    edx
c002d1e7:	50                   	push   eax
c002d1e8:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1ed:	99                   	cdq    
c002d1ee:	f7 fd                	idiv   ebp
c002d1f0:	99                   	cdq    
c002d1f1:	f7 fb                	idiv   ebx
c002d1f3:	8d 42 30             	lea    eax,[edx+0x30]
c002d1f6:	0f b6 c0             	movzx  eax,al
c002d1f9:	50                   	push   eax
c002d1fa:	e8 a1 ee ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d1ff:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d205:	59                   	pop    ecx
c002d206:	5d                   	pop    ebp
c002d207:	6a 0f                	push   0xf
c002d209:	6a 00                	push   0x0
c002d20b:	e8 a1 ee ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d210:	5a                   	pop    edx
c002d211:	0f b6 c0             	movzx  eax,al
c002d214:	59                   	pop    ecx
c002d215:	50                   	push   eax
c002d216:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d21b:	99                   	cdq    
c002d21c:	f7 ff                	idiv   edi
c002d21e:	99                   	cdq    
c002d21f:	f7 fb                	idiv   ebx
c002d221:	8d 42 30             	lea    eax,[edx+0x30]
c002d224:	0f b6 c0             	movzx  eax,al
c002d227:	50                   	push   eax
c002d228:	e8 73 ee ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d22d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d233:	5f                   	pop    edi
c002d234:	5d                   	pop    ebp
c002d235:	6a 0f                	push   0xf
c002d237:	6a 00                	push   0x0
c002d239:	e8 73 ee ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d23e:	5a                   	pop    edx
c002d23f:	0f b6 c0             	movzx  eax,al
c002d242:	59                   	pop    ecx
c002d243:	50                   	push   eax
c002d244:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d249:	99                   	cdq    
c002d24a:	f7 fe                	idiv   esi
c002d24c:	99                   	cdq    
c002d24d:	f7 fb                	idiv   ebx
c002d24f:	8d 42 30             	lea    eax,[edx+0x30]
c002d252:	0f b6 c0             	movzx  eax,al
c002d255:	50                   	push   eax
c002d256:	e8 45 ee ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d25b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d261:	5e                   	pop    esi
c002d262:	5f                   	pop    edi
c002d263:	6a 0f                	push   0xf
c002d265:	6a 00                	push   0x0
c002d267:	e8 45 ee ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d26c:	5d                   	pop    ebp
c002d26d:	0f b6 c0             	movzx  eax,al
c002d270:	5a                   	pop    edx
c002d271:	50                   	push   eax
c002d272:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d277:	99                   	cdq    
c002d278:	f7 fb                	idiv   ebx
c002d27a:	99                   	cdq    
c002d27b:	f7 fb                	idiv   ebx
c002d27d:	8d 42 30             	lea    eax,[edx+0x30]
c002d280:	0f b6 c0             	movzx  eax,al
c002d283:	50                   	push   eax
c002d284:	e8 17 ee ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d289:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d28f:	59                   	pop    ecx
c002d290:	5e                   	pop    esi
c002d291:	6a 0f                	push   0xf
c002d293:	6a 00                	push   0x0
c002d295:	e8 17 ee ff ff       	call   c002c0b1 <combineColours(unsigned char, unsigned char)>
c002d29a:	5f                   	pop    edi
c002d29b:	0f b6 c0             	movzx  eax,al
c002d29e:	5d                   	pop    ebp
c002d29f:	50                   	push   eax
c002d2a0:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d2a5:	99                   	cdq    
c002d2a6:	f7 fb                	idiv   ebx
c002d2a8:	83 c2 30             	add    edx,0x30
c002d2ab:	0f b6 d2             	movzx  edx,dl
c002d2ae:	52                   	push   edx
c002d2af:	e8 ec ed ff ff       	call   c002c0a0 <combineCharAndColour(char, unsigned char)>
c002d2b4:	83 c4 10             	add    esp,0x10
c002d2b7:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d2bd:	31 c0                	xor    eax,eax
c002d2bf:	83 c4 1c             	add    esp,0x1c
c002d2c2:	5b                   	pop    ebx
c002d2c3:	5e                   	pop    esi
c002d2c4:	5f                   	pop    edi
c002d2c5:	5d                   	pop    ebp
c002d2c6:	c3                   	ret    
c002d2c7:	90                   	nop

c002d2c8 <SATAPI::write(unsigned long long, int, void*)>:
c002d2c8:	b8 03 00 00 00       	mov    eax,0x3
c002d2cd:	c3                   	ret    

c002d2ce <SATAPI::close(int, int, void*)>:
c002d2ce:	83 ec 0c             	sub    esp,0xc
c002d2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d2d5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d2db:	85 c0                	test   eax,eax
c002d2dd:	74 0c                	je     c002d2eb <SATAPI::close(int, int, void*)+0x1d>
c002d2df:	83 ec 0c             	sub    esp,0xc
c002d2e2:	8b 10                	mov    edx,DWORD PTR [eax]
c002d2e4:	50                   	push   eax
c002d2e5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d2e8:	83 c4 10             	add    esp,0x10
c002d2eb:	31 c0                	xor    eax,eax
c002d2ed:	83 c4 0c             	add    esp,0xc
c002d2f0:	c3                   	ret    
c002d2f1:	90                   	nop

c002d2f2 <SATAPI::SATAPI()>:
c002d2f2:	83 ec 0c             	sub    esp,0xc
c002d2f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d2f9:	83 ec 04             	sub    esp,0x4
c002d2fc:	68 00 08 00 00       	push   0x800
c002d301:	68 e4 39 03 c0       	push   0xc00339e4
c002d306:	50                   	push   eax
c002d307:	e8 b6 e3 fe ff       	call   c001b6c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d30c:	83 c4 10             	add    esp,0x10
c002d30f:	ba d8 3a 03 c0       	mov    edx,0xc0033ad8
c002d314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d318:	89 10                	mov    DWORD PTR [eax],edx
c002d31a:	90                   	nop
c002d31b:	83 c4 0c             	add    esp,0xc
c002d31e:	c3                   	ret    
c002d31f:	90                   	nop

c002d320 <SATAPI::diskRemoved()>:
c002d320:	c3                   	ret    
c002d321:	90                   	nop

c002d322 <SATAPI::diskInserted()>:
c002d322:	83 ec 18             	sub    esp,0x18
c002d325:	68 f0 39 03 c0       	push   0xc00339f0
c002d32a:	e8 2e bf fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002d32f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d333:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d33a:	83 c4 1c             	add    esp,0x1c
c002d33d:	c3                   	ret    

c002d33e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d33e:	55                   	push   ebp
c002d33f:	57                   	push   edi
c002d340:	56                   	push   esi
c002d341:	53                   	push   ebx
c002d342:	83 ec 34             	sub    esp,0x34
c002d345:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d349:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d34d:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d351:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d355:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d359:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d35f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d365:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d369:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d36f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d373:	83 c0 02             	add    eax,0x2
c002d376:	c1 e0 07             	shl    eax,0x7
c002d379:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d37d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d385:	c1 e0 07             	shl    eax,0x7
c002d388:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d38c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d390:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d39a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d39e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d3a4:	e8 cb e4 ff ff       	call   c002b874 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d3a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d3ad:	83 c4 10             	add    esp,0x10
c002d3b0:	b8 01 00 00 00       	mov    eax,0x1
c002d3b5:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d3ba:	0f 84 53 02 00 00    	je     c002d613 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d3c0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d3ca:	8b 00                	mov    eax,DWORD PTR [eax]
c002d3cc:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d3d2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d3d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d3dc:	c1 e1 05             	shl    ecx,0x5
c002d3df:	01 c8                	add    eax,ecx
c002d3e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d3e3:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d3e9:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d3ef:	89 08                	mov    DWORD PTR [eax],ecx
c002d3f1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d3f7:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d3fd:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d403:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d406:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d409:	50                   	push   eax
c002d40a:	68 90 00 00 00       	push   0x90
c002d40f:	6a 00                	push   0x0
c002d411:	53                   	push   ebx
c002d412:	e8 d9 30 fd ff       	call   c00004f0 <memset>
c002d417:	b9 0c 00 00 00       	mov    ecx,0xc
c002d41c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d420:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d422:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d428:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d42c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d432:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d436:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d43a:	48                   	dec    eax
c002d43b:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d440:	89 c1                	mov    ecx,eax
c002d442:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d448:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d44d:	09 c8                	or     eax,ecx
c002d44f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d455:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d45b:	83 c8 80             	or     eax,0xffffff80
c002d45e:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d464:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d467:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002d46b:	25 00 7f 00 00       	and    eax,0x7f00
c002d470:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002d474:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d479:	66 89 03             	mov    WORD PTR [ebx],ax
c002d47c:	89 d0                	mov    eax,edx
c002d47e:	c1 ea 18             	shr    edx,0x18
c002d481:	c1 e8 10             	shr    eax,0x10
c002d484:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002d487:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d48a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d48e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d491:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d495:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d498:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d49c:	83 c4 10             	add    esp,0x10
c002d49f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d4a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d4a7:	31 c0                	xor    eax,eax
c002d4a9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002d4af:	80 e1 88             	and    cl,0x88
c002d4b2:	74 0a                	je     c002d4be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002d4b4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d4b9:	74 0a                	je     c002d4c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002d4bb:	40                   	inc    eax
c002d4bc:	eb eb                	jmp    c002d4a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002d4be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d4c3:	75 43                	jne    c002d508 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002d4c5:	83 ec 0c             	sub    esp,0xc
c002d4c8:	68 08 3a 03 c0       	push   0xc0033a08
c002d4cd:	e8 8b bd fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002d4d2:	58                   	pop    eax
c002d4d3:	5a                   	pop    edx
c002d4d4:	68 1d 3a 03 c0       	push   0xc0033a1d
c002d4d9:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d4df:	e8 da 9e fe ff       	call   c00173be <VgaText::puts(char const*)>
c002d4e4:	59                   	pop    ecx
c002d4e5:	5b                   	pop    ebx
c002d4e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d4ea:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d4f0:	e8 19 e4 ff ff       	call   c002b90e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d4f5:	5e                   	pop    esi
c002d4f6:	5f                   	pop    edi
c002d4f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d4fb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d501:	e8 e8 e3 ff ff       	call   c002b8ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d506:	eb 48                	jmp    c002d550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002d508:	be 01 00 00 00       	mov    esi,0x1
c002d50d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d511:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002d515:	d3 e6                	shl    esi,cl
c002d517:	c1 e7 07             	shl    edi,0x7
c002d51a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002d520:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002d525:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002d529:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002d52f:	85 c6                	test   esi,eax
c002d531:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002d537:	0f 84 a3 00 00 00    	je     c002d5e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002d53d:	0f ba e0 1e          	bt     eax,0x1e
c002d541:	73 1a                	jae    c002d55d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002d543:	83 ec 0c             	sub    esp,0xc
c002d546:	68 2f 3a 03 c0       	push   0xc0033a2f
c002d54b:	e8 0d bd fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002d550:	83 c4 10             	add    esp,0x10
c002d553:	b8 01 00 00 00       	mov    eax,0x1
c002d558:	e9 b6 00 00 00       	jmp    c002d613 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d55d:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002d563:	83 f8 0d             	cmp    eax,0xd
c002d566:	77 0a                	ja     c002d572 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002d568:	83 ec 0c             	sub    esp,0xc
c002d56b:	68 c8 00 00 00       	push   0xc8
c002d570:	eb 28                	jmp    c002d59a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d572:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002d578:	83 f8 0d             	cmp    eax,0xd
c002d57b:	77 0a                	ja     c002d587 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002d57d:	83 ec 0c             	sub    esp,0xc
c002d580:	68 58 02 00 00       	push   0x258
c002d585:	eb 13                	jmp    c002d59a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d587:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002d58d:	83 f8 06             	cmp    eax,0x6
c002d590:	77 10                	ja     c002d5a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d592:	83 ec 0c             	sub    esp,0xc
c002d595:	68 dc 05 00 00       	push   0x5dc
c002d59a:	e8 c5 7e ff ff       	call   c0025464 <milliTenthSleep(unsigned int)>
c002d59f:	83 c4 10             	add    esp,0x10
c002d5a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d5a6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d5a9:	75 06                	jne    c002d5b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002d5ab:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d5af:	74 15                	je     c002d5c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d5b1:	83 fb 06             	cmp    ebx,0x6
c002d5b4:	77 10                	ja     c002d5c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d5b6:	83 ec 0c             	sub    esp,0xc
c002d5b9:	68 c4 09 00 00       	push   0x9c4
c002d5be:	e8 a1 7e ff ff       	call   c0025464 <milliTenthSleep(unsigned int)>
c002d5c3:	83 c4 10             	add    esp,0x10
c002d5c6:	43                   	inc    ebx
c002d5c7:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002d5cd:	0f 85 56 ff ff ff    	jne    c002d529 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002d5d3:	83 ec 0c             	sub    esp,0xc
c002d5d6:	68 42 3a 03 c0       	push   0xc0033a42
c002d5db:	e9 6b ff ff ff       	jmp    c002d54b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d5e0:	0f ba e0 1e          	bt     eax,0x1e
c002d5e4:	73 0d                	jae    c002d5f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002d5e6:	83 ec 0c             	sub    esp,0xc
c002d5e9:	68 56 3a 03 c0       	push   0xc0033a56
c002d5ee:	e9 58 ff ff ff       	jmp    c002d54b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d5f3:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d5f8:	74 17                	je     c002d611 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d5fa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d5ff:	74 10                	je     c002d611 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d601:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d607:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d60b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d60f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d611:	31 c0                	xor    eax,eax
c002d613:	83 c4 2c             	add    esp,0x2c
c002d616:	5b                   	pop    ebx
c002d617:	5e                   	pop    esi
c002d618:	5f                   	pop    edi
c002d619:	5d                   	pop    ebp
c002d61a:	c3                   	ret    
c002d61b:	90                   	nop

c002d61c <SATAPI::eject()>:
c002d61c:	57                   	push   edi
c002d61d:	b9 03 00 00 00       	mov    ecx,0x3
c002d622:	83 ec 18             	sub    esp,0x18
c002d625:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d629:	fc                   	cld    
c002d62a:	31 c0                	xor    eax,eax
c002d62c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d62e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d633:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d638:	50                   	push   eax
c002d639:	6a 00                	push   0x0
c002d63b:	6a 00                	push   0x0
c002d63d:	6a 00                	push   0x0
c002d63f:	6a 00                	push   0x0
c002d641:	6a 02                	push   0x2
c002d643:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d647:	50                   	push   eax
c002d648:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d64c:	e8 ed fc ff ff       	call   c002d33e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d651:	31 c0                	xor    eax,eax
c002d653:	83 c4 38             	add    esp,0x38
c002d656:	5f                   	pop    edi
c002d657:	c3                   	ret    

c002d658 <SATAPI::detectMedia()>:
c002d658:	53                   	push   ebx
c002d659:	83 ec 14             	sub    esp,0x14
c002d65c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d660:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d666:	e8 c9 f9 fe ff       	call   c001d034 <VCache::writeWriteBuffer()>
c002d66b:	59                   	pop    ecx
c002d66c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d672:	e8 ad f9 fe ff       	call   c001d024 <VCache::invalidateReadBuffer()>
c002d677:	c7 04 24 6b 3a 03 c0 	mov    DWORD PTR [esp],0xc0033a6b
c002d67e:	e8 da bb fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002d683:	83 c4 10             	add    esp,0x10
c002d686:	31 c0                	xor    eax,eax
c002d688:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d68f:	85 d2                	test   edx,edx
c002d691:	74 0f                	je     c002d6a2 <SATAPI::detectMedia()+0x4a>
c002d693:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d699:	75 07                	jne    c002d6a2 <SATAPI::detectMedia()+0x4a>
c002d69b:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d6a2:	40                   	inc    eax
c002d6a3:	83 f8 1a             	cmp    eax,0x1a
c002d6a6:	75 e0                	jne    c002d688 <SATAPI::detectMedia()+0x30>
c002d6a8:	83 c4 08             	add    esp,0x8
c002d6ab:	5b                   	pop    ebx
c002d6ac:	c3                   	ret    
c002d6ad:	90                   	nop

c002d6ae <SATAPI::open(int, int, void*)>:
c002d6ae:	56                   	push   esi
c002d6af:	53                   	push   ebx
c002d6b0:	51                   	push   ecx
c002d6b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d6b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d6b9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d6c3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d6c9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d6d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d6d7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d6e1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d6e7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d6ee:	e8 e4 8f fe ff       	call   c00166d7 <Phys::allocatePage()>
c002d6f3:	89 c6                	mov    esi,eax
c002d6f5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d6fb:	81 c6 00 10 00 00    	add    esi,0x1000
c002d701:	e8 d1 8f fe ff       	call   c00166d7 <Phys::allocatePage()>
c002d706:	39 c6                	cmp    esi,eax
c002d708:	74 10                	je     c002d71a <SATAPI::open(int, int, void*)+0x6c>
c002d70a:	83 ec 0c             	sub    esp,0xc
c002d70d:	68 80 3a 03 c0       	push   0xc0033a80
c002d712:	e8 5f 2b ff ff       	call   c0020276 <KePanic(char const*)>
c002d717:	83 c4 10             	add    esp,0x10
c002d71a:	83 ec 0c             	sub    esp,0xc
c002d71d:	6a 02                	push   0x2
c002d71f:	e8 01 a8 fe ff       	call   c0017f25 <Virt::allocateKernelVirtualPages(int)>
c002d724:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d72a:	6a 03                	push   0x3
c002d72c:	50                   	push   eax
c002d72d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d733:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d739:	e8 fa ae fe ff       	call   c0018638 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d73e:	83 c4 14             	add    esp,0x14
c002d741:	68 78 01 00 00       	push   0x178
c002d746:	e8 73 8c fe ff       	call   c00163be <malloc>
c002d74b:	83 c4 0c             	add    esp,0xc
c002d74e:	89 c6                	mov    esi,eax
c002d750:	6a 00                	push   0x0
c002d752:	68 ff ff ff 7f       	push   0x7fffffff
c002d757:	6a 00                	push   0x0
c002d759:	6a 00                	push   0x0
c002d75b:	53                   	push   ebx
c002d75c:	68 96 3a 03 c0       	push   0xc0033a96
c002d761:	50                   	push   eax
c002d762:	e8 2d ed fe ff       	call   c001c494 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d767:	83 c4 14             	add    esp,0x14
c002d76a:	56                   	push   esi
c002d76b:	e8 e4 ed fe ff       	call   c001c554 <LogicalDisk::assignDriveLetter()>
c002d770:	5a                   	pop    edx
c002d771:	0f be c0             	movsx  eax,al
c002d774:	59                   	pop    ecx
c002d775:	50                   	push   eax
c002d776:	68 dc 38 03 c0       	push   0xc00338dc
c002d77b:	e8 dd ba fe ff       	call   c001925d <Dbg::kprintf(char const*, ...)>
c002d780:	58                   	pop    eax
c002d781:	5a                   	pop    edx
c002d782:	56                   	push   esi
c002d783:	53                   	push   ebx
c002d784:	e8 55 db fe ff       	call   c001b2de <Device::addChild(Device*)>
c002d789:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d78f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d792:	e8 93 df fe ff       	call   c001b72a <PhysicalDisk::startCache()>
c002d797:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d79e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d7a1:	e8 b2 fe ff ff       	call   c002d658 <SATAPI::detectMedia()>
c002d7a6:	83 c4 14             	add    esp,0x14
c002d7a9:	31 c0                	xor    eax,eax
c002d7ab:	5b                   	pop    ebx
c002d7ac:	5e                   	pop    esi
c002d7ad:	c3                   	ret    

c002d7ae <SATAPI::read(unsigned long long, int, void*)>:
c002d7ae:	57                   	push   edi
c002d7af:	56                   	push   esi
c002d7b0:	53                   	push   ebx
c002d7b1:	83 ec 30             	sub    esp,0x30
c002d7b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d7b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002d7bc:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002d7c0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d7cc:	83 fe 04             	cmp    esi,0x4
c002d7cf:	7e 10                	jle    c002d7e1 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002d7d1:	83 ec 0c             	sub    esp,0xc
c002d7d4:	68 a4 3a 03 c0       	push   0xc0033aa4
c002d7d9:	e8 98 2a ff ff       	call   c0020276 <KePanic(char const*)>
c002d7de:	83 c4 10             	add    esp,0x10
c002d7e1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d7e7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d7ed:	51                   	push   ecx
c002d7ee:	50                   	push   eax
c002d7ef:	83 c0 02             	add    eax,0x2
c002d7f2:	c1 e0 07             	shl    eax,0x7
c002d7f5:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d7fb:	50                   	push   eax
c002d7fc:	52                   	push   edx
c002d7fd:	e8 36 e1 ff ff       	call   c002b938 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d802:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d806:	b9 03 00 00 00       	mov    ecx,0x3
c002d80b:	fc                   	cld    
c002d80c:	31 c0                	xor    eax,eax
c002d80e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d810:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d815:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d81a:	83 c4 0c             	add    esp,0xc
c002d81d:	6a 00                	push   0x0
c002d81f:	6a 00                	push   0x0
c002d821:	6a 00                	push   0x0
c002d823:	6a 00                	push   0x0
c002d825:	6a 02                	push   0x2
c002d827:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d82b:	50                   	push   eax
c002d82c:	53                   	push   ebx
c002d82d:	e8 0c fb ff ff       	call   c002d33e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d832:	83 c4 20             	add    esp,0x20
c002d835:	85 c0                	test   eax,eax
c002d837:	75 44                	jne    c002d87d <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002d839:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d83d:	b9 03 00 00 00       	mov    ecx,0x3
c002d842:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d844:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d848:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d84d:	0f c8                	bswap  eax
c002d84f:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d853:	89 f0                	mov    eax,esi
c002d855:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d859:	50                   	push   eax
c002d85a:	56                   	push   esi
c002d85b:	c1 e6 0b             	shl    esi,0xb
c002d85e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002d862:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d866:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d86a:	56                   	push   esi
c002d86b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d86f:	50                   	push   eax
c002d870:	53                   	push   ebx
c002d871:	e8 c8 fa ff ff       	call   c002d33e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d876:	83 c4 20             	add    esp,0x20
c002d879:	85 c0                	test   eax,eax
c002d87b:	74 14                	je     c002d891 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002d87d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d881:	83 ec 0c             	sub    esp,0xc
c002d884:	53                   	push   ebx
c002d885:	e8 ce fd ff ff       	call   c002d658 <SATAPI::detectMedia()>
c002d88a:	83 c4 10             	add    esp,0x10
c002d88d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d891:	83 c4 30             	add    esp,0x30
c002d894:	5b                   	pop    ebx
c002d895:	5e                   	pop    esi
c002d896:	5f                   	pop    edi
c002d897:	c3                   	ret    

c002d898 <IOAPIC::close(int, int, void*)>:
c002d898:	b8 00 00 00 00       	mov    eax,0x0
c002d89d:	c3                   	ret    

c002d89e <apicGetBase()>:
c002d89e:	55                   	push   ebp
c002d89f:	89 e5                	mov    ebp,esp
c002d8a1:	83 ec 18             	sub    esp,0x18
c002d8a4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d8a9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d8af:	83 e0 08             	and    eax,0x8
c002d8b2:	0f b6 c0             	movzx  eax,al
c002d8b5:	85 c0                	test   eax,eax
c002d8b7:	75 07                	jne    c002d8c0 <apicGetBase()+0x22>
c002d8b9:	b8 00 00 00 00       	mov    eax,0x0
c002d8be:	eb 21                	jmp    c002d8e1 <apicGetBase()+0x43>
c002d8c0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d8c5:	83 ec 08             	sub    esp,0x8
c002d8c8:	6a 1b                	push   0x1b
c002d8ca:	50                   	push   eax
c002d8cb:	e8 f8 80 fe ff       	call   c00159c8 <Computer::rdmsr(unsigned int)>
c002d8d0:	83 c4 10             	add    esp,0x10
c002d8d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d8d6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d8d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d8dc:	25 00 00 ff ff       	and    eax,0xffff0000
c002d8e1:	c9                   	leave  
c002d8e2:	c3                   	ret    
c002d8e3:	90                   	nop

c002d8e4 <IOAPIC::IOAPIC()>:
c002d8e4:	83 ec 0c             	sub    esp,0xc
c002d8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d8eb:	83 ec 08             	sub    esp,0x8
c002d8ee:	68 08 3b 03 c0       	push   0xc0033b08
c002d8f3:	50                   	push   eax
c002d8f4:	e8 47 db fe ff       	call   c001b440 <Device::Device(char const*)>
c002d8f9:	83 c4 10             	add    esp,0x10
c002d8fc:	ba 18 3b 03 c0       	mov    edx,0xc0033b18
c002d901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d905:	89 10                	mov    DWORD PTR [eax],edx
c002d907:	90                   	nop
c002d908:	83 c4 0c             	add    esp,0xc
c002d90b:	c3                   	ret    

c002d90c <apicOpen()>:
c002d90c:	55                   	push   ebp
c002d90d:	89 e5                	mov    ebp,esp
c002d90f:	53                   	push   ebx
c002d910:	83 ec 34             	sub    esp,0x34
c002d913:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d918:	83 f0 01             	xor    eax,0x1
c002d91b:	0f b6 c0             	movzx  eax,al
c002d91e:	85 c0                	test   eax,eax
c002d920:	0f 84 a3 00 00 00    	je     c002d9c9 <apicOpen()+0xbd>
c002d926:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d92a:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d92f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d933:	0f b6 c0             	movzx  eax,al
c002d936:	39 c2                	cmp    edx,eax
c002d938:	0f 83 84 00 00 00    	jae    c002d9c2 <apicOpen()+0xb6>
c002d93e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d945:	83 ec 0c             	sub    esp,0xc
c002d948:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d94b:	e8 6e 8a fe ff       	call   c00163be <malloc>
c002d950:	83 c4 10             	add    esp,0x10
c002d953:	89 c3                	mov    ebx,eax
c002d955:	83 ec 0c             	sub    esp,0xc
c002d958:	53                   	push   ebx
c002d959:	e8 86 ff ff ff       	call   c002d8e4 <IOAPIC::IOAPIC()>
c002d95e:	83 c4 10             	add    esp,0x10
c002d961:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d964:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d968:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d96b:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d972:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d977:	83 c0 01             	add    eax,0x1
c002d97a:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d97f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d984:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d98a:	83 ec 08             	sub    esp,0x8
c002d98d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d990:	50                   	push   eax
c002d991:	e8 48 d9 fe ff       	call   c001b2de <Device::addChild(Device*)>
c002d996:	83 c4 10             	add    esp,0x10
c002d999:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d99c:	8b 00                	mov    eax,DWORD PTR [eax]
c002d99e:	83 c0 08             	add    eax,0x8
c002d9a1:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9a3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d9a7:	6a 00                	push   0x0
c002d9a9:	6a 00                	push   0x0
c002d9ab:	52                   	push   edx
c002d9ac:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d9af:	ff d0                	call   eax
c002d9b1:	83 c4 10             	add    esp,0x10
c002d9b4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002d9b7:	83 c0 01             	add    eax,0x1
c002d9ba:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002d9bd:	e9 68 ff ff ff       	jmp    c002d92a <apicOpen()+0x1e>
c002d9c2:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002d9c9:	e8 d0 fe ff ff       	call   c002d89e <apicGetBase()>
c002d9ce:	05 f0 00 00 00       	add    eax,0xf0
c002d9d3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d9d6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d9d9:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9db:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002d9de:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002d9e5:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002d9ec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d9ef:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002d9f2:	89 10                	mov    DWORD PTR [eax],edx
c002d9f4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002d9fb:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002da00:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002da03:	7d 7c                	jge    c002da81 <apicOpen()+0x175>
c002da05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002da08:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002da0f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002da12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002da15:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002da1c:	c1 e8 08             	shr    eax,0x8
c002da1f:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002da23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002da26:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002da2d:	c1 e8 18             	shr    eax,0x18
c002da30:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002da33:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002da37:	3d ff 00 00 00       	cmp    eax,0xff
c002da3c:	75 3a                	jne    c002da78 <apicOpen()+0x16c>
c002da3e:	e8 5b fe ff ff       	call   c002d89e <apicGetBase()>
c002da43:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002da47:	83 fa 01             	cmp    edx,0x1
c002da4a:	75 07                	jne    c002da53 <apicOpen()+0x147>
c002da4c:	ba 60 03 00 00       	mov    edx,0x360
c002da51:	eb 05                	jmp    c002da58 <apicOpen()+0x14c>
c002da53:	ba 50 03 00 00       	mov    edx,0x350
c002da58:	01 d0                	add    eax,edx
c002da5a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002da5d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002da60:	8b 00                	mov    eax,DWORD PTR [eax]
c002da62:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002da65:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002da6c:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002da70:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002da73:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002da76:	89 10                	mov    DWORD PTR [eax],edx
c002da78:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002da7c:	e9 7a ff ff ff       	jmp    c002d9fb <apicOpen()+0xef>
c002da81:	90                   	nop
c002da82:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002da85:	c9                   	leave  
c002da86:	c3                   	ret    
c002da87:	90                   	nop

c002da88 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002da88:	55                   	push   ebp
c002da89:	89 e5                	mov    ebp,esp
c002da8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002da94:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002da97:	72 1d                	jb     c002dab6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002da99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da9c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002daa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daa5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002daab:	01 d0                	add    eax,edx
c002daad:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002dab0:	73 04                	jae    c002dab6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002dab2:	b0 01                	mov    al,0x1
c002dab4:	eb 02                	jmp    c002dab8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002dab6:	b0 00                	mov    al,0x0
c002dab8:	5d                   	pop    ebp
c002dab9:	c3                   	ret    

c002daba <IOAPIC::read(int)>:
c002daba:	55                   	push   ebp
c002dabb:	89 e5                	mov    ebp,esp
c002dabd:	83 ec 10             	sub    esp,0x10
c002dac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dac3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dac9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dacc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dacf:	0f b6 d0             	movzx  edx,al
c002dad2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dad5:	89 10                	mov    DWORD PTR [eax],edx
c002dad7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dada:	83 c0 10             	add    eax,0x10
c002dadd:	8b 00                	mov    eax,DWORD PTR [eax]
c002dadf:	c9                   	leave  
c002dae0:	c3                   	ret    
c002dae1:	90                   	nop

c002dae2 <IOAPIC::open(int, int, void*)>:
c002dae2:	55                   	push   ebp
c002dae3:	89 e5                	mov    ebp,esp
c002dae5:	57                   	push   edi
c002dae6:	56                   	push   esi
c002dae7:	53                   	push   ebx
c002dae8:	83 ec 04             	sub    esp,0x4
c002daeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002daf1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002daf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dafa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002db00:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002db07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db0a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002db10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db13:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002db19:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002db20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db23:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002db29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db2c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002db32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db35:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002db3b:	0f b6 f0             	movzx  esi,al
c002db3e:	89 d0                	mov    eax,edx
c002db40:	ba 00 00 00 00       	mov    edx,0x0
c002db45:	89 c7                	mov    edi,eax
c002db47:	83 e7 ff             	and    edi,0xffffffff
c002db4a:	89 f9                	mov    ecx,edi
c002db4c:	0f b6 da             	movzx  ebx,dl
c002db4f:	89 c8                	mov    eax,ecx
c002db51:	89 da                	mov    edx,ebx
c002db53:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002db56:	8d 5e 08             	lea    ebx,[esi+0x8]
c002db59:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002db5d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002db61:	83 e0 00             	and    eax,0x0
c002db64:	09 d0                	or     eax,edx
c002db66:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002db6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db6d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002db73:	8d 50 01             	lea    edx,[eax+0x1]
c002db76:	88 d1                	mov    cl,dl
c002db78:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002db7b:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002db81:	0f b6 d0             	movzx  edx,al
c002db84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db87:	83 c2 08             	add    edx,0x8
c002db8a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002db8e:	0f b6 c9             	movzx  ecx,cl
c002db91:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002db97:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002db9b:	6a 01                	push   0x1
c002db9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dba0:	e8 15 ff ff ff       	call   c002daba <IOAPIC::read(int)>
c002dba5:	83 c4 08             	add    esp,0x8
c002dba8:	c1 f8 10             	sar    eax,0x10
c002dbab:	0f b6 c0             	movzx  eax,al
c002dbae:	8d 50 01             	lea    edx,[eax+0x1]
c002dbb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dbb4:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002dbba:	b8 00 00 00 00       	mov    eax,0x0
c002dbbf:	8d 65 f4             	lea    esp,[ebp-0xc]
c002dbc2:	5b                   	pop    ebx
c002dbc3:	5e                   	pop    esi
c002dbc4:	5f                   	pop    edi
c002dbc5:	5d                   	pop    ebp
c002dbc6:	c3                   	ret    
c002dbc7:	90                   	nop

c002dbc8 <IOAPIC::write(int, int)>:
c002dbc8:	55                   	push   ebp
c002dbc9:	89 e5                	mov    ebp,esp
c002dbcb:	83 ec 10             	sub    esp,0x10
c002dbce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dbd1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dbd7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dbda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dbdd:	0f b6 d0             	movzx  edx,al
c002dbe0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dbe3:	89 10                	mov    DWORD PTR [eax],edx
c002dbe5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dbe8:	8d 50 10             	lea    edx,[eax+0x10]
c002dbeb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dbee:	89 02                	mov    DWORD PTR [edx],eax
c002dbf0:	90                   	nop
c002dbf1:	c9                   	leave  
c002dbf2:	c3                   	ret    
c002dbf3:	90                   	nop

c002dbf4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002dbf4:	55                   	push   ebp
c002dbf5:	89 e5                	mov    ebp,esp
c002dbf7:	53                   	push   ebx
c002dbf8:	83 ec 2c             	sub    esp,0x2c
c002dbfb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dbfe:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002dc01:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002dc04:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002dc07:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002dc0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dc0d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dc10:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002dc13:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002dc16:	88 d8                	mov    al,bl
c002dc18:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002dc1b:	88 c8                	mov    al,cl
c002dc1d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002dc20:	88 d0                	mov    al,dl
c002dc22:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002dc25:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dc29:	83 c0 08             	add    eax,0x8
c002dc2c:	01 c0                	add    eax,eax
c002dc2e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002dc31:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dc35:	83 c0 08             	add    eax,0x8
c002dc38:	01 c0                	add    eax,eax
c002dc3a:	83 c0 01             	add    eax,0x1
c002dc3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002dc40:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dc43:	50                   	push   eax
c002dc44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc47:	e8 6e fe ff ff       	call   c002daba <IOAPIC::read(int)>
c002dc4c:	83 c4 08             	add    esp,0x8
c002dc4f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dc52:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002dc59:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dc5c:	c1 e0 18             	shl    eax,0x18
c002dc5f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002dc62:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002dc65:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dc68:	52                   	push   edx
c002dc69:	50                   	push   eax
c002dc6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc6d:	e8 56 ff ff ff       	call   c002dbc8 <IOAPIC::write(int, int)>
c002dc72:	83 c4 0c             	add    esp,0xc
c002dc75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc78:	50                   	push   eax
c002dc79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc7c:	e8 39 fe ff ff       	call   c002daba <IOAPIC::read(int)>
c002dc81:	83 c4 08             	add    esp,0x8
c002dc84:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002dc87:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002dc8e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002dc95:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002dc9c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002dca0:	85 c0                	test   eax,eax
c002dca2:	74 09                	je     c002dcad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002dca4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002dcab:	eb 07                	jmp    c002dcb4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002dcad:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dcb4:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dcb8:	85 c0                	test   eax,eax
c002dcba:	74 09                	je     c002dcc5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dcbc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dcc3:	eb 07                	jmp    c002dccc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dcc5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002dccc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dcd3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dcd7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dcda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dcdd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dce0:	52                   	push   edx
c002dce1:	50                   	push   eax
c002dce2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dce5:	e8 de fe ff ff       	call   c002dbc8 <IOAPIC::write(int, int)>
c002dcea:	83 c4 0c             	add    esp,0xc
c002dced:	90                   	nop
c002dcee:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dcf1:	c9                   	leave  
c002dcf2:	c3                   	ret    
c002dcf3:	90                   	nop

c002dcf4 <APICTimer::close(int, int, void*)>:
c002dcf4:	b8 00 00 00 00       	mov    eax,0x0
c002dcf9:	c3                   	ret    
c002dcfa:	66 90                	xchg   ax,ax

c002dcfc <apicTimerHandler(regs*, void*)>:
c002dcfc:	83 ec 0c             	sub    esp,0xc
c002dcff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dd03:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dd05:	b8 10 27 00 00       	mov    eax,0x2710
c002dd0a:	ba 00 00 00 00       	mov    edx,0x0
c002dd0f:	f7 f1                	div    ecx
c002dd11:	83 ec 0c             	sub    esp,0xc
c002dd14:	50                   	push   eax
c002dd15:	e8 36 f0 fe ff       	call   c001cd50 <timerHandler(unsigned int)>
c002dd1a:	83 c4 10             	add    esp,0x10
c002dd1d:	90                   	nop
c002dd1e:	83 c4 0c             	add    esp,0xc
c002dd21:	c3                   	ret    
c002dd22:	66 90                	xchg   ax,ax

c002dd24 <APICTimer::open(int, int, void*)>:
c002dd24:	83 ec 0c             	sub    esp,0xc
c002dd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd2d:	83 c0 24             	add    eax,0x24
c002dd30:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd32:	83 ec 08             	sub    esp,0x8
c002dd35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dd39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dd3d:	ff d0                	call   eax
c002dd3f:	83 c4 10             	add    esp,0x10
c002dd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd46:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dd4a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dd58:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002dd5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dd62:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002dd68:	83 ec 0c             	sub    esp,0xc
c002dd6b:	51                   	push   ecx
c002dd6c:	6a 01                	push   0x1
c002dd6e:	68 fc dc 02 c0       	push   0xc002dcfc
c002dd73:	52                   	push   edx
c002dd74:	50                   	push   eax
c002dd75:	e8 10 d5 fe ff       	call   c001b28a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dd7a:	83 c4 20             	add    esp,0x20
c002dd7d:	89 c2                	mov    edx,eax
c002dd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd83:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dd89:	b8 00 00 00 00       	mov    eax,0x0
c002dd8e:	83 c4 0c             	add    esp,0xc
c002dd91:	c3                   	ret    
c002dd92:	66 90                	xchg   ax,ax

c002dd94 <APICTimer::write(int)>:
c002dd94:	83 ec 0c             	sub    esp,0xc
c002dd97:	83 ec 0c             	sub    esp,0xc
c002dd9a:	68 3c 3b 03 c0       	push   0xc0033b3c
c002dd9f:	e8 d2 24 ff ff       	call   c0020276 <KePanic(char const*)>
c002dda4:	83 c4 10             	add    esp,0x10
c002dda7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ddaf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002ddb5:	90                   	nop
c002ddb6:	83 c4 0c             	add    esp,0xc
c002ddb9:	c3                   	ret    
c002ddba:	66 90                	xchg   ax,ax

c002ddbc <APICTimer::APICTimer()>:
c002ddbc:	83 ec 0c             	sub    esp,0xc
c002ddbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddc3:	83 ec 08             	sub    esp,0x8
c002ddc6:	68 4c 3b 03 c0       	push   0xc0033b4c
c002ddcb:	50                   	push   eax
c002ddcc:	e8 b3 ee fe ff       	call   c001cc84 <Timer::Timer(char const*)>
c002ddd1:	83 c4 10             	add    esp,0x10
c002ddd4:	ba 60 3b 03 c0       	mov    edx,0xc0033b60
c002ddd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dddd:	89 10                	mov    DWORD PTR [eax],edx
c002dddf:	90                   	nop
c002dde0:	83 c4 0c             	add    esp,0xc
c002dde3:	c3                   	ret    

c002dde4 <PIT::write(int)>:
c002dde4:	83 ec 10             	sub    esp,0x10
c002dde7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002ddeb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002ddef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002ddf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ddf9:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002ddfe:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002de03:	89 c2                	mov    edx,eax
c002de05:	c1 fa 1f             	sar    edx,0x1f
c002de08:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002de0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002de10:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002de17:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002de1c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002de20:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002de25:	ee                   	out    dx,al
c002de26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002de2a:	0f b6 c0             	movzx  eax,al
c002de2d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002de34:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002de38:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002de3c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002de41:	ee                   	out    dx,al
c002de42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002de46:	c1 f8 08             	sar    eax,0x8
c002de49:	0f b6 c0             	movzx  eax,al
c002de4c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002de53:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002de57:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002de5b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002de60:	ee                   	out    dx,al
c002de61:	90                   	nop
c002de62:	83 c4 10             	add    esp,0x10
c002de65:	c3                   	ret    
c002de66:	66 90                	xchg   ax,ax

c002de68 <pitHandler(regs*, void*)>:
c002de68:	83 ec 0c             	sub    esp,0xc
c002de6b:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002de71:	b8 10 27 00 00       	mov    eax,0x2710
c002de76:	89 c2                	mov    edx,eax
c002de78:	c1 fa 1f             	sar    edx,0x1f
c002de7b:	f7 f9                	idiv   ecx
c002de7d:	83 ec 0c             	sub    esp,0xc
c002de80:	50                   	push   eax
c002de81:	e8 ca ee fe ff       	call   c001cd50 <timerHandler(unsigned int)>
c002de86:	83 c4 10             	add    esp,0x10
c002de89:	90                   	nop
c002de8a:	83 c4 0c             	add    esp,0xc
c002de8d:	c3                   	ret    
c002de8e:	66 90                	xchg   ax,ax

c002de90 <PIT::open(int, int, void*)>:
c002de90:	83 ec 0c             	sub    esp,0xc
c002de93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de97:	8b 00                	mov    eax,DWORD PTR [eax]
c002de99:	83 c0 24             	add    eax,0x24
c002de9c:	8b 00                	mov    eax,DWORD PTR [eax]
c002de9e:	83 ec 08             	sub    esp,0x8
c002dea1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dea9:	ff d0                	call   eax
c002deab:	83 c4 10             	add    esp,0x10
c002deae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002deb2:	83 ec 0c             	sub    esp,0xc
c002deb5:	6a 00                	push   0x0
c002deb7:	6a 01                	push   0x1
c002deb9:	68 68 de 02 c0       	push   0xc002de68
c002debe:	6a 00                	push   0x0
c002dec0:	50                   	push   eax
c002dec1:	e8 c4 d3 fe ff       	call   c001b28a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dec6:	83 c4 20             	add    esp,0x20
c002dec9:	89 c2                	mov    edx,eax
c002decb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002decf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002ded5:	b8 00 00 00 00       	mov    eax,0x0
c002deda:	83 c4 0c             	add    esp,0xc
c002dedd:	c3                   	ret    
c002dede:	66 90                	xchg   ax,ax

c002dee0 <PIT::close(int, int, void*)>:
c002dee0:	83 ec 0c             	sub    esp,0xc
c002dee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dee7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002def1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002def5:	6a 01                	push   0x1
c002def7:	68 68 de 02 c0       	push   0xc002de68
c002defc:	6a 00                	push   0x0
c002defe:	50                   	push   eax
c002deff:	e8 bc d3 fe ff       	call   c001b2c0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002df04:	83 c4 10             	add    esp,0x10
c002df07:	b8 00 00 00 00       	mov    eax,0x0
c002df0c:	83 c4 0c             	add    esp,0xc
c002df0f:	c3                   	ret    

c002df10 <PIT::PIT()>:
c002df10:	83 ec 0c             	sub    esp,0xc
c002df13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df17:	83 ec 08             	sub    esp,0x8
c002df1a:	68 88 3b 03 c0       	push   0xc0033b88
c002df1f:	50                   	push   eax
c002df20:	e8 5f ed fe ff       	call   c001cc84 <Timer::Timer(char const*)>
c002df25:	83 c4 10             	add    esp,0x10
c002df28:	ba b0 3b 03 c0       	mov    edx,0xc0033bb0
c002df2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df31:	89 10                	mov    DWORD PTR [eax],edx
c002df33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002df3d:	0f b6 d0             	movzx  edx,al
c002df40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df44:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002df4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002df55:	0f b6 d0             	movzx  edx,al
c002df58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df5c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002df61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002df6b:	8d 50 01             	lea    edx,[eax+0x1]
c002df6e:	88 d1                	mov    cl,dl
c002df70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002df74:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002df7a:	0f b6 d0             	movzx  edx,al
c002df7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df81:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002df85:	83 e1 3f             	and    ecx,0x3f
c002df88:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002df8c:	90                   	nop
c002df8d:	83 c4 0c             	add    esp,0xc
c002df90:	c3                   	ret    
c002df91:	66 90                	xchg   ax,ax
c002df93:	66 90                	xchg   ax,ax
c002df95:	66 90                	xchg   ax,ax
c002df97:	66 90                	xchg   ax,ax
c002df99:	66 90                	xchg   ax,ax
c002df9b:	66 90                	xchg   ax,ax
c002df9d:	66 90                	xchg   ax,ax
c002df9f:	90                   	nop

c002dfa0 <avxDetect>:
c002dfa0:	b8 01 00 00 00       	mov    eax,0x1
c002dfa5:	0f a2                	cpuid  
c002dfa7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002dfad:	74 15                	je     c002dfc4 <avxDetect.noAVX>
c002dfaf:	b8 01 00 00 00       	mov    eax,0x1
c002dfb4:	0f a2                	cpuid  
c002dfb6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002dfbc:	74 06                	je     c002dfc4 <avxDetect.noAVX>
c002dfbe:	b8 01 00 00 00       	mov    eax,0x1
c002dfc3:	c3                   	ret    

c002dfc4 <avxDetect.noAVX>:
c002dfc4:	b8 00 00 00 00       	mov    eax,0x0
c002dfc9:	c3                   	ret    

c002dfca <avxSave>:
c002dfca:	53                   	push   ebx
c002dfcb:	52                   	push   edx
c002dfcc:	31 c0                	xor    eax,eax
c002dfce:	48                   	dec    eax
c002dfcf:	89 c2                	mov    edx,eax
c002dfd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dfd5:	0f ae 23             	xsave  [ebx]
c002dfd8:	5a                   	pop    edx
c002dfd9:	5b                   	pop    ebx
c002dfda:	c3                   	ret    

c002dfdb <avxLoad>:
c002dfdb:	53                   	push   ebx
c002dfdc:	52                   	push   edx
c002dfdd:	31 c0                	xor    eax,eax
c002dfdf:	48                   	dec    eax
c002dfe0:	89 c2                	mov    edx,eax
c002dfe2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dfe6:	0f ae 2b             	xrstor [ebx]
c002dfe9:	5a                   	pop    edx
c002dfea:	5b                   	pop    ebx
c002dfeb:	c3                   	ret    

c002dfec <avxInit>:
c002dfec:	e8 47 03 00 00       	call   c002e338 <sseInit>
c002dff1:	50                   	push   eax
c002dff2:	51                   	push   ecx
c002dff3:	0f 20 e0             	mov    eax,cr4
c002dff6:	0d 00 00 04 00       	or     eax,0x40000
c002dffb:	0f 22 e0             	mov    cr4,eax
c002dffe:	31 c9                	xor    ecx,ecx
c002e000:	0f 01 d0             	xgetbv 
c002e003:	0d 07 00 00 00       	or     eax,0x7
c002e008:	0f 01 d1             	xsetbv 
c002e00b:	59                   	pop    ecx
c002e00c:	58                   	pop    eax
c002e00d:	c3                   	ret    

c002e00e <avxClose>:
c002e00e:	c3                   	ret    
c002e00f:	90                   	nop

c002e010 <isr0>:
c002e010:	fa                   	cli    
c002e011:	68 00 00 00 00       	push   0x0
c002e016:	68 00 00 00 00       	push   0x0
c002e01b:	e9 56 01 00 00       	jmp    c002e176 <int_common_stub>

c002e020 <isr1>:
c002e020:	fa                   	cli    
c002e021:	6a 00                	push   0x0
c002e023:	6a 01                	push   0x1
c002e025:	e9 4c 01 00 00       	jmp    c002e176 <int_common_stub>

c002e02a <isr2>:
c002e02a:	fa                   	cli    
c002e02b:	6a 00                	push   0x0
c002e02d:	6a 02                	push   0x2
c002e02f:	e9 42 01 00 00       	jmp    c002e176 <int_common_stub>

c002e034 <isr3>:
c002e034:	fa                   	cli    
c002e035:	6a 00                	push   0x0
c002e037:	6a 03                	push   0x3
c002e039:	e9 38 01 00 00       	jmp    c002e176 <int_common_stub>

c002e03e <isr4>:
c002e03e:	fa                   	cli    
c002e03f:	6a 00                	push   0x0
c002e041:	6a 04                	push   0x4
c002e043:	e9 2e 01 00 00       	jmp    c002e176 <int_common_stub>

c002e048 <isr5>:
c002e048:	fa                   	cli    
c002e049:	6a 00                	push   0x0
c002e04b:	6a 05                	push   0x5
c002e04d:	e9 24 01 00 00       	jmp    c002e176 <int_common_stub>

c002e052 <isr6>:
c002e052:	fa                   	cli    
c002e053:	6a 00                	push   0x0
c002e055:	6a 06                	push   0x6
c002e057:	e9 1a 01 00 00       	jmp    c002e176 <int_common_stub>

c002e05c <isr7>:
c002e05c:	fa                   	cli    
c002e05d:	6a 00                	push   0x0
c002e05f:	6a 07                	push   0x7
c002e061:	e9 10 01 00 00       	jmp    c002e176 <int_common_stub>

c002e066 <isr8>:
c002e066:	fa                   	cli    
c002e067:	6a 08                	push   0x8
c002e069:	e9 08 01 00 00       	jmp    c002e176 <int_common_stub>

c002e06e <isr9>:
c002e06e:	fa                   	cli    
c002e06f:	6a 00                	push   0x0
c002e071:	6a 09                	push   0x9
c002e073:	e9 fe 00 00 00       	jmp    c002e176 <int_common_stub>

c002e078 <isr10>:
c002e078:	fa                   	cli    
c002e079:	6a 0a                	push   0xa
c002e07b:	e9 f6 00 00 00       	jmp    c002e176 <int_common_stub>

c002e080 <isr11>:
c002e080:	fa                   	cli    
c002e081:	6a 0b                	push   0xb
c002e083:	e9 ee 00 00 00       	jmp    c002e176 <int_common_stub>

c002e088 <isr12>:
c002e088:	fa                   	cli    
c002e089:	6a 0c                	push   0xc
c002e08b:	e9 e6 00 00 00       	jmp    c002e176 <int_common_stub>

c002e090 <isr13>:
c002e090:	fa                   	cli    
c002e091:	6a 0d                	push   0xd
c002e093:	53                   	push   ebx
c002e094:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e098:	81 fb 66 e2 02 c0    	cmp    ebx,0xc002e266
c002e09e:	5b                   	pop    ebx
c002e09f:	0f 84 c3 01 00 00    	je     c002e268 <finishSignal2>
c002e0a5:	e9 cc 00 00 00       	jmp    c002e176 <int_common_stub>

c002e0aa <isr14>:
c002e0aa:	fa                   	cli    
c002e0ab:	6a 0e                	push   0xe
c002e0ad:	e9 c4 00 00 00       	jmp    c002e176 <int_common_stub>

c002e0b2 <isr15>:
c002e0b2:	fa                   	cli    
c002e0b3:	6a 00                	push   0x0
c002e0b5:	6a 0f                	push   0xf
c002e0b7:	e9 ba 00 00 00       	jmp    c002e176 <int_common_stub>

c002e0bc <isr16>:
c002e0bc:	fa                   	cli    
c002e0bd:	6a 00                	push   0x0
c002e0bf:	6a 10                	push   0x10
c002e0c1:	e9 b0 00 00 00       	jmp    c002e176 <int_common_stub>

c002e0c6 <isr17>:
c002e0c6:	fa                   	cli    
c002e0c7:	6a 00                	push   0x0
c002e0c9:	6a 11                	push   0x11
c002e0cb:	e9 a6 00 00 00       	jmp    c002e176 <int_common_stub>

c002e0d0 <isr18>:
c002e0d0:	fa                   	cli    
c002e0d1:	6a 00                	push   0x0
c002e0d3:	6a 12                	push   0x12
c002e0d5:	e9 9c 00 00 00       	jmp    c002e176 <int_common_stub>

c002e0da <irq3>:
c002e0da:	fa                   	cli    
c002e0db:	6a 00                	push   0x0
c002e0dd:	6a 23                	push   0x23
c002e0df:	e9 92 00 00 00       	jmp    c002e176 <int_common_stub>

c002e0e4 <irq4>:
c002e0e4:	fa                   	cli    
c002e0e5:	6a 00                	push   0x0
c002e0e7:	6a 24                	push   0x24
c002e0e9:	e9 88 00 00 00       	jmp    c002e176 <int_common_stub>

c002e0ee <irq5>:
c002e0ee:	fa                   	cli    
c002e0ef:	6a 00                	push   0x0
c002e0f1:	6a 25                	push   0x25
c002e0f3:	e9 7e 00 00 00       	jmp    c002e176 <int_common_stub>

c002e0f8 <irq6>:
c002e0f8:	fa                   	cli    
c002e0f9:	6a 00                	push   0x0
c002e0fb:	6a 26                	push   0x26
c002e0fd:	e9 74 00 00 00       	jmp    c002e176 <int_common_stub>

c002e102 <irq7>:
c002e102:	fa                   	cli    
c002e103:	6a 00                	push   0x0
c002e105:	6a 27                	push   0x27
c002e107:	e9 6a 00 00 00       	jmp    c002e176 <int_common_stub>

c002e10c <irq8>:
c002e10c:	fa                   	cli    
c002e10d:	6a 00                	push   0x0
c002e10f:	6a 28                	push   0x28
c002e111:	e9 60 00 00 00       	jmp    c002e176 <int_common_stub>

c002e116 <irq9>:
c002e116:	fa                   	cli    
c002e117:	6a 00                	push   0x0
c002e119:	6a 29                	push   0x29
c002e11b:	e9 56 00 00 00       	jmp    c002e176 <int_common_stub>

c002e120 <irq10>:
c002e120:	fa                   	cli    
c002e121:	6a 00                	push   0x0
c002e123:	6a 2a                	push   0x2a
c002e125:	e9 4c 00 00 00       	jmp    c002e176 <int_common_stub>

c002e12a <irq11>:
c002e12a:	fa                   	cli    
c002e12b:	6a 00                	push   0x0
c002e12d:	6a 2b                	push   0x2b
c002e12f:	e9 42 00 00 00       	jmp    c002e176 <int_common_stub>

c002e134 <irq12>:
c002e134:	fa                   	cli    
c002e135:	6a 00                	push   0x0
c002e137:	6a 2c                	push   0x2c
c002e139:	e9 38 00 00 00       	jmp    c002e176 <int_common_stub>

c002e13e <irq13>:
c002e13e:	fa                   	cli    
c002e13f:	6a 00                	push   0x0
c002e141:	6a 2d                	push   0x2d
c002e143:	e9 2e 00 00 00       	jmp    c002e176 <int_common_stub>

c002e148 <irq14>:
c002e148:	fa                   	cli    
c002e149:	6a 00                	push   0x0
c002e14b:	6a 2e                	push   0x2e
c002e14d:	e9 24 00 00 00       	jmp    c002e176 <int_common_stub>

c002e152 <irq15>:
c002e152:	fa                   	cli    
c002e153:	6a 00                	push   0x0
c002e155:	6a 2f                	push   0x2f
c002e157:	e9 1a 00 00 00       	jmp    c002e176 <int_common_stub>

c002e15c <irq1>:
c002e15c:	fa                   	cli    
c002e15d:	6a 00                	push   0x0
c002e15f:	6a 21                	push   0x21
c002e161:	eb 13                	jmp    c002e176 <int_common_stub>

c002e163 <irq2>:
c002e163:	fa                   	cli    
c002e164:	6a 00                	push   0x0
c002e166:	6a 22                	push   0x22
c002e168:	eb 0c                	jmp    c002e176 <int_common_stub>

c002e16a <isr96>:
c002e16a:	6a 00                	push   0x0
c002e16c:	6a 60                	push   0x60
c002e16e:	fb                   	sti    
c002e16f:	eb 37                	jmp    c002e1a8 <syscall_common_stub>

c002e171 <irq0>:
c002e171:	fa                   	cli    
c002e172:	6a 00                	push   0x0
c002e174:	6a 20                	push   0x20

c002e176 <int_common_stub>:
c002e176:	60                   	pusha  
c002e177:	1e                   	push   ds
c002e178:	06                   	push   es
c002e179:	0f a0                	push   fs
c002e17b:	0f a8                	push   gs
c002e17d:	66 b8 10 00          	mov    ax,0x10
c002e181:	66 8e d8             	mov    ds,ax
c002e184:	66 8e c0             	mov    es,ax
c002e187:	66 8e e0             	mov    fs,ax
c002e18a:	66 8e e8             	mov    gs,ax
c002e18d:	54                   	push   esp
c002e18e:	fc                   	cld    
c002e18f:	e8 0c d6 fe ff       	call   c001b7a0 <int_handler>
c002e194:	81 c4 04 00 00 00    	add    esp,0x4
c002e19a:	0f a9                	pop    gs
c002e19c:	0f a1                	pop    fs
c002e19e:	07                   	pop    es
c002e19f:	1f                   	pop    ds
c002e1a0:	61                   	popa   
c002e1a1:	81 c4 08 00 00 00    	add    esp,0x8
c002e1a7:	cf                   	iret   

c002e1a8 <syscall_common_stub>:
c002e1a8:	60                   	pusha  
c002e1a9:	1e                   	push   ds
c002e1aa:	06                   	push   es
c002e1ab:	0f a0                	push   fs
c002e1ad:	0f a8                	push   gs
c002e1af:	66 b8 10 00          	mov    ax,0x10
c002e1b3:	66 8e d8             	mov    ds,ax
c002e1b6:	66 8e c0             	mov    es,ax
c002e1b9:	66 8e e0             	mov    fs,ax
c002e1bc:	66 8e e8             	mov    gs,ax
c002e1bf:	54                   	push   esp
c002e1c0:	fc                   	cld    
c002e1c1:	e8 da d5 fe ff       	call   c001b7a0 <int_handler>
c002e1c6:	81 c4 04 00 00 00    	add    esp,0x4
c002e1cc:	0f a9                	pop    gs
c002e1ce:	0f a1                	pop    fs
c002e1d0:	07                   	pop    es
c002e1d1:	1f                   	pop    ds
c002e1d2:	e8 cc 2a ff ff       	call   c0020ca3 <KiCheckSignalZ>
c002e1d7:	3d 00 00 00 00       	cmp    eax,0x0
c002e1dc:	0f 84 c0 00 00 00    	je     c002e2a2 <skipSignals>
c002e1e2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e1e7:	61                   	popa   
c002e1e8:	53                   	push   ebx
c002e1e9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e1ef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e1f2:	5b                   	pop    ebx
c002e1f3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e1f8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e1fb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e1fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e201:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e204:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e207:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e20a:	81 c4 08 00 00 00    	add    esp,0x8
c002e210:	5e                   	pop    esi
c002e211:	5b                   	pop    ebx
c002e212:	59                   	pop    ecx
c002e213:	5a                   	pop    edx
c002e214:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e217:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e21a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e21d:	52                   	push   edx
c002e21e:	51                   	push   ecx
c002e21f:	53                   	push   ebx
c002e220:	56                   	push   esi
c002e221:	81 ec 08 00 00 00    	sub    esp,0x8
c002e227:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e22a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e22d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e230:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e233:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e236:	60                   	pusha  
c002e237:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e23d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e240:	89 e3                	mov    ebx,esp
c002e242:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e245:	52                   	push   edx
c002e246:	68 66 e2 02 c0       	push   0xc002e266
c002e24b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e24e:	89 dc                	mov    esp,ebx
c002e250:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e253:	68 23 00 00 00       	push   0x23
c002e258:	51                   	push   ecx
c002e259:	68 02 02 00 00       	push   0x202
c002e25e:	68 1b 00 00 00       	push   0x1b
c002e263:	ff 36                	push   DWORD PTR [esi]
c002e265:	cf                   	iret   

c002e266 <finishSignal>:
c002e266:	cd 0f                	int    0xf

c002e268 <finishSignal2>:
c002e268:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e26e:	e8 ad 2a ff ff       	call   c0020d20 <KiFinishSignalZ>
c002e273:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e279:	68 23 00 00 00       	push   0x23
c002e27e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e281:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e284:	68 1b 00 00 00       	push   0x1b
c002e289:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e28c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e28f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e292:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e295:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e298:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e29b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e29e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e2a1:	cf                   	iret   

c002e2a2 <skipSignals>:
c002e2a2:	61                   	popa   
c002e2a3:	81 c4 08 00 00 00    	add    esp,0x8
c002e2a9:	cf                   	iret   
c002e2aa:	90                   	nop
c002e2ab:	90                   	nop

c002e2ac <irq16>:
c002e2ac:	fa                   	cli    
c002e2ad:	6a 00                	push   0x0
c002e2af:	6a 30                	push   0x30
c002e2b1:	e9 c0 fe ff ff       	jmp    c002e176 <int_common_stub>

c002e2b6 <irq17>:
c002e2b6:	fa                   	cli    
c002e2b7:	6a 00                	push   0x0
c002e2b9:	6a 31                	push   0x31
c002e2bb:	e9 b6 fe ff ff       	jmp    c002e176 <int_common_stub>

c002e2c0 <irq18>:
c002e2c0:	fa                   	cli    
c002e2c1:	6a 00                	push   0x0
c002e2c3:	6a 32                	push   0x32
c002e2c5:	e9 ac fe ff ff       	jmp    c002e176 <int_common_stub>

c002e2ca <irq19>:
c002e2ca:	fa                   	cli    
c002e2cb:	6a 00                	push   0x0
c002e2cd:	6a 33                	push   0x33
c002e2cf:	e9 a2 fe ff ff       	jmp    c002e176 <int_common_stub>

c002e2d4 <irq20>:
c002e2d4:	fa                   	cli    
c002e2d5:	6a 00                	push   0x0
c002e2d7:	6a 34                	push   0x34
c002e2d9:	e9 98 fe ff ff       	jmp    c002e176 <int_common_stub>

c002e2de <irq21>:
c002e2de:	fa                   	cli    
c002e2df:	6a 00                	push   0x0
c002e2e1:	6a 35                	push   0x35
c002e2e3:	e9 8e fe ff ff       	jmp    c002e176 <int_common_stub>

c002e2e8 <irq22>:
c002e2e8:	fa                   	cli    
c002e2e9:	6a 00                	push   0x0
c002e2eb:	6a 36                	push   0x36
c002e2ed:	e9 84 fe ff ff       	jmp    c002e176 <int_common_stub>

c002e2f2 <irq23>:
c002e2f2:	fa                   	cli    
c002e2f3:	6a 00                	push   0x0
c002e2f5:	6a 37                	push   0x37
c002e2f7:	e9 7a fe ff ff       	jmp    c002e176 <int_common_stub>
c002e2fc:	66 90                	xchg   ax,ax
c002e2fe:	66 90                	xchg   ax,ax

c002e300 <i386GetRDRAND>:
c002e300:	b9 64 00 00 00       	mov    ecx,0x64

c002e305 <retry>:
c002e305:	0f c7 f0             	rdrand eax
c002e308:	72 05                	jb     c002e30f <retry.done>
c002e30a:	e2 f9                	loop   c002e305 <retry>

c002e30c <retry.fail>:
c002e30c:	31 c0                	xor    eax,eax
c002e30e:	c3                   	ret    

c002e30f <retry.done>:
c002e30f:	c3                   	ret    

c002e310 <sseDetect>:
c002e310:	b8 01 00 00 00       	mov    eax,0x1
c002e315:	0f a2                	cpuid  
c002e317:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e31d:	74 06                	je     c002e325 <sseDetect.noSSE>
c002e31f:	b8 01 00 00 00       	mov    eax,0x1
c002e324:	c3                   	ret    

c002e325 <sseDetect.noSSE>:
c002e325:	31 c0                	xor    eax,eax
c002e327:	c3                   	ret    

c002e328 <sseSave>:
c002e328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e32c:	0f ae 00             	fxsave [eax]
c002e32f:	c3                   	ret    

c002e330 <sseLoad>:
c002e330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e334:	0f ae 08             	fxrstor [eax]
c002e337:	c3                   	ret    

c002e338 <sseInit>:
c002e338:	e8 42 00 00 00       	call   c002e37f <x87Init>
c002e33d:	0f 20 e0             	mov    eax,cr4
c002e340:	66 0d 00 06          	or     ax,0x600
c002e344:	0f 22 e0             	mov    cr4,eax
c002e347:	c3                   	ret    

c002e348 <sseClose>:
c002e348:	c3                   	ret    
c002e349:	66 90                	xchg   ax,ax
c002e34b:	66 90                	xchg   ax,ax
c002e34d:	66 90                	xchg   ax,ax
c002e34f:	90                   	nop

c002e350 <value_37F>:
c002e350:	7f 03                	jg     c002e355 <value_37A+0x1>

c002e352 <value_37E>:
c002e352:	7e 03                	jle    c002e357 <x87Detect+0x1>

c002e354 <value_37A>:
c002e354:	7a 03                	jp     c002e359 <x87Detect+0x3>

c002e356 <x87Detect>:
c002e356:	b8 01 00 00 00       	mov    eax,0x1
c002e35b:	0f a2                	cpuid  
c002e35d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e363:	74 06                	je     c002e36b <x87Detect.nox87>
c002e365:	b8 01 00 00 00       	mov    eax,0x1
c002e36a:	c3                   	ret    

c002e36b <x87Detect.nox87>:
c002e36b:	b8 00 00 00 00       	mov    eax,0x0
c002e370:	c3                   	ret    

c002e371 <x87Save>:
c002e371:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e375:	dd 30                	fnsave [eax]
c002e377:	c3                   	ret    

c002e378 <x87Load>:
c002e378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e37c:	dd 20                	frstor [eax]
c002e37e:	c3                   	ret    

c002e37f <x87Init>:
c002e37f:	0f 20 c0             	mov    eax,cr0
c002e382:	66 25 fb ff          	and    ax,0xfffb
c002e386:	66 0d 22 00          	or     ax,0x22
c002e38a:	0f 22 c0             	mov    cr0,eax
c002e38d:	db e3                	fninit 
c002e38f:	0f 06                	clts   
c002e391:	d9 2d 54 e3 02 c0    	fldcw  WORD PTR ds:0xc002e354
c002e397:	c3                   	ret    

c002e398 <x87Close>:
c002e398:	c3                   	ret    
c002e399:	66 90                	xchg   ax,ax
c002e39b:	90                   	nop

c002e39c <__do_global_ctors_aux>:
c002e39c:	a1 50 f3 02 c0       	mov    eax,ds:0xc002f350
c002e3a1:	83 f8 ff             	cmp    eax,0xffffffff
c002e3a4:	74 1a                	je     c002e3c0 <__do_global_ctors_aux+0x24>
c002e3a6:	55                   	push   ebp
c002e3a7:	89 e5                	mov    ebp,esp
c002e3a9:	53                   	push   ebx
c002e3aa:	52                   	push   edx
c002e3ab:	bb 50 f3 02 c0       	mov    ebx,0xc002f350
c002e3b0:	ff d0                	call   eax
c002e3b2:	83 eb 04             	sub    ebx,0x4
c002e3b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e3b7:	83 f8 ff             	cmp    eax,0xffffffff
c002e3ba:	75 f4                	jne    c002e3b0 <__do_global_ctors_aux+0x14>
c002e3bc:	58                   	pop    eax
c002e3bd:	5b                   	pop    ebx
c002e3be:	5d                   	pop    ebp
c002e3bf:	c3                   	ret    
c002e3c0:	c3                   	ret    
c002e3c1:	66 90                	xchg   ax,ax
c002e3c3:	90                   	nop

c002e3c4 <__divdi3>:
c002e3c4:	55                   	push   ebp
c002e3c5:	57                   	push   edi
c002e3c6:	56                   	push   esi
c002e3c7:	53                   	push   ebx
c002e3c8:	83 ec 1c             	sub    esp,0x1c
c002e3cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e3cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e3d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e3d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e3da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e3de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e3e2:	85 db                	test   ebx,ebx
c002e3e4:	0f 88 8e 00 00 00    	js     c002e478 <__divdi3+0xb4>
c002e3ea:	89 dd                	mov    ebp,ebx
c002e3ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e3f4:	89 d3                	mov    ebx,edx
c002e3f6:	85 d2                	test   edx,edx
c002e3f8:	79 0d                	jns    c002e407 <__divdi3+0x43>
c002e3fa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e3fe:	f7 d8                	neg    eax
c002e400:	83 d2 00             	adc    edx,0x0
c002e403:	f7 da                	neg    edx
c002e405:	89 d3                	mov    ebx,edx
c002e407:	89 c7                	mov    edi,eax
c002e409:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e40c:	85 db                	test   ebx,ebx
c002e40e:	75 48                	jne    c002e458 <__divdi3+0x94>
c002e410:	39 ef                	cmp    edi,ebp
c002e412:	76 24                	jbe    c002e438 <__divdi3+0x74>
c002e414:	89 ea                	mov    edx,ebp
c002e416:	f7 f7                	div    edi
c002e418:	89 c1                	mov    ecx,eax
c002e41a:	31 f6                	xor    esi,esi
c002e41c:	89 c8                	mov    eax,ecx
c002e41e:	89 f2                	mov    edx,esi
c002e420:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e424:	85 c9                	test   ecx,ecx
c002e426:	74 07                	je     c002e42f <__divdi3+0x6b>
c002e428:	f7 d8                	neg    eax
c002e42a:	83 d2 00             	adc    edx,0x0
c002e42d:	f7 da                	neg    edx
c002e42f:	83 c4 1c             	add    esp,0x1c
c002e432:	5b                   	pop    ebx
c002e433:	5e                   	pop    esi
c002e434:	5f                   	pop    edi
c002e435:	5d                   	pop    ebp
c002e436:	c3                   	ret    
c002e437:	90                   	nop
c002e438:	85 ff                	test   edi,edi
c002e43a:	75 0b                	jne    c002e447 <__divdi3+0x83>
c002e43c:	b8 01 00 00 00       	mov    eax,0x1
c002e441:	31 d2                	xor    edx,edx
c002e443:	f7 f3                	div    ebx
c002e445:	89 c7                	mov    edi,eax
c002e447:	31 d2                	xor    edx,edx
c002e449:	89 e8                	mov    eax,ebp
c002e44b:	f7 f7                	div    edi
c002e44d:	89 c6                	mov    esi,eax
c002e44f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e452:	f7 f7                	div    edi
c002e454:	89 c1                	mov    ecx,eax
c002e456:	eb c4                	jmp    c002e41c <__divdi3+0x58>
c002e458:	39 eb                	cmp    ebx,ebp
c002e45a:	77 3c                	ja     c002e498 <__divdi3+0xd4>
c002e45c:	0f bd f3             	bsr    esi,ebx
c002e45f:	83 f6 1f             	xor    esi,0x1f
c002e462:	75 40                	jne    c002e4a4 <__divdi3+0xe0>
c002e464:	39 eb                	cmp    ebx,ebp
c002e466:	72 09                	jb     c002e471 <__divdi3+0xad>
c002e468:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e46b:	0f 87 97 00 00 00    	ja     c002e508 <__divdi3+0x144>
c002e471:	b9 01 00 00 00       	mov    ecx,0x1
c002e476:	eb a4                	jmp    c002e41c <__divdi3+0x58>
c002e478:	f7 d9                	neg    ecx
c002e47a:	83 d3 00             	adc    ebx,0x0
c002e47d:	f7 db                	neg    ebx
c002e47f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e482:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e486:	89 dd                	mov    ebp,ebx
c002e488:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e490:	e9 5f ff ff ff       	jmp    c002e3f4 <__divdi3+0x30>
c002e495:	8d 76 00             	lea    esi,[esi+0x0]
c002e498:	31 f6                	xor    esi,esi
c002e49a:	31 c9                	xor    ecx,ecx
c002e49c:	e9 7b ff ff ff       	jmp    c002e41c <__divdi3+0x58>
c002e4a1:	8d 76 00             	lea    esi,[esi+0x0]
c002e4a4:	b8 20 00 00 00       	mov    eax,0x20
c002e4a9:	29 f0                	sub    eax,esi
c002e4ab:	89 f1                	mov    ecx,esi
c002e4ad:	d3 e3                	shl    ebx,cl
c002e4af:	89 fa                	mov    edx,edi
c002e4b1:	88 c1                	mov    cl,al
c002e4b3:	d3 ea                	shr    edx,cl
c002e4b5:	09 da                	or     edx,ebx
c002e4b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e4bb:	89 f1                	mov    ecx,esi
c002e4bd:	d3 e7                	shl    edi,cl
c002e4bf:	89 eb                	mov    ebx,ebp
c002e4c1:	88 c1                	mov    cl,al
c002e4c3:	d3 eb                	shr    ebx,cl
c002e4c5:	89 f1                	mov    ecx,esi
c002e4c7:	d3 e5                	shl    ebp,cl
c002e4c9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e4cc:	88 c1                	mov    cl,al
c002e4ce:	d3 ea                	shr    edx,cl
c002e4d0:	09 d5                	or     ebp,edx
c002e4d2:	89 e8                	mov    eax,ebp
c002e4d4:	89 da                	mov    edx,ebx
c002e4d6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e4da:	89 d3                	mov    ebx,edx
c002e4dc:	89 c5                	mov    ebp,eax
c002e4de:	f7 e7                	mul    edi
c002e4e0:	39 d3                	cmp    ebx,edx
c002e4e2:	72 18                	jb     c002e4fc <__divdi3+0x138>
c002e4e4:	74 0a                	je     c002e4f0 <__divdi3+0x12c>
c002e4e6:	89 e9                	mov    ecx,ebp
c002e4e8:	31 f6                	xor    esi,esi
c002e4ea:	e9 2d ff ff ff       	jmp    c002e41c <__divdi3+0x58>
c002e4ef:	90                   	nop
c002e4f0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e4f3:	89 f1                	mov    ecx,esi
c002e4f5:	d3 e7                	shl    edi,cl
c002e4f7:	39 c7                	cmp    edi,eax
c002e4f9:	73 eb                	jae    c002e4e6 <__divdi3+0x122>
c002e4fb:	90                   	nop
c002e4fc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e4ff:	31 f6                	xor    esi,esi
c002e501:	e9 16 ff ff ff       	jmp    c002e41c <__divdi3+0x58>
c002e506:	66 90                	xchg   ax,ax
c002e508:	31 c9                	xor    ecx,ecx
c002e50a:	e9 0d ff ff ff       	jmp    c002e41c <__divdi3+0x58>
c002e50f:	90                   	nop

c002e510 <__moddi3>:
c002e510:	55                   	push   ebp
c002e511:	57                   	push   edi
c002e512:	56                   	push   esi
c002e513:	53                   	push   ebx
c002e514:	83 ec 2c             	sub    esp,0x2c
c002e517:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e51b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e51f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e523:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e527:	85 db                	test   ebx,ebx
c002e529:	0f 88 85 00 00 00    	js     c002e5b4 <__moddi3+0xa4>
c002e52f:	89 de                	mov    esi,ebx
c002e531:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e539:	89 d7                	mov    edi,edx
c002e53b:	85 d2                	test   edx,edx
c002e53d:	79 09                	jns    c002e548 <__moddi3+0x38>
c002e53f:	f7 d8                	neg    eax
c002e541:	83 d2 00             	adc    edx,0x0
c002e544:	f7 da                	neg    edx
c002e546:	89 d7                	mov    edi,edx
c002e548:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e54c:	89 cd                	mov    ebp,ecx
c002e54e:	85 ff                	test   edi,edi
c002e550:	75 52                	jne    c002e5a4 <__moddi3+0x94>
c002e552:	89 c3                	mov    ebx,eax
c002e554:	39 f0                	cmp    eax,esi
c002e556:	76 24                	jbe    c002e57c <__moddi3+0x6c>
c002e558:	89 c8                	mov    eax,ecx
c002e55a:	89 f2                	mov    edx,esi
c002e55c:	f7 f3                	div    ebx
c002e55e:	89 d6                	mov    esi,edx
c002e560:	89 f0                	mov    eax,esi
c002e562:	31 d2                	xor    edx,edx
c002e564:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e568:	85 c9                	test   ecx,ecx
c002e56a:	74 07                	je     c002e573 <__moddi3+0x63>
c002e56c:	f7 d8                	neg    eax
c002e56e:	83 d2 00             	adc    edx,0x0
c002e571:	f7 da                	neg    edx
c002e573:	83 c4 2c             	add    esp,0x2c
c002e576:	5b                   	pop    ebx
c002e577:	5e                   	pop    esi
c002e578:	5f                   	pop    edi
c002e579:	5d                   	pop    ebp
c002e57a:	c3                   	ret    
c002e57b:	90                   	nop
c002e57c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e580:	85 db                	test   ebx,ebx
c002e582:	75 0d                	jne    c002e591 <__moddi3+0x81>
c002e584:	b8 01 00 00 00       	mov    eax,0x1
c002e589:	31 d2                	xor    edx,edx
c002e58b:	f7 f7                	div    edi
c002e58d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e591:	89 f0                	mov    eax,esi
c002e593:	31 d2                	xor    edx,edx
c002e595:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e599:	f7 f7                	div    edi
c002e59b:	89 e8                	mov    eax,ebp
c002e59d:	f7 f7                	div    edi
c002e59f:	89 d6                	mov    esi,edx
c002e5a1:	eb bd                	jmp    c002e560 <__moddi3+0x50>
c002e5a3:	90                   	nop
c002e5a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e5a8:	39 f7                	cmp    edi,esi
c002e5aa:	76 20                	jbe    c002e5cc <__moddi3+0xbc>
c002e5ac:	89 c8                	mov    eax,ecx
c002e5ae:	89 f2                	mov    edx,esi
c002e5b0:	eb b2                	jmp    c002e564 <__moddi3+0x54>
c002e5b2:	66 90                	xchg   ax,ax
c002e5b4:	f7 d9                	neg    ecx
c002e5b6:	83 d3 00             	adc    ebx,0x0
c002e5b9:	f7 db                	neg    ebx
c002e5bb:	89 de                	mov    esi,ebx
c002e5bd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e5c5:	e9 6f ff ff ff       	jmp    c002e539 <__moddi3+0x29>
c002e5ca:	66 90                	xchg   ax,ax
c002e5cc:	0f bd c7             	bsr    eax,edi
c002e5cf:	83 f0 1f             	xor    eax,0x1f
c002e5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e5d6:	75 24                	jne    c002e5fc <__moddi3+0xec>
c002e5d8:	39 f7                	cmp    edi,esi
c002e5da:	72 06                	jb     c002e5e2 <__moddi3+0xd2>
c002e5dc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e5e0:	77 0c                	ja     c002e5ee <__moddi3+0xde>
c002e5e2:	89 e9                	mov    ecx,ebp
c002e5e4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e5e8:	19 fe                	sbb    esi,edi
c002e5ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e5ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e5f2:	89 f2                	mov    edx,esi
c002e5f4:	e9 6b ff ff ff       	jmp    c002e564 <__moddi3+0x54>
c002e5f9:	8d 76 00             	lea    esi,[esi+0x0]
c002e5fc:	b8 20 00 00 00       	mov    eax,0x20
c002e601:	89 c2                	mov    edx,eax
c002e603:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e607:	29 da                	sub    edx,ebx
c002e609:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e60d:	88 d9                	mov    cl,bl
c002e60f:	d3 e7                	shl    edi,cl
c002e611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e615:	88 d1                	mov    cl,dl
c002e617:	d3 e8                	shr    eax,cl
c002e619:	09 c7                	or     edi,eax
c002e61b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e61f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e623:	89 d8                	mov    eax,ebx
c002e625:	88 d9                	mov    cl,bl
c002e627:	d3 e7                	shl    edi,cl
c002e629:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e62d:	89 f3                	mov    ebx,esi
c002e62f:	88 d1                	mov    cl,dl
c002e631:	d3 eb                	shr    ebx,cl
c002e633:	89 c7                	mov    edi,eax
c002e635:	88 c1                	mov    cl,al
c002e637:	d3 e6                	shl    esi,cl
c002e639:	89 e8                	mov    eax,ebp
c002e63b:	88 d1                	mov    cl,dl
c002e63d:	d3 e8                	shr    eax,cl
c002e63f:	09 f0                	or     eax,esi
c002e641:	89 f9                	mov    ecx,edi
c002e643:	d3 e5                	shl    ebp,cl
c002e645:	89 da                	mov    edx,ebx
c002e647:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e64b:	89 d3                	mov    ebx,edx
c002e64d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e651:	89 c6                	mov    esi,eax
c002e653:	89 d1                	mov    ecx,edx
c002e655:	39 d3                	cmp    ebx,edx
c002e657:	72 27                	jb     c002e680 <__moddi3+0x170>
c002e659:	74 21                	je     c002e67c <__moddi3+0x16c>
c002e65b:	29 f5                	sub    ebp,esi
c002e65d:	19 cb                	sbb    ebx,ecx
c002e65f:	89 de                	mov    esi,ebx
c002e661:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e665:	d3 e6                	shl    esi,cl
c002e667:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e66b:	89 f9                	mov    ecx,edi
c002e66d:	d3 ed                	shr    ebp,cl
c002e66f:	09 ee                	or     esi,ebp
c002e671:	89 f0                	mov    eax,esi
c002e673:	d3 eb                	shr    ebx,cl
c002e675:	89 da                	mov    edx,ebx
c002e677:	e9 e8 fe ff ff       	jmp    c002e564 <__moddi3+0x54>
c002e67c:	39 c5                	cmp    ebp,eax
c002e67e:	73 db                	jae    c002e65b <__moddi3+0x14b>
c002e680:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e684:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e688:	89 d1                	mov    ecx,edx
c002e68a:	89 c6                	mov    esi,eax
c002e68c:	eb cd                	jmp    c002e65b <__moddi3+0x14b>
c002e68e:	66 90                	xchg   ax,ax

c002e690 <__udivdi3>:
c002e690:	55                   	push   ebp
c002e691:	57                   	push   edi
c002e692:	56                   	push   esi
c002e693:	53                   	push   ebx
c002e694:	83 ec 1c             	sub    esp,0x1c
c002e697:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e69b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e69f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e6a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e6a7:	85 d2                	test   edx,edx
c002e6a9:	75 41                	jne    c002e6ec <__udivdi3+0x5c>
c002e6ab:	39 f7                	cmp    edi,esi
c002e6ad:	76 15                	jbe    c002e6c4 <__udivdi3+0x34>
c002e6af:	89 e8                	mov    eax,ebp
c002e6b1:	89 f2                	mov    edx,esi
c002e6b3:	f7 f7                	div    edi
c002e6b5:	31 db                	xor    ebx,ebx
c002e6b7:	89 da                	mov    edx,ebx
c002e6b9:	83 c4 1c             	add    esp,0x1c
c002e6bc:	5b                   	pop    ebx
c002e6bd:	5e                   	pop    esi
c002e6be:	5f                   	pop    edi
c002e6bf:	5d                   	pop    ebp
c002e6c0:	c3                   	ret    
c002e6c1:	8d 76 00             	lea    esi,[esi+0x0]
c002e6c4:	89 f9                	mov    ecx,edi
c002e6c6:	85 ff                	test   edi,edi
c002e6c8:	75 0b                	jne    c002e6d5 <__udivdi3+0x45>
c002e6ca:	b8 01 00 00 00       	mov    eax,0x1
c002e6cf:	31 d2                	xor    edx,edx
c002e6d1:	f7 f7                	div    edi
c002e6d3:	89 c1                	mov    ecx,eax
c002e6d5:	31 d2                	xor    edx,edx
c002e6d7:	89 f0                	mov    eax,esi
c002e6d9:	f7 f1                	div    ecx
c002e6db:	89 c3                	mov    ebx,eax
c002e6dd:	89 e8                	mov    eax,ebp
c002e6df:	f7 f1                	div    ecx
c002e6e1:	89 da                	mov    edx,ebx
c002e6e3:	83 c4 1c             	add    esp,0x1c
c002e6e6:	5b                   	pop    ebx
c002e6e7:	5e                   	pop    esi
c002e6e8:	5f                   	pop    edi
c002e6e9:	5d                   	pop    ebp
c002e6ea:	c3                   	ret    
c002e6eb:	90                   	nop
c002e6ec:	39 f2                	cmp    edx,esi
c002e6ee:	77 1c                	ja     c002e70c <__udivdi3+0x7c>
c002e6f0:	0f bd da             	bsr    ebx,edx
c002e6f3:	83 f3 1f             	xor    ebx,0x1f
c002e6f6:	75 24                	jne    c002e71c <__udivdi3+0x8c>
c002e6f8:	39 f2                	cmp    edx,esi
c002e6fa:	72 08                	jb     c002e704 <__udivdi3+0x74>
c002e6fc:	39 ef                	cmp    edi,ebp
c002e6fe:	0f 87 84 00 00 00    	ja     c002e788 <__udivdi3+0xf8>
c002e704:	b8 01 00 00 00       	mov    eax,0x1
c002e709:	eb ac                	jmp    c002e6b7 <__udivdi3+0x27>
c002e70b:	90                   	nop
c002e70c:	31 db                	xor    ebx,ebx
c002e70e:	31 c0                	xor    eax,eax
c002e710:	89 da                	mov    edx,ebx
c002e712:	83 c4 1c             	add    esp,0x1c
c002e715:	5b                   	pop    ebx
c002e716:	5e                   	pop    esi
c002e717:	5f                   	pop    edi
c002e718:	5d                   	pop    ebp
c002e719:	c3                   	ret    
c002e71a:	66 90                	xchg   ax,ax
c002e71c:	b8 20 00 00 00       	mov    eax,0x20
c002e721:	29 d8                	sub    eax,ebx
c002e723:	88 d9                	mov    cl,bl
c002e725:	d3 e2                	shl    edx,cl
c002e727:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e72b:	89 fa                	mov    edx,edi
c002e72d:	88 c1                	mov    cl,al
c002e72f:	d3 ea                	shr    edx,cl
c002e731:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e735:	09 d1                	or     ecx,edx
c002e737:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e73b:	88 d9                	mov    cl,bl
c002e73d:	d3 e7                	shl    edi,cl
c002e73f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e743:	89 f7                	mov    edi,esi
c002e745:	88 c1                	mov    cl,al
c002e747:	d3 ef                	shr    edi,cl
c002e749:	88 d9                	mov    cl,bl
c002e74b:	d3 e6                	shl    esi,cl
c002e74d:	89 ea                	mov    edx,ebp
c002e74f:	88 c1                	mov    cl,al
c002e751:	d3 ea                	shr    edx,cl
c002e753:	09 d6                	or     esi,edx
c002e755:	89 f0                	mov    eax,esi
c002e757:	89 fa                	mov    edx,edi
c002e759:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e75d:	89 d7                	mov    edi,edx
c002e75f:	89 c6                	mov    esi,eax
c002e761:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e765:	39 d7                	cmp    edi,edx
c002e767:	72 13                	jb     c002e77c <__udivdi3+0xec>
c002e769:	74 09                	je     c002e774 <__udivdi3+0xe4>
c002e76b:	89 f0                	mov    eax,esi
c002e76d:	31 db                	xor    ebx,ebx
c002e76f:	e9 43 ff ff ff       	jmp    c002e6b7 <__udivdi3+0x27>
c002e774:	88 d9                	mov    cl,bl
c002e776:	d3 e5                	shl    ebp,cl
c002e778:	39 c5                	cmp    ebp,eax
c002e77a:	73 ef                	jae    c002e76b <__udivdi3+0xdb>
c002e77c:	8d 46 ff             	lea    eax,[esi-0x1]
c002e77f:	31 db                	xor    ebx,ebx
c002e781:	e9 31 ff ff ff       	jmp    c002e6b7 <__udivdi3+0x27>
c002e786:	66 90                	xchg   ax,ax
c002e788:	31 c0                	xor    eax,eax
c002e78a:	e9 28 ff ff ff       	jmp    c002e6b7 <__udivdi3+0x27>
c002e78f:	90                   	nop

c002e790 <__umoddi3>:
c002e790:	55                   	push   ebp
c002e791:	57                   	push   edi
c002e792:	56                   	push   esi
c002e793:	53                   	push   ebx
c002e794:	83 ec 1c             	sub    esp,0x1c
c002e797:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e79b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e79f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e7a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e7a7:	89 da                	mov    edx,ebx
c002e7a9:	85 c0                	test   eax,eax
c002e7ab:	75 37                	jne    c002e7e4 <__umoddi3+0x54>
c002e7ad:	39 df                	cmp    edi,ebx
c002e7af:	76 13                	jbe    c002e7c4 <__umoddi3+0x34>
c002e7b1:	89 f0                	mov    eax,esi
c002e7b3:	f7 f7                	div    edi
c002e7b5:	89 d0                	mov    eax,edx
c002e7b7:	31 d2                	xor    edx,edx
c002e7b9:	83 c4 1c             	add    esp,0x1c
c002e7bc:	5b                   	pop    ebx
c002e7bd:	5e                   	pop    esi
c002e7be:	5f                   	pop    edi
c002e7bf:	5d                   	pop    ebp
c002e7c0:	c3                   	ret    
c002e7c1:	8d 76 00             	lea    esi,[esi+0x0]
c002e7c4:	89 fd                	mov    ebp,edi
c002e7c6:	85 ff                	test   edi,edi
c002e7c8:	75 0b                	jne    c002e7d5 <__umoddi3+0x45>
c002e7ca:	b8 01 00 00 00       	mov    eax,0x1
c002e7cf:	31 d2                	xor    edx,edx
c002e7d1:	f7 f7                	div    edi
c002e7d3:	89 c5                	mov    ebp,eax
c002e7d5:	89 d8                	mov    eax,ebx
c002e7d7:	31 d2                	xor    edx,edx
c002e7d9:	f7 f5                	div    ebp
c002e7db:	89 f0                	mov    eax,esi
c002e7dd:	f7 f5                	div    ebp
c002e7df:	89 d0                	mov    eax,edx
c002e7e1:	eb d4                	jmp    c002e7b7 <__umoddi3+0x27>
c002e7e3:	90                   	nop
c002e7e4:	89 f1                	mov    ecx,esi
c002e7e6:	39 d8                	cmp    eax,ebx
c002e7e8:	76 0a                	jbe    c002e7f4 <__umoddi3+0x64>
c002e7ea:	89 f0                	mov    eax,esi
c002e7ec:	83 c4 1c             	add    esp,0x1c
c002e7ef:	5b                   	pop    ebx
c002e7f0:	5e                   	pop    esi
c002e7f1:	5f                   	pop    edi
c002e7f2:	5d                   	pop    ebp
c002e7f3:	c3                   	ret    
c002e7f4:	0f bd e8             	bsr    ebp,eax
c002e7f7:	83 f5 1f             	xor    ebp,0x1f
c002e7fa:	75 1c                	jne    c002e818 <__umoddi3+0x88>
c002e7fc:	39 d8                	cmp    eax,ebx
c002e7fe:	72 04                	jb     c002e804 <__umoddi3+0x74>
c002e800:	39 f7                	cmp    edi,esi
c002e802:	77 08                	ja     c002e80c <__umoddi3+0x7c>
c002e804:	89 da                	mov    edx,ebx
c002e806:	29 fe                	sub    esi,edi
c002e808:	19 c2                	sbb    edx,eax
c002e80a:	89 f1                	mov    ecx,esi
c002e80c:	89 c8                	mov    eax,ecx
c002e80e:	83 c4 1c             	add    esp,0x1c
c002e811:	5b                   	pop    ebx
c002e812:	5e                   	pop    esi
c002e813:	5f                   	pop    edi
c002e814:	5d                   	pop    ebp
c002e815:	c3                   	ret    
c002e816:	66 90                	xchg   ax,ax
c002e818:	ba 20 00 00 00       	mov    edx,0x20
c002e81d:	29 ea                	sub    edx,ebp
c002e81f:	89 e9                	mov    ecx,ebp
c002e821:	d3 e0                	shl    eax,cl
c002e823:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e827:	89 f8                	mov    eax,edi
c002e829:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e82d:	88 d1                	mov    cl,dl
c002e82f:	d3 e8                	shr    eax,cl
c002e831:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e835:	09 c1                	or     ecx,eax
c002e837:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e83b:	89 e9                	mov    ecx,ebp
c002e83d:	d3 e7                	shl    edi,cl
c002e83f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e843:	89 d8                	mov    eax,ebx
c002e845:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e849:	88 d1                	mov    cl,dl
c002e84b:	d3 e8                	shr    eax,cl
c002e84d:	89 c7                	mov    edi,eax
c002e84f:	89 e9                	mov    ecx,ebp
c002e851:	d3 e3                	shl    ebx,cl
c002e853:	89 f0                	mov    eax,esi
c002e855:	88 d1                	mov    cl,dl
c002e857:	d3 e8                	shr    eax,cl
c002e859:	09 d8                	or     eax,ebx
c002e85b:	89 e9                	mov    ecx,ebp
c002e85d:	d3 e6                	shl    esi,cl
c002e85f:	89 f3                	mov    ebx,esi
c002e861:	89 fa                	mov    edx,edi
c002e863:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e867:	89 d1                	mov    ecx,edx
c002e869:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e86d:	89 c6                	mov    esi,eax
c002e86f:	89 d7                	mov    edi,edx
c002e871:	39 d1                	cmp    ecx,edx
c002e873:	72 27                	jb     c002e89c <__umoddi3+0x10c>
c002e875:	74 21                	je     c002e898 <__umoddi3+0x108>
c002e877:	89 ca                	mov    edx,ecx
c002e879:	29 f3                	sub    ebx,esi
c002e87b:	19 fa                	sbb    edx,edi
c002e87d:	89 d0                	mov    eax,edx
c002e87f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e883:	d3 e0                	shl    eax,cl
c002e885:	89 e9                	mov    ecx,ebp
c002e887:	d3 eb                	shr    ebx,cl
c002e889:	09 d8                	or     eax,ebx
c002e88b:	d3 ea                	shr    edx,cl
c002e88d:	83 c4 1c             	add    esp,0x1c
c002e890:	5b                   	pop    ebx
c002e891:	5e                   	pop    esi
c002e892:	5f                   	pop    edi
c002e893:	5d                   	pop    ebp
c002e894:	c3                   	ret    
c002e895:	8d 76 00             	lea    esi,[esi+0x0]
c002e898:	39 c3                	cmp    ebx,eax
c002e89a:	73 db                	jae    c002e877 <__umoddi3+0xe7>
c002e89c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e8a0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e8a4:	89 d7                	mov    edi,edx
c002e8a6:	89 c6                	mov    esi,eax
c002e8a8:	eb cd                	jmp    c002e877 <__umoddi3+0xe7>

Disassembly of section .init:

c002e8aa <_init>:
c002e8aa:	55                   	push   ebp
c002e8ab:	89 e5                	mov    ebp,esp
c002e8ad:	e8 42 18 fd ff       	call   c00000f4 <frame_dummy>
c002e8b2:	e8 e5 fa ff ff       	call   c002e39c <__do_global_ctors_aux>
c002e8b7:	5d                   	pop    ebp
c002e8b8:	c3                   	ret    

Disassembly of section .fini:

c002e8b9 <_fini>:
c002e8b9:	55                   	push   ebp
c002e8ba:	89 e5                	mov    ebp,esp
c002e8bc:	e8 c3 17 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e8c1:	5d                   	pop    ebp
c002e8c2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e8c4 <Computer::~Computer()>:
c002e8c4:	83 ec 0c             	sub    esp,0xc
c002e8c7:	ba 24 11 03 c0       	mov    edx,0xc0031124
c002e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8d0:	89 10                	mov    DWORD PTR [eax],edx
c002e8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8d6:	83 ec 0c             	sub    esp,0xc
c002e8d9:	50                   	push   eax
c002e8da:	e8 01 c9 fe ff       	call   c001b1e0 <Device::~Device()>
c002e8df:	83 c4 10             	add    esp,0x10
c002e8e2:	90                   	nop
c002e8e3:	83 c4 0c             	add    esp,0xc
c002e8e6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e8e8 <Computer::~Computer()>:
c002e8e8:	83 ec 0c             	sub    esp,0xc
c002e8eb:	83 ec 0c             	sub    esp,0xc
c002e8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e8f2:	e8 cd ff ff ff       	call   c002e8c4 <Computer::~Computer()>
c002e8f7:	83 c4 10             	add    esp,0x10
c002e8fa:	83 ec 08             	sub    esp,0x8
c002e8fd:	68 70 01 00 00       	push   0x170
c002e902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e906:	e8 25 a8 fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002e90b:	83 c4 10             	add    esp,0x10
c002e90e:	83 c4 0c             	add    esp,0xc
c002e911:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e912 <idleCommon()>:
c002e912:	83 ec 0c             	sub    esp,0xc
c002e915:	fa                   	cli    
c002e916:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e91c:	e8 6b 69 ff ff       	call   c002528c <schedule()>
c002e921:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e926:	48                   	dec    eax
c002e927:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e92c:	75 01                	jne    c002e92f <idleCommon()+0x1d>
c002e92e:	fb                   	sti    
c002e92f:	83 c4 0c             	add    esp,0xc
c002e932:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e934 <LinkedList<UnixFile>::~LinkedList()>:
c002e934:	90                   	nop
c002e935:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e936 <LinkedList<UnixFile>::LinkedList()>:
c002e936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e93a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e944:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e94f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e95a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e964:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e96b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e96f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e976:	90                   	nop
c002e977:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e978 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e978:	83 ec 0c             	sub    esp,0xc
c002e97b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e980:	75 10                	jne    c002e992 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e982:	83 ec 0c             	sub    esp,0xc
c002e985:	68 44 13 03 c0       	push   0xc0031344
c002e98a:	e8 e7 18 ff ff       	call   c0020276 <KePanic(char const*)>
c002e98f:	83 c4 10             	add    esp,0x10
c002e992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e996:	8b 00                	mov    eax,DWORD PTR [eax]
c002e998:	85 c0                	test   eax,eax
c002e99a:	74 34                	je     c002e9d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9a3:	85 c0                	test   eax,eax
c002e9a5:	74 29                	je     c002e9d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e9ce:	eb 65                	jmp    c002ea35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9d6:	85 c0                	test   eax,eax
c002e9d8:	75 4b                	jne    c002ea25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9e1:	85 c0                	test   eax,eax
c002e9e3:	75 40                	jne    c002ea25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9ed:	89 10                	mov    DWORD PTR [eax],edx
c002e9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e9f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ea08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea0f:	85 c0                	test   eax,eax
c002ea11:	74 22                	je     c002ea35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ea13:	83 ec 0c             	sub    esp,0xc
c002ea16:	68 66 13 03 c0       	push   0xc0031366
c002ea1b:	e8 56 18 ff ff       	call   c0020276 <KePanic(char const*)>
c002ea20:	83 c4 10             	add    esp,0x10
c002ea23:	eb 10                	jmp    c002ea35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ea25:	83 ec 0c             	sub    esp,0xc
c002ea28:	68 70 13 03 c0       	push   0xc0031370
c002ea2d:	e8 44 18 ff ff       	call   c0020276 <KePanic(char const*)>
c002ea32:	83 c4 10             	add    esp,0x10
c002ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea39:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea3c:	8d 50 01             	lea    edx,[eax+0x1]
c002ea3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea43:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ea46:	90                   	nop
c002ea47:	83 c4 0c             	add    esp,0xc
c002ea4a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002ea4c <LinkedList<UnixFile>::getFirstElement()>:
c002ea4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea50:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002ea54 <LinkedList<UnixFile>::removeFirst()>:
c002ea54:	83 ec 0c             	sub    esp,0xc
c002ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea5b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea5d:	85 c0                	test   eax,eax
c002ea5f:	75 12                	jne    c002ea73 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002ea61:	83 ec 0c             	sub    esp,0xc
c002ea64:	68 7c 13 03 c0       	push   0xc003137c
c002ea69:	e8 08 18 ff ff       	call   c0020276 <KePanic(char const*)>
c002ea6e:	83 c4 10             	add    esp,0x10
c002ea71:	eb 7e                	jmp    c002eaf1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002ea73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea7d:	85 c0                	test   eax,eax
c002ea7f:	74 10                	je     c002ea91 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002ea81:	83 ec 0c             	sub    esp,0xc
c002ea84:	68 c7 13 03 c0       	push   0xc00313c7
c002ea89:	e8 e8 17 ff ff       	call   c0020276 <KePanic(char const*)>
c002ea8e:	83 c4 10             	add    esp,0x10
c002ea91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea95:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea9a:	85 c0                	test   eax,eax
c002ea9c:	75 33                	jne    c002ead1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002ea9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaa2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eaa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eab7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eaba:	83 f8 01             	cmp    eax,0x1
c002eabd:	74 21                	je     c002eae0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002eabf:	83 ec 0c             	sub    esp,0xc
c002eac2:	68 a0 13 03 c0       	push   0xc00313a0
c002eac7:	e8 aa 17 ff ff       	call   c0020276 <KePanic(char const*)>
c002eacc:	83 c4 10             	add    esp,0x10
c002eacf:	eb 0f                	jmp    c002eae0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ead1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ead5:	8b 00                	mov    eax,DWORD PTR [eax]
c002ead7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002eada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eade:	89 10                	mov    DWORD PTR [eax],edx
c002eae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eae4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eae7:	8d 50 ff             	lea    edx,[eax-0x1]
c002eaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eaf1:	83 c4 0c             	add    esp,0xc
c002eaf4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002eaf6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002eaf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002eafa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eafd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002eafe <DriverlessDevice::~DriverlessDevice()>:
c002eafe:	ba e8 1f 03 c0       	mov    edx,0xc0031fe8
c002eb03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb07:	89 10                	mov    DWORD PTR [eax],edx
c002eb09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb0d:	50                   	push   eax
c002eb0e:	e8 cd c6 fe ff       	call   c001b1e0 <Device::~Device()>
c002eb13:	83 c4 04             	add    esp,0x4
c002eb16:	90                   	nop
c002eb17:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002eb18 <DriverlessDevice::~DriverlessDevice()>:
c002eb18:	83 ec 0c             	sub    esp,0xc
c002eb1b:	83 ec 0c             	sub    esp,0xc
c002eb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb22:	e8 d7 ff ff ff       	call   c002eafe <DriverlessDevice::~DriverlessDevice()>
c002eb27:	83 c4 10             	add    esp,0x10
c002eb2a:	83 ec 08             	sub    esp,0x8
c002eb2d:	68 58 01 00 00       	push   0x158
c002eb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eb36:	e8 f5 a5 fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002eb3b:	83 c4 10             	add    esp,0x10
c002eb3e:	83 c4 0c             	add    esp,0xc
c002eb41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002eb42 <LinkedList<Device>::addElement(Device*)>:
c002eb42:	83 ec 0c             	sub    esp,0xc
c002eb45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002eb4a:	75 10                	jne    c002eb5c <LinkedList<Device>::addElement(Device*)+0x1a>
c002eb4c:	83 ec 0c             	sub    esp,0xc
c002eb4f:	68 44 13 03 c0       	push   0xc0031344
c002eb54:	e8 1d 17 ff ff       	call   c0020276 <KePanic(char const*)>
c002eb59:	83 c4 10             	add    esp,0x10
c002eb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb60:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb62:	85 c0                	test   eax,eax
c002eb64:	74 3a                	je     c002eba0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002eb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb6d:	85 c0                	test   eax,eax
c002eb6f:	74 2f                	je     c002eba0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002eb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb7c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002eb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb8a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb94:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eb9e:	eb 68                	jmp    c002ec08 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eba4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eba6:	85 c0                	test   eax,eax
c002eba8:	75 4e                	jne    c002ebf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ebaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebb1:	85 c0                	test   eax,eax
c002ebb3:	75 43                	jne    c002ebf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ebb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ebbd:	89 10                	mov    DWORD PTR [eax],edx
c002ebbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ebc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ebca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebd1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ebdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ebe2:	85 c0                	test   eax,eax
c002ebe4:	74 22                	je     c002ec08 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ebe6:	83 ec 0c             	sub    esp,0xc
c002ebe9:	68 66 13 03 c0       	push   0xc0031366
c002ebee:	e8 83 16 ff ff       	call   c0020276 <KePanic(char const*)>
c002ebf3:	83 c4 10             	add    esp,0x10
c002ebf6:	eb 10                	jmp    c002ec08 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ebf8:	83 ec 0c             	sub    esp,0xc
c002ebfb:	68 70 13 03 c0       	push   0xc0031370
c002ec00:	e8 71 16 ff ff       	call   c0020276 <KePanic(char const*)>
c002ec05:	83 c4 10             	add    esp,0x10
c002ec08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec0f:	8d 50 01             	lea    edx,[eax+0x1]
c002ec12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ec19:	90                   	nop
c002ec1a:	83 c4 0c             	add    esp,0xc
c002ec1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002ec1e <LinkedList<Device>::LinkedList()>:
c002ec1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ec5e:	90                   	nop
c002ec5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ec60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ec60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec64:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec66:	85 c0                	test   eax,eax
c002ec68:	75 0e                	jne    c002ec78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ec6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec71:	85 c0                	test   eax,eax
c002ec73:	75 03                	jne    c002ec78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ec75:	b0 01                	mov    al,0x1
c002ec77:	c3                   	ret    
c002ec78:	b0 00                	mov    al,0x0
c002ec7a:	90                   	nop
c002ec7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ec7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec80:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002ec84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002ec84:	83 ec 0c             	sub    esp,0xc
c002ec87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec8b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec8d:	85 c0                	test   eax,eax
c002ec8f:	75 17                	jne    c002eca8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ec91:	83 ec 0c             	sub    esp,0xc
c002ec94:	68 7c 13 03 c0       	push   0xc003137c
c002ec99:	e8 d8 15 ff ff       	call   c0020276 <KePanic(char const*)>
c002ec9e:	83 c4 10             	add    esp,0x10
c002eca1:	e9 96 00 00 00       	jmp    c002ed3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002eca6:	66 90                	xchg   ax,ax
c002eca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ecaf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ecb2:	85 c0                	test   eax,eax
c002ecb4:	0f 95 c0             	setne  al
c002ecb7:	0f b6 c0             	movzx  eax,al
c002ecba:	85 c0                	test   eax,eax
c002ecbc:	74 12                	je     c002ecd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ecbe:	83 ec 0c             	sub    esp,0xc
c002ecc1:	68 c7 13 03 c0       	push   0xc00313c7
c002ecc6:	e8 ab 15 ff ff       	call   c0020276 <KePanic(char const*)>
c002eccb:	83 c4 10             	add    esp,0x10
c002ecce:	66 90                	xchg   ax,ax
c002ecd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecd4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ecd9:	85 c0                	test   eax,eax
c002ecdb:	0f 94 c0             	sete   al
c002ecde:	0f b6 c0             	movzx  eax,al
c002ece1:	85 c0                	test   eax,eax
c002ece3:	74 33                	je     c002ed18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ece5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ece9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ecef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecf3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecfe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed01:	83 f8 01             	cmp    eax,0x1
c002ed04:	74 22                	je     c002ed28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ed06:	83 ec 0c             	sub    esp,0xc
c002ed09:	68 a0 13 03 c0       	push   0xc00313a0
c002ed0e:	e8 63 15 ff ff       	call   c0020276 <KePanic(char const*)>
c002ed13:	83 c4 10             	add    esp,0x10
c002ed16:	eb 10                	jmp    c002ed28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ed18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed1c:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed1e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ed21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed25:	89 10                	mov    DWORD PTR [eax],edx
c002ed27:	90                   	nop
c002ed28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed2f:	8d 50 ff             	lea    edx,[eax-0x1]
c002ed32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ed39:	8d 76 00             	lea    esi,[esi+0x0]
c002ed3c:	83 c4 0c             	add    esp,0xc
c002ed3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002ed40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002ed40:	83 ec 0c             	sub    esp,0xc
c002ed43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ed48:	75 12                	jne    c002ed5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002ed4a:	83 ec 0c             	sub    esp,0xc
c002ed4d:	68 44 13 03 c0       	push   0xc0031344
c002ed52:	e8 1f 15 ff ff       	call   c0020276 <KePanic(char const*)>
c002ed57:	83 c4 10             	add    esp,0x10
c002ed5a:	66 90                	xchg   ax,ax
c002ed5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed60:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed62:	85 c0                	test   eax,eax
c002ed64:	74 36                	je     c002ed9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ed66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed6d:	85 c0                	test   eax,eax
c002ed6f:	74 2b                	je     c002ed9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ed71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed7c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ed7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ed8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed91:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ed98:	eb 6a                	jmp    c002ee04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ed9a:	66 90                	xchg   ax,ax
c002ed9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eda0:	8b 00                	mov    eax,DWORD PTR [eax]
c002eda2:	85 c0                	test   eax,eax
c002eda4:	75 4e                	jne    c002edf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002eda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002edad:	85 c0                	test   eax,eax
c002edaf:	75 43                	jne    c002edf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002edb9:	89 10                	mov    DWORD PTR [eax],edx
c002edbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002edc3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002edc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002edcd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002edd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eddb:	85 c0                	test   eax,eax
c002eddd:	74 25                	je     c002ee04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002eddf:	83 ec 0c             	sub    esp,0xc
c002ede2:	68 66 13 03 c0       	push   0xc0031366
c002ede7:	e8 8a 14 ff ff       	call   c0020276 <KePanic(char const*)>
c002edec:	83 c4 10             	add    esp,0x10
c002edef:	eb 13                	jmp    c002ee04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002edf1:	8d 76 00             	lea    esi,[esi+0x0]
c002edf4:	83 ec 0c             	sub    esp,0xc
c002edf7:	68 70 13 03 c0       	push   0xc0031370
c002edfc:	e8 75 14 ff ff       	call   c0020276 <KePanic(char const*)>
c002ee01:	83 c4 10             	add    esp,0x10
c002ee04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee0b:	8d 50 01             	lea    edx,[eax+0x1]
c002ee0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ee15:	90                   	nop
c002ee16:	83 c4 0c             	add    esp,0xc
c002ee19:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002ee1c <ACPI::~ACPI()>:
c002ee1c:	83 ec 0c             	sub    esp,0xc
c002ee1f:	ba a0 26 03 c0       	mov    edx,0xc00326a0
c002ee24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee28:	89 10                	mov    DWORD PTR [eax],edx
c002ee2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee2e:	83 ec 0c             	sub    esp,0xc
c002ee31:	50                   	push   eax
c002ee32:	e8 a9 c3 fe ff       	call   c001b1e0 <Device::~Device()>
c002ee37:	83 c4 10             	add    esp,0x10
c002ee3a:	90                   	nop
c002ee3b:	83 c4 0c             	add    esp,0xc
c002ee3e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002ee40 <ACPI::~ACPI()>:
c002ee40:	83 ec 0c             	sub    esp,0xc
c002ee43:	83 ec 0c             	sub    esp,0xc
c002ee46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee4a:	e8 cd ff ff ff       	call   c002ee1c <ACPI::~ACPI()>
c002ee4f:	83 c4 10             	add    esp,0x10
c002ee52:	83 ec 08             	sub    esp,0x8
c002ee55:	68 64 12 00 00       	push   0x1264
c002ee5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee5e:	e8 cd a2 fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002ee63:	83 c4 10             	add    esp,0x10
c002ee66:	83 c4 0c             	add    esp,0xc
c002ee69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002ee6c <LinkedList<Device>::~LinkedList()>:
c002ee6c:	90                   	nop
c002ee6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002ee70 <LinkedList<Device>::isEmpty()>:
c002ee70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee74:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee76:	85 c0                	test   eax,eax
c002ee78:	75 0e                	jne    c002ee88 <LinkedList<Device>::isEmpty()+0x18>
c002ee7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee81:	85 c0                	test   eax,eax
c002ee83:	75 03                	jne    c002ee88 <LinkedList<Device>::isEmpty()+0x18>
c002ee85:	b0 01                	mov    al,0x1
c002ee87:	c3                   	ret    
c002ee88:	b0 00                	mov    al,0x0
c002ee8a:	90                   	nop
c002ee8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002ee8c <LinkedList<Device>::getFirstElement()>:
c002ee8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee90:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002ee94 <LinkedList<Device>::removeFirst()>:
c002ee94:	83 ec 0c             	sub    esp,0xc
c002ee97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee9b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee9d:	85 c0                	test   eax,eax
c002ee9f:	75 17                	jne    c002eeb8 <LinkedList<Device>::removeFirst()+0x24>
c002eea1:	83 ec 0c             	sub    esp,0xc
c002eea4:	68 7c 13 03 c0       	push   0xc003137c
c002eea9:	e8 c8 13 ff ff       	call   c0020276 <KePanic(char const*)>
c002eeae:	83 c4 10             	add    esp,0x10
c002eeb1:	e9 92 00 00 00       	jmp    c002ef48 <LinkedList<Device>::removeFirst()+0xb4>
c002eeb6:	66 90                	xchg   ax,ax
c002eeb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eebc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eebf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002eec5:	85 c0                	test   eax,eax
c002eec7:	74 13                	je     c002eedc <LinkedList<Device>::removeFirst()+0x48>
c002eec9:	83 ec 0c             	sub    esp,0xc
c002eecc:	68 c7 13 03 c0       	push   0xc00313c7
c002eed1:	e8 a0 13 ff ff       	call   c0020276 <KePanic(char const*)>
c002eed6:	83 c4 10             	add    esp,0x10
c002eed9:	8d 76 00             	lea    esi,[esi+0x0]
c002eedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eee0:	8b 00                	mov    eax,DWORD PTR [eax]
c002eee2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002eee8:	85 c0                	test   eax,eax
c002eeea:	75 34                	jne    c002ef20 <LinkedList<Device>::removeFirst()+0x8c>
c002eeec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eef0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eefa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef08:	83 f8 01             	cmp    eax,0x1
c002ef0b:	74 27                	je     c002ef34 <LinkedList<Device>::removeFirst()+0xa0>
c002ef0d:	83 ec 0c             	sub    esp,0xc
c002ef10:	68 a0 13 03 c0       	push   0xc00313a0
c002ef15:	e8 5c 13 ff ff       	call   c0020276 <KePanic(char const*)>
c002ef1a:	83 c4 10             	add    esp,0x10
c002ef1d:	eb 15                	jmp    c002ef34 <LinkedList<Device>::removeFirst()+0xa0>
c002ef1f:	90                   	nop
c002ef20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef24:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef26:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002ef2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef30:	89 10                	mov    DWORD PTR [eax],edx
c002ef32:	66 90                	xchg   ax,ax
c002ef34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef3b:	8d 50 ff             	lea    edx,[eax-0x1]
c002ef3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ef45:	8d 76 00             	lea    esi,[esi+0x0]
c002ef48:	83 c4 0c             	add    esp,0xc
c002ef4b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002ef4c <CPU::~CPU()>:
c002ef4c:	83 ec 0c             	sub    esp,0xc
c002ef4f:	ba 48 28 03 c0       	mov    edx,0xc0032848
c002ef54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef58:	89 10                	mov    DWORD PTR [eax],edx
c002ef5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef5e:	83 ec 0c             	sub    esp,0xc
c002ef61:	50                   	push   eax
c002ef62:	e8 79 c2 fe ff       	call   c001b1e0 <Device::~Device()>
c002ef67:	83 c4 10             	add    esp,0x10
c002ef6a:	90                   	nop
c002ef6b:	83 c4 0c             	add    esp,0xc
c002ef6e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002ef70 <CPU::~CPU()>:
c002ef70:	83 ec 0c             	sub    esp,0xc
c002ef73:	83 ec 0c             	sub    esp,0xc
c002ef76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef7a:	e8 cd ff ff ff       	call   c002ef4c <CPU::~CPU()>
c002ef7f:	83 c4 10             	add    esp,0x10
c002ef82:	83 ec 08             	sub    esp,0x8
c002ef85:	68 94 11 00 00       	push   0x1194
c002ef8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef8e:	e8 9d a1 fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002ef93:	83 c4 10             	add    esp,0x10
c002ef96:	83 c4 0c             	add    esp,0xc
c002ef99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002ef9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002ef9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002efa0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002efa3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002efa4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002efa4:	90                   	nop
c002efa5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002efa8 <ThreadControlBlock::ThreadControlBlock()>:
c002efa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efac:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002efb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efb7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002efbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efc2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002efc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efcd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002efd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efd8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002efdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efe3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002efe7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efeb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002efef:	90                   	nop
c002eff0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002eff4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002eff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eff8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002effe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f002:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f00d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f018:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f022:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f02d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f034:	90                   	nop
c002f035:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f036 <PCI::~PCI()>:
c002f036:	83 ec 0c             	sub    esp,0xc
c002f039:	ba 68 37 03 c0       	mov    edx,0xc0033768
c002f03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f042:	89 10                	mov    DWORD PTR [eax],edx
c002f044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f048:	83 ec 0c             	sub    esp,0xc
c002f04b:	50                   	push   eax
c002f04c:	e8 27 bc fe ff       	call   c001ac78 <Bus::~Bus()>
c002f051:	83 c4 10             	add    esp,0x10
c002f054:	90                   	nop
c002f055:	83 c4 0c             	add    esp,0xc
c002f058:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f05a <PCI::~PCI()>:
c002f05a:	83 ec 0c             	sub    esp,0xc
c002f05d:	83 ec 0c             	sub    esp,0xc
c002f060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f064:	e8 cd ff ff ff       	call   c002f036 <PCI::~PCI()>
c002f069:	83 c4 10             	add    esp,0x10
c002f06c:	83 ec 08             	sub    esp,0x8
c002f06f:	68 5c 01 00 00       	push   0x15c
c002f074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f078:	e8 b3 a0 fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f07d:	83 c4 10             	add    esp,0x10
c002f080:	83 c4 0c             	add    esp,0xc
c002f083:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f084 <IDE::~IDE()>:
c002f084:	83 ec 0c             	sub    esp,0xc
c002f087:	ba 1c 38 03 c0       	mov    edx,0xc003381c
c002f08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f090:	89 10                	mov    DWORD PTR [eax],edx
c002f092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f096:	83 ec 0c             	sub    esp,0xc
c002f099:	50                   	push   eax
c002f09a:	e8 d1 c5 fe ff       	call   c001b670 <HardDiskController::~HardDiskController()>
c002f09f:	83 c4 10             	add    esp,0x10
c002f0a2:	90                   	nop
c002f0a3:	83 c4 0c             	add    esp,0xc
c002f0a6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f0a8 <IDE::~IDE()>:
c002f0a8:	83 ec 0c             	sub    esp,0xc
c002f0ab:	83 ec 0c             	sub    esp,0xc
c002f0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0b2:	e8 cd ff ff ff       	call   c002f084 <IDE::~IDE()>
c002f0b7:	83 c4 10             	add    esp,0x10
c002f0ba:	83 ec 08             	sub    esp,0x8
c002f0bd:	68 70 02 00 00       	push   0x270
c002f0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0c6:	e8 65 a0 fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f0cb:	83 c4 10             	add    esp,0x10
c002f0ce:	83 c4 0c             	add    esp,0xc
c002f0d1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f0d2 <SATABus::~SATABus()>:
c002f0d2:	83 ec 0c             	sub    esp,0xc
c002f0d5:	ba 6c 38 03 c0       	mov    edx,0xc003386c
c002f0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0de:	89 10                	mov    DWORD PTR [eax],edx
c002f0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0e4:	83 ec 0c             	sub    esp,0xc
c002f0e7:	50                   	push   eax
c002f0e8:	e8 83 c5 fe ff       	call   c001b670 <HardDiskController::~HardDiskController()>
c002f0ed:	83 c4 10             	add    esp,0x10
c002f0f0:	90                   	nop
c002f0f1:	83 c4 0c             	add    esp,0xc
c002f0f4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f0f6 <SATABus::~SATABus()>:
c002f0f6:	83 ec 0c             	sub    esp,0xc
c002f0f9:	83 ec 0c             	sub    esp,0xc
c002f0fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f100:	e8 cd ff ff ff       	call   c002f0d2 <SATABus::~SATABus()>
c002f105:	83 c4 10             	add    esp,0x10
c002f108:	83 ec 08             	sub    esp,0x8
c002f10b:	68 64 01 00 00       	push   0x164
c002f110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f114:	e8 17 a0 fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f119:	83 c4 10             	add    esp,0x10
c002f11c:	83 c4 0c             	add    esp,0xc
c002f11f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f120 <ATA::~ATA()>:
c002f120:	83 ec 0c             	sub    esp,0xc
c002f123:	ba ac 38 03 c0       	mov    edx,0xc00338ac
c002f128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f12c:	89 10                	mov    DWORD PTR [eax],edx
c002f12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f132:	83 ec 0c             	sub    esp,0xc
c002f135:	50                   	push   eax
c002f136:	e8 17 c6 fe ff       	call   c001b752 <PhysicalDisk::~PhysicalDisk()>
c002f13b:	83 c4 10             	add    esp,0x10
c002f13e:	90                   	nop
c002f13f:	83 c4 0c             	add    esp,0xc
c002f142:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f144 <ATA::~ATA()>:
c002f144:	83 ec 0c             	sub    esp,0xc
c002f147:	83 ec 0c             	sub    esp,0xc
c002f14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f14e:	e8 cd ff ff ff       	call   c002f120 <ATA::~ATA()>
c002f153:	83 c4 10             	add    esp,0x10
c002f156:	83 ec 08             	sub    esp,0x8
c002f159:	68 7c 01 00 00       	push   0x17c
c002f15e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f162:	e8 c9 9f fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f167:	83 c4 10             	add    esp,0x10
c002f16a:	83 c4 0c             	add    esp,0xc
c002f16d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f16e <ATAPI::~ATAPI()>:
c002f16e:	83 ec 0c             	sub    esp,0xc
c002f171:	ba f4 38 03 c0       	mov    edx,0xc00338f4
c002f176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f17a:	89 10                	mov    DWORD PTR [eax],edx
c002f17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f180:	83 ec 0c             	sub    esp,0xc
c002f183:	50                   	push   eax
c002f184:	e8 c9 c5 fe ff       	call   c001b752 <PhysicalDisk::~PhysicalDisk()>
c002f189:	83 c4 10             	add    esp,0x10
c002f18c:	90                   	nop
c002f18d:	83 c4 0c             	add    esp,0xc
c002f190:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f192 <ATAPI::~ATAPI()>:
c002f192:	83 ec 0c             	sub    esp,0xc
c002f195:	83 ec 0c             	sub    esp,0xc
c002f198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f19c:	e8 cd ff ff ff       	call   c002f16e <ATAPI::~ATAPI()>
c002f1a1:	83 c4 10             	add    esp,0x10
c002f1a4:	83 ec 08             	sub    esp,0x8
c002f1a7:	68 84 01 00 00       	push   0x184
c002f1ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1b0:	e8 7b 9f fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f1b5:	83 c4 10             	add    esp,0x10
c002f1b8:	83 c4 0c             	add    esp,0xc
c002f1bb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f1bc <SATA::~SATA()>:
c002f1bc:	83 ec 0c             	sub    esp,0xc
c002f1bf:	ba b4 39 03 c0       	mov    edx,0xc00339b4
c002f1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1c8:	89 10                	mov    DWORD PTR [eax],edx
c002f1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1ce:	83 ec 0c             	sub    esp,0xc
c002f1d1:	50                   	push   eax
c002f1d2:	e8 7b c5 fe ff       	call   c001b752 <PhysicalDisk::~PhysicalDisk()>
c002f1d7:	83 c4 10             	add    esp,0x10
c002f1da:	90                   	nop
c002f1db:	83 c4 0c             	add    esp,0xc
c002f1de:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f1e0 <SATA::~SATA()>:
c002f1e0:	83 ec 0c             	sub    esp,0xc
c002f1e3:	83 ec 0c             	sub    esp,0xc
c002f1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1ea:	e8 cd ff ff ff       	call   c002f1bc <SATA::~SATA()>
c002f1ef:	83 c4 10             	add    esp,0x10
c002f1f2:	83 ec 08             	sub    esp,0x8
c002f1f5:	68 7c 01 00 00       	push   0x17c
c002f1fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1fe:	e8 2d 9f fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f203:	83 c4 10             	add    esp,0x10
c002f206:	83 c4 0c             	add    esp,0xc
c002f209:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f20a <SATAPI::~SATAPI()>:
c002f20a:	83 ec 0c             	sub    esp,0xc
c002f20d:	ba d8 3a 03 c0       	mov    edx,0xc0033ad8
c002f212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f216:	89 10                	mov    DWORD PTR [eax],edx
c002f218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f21c:	83 ec 0c             	sub    esp,0xc
c002f21f:	50                   	push   eax
c002f220:	e8 2d c5 fe ff       	call   c001b752 <PhysicalDisk::~PhysicalDisk()>
c002f225:	83 c4 10             	add    esp,0x10
c002f228:	90                   	nop
c002f229:	83 c4 0c             	add    esp,0xc
c002f22c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f22e <SATAPI::~SATAPI()>:
c002f22e:	83 ec 0c             	sub    esp,0xc
c002f231:	83 ec 0c             	sub    esp,0xc
c002f234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f238:	e8 cd ff ff ff       	call   c002f20a <SATAPI::~SATAPI()>
c002f23d:	83 c4 10             	add    esp,0x10
c002f240:	83 ec 08             	sub    esp,0x8
c002f243:	68 84 01 00 00       	push   0x184
c002f248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f24c:	e8 df 9e fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f251:	83 c4 10             	add    esp,0x10
c002f254:	83 c4 0c             	add    esp,0xc
c002f257:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f258 <IOAPIC::~IOAPIC()>:
c002f258:	83 ec 0c             	sub    esp,0xc
c002f25b:	ba 18 3b 03 c0       	mov    edx,0xc0033b18
c002f260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f264:	89 10                	mov    DWORD PTR [eax],edx
c002f266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f26a:	83 ec 0c             	sub    esp,0xc
c002f26d:	50                   	push   eax
c002f26e:	e8 6d bf fe ff       	call   c001b1e0 <Device::~Device()>
c002f273:	83 c4 10             	add    esp,0x10
c002f276:	90                   	nop
c002f277:	83 c4 0c             	add    esp,0xc
c002f27a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f27c <IOAPIC::~IOAPIC()>:
c002f27c:	83 ec 0c             	sub    esp,0xc
c002f27f:	83 ec 0c             	sub    esp,0xc
c002f282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f286:	e8 cd ff ff ff       	call   c002f258 <IOAPIC::~IOAPIC()>
c002f28b:	83 c4 10             	add    esp,0x10
c002f28e:	83 ec 08             	sub    esp,0x8
c002f291:	68 68 01 00 00       	push   0x168
c002f296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f29a:	e8 91 9e fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f29f:	83 c4 10             	add    esp,0x10
c002f2a2:	83 c4 0c             	add    esp,0xc
c002f2a5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f2a8 <APICTimer::~APICTimer()>:
c002f2a8:	83 ec 0c             	sub    esp,0xc
c002f2ab:	ba 60 3b 03 c0       	mov    edx,0xc0033b60
c002f2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2b4:	89 10                	mov    DWORD PTR [eax],edx
c002f2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2ba:	83 ec 0c             	sub    esp,0xc
c002f2bd:	50                   	push   eax
c002f2be:	e8 f9 d9 fe ff       	call   c001ccbc <Timer::~Timer()>
c002f2c3:	83 c4 10             	add    esp,0x10
c002f2c6:	90                   	nop
c002f2c7:	83 c4 0c             	add    esp,0xc
c002f2ca:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f2cc <APICTimer::~APICTimer()>:
c002f2cc:	83 ec 0c             	sub    esp,0xc
c002f2cf:	83 ec 0c             	sub    esp,0xc
c002f2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2d6:	e8 cd ff ff ff       	call   c002f2a8 <APICTimer::~APICTimer()>
c002f2db:	83 c4 10             	add    esp,0x10
c002f2de:	83 ec 08             	sub    esp,0x8
c002f2e1:	68 60 01 00 00       	push   0x160
c002f2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2ea:	e8 41 9e fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f2ef:	83 c4 10             	add    esp,0x10
c002f2f2:	83 c4 0c             	add    esp,0xc
c002f2f5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f2f8 <PIT::~PIT()>:
c002f2f8:	83 ec 0c             	sub    esp,0xc
c002f2fb:	ba b0 3b 03 c0       	mov    edx,0xc0033bb0
c002f300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f304:	89 10                	mov    DWORD PTR [eax],edx
c002f306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f30a:	83 ec 0c             	sub    esp,0xc
c002f30d:	50                   	push   eax
c002f30e:	e8 a9 d9 fe ff       	call   c001ccbc <Timer::~Timer()>
c002f313:	83 c4 10             	add    esp,0x10
c002f316:	90                   	nop
c002f317:	83 c4 0c             	add    esp,0xc
c002f31a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f31c <PIT::~PIT()>:
c002f31c:	83 ec 0c             	sub    esp,0xc
c002f31f:	83 ec 0c             	sub    esp,0xc
c002f322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f326:	e8 cd ff ff ff       	call   c002f2f8 <PIT::~PIT()>
c002f32b:	83 c4 10             	add    esp,0x10
c002f32e:	83 ec 08             	sub    esp,0x8
c002f331:	68 5c 01 00 00       	push   0x15c
c002f336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f33a:	e8 f1 9d fe ff       	call   c0019130 <operator delete(void*, unsigned long)>
c002f33f:	83 c4 10             	add    esp,0x10
c002f342:	83 c4 0c             	add    esp,0xc
c002f345:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 9b 29 03 c0       	mov    esi,0xc003299b
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be b7 29 03 c0       	mov    esi,0xc00329b7
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
